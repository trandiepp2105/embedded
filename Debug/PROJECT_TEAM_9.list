
PROJECT_TEAM_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d940  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800dad0  0800dad0  0000ead0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df68  0800df68  0000f060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800df68  0800df68  0000ef68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df70  0800df70  0000f060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df70  0800df70  0000ef70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df74  0800df74  0000ef74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800df78  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f060  2**0
                  CONTENTS
 10 .bss          00000b24  20000060  20000060  0000f060  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000b84  20000b84  0000f060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000177c0  00000000  00000000  0000f090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b36  00000000  00000000  00026850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  0002a388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b7d  00000000  00000000  0002b800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d04e  00000000  00000000  0004f37d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1285  00000000  00000000  0006c3cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d650  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000f92  00000000  00000000  0013d693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b4c  00000000  00000000  0013e628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00144174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dab8 	.word	0x0800dab8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800dab8 	.word	0x0800dab8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b988 	b.w	8000e94 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	468e      	mov	lr, r1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	4688      	mov	r8, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14a      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d962      	bls.n	8000c78 <__udivmoddi4+0xdc>
 8000bb2:	fab2 f682 	clz	r6, r2
 8000bb6:	b14e      	cbz	r6, 8000bcc <__udivmoddi4+0x30>
 8000bb8:	f1c6 0320 	rsb	r3, r6, #32
 8000bbc:	fa01 f806 	lsl.w	r8, r1, r6
 8000bc0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc4:	40b7      	lsls	r7, r6
 8000bc6:	ea43 0808 	orr.w	r8, r3, r8
 8000bca:	40b4      	lsls	r4, r6
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	fa1f fc87 	uxth.w	ip, r7
 8000bd4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd8:	0c23      	lsrs	r3, r4, #16
 8000bda:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be2:	fb01 f20c 	mul.w	r2, r1, ip
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x62>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bf0:	f080 80ea 	bcs.w	8000dc8 <__udivmoddi4+0x22c>
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f240 80e7 	bls.w	8000dc8 <__udivmoddi4+0x22c>
 8000bfa:	3902      	subs	r1, #2
 8000bfc:	443b      	add	r3, r7
 8000bfe:	1a9a      	subs	r2, r3, r2
 8000c00:	b2a3      	uxth	r3, r4
 8000c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c12:	459c      	cmp	ip, r3
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x8e>
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c1c:	f080 80d6 	bcs.w	8000dcc <__udivmoddi4+0x230>
 8000c20:	459c      	cmp	ip, r3
 8000c22:	f240 80d3 	bls.w	8000dcc <__udivmoddi4+0x230>
 8000c26:	443b      	add	r3, r7
 8000c28:	3802      	subs	r0, #2
 8000c2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c2e:	eba3 030c 	sub.w	r3, r3, ip
 8000c32:	2100      	movs	r1, #0
 8000c34:	b11d      	cbz	r5, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40f3      	lsrs	r3, r6
 8000c38:	2200      	movs	r2, #0
 8000c3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d905      	bls.n	8000c52 <__udivmoddi4+0xb6>
 8000c46:	b10d      	cbz	r5, 8000c4c <__udivmoddi4+0xb0>
 8000c48:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4608      	mov	r0, r1
 8000c50:	e7f5      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c52:	fab3 f183 	clz	r1, r3
 8000c56:	2900      	cmp	r1, #0
 8000c58:	d146      	bne.n	8000ce8 <__udivmoddi4+0x14c>
 8000c5a:	4573      	cmp	r3, lr
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xc8>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 8105 	bhi.w	8000e6e <__udivmoddi4+0x2d2>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4690      	mov	r8, r2
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	d0e5      	beq.n	8000c3e <__udivmoddi4+0xa2>
 8000c72:	e9c5 4800 	strd	r4, r8, [r5]
 8000c76:	e7e2      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f000 8090 	beq.w	8000d9e <__udivmoddi4+0x202>
 8000c7e:	fab2 f682 	clz	r6, r2
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f040 80a4 	bne.w	8000dd0 <__udivmoddi4+0x234>
 8000c88:	1a8a      	subs	r2, r1, r2
 8000c8a:	0c03      	lsrs	r3, r0, #16
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	b2bc      	uxth	r4, r7
 8000c94:	2101      	movs	r1, #1
 8000c96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ca2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d907      	bls.n	8000cba <__udivmoddi4+0x11e>
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cb0:	d202      	bcs.n	8000cb8 <__udivmoddi4+0x11c>
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	f200 80e0 	bhi.w	8000e78 <__udivmoddi4+0x2dc>
 8000cb8:	46c4      	mov	ip, r8
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc8:	fb02 f404 	mul.w	r4, r2, r4
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x144>
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x142>
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	f200 80ca 	bhi.w	8000e72 <__udivmoddi4+0x2d6>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0x98>
 8000ce8:	f1c1 0620 	rsb	r6, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf2:	431f      	orrs	r7, r3
 8000cf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000cfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d04:	4323      	orrs	r3, r4
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	fa1f fc87 	uxth.w	ip, r7
 8000d0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d12:	0c1c      	lsrs	r4, r3, #16
 8000d14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d2e:	f080 809c 	bcs.w	8000e6a <__udivmoddi4+0x2ce>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f240 8099 	bls.w	8000e6a <__udivmoddi4+0x2ce>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	443c      	add	r4, r7
 8000d3c:	eba4 040e 	sub.w	r4, r4, lr
 8000d40:	fa1f fe83 	uxth.w	lr, r3
 8000d44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d48:	fb09 4413 	mls	r4, r9, r3, r4
 8000d4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d54:	45a4      	cmp	ip, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1ce>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d5e:	f080 8082 	bcs.w	8000e66 <__udivmoddi4+0x2ca>
 8000d62:	45a4      	cmp	ip, r4
 8000d64:	d97f      	bls.n	8000e66 <__udivmoddi4+0x2ca>
 8000d66:	3b02      	subs	r3, #2
 8000d68:	443c      	add	r4, r7
 8000d6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d76:	4564      	cmp	r4, ip
 8000d78:	4673      	mov	r3, lr
 8000d7a:	46e1      	mov	r9, ip
 8000d7c:	d362      	bcc.n	8000e44 <__udivmoddi4+0x2a8>
 8000d7e:	d05f      	beq.n	8000e40 <__udivmoddi4+0x2a4>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x1fe>
 8000d82:	ebb8 0203 	subs.w	r2, r8, r3
 8000d86:	eb64 0409 	sbc.w	r4, r4, r9
 8000d8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d92:	431e      	orrs	r6, r3
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e74f      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000da2:	0c01      	lsrs	r1, r0, #16
 8000da4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da8:	b280      	uxth	r0, r0
 8000daa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dae:	463b      	mov	r3, r7
 8000db0:	4638      	mov	r0, r7
 8000db2:	463c      	mov	r4, r7
 8000db4:	46b8      	mov	r8, r7
 8000db6:	46be      	mov	lr, r7
 8000db8:	2620      	movs	r6, #32
 8000dba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dbe:	eba2 0208 	sub.w	r2, r2, r8
 8000dc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dc6:	e766      	b.n	8000c96 <__udivmoddi4+0xfa>
 8000dc8:	4601      	mov	r1, r0
 8000dca:	e718      	b.n	8000bfe <__udivmoddi4+0x62>
 8000dcc:	4610      	mov	r0, r2
 8000dce:	e72c      	b.n	8000c2a <__udivmoddi4+0x8e>
 8000dd0:	f1c6 0220 	rsb	r2, r6, #32
 8000dd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd8:	40b7      	lsls	r7, r6
 8000dda:	40b1      	lsls	r1, r6
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de4:	430a      	orrs	r2, r1
 8000de6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dea:	b2bc      	uxth	r4, r7
 8000dec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb08 f904 	mul.w	r9, r8, r4
 8000dfa:	40b0      	lsls	r0, r6
 8000dfc:	4589      	cmp	r9, r1
 8000dfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e02:	b280      	uxth	r0, r0
 8000e04:	d93e      	bls.n	8000e84 <__udivmoddi4+0x2e8>
 8000e06:	1879      	adds	r1, r7, r1
 8000e08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e0c:	d201      	bcs.n	8000e12 <__udivmoddi4+0x276>
 8000e0e:	4589      	cmp	r9, r1
 8000e10:	d81f      	bhi.n	8000e52 <__udivmoddi4+0x2b6>
 8000e12:	eba1 0109 	sub.w	r1, r1, r9
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fb09 f804 	mul.w	r8, r9, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	b292      	uxth	r2, r2
 8000e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e28:	4542      	cmp	r2, r8
 8000e2a:	d229      	bcs.n	8000e80 <__udivmoddi4+0x2e4>
 8000e2c:	18ba      	adds	r2, r7, r2
 8000e2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e32:	d2c4      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e34:	4542      	cmp	r2, r8
 8000e36:	d2c2      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e38:	f1a9 0102 	sub.w	r1, r9, #2
 8000e3c:	443a      	add	r2, r7
 8000e3e:	e7be      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e40:	45f0      	cmp	r8, lr
 8000e42:	d29d      	bcs.n	8000d80 <__udivmoddi4+0x1e4>
 8000e44:	ebbe 0302 	subs.w	r3, lr, r2
 8000e48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	46e1      	mov	r9, ip
 8000e50:	e796      	b.n	8000d80 <__udivmoddi4+0x1e4>
 8000e52:	eba7 0909 	sub.w	r9, r7, r9
 8000e56:	4449      	add	r1, r9
 8000e58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e60:	fb09 f804 	mul.w	r8, r9, r4
 8000e64:	e7db      	b.n	8000e1e <__udivmoddi4+0x282>
 8000e66:	4673      	mov	r3, lr
 8000e68:	e77f      	b.n	8000d6a <__udivmoddi4+0x1ce>
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	e766      	b.n	8000d3c <__udivmoddi4+0x1a0>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e6fd      	b.n	8000c6e <__udivmoddi4+0xd2>
 8000e72:	443b      	add	r3, r7
 8000e74:	3a02      	subs	r2, #2
 8000e76:	e733      	b.n	8000ce0 <__udivmoddi4+0x144>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	e71c      	b.n	8000cba <__udivmoddi4+0x11e>
 8000e80:	4649      	mov	r1, r9
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e84:	eba1 0109 	sub.w	r1, r1, r9
 8000e88:	46c4      	mov	ip, r8
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fb09 f804 	mul.w	r8, r9, r4
 8000e92:	e7c4      	b.n	8000e1e <__udivmoddi4+0x282>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <FRAM_WriteBytes>:

/**
  * @brief Ghi một mảng byte vào FRAM từ một địa chỉ.
  */
HAL_StatusTypeDef FRAM_WriteBytes(I2C_HandleTypeDef *hi2c, uint16_t memAddress, uint8_t *pData, uint16_t size)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af04      	add	r7, sp, #16
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	817b      	strh	r3, [r7, #10]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	813b      	strh	r3, [r7, #8]
  if ((memAddress + size - 1) > FRAM_MAX_MEMORY_ADDRESS) {
 8000eac:	897a      	ldrh	r2, [r7, #10]
 8000eae:	893b      	ldrh	r3, [r7, #8]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000eb6:	dd01      	ble.n	8000ebc <FRAM_WriteBytes+0x24>
      return HAL_ERROR; // Ghi vượt quá giới hạn bộ nhớ
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e00c      	b.n	8000ed6 <FRAM_WriteBytes+0x3e>
  }
  return HAL_I2C_Mem_Write(hi2c, FRAM_I2C_DEVICE_ADDRESS, memAddress, I2C_MEMADD_SIZE_16BIT, pData, size, FRAM_DEFAULT_TIMEOUT);
 8000ebc:	897a      	ldrh	r2, [r7, #10]
 8000ebe:	2364      	movs	r3, #100	@ 0x64
 8000ec0:	9302      	str	r3, [sp, #8]
 8000ec2:	893b      	ldrh	r3, [r7, #8]
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	2310      	movs	r3, #16
 8000ecc:	21a0      	movs	r1, #160	@ 0xa0
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f004 f9c2 	bl	8005258 <HAL_I2C_Mem_Write>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <FRAM_ReadBytes>:

/**
  * @brief Đọc một mảng byte từ FRAM bắt đầu từ một địa chỉ.
  */
HAL_StatusTypeDef FRAM_ReadBytes(I2C_HandleTypeDef *hi2c, uint16_t memAddress, uint8_t *pData, uint16_t size)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b088      	sub	sp, #32
 8000ee2:	af04      	add	r7, sp, #16
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	607a      	str	r2, [r7, #4]
 8000ee8:	461a      	mov	r2, r3
 8000eea:	460b      	mov	r3, r1
 8000eec:	817b      	strh	r3, [r7, #10]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	813b      	strh	r3, [r7, #8]
  if ((memAddress + size - 1) > FRAM_MAX_MEMORY_ADDRESS) {
 8000ef2:	897a      	ldrh	r2, [r7, #10]
 8000ef4:	893b      	ldrh	r3, [r7, #8]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000efc:	dd01      	ble.n	8000f02 <FRAM_ReadBytes+0x24>
      return HAL_ERROR; // Đọc vượt quá giới hạn bộ nhớ
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00c      	b.n	8000f1c <FRAM_ReadBytes+0x3e>
  }
  return HAL_I2C_Mem_Read(hi2c, FRAM_I2C_DEVICE_ADDRESS, memAddress, I2C_MEMADD_SIZE_16BIT, pData, size, FRAM_DEFAULT_TIMEOUT);
 8000f02:	897a      	ldrh	r2, [r7, #10]
 8000f04:	2364      	movs	r3, #100	@ 0x64
 8000f06:	9302      	str	r3, [sp, #8]
 8000f08:	893b      	ldrh	r3, [r7, #8]
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2310      	movs	r3, #16
 8000f12:	21a0      	movs	r1, #160	@ 0xa0
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f004 fa99 	bl	800544c <HAL_I2C_Mem_Read>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b0c0      	sub	sp, #256	@ 0x100
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  // Task Box Definitions
  uint16_t start_y_tasks_row1 = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 8000f2a:	233c      	movs	r3, #60	@ 0x3c
 8000f2c:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
  uint16_t start_y_tasks_row2 = start_y_tasks_row1 + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8000f30:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8000f34:	3350      	adds	r3, #80	@ 0x50
 8000f36:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
  // task_boxes[0] = (TaskBox_t){MARGIN, start_y_tasks_row1, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-1"};
  // task_boxes[1] = (TaskBox_t){(uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES), start_y_tasks_row1, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-2"};
  // task_boxes[2] = (TaskBox_t){MARGIN, start_y_tasks_row2, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-3"};
  // task_boxes[3] = (TaskBox_t){(uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES), start_y_tasks_row2, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-4"};

  task_boxes[0] = (TaskBox_t){25, 80, 90, 60, "Task 02-1"};
 8000f3a:	4bb4      	ldr	r3, [pc, #720]	@ (800120c <main+0x2e8>)
 8000f3c:	4ab4      	ldr	r2, [pc, #720]	@ (8001210 <main+0x2ec>)
 8000f3e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f40:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  task_boxes[1] = (TaskBox_t){125, 80, 90, 60, "Task 02-2"};
 8000f44:	4bb1      	ldr	r3, [pc, #708]	@ (800120c <main+0x2e8>)
 8000f46:	4ab3      	ldr	r2, [pc, #716]	@ (8001214 <main+0x2f0>)
 8000f48:	330c      	adds	r3, #12
 8000f4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  task_boxes[2] = (TaskBox_t){25, 150, 90, 60, "Task 02-3"};
 8000f50:	4bae      	ldr	r3, [pc, #696]	@ (800120c <main+0x2e8>)
 8000f52:	4ab1      	ldr	r2, [pc, #708]	@ (8001218 <main+0x2f4>)
 8000f54:	3318      	adds	r3, #24
 8000f56:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  task_boxes[3] = (TaskBox_t){125, 150, 90, 60, "Task 02-4"};
 8000f5c:	4bab      	ldr	r3, [pc, #684]	@ (800120c <main+0x2e8>)
 8000f5e:	4aaf      	ldr	r2, [pc, #700]	@ (800121c <main+0x2f8>)
 8000f60:	3324      	adds	r3, #36	@ 0x24
 8000f62:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f64:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  num_tasks = 4; // Set global count
 8000f68:	4bad      	ldr	r3, [pc, #692]	@ (8001220 <main+0x2fc>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	601a      	str	r2, [r3, #0]
  //     BACK_BUTTON_W,                                                             // w: span most of the width
  //     BACK_BUTTON_H,                                                             // h: defined height
  //     "Back"                                                                     // name (used for internal logic if needed, not displayed by default)
  // };

  back_button_box = (TaskBox_t){
 8000f6e:	4bad      	ldr	r3, [pc, #692]	@ (8001224 <main+0x300>)
 8000f70:	4aad      	ldr	r2, [pc, #692]	@ (8001228 <main+0x304>)
 8000f72:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f78:	f002 f9a4 	bl	80032c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7c:	f000 f9ee 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f80:	f000 fb9e 	bl	80016c0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f84:	f000 fb66 	bl	8001654 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000f88:	f000 fb16 	bl	80015b8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8000f8c:	f000 fb42 	bl	8001614 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000f90:	f009 fd9c 	bl	800aacc <MX_FATFS_Init>
  MX_ADC1_Init();
 8000f94:	f000 fa4a 	bl	800142c <MX_ADC1_Init>
  MX_CAN1_Init();
 8000f98:	f000 fa9a 	bl	80014d0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000f9c:	f000 face 	bl	800153c <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  // Bật backlight trước khi khởi tạo LCD
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2140      	movs	r1, #64	@ 0x40
 8000fa4:	48a1      	ldr	r0, [pc, #644]	@ (800122c <main+0x308>)
 8000fa6:	f003 ffb1 	bl	8004f0c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000faa:	2064      	movs	r0, #100	@ 0x64
 8000fac:	f002 f9fc 	bl	80033a8 <HAL_Delay>
  //   Error_Handler();
  // }

  // Cấu hình filter cho CAN2
  CAN_FilterTypeDef sFilterConfig2;
  sFilterConfig2.FilterBank = 14; // CAN2 sử dụng từ bank 14-27
 8000fb0:	230e      	movs	r3, #14
 8000fb2:	657b      	str	r3, [r7, #84]	@ 0x54
  sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sFilterConfig2.FilterIdHigh = 0x0000;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	643b      	str	r3, [r7, #64]	@ 0x40
  sFilterConfig2.FilterIdLow = 0x0000;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	647b      	str	r3, [r7, #68]	@ 0x44
  sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sFilterConfig2.FilterMaskIdLow = 0x0000;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	653b      	str	r3, [r7, #80]	@ 0x50
  sFilterConfig2.FilterActivation = ENABLE;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	663b      	str	r3, [r7, #96]	@ 0x60
  // Không cần đặt SlaveStartFilterBank ở đây

  if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 8000fd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4895      	ldr	r0, [pc, #596]	@ (8001230 <main+0x30c>)
 8000fdc:	f002 ff04 	bl	8003de8 <HAL_CAN_ConfigFilter>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <main+0xc6>
  {
    Error_Handler();
 8000fe6:	f000 fd15 	bl	8001a14 <Error_Handler>
  }

  // Khởi động CAN1 và CAN2
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000fea:	4892      	ldr	r0, [pc, #584]	@ (8001234 <main+0x310>)
 8000fec:	f002 ffda 	bl	8003fa4 <HAL_CAN_Start>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <main+0xd6>
  {
    Error_Handler();
 8000ff6:	f000 fd0d 	bl	8001a14 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan2) != HAL_OK)
 8000ffa:	488d      	ldr	r0, [pc, #564]	@ (8001230 <main+0x30c>)
 8000ffc:	f002 ffd2 	bl	8003fa4 <HAL_CAN_Start>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <main+0xe6>
  {
    Error_Handler();
 8001006:	f000 fd05 	bl	8001a14 <Error_Handler>
  }

  // Kích hoạt thông báo ngắt cho CAN2 RX FIFO0
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800100a:	2102      	movs	r1, #2
 800100c:	4888      	ldr	r0, [pc, #544]	@ (8001230 <main+0x30c>)
 800100e:	f003 f9ff 	bl	8004410 <HAL_CAN_ActivateNotification>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <main+0xf8>
  {
    Error_Handler();
 8001018:	f000 fcfc 	bl	8001a14 <Error_Handler>
  }

  // Cấu hình thông điệp gửi từ CAN1
  TxHeader1.StdId = 0x124;
 800101c:	4b86      	ldr	r3, [pc, #536]	@ (8001238 <main+0x314>)
 800101e:	f44f 7292 	mov.w	r2, #292	@ 0x124
 8001022:	601a      	str	r2, [r3, #0]
  TxHeader1.ExtId = 0x00;
 8001024:	4b84      	ldr	r3, [pc, #528]	@ (8001238 <main+0x314>)
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
  TxHeader1.RTR = CAN_RTR_DATA;
 800102a:	4b83      	ldr	r3, [pc, #524]	@ (8001238 <main+0x314>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  TxHeader1.IDE = CAN_ID_STD;
 8001030:	4b81      	ldr	r3, [pc, #516]	@ (8001238 <main+0x314>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  TxHeader1.DLC = 2;
 8001036:	4b80      	ldr	r3, [pc, #512]	@ (8001238 <main+0x314>)
 8001038:	2202      	movs	r2, #2
 800103a:	611a      	str	r2, [r3, #16]
  TxHeader1.TransmitGlobalTime = DISABLE;
 800103c:	4b7e      	ldr	r3, [pc, #504]	@ (8001238 <main+0x314>)
 800103e:	2200      	movs	r2, #0
 8001040:	751a      	strb	r2, [r3, #20]

  // Khởi tạo LCD và Touch
  // disable touch interrupt
  HAL_NVIC_DisableIRQ(EXTI4_IRQn); // Tắt ngắt trước khi khởi tạo
 8001042:	200a      	movs	r0, #10
 8001044:	f003 fd63 	bl	8004b0e <HAL_NVIC_DisableIRQ>

  Manual_LCD_Init();
 8001048:	f000 fdb6 	bl	8001bb8 <Manual_LCD_Init>
  Manual_Touch_Init(&hspi1);
 800104c:	487b      	ldr	r0, [pc, #492]	@ (800123c <main+0x318>)
 800104e:	f001 fbe1 	bl	8002814 <Manual_Touch_Init>
  Manual_LCD_DrawLayout(); // This function should draw the tasks and the back button
 8001052:	f001 f9db 	bl	800240c <Manual_LCD_DrawLayout>

  if (SD_Init())
 8001056:	f001 fcdf 	bl	8002a18 <SD_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d006      	beq.n	800106e <main+0x14a>
  {
    sprintf(info_text_buffer, "SD OK");
 8001060:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001064:	4976      	ldr	r1, [pc, #472]	@ (8001240 <main+0x31c>)
 8001066:	4618      	mov	r0, r3
 8001068:	f00c f87e 	bl	800d168 <siprintf>
 800106c:	e005      	b.n	800107a <main+0x156>
    //      sprintf(info_text_buffer, "SD OK, File error");
    //    }
  }
  else
  {
    sprintf(info_text_buffer, "SD Init Failed");
 800106e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001072:	4974      	ldr	r1, [pc, #464]	@ (8001244 <main+0x320>)
 8001074:	4618      	mov	r0, r3
 8001076:	f00c f877 	bl	800d168 <siprintf>
  }

  Manual_LCD_UpdateInfoText(info_text_buffer);
 800107a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800107e:	4618      	mov	r0, r3
 8001080:	f001 fb58 	bl	8002734 <Manual_LCD_UpdateInfoText>

  __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
 8001084:	4b70      	ldr	r3, [pc, #448]	@ (8001248 <main+0x324>)
 8001086:	2210      	movs	r2, #16
 8001088:	615a      	str	r2, [r3, #20]

  HAL_NVIC_EnableIRQ(EXTI4_IRQn); // Enable touch interrupt
 800108a:	200a      	movs	r0, #10
 800108c:	f003 fd31 	bl	8004af2 <HAL_NVIC_EnableIRQ>

  int can2_received_temperature_int;

  while (1)
  {
    if (current_task == 0)
 8001090:	4b6e      	ldr	r3, [pc, #440]	@ (800124c <main+0x328>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d106      	bne.n	80010a6 <main+0x182>
    {
      Task2_LedBlink(GPIOB, GPIO_PIN_1, BLINK_SPEED_500_MS);
 8001098:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800109c:	2102      	movs	r1, #2
 800109e:	4863      	ldr	r0, [pc, #396]	@ (800122c <main+0x308>)
 80010a0:	f002 f858 	bl	8003154 <Task2_LedBlink>
 80010a4:	e7f4      	b.n	8001090 <main+0x16c>
    }
    else if (current_task == 1)
 80010a6:	4b69      	ldr	r3, [pc, #420]	@ (800124c <main+0x328>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d152      	bne.n	8001154 <main+0x230>
    {
      char temp_display_str[50];
      uint8_t current_temp_c = (uint8_t)Read_Internal_Temperature();
 80010ae:	f002 f865 	bl	800317c <Read_Internal_Temperature>
 80010b2:	eef0 7a40 	vmov.f32	s15, s0
 80010b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010ba:	edc7 7a01 	vstr	s15, [r7, #4]
 80010be:	793b      	ldrb	r3, [r7, #4]
 80010c0:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
      uint8_t temp_to_send = current_temp_c;
 80010c4:	f897 30fa 	ldrb.w	r3, [r7, #250]	@ 0xfa
 80010c8:	f887 30f9 	strb.w	r3, [r7, #249]	@ 0xf9
      TxData1[0] = GROUP_NUMBER;
 80010cc:	4b60      	ldr	r3, [pc, #384]	@ (8001250 <main+0x32c>)
 80010ce:	2209      	movs	r2, #9
 80010d0:	701a      	strb	r2, [r3, #0]
      TxData1[1] = temp_to_send;
 80010d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001250 <main+0x32c>)
 80010d4:	f897 30f9 	ldrb.w	r3, [r7, #249]	@ 0xf9
 80010d8:	7053      	strb	r3, [r2, #1]
      HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox1);
 80010da:	4b5e      	ldr	r3, [pc, #376]	@ (8001254 <main+0x330>)
 80010dc:	4a5c      	ldr	r2, [pc, #368]	@ (8001250 <main+0x32c>)
 80010de:	4956      	ldr	r1, [pc, #344]	@ (8001238 <main+0x314>)
 80010e0:	4854      	ldr	r0, [pc, #336]	@ (8001234 <main+0x310>)
 80010e2:	f002 ffa3 	bl	800402c <HAL_CAN_AddTxMessage>
      while (!can2_received_data_flag)
 80010e6:	e002      	b.n	80010ee <main+0x1ca>
      {
        HAL_Delay(10);
 80010e8:	200a      	movs	r0, #10
 80010ea:	f002 f95d 	bl	80033a8 <HAL_Delay>
      while (!can2_received_data_flag)
 80010ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001258 <main+0x334>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f7      	beq.n	80010e8 <main+0x1c4>
      }
      can2_received_data_flag = 0; // Reset the flag for the next message
 80010f8:	4b57      	ldr	r3, [pc, #348]	@ (8001258 <main+0x334>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
      can2_received_temperature_int = (int)can2_received_temperature;
 80010fe:	4b57      	ldr	r3, [pc, #348]	@ (800125c <main+0x338>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b2db      	uxtb	r3, r3
 8001104:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

      sprintf(temp_display_str, "Group: %d, temp: %d *C", can2_received_group, can2_received_temperature_int);
 8001108:	4b55      	ldr	r3, [pc, #340]	@ (8001260 <main+0x33c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	f107 000c 	add.w	r0, r7, #12
 8001114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001118:	4952      	ldr	r1, [pc, #328]	@ (8001264 <main+0x340>)
 800111a:	f00c f825 	bl	800d168 <siprintf>
      // sprintf(temp_display_str, "Group: %d, temp: %d *C", GROUP_NUMBER, temp_to_send);
      strcpy(info_text_buffer, temp_display_str);
 800111e:	f107 020c 	add.w	r2, r7, #12
 8001122:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f00c f873 	bl	800d214 <strcpy>
      HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 800112e:	200a      	movs	r0, #10
 8001130:	f003 fced 	bl	8004b0e <HAL_NVIC_DisableIRQ>

      Manual_LCD_UpdateInfoText(info_text_buffer);
 8001134:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fafb 	bl	8002734 <Manual_LCD_UpdateInfoText>
      __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
 800113e:	4b42      	ldr	r3, [pc, #264]	@ (8001248 <main+0x324>)
 8001140:	2210      	movs	r2, #16
 8001142:	615a      	str	r2, [r3, #20]
      HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001144:	200a      	movs	r0, #10
 8001146:	f003 fcd4 	bl	8004af2 <HAL_NVIC_EnableIRQ>
      HAL_Delay(500); // Delay to avoid flooding the CAN bus
 800114a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800114e:	f002 f92b 	bl	80033a8 <HAL_Delay>
 8001152:	e79d      	b.n	8001090 <main+0x16c>
    }
    else if (current_task == 2)
 8001154:	4b3d      	ldr	r3, [pc, #244]	@ (800124c <main+0x328>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b02      	cmp	r3, #2
 800115a:	f040 80aa 	bne.w	80012b2 <main+0x38e>
    {
      HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 800115e:	200a      	movs	r0, #10
 8001160:	f003 fcd5 	bl	8004b0e <HAL_NVIC_DisableIRQ>

      byte_read = SD_ReadTeamFile(read_data, sizeof(read_data));
 8001164:	2132      	movs	r1, #50	@ 0x32
 8001166:	4840      	ldr	r0, [pc, #256]	@ (8001268 <main+0x344>)
 8001168:	f001 fd06 	bl	8002b78 <SD_ReadTeamFile>
 800116c:	4603      	mov	r3, r0
 800116e:	b2da      	uxtb	r2, r3
 8001170:	4b3e      	ldr	r3, [pc, #248]	@ (800126c <main+0x348>)
 8001172:	701a      	strb	r2, [r3, #0]

      if (byte_read > 0)
 8001174:	4b3d      	ldr	r3, [pc, #244]	@ (800126c <main+0x348>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d00c      	beq.n	8001196 <main+0x272>
      {
        // Đọc thành công, hiển thị nội dung
        sprintf(info_text_buffer, "SD content: %s", read_data);
 800117c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001180:	4a39      	ldr	r2, [pc, #228]	@ (8001268 <main+0x344>)
 8001182:	493b      	ldr	r1, [pc, #236]	@ (8001270 <main+0x34c>)
 8001184:	4618      	mov	r0, r3
 8001186:	f00b ffef 	bl	800d168 <siprintf>
        Manual_LCD_UpdateInfoText(info_text_buffer);
 800118a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fad0 	bl	8002734 <Manual_LCD_UpdateInfoText>
 8001194:	e082      	b.n	800129c <main+0x378>
      }
      else
      {
        // Đọc thất bại
        sprintf(info_text_buffer, "Read error (%d)", byte_read);
 8001196:	4b35      	ldr	r3, [pc, #212]	@ (800126c <main+0x348>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011a0:	4934      	ldr	r1, [pc, #208]	@ (8001274 <main+0x350>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00b ffe0 	bl	800d168 <siprintf>
        Manual_LCD_UpdateInfoText(info_text_buffer);
 80011a8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 fac1 	bl	8002734 <Manual_LCD_UpdateInfoText>

        // Thử khởi tạo lại SD trong trường hợp bị ngắt kết nối
        if (SD_Init())
 80011b2:	f001 fc31 	bl	8002a18 <SD_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d06f      	beq.n	800129c <main+0x378>
        {
          sprintf(info_text_buffer, "SD reinitialized");
 80011bc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011c0:	492d      	ldr	r1, [pc, #180]	@ (8001278 <main+0x354>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00b ffd0 	bl	800d168 <siprintf>
          Manual_LCD_UpdateInfoText(info_text_buffer);
 80011c8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 fab1 	bl	8002734 <Manual_LCD_UpdateInfoText>
          HAL_Delay(1000);
 80011d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011d6:	f002 f8e7 	bl	80033a8 <HAL_Delay>

          // Thử đọc lại
          byte_read = SD_ReadTeamFile(read_data, sizeof(read_data));
 80011da:	2132      	movs	r1, #50	@ 0x32
 80011dc:	4822      	ldr	r0, [pc, #136]	@ (8001268 <main+0x344>)
 80011de:	f001 fccb 	bl	8002b78 <SD_ReadTeamFile>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b21      	ldr	r3, [pc, #132]	@ (800126c <main+0x348>)
 80011e8:	701a      	strb	r2, [r3, #0]
          if (byte_read > 0)
 80011ea:	4b20      	ldr	r3, [pc, #128]	@ (800126c <main+0x348>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d046      	beq.n	8001280 <main+0x35c>
          {
            sprintf(info_text_buffer, "Content: %s", read_data);
 80011f2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001268 <main+0x344>)
 80011f8:	4920      	ldr	r1, [pc, #128]	@ (800127c <main+0x358>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	f00b ffb4 	bl	800d168 <siprintf>
            Manual_LCD_UpdateInfoText(info_text_buffer);
 8001200:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001204:	4618      	mov	r0, r3
 8001206:	f001 fa95 	bl	8002734 <Manual_LCD_UpdateInfoText>
 800120a:	e047      	b.n	800129c <main+0x378>
 800120c:	2000047c 	.word	0x2000047c
 8001210:	0800db84 	.word	0x0800db84
 8001214:	0800db9c 	.word	0x0800db9c
 8001218:	0800dbb4 	.word	0x0800dbb4
 800121c:	0800dbcc 	.word	0x0800dbcc
 8001220:	20000518 	.word	0x20000518
 8001224:	2000070c 	.word	0x2000070c
 8001228:	0800dbe0 	.word	0x0800dbe0
 800122c:	40020400 	.word	0x40020400
 8001230:	200005a4 	.word	0x200005a4
 8001234:	200006e4 	.word	0x200006e4
 8001238:	20000500 	.word	0x20000500
 800123c:	20000688 	.word	0x20000688
 8001240:	0800dad0 	.word	0x0800dad0
 8001244:	0800dad8 	.word	0x0800dad8
 8001248:	40013c00 	.word	0x40013c00
 800124c:	20000000 	.word	0x20000000
 8001250:	2000051c 	.word	0x2000051c
 8001254:	200006e0 	.word	0x200006e0
 8001258:	2000007c 	.word	0x2000007c
 800125c:	20000685 	.word	0x20000685
 8001260:	200005fe 	.word	0x200005fe
 8001264:	0800dae8 	.word	0x0800dae8
 8001268:	200005cc 	.word	0x200005cc
 800126c:	20000684 	.word	0x20000684
 8001270:	0800db00 	.word	0x0800db00
 8001274:	0800db10 	.word	0x0800db10
 8001278:	0800db20 	.word	0x0800db20
 800127c:	0800db34 	.word	0x0800db34
          }
          else
          {
            sprintf(info_text_buffer, "Still error (%d)", byte_read);
 8001280:	4b2e      	ldr	r3, [pc, #184]	@ (800133c <main+0x418>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800128a:	492d      	ldr	r1, [pc, #180]	@ (8001340 <main+0x41c>)
 800128c:	4618      	mov	r0, r3
 800128e:	f00b ff6b 	bl	800d168 <siprintf>
            Manual_LCD_UpdateInfoText(info_text_buffer);
 8001292:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001296:	4618      	mov	r0, r3
 8001298:	f001 fa4c 	bl	8002734 <Manual_LCD_UpdateInfoText>
          }
        }
      }
      __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
 800129c:	4b29      	ldr	r3, [pc, #164]	@ (8001344 <main+0x420>)
 800129e:	2210      	movs	r2, #16
 80012a0:	615a      	str	r2, [r3, #20]
      HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80012a2:	200a      	movs	r0, #10
 80012a4:	f003 fc25 	bl	8004af2 <HAL_NVIC_EnableIRQ>
      HAL_Delay(500); // Delay to avoid flooding the LCD
 80012a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012ac:	f002 f87c 	bl	80033a8 <HAL_Delay>
 80012b0:	e6ee      	b.n	8001090 <main+0x16c>
    }
    else if (current_task == 3)
 80012b2:	4b25      	ldr	r3, [pc, #148]	@ (8001348 <main+0x424>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b03      	cmp	r3, #3
 80012b8:	f47f aeea 	bne.w	8001090 <main+0x16c>
    {
      HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80012bc:	200a      	movs	r0, #10
 80012be:	f003 fc26 	bl	8004b0e <HAL_NVIC_DisableIRQ>

      // Task 02-4: Read temperature from FRAM
      uint8_t read_value = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      // Đọc nhiệt độ từ FRAM
      GPIO_PinState prev_btn_state = current_button_state;
 80012c8:	4b20      	ldr	r3, [pc, #128]	@ (800134c <main+0x428>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb

      CheckUserButtonAndSaveTemp(&current_button_state);
 80012d0:	481e      	ldr	r0, [pc, #120]	@ (800134c <main+0x428>)
 80012d2:	f001 ff9b 	bl	800320c <CheckUserButtonAndSaveTemp>
      //        {
      //          sprintf(info_text_buffer, "FRAM Read ERROR");
      //        }
      //        Manual_LCD_UpdateInfoText(info_text_buffer);
      // Kiểm tra trạng thái nút và ghi nhiệt độ vào FRAM
      if (current_button_state == GPIO_PIN_SET && prev_btn_state == GPIO_PIN_RESET)
 80012d6:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <main+0x428>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d123      	bne.n	8001326 <main+0x402>
 80012de:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d11f      	bne.n	8001326 <main+0x402>
      {
        // Nút vừa được nhấn xuống
        if (FRAM_ReadBytes(&hi2c2, USER_TEMP_ADDR, &read_value, 1) == HAL_OK)
 80012e6:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 80012ea:	2301      	movs	r3, #1
 80012ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012f0:	4817      	ldr	r0, [pc, #92]	@ (8001350 <main+0x42c>)
 80012f2:	f7ff fdf4 	bl	8000ede <FRAM_ReadBytes>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d109      	bne.n	8001310 <main+0x3ec>
        {
          sprintf(info_text_buffer, "FRAM Read OK: %d", read_value);
 80012fc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001300:	461a      	mov	r2, r3
 8001302:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001306:	4913      	ldr	r1, [pc, #76]	@ (8001354 <main+0x430>)
 8001308:	4618      	mov	r0, r3
 800130a:	f00b ff2d 	bl	800d168 <siprintf>
 800130e:	e005      	b.n	800131c <main+0x3f8>
        }
        else
        {
          sprintf(info_text_buffer, "FRAM Read ERROR");
 8001310:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001314:	4910      	ldr	r1, [pc, #64]	@ (8001358 <main+0x434>)
 8001316:	4618      	mov	r0, r3
 8001318:	f00b ff26 	bl	800d168 <siprintf>
        }
        Manual_LCD_UpdateInfoText(info_text_buffer);
 800131c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001320:	4618      	mov	r0, r3
 8001322:	f001 fa07 	bl	8002734 <Manual_LCD_UpdateInfoText>
      }
      __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
 8001326:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <main+0x420>)
 8001328:	2210      	movs	r2, #16
 800132a:	615a      	str	r2, [r3, #20]
      HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800132c:	200a      	movs	r0, #10
 800132e:	f003 fbe0 	bl	8004af2 <HAL_NVIC_EnableIRQ>
      HAL_Delay(10); // Delay to avoid flooding the LCD
 8001332:	200a      	movs	r0, #10
 8001334:	f002 f838 	bl	80033a8 <HAL_Delay>
    if (current_task == 0)
 8001338:	e6aa      	b.n	8001090 <main+0x16c>
 800133a:	bf00      	nop
 800133c:	20000684 	.word	0x20000684
 8001340:	0800db40 	.word	0x0800db40
 8001344:	40013c00 	.word	0x40013c00
 8001348:	20000000 	.word	0x20000000
 800134c:	2000007d 	.word	0x2000007d
 8001350:	200004ac 	.word	0x200004ac
 8001354:	0800db54 	.word	0x0800db54
 8001358:	0800db68 	.word	0x0800db68

0800135c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b094      	sub	sp, #80	@ 0x50
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	2230      	movs	r2, #48	@ 0x30
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f00b ff1e 	bl	800d1ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	4b27      	ldr	r3, [pc, #156]	@ (8001424 <SystemClock_Config+0xc8>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001388:	4a26      	ldr	r2, [pc, #152]	@ (8001424 <SystemClock_Config+0xc8>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800138e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001390:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <SystemClock_Config+0xc8>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001394:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <SystemClock_Config+0xcc>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a20      	ldr	r2, [pc, #128]	@ (8001428 <SystemClock_Config+0xcc>)
 80013a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <SystemClock_Config+0xcc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b8:	2301      	movs	r3, #1
 80013ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c2:	2302      	movs	r3, #2
 80013c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013cc:	2319      	movs	r3, #25
 80013ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80013d0:	2390      	movs	r3, #144	@ 0x90
 80013d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013d8:	2304      	movs	r3, #4
 80013da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	4618      	mov	r0, r3
 80013e2:	f006 f9f7 	bl	80077d4 <HAL_RCC_OscConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013ec:	f000 fb12 	bl	8001a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013f0:	230f      	movs	r3, #15
 80013f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f4:	2302      	movs	r3, #2
 80013f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001400:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2102      	movs	r1, #2
 800140c:	4618      	mov	r0, r3
 800140e:	f006 fc59 	bl	8007cc4 <HAL_RCC_ClockConfig>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001418:	f000 fafc 	bl	8001a14 <Error_Handler>
  }
}
 800141c:	bf00      	nop
 800141e:	3750      	adds	r7, #80	@ 0x50
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000

0800142c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001432:	463b      	mov	r3, r7
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 800143e:	4b21      	ldr	r3, [pc, #132]	@ (80014c4 <MX_ADC1_Init+0x98>)
 8001440:	4a21      	ldr	r2, [pc, #132]	@ (80014c8 <MX_ADC1_Init+0x9c>)
 8001442:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001444:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <MX_ADC1_Init+0x98>)
 8001446:	2200      	movs	r2, #0
 8001448:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800144a:	4b1e      	ldr	r3, [pc, #120]	@ (80014c4 <MX_ADC1_Init+0x98>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001450:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <MX_ADC1_Init+0x98>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001456:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <MX_ADC1_Init+0x98>)
 8001458:	2200      	movs	r2, #0
 800145a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800145c:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <MX_ADC1_Init+0x98>)
 800145e:	2200      	movs	r2, #0
 8001460:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001464:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <MX_ADC1_Init+0x98>)
 8001466:	2200      	movs	r2, #0
 8001468:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800146a:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <MX_ADC1_Init+0x98>)
 800146c:	4a17      	ldr	r2, [pc, #92]	@ (80014cc <MX_ADC1_Init+0xa0>)
 800146e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001470:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <MX_ADC1_Init+0x98>)
 8001472:	2200      	movs	r2, #0
 8001474:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <MX_ADC1_Init+0x98>)
 8001478:	2201      	movs	r2, #1
 800147a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_ADC1_Init+0x98>)
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <MX_ADC1_Init+0x98>)
 8001486:	2201      	movs	r2, #1
 8001488:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800148a:	480e      	ldr	r0, [pc, #56]	@ (80014c4 <MX_ADC1_Init+0x98>)
 800148c:	f001 ffb0 	bl	80033f0 <HAL_ADC_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001496:	f000 fabd 	bl	8001a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800149a:	2310      	movs	r3, #16
 800149c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800149e:	2301      	movs	r3, #1
 80014a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a6:	463b      	mov	r3, r7
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	@ (80014c4 <MX_ADC1_Init+0x98>)
 80014ac:	f002 f982 	bl	80037b4 <HAL_ADC_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014b6:	f000 faad 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	2000055c 	.word	0x2000055c
 80014c8:	40012000 	.word	0x40012000
 80014cc:	0f000001 	.word	0x0f000001

080014d0 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014d4:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <MX_CAN1_Init+0x64>)
 80014d6:	4a18      	ldr	r2, [pc, #96]	@ (8001538 <MX_CAN1_Init+0x68>)
 80014d8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 72;
 80014da:	4b16      	ldr	r3, [pc, #88]	@ (8001534 <MX_CAN1_Init+0x64>)
 80014dc:	2248      	movs	r2, #72	@ 0x48
 80014de:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80014e0:	4b14      	ldr	r3, [pc, #80]	@ (8001534 <MX_CAN1_Init+0x64>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014e6:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <MX_CAN1_Init+0x64>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_CAN1_Init+0x64>)
 80014ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014f2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001534 <MX_CAN1_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <MX_CAN1_Init+0x64>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <MX_CAN1_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <MX_CAN1_Init+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <MX_CAN1_Init+0x64>)
 800150e:	2200      	movs	r2, #0
 8001510:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001512:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <MX_CAN1_Init+0x64>)
 8001514:	2200      	movs	r2, #0
 8001516:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <MX_CAN1_Init+0x64>)
 800151a:	2200      	movs	r2, #0
 800151c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	@ (8001534 <MX_CAN1_Init+0x64>)
 8001520:	f002 fb66 	bl	8003bf0 <HAL_CAN_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800152a:	f000 fa73 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200006e4 	.word	0x200006e4
 8001538:	40006400 	.word	0x40006400

0800153c <MX_CAN2_Init>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001540:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <MX_CAN2_Init+0x74>)
 8001542:	4a1c      	ldr	r2, [pc, #112]	@ (80015b4 <MX_CAN2_Init+0x78>)
 8001544:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 72;
 8001546:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <MX_CAN2_Init+0x74>)
 8001548:	2248      	movs	r2, #72	@ 0x48
 800154a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800154c:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <MX_CAN2_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001552:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <MX_CAN2_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001558:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <MX_CAN2_Init+0x74>)
 800155a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800155e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001560:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <MX_CAN2_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001566:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_CAN2_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800156c:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <MX_CAN2_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001572:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_CAN2_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001578:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <MX_CAN2_Init+0x74>)
 800157a:	2200      	movs	r2, #0
 800157c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_CAN2_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001584:	4b0a      	ldr	r3, [pc, #40]	@ (80015b0 <MX_CAN2_Init+0x74>)
 8001586:	2200      	movs	r2, #0
 8001588:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800158a:	4809      	ldr	r0, [pc, #36]	@ (80015b0 <MX_CAN2_Init+0x74>)
 800158c:	f002 fb30 	bl	8003bf0 <HAL_CAN_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8001596:	f000 fa3d 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2040      	movs	r0, #64	@ 0x40
 80015a0:	f003 fa8b 	bl	8004aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80015a4:	2040      	movs	r0, #64	@ 0x40
 80015a6:	f003 faa4 	bl	8004af2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END CAN2_Init 2 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200005a4 	.word	0x200005a4
 80015b4:	40006800 	.word	0x40006800

080015b8 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <MX_I2C2_Init+0x50>)
 80015be:	4a13      	ldr	r2, [pc, #76]	@ (800160c <MX_I2C2_Init+0x54>)
 80015c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015c2:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <MX_I2C2_Init+0x50>)
 80015c4:	4a12      	ldr	r2, [pc, #72]	@ (8001610 <MX_I2C2_Init+0x58>)
 80015c6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <MX_I2C2_Init+0x50>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001608 <MX_I2C2_Init+0x50>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <MX_I2C2_Init+0x50>)
 80015d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <MX_I2C2_Init+0x50>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <MX_I2C2_Init+0x50>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e8:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <MX_I2C2_Init+0x50>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <MX_I2C2_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	@ (8001608 <MX_I2C2_Init+0x50>)
 80015f6:	f003 fcd5 	bl	8004fa4 <HAL_I2C_Init>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001600:	f000 fa08 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200004ac 	.word	0x200004ac
 800160c:	40005800 	.word	0x40005800
 8001610:	000186a0 	.word	0x000186a0

08001614 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_SDIO_SD_Init+0x38>)
 800161a:	4a0d      	ldr	r2, [pc, #52]	@ (8001650 <MX_SDIO_SD_Init+0x3c>)
 800161c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800161e:	4b0b      	ldr	r3, [pc, #44]	@ (800164c <MX_SDIO_SD_Init+0x38>)
 8001620:	2200      	movs	r2, #0
 8001622:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001624:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_SDIO_SD_Init+0x38>)
 8001626:	2200      	movs	r2, #0
 8001628:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800162a:	4b08      	ldr	r3, [pc, #32]	@ (800164c <MX_SDIO_SD_Init+0x38>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <MX_SDIO_SD_Init+0x38>)
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001636:	4b05      	ldr	r3, [pc, #20]	@ (800164c <MX_SDIO_SD_Init+0x38>)
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <MX_SDIO_SD_Init+0x38>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	20000600 	.word	0x20000600
 8001650:	40012c00 	.word	0x40012c00

08001654 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001658:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <MX_SPI1_Init+0x64>)
 800165a:	4a18      	ldr	r2, [pc, #96]	@ (80016bc <MX_SPI1_Init+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800165e:	4b16      	ldr	r3, [pc, #88]	@ (80016b8 <MX_SPI1_Init+0x64>)
 8001660:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001664:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <MX_SPI1_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <MX_SPI1_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <MX_SPI1_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001678:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <MX_SPI1_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <MX_SPI1_Init+0x64>)
 8001680:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001684:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001686:	4b0c      	ldr	r3, [pc, #48]	@ (80016b8 <MX_SPI1_Init+0x64>)
 8001688:	2220      	movs	r2, #32
 800168a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800168c:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <MX_SPI1_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001692:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <MX_SPI1_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <MX_SPI1_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <MX_SPI1_Init+0x64>)
 80016a0:	220a      	movs	r2, #10
 80016a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	@ (80016b8 <MX_SPI1_Init+0x64>)
 80016a6:	f007 ff0d 	bl	80094c4 <HAL_SPI_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016b0:	f000 f9b0 	bl	8001a14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000688 	.word	0x20000688
 80016bc:	40013000 	.word	0x40013000

080016c0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08a      	sub	sp, #40	@ 0x28
 80016c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]
 80016d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b50      	ldr	r3, [pc, #320]	@ (800181c <MX_GPIO_Init+0x15c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a4f      	ldr	r2, [pc, #316]	@ (800181c <MX_GPIO_Init+0x15c>)
 80016e0:	f043 0304 	orr.w	r3, r3, #4
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b4d      	ldr	r3, [pc, #308]	@ (800181c <MX_GPIO_Init+0x15c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b49      	ldr	r3, [pc, #292]	@ (800181c <MX_GPIO_Init+0x15c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a48      	ldr	r2, [pc, #288]	@ (800181c <MX_GPIO_Init+0x15c>)
 80016fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b46      	ldr	r3, [pc, #280]	@ (800181c <MX_GPIO_Init+0x15c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b42      	ldr	r3, [pc, #264]	@ (800181c <MX_GPIO_Init+0x15c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a41      	ldr	r2, [pc, #260]	@ (800181c <MX_GPIO_Init+0x15c>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b3f      	ldr	r3, [pc, #252]	@ (800181c <MX_GPIO_Init+0x15c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b3b      	ldr	r3, [pc, #236]	@ (800181c <MX_GPIO_Init+0x15c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a3a      	ldr	r2, [pc, #232]	@ (800181c <MX_GPIO_Init+0x15c>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b38      	ldr	r3, [pc, #224]	@ (800181c <MX_GPIO_Init+0x15c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	603b      	str	r3, [r7, #0]
 800174a:	4b34      	ldr	r3, [pc, #208]	@ (800181c <MX_GPIO_Init+0x15c>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	4a33      	ldr	r2, [pc, #204]	@ (800181c <MX_GPIO_Init+0x15c>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6313      	str	r3, [r2, #48]	@ 0x30
 8001756:	4b31      	ldr	r3, [pc, #196]	@ (800181c <MX_GPIO_Init+0x15c>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
 8001768:	482d      	ldr	r0, [pc, #180]	@ (8001820 <MX_GPIO_Init+0x160>)
 800176a:	f003 fbcf 	bl	8004f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001774:	482b      	ldr	r0, [pc, #172]	@ (8001824 <MX_GPIO_Init+0x164>)
 8001776:	f003 fbc9 	bl	8004f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800177a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800177e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001784:	2302      	movs	r3, #2
 8001786:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4826      	ldr	r0, [pc, #152]	@ (8001828 <MX_GPIO_Init+0x168>)
 8001790:	f003 fa08 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001794:	2302      	movs	r3, #2
 8001796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001798:	2300      	movs	r3, #0
 800179a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179c:	2301      	movs	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	4619      	mov	r1, r3
 80017a6:	481f      	ldr	r0, [pc, #124]	@ (8001824 <MX_GPIO_Init+0x164>)
 80017a8:	f003 f9fc 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 LCD_RST_Pin LCD_BL_Pin LCD_CS_Pin
                           LCD_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1 | LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin;
 80017ac:	f44f 73e3 	mov.w	r3, #454	@ 0x1c6
 80017b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	2301      	movs	r3, #1
 80017b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4816      	ldr	r0, [pc, #88]	@ (8001820 <MX_GPIO_Init+0x160>)
 80017c6:	f003 f9ed 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 80017ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d0:	2301      	movs	r3, #1
 80017d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	4619      	mov	r1, r3
 80017e2:	4810      	ldr	r0, [pc, #64]	@ (8001824 <MX_GPIO_Init+0x164>)
 80017e4:	f003 f9de 	bl	8004ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 80017e8:	2310      	movs	r3, #16
 80017ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4808      	ldr	r0, [pc, #32]	@ (8001820 <MX_GPIO_Init+0x160>)
 80017fe:	f003 f9d1 	bl	8004ba4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	200a      	movs	r0, #10
 8001808:	f003 f957 	bl	8004aba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800180c:	200a      	movs	r0, #10
 800180e:	f003 f970 	bl	8004af2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	@ 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400
 8001824:	40020000 	.word	0x40020000
 8001828:	40020800 	.word	0x40020800

0800182c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b087      	sub	sp, #28
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TP_IRQ_Pin)
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	2b10      	cmp	r3, #16
 800183a:	f040 80a9 	bne.w	8001990 <HAL_GPIO_EXTI_Callback+0x164>
  {
    if (HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == GPIO_PIN_RESET)
 800183e:	2110      	movs	r1, #16
 8001840:	4855      	ldr	r0, [pc, #340]	@ (8001998 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001842:	f003 fb4b 	bl	8004edc <HAL_GPIO_ReadPin>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	f040 80a1 	bne.w	8001990 <HAL_GPIO_EXTI_Callback+0x164>
    {
      Coordinate rawPoint, displayPoint;

      if (Manual_Touch_GetRawPoint(&rawPoint))
 800184e:	f107 0310 	add.w	r3, r7, #16
 8001852:	4618      	mov	r0, r3
 8001854:	f000 fff4 	bl	8002840 <Manual_Touch_GetRawPoint>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8098 	beq.w	8001990 <HAL_GPIO_EXTI_Callback+0x164>
      {
        Manual_Touch_ApplyCalibration(&displayPoint, &rawPoint);
 8001860:	f107 0210 	add.w	r2, r7, #16
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f001 f800 	bl	8002870 <Manual_Touch_ApplyCalibration>

        // Kiểm tra xem có chạm vào task box nào không
        for (int i = 0; i < num_tasks; i++)
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	e058      	b.n	8001928 <HAL_GPIO_EXTI_Callback+0xfc>
        {
          if (displayPoint.x >= task_boxes[i].x &&
 8001876:	89b9      	ldrh	r1, [r7, #12]
 8001878:	4848      	ldr	r0, [pc, #288]	@ (800199c <HAL_GPIO_EXTI_Callback+0x170>)
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	4613      	mov	r3, r2
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4403      	add	r3, r0
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	4299      	cmp	r1, r3
 800188a:	d34a      	bcc.n	8001922 <HAL_GPIO_EXTI_Callback+0xf6>
              displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 800188c:	89bb      	ldrh	r3, [r7, #12]
 800188e:	4618      	mov	r0, r3
 8001890:	4942      	ldr	r1, [pc, #264]	@ (800199c <HAL_GPIO_EXTI_Callback+0x170>)
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	461c      	mov	r4, r3
 80018a2:	493e      	ldr	r1, [pc, #248]	@ (800199c <HAL_GPIO_EXTI_Callback+0x170>)
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	4613      	mov	r3, r2
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	4413      	add	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	3304      	adds	r3, #4
 80018b2:	881b      	ldrh	r3, [r3, #0]
 80018b4:	4423      	add	r3, r4
          if (displayPoint.x >= task_boxes[i].x &&
 80018b6:	4298      	cmp	r0, r3
 80018b8:	da33      	bge.n	8001922 <HAL_GPIO_EXTI_Callback+0xf6>
              displayPoint.y >= task_boxes[i].y &&
 80018ba:	89f9      	ldrh	r1, [r7, #14]
 80018bc:	4837      	ldr	r0, [pc, #220]	@ (800199c <HAL_GPIO_EXTI_Callback+0x170>)
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4403      	add	r3, r0
 80018ca:	3302      	adds	r3, #2
 80018cc:	881b      	ldrh	r3, [r3, #0]
              displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 80018ce:	4299      	cmp	r1, r3
 80018d0:	d327      	bcc.n	8001922 <HAL_GPIO_EXTI_Callback+0xf6>
              displayPoint.y < (task_boxes[i].y + task_boxes[i].h))
 80018d2:	89fb      	ldrh	r3, [r7, #14]
 80018d4:	4618      	mov	r0, r3
 80018d6:	4931      	ldr	r1, [pc, #196]	@ (800199c <HAL_GPIO_EXTI_Callback+0x170>)
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	3302      	adds	r3, #2
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	461c      	mov	r4, r3
 80018ea:	492c      	ldr	r1, [pc, #176]	@ (800199c <HAL_GPIO_EXTI_Callback+0x170>)
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	3306      	adds	r3, #6
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	4423      	add	r3, r4
              displayPoint.y >= task_boxes[i].y &&
 80018fe:	4298      	cmp	r0, r3
 8001900:	da0f      	bge.n	8001922 <HAL_GPIO_EXTI_Callback+0xf6>
          {
            current_task = i;                              // Đặt current_task thành index của task box
 8001902:	4a27      	ldr	r2, [pc, #156]	@ (80019a0 <HAL_GPIO_EXTI_Callback+0x174>)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	6013      	str	r3, [r2, #0]
            Manual_LCD_UpdateInfoText(task_boxes[i].name); // Cập nhật thông tin task
 8001908:	4924      	ldr	r1, [pc, #144]	@ (800199c <HAL_GPIO_EXTI_Callback+0x170>)
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	4613      	mov	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	440b      	add	r3, r1
 8001916:	3308      	adds	r3, #8
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f000 ff0a 	bl	8002734 <Manual_LCD_UpdateInfoText>
            return;
 8001920:	e036      	b.n	8001990 <HAL_GPIO_EXTI_Callback+0x164>
        for (int i = 0; i < num_tasks; i++)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <HAL_GPIO_EXTI_Callback+0x178>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	429a      	cmp	r2, r3
 8001930:	dba1      	blt.n	8001876 <HAL_GPIO_EXTI_Callback+0x4a>
          }
        }

        // Kiểm tra xem có chạm vào nút Back không
        if (displayPoint.x >= back_button_box.x &&
 8001932:	89ba      	ldrh	r2, [r7, #12]
 8001934:	4b1c      	ldr	r3, [pc, #112]	@ (80019a8 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d321      	bcc.n	8001980 <HAL_GPIO_EXTI_Callback+0x154>
            displayPoint.x < (back_button_box.x + back_button_box.w) &&
 800193c:	89bb      	ldrh	r3, [r7, #12]
 800193e:	461a      	mov	r2, r3
 8001940:	4b19      	ldr	r3, [pc, #100]	@ (80019a8 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001948:	889b      	ldrh	r3, [r3, #4]
 800194a:	440b      	add	r3, r1
        if (displayPoint.x >= back_button_box.x &&
 800194c:	429a      	cmp	r2, r3
 800194e:	da17      	bge.n	8001980 <HAL_GPIO_EXTI_Callback+0x154>
            displayPoint.y >= back_button_box.y &&
 8001950:	89fa      	ldrh	r2, [r7, #14]
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001954:	885b      	ldrh	r3, [r3, #2]
            displayPoint.x < (back_button_box.x + back_button_box.w) &&
 8001956:	429a      	cmp	r2, r3
 8001958:	d312      	bcc.n	8001980 <HAL_GPIO_EXTI_Callback+0x154>
            displayPoint.y < (back_button_box.y + back_button_box.h))
 800195a:	89fb      	ldrh	r3, [r7, #14]
 800195c:	461a      	mov	r2, r3
 800195e:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001960:	885b      	ldrh	r3, [r3, #2]
 8001962:	4619      	mov	r1, r3
 8001964:	4b10      	ldr	r3, [pc, #64]	@ (80019a8 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001966:	88db      	ldrh	r3, [r3, #6]
 8001968:	440b      	add	r3, r1
            displayPoint.y >= back_button_box.y &&
 800196a:	429a      	cmp	r2, r3
 800196c:	da08      	bge.n	8001980 <HAL_GPIO_EXTI_Callback+0x154>
        {
          current_task = 4;                                // Nút Back
 800196e:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <HAL_GPIO_EXTI_Callback+0x174>)
 8001970:	2204      	movs	r2, #4
 8001972:	601a      	str	r2, [r3, #0]
          Manual_LCD_UpdateInfoText(back_button_box.name); // Cập nhật thông tin nút Back
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <HAL_GPIO_EXTI_Callback+0x17c>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fedb 	bl	8002734 <Manual_LCD_UpdateInfoText>
          return;
 800197e:	e007      	b.n	8001990 <HAL_GPIO_EXTI_Callback+0x164>
        }

        // Nếu không chạm vào task box nào, đặt current_task về -1
        current_task = -1;
 8001980:	4b07      	ldr	r3, [pc, #28]	@ (80019a0 <HAL_GPIO_EXTI_Callback+0x174>)
 8001982:	f04f 32ff 	mov.w	r2, #4294967295
 8001986:	601a      	str	r2, [r3, #0]
        Manual_LCD_UpdateInfoText("No task selected"); // Cập nhật thông tin không có task nào được chọn
 8001988:	4808      	ldr	r0, [pc, #32]	@ (80019ac <HAL_GPIO_EXTI_Callback+0x180>)
 800198a:	f000 fed3 	bl	8002734 <Manual_LCD_UpdateInfoText>
        return;
 800198e:	bf00      	nop
      }
    }
  }
}
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}
 8001996:	bf00      	nop
 8001998:	40020400 	.word	0x40020400
 800199c:	2000047c 	.word	0x2000047c
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000518 	.word	0x20000518
 80019a8:	2000070c 	.word	0x2000070c
 80019ac:	0800dbec 	.word	0x0800dbec

080019b0 <HAL_CAN_RxFifo0MsgPendingCallback>:
//     // __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
//   }
// }

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if (hcan->Instance == CAN2)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0f      	ldr	r2, [pc, #60]	@ (80019fc <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d117      	bne.n	80019f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
  {
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader2, RxData2) == HAL_OK)
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80019c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80019c6:	2100      	movs	r1, #0
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f002 fbff 	bl	80041cc <HAL_CAN_GetRxMessage>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10e      	bne.n	80019f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
    {
      // Giải mã dữ liệu nhận được (Tùy chọn, để debug)
      if (RxHeader2.DLC >= 2) // Đảm bảo có đủ dữ liệu
 80019d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d90a      	bls.n	80019f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
      {
        can2_received_group = RxData2[0];
 80019dc:	4b08      	ldr	r3, [pc, #32]	@ (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80019de:	781a      	ldrb	r2, [r3, #0]
 80019e0:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 80019e2:	701a      	strb	r2, [r3, #0]
        can2_received_temperature = RxData2[1];
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 80019e6:	785a      	ldrb	r2, [r3, #1]
 80019e8:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 80019ea:	701a      	strb	r2, [r3, #0]
        can2_received_data_flag = 1; // Đánh dấu đã nhận dữ liệu
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
      }
    }
  }
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40006800 	.word	0x40006800
 8001a00:	20000478 	.word	0x20000478
 8001a04:	20000540 	.word	0x20000540
 8001a08:	200005fe 	.word	0x200005fe
 8001a0c:	20000685 	.word	0x20000685
 8001a10:	2000007c 	.word	0x2000007c

08001a14 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a18:	b672      	cpsid	i
}
 8001a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <Error_Handler+0x8>

08001a20 <LCD_SPI_Send>:
// External SPI handle defined in main.c
extern SPI_HandleTypeDef hspi1;

// Low-level SPI communication functions
static void LCD_SPI_Send(uint8_t data)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8001a2a:	1df9      	adds	r1, r7, #7
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a30:	2201      	movs	r2, #1
 8001a32:	4803      	ldr	r0, [pc, #12]	@ (8001a40 <LCD_SPI_Send+0x20>)
 8001a34:	f007 fdcf 	bl	80095d6 <HAL_SPI_Transmit>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20000688 	.word	0x20000688

08001a44 <LCD_Write_Cmd>:

static void LCD_Write_Cmd(uint8_t cmd)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // DC low for command
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a54:	480a      	ldr	r0, [pc, #40]	@ (8001a80 <LCD_Write_Cmd+0x3c>)
 8001a56:	f003 fa59 	bl	8004f0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2180      	movs	r1, #128	@ 0x80
 8001a5e:	4808      	ldr	r0, [pc, #32]	@ (8001a80 <LCD_Write_Cmd+0x3c>)
 8001a60:	f003 fa54 	bl	8004f0c <HAL_GPIO_WritePin>
    LCD_SPI_Send(cmd);
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ffda 	bl	8001a20 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	2180      	movs	r1, #128	@ 0x80
 8001a70:	4803      	ldr	r0, [pc, #12]	@ (8001a80 <LCD_Write_Cmd+0x3c>)
 8001a72:	f003 fa4b 	bl	8004f0c <HAL_GPIO_WritePin>
}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40020400 	.word	0x40020400

08001a84 <LCD_Write_Data>:

static void LCD_Write_Data(uint8_t data)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a94:	480a      	ldr	r0, [pc, #40]	@ (8001ac0 <LCD_Write_Data+0x3c>)
 8001a96:	f003 fa39 	bl	8004f0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2180      	movs	r1, #128	@ 0x80
 8001a9e:	4808      	ldr	r0, [pc, #32]	@ (8001ac0 <LCD_Write_Data+0x3c>)
 8001aa0:	f003 fa34 	bl	8004f0c <HAL_GPIO_WritePin>
    LCD_SPI_Send(data);
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff ffba 	bl	8001a20 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001aac:	2201      	movs	r2, #1
 8001aae:	2180      	movs	r1, #128	@ 0x80
 8001ab0:	4803      	ldr	r0, [pc, #12]	@ (8001ac0 <LCD_Write_Data+0x3c>)
 8001ab2:	f003 fa2b 	bl	8004f0c <HAL_GPIO_WritePin>
}
 8001ab6:	bf00      	nop
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40020400 	.word	0x40020400

08001ac4 <LCD_Write_Data16>:

static void LCD_Write_Data16(uint16_t data)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ad4:	4810      	ldr	r0, [pc, #64]	@ (8001b18 <LCD_Write_Data16+0x54>)
 8001ad6:	f003 fa19 	bl	8004f0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001ada:	2200      	movs	r2, #0
 8001adc:	2180      	movs	r1, #128	@ 0x80
 8001ade:	480e      	ldr	r0, [pc, #56]	@ (8001b18 <LCD_Write_Data16+0x54>)
 8001ae0:	f003 fa14 	bl	8004f0c <HAL_GPIO_WritePin>
    uint8_t bytes[2];
    bytes[0] = (data >> 8) & 0xFF;
 8001ae4:	88fb      	ldrh	r3, [r7, #6]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	733b      	strb	r3, [r7, #12]
    bytes[1] = data & 0xFF;
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, bytes, 2, HAL_MAX_DELAY);
 8001af4:	f107 010c 	add.w	r1, r7, #12
 8001af8:	f04f 33ff 	mov.w	r3, #4294967295
 8001afc:	2202      	movs	r2, #2
 8001afe:	4807      	ldr	r0, [pc, #28]	@ (8001b1c <LCD_Write_Data16+0x58>)
 8001b00:	f007 fd69 	bl	80095d6 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001b04:	2201      	movs	r2, #1
 8001b06:	2180      	movs	r1, #128	@ 0x80
 8001b08:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <LCD_Write_Data16+0x54>)
 8001b0a:	f003 f9ff 	bl	8004f0c <HAL_GPIO_WritePin>
}
 8001b0e:	bf00      	nop
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40020400 	.word	0x40020400
 8001b1c:	20000688 	.word	0x20000688

08001b20 <LCD_Set_Address_Window>:

// Set drawing window
static void LCD_Set_Address_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4604      	mov	r4, r0
 8001b28:	4608      	mov	r0, r1
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4623      	mov	r3, r4
 8001b30:	80fb      	strh	r3, [r7, #6]
 8001b32:	4603      	mov	r3, r0
 8001b34:	80bb      	strh	r3, [r7, #4]
 8001b36:	460b      	mov	r3, r1
 8001b38:	807b      	strh	r3, [r7, #2]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	803b      	strh	r3, [r7, #0]
    LCD_Write_Cmd(0x2A); // Column Address Set
 8001b3e:	202a      	movs	r0, #42	@ 0x2a
 8001b40:	f7ff ff80 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(x1 >> 8);
 8001b44:	88fb      	ldrh	r3, [r7, #6]
 8001b46:	0a1b      	lsrs	r3, r3, #8
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff99 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(x1 & 0xFF);
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff94 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(x2 >> 8);
 8001b5c:	887b      	ldrh	r3, [r7, #2]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff8d 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(x2 & 0xFF);
 8001b6a:	887b      	ldrh	r3, [r7, #2]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff88 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0x2B); // Page Address Set
 8001b74:	202b      	movs	r0, #43	@ 0x2b
 8001b76:	f7ff ff65 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(y1 >> 8);
 8001b7a:	88bb      	ldrh	r3, [r7, #4]
 8001b7c:	0a1b      	lsrs	r3, r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff7e 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(y1 & 0xFF);
 8001b88:	88bb      	ldrh	r3, [r7, #4]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff79 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(y2 >> 8);
 8001b92:	883b      	ldrh	r3, [r7, #0]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff72 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(y2 & 0xFF);
 8001ba0:	883b      	ldrh	r3, [r7, #0]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff6d 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0x2C); // Memory Write
 8001baa:	202c      	movs	r0, #44	@ 0x2c
 8001bac:	f7ff ff4a 	bl	8001a44 <LCD_Write_Cmd>
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}

08001bb8 <Manual_LCD_Init>:
        }
    }
}

void Manual_LCD_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0

    // Hardware Reset
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	4889      	ldr	r0, [pc, #548]	@ (8001de8 <Manual_LCD_Init+0x230>)
 8001bc2:	f003 f9a3 	bl	8004f0c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001bc6:	2064      	movs	r0, #100	@ 0x64
 8001bc8:	f001 fbee 	bl	80033a8 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2104      	movs	r1, #4
 8001bd0:	4885      	ldr	r0, [pc, #532]	@ (8001de8 <Manual_LCD_Init+0x230>)
 8001bd2:	f003 f99b 	bl	8004f0c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001bd6:	2064      	movs	r0, #100	@ 0x64
 8001bd8:	f001 fbe6 	bl	80033a8 <HAL_Delay>

    // Backlight ON
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	2140      	movs	r1, #64	@ 0x40
 8001be0:	4881      	ldr	r0, [pc, #516]	@ (8001de8 <Manual_LCD_Init+0x230>)
 8001be2:	f003 f993 	bl	8004f0c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001be6:	200a      	movs	r0, #10
 8001be8:	f001 fbde 	bl	80033a8 <HAL_Delay>

    // Initialization sequence (Example for ILI9341 - ADJUST FOR YOUR LCD)
    LCD_Write_Cmd(0xCF); // Power Control B
 8001bec:	20cf      	movs	r0, #207	@ 0xcf
 8001bee:	f7ff ff29 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f7ff ff46 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 8001bf8:	20c1      	movs	r0, #193	@ 0xc1
 8001bfa:	f7ff ff43 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x30);
 8001bfe:	2030      	movs	r0, #48	@ 0x30
 8001c00:	f7ff ff40 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0xED); // Power on sequence control
 8001c04:	20ed      	movs	r0, #237	@ 0xed
 8001c06:	f7ff ff1d 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x64);
 8001c0a:	2064      	movs	r0, #100	@ 0x64
 8001c0c:	f7ff ff3a 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f7ff ff37 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x12);
 8001c16:	2012      	movs	r0, #18
 8001c18:	f7ff ff34 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x81);
 8001c1c:	2081      	movs	r0, #129	@ 0x81
 8001c1e:	f7ff ff31 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0xE8); // Driver timing control A
 8001c22:	20e8      	movs	r0, #232	@ 0xe8
 8001c24:	f7ff ff0e 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x85);
 8001c28:	2085      	movs	r0, #133	@ 0x85
 8001c2a:	f7ff ff2b 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001c2e:	2000      	movs	r0, #0
 8001c30:	f7ff ff28 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x78);
 8001c34:	2078      	movs	r0, #120	@ 0x78
 8001c36:	f7ff ff25 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0xCB); // Power control A
 8001c3a:	20cb      	movs	r0, #203	@ 0xcb
 8001c3c:	f7ff ff02 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x39);
 8001c40:	2039      	movs	r0, #57	@ 0x39
 8001c42:	f7ff ff1f 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x2C);
 8001c46:	202c      	movs	r0, #44	@ 0x2c
 8001c48:	f7ff ff1c 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f7ff ff19 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x34);
 8001c52:	2034      	movs	r0, #52	@ 0x34
 8001c54:	f7ff ff16 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x02);
 8001c58:	2002      	movs	r0, #2
 8001c5a:	f7ff ff13 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0xF7); // Pump ratio control
 8001c5e:	20f7      	movs	r0, #247	@ 0xf7
 8001c60:	f7ff fef0 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x20);
 8001c64:	2020      	movs	r0, #32
 8001c66:	f7ff ff0d 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0xEA); // Driver timing control B
 8001c6a:	20ea      	movs	r0, #234	@ 0xea
 8001c6c:	f7ff feea 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001c70:	2000      	movs	r0, #0
 8001c72:	f7ff ff07 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff ff04 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0xC0);  // Power Control 1
 8001c7c:	20c0      	movs	r0, #192	@ 0xc0
 8001c7e:	f7ff fee1 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x23); // VRH[5:0]
 8001c82:	2023      	movs	r0, #35	@ 0x23
 8001c84:	f7ff fefe 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0xC1);  // Power Control 2
 8001c88:	20c1      	movs	r0, #193	@ 0xc1
 8001c8a:	f7ff fedb 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x10); // SAP[2:0];BT[3:0]
 8001c8e:	2010      	movs	r0, #16
 8001c90:	f7ff fef8 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0xC5);  // VCOM Control 1
 8001c94:	20c5      	movs	r0, #197	@ 0xc5
 8001c96:	f7ff fed5 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x3E); // Contrast
 8001c9a:	203e      	movs	r0, #62	@ 0x3e
 8001c9c:	f7ff fef2 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x28);
 8001ca0:	2028      	movs	r0, #40	@ 0x28
 8001ca2:	f7ff feef 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0xC7);  // VCOM Control 2
 8001ca6:	20c7      	movs	r0, #199	@ 0xc7
 8001ca8:	f7ff fecc 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x86); // --
 8001cac:	2086      	movs	r0, #134	@ 0x86
 8001cae:	f7ff fee9 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0x36); // Memory Access Control
 8001cb2:	2036      	movs	r0, #54	@ 0x36
 8001cb4:	f7ff fec6 	bl	8001a44 <LCD_Write_Cmd>
    // LCD_Write_Data(0x08); // Previous value
    LCD_Write_Data(0x28); // Try this: MV=1, MY=0, MX=0, BGR=1 (Landscape, X:T-B, Y:L-R)
 8001cb8:	2028      	movs	r0, #40	@ 0x28
 8001cba:	f7ff fee3 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0x3A);  // Pixel Format Set
 8001cbe:	203a      	movs	r0, #58	@ 0x3a
 8001cc0:	f7ff fec0 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x55); // 16 bits/pixel
 8001cc4:	2055      	movs	r0, #85	@ 0x55
 8001cc6:	f7ff fedd 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0xB1); // Frame Rate Control (In Normal Mode/Full Colors)
 8001cca:	20b1      	movs	r0, #177	@ 0xb1
 8001ccc:	f7ff feba 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	f7ff fed7 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x18);
 8001cd6:	2018      	movs	r0, #24
 8001cd8:	f7ff fed4 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0xB6); // Display Function Control
 8001cdc:	20b6      	movs	r0, #182	@ 0xb6
 8001cde:	f7ff feb1 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x08);
 8001ce2:	2008      	movs	r0, #8
 8001ce4:	f7ff fece 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x82);
 8001ce8:	2082      	movs	r0, #130	@ 0x82
 8001cea:	f7ff fecb 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x27);
 8001cee:	2027      	movs	r0, #39	@ 0x27
 8001cf0:	f7ff fec8 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0xF2);  // Enable 3G
 8001cf4:	20f2      	movs	r0, #242	@ 0xf2
 8001cf6:	f7ff fea5 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x00); // 3Gamma Function Disable
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7ff fec2 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0x26);  // Gamma Set
 8001d00:	2026      	movs	r0, #38	@ 0x26
 8001d02:	f7ff fe9f 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x01); // Gamma curve selected
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7ff febc 	bl	8001a84 <LCD_Write_Data>

    // ... (Positive and Negative Gamma Correction remain the same) ...
    LCD_Write_Cmd(0xE0); // Positive Gamma Correction
 8001d0c:	20e0      	movs	r0, #224	@ 0xe0
 8001d0e:	f7ff fe99 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x0F);
 8001d12:	200f      	movs	r0, #15
 8001d14:	f7ff feb6 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001d18:	2031      	movs	r0, #49	@ 0x31
 8001d1a:	f7ff feb3 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x2B);
 8001d1e:	202b      	movs	r0, #43	@ 0x2b
 8001d20:	f7ff feb0 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8001d24:	200c      	movs	r0, #12
 8001d26:	f7ff fead 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001d2a:	200e      	movs	r0, #14
 8001d2c:	f7ff feaa 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8001d30:	2008      	movs	r0, #8
 8001d32:	f7ff fea7 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x4E);
 8001d36:	204e      	movs	r0, #78	@ 0x4e
 8001d38:	f7ff fea4 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0xF1);
 8001d3c:	20f1      	movs	r0, #241	@ 0xf1
 8001d3e:	f7ff fea1 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x37);
 8001d42:	2037      	movs	r0, #55	@ 0x37
 8001d44:	f7ff fe9e 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 8001d48:	2007      	movs	r0, #7
 8001d4a:	f7ff fe9b 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x10);
 8001d4e:	2010      	movs	r0, #16
 8001d50:	f7ff fe98 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001d54:	2003      	movs	r0, #3
 8001d56:	f7ff fe95 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001d5a:	200e      	movs	r0, #14
 8001d5c:	f7ff fe92 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x09);
 8001d60:	2009      	movs	r0, #9
 8001d62:	f7ff fe8f 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff fe8c 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0xE1); // Negative Gamma Correction
 8001d6c:	20e1      	movs	r0, #225	@ 0xe1
 8001d6e:	f7ff fe69 	bl	8001a44 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff fe86 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001d78:	200e      	movs	r0, #14
 8001d7a:	f7ff fe83 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x14);
 8001d7e:	2014      	movs	r0, #20
 8001d80:	f7ff fe80 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f7ff fe7d 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x11);
 8001d8a:	2011      	movs	r0, #17
 8001d8c:	f7ff fe7a 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 8001d90:	2007      	movs	r0, #7
 8001d92:	f7ff fe77 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001d96:	2031      	movs	r0, #49	@ 0x31
 8001d98:	f7ff fe74 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 8001d9c:	20c1      	movs	r0, #193	@ 0xc1
 8001d9e:	f7ff fe71 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x48);
 8001da2:	2048      	movs	r0, #72	@ 0x48
 8001da4:	f7ff fe6e 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8001da8:	2008      	movs	r0, #8
 8001daa:	f7ff fe6b 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8001dae:	200f      	movs	r0, #15
 8001db0:	f7ff fe68 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8001db4:	200c      	movs	r0, #12
 8001db6:	f7ff fe65 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001dba:	2031      	movs	r0, #49	@ 0x31
 8001dbc:	f7ff fe62 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x36);
 8001dc0:	2036      	movs	r0, #54	@ 0x36
 8001dc2:	f7ff fe5f 	bl	8001a84 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8001dc6:	200f      	movs	r0, #15
 8001dc8:	f7ff fe5c 	bl	8001a84 <LCD_Write_Data>

    LCD_Write_Cmd(0x11); // Exit Sleep
 8001dcc:	2011      	movs	r0, #17
 8001dce:	f7ff fe39 	bl	8001a44 <LCD_Write_Cmd>
    HAL_Delay(120);
 8001dd2:	2078      	movs	r0, #120	@ 0x78
 8001dd4:	f001 fae8 	bl	80033a8 <HAL_Delay>
    LCD_Write_Cmd(0x29); // Display ON
 8001dd8:	2029      	movs	r0, #41	@ 0x29
 8001dda:	f7ff fe33 	bl	8001a44 <LCD_Write_Cmd>

    Manual_LCD_Clear(COLOR_BLACK);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f000 f804 	bl	8001dec <Manual_LCD_Clear>

    // Enable touch interrupt
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40020400 	.word	0x40020400

08001dec <Manual_LCD_Clear>:

void Manual_LCD_Clear(uint16_t color)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
    LCD_Set_Address_Window(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 8001df6:	f240 133f 	movw	r3, #319	@ 0x13f
 8001dfa:	22ef      	movs	r2, #239	@ 0xef
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff fe8e 	bl	8001b20 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001e04:	2201      	movs	r2, #1
 8001e06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e0a:	4815      	ldr	r0, [pc, #84]	@ (8001e60 <Manual_LCD_Clear+0x74>)
 8001e0c:	f003 f87e 	bl	8004f0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001e10:	2200      	movs	r2, #0
 8001e12:	2180      	movs	r1, #128	@ 0x80
 8001e14:	4812      	ldr	r0, [pc, #72]	@ (8001e60 <Manual_LCD_Clear+0x74>)
 8001e16:	f003 f879 	bl	8004f0c <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	723b      	strb	r3, [r7, #8]
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	e00a      	b.n	8001e46 <Manual_LCD_Clear+0x5a>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8001e30:	f107 0108 	add.w	r1, r7, #8
 8001e34:	f04f 33ff 	mov.w	r3, #4294967295
 8001e38:	2202      	movs	r2, #2
 8001e3a:	480a      	ldr	r0, [pc, #40]	@ (8001e64 <Manual_LCD_Clear+0x78>)
 8001e3c:	f007 fbcb 	bl	80095d6 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3301      	adds	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001e4c:	d3f0      	bcc.n	8001e30 <Manual_LCD_Clear+0x44>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	4803      	ldr	r0, [pc, #12]	@ (8001e60 <Manual_LCD_Clear+0x74>)
 8001e54:	f003 f85a 	bl	8004f0c <HAL_GPIO_WritePin>
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40020400 	.word	0x40020400
 8001e64:	20000688 	.word	0x20000688

08001e68 <Manual_LCD_DrawPixel>:

void Manual_LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
 8001e72:	460b      	mov	r3, r1
 8001e74:	80bb      	strh	r3, [r7, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	807b      	strh	r3, [r7, #2]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	2bef      	cmp	r3, #239	@ 0xef
 8001e7e:	d80e      	bhi.n	8001e9e <Manual_LCD_DrawPixel+0x36>
 8001e80:	88bb      	ldrh	r3, [r7, #4]
 8001e82:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001e86:	d20a      	bcs.n	8001e9e <Manual_LCD_DrawPixel+0x36>
        return;
    LCD_Set_Address_Window(x, y, x, y);
 8001e88:	88bb      	ldrh	r3, [r7, #4]
 8001e8a:	88fa      	ldrh	r2, [r7, #6]
 8001e8c:	88b9      	ldrh	r1, [r7, #4]
 8001e8e:	88f8      	ldrh	r0, [r7, #6]
 8001e90:	f7ff fe46 	bl	8001b20 <LCD_Set_Address_Window>
    LCD_Write_Data16(color);
 8001e94:	887b      	ldrh	r3, [r7, #2]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fe14 	bl	8001ac4 <LCD_Write_Data16>
 8001e9c:	e000      	b.n	8001ea0 <Manual_LCD_DrawPixel+0x38>
        return;
 8001e9e:	bf00      	nop
}
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <Manual_LCD_DrawLine>:

void Manual_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8001ea6:	b590      	push	{r4, r7, lr}
 8001ea8:	b087      	sub	sp, #28
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4604      	mov	r4, r0
 8001eae:	4608      	mov	r0, r1
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4623      	mov	r3, r4
 8001eb6:	80fb      	strh	r3, [r7, #6]
 8001eb8:	4603      	mov	r3, r0
 8001eba:	80bb      	strh	r3, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001ec4:	883a      	ldrh	r2, [r7, #0]
 8001ec6:	88bb      	ldrh	r3, [r7, #4]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001ece:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001ed2:	8879      	ldrh	r1, [r7, #2]
 8001ed4:	88fb      	ldrh	r3, [r7, #6]
 8001ed6:	1acb      	subs	r3, r1, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bfb8      	it	lt
 8001edc:	425b      	neglt	r3, r3
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	bfcc      	ite	gt
 8001ee2:	2301      	movgt	r3, #1
 8001ee4:	2300      	movle	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	827b      	strh	r3, [r7, #18]
    if (steep)
 8001eea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <Manual_LCD_DrawLine+0x64>
    {
        uint16_t temp;
        temp = x1;
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	823b      	strh	r3, [r7, #16]
        x1 = y1;
 8001ef6:	88bb      	ldrh	r3, [r7, #4]
 8001ef8:	80fb      	strh	r3, [r7, #6]
        y1 = temp;
 8001efa:	8a3b      	ldrh	r3, [r7, #16]
 8001efc:	80bb      	strh	r3, [r7, #4]
        temp = x2;
 8001efe:	887b      	ldrh	r3, [r7, #2]
 8001f00:	823b      	strh	r3, [r7, #16]
        x2 = y2;
 8001f02:	883b      	ldrh	r3, [r7, #0]
 8001f04:	807b      	strh	r3, [r7, #2]
        y2 = temp;
 8001f06:	8a3b      	ldrh	r3, [r7, #16]
 8001f08:	803b      	strh	r3, [r7, #0]
    }
    if (x1 > x2)
 8001f0a:	88fa      	ldrh	r2, [r7, #6]
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d90b      	bls.n	8001f2a <Manual_LCD_DrawLine+0x84>
    {
        uint16_t temp;
        temp = x1;
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	81fb      	strh	r3, [r7, #14]
        x1 = x2;
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	80fb      	strh	r3, [r7, #6]
        x2 = temp;
 8001f1a:	89fb      	ldrh	r3, [r7, #14]
 8001f1c:	807b      	strh	r3, [r7, #2]
        temp = y1;
 8001f1e:	88bb      	ldrh	r3, [r7, #4]
 8001f20:	81fb      	strh	r3, [r7, #14]
        y1 = y2;
 8001f22:	883b      	ldrh	r3, [r7, #0]
 8001f24:	80bb      	strh	r3, [r7, #4]
        y2 = temp;
 8001f26:	89fb      	ldrh	r3, [r7, #14]
 8001f28:	803b      	strh	r3, [r7, #0]
    }
    int16_t dx = x2 - x1;
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	81bb      	strh	r3, [r7, #12]
    int16_t dy = abs(y2 - y1);
 8001f34:	883a      	ldrh	r2, [r7, #0]
 8001f36:	88bb      	ldrh	r3, [r7, #4]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bfb8      	it	lt
 8001f3e:	425b      	neglt	r3, r3
 8001f40:	817b      	strh	r3, [r7, #10]
    int16_t err = dx / 2;
 8001f42:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f46:	0fda      	lsrs	r2, r3, #31
 8001f48:	4413      	add	r3, r2
 8001f4a:	105b      	asrs	r3, r3, #1
 8001f4c:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;
    if (y1 < y2)
 8001f4e:	88ba      	ldrh	r2, [r7, #4]
 8001f50:	883b      	ldrh	r3, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d202      	bcs.n	8001f5c <Manual_LCD_DrawLine+0xb6>
        ystep = 1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	82bb      	strh	r3, [r7, #20]
 8001f5a:	e029      	b.n	8001fb0 <Manual_LCD_DrawLine+0x10a>
    else
        ystep = -1;
 8001f5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f60:	82bb      	strh	r3, [r7, #20]

    for (; x1 <= x2; x1++)
 8001f62:	e025      	b.n	8001fb0 <Manual_LCD_DrawLine+0x10a>
    {
        if (steep)
 8001f64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <Manual_LCD_DrawLine+0xd4>
            Manual_LCD_DrawPixel(y1, x1, color);
 8001f6c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001f6e:	88f9      	ldrh	r1, [r7, #6]
 8001f70:	88bb      	ldrh	r3, [r7, #4]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff ff78 	bl	8001e68 <Manual_LCD_DrawPixel>
 8001f78:	e005      	b.n	8001f86 <Manual_LCD_DrawLine+0xe0>
        else
            Manual_LCD_DrawPixel(x1, y1, color);
 8001f7a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001f7c:	88b9      	ldrh	r1, [r7, #4]
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff71 	bl	8001e68 <Manual_LCD_DrawPixel>
        err -= dy;
 8001f86:	8afa      	ldrh	r2, [r7, #22]
 8001f88:	897b      	ldrh	r3, [r7, #10]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	82fb      	strh	r3, [r7, #22]
        if (err < 0)
 8001f90:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	da08      	bge.n	8001faa <Manual_LCD_DrawLine+0x104>
        {
            y1 += ystep;
 8001f98:	8aba      	ldrh	r2, [r7, #20]
 8001f9a:	88bb      	ldrh	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8001fa0:	8afa      	ldrh	r2, [r7, #22]
 8001fa2:	89bb      	ldrh	r3, [r7, #12]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	82fb      	strh	r3, [r7, #22]
    for (; x1 <= x2; x1++)
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	3301      	adds	r3, #1
 8001fae:	80fb      	strh	r3, [r7, #6]
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	887b      	ldrh	r3, [r7, #2]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d9d5      	bls.n	8001f64 <Manual_LCD_DrawLine+0xbe>
        }
    }
}
 8001fb8:	bf00      	nop
 8001fba:	bf00      	nop
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd90      	pop	{r4, r7, pc}

08001fc2 <Manual_LCD_DrawRectangle>:

void Manual_LCD_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001fc2:	b590      	push	{r4, r7, lr}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af02      	add	r7, sp, #8
 8001fc8:	4604      	mov	r4, r0
 8001fca:	4608      	mov	r0, r1
 8001fcc:	4611      	mov	r1, r2
 8001fce:	461a      	mov	r2, r3
 8001fd0:	4623      	mov	r3, r4
 8001fd2:	80fb      	strh	r3, [r7, #6]
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	80bb      	strh	r3, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 8001fe0:	88fb      	ldrh	r3, [r7, #6]
 8001fe2:	2bef      	cmp	r3, #239	@ 0xef
 8001fe4:	d865      	bhi.n	80020b2 <Manual_LCD_DrawRectangle+0xf0>
 8001fe6:	88bb      	ldrh	r3, [r7, #4]
 8001fe8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001fec:	d261      	bcs.n	80020b2 <Manual_LCD_DrawRectangle+0xf0>
        return;
    if ((x + width - 1) >= LCD_WIDTH)
 8001fee:	88fa      	ldrh	r2, [r7, #6]
 8001ff0:	887b      	ldrh	r3, [r7, #2]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	2bf0      	cmp	r3, #240	@ 0xf0
 8001ff6:	dd03      	ble.n	8002000 <Manual_LCD_DrawRectangle+0x3e>
        width = LCD_WIDTH - x;
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001ffe:	807b      	strh	r3, [r7, #2]
    if ((y + height - 1) >= LCD_HEIGHT)
 8002000:	88ba      	ldrh	r2, [r7, #4]
 8002002:	883b      	ldrh	r3, [r7, #0]
 8002004:	4413      	add	r3, r2
 8002006:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800200a:	dd03      	ble.n	8002014 <Manual_LCD_DrawRectangle+0x52>
        height = LCD_HEIGHT - y;
 800200c:	88bb      	ldrh	r3, [r7, #4]
 800200e:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002012:	803b      	strh	r3, [r7, #0]

    Manual_LCD_DrawLine(x, y, x + width - 1, y, color);
 8002014:	88fa      	ldrh	r2, [r7, #6]
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	4413      	add	r3, r2
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	88bc      	ldrh	r4, [r7, #4]
 8002022:	88b9      	ldrh	r1, [r7, #4]
 8002024:	88f8      	ldrh	r0, [r7, #6]
 8002026:	8b3b      	ldrh	r3, [r7, #24]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	4623      	mov	r3, r4
 800202c:	f7ff ff3b 	bl	8001ea6 <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y + height - 1, x + width - 1, y + height - 1, color);
 8002030:	88ba      	ldrh	r2, [r7, #4]
 8002032:	883b      	ldrh	r3, [r7, #0]
 8002034:	4413      	add	r3, r2
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b299      	uxth	r1, r3
 800203c:	88fa      	ldrh	r2, [r7, #6]
 800203e:	887b      	ldrh	r3, [r7, #2]
 8002040:	4413      	add	r3, r2
 8002042:	b29b      	uxth	r3, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	b29c      	uxth	r4, r3
 8002048:	88ba      	ldrh	r2, [r7, #4]
 800204a:	883b      	ldrh	r3, [r7, #0]
 800204c:	4413      	add	r3, r2
 800204e:	b29b      	uxth	r3, r3
 8002050:	3b01      	subs	r3, #1
 8002052:	b29a      	uxth	r2, r3
 8002054:	88f8      	ldrh	r0, [r7, #6]
 8002056:	8b3b      	ldrh	r3, [r7, #24]
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	4613      	mov	r3, r2
 800205c:	4622      	mov	r2, r4
 800205e:	f7ff ff22 	bl	8001ea6 <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y, x, y + height - 1, color);
 8002062:	88ba      	ldrh	r2, [r7, #4]
 8002064:	883b      	ldrh	r3, [r7, #0]
 8002066:	4413      	add	r3, r2
 8002068:	b29b      	uxth	r3, r3
 800206a:	3b01      	subs	r3, #1
 800206c:	b29c      	uxth	r4, r3
 800206e:	88fa      	ldrh	r2, [r7, #6]
 8002070:	88b9      	ldrh	r1, [r7, #4]
 8002072:	88f8      	ldrh	r0, [r7, #6]
 8002074:	8b3b      	ldrh	r3, [r7, #24]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	4623      	mov	r3, r4
 800207a:	f7ff ff14 	bl	8001ea6 <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x + width - 1, y, x + width - 1, y + height - 1, color);
 800207e:	88fa      	ldrh	r2, [r7, #6]
 8002080:	887b      	ldrh	r3, [r7, #2]
 8002082:	4413      	add	r3, r2
 8002084:	b29b      	uxth	r3, r3
 8002086:	3b01      	subs	r3, #1
 8002088:	b298      	uxth	r0, r3
 800208a:	88fa      	ldrh	r2, [r7, #6]
 800208c:	887b      	ldrh	r3, [r7, #2]
 800208e:	4413      	add	r3, r2
 8002090:	b29b      	uxth	r3, r3
 8002092:	3b01      	subs	r3, #1
 8002094:	b29c      	uxth	r4, r3
 8002096:	88ba      	ldrh	r2, [r7, #4]
 8002098:	883b      	ldrh	r3, [r7, #0]
 800209a:	4413      	add	r3, r2
 800209c:	b29b      	uxth	r3, r3
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	88b9      	ldrh	r1, [r7, #4]
 80020a4:	8b3b      	ldrh	r3, [r7, #24]
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	4622      	mov	r2, r4
 80020ac:	f7ff fefb 	bl	8001ea6 <Manual_LCD_DrawLine>
 80020b0:	e000      	b.n	80020b4 <Manual_LCD_DrawRectangle+0xf2>
        return;
 80020b2:	bf00      	nop
}
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd90      	pop	{r4, r7, pc}
	...

080020bc <Manual_LCD_FillRectangle>:

void Manual_LCD_FillRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4604      	mov	r4, r0
 80020c4:	4608      	mov	r0, r1
 80020c6:	4611      	mov	r1, r2
 80020c8:	461a      	mov	r2, r3
 80020ca:	4623      	mov	r3, r4
 80020cc:	80fb      	strh	r3, [r7, #6]
 80020ce:	4603      	mov	r3, r0
 80020d0:	80bb      	strh	r3, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	807b      	strh	r3, [r7, #2]
 80020d6:	4613      	mov	r3, r2
 80020d8:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	2bef      	cmp	r3, #239	@ 0xef
 80020de:	d855      	bhi.n	800218c <Manual_LCD_FillRectangle+0xd0>
 80020e0:	88bb      	ldrh	r3, [r7, #4]
 80020e2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80020e6:	d251      	bcs.n	800218c <Manual_LCD_FillRectangle+0xd0>
        return;
    if ((x + width) > LCD_WIDTH)
 80020e8:	88fa      	ldrh	r2, [r7, #6]
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	4413      	add	r3, r2
 80020ee:	2bf0      	cmp	r3, #240	@ 0xf0
 80020f0:	dd03      	ble.n	80020fa <Manual_LCD_FillRectangle+0x3e>
        width = LCD_WIDTH - x;
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80020f8:	807b      	strh	r3, [r7, #2]
    if ((y + height) > LCD_HEIGHT)
 80020fa:	88ba      	ldrh	r2, [r7, #4]
 80020fc:	883b      	ldrh	r3, [r7, #0]
 80020fe:	4413      	add	r3, r2
 8002100:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002104:	dd03      	ble.n	800210e <Manual_LCD_FillRectangle+0x52>
        height = LCD_HEIGHT - y;
 8002106:	88bb      	ldrh	r3, [r7, #4]
 8002108:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800210c:	803b      	strh	r3, [r7, #0]

    LCD_Set_Address_Window(x, y, x + width - 1, y + height - 1);
 800210e:	88fa      	ldrh	r2, [r7, #6]
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	4413      	add	r3, r2
 8002114:	b29b      	uxth	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b29c      	uxth	r4, r3
 800211a:	88ba      	ldrh	r2, [r7, #4]
 800211c:	883b      	ldrh	r3, [r7, #0]
 800211e:	4413      	add	r3, r2
 8002120:	b29b      	uxth	r3, r3
 8002122:	3b01      	subs	r3, #1
 8002124:	b29b      	uxth	r3, r3
 8002126:	88b9      	ldrh	r1, [r7, #4]
 8002128:	88f8      	ldrh	r0, [r7, #6]
 800212a:	4622      	mov	r2, r4
 800212c:	f7ff fcf8 	bl	8001b20 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8002130:	2201      	movs	r2, #1
 8002132:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002136:	4817      	ldr	r0, [pc, #92]	@ (8002194 <Manual_LCD_FillRectangle+0xd8>)
 8002138:	f002 fee8 	bl	8004f0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 800213c:	2200      	movs	r2, #0
 800213e:	2180      	movs	r1, #128	@ 0x80
 8002140:	4814      	ldr	r0, [pc, #80]	@ (8002194 <Manual_LCD_FillRectangle+0xd8>)
 8002142:	f002 fee3 	bl	8004f0c <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 8002146:	8c3b      	ldrh	r3, [r7, #32]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	b29b      	uxth	r3, r3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	723b      	strb	r3, [r7, #8]
 8002150:	8c3b      	ldrh	r3, [r7, #32]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	e00a      	b.n	8002172 <Manual_LCD_FillRectangle+0xb6>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 800215c:	f107 0108 	add.w	r1, r7, #8
 8002160:	f04f 33ff 	mov.w	r3, #4294967295
 8002164:	2202      	movs	r2, #2
 8002166:	480c      	ldr	r0, [pc, #48]	@ (8002198 <Manual_LCD_FillRectangle+0xdc>)
 8002168:	f007 fa35 	bl	80095d6 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3301      	adds	r3, #1
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	887b      	ldrh	r3, [r7, #2]
 8002174:	883a      	ldrh	r2, [r7, #0]
 8002176:	fb02 f303 	mul.w	r3, r2, r3
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	429a      	cmp	r2, r3
 800217e:	d3ed      	bcc.n	800215c <Manual_LCD_FillRectangle+0xa0>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8002180:	2201      	movs	r2, #1
 8002182:	2180      	movs	r1, #128	@ 0x80
 8002184:	4803      	ldr	r0, [pc, #12]	@ (8002194 <Manual_LCD_FillRectangle+0xd8>)
 8002186:	f002 fec1 	bl	8004f0c <HAL_GPIO_WritePin>
 800218a:	e000      	b.n	800218e <Manual_LCD_FillRectangle+0xd2>
        return;
 800218c:	bf00      	nop
}
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	bd90      	pop	{r4, r7, pc}
 8002194:	40020400 	.word	0x40020400
 8002198:	20000688 	.word	0x20000688

0800219c <Manual_LCD_DrawChar>:
// A proper implementation would look up character data in a font table.
// Placeholder for font data - you need to define this
extern const unsigned char Font5x7[][5]; // Example: needs to be defined in font.c

void Manual_LCD_DrawChar(uint16_t x, uint16_t y, char c, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 800219c:	b590      	push	{r4, r7, lr}
 800219e:	b087      	sub	sp, #28
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	4604      	mov	r4, r0
 80021a4:	4608      	mov	r0, r1
 80021a6:	4611      	mov	r1, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	4623      	mov	r3, r4
 80021ac:	80fb      	strh	r3, [r7, #6]
 80021ae:	4603      	mov	r3, r0
 80021b0:	80bb      	strh	r3, [r7, #4]
 80021b2:	460b      	mov	r3, r1
 80021b4:	70fb      	strb	r3, [r7, #3]
 80021b6:	4613      	mov	r3, r2
 80021b8:	803b      	strh	r3, [r7, #0]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT || (x + 5 * size) > LCD_WIDTH || (y + 7 * size) > LCD_HEIGHT)
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	2bef      	cmp	r3, #239	@ 0xef
 80021be:	f200 80d1 	bhi.w	8002364 <Manual_LCD_DrawChar+0x1c8>
 80021c2:	88bb      	ldrh	r3, [r7, #4]
 80021c4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80021c8:	f080 80cc 	bcs.w	8002364 <Manual_LCD_DrawChar+0x1c8>
 80021cc:	88f9      	ldrh	r1, [r7, #6]
 80021ce:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80021d2:	4613      	mov	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	440b      	add	r3, r1
 80021da:	2bf0      	cmp	r3, #240	@ 0xf0
 80021dc:	f300 80c2 	bgt.w	8002364 <Manual_LCD_DrawChar+0x1c8>
 80021e0:	88b9      	ldrh	r1, [r7, #4]
 80021e2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	440b      	add	r3, r1
 80021ee:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80021f2:	f300 80b7 	bgt.w	8002364 <Manual_LCD_DrawChar+0x1c8>
    {
        return; // Character won't fit
    }

    if (c < ' ' || c > '~')
 80021f6:	78fb      	ldrb	r3, [r7, #3]
 80021f8:	2b1f      	cmp	r3, #31
 80021fa:	d902      	bls.n	8002202 <Manual_LCD_DrawChar+0x66>
 80021fc:	78fb      	ldrb	r3, [r7, #3]
 80021fe:	2b7e      	cmp	r3, #126	@ 0x7e
 8002200:	d901      	bls.n	8002206 <Manual_LCD_DrawChar+0x6a>
        c = '?'; // Handle non-printable characters
 8002202:	233f      	movs	r3, #63	@ 0x3f
 8002204:	70fb      	strb	r3, [r7, #3]

    for (uint8_t i = 0; i < 5; i++)
 8002206:	2300      	movs	r3, #0
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	e088      	b.n	800231e <Manual_LCD_DrawChar+0x182>
    { // Width of char
        uint8_t line = Font5x7[c - ' '][i];
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	f1a3 0220 	sub.w	r2, r3, #32
 8002212:	7bf9      	ldrb	r1, [r7, #15]
 8002214:	4855      	ldr	r0, [pc, #340]	@ (800236c <Manual_LCD_DrawChar+0x1d0>)
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	4403      	add	r3, r0
 800221e:	440b      	add	r3, r1
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 8002224:	2300      	movs	r3, #0
 8002226:	737b      	strb	r3, [r7, #13]
 8002228:	e073      	b.n	8002312 <Manual_LCD_DrawChar+0x176>
        { // Height of char
            if (line & 0x01)
 800222a:	7bbb      	ldrb	r3, [r7, #14]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d034      	beq.n	800229e <Manual_LCD_DrawChar+0x102>
            { // Check bit
                if (size == 1)
 8002234:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002238:	2b01      	cmp	r3, #1
 800223a:	d10e      	bne.n	800225a <Manual_LCD_DrawChar+0xbe>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, charColor);
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	b29a      	uxth	r2, r3
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	4413      	add	r3, r2
 8002244:	b298      	uxth	r0, r3
 8002246:	7b7b      	ldrb	r3, [r7, #13]
 8002248:	b29a      	uxth	r2, r3
 800224a:	88bb      	ldrh	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	b29b      	uxth	r3, r3
 8002250:	883a      	ldrh	r2, [r7, #0]
 8002252:	4619      	mov	r1, r3
 8002254:	f7ff fe08 	bl	8001e68 <Manual_LCD_DrawPixel>
 8002258:	e055      	b.n	8002306 <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, charColor);
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	b29a      	uxth	r2, r3
 800225e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002262:	b29b      	uxth	r3, r3
 8002264:	fb12 f303 	smulbb	r3, r2, r3
 8002268:	b29a      	uxth	r2, r3
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	4413      	add	r3, r2
 800226e:	b298      	uxth	r0, r3
 8002270:	7b7b      	ldrb	r3, [r7, #13]
 8002272:	b29a      	uxth	r2, r3
 8002274:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002278:	b29b      	uxth	r3, r3
 800227a:	fb12 f303 	smulbb	r3, r2, r3
 800227e:	b29a      	uxth	r2, r3
 8002280:	88bb      	ldrh	r3, [r7, #4]
 8002282:	4413      	add	r3, r2
 8002284:	b299      	uxth	r1, r3
 8002286:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800228a:	b29a      	uxth	r2, r3
 800228c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002290:	b29c      	uxth	r4, r3
 8002292:	883b      	ldrh	r3, [r7, #0]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	4623      	mov	r3, r4
 8002298:	f7ff ff10 	bl	80020bc <Manual_LCD_FillRectangle>
 800229c:	e033      	b.n	8002306 <Manual_LCD_DrawChar+0x16a>
                }
            }
            else
            {
                if (size == 1)
 800229e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d10e      	bne.n	80022c4 <Manual_LCD_DrawChar+0x128>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, bgColor);
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	4413      	add	r3, r2
 80022ae:	b298      	uxth	r0, r3
 80022b0:	7b7b      	ldrb	r3, [r7, #13]
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	88bb      	ldrh	r3, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	8c3a      	ldrh	r2, [r7, #32]
 80022bc:	4619      	mov	r1, r3
 80022be:	f7ff fdd3 	bl	8001e68 <Manual_LCD_DrawPixel>
 80022c2:	e020      	b.n	8002306 <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, bgColor);
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	fb12 f303 	smulbb	r3, r2, r3
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	4413      	add	r3, r2
 80022d8:	b298      	uxth	r0, r3
 80022da:	7b7b      	ldrb	r3, [r7, #13]
 80022dc:	b29a      	uxth	r2, r3
 80022de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	fb12 f303 	smulbb	r3, r2, r3
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	88bb      	ldrh	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	b299      	uxth	r1, r3
 80022f0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022fa:	b29c      	uxth	r4, r3
 80022fc:	8c3b      	ldrh	r3, [r7, #32]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4623      	mov	r3, r4
 8002302:	f7ff fedb 	bl	80020bc <Manual_LCD_FillRectangle>
                }
            }
            line >>= 1;
 8002306:	7bbb      	ldrb	r3, [r7, #14]
 8002308:	085b      	lsrs	r3, r3, #1
 800230a:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 800230c:	7b7b      	ldrb	r3, [r7, #13]
 800230e:	3301      	adds	r3, #1
 8002310:	737b      	strb	r3, [r7, #13]
 8002312:	7b7b      	ldrb	r3, [r7, #13]
 8002314:	2b06      	cmp	r3, #6
 8002316:	d988      	bls.n	800222a <Manual_LCD_DrawChar+0x8e>
    for (uint8_t i = 0; i < 5; i++)
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	3301      	adds	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	2b04      	cmp	r3, #4
 8002322:	f67f af73 	bls.w	800220c <Manual_LCD_DrawChar+0x70>
        }
    }
    // Draw a small gap for characters if size > 1 or if you want background fill for the gap
    if (size > 0)
 8002326:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800232a:	2b00      	cmp	r3, #0
 800232c:	d01b      	beq.n	8002366 <Manual_LCD_DrawChar+0x1ca>
    { // Fill the column after the character (for spacing)
        Manual_LCD_FillRectangle(x + 5 * size, y, size, 7 * size, bgColor);
 800232e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002332:	b29b      	uxth	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	0092      	lsls	r2, r2, #2
 8002338:	4413      	add	r3, r2
 800233a:	b29a      	uxth	r2, r3
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	4413      	add	r3, r2
 8002340:	b298      	uxth	r0, r3
 8002342:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002346:	b29a      	uxth	r2, r3
 8002348:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800234c:	b29b      	uxth	r3, r3
 800234e:	4619      	mov	r1, r3
 8002350:	00c9      	lsls	r1, r1, #3
 8002352:	1acb      	subs	r3, r1, r3
 8002354:	b29c      	uxth	r4, r3
 8002356:	88b9      	ldrh	r1, [r7, #4]
 8002358:	8c3b      	ldrh	r3, [r7, #32]
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4623      	mov	r3, r4
 800235e:	f7ff fead 	bl	80020bc <Manual_LCD_FillRectangle>
 8002362:	e000      	b.n	8002366 <Manual_LCD_DrawChar+0x1ca>
        return; // Character won't fit
 8002364:	bf00      	nop
    }
}
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bd90      	pop	{r4, r7, pc}
 800236c:	0800dcac 	.word	0x0800dcac

08002370 <Manual_LCD_DrawString>:

void Manual_LCD_DrawString(uint16_t x, uint16_t y, const char *str, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b087      	sub	sp, #28
 8002374:	af02      	add	r7, sp, #8
 8002376:	60ba      	str	r2, [r7, #8]
 8002378:	461a      	mov	r2, r3
 800237a:	4603      	mov	r3, r0
 800237c:	81fb      	strh	r3, [r7, #14]
 800237e:	460b      	mov	r3, r1
 8002380:	81bb      	strh	r3, [r7, #12]
 8002382:	4613      	mov	r3, r2
 8002384:	80fb      	strh	r3, [r7, #6]
    while (*str)
 8002386:	e037      	b.n	80023f8 <Manual_LCD_DrawString+0x88>
    {
        Manual_LCD_DrawChar(x, y, *str, charColor, bgColor, size);
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	781a      	ldrb	r2, [r3, #0]
 800238c:	88fc      	ldrh	r4, [r7, #6]
 800238e:	89b9      	ldrh	r1, [r7, #12]
 8002390:	89f8      	ldrh	r0, [r7, #14]
 8002392:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002396:	9301      	str	r3, [sp, #4]
 8002398:	8c3b      	ldrh	r3, [r7, #32]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	4623      	mov	r3, r4
 800239e:	f7ff fefd 	bl	800219c <Manual_LCD_DrawChar>
        x += 6 * size; // Advance X position (5 for char + 1 for spacing)
 80023a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	0052      	lsls	r2, r2, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	89fb      	ldrh	r3, [r7, #14]
 80023b4:	4413      	add	r3, r2
 80023b6:	81fb      	strh	r3, [r7, #14]
        if (x + 5 * size >= LCD_WIDTH)
 80023b8:	89f9      	ldrh	r1, [r7, #14]
 80023ba:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	440b      	add	r3, r1
 80023c6:	2bef      	cmp	r3, #239	@ 0xef
 80023c8:	dd09      	ble.n	80023de <Manual_LCD_DrawString+0x6e>
        { // Simple wrap
            x = 0;
 80023ca:	2300      	movs	r3, #0
 80023cc:	81fb      	strh	r3, [r7, #14]
            y += 8 * size; // Advance Y position
 80023ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	89bb      	ldrh	r3, [r7, #12]
 80023da:	4413      	add	r3, r2
 80023dc:	81bb      	strh	r3, [r7, #12]
        }
        if (y + 7 * size >= LCD_HEIGHT)
 80023de:	89b9      	ldrh	r1, [r7, #12]
 80023e0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80023e4:	4613      	mov	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	440b      	add	r3, r1
 80023ec:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80023f0:	da07      	bge.n	8002402 <Manual_LCD_DrawString+0x92>
            break; // Out of screen
        str++;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	3301      	adds	r3, #1
 80023f6:	60bb      	str	r3, [r7, #8]
    while (*str)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1c3      	bne.n	8002388 <Manual_LCD_DrawString+0x18>
    }
}
 8002400:	e000      	b.n	8002404 <Manual_LCD_DrawString+0x94>
            break; // Out of screen
 8002402:	bf00      	nop
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}

0800240c <Manual_LCD_DrawLayout>:

void Manual_LCD_DrawLayout(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b09a      	sub	sp, #104	@ 0x68
 8002410:	af02      	add	r7, sp, #8
    // Clear screen with blue background
    Manual_LCD_Clear(COLOR_BLUE);
 8002412:	201f      	movs	r0, #31
 8002414:	f7ff fcea 	bl	8001dec <Manual_LCD_Clear>

    uint16_t text_color = COLOR_WHITE;
 8002418:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800241c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint16_t box_fill_color = COLOR_BLACK;
 8002420:	2300      	movs	r3, #0
 8002422:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    uint16_t box_border_color = COLOR_WHITE;
 8002426:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800242a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    uint8_t font_size = 1;
 800242e:	2301      	movs	r3, #1
 8002430:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
    uint8_t char_height = 7; // For 5x7 font at size 1
 8002434:	2307      	movs	r3, #7
 8002436:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
    // uint8_t char_width_with_spacing = 6; // For 5x7 font at size 1

    // 1. Top Info Box: "Nhom: [nhom 01]"
    const char *info_text = "Nhom: [nhom 01]";
 800243a:	4bb8      	ldr	r3, [pc, #736]	@ (800271c <Manual_LCD_DrawLayout+0x310>)
 800243c:	657b      	str	r3, [r7, #84]	@ 0x54
    uint16_t info_text_x = MARGIN + 5;
 800243e:	230f      	movs	r3, #15
 8002440:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t info_text_y = INFO_BOX_Y + (INFO_BOX_H - char_height * font_size) / 2;
 8002444:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002448:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	f1c3 031e 	rsb	r3, r3, #30
 8002454:	0fda      	lsrs	r2, r3, #31
 8002456:	4413      	add	r3, r2
 8002458:	105b      	asrs	r3, r3, #1
 800245a:	b29b      	uxth	r3, r3
 800245c:	330a      	adds	r3, #10
 800245e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

    Manual_LCD_FillRectangle(MARGIN, INFO_BOX_Y, INFO_BOX_W, INFO_BOX_H, box_fill_color);
 8002462:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	231e      	movs	r3, #30
 800246a:	2296      	movs	r2, #150	@ 0x96
 800246c:	210a      	movs	r1, #10
 800246e:	200a      	movs	r0, #10
 8002470:	f7ff fe24 	bl	80020bc <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(MARGIN, INFO_BOX_Y, INFO_BOX_W, INFO_BOX_H, box_border_color);
 8002474:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	231e      	movs	r3, #30
 800247c:	2296      	movs	r2, #150	@ 0x96
 800247e:	210a      	movs	r1, #10
 8002480:	200a      	movs	r0, #10
 8002482:	f7ff fd9e 	bl	8001fc2 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(info_text_x, info_text_y, info_text, text_color, box_fill_color, font_size);
 8002486:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800248a:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 800248e:	f8b7 0052 	ldrh.w	r0, [r7, #82]	@ 0x52
 8002492:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	4613      	mov	r3, r2
 80024a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80024a2:	f7ff ff65 	bl	8002370 <Manual_LCD_DrawString>

    // 2. Task Boxes Grid
    uint16_t start_y_tasks_row1 = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 80024a6:	233c      	movs	r3, #60	@ 0x3c
 80024a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint16_t text_task_x_padding = 10; // Left padding for text inside task boxes
 80024ac:	230a      	movs	r3, #10
 80024ae:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    uint16_t text_task_y_offset = (TASK_BOX_H - char_height * font_size) / 2;
 80024b2:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80024b6:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 80024ba:	fb02 f303 	mul.w	r3, r2, r3
 80024be:	f1c3 0346 	rsb	r3, r3, #70	@ 0x46
 80024c2:	0fda      	lsrs	r2, r3, #31
 80024c4:	4413      	add	r3, r2
 80024c6:	105b      	asrs	r3, r3, #1
 80024c8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

    // Task 02-1 (Top-Left)
    uint16_t task1_x = MARGIN;
 80024cc:	230a      	movs	r3, #10
 80024ce:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    uint16_t task1_y = start_y_tasks_row1;
 80024d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80024d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    const char *task1_text = "Task 02-1";
 80024da:	4b91      	ldr	r3, [pc, #580]	@ (8002720 <Manual_LCD_DrawLayout+0x314>)
 80024dc:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t text_task1_x = task1_x + text_task_x_padding;
 80024de:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80024e2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80024e6:	4413      	add	r3, r2
 80024e8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint16_t text_task1_y = task1_y + text_task_y_offset;
 80024ea:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80024ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80024f2:	4413      	add	r3, r2
 80024f4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    Manual_LCD_FillRectangle(task1_x, task1_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 80024f6:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80024fa:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 80024fe:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	2346      	movs	r3, #70	@ 0x46
 8002506:	2269      	movs	r2, #105	@ 0x69
 8002508:	f7ff fdd8 	bl	80020bc <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task1_x, task1_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 800250c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8002510:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8002514:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	2346      	movs	r3, #70	@ 0x46
 800251c:	2269      	movs	r2, #105	@ 0x69
 800251e:	f7ff fd50 	bl	8001fc2 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task1_x, text_task1_y, task1_text, text_color, box_fill_color, font_size);
 8002522:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002526:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8002528:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 800252a:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	4613      	mov	r3, r2
 8002538:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800253a:	f7ff ff19 	bl	8002370 <Manual_LCD_DrawString>

    // Task 02-2 (Top-Right)
    uint16_t task2_x = task1_x + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 800253e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002542:	3373      	adds	r3, #115	@ 0x73
 8002544:	877b      	strh	r3, [r7, #58]	@ 0x3a
    uint16_t task2_y = start_y_tasks_row1;
 8002546:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800254a:	873b      	strh	r3, [r7, #56]	@ 0x38
    const char *task2_text = "Task 02-2";
 800254c:	4b75      	ldr	r3, [pc, #468]	@ (8002724 <Manual_LCD_DrawLayout+0x318>)
 800254e:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t text_task2_x = task2_x + text_task_x_padding;
 8002550:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8002552:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002556:	4413      	add	r3, r2
 8002558:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t text_task2_y = task2_y + text_task_y_offset;
 800255a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800255c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002560:	4413      	add	r3, r2
 8002562:	863b      	strh	r3, [r7, #48]	@ 0x30
    Manual_LCD_FillRectangle(task2_x, task2_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 8002564:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002566:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 8002568:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	2346      	movs	r3, #70	@ 0x46
 8002570:	2269      	movs	r2, #105	@ 0x69
 8002572:	f7ff fda3 	bl	80020bc <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task2_x, task2_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 8002576:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002578:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 800257a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	2346      	movs	r3, #70	@ 0x46
 8002582:	2269      	movs	r2, #105	@ 0x69
 8002584:	f7ff fd1d 	bl	8001fc2 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task2_x, text_task2_y, task2_text, text_color, box_fill_color, font_size);
 8002588:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800258c:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 800258e:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 8002590:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	4613      	mov	r3, r2
 800259e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025a0:	f7ff fee6 	bl	8002370 <Manual_LCD_DrawString>

    // Second row of task boxes
    uint16_t start_y_tasks_row2 = start_y_tasks_row1 + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 80025a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80025a8:	3350      	adds	r3, #80	@ 0x50
 80025aa:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Task 02-3 (Bottom-Left)
    uint16_t task3_x = MARGIN;
 80025ac:	230a      	movs	r3, #10
 80025ae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t task3_y = start_y_tasks_row2;
 80025b0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025b2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    const char *task3_text = "Task 02-3";
 80025b4:	4b5c      	ldr	r3, [pc, #368]	@ (8002728 <Manual_LCD_DrawLayout+0x31c>)
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t text_task3_x = task3_x + text_task_x_padding;
 80025b8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80025ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80025be:	4413      	add	r3, r2
 80025c0:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t text_task3_y = task3_y + text_task_y_offset;
 80025c2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80025c4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025c8:	4413      	add	r3, r2
 80025ca:	843b      	strh	r3, [r7, #32]
    Manual_LCD_FillRectangle(task3_x, task3_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 80025cc:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80025ce:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 80025d0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	2346      	movs	r3, #70	@ 0x46
 80025d8:	2269      	movs	r2, #105	@ 0x69
 80025da:	f7ff fd6f 	bl	80020bc <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task3_x, task3_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 80025de:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80025e0:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 80025e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2346      	movs	r3, #70	@ 0x46
 80025ea:	2269      	movs	r2, #105	@ 0x69
 80025ec:	f7ff fce9 	bl	8001fc2 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task3_x, text_task3_y, task3_text, text_color, box_fill_color, font_size);
 80025f0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80025f4:	8c39      	ldrh	r1, [r7, #32]
 80025f6:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80025f8:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	4613      	mov	r3, r2
 8002606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002608:	f7ff feb2 	bl	8002370 <Manual_LCD_DrawString>

    // Task 02-4 (Bottom-Right)
    uint16_t task4_x = task1_x + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 800260c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002610:	3373      	adds	r3, #115	@ 0x73
 8002612:	83fb      	strh	r3, [r7, #30]
    uint16_t task4_y = start_y_tasks_row2;
 8002614:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002616:	83bb      	strh	r3, [r7, #28]
    const char *task4_text = "Task 02-4";
 8002618:	4b44      	ldr	r3, [pc, #272]	@ (800272c <Manual_LCD_DrawLayout+0x320>)
 800261a:	61bb      	str	r3, [r7, #24]
    uint16_t text_task4_x = task4_x + text_task_x_padding;
 800261c:	8bfa      	ldrh	r2, [r7, #30]
 800261e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002622:	4413      	add	r3, r2
 8002624:	82fb      	strh	r3, [r7, #22]
    uint16_t text_task4_y = task4_y + text_task_y_offset;
 8002626:	8bba      	ldrh	r2, [r7, #28]
 8002628:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800262c:	4413      	add	r3, r2
 800262e:	82bb      	strh	r3, [r7, #20]
    Manual_LCD_FillRectangle(task4_x, task4_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 8002630:	8bb9      	ldrh	r1, [r7, #28]
 8002632:	8bf8      	ldrh	r0, [r7, #30]
 8002634:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	2346      	movs	r3, #70	@ 0x46
 800263c:	2269      	movs	r2, #105	@ 0x69
 800263e:	f7ff fd3d 	bl	80020bc <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task4_x, task4_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 8002642:	8bb9      	ldrh	r1, [r7, #28]
 8002644:	8bf8      	ldrh	r0, [r7, #30]
 8002646:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	2346      	movs	r3, #70	@ 0x46
 800264e:	2269      	movs	r2, #105	@ 0x69
 8002650:	f7ff fcb7 	bl	8001fc2 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task4_x, text_task4_y, task4_text, text_color, box_fill_color, font_size);
 8002654:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002658:	8ab9      	ldrh	r1, [r7, #20]
 800265a:	8af8      	ldrh	r0, [r7, #22]
 800265c:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	4613      	mov	r3, r2
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	f7ff fe80 	bl	8002370 <Manual_LCD_DrawString>

    // 3. Back Button
    const char *back_button_text = "<<Back";
 8002670:	4b2f      	ldr	r3, [pc, #188]	@ (8002730 <Manual_LCD_DrawLayout+0x324>)
 8002672:	613b      	str	r3, [r7, #16]
    uint16_t back_button_text_len = strlen(back_button_text);
 8002674:	6938      	ldr	r0, [r7, #16]
 8002676:	f7fd fdab 	bl	80001d0 <strlen>
 800267a:	4603      	mov	r3, r0
 800267c:	81fb      	strh	r3, [r7, #14]
    uint16_t back_button_text_pixel_width = back_button_text_len * 6 * font_size; // 6 is char width with spacing for 5x7 font
 800267e:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002682:	b29b      	uxth	r3, r3
 8002684:	89fa      	ldrh	r2, [r7, #14]
 8002686:	fb12 f303 	smulbb	r3, r2, r3
 800268a:	b29b      	uxth	r3, r3
 800268c:	461a      	mov	r2, r3
 800268e:	0052      	lsls	r2, r2, #1
 8002690:	4413      	add	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	81bb      	strh	r3, [r7, #12]

    uint16_t back_button_y = start_y_tasks_row2 + TASK_BOX_H + TASK_TO_BACK_BUTTON_SPACING;
 8002696:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002698:	335a      	adds	r3, #90	@ 0x5a
 800269a:	817b      	strh	r3, [r7, #10]
    uint16_t back_button_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 800269c:	237d      	movs	r3, #125	@ 0x7d
 800269e:	813b      	strh	r3, [r7, #8]
    uint16_t text_button_x = back_button_x + (BACK_BUTTON_W - back_button_text_pixel_width) / 2;
 80026a0:	89bb      	ldrh	r3, [r7, #12]
 80026a2:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 80026a6:	0fda      	lsrs	r2, r3, #31
 80026a8:	4413      	add	r3, r2
 80026aa:	105b      	asrs	r3, r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	893b      	ldrh	r3, [r7, #8]
 80026b0:	4413      	add	r3, r2
 80026b2:	80fb      	strh	r3, [r7, #6]
    uint16_t text_button_y = back_button_y + (BACK_BUTTON_H - char_height * font_size) / 2;
 80026b4:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80026b8:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 80026bc:	fb02 f303 	mul.w	r3, r2, r3
 80026c0:	f1c3 032d 	rsb	r3, r3, #45	@ 0x2d
 80026c4:	0fda      	lsrs	r2, r3, #31
 80026c6:	4413      	add	r3, r2
 80026c8:	105b      	asrs	r3, r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	897b      	ldrh	r3, [r7, #10]
 80026ce:	4413      	add	r3, r2
 80026d0:	80bb      	strh	r3, [r7, #4]

    Manual_LCD_FillRectangle(back_button_x, back_button_y, BACK_BUTTON_W, BACK_BUTTON_H, box_fill_color);
 80026d2:	8979      	ldrh	r1, [r7, #10]
 80026d4:	8938      	ldrh	r0, [r7, #8]
 80026d6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	232d      	movs	r3, #45	@ 0x2d
 80026de:	225a      	movs	r2, #90	@ 0x5a
 80026e0:	f7ff fcec 	bl	80020bc <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(back_button_x, back_button_y, BACK_BUTTON_W, BACK_BUTTON_H, box_border_color);
 80026e4:	8979      	ldrh	r1, [r7, #10]
 80026e6:	8938      	ldrh	r0, [r7, #8]
 80026e8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	232d      	movs	r3, #45	@ 0x2d
 80026f0:	225a      	movs	r2, #90	@ 0x5a
 80026f2:	f7ff fc66 	bl	8001fc2 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_button_x, text_button_y, back_button_text, text_color, box_fill_color, font_size);
 80026f6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80026fa:	88b9      	ldrh	r1, [r7, #4]
 80026fc:	88f8      	ldrh	r0, [r7, #6]
 80026fe:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002702:	9301      	str	r3, [sp, #4]
 8002704:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	4613      	mov	r3, r2
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	f7ff fe2f 	bl	8002370 <Manual_LCD_DrawString>
}
 8002712:	bf00      	nop
 8002714:	3760      	adds	r7, #96	@ 0x60
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	0800dc00 	.word	0x0800dc00
 8002720:	0800dc10 	.word	0x0800dc10
 8002724:	0800dc1c 	.word	0x0800dc1c
 8002728:	0800dc28 	.word	0x0800dc28
 800272c:	0800dc34 	.word	0x0800dc34
 8002730:	0800dc40 	.word	0x0800dc40

08002734 <Manual_LCD_UpdateInfoText>:

// New function to update the info text
void Manual_LCD_UpdateInfoText(const char *new_text)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af02      	add	r7, sp, #8
 800273a:	6078      	str	r0, [r7, #4]
    uint8_t font_size = 1;
 800273c:	2301      	movs	r3, #1
 800273e:	75fb      	strb	r3, [r7, #23]
    uint8_t char_height = 7; // For 5x7 font at size 1
 8002740:	2307      	movs	r3, #7
 8002742:	75bb      	strb	r3, [r7, #22]

    uint16_t text_color = COLOR_WHITE;     // Original text color from DrawLayout
 8002744:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002748:	82bb      	strh	r3, [r7, #20]
    uint16_t box_fill_color = COLOR_BLACK; // Original box fill color from DrawLayout
 800274a:	2300      	movs	r3, #0
 800274c:	827b      	strh	r3, [r7, #18]

    uint16_t info_text_x = MARGIN + 5;
 800274e:	230f      	movs	r3, #15
 8002750:	823b      	strh	r3, [r7, #16]
    uint16_t info_text_y = INFO_BOX_Y + (INFO_BOX_H - char_height * font_size) / 2;
 8002752:	7dbb      	ldrb	r3, [r7, #22]
 8002754:	7dfa      	ldrb	r2, [r7, #23]
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	f1c3 031e 	rsb	r3, r3, #30
 800275e:	0fda      	lsrs	r2, r3, #31
 8002760:	4413      	add	r3, r2
 8002762:	105b      	asrs	r3, r3, #1
 8002764:	b29b      	uxth	r3, r3
 8002766:	330a      	adds	r3, #10
 8002768:	81fb      	strh	r3, [r7, #14]

    // Clear the inner part of the info box where text resides
    // The border is 1px, so we fill from x+1, y+1 with width-2, height-2
    Manual_LCD_FillRectangle(MARGIN + 1, INFO_BOX_Y + 1, INFO_BOX_W - 2, INFO_BOX_H - 2, box_fill_color);
 800276a:	8a7b      	ldrh	r3, [r7, #18]
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	231c      	movs	r3, #28
 8002770:	2294      	movs	r2, #148	@ 0x94
 8002772:	210b      	movs	r1, #11
 8002774:	200b      	movs	r0, #11
 8002776:	f7ff fca1 	bl	80020bc <Manual_LCD_FillRectangle>

    // Draw the new string with original text color and original box fill as background
    Manual_LCD_DrawString(info_text_x, info_text_y, new_text, text_color, box_fill_color, font_size);
 800277a:	8aba      	ldrh	r2, [r7, #20]
 800277c:	89f9      	ldrh	r1, [r7, #14]
 800277e:	8a38      	ldrh	r0, [r7, #16]
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	8a7b      	ldrh	r3, [r7, #18]
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	f7ff fdf0 	bl	8002370 <Manual_LCD_DrawString>
}
 8002790:	bf00      	nop
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <TP_Read_ADC_Raw>:
Coordinate CalScreenSample[3]; // Raw ADC values from touch panel for calibration points

// Low-level SPI communication for touch
// Sends 1 byte command, receives 2 bytes data (12-bit ADC value)
static uint16_t TP_Read_ADC_Raw(uint8_t cmd)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_byte = cmd;
 80027a2:	79fb      	ldrb	r3, [r7, #7]
 80027a4:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buffer[2] = {0, 0};
 80027a6:	2300      	movs	r3, #0
 80027a8:	813b      	strh	r3, [r7, #8]
    uint16_t adc_val = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	81fb      	strh	r3, [r7, #14]

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET); // Select touch controller
 80027ae:	2200      	movs	r2, #0
 80027b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027b4:	4815      	ldr	r0, [pc, #84]	@ (800280c <TP_Read_ADC_Raw+0x74>)
 80027b6:	f002 fba9 	bl	8004f0c <HAL_GPIO_WritePin>

    // Send command byte
    HAL_SPI_Transmit(g_hspi_touch_ptr, &tx_byte, 1, HAL_MAX_DELAY);
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <TP_Read_ADC_Raw+0x78>)
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	f107 010d 	add.w	r1, r7, #13
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295
 80027c6:	2201      	movs	r2, #1
 80027c8:	f006 ff05 	bl	80095d6 <HAL_SPI_Transmit>

    // Receive 2 data bytes. Some controllers might need dummy clocks before data is valid.
    // For XPT2046/ADS7846, data usually follows directly.
    HAL_SPI_Receive(g_hspi_touch_ptr, rx_buffer, 2, HAL_MAX_DELAY);
 80027cc:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <TP_Read_ADC_Raw+0x78>)
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	f107 0108 	add.w	r1, r7, #8
 80027d4:	f04f 33ff 	mov.w	r3, #4294967295
 80027d8:	2202      	movs	r2, #2
 80027da:	f007 f840 	bl	800985e <HAL_SPI_Receive>

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect
 80027de:	2201      	movs	r2, #1
 80027e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027e4:	4809      	ldr	r0, [pc, #36]	@ (800280c <TP_Read_ADC_Raw+0x74>)
 80027e6:	f002 fb91 	bl	8004f0c <HAL_GPIO_WritePin>

    adc_val = (rx_buffer[0] << 8) | rx_buffer[1];
 80027ea:	7a3b      	ldrb	r3, [r7, #8]
 80027ec:	b21b      	sxth	r3, r3
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	b21a      	sxth	r2, r3
 80027f2:	7a7b      	ldrb	r3, [r7, #9]
 80027f4:	b21b      	sxth	r3, r3
 80027f6:	4313      	orrs	r3, r2
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	81fb      	strh	r3, [r7, #14]
    adc_val >>= 3; // Keep the most significant 12 bits (XPT2046 specific, D0 is at bit 3 of second byte)
 80027fc:	89fb      	ldrh	r3, [r7, #14]
 80027fe:	08db      	lsrs	r3, r3, #3
 8002800:	81fb      	strh	r3, [r7, #14]
                   // Original code used >>4, which might be for a different ADC alignment or resolution.
                   // If raw values are consistently too low or high, this shift might need adjustment.
    return adc_val;
 8002802:	89fb      	ldrh	r3, [r7, #14]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40020000 	.word	0x40020000
 8002810:	20000080 	.word	0x20000080

08002814 <Manual_Touch_Init>:

void Manual_Touch_Init(SPI_HandleTypeDef *hspi_touch)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
    g_hspi_touch_ptr = hspi_touch;
 800281c:	4a06      	ldr	r2, [pc, #24]	@ (8002838 <Manual_Touch_Init+0x24>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6013      	str	r3, [r2, #0]
    // GPIOs for TP_CS (PA9) and TP_IRQ (PB4) are assumed to be initialized
    // in main.c's MX_GPIO_Init() as Output PP and Input Pull-up respectively.
    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect touch controller initially
 8002822:	2201      	movs	r2, #1
 8002824:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002828:	4804      	ldr	r0, [pc, #16]	@ (800283c <Manual_Touch_Init+0x28>)
 800282a:	f002 fb6f 	bl	8004f0c <HAL_GPIO_WritePin>
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000080 	.word	0x20000080
 800283c:	40020000 	.word	0x40020000

08002840 <Manual_Touch_GetRawPoint>:
    // TP_IRQ_Pin is low when pressed (assuming pull-up resistor is enabled)
    return (HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == GPIO_PIN_RESET);
}

uint8_t Manual_Touch_GetRawPoint(Coordinate *rawPoint)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
    // Đọc một mẫu đơn giản để debug
    rawPoint->x = TP_Read_ADC_Raw(TP_CMD_READ_X);
 8002848:	20d0      	movs	r0, #208	@ 0xd0
 800284a:	f7ff ffa5 	bl	8002798 <TP_Read_ADC_Raw>
 800284e:	4603      	mov	r3, r0
 8002850:	461a      	mov	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	801a      	strh	r2, [r3, #0]
    rawPoint->y = TP_Read_ADC_Raw(TP_CMD_READ_Y);
 8002856:	2090      	movs	r0, #144	@ 0x90
 8002858:	f7ff ff9e 	bl	8002798 <TP_Read_ADC_Raw>
 800285c:	4603      	mov	r3, r0
 800285e:	461a      	mov	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	805a      	strh	r2, [r3, #2]

    // Trả về thành công mà không kiểm tra
    return 1;
 8002864:	2301      	movs	r3, #1
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
	...

08002870 <Manual_Touch_ApplyCalibration>:
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    return 1; // Success
}

uint8_t Manual_Touch_ApplyCalibration(Coordinate *displayPoint, const Coordinate *screenPoint)
{
 8002870:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	6039      	str	r1, [r7, #0]
    if (touchMatrix.Divider == 0)
 800287c:	4b64      	ldr	r3, [pc, #400]	@ (8002a10 <Manual_Touch_ApplyCalibration+0x1a0>)
 800287e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	f7fe f91d 	bl	8000ac8 <__aeabi_dcmpeq>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d023      	beq.n	80028dc <Manual_Touch_ApplyCalibration+0x6c>
    { // Not calibrated or calibration failed
        // Fallback: direct scaling (highly inaccurate without calibration)
        displayPoint->x = (uint16_t)(((long)screenPoint->x * LCD_WIDTH) / 4095);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4613      	mov	r3, r2
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	1a9b      	subs	r3, r3, r2
 80028a0:	011b      	lsls	r3, r3, #4
 80028a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002a14 <Manual_Touch_ApplyCalibration+0x1a4>)
 80028a4:	fb82 1203 	smull	r1, r2, r2, r3
 80028a8:	441a      	add	r2, r3
 80028aa:	12d2      	asrs	r2, r2, #11
 80028ac:	17db      	asrs	r3, r3, #31
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	801a      	strh	r2, [r3, #0]
        displayPoint->y = (uint16_t)(((long)screenPoint->y * LCD_HEIGHT) / 4095);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	885b      	ldrh	r3, [r3, #2]
 80028ba:	461a      	mov	r2, r3
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	019b      	lsls	r3, r3, #6
 80028c4:	4a53      	ldr	r2, [pc, #332]	@ (8002a14 <Manual_Touch_ApplyCalibration+0x1a4>)
 80028c6:	fb82 1203 	smull	r1, r2, r2, r3
 80028ca:	441a      	add	r2, r3
 80028cc:	12d2      	asrs	r2, r2, #11
 80028ce:	17db      	asrs	r3, r3, #31
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	805a      	strh	r2, [r3, #2]
        return 0; // Indicated that calibration matrix was not used
 80028d8:	2300      	movs	r3, #0
 80028da:	e094      	b.n	8002a06 <Manual_Touch_ApplyCalibration+0x196>
    }

    // Apply calibration matrix
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 80028dc:	4b4c      	ldr	r3, [pc, #304]	@ (8002a10 <Manual_Touch_ApplyCalibration+0x1a0>)
 80028de:	e9d3 4500 	ldrd	r4, r5, [r3]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fd fe1c 	bl	8000524 <__aeabi_i2d>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4620      	mov	r0, r4
 80028f2:	4629      	mov	r1, r5
 80028f4:	f7fd fe80 	bl	80005f8 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	4690      	mov	r8, r2
 80028fe:	4699      	mov	r9, r3
                                  (touchMatrix.Bn * screenPoint->y) +
 8002900:	4b43      	ldr	r3, [pc, #268]	@ (8002a10 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002902:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	885b      	ldrh	r3, [r3, #2]
 800290a:	4618      	mov	r0, r3
 800290c:	f7fd fe0a 	bl	8000524 <__aeabi_i2d>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4620      	mov	r0, r4
 8002916:	4629      	mov	r1, r5
 8002918:	f7fd fe6e 	bl	80005f8 <__aeabi_dmul>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002920:	4640      	mov	r0, r8
 8002922:	4649      	mov	r1, r9
 8002924:	f7fd fcb2 	bl	800028c <__adddf3>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
                                  touchMatrix.Cn) /
 8002930:	4b37      	ldr	r3, [pc, #220]	@ (8002a10 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002932:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
                                  (touchMatrix.Bn * screenPoint->y) +
 8002936:	f7fd fca9 	bl	800028c <__adddf3>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4610      	mov	r0, r2
 8002940:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 8002942:	4b33      	ldr	r3, [pc, #204]	@ (8002a10 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002944:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Cn) /
 8002948:	f7fd ff80 	bl	800084c <__aeabi_ddiv>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	f7fe f8ea 	bl	8000b2c <__aeabi_d2uiz>
 8002958:	4603      	mov	r3, r0
 800295a:	b29a      	uxth	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	801a      	strh	r2, [r3, #0]
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002960:	4b2b      	ldr	r3, [pc, #172]	@ (8002a10 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002962:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fdda 	bl	8000524 <__aeabi_i2d>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4620      	mov	r0, r4
 8002976:	4629      	mov	r1, r5
 8002978:	f7fd fe3e 	bl	80005f8 <__aeabi_dmul>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4690      	mov	r8, r2
 8002982:	4699      	mov	r9, r3
                                  (touchMatrix.En * screenPoint->y) +
 8002984:	4b22      	ldr	r3, [pc, #136]	@ (8002a10 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002986:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	885b      	ldrh	r3, [r3, #2]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fd fdc8 	bl	8000524 <__aeabi_i2d>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4620      	mov	r0, r4
 800299a:	4629      	mov	r1, r5
 800299c:	f7fd fe2c 	bl	80005f8 <__aeabi_dmul>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 80029a4:	4640      	mov	r0, r8
 80029a6:	4649      	mov	r1, r9
 80029a8:	f7fd fc70 	bl	800028c <__adddf3>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
                                  touchMatrix.Fn) /
 80029b4:	4b16      	ldr	r3, [pc, #88]	@ (8002a10 <Manual_Touch_ApplyCalibration+0x1a0>)
 80029b6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
                                  (touchMatrix.En * screenPoint->y) +
 80029ba:	f7fd fc67 	bl	800028c <__adddf3>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 80029c6:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <Manual_Touch_ApplyCalibration+0x1a0>)
 80029c8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Fn) /
 80029cc:	f7fd ff3e 	bl	800084c <__aeabi_ddiv>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f7fe f8a8 	bl	8000b2c <__aeabi_d2uiz>
 80029dc:	4603      	mov	r3, r0
 80029de:	b29a      	uxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	805a      	strh	r2, [r3, #2]

    // Constrain to LCD boundaries
    if (displayPoint->x >= LCD_WIDTH)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	2bef      	cmp	r3, #239	@ 0xef
 80029ea:	d902      	bls.n	80029f2 <Manual_Touch_ApplyCalibration+0x182>
        displayPoint->x = LCD_WIDTH - 1;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	22ef      	movs	r2, #239	@ 0xef
 80029f0:	801a      	strh	r2, [r3, #0]
    if (displayPoint->y >= LCD_HEIGHT)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	885b      	ldrh	r3, [r3, #2]
 80029f6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80029fa:	d303      	bcc.n	8002a04 <Manual_Touch_ApplyCalibration+0x194>
        displayPoint->y = LCD_HEIGHT - 1;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f240 123f 	movw	r2, #319	@ 0x13f
 8002a02:	805a      	strh	r2, [r3, #2]
    // Note: long double might produce negative intermediate results if raw values are way off.
    // Casting to uint16_t will wrap. Consider clamping if signed intermediates are possible.
    // For typical touch values, this should be fine.

    return 1; // Calibration matrix used
 8002a04:	2301      	movs	r3, #1
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a10:	20000088 	.word	0x20000088
 8002a14:	80080081 	.word	0x80080081

08002a18 <SD_Init>:
/**
 * @brief  Khởi tạo SD Card và file system
 * @retval uint8_t: 1 nếu thành công, 0 nếu thất bại
 */
uint8_t SD_Init(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
    FRESULT fresult;

    // Nếu đã khởi tạo rồi thì không khởi tạo lại
    if (sd_initialized)
 8002a1e:	4b10      	ldr	r3, [pc, #64]	@ (8002a60 <SD_Init+0x48>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <SD_Init+0x12>
    {
        return 1;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e016      	b.n	8002a58 <SD_Init+0x40>
    }

    // Khởi tạo SD Card qua giao diện SDIO
    if (BSP_SD_Init() != MSD_OK)
 8002a2a:	f008 f869 	bl	800ab00 <BSP_SD_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <SD_Init+0x20>
    {
        return 0;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e00f      	b.n	8002a58 <SD_Init+0x40>
    }

    // Mount file system
    fresult = f_mount(&sdFatFs, "", 1);
 8002a38:	2201      	movs	r2, #1
 8002a3a:	490a      	ldr	r1, [pc, #40]	@ (8002a64 <SD_Init+0x4c>)
 8002a3c:	480a      	ldr	r0, [pc, #40]	@ (8002a68 <SD_Init+0x50>)
 8002a3e:	f009 ff4f 	bl	800c8e0 <f_mount>
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
    if (fresult != FR_OK)
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <SD_Init+0x38>
    {
        return 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e003      	b.n	8002a58 <SD_Init+0x40>
    }

    sd_initialized = 1;
 8002a50:	4b03      	ldr	r3, [pc, #12]	@ (8002a60 <SD_Init+0x48>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]
    return 1;
 8002a56:	2301      	movs	r3, #1
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	200002f0 	.word	0x200002f0
 8002a64:	0800dc4c 	.word	0x0800dc4c
 8002a68:	200000c0 	.word	0x200000c0

08002a6c <SD_ReadFile>:
 * @param  buffer: Buffer để lưu dữ liệu đọc được
 * @param  buffer_size: Kích thước của buffer
 * @retval int: Số byte đọc được, -1 nếu có lỗi
 */
int SD_ReadFile(const char *filename, char *buffer, uint32_t buffer_size)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002a78:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002a7c:	6018      	str	r0, [r3, #0]
 8002a7e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002a82:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002a86:	6019      	str	r1, [r3, #0]
 8002a88:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002a8c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002a90:	601a      	str	r2, [r3, #0]
    FIL file;
    FRESULT fresult;
    UINT bytesRead = 0;
 8002a92:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002a96:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]

    // Kiểm tra SD đã khởi tạo chưa
    if (!sd_initialized)
 8002a9e:	4b35      	ldr	r3, [pc, #212]	@ (8002b74 <SD_ReadFile+0x108>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d107      	bne.n	8002ab6 <SD_ReadFile+0x4a>
    {
        if (!SD_Init())
 8002aa6:	f7ff ffb7 	bl	8002a18 <SD_Init>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <SD_ReadFile+0x4a>
        {
            return -1;
 8002ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab4:	e059      	b.n	8002b6a <SD_ReadFile+0xfe>
        }
    }

    // Mở file để đọc
    fresult = f_open(&file, filename, FA_READ);
 8002ab6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002aba:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002abe:	f107 0018 	add.w	r0, r7, #24
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	6819      	ldr	r1, [r3, #0]
 8002ac6:	f009 ff51 	bl	800c96c <f_open>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
    if (fresult != FR_OK)
 8002ad0:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <SD_ReadFile+0x72>
    {
        return -1;
 8002ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8002adc:	e045      	b.n	8002b6a <SD_ReadFile+0xfe>
    }

    // Xác định kích thước cần đọc
    UINT size_to_read = f_size(&file);
 8002ade:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002ae2:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    if (size_to_read >= buffer_size)
 8002aec:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002af0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002af4:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d307      	bcc.n	8002b0e <SD_ReadFile+0xa2>
    {
        size_to_read = buffer_size - 1;
 8002afe:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002b02:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    }

    // Đọc dữ liệu từ file
    fresult = f_read(&file, buffer, size_to_read, &bytesRead);
 8002b0e:	f107 0314 	add.w	r3, r7, #20
 8002b12:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8002b16:	f5a2 7112 	sub.w	r1, r2, #584	@ 0x248
 8002b1a:	f107 0018 	add.w	r0, r7, #24
 8002b1e:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8002b22:	6809      	ldr	r1, [r1, #0]
 8002b24:	f00a f8dc 	bl	800cce0 <f_read>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b

    // Đóng file
    f_close(&file);
 8002b2e:	f107 0318 	add.w	r3, r7, #24
 8002b32:	4618      	mov	r0, r3
 8002b34:	f00a fa91 	bl	800d05a <f_close>

    if (fresult != FR_OK)
 8002b38:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <SD_ReadFile+0xda>
    {
        return -1;
 8002b40:	f04f 33ff 	mov.w	r3, #4294967295
 8002b44:	e011      	b.n	8002b6a <SD_ReadFile+0xfe>
    }

    // Thêm null terminator nếu đọc chuỗi
    buffer[bytesRead] = '\0';
 8002b46:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002b4a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8002b54:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]

    return bytesRead;
 8002b60:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002b64:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002b68:	681b      	ldr	r3, [r3, #0]
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	200002f0 	.word	0x200002f0

08002b78 <SD_ReadTeamFile>:
 * @param  buffer: Buffer để lưu dữ liệu đọc được
 * @param  buffer_size: Kích thước buffer
 * @retval int: Số byte đọc được, -1 nếu có lỗi
 */
int SD_ReadTeamFile(char *buffer, uint32_t buffer_size)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
    return SD_ReadFile(FILE_NAME, buffer, buffer_size);
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4804      	ldr	r0, [pc, #16]	@ (8002b98 <SD_ReadTeamFile+0x20>)
 8002b88:	f7ff ff70 	bl	8002a6c <SD_ReadFile>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	0800dc5c 	.word	0x0800dc5c

08002b9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002baa:	4a0f      	ldr	r2, [pc, #60]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	603b      	str	r3, [r7, #0]
 8002bc2:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	4a08      	ldr	r2, [pc, #32]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_MspInit+0x4c>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40023800 	.word	0x40023800

08002bec <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8002c28 <HAL_ADC_MspInit+0x3c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d10d      	bne.n	8002c1a <HAL_ADC_MspInit+0x2e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <HAL_ADC_MspInit+0x40>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	4a09      	ldr	r2, [pc, #36]	@ (8002c2c <HAL_ADC_MspInit+0x40>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c0e:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <HAL_ADC_MspInit+0x40>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002c1a:	bf00      	nop
 8002c1c:	3714      	adds	r7, #20
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40012000 	.word	0x40012000
 8002c2c:	40023800 	.word	0x40023800

08002c30 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08c      	sub	sp, #48	@ 0x30
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	f107 031c 	add.w	r3, r7, #28
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002d7c <HAL_CAN_MspInit+0x14c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d13e      	bne.n	8002cd0 <HAL_CAN_MspInit+0xa0>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002c52:	4b4b      	ldr	r3, [pc, #300]	@ (8002d80 <HAL_CAN_MspInit+0x150>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3301      	adds	r3, #1
 8002c58:	4a49      	ldr	r2, [pc, #292]	@ (8002d80 <HAL_CAN_MspInit+0x150>)
 8002c5a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002c5c:	4b48      	ldr	r3, [pc, #288]	@ (8002d80 <HAL_CAN_MspInit+0x150>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d10d      	bne.n	8002c80 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002c64:	2300      	movs	r3, #0
 8002c66:	61bb      	str	r3, [r7, #24]
 8002c68:	4b46      	ldr	r3, [pc, #280]	@ (8002d84 <HAL_CAN_MspInit+0x154>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	4a45      	ldr	r2, [pc, #276]	@ (8002d84 <HAL_CAN_MspInit+0x154>)
 8002c6e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c74:	4b43      	ldr	r3, [pc, #268]	@ (8002d84 <HAL_CAN_MspInit+0x154>)
 8002c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]
 8002c84:	4b3f      	ldr	r3, [pc, #252]	@ (8002d84 <HAL_CAN_MspInit+0x154>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	4a3e      	ldr	r2, [pc, #248]	@ (8002d84 <HAL_CAN_MspInit+0x154>)
 8002c8a:	f043 0301 	orr.w	r3, r3, #1
 8002c8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c90:	4b3c      	ldr	r3, [pc, #240]	@ (8002d84 <HAL_CAN_MspInit+0x154>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c9c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002caa:	2303      	movs	r3, #3
 8002cac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002cae:	2309      	movs	r3, #9
 8002cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4833      	ldr	r0, [pc, #204]	@ (8002d88 <HAL_CAN_MspInit+0x158>)
 8002cba:	f001 ff73 	bl	8004ba4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	2013      	movs	r0, #19
 8002cc4:	f001 fef9 	bl	8004aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002cc8:	2013      	movs	r0, #19
 8002cca:	f001 ff12 	bl	8004af2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002cce:	e050      	b.n	8002d72 <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d8c <HAL_CAN_MspInit+0x15c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d14b      	bne.n	8002d72 <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	4b29      	ldr	r3, [pc, #164]	@ (8002d84 <HAL_CAN_MspInit+0x154>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	4a28      	ldr	r2, [pc, #160]	@ (8002d84 <HAL_CAN_MspInit+0x154>)
 8002ce4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cea:	4b26      	ldr	r3, [pc, #152]	@ (8002d84 <HAL_CAN_MspInit+0x154>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002cf6:	4b22      	ldr	r3, [pc, #136]	@ (8002d80 <HAL_CAN_MspInit+0x150>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	4a20      	ldr	r2, [pc, #128]	@ (8002d80 <HAL_CAN_MspInit+0x150>)
 8002cfe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002d00:	4b1f      	ldr	r3, [pc, #124]	@ (8002d80 <HAL_CAN_MspInit+0x150>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d10d      	bne.n	8002d24 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d84 <HAL_CAN_MspInit+0x154>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	4a1c      	ldr	r2, [pc, #112]	@ (8002d84 <HAL_CAN_MspInit+0x154>)
 8002d12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d16:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d18:	4b1a      	ldr	r3, [pc, #104]	@ (8002d84 <HAL_CAN_MspInit+0x154>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]
 8002d28:	4b16      	ldr	r3, [pc, #88]	@ (8002d84 <HAL_CAN_MspInit+0x154>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2c:	4a15      	ldr	r2, [pc, #84]	@ (8002d84 <HAL_CAN_MspInit+0x154>)
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d34:	4b13      	ldr	r3, [pc, #76]	@ (8002d84 <HAL_CAN_MspInit+0x154>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002d40:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
 8002d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002d52:	2309      	movs	r3, #9
 8002d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d56:	f107 031c 	add.w	r3, r7, #28
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	480c      	ldr	r0, [pc, #48]	@ (8002d90 <HAL_CAN_MspInit+0x160>)
 8002d5e:	f001 ff21 	bl	8004ba4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	2040      	movs	r0, #64	@ 0x40
 8002d68:	f001 fea7 	bl	8004aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002d6c:	2040      	movs	r0, #64	@ 0x40
 8002d6e:	f001 fec0 	bl	8004af2 <HAL_NVIC_EnableIRQ>
}
 8002d72:	bf00      	nop
 8002d74:	3730      	adds	r7, #48	@ 0x30
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40006400 	.word	0x40006400
 8002d80:	200002f4 	.word	0x200002f4
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	40006800 	.word	0x40006800
 8002d90:	40020400 	.word	0x40020400

08002d94 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	@ 0x28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a26      	ldr	r2, [pc, #152]	@ (8002e4c <HAL_I2C_MspInit+0xb8>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d145      	bne.n	8002e42 <HAL_I2C_MspInit+0xae>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	4b25      	ldr	r3, [pc, #148]	@ (8002e50 <HAL_I2C_MspInit+0xbc>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	4a24      	ldr	r2, [pc, #144]	@ (8002e50 <HAL_I2C_MspInit+0xbc>)
 8002dc0:	f043 0302 	orr.w	r3, r3, #2
 8002dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc6:	4b22      	ldr	r3, [pc, #136]	@ (8002e50 <HAL_I2C_MspInit+0xbc>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin;
 8002dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dd8:	2312      	movs	r3, #18
 8002dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de0:	2303      	movs	r3, #3
 8002de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002de4:	2304      	movs	r3, #4
 8002de6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8002de8:	f107 0314 	add.w	r3, r7, #20
 8002dec:	4619      	mov	r1, r3
 8002dee:	4819      	ldr	r0, [pc, #100]	@ (8002e54 <HAL_I2C_MspInit+0xc0>)
 8002df0:	f001 fed8 	bl	8004ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDA_Pin;
 8002df4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dfa:	2312      	movs	r3, #18
 8002dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e02:	2303      	movs	r3, #3
 8002e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002e06:	2304      	movs	r3, #4
 8002e08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8002e0a:	f107 0314 	add.w	r3, r7, #20
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4810      	ldr	r0, [pc, #64]	@ (8002e54 <HAL_I2C_MspInit+0xc0>)
 8002e12:	f001 fec7 	bl	8004ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <HAL_I2C_MspInit+0xbc>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e50 <HAL_I2C_MspInit+0xbc>)
 8002e20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e26:	4b0a      	ldr	r3, [pc, #40]	@ (8002e50 <HAL_I2C_MspInit+0xbc>)
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002e32:	2200      	movs	r2, #0
 8002e34:	2100      	movs	r1, #0
 8002e36:	2021      	movs	r0, #33	@ 0x21
 8002e38:	f001 fe3f 	bl	8004aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002e3c:	2021      	movs	r0, #33	@ 0x21
 8002e3e:	f001 fe58 	bl	8004af2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002e42:	bf00      	nop
 8002e44:	3728      	adds	r7, #40	@ 0x28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40005800 	.word	0x40005800
 8002e50:	40023800 	.word	0x40023800
 8002e54:	40020400 	.word	0x40020400

08002e58 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08a      	sub	sp, #40	@ 0x28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 0314 	add.w	r3, r7, #20
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a2c      	ldr	r2, [pc, #176]	@ (8002f28 <HAL_SD_MspInit+0xd0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d152      	bne.n	8002f20 <HAL_SD_MspInit+0xc8>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	613b      	str	r3, [r7, #16]
 8002e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002f2c <HAL_SD_MspInit+0xd4>)
 8002e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e82:	4a2a      	ldr	r2, [pc, #168]	@ (8002f2c <HAL_SD_MspInit+0xd4>)
 8002e84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e8a:	4b28      	ldr	r3, [pc, #160]	@ (8002f2c <HAL_SD_MspInit+0xd4>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e92:	613b      	str	r3, [r7, #16]
 8002e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60fb      	str	r3, [r7, #12]
 8002e9a:	4b24      	ldr	r3, [pc, #144]	@ (8002f2c <HAL_SD_MspInit+0xd4>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <HAL_SD_MspInit+0xd4>)
 8002ea0:	f043 0304 	orr.w	r3, r3, #4
 8002ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea6:	4b21      	ldr	r3, [pc, #132]	@ (8002f2c <HAL_SD_MspInit+0xd4>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f2c <HAL_SD_MspInit+0xd4>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	4a1c      	ldr	r2, [pc, #112]	@ (8002f2c <HAL_SD_MspInit+0xd4>)
 8002ebc:	f043 0308 	orr.w	r3, r3, #8
 8002ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8002f2c <HAL_SD_MspInit+0xd4>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	f003 0308 	and.w	r3, r3, #8
 8002eca:	60bb      	str	r3, [r7, #8]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002ece:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002ed2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002edc:	2303      	movs	r3, #3
 8002ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002ee0:	230c      	movs	r3, #12
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ee4:	f107 0314 	add.w	r3, r7, #20
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4811      	ldr	r0, [pc, #68]	@ (8002f30 <HAL_SD_MspInit+0xd8>)
 8002eec:	f001 fe5a 	bl	8004ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efc:	2303      	movs	r3, #3
 8002efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002f00:	230c      	movs	r3, #12
 8002f02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	4619      	mov	r1, r3
 8002f0a:	480a      	ldr	r0, [pc, #40]	@ (8002f34 <HAL_SD_MspInit+0xdc>)
 8002f0c:	f001 fe4a 	bl	8004ba4 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002f10:	2200      	movs	r2, #0
 8002f12:	2100      	movs	r1, #0
 8002f14:	2031      	movs	r0, #49	@ 0x31
 8002f16:	f001 fdd0 	bl	8004aba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002f1a:	2031      	movs	r0, #49	@ 0x31
 8002f1c:	f001 fde9 	bl	8004af2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 8002f20:	bf00      	nop
 8002f22:	3728      	adds	r7, #40	@ 0x28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40020800 	.word	0x40020800
 8002f34:	40020c00 	.word	0x40020c00

08002f38 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	@ 0x28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 0314 	add.w	r3, r7, #20
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a28      	ldr	r2, [pc, #160]	@ (8002ff8 <HAL_SPI_MspInit+0xc0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d149      	bne.n	8002fee <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	4b27      	ldr	r3, [pc, #156]	@ (8002ffc <HAL_SPI_MspInit+0xc4>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	4a26      	ldr	r2, [pc, #152]	@ (8002ffc <HAL_SPI_MspInit+0xc4>)
 8002f64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f6a:	4b24      	ldr	r3, [pc, #144]	@ (8002ffc <HAL_SPI_MspInit+0xc4>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f72:	613b      	str	r3, [r7, #16]
 8002f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	4b20      	ldr	r3, [pc, #128]	@ (8002ffc <HAL_SPI_MspInit+0xc4>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ffc <HAL_SPI_MspInit+0xc4>)
 8002f80:	f043 0301 	orr.w	r3, r3, #1
 8002f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f86:	4b1d      	ldr	r3, [pc, #116]	@ (8002ffc <HAL_SPI_MspInit+0xc4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
 8002f96:	4b19      	ldr	r3, [pc, #100]	@ (8002ffc <HAL_SPI_MspInit+0xc4>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	4a18      	ldr	r2, [pc, #96]	@ (8002ffc <HAL_SPI_MspInit+0xc4>)
 8002f9c:	f043 0302 	orr.w	r3, r3, #2
 8002fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa2:	4b16      	ldr	r3, [pc, #88]	@ (8002ffc <HAL_SPI_MspInit+0xc4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin|MOSI_Pin;
 8002fae:	23c0      	movs	r3, #192	@ 0xc0
 8002fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fbe:	2305      	movs	r3, #5
 8002fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fc2:	f107 0314 	add.w	r3, r7, #20
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	480d      	ldr	r0, [pc, #52]	@ (8003000 <HAL_SPI_MspInit+0xc8>)
 8002fca:	f001 fdeb 	bl	8004ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCLK_Pin;
 8002fce:	2308      	movs	r3, #8
 8002fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fde:	2305      	movs	r3, #5
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCLK_GPIO_Port, &GPIO_InitStruct);
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4806      	ldr	r0, [pc, #24]	@ (8003004 <HAL_SPI_MspInit+0xcc>)
 8002fea:	f001 fddb 	bl	8004ba4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002fee:	bf00      	nop
 8002ff0:	3728      	adds	r7, #40	@ 0x28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40013000 	.word	0x40013000
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020000 	.word	0x40020000
 8003004:	40020400 	.word	0x40020400

08003008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800300c:	bf00      	nop
 800300e:	e7fd      	b.n	800300c <NMI_Handler+0x4>

08003010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <HardFault_Handler+0x4>

08003018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800301c:	bf00      	nop
 800301e:	e7fd      	b.n	800301c <MemManage_Handler+0x4>

08003020 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003024:	bf00      	nop
 8003026:	e7fd      	b.n	8003024 <BusFault_Handler+0x4>

08003028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <UsageFault_Handler+0x4>

08003030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800305e:	f000 f983 	bl	8003368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	bd80      	pop	{r7, pc}

08003066 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 800306a:	2010      	movs	r0, #16
 800306c:	f001 ff82 	bl	8004f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003070:	bf00      	nop
 8003072:	bd80      	pop	{r7, pc}

08003074 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003078:	4802      	ldr	r0, [pc, #8]	@ (8003084 <CAN1_TX_IRQHandler+0x10>)
 800307a:	f001 f9ef 	bl	800445c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200006e4 	.word	0x200006e4

08003088 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800308c:	4802      	ldr	r0, [pc, #8]	@ (8003098 <I2C2_EV_IRQHandler+0x10>)
 800308e:	f002 fc0f 	bl	80058b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	200004ac 	.word	0x200004ac

0800309c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80030a0:	4802      	ldr	r0, [pc, #8]	@ (80030ac <SDIO_IRQHandler+0x10>)
 80030a2:	f005 fbf7 	bl	8008894 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000600 	.word	0x20000600

080030b0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80030b4:	4802      	ldr	r0, [pc, #8]	@ (80030c0 <CAN2_RX0_IRQHandler+0x10>)
 80030b6:	f001 f9d1 	bl	800445c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200005a4 	.word	0x200005a4

080030c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030cc:	4a14      	ldr	r2, [pc, #80]	@ (8003120 <_sbrk+0x5c>)
 80030ce:	4b15      	ldr	r3, [pc, #84]	@ (8003124 <_sbrk+0x60>)
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030d8:	4b13      	ldr	r3, [pc, #76]	@ (8003128 <_sbrk+0x64>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d102      	bne.n	80030e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e0:	4b11      	ldr	r3, [pc, #68]	@ (8003128 <_sbrk+0x64>)
 80030e2:	4a12      	ldr	r2, [pc, #72]	@ (800312c <_sbrk+0x68>)
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030e6:	4b10      	ldr	r3, [pc, #64]	@ (8003128 <_sbrk+0x64>)
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d207      	bcs.n	8003104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f4:	f00a f862 	bl	800d1bc <__errno>
 80030f8:	4603      	mov	r3, r0
 80030fa:	220c      	movs	r2, #12
 80030fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	e009      	b.n	8003118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003104:	4b08      	ldr	r3, [pc, #32]	@ (8003128 <_sbrk+0x64>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800310a:	4b07      	ldr	r3, [pc, #28]	@ (8003128 <_sbrk+0x64>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4413      	add	r3, r2
 8003112:	4a05      	ldr	r2, [pc, #20]	@ (8003128 <_sbrk+0x64>)
 8003114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003116:	68fb      	ldr	r3, [r7, #12]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	20020000 	.word	0x20020000
 8003124:	00000400 	.word	0x00000400
 8003128:	200002f8 	.word	0x200002f8
 800312c:	20000b88 	.word	0x20000b88

08003130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003134:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <SystemInit+0x20>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313a:	4a05      	ldr	r2, [pc, #20]	@ (8003150 <SystemInit+0x20>)
 800313c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003140:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <Task2_LedBlink>:

/**
 * @brief Thực hiện một lần nháy (toggle) LED và delay cho Task 2.
 */
void Task2_LedBlink(GPIO_TypeDef *ledPort, uint16_t ledPin, uint32_t blinkSpeed_ms) // Sử dụng tên hàm mới (nếu đổi)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	460b      	mov	r3, r1
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	817b      	strh	r3, [r7, #10]
  HAL_GPIO_TogglePin(ledPort, ledPin);
 8003162:	897b      	ldrh	r3, [r7, #10]
 8003164:	4619      	mov	r1, r3
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f001 fee9 	bl	8004f3e <HAL_GPIO_TogglePin>
  HAL_Delay(blinkSpeed_ms);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 f91b 	bl	80033a8 <HAL_Delay>
//	static uint32_t last_tick = 0;
//		    if (HAL_GetTick() - last_tick >= blinkSpeed_ms) {
//		        HAL_GPIO_TogglePin(ledPort, ledPin);
//		        last_tick = HAL_GetTick();
//		    }
}
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <Read_Internal_Temperature>:

float Read_Internal_Temperature(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
  uint32_t adc_value = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
  float temperature_celsius = 0.0f;
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	60bb      	str	r3, [r7, #8]

  HAL_ADC_Start(&hadc1);                                // Khởi động ADC1
 800318c:	481b      	ldr	r0, [pc, #108]	@ (80031fc <Read_Internal_Temperature+0x80>)
 800318e:	f000 f973 	bl	8003478 <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) // Chờ chuyển đổi, timeout 100ms
 8003192:	2164      	movs	r1, #100	@ 0x64
 8003194:	4819      	ldr	r0, [pc, #100]	@ (80031fc <Read_Internal_Temperature+0x80>)
 8003196:	f000 fa74 	bl	8003682 <HAL_ADC_PollForConversion>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d103      	bne.n	80031a8 <Read_Internal_Temperature+0x2c>
  {
    adc_value = HAL_ADC_GetValue(&hadc1); // Đọc giá trị ADC
 80031a0:	4816      	ldr	r0, [pc, #88]	@ (80031fc <Read_Internal_Temperature+0x80>)
 80031a2:	f000 faf9 	bl	8003798 <HAL_ADC_GetValue>
 80031a6:	60f8      	str	r0, [r7, #12]
  }
  HAL_ADC_Stop(&hadc1); // Dừng ADC1
 80031a8:	4814      	ldr	r0, [pc, #80]	@ (80031fc <Read_Internal_Temperature+0x80>)
 80031aa:	f000 fa37 	bl	800361c <HAL_ADC_Stop>

  // Công thức tính nhiệt độ từ datasheet (có thể cần điều chỉnh)
  // Temperature(in °C) = {(V SENSE – V 25 ) / Avg_Slope} + 25
  // V SENSE = adc_value * VREF_MV / ADC_MAX_VALUE
  float vsense_mv = ((float)adc_value * ADC_VREF_MV) / ADC_MAX_VALUE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b8:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003200 <Read_Internal_Temperature+0x84>
 80031bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031c0:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8003204 <Read_Internal_Temperature+0x88>
 80031c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031c8:	edc7 7a01 	vstr	s15, [r7, #4]
  temperature_celsius = (vsense_mv - TEMP_SENSOR_V25_MV) / TEMP_SENSOR_AVG_SLOPE_MV_PER_C + 25.0f;
 80031cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80031d0:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003208 <Read_Internal_Temperature+0x8c>
 80031d4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80031d8:	eef0 6a04 	vmov.f32	s13, #4	@ 0x40200000  2.5
 80031dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031e0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80031e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031e8:	edc7 7a02 	vstr	s15, [r7, #8]

  return temperature_celsius;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	ee07 3a90 	vmov	s15, r3
}
 80031f2:	eeb0 0a67 	vmov.f32	s0, s15
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	2000055c 	.word	0x2000055c
 8003200:	454e4000 	.word	0x454e4000
 8003204:	457ff000 	.word	0x457ff000
 8003208:	443e0000 	.word	0x443e0000

0800320c <CheckUserButtonAndSaveTemp>:
 * @brief Kiểm tra nút User Button và ghi nhiệt độ vào FRAM ngay lập tức khi nút được nhấn
 * @param previous_state Con trỏ đến biến lưu trạng thái nút trước đó
 * @retval None
 */
void CheckUserButtonAndSaveTemp(GPIO_PinState *previous_state)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  // Đọc trạng thái hiện tại của nút
  GPIO_PinState current_button_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8003214:	2102      	movs	r1, #2
 8003216:	4814      	ldr	r0, [pc, #80]	@ (8003268 <CheckUserButtonAndSaveTemp+0x5c>)
 8003218:	f001 fe60 	bl	8004edc <HAL_GPIO_ReadPin>
 800321c:	4603      	mov	r3, r0
 800321e:	73fb      	strb	r3, [r7, #15]

  // Kiểm tra xem nút vừa được nhấn xuống (phát hiện cạnh xuống)
  if (current_button_state == GPIO_PIN_SET && *previous_state == GPIO_PIN_RESET)
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d118      	bne.n	8003258 <CheckUserButtonAndSaveTemp+0x4c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d114      	bne.n	8003258 <CheckUserButtonAndSaveTemp+0x4c>
  {
    // Nút vừa được nhấn xuống
    // Đọc nhiệt độ từ cảm biến
    uint8_t current_temp = (uint8_t)Read_Internal_Temperature();
 800322e:	f7ff ffa5 	bl	800317c <Read_Internal_Temperature>
 8003232:	eef0 7a40 	vmov.f32	s15, s0
 8003236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800323a:	edc7 7a00 	vstr	s15, [r7]
 800323e:	783b      	ldrb	r3, [r7, #0]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	737b      	strb	r3, [r7, #13]

    // Ghi nhiệt độ vào FRAM tại địa chỉ cố định, ghi đè lên giá trị cũ
    HAL_StatusTypeDef status = FRAM_WriteBytes(&hi2c2, USER_TEMP_ADDR, &current_temp, 1);
 8003244:	f107 020d 	add.w	r2, r7, #13
 8003248:	2301      	movs	r3, #1
 800324a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800324e:	4807      	ldr	r0, [pc, #28]	@ (800326c <CheckUserButtonAndSaveTemp+0x60>)
 8003250:	f7fd fe22 	bl	8000e98 <FRAM_WriteBytes>
 8003254:	4603      	mov	r3, r0
 8003256:	73bb      	strb	r3, [r7, #14]

  }

  // Cập nhật trạng thái nút trước đó
  *previous_state = current_button_state;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	7bfa      	ldrb	r2, [r7, #15]
 800325c:	701a      	strb	r2, [r3, #0]
}
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40020000 	.word	0x40020000
 800326c:	200004ac 	.word	0x200004ac

08003270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003270:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003274:	f7ff ff5c 	bl	8003130 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003278:	480c      	ldr	r0, [pc, #48]	@ (80032ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800327a:	490d      	ldr	r1, [pc, #52]	@ (80032b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800327c:	4a0d      	ldr	r2, [pc, #52]	@ (80032b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800327e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003280:	e002      	b.n	8003288 <LoopCopyDataInit>

08003282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003286:	3304      	adds	r3, #4

08003288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800328a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800328c:	d3f9      	bcc.n	8003282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800328e:	4a0a      	ldr	r2, [pc, #40]	@ (80032b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003290:	4c0a      	ldr	r4, [pc, #40]	@ (80032bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003294:	e001      	b.n	800329a <LoopFillZerobss>

08003296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003298:	3204      	adds	r2, #4

0800329a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800329a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800329c:	d3fb      	bcc.n	8003296 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800329e:	f009 ff93 	bl	800d1c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032a2:	f7fd fe3f 	bl	8000f24 <main>
  bx  lr    
 80032a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80032b4:	0800df78 	.word	0x0800df78
  ldr r2, =_sbss
 80032b8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80032bc:	20000b84 	.word	0x20000b84

080032c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032c0:	e7fe      	b.n	80032c0 <ADC_IRQHandler>
	...

080032c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003304 <HAL_Init+0x40>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003304 <HAL_Init+0x40>)
 80032ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003304 <HAL_Init+0x40>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003304 <HAL_Init+0x40>)
 80032da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032e0:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <HAL_Init+0x40>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a07      	ldr	r2, [pc, #28]	@ (8003304 <HAL_Init+0x40>)
 80032e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032ec:	2003      	movs	r0, #3
 80032ee:	f001 fbd9 	bl	8004aa4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032f2:	200f      	movs	r0, #15
 80032f4:	f000 f808 	bl	8003308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032f8:	f7ff fc50 	bl	8002b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40023c00 	.word	0x40023c00

08003308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003310:	4b12      	ldr	r3, [pc, #72]	@ (800335c <HAL_InitTick+0x54>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4b12      	ldr	r3, [pc, #72]	@ (8003360 <HAL_InitTick+0x58>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	4619      	mov	r1, r3
 800331a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800331e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003322:	fbb2 f3f3 	udiv	r3, r2, r3
 8003326:	4618      	mov	r0, r3
 8003328:	f001 fbff 	bl	8004b2a <HAL_SYSTICK_Config>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e00e      	b.n	8003354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b0f      	cmp	r3, #15
 800333a:	d80a      	bhi.n	8003352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800333c:	2200      	movs	r2, #0
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	f04f 30ff 	mov.w	r0, #4294967295
 8003344:	f001 fbb9 	bl	8004aba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003348:	4a06      	ldr	r2, [pc, #24]	@ (8003364 <HAL_InitTick+0x5c>)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
 8003350:	e000      	b.n	8003354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000004 	.word	0x20000004
 8003360:	2000000c 	.word	0x2000000c
 8003364:	20000008 	.word	0x20000008

08003368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800336c:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_IncTick+0x20>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	4b06      	ldr	r3, [pc, #24]	@ (800338c <HAL_IncTick+0x24>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4413      	add	r3, r2
 8003378:	4a04      	ldr	r2, [pc, #16]	@ (800338c <HAL_IncTick+0x24>)
 800337a:	6013      	str	r3, [r2, #0]
}
 800337c:	bf00      	nop
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	2000000c 	.word	0x2000000c
 800338c:	20000718 	.word	0x20000718

08003390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return uwTick;
 8003394:	4b03      	ldr	r3, [pc, #12]	@ (80033a4 <HAL_GetTick+0x14>)
 8003396:	681b      	ldr	r3, [r3, #0]
}
 8003398:	4618      	mov	r0, r3
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20000718 	.word	0x20000718

080033a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033b0:	f7ff ffee 	bl	8003390 <HAL_GetTick>
 80033b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d005      	beq.n	80033ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033c2:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <HAL_Delay+0x44>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	461a      	mov	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	4413      	add	r3, r2
 80033cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033ce:	bf00      	nop
 80033d0:	f7ff ffde 	bl	8003390 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d8f7      	bhi.n	80033d0 <HAL_Delay+0x28>
  {
  }
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	2000000c 	.word	0x2000000c

080033f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e033      	b.n	800346e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7ff fbec 	bl	8002bec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	d118      	bne.n	8003460 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003436:	f023 0302 	bic.w	r3, r3, #2
 800343a:	f043 0202 	orr.w	r2, r3, #2
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 fad8 	bl	80039f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	f023 0303 	bic.w	r3, r3, #3
 8003456:	f043 0201 	orr.w	r2, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	641a      	str	r2, [r3, #64]	@ 0x40
 800345e:	e001      	b.n	8003464 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800346c:	7bfb      	ldrb	r3, [r7, #15]
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_ADC_Start+0x1a>
 800348e:	2302      	movs	r3, #2
 8003490:	e0b2      	b.n	80035f8 <HAL_ADC_Start+0x180>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d018      	beq.n	80034da <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034b8:	4b52      	ldr	r3, [pc, #328]	@ (8003604 <HAL_ADC_Start+0x18c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a52      	ldr	r2, [pc, #328]	@ (8003608 <HAL_ADC_Start+0x190>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	0c9a      	lsrs	r2, r3, #18
 80034c4:	4613      	mov	r3, r2
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	4413      	add	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80034cc:	e002      	b.n	80034d4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	3b01      	subs	r3, #1
 80034d2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f9      	bne.n	80034ce <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 0301 	and.w	r3, r3, #1
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d17a      	bne.n	80035de <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ec:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003512:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003526:	d106      	bne.n	8003536 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352c:	f023 0206 	bic.w	r2, r3, #6
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	645a      	str	r2, [r3, #68]	@ 0x44
 8003534:	e002      	b.n	800353c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003544:	4b31      	ldr	r3, [pc, #196]	@ (800360c <HAL_ADC_Start+0x194>)
 8003546:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003550:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	2b00      	cmp	r3, #0
 800355c:	d12a      	bne.n	80035b4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a2b      	ldr	r2, [pc, #172]	@ (8003610 <HAL_ADC_Start+0x198>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d015      	beq.n	8003594 <HAL_ADC_Start+0x11c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a29      	ldr	r2, [pc, #164]	@ (8003614 <HAL_ADC_Start+0x19c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d105      	bne.n	800357e <HAL_ADC_Start+0x106>
 8003572:	4b26      	ldr	r3, [pc, #152]	@ (800360c <HAL_ADC_Start+0x194>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a25      	ldr	r2, [pc, #148]	@ (8003618 <HAL_ADC_Start+0x1a0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d136      	bne.n	80035f6 <HAL_ADC_Start+0x17e>
 8003588:	4b20      	ldr	r3, [pc, #128]	@ (800360c <HAL_ADC_Start+0x194>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	d130      	bne.n	80035f6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d129      	bne.n	80035f6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	e020      	b.n	80035f6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a15      	ldr	r2, [pc, #84]	@ (8003610 <HAL_ADC_Start+0x198>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d11b      	bne.n	80035f6 <HAL_ADC_Start+0x17e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d114      	bne.n	80035f6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	e00b      	b.n	80035f6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	f043 0210 	orr.w	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	f043 0201 	orr.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	20000004 	.word	0x20000004
 8003608:	431bde83 	.word	0x431bde83
 800360c:	40012300 	.word	0x40012300
 8003610:	40012000 	.word	0x40012000
 8003614:	40012100 	.word	0x40012100
 8003618:	40012200 	.word	0x40012200

0800361c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_ADC_Stop+0x16>
 800362e:	2302      	movs	r3, #2
 8003630:	e021      	b.n	8003676 <HAL_ADC_Stop+0x5a>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0201 	bic.w	r2, r2, #1
 8003648:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003660:	f023 0301 	bic.w	r3, r3, #1
 8003664:	f043 0201 	orr.w	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800369e:	d113      	bne.n	80036c8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80036aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ae:	d10b      	bne.n	80036c8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	f043 0220 	orr.w	r2, r3, #32
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e063      	b.n	8003790 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80036c8:	f7ff fe62 	bl	8003390 <HAL_GetTick>
 80036cc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80036ce:	e021      	b.n	8003714 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d01d      	beq.n	8003714 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d007      	beq.n	80036ee <HAL_ADC_PollForConversion+0x6c>
 80036de:	f7ff fe57 	bl	8003390 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d212      	bcs.n	8003714 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d00b      	beq.n	8003714 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	f043 0204 	orr.w	r2, r3, #4
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e03d      	b.n	8003790 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b02      	cmp	r3, #2
 8003720:	d1d6      	bne.n	80036d0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f06f 0212 	mvn.w	r2, #18
 800372a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003730:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d123      	bne.n	800378e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800374a:	2b00      	cmp	r3, #0
 800374c:	d11f      	bne.n	800378e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003754:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003758:	2b00      	cmp	r3, #0
 800375a:	d006      	beq.n	800376a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003766:	2b00      	cmp	r3, #0
 8003768:	d111      	bne.n	800378e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d105      	bne.n	800378e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	f043 0201 	orr.w	r2, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037be:	2300      	movs	r3, #0
 80037c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x1c>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e105      	b.n	80039dc <HAL_ADC_ConfigChannel+0x228>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b09      	cmp	r3, #9
 80037de:	d925      	bls.n	800382c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68d9      	ldr	r1, [r3, #12]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	461a      	mov	r2, r3
 80037ee:	4613      	mov	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	4413      	add	r3, r2
 80037f4:	3b1e      	subs	r3, #30
 80037f6:	2207      	movs	r2, #7
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43da      	mvns	r2, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	400a      	ands	r2, r1
 8003804:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68d9      	ldr	r1, [r3, #12]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	b29b      	uxth	r3, r3
 8003816:	4618      	mov	r0, r3
 8003818:	4603      	mov	r3, r0
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	4403      	add	r3, r0
 800381e:	3b1e      	subs	r3, #30
 8003820:	409a      	lsls	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	60da      	str	r2, [r3, #12]
 800382a:	e022      	b.n	8003872 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6919      	ldr	r1, [r3, #16]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	4613      	mov	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	4413      	add	r3, r2
 8003840:	2207      	movs	r2, #7
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43da      	mvns	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	400a      	ands	r2, r1
 800384e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6919      	ldr	r1, [r3, #16]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	689a      	ldr	r2, [r3, #8]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	b29b      	uxth	r3, r3
 8003860:	4618      	mov	r0, r3
 8003862:	4603      	mov	r3, r0
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	4403      	add	r3, r0
 8003868:	409a      	lsls	r2, r3
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b06      	cmp	r3, #6
 8003878:	d824      	bhi.n	80038c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	3b05      	subs	r3, #5
 800388c:	221f      	movs	r2, #31
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	43da      	mvns	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	400a      	ands	r2, r1
 800389a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	4618      	mov	r0, r3
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	3b05      	subs	r3, #5
 80038b6:	fa00 f203 	lsl.w	r2, r0, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80038c2:	e04c      	b.n	800395e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	2b0c      	cmp	r3, #12
 80038ca:	d824      	bhi.n	8003916 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	3b23      	subs	r3, #35	@ 0x23
 80038de:	221f      	movs	r2, #31
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43da      	mvns	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	400a      	ands	r2, r1
 80038ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	4618      	mov	r0, r3
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	3b23      	subs	r3, #35	@ 0x23
 8003908:	fa00 f203 	lsl.w	r2, r0, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	631a      	str	r2, [r3, #48]	@ 0x30
 8003914:	e023      	b.n	800395e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	3b41      	subs	r3, #65	@ 0x41
 8003928:	221f      	movs	r2, #31
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43da      	mvns	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	400a      	ands	r2, r1
 8003936:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	b29b      	uxth	r3, r3
 8003944:	4618      	mov	r0, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	3b41      	subs	r3, #65	@ 0x41
 8003952:	fa00 f203 	lsl.w	r2, r0, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800395e:	4b22      	ldr	r3, [pc, #136]	@ (80039e8 <HAL_ADC_ConfigChannel+0x234>)
 8003960:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a21      	ldr	r2, [pc, #132]	@ (80039ec <HAL_ADC_ConfigChannel+0x238>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d109      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x1cc>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b12      	cmp	r3, #18
 8003972:	d105      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a19      	ldr	r2, [pc, #100]	@ (80039ec <HAL_ADC_ConfigChannel+0x238>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d123      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x21e>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b10      	cmp	r3, #16
 8003990:	d003      	beq.n	800399a <HAL_ADC_ConfigChannel+0x1e6>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b11      	cmp	r3, #17
 8003998:	d11b      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d111      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039ae:	4b10      	ldr	r3, [pc, #64]	@ (80039f0 <HAL_ADC_ConfigChannel+0x23c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a10      	ldr	r2, [pc, #64]	@ (80039f4 <HAL_ADC_ConfigChannel+0x240>)
 80039b4:	fba2 2303 	umull	r2, r3, r2, r3
 80039b8:	0c9a      	lsrs	r2, r3, #18
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039c4:	e002      	b.n	80039cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1f9      	bne.n	80039c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40012300 	.word	0x40012300
 80039ec:	40012000 	.word	0x40012000
 80039f0:	20000004 	.word	0x20000004
 80039f4:	431bde83 	.word	0x431bde83

080039f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a00:	4b79      	ldr	r3, [pc, #484]	@ (8003be8 <ADC_Init+0x1f0>)
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6859      	ldr	r1, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	021a      	lsls	r2, r3, #8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6859      	ldr	r1, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6899      	ldr	r1, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8a:	4a58      	ldr	r2, [pc, #352]	@ (8003bec <ADC_Init+0x1f4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d022      	beq.n	8003ad6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003a9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6899      	ldr	r1, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ac0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6899      	ldr	r1, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	609a      	str	r2, [r3, #8]
 8003ad4:	e00f      	b.n	8003af6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003af4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0202 	bic.w	r2, r2, #2
 8003b04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6899      	ldr	r1, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	7e1b      	ldrb	r3, [r3, #24]
 8003b10:	005a      	lsls	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01b      	beq.n	8003b5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685a      	ldr	r2, [r3, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b32:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6859      	ldr	r1, [r3, #4]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	035a      	lsls	r2, r3, #13
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]
 8003b5a:	e007      	b.n	8003b6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b6a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	051a      	lsls	r2, r3, #20
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	430a      	orrs	r2, r1
 8003b90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003ba0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6899      	ldr	r1, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003bae:	025a      	lsls	r2, r3, #9
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	6899      	ldr	r1, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	029a      	lsls	r2, r3, #10
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	40012300 	.word	0x40012300
 8003bec:	0f000001 	.word	0x0f000001

08003bf0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e0ed      	b.n	8003dde <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d102      	bne.n	8003c14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff f80e 	bl	8002c30 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c24:	f7ff fbb4 	bl	8003390 <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c2a:	e012      	b.n	8003c52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c2c:	f7ff fbb0 	bl	8003390 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b0a      	cmp	r3, #10
 8003c38:	d90b      	bls.n	8003c52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c3e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2205      	movs	r2, #5
 8003c4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e0c5      	b.n	8003dde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d0e5      	beq.n	8003c2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0202 	bic.w	r2, r2, #2
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c70:	f7ff fb8e 	bl	8003390 <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c76:	e012      	b.n	8003c9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c78:	f7ff fb8a 	bl	8003390 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b0a      	cmp	r3, #10
 8003c84:	d90b      	bls.n	8003c9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2205      	movs	r2, #5
 8003c96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e09f      	b.n	8003dde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e5      	bne.n	8003c78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	7e1b      	ldrb	r3, [r3, #24]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d108      	bne.n	8003cc6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	e007      	b.n	8003cd6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003cd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	7e5b      	ldrb	r3, [r3, #25]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d108      	bne.n	8003cf0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e007      	b.n	8003d00 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	7e9b      	ldrb	r3, [r3, #26]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d108      	bne.n	8003d1a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f042 0220 	orr.w	r2, r2, #32
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e007      	b.n	8003d2a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0220 	bic.w	r2, r2, #32
 8003d28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	7edb      	ldrb	r3, [r3, #27]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d108      	bne.n	8003d44 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 0210 	bic.w	r2, r2, #16
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	e007      	b.n	8003d54 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0210 	orr.w	r2, r2, #16
 8003d52:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	7f1b      	ldrb	r3, [r3, #28]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d108      	bne.n	8003d6e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0208 	orr.w	r2, r2, #8
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	e007      	b.n	8003d7e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0208 	bic.w	r2, r2, #8
 8003d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	7f5b      	ldrb	r3, [r3, #29]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d108      	bne.n	8003d98 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0204 	orr.w	r2, r2, #4
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	e007      	b.n	8003da8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0204 	bic.w	r2, r2, #4
 8003da6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	ea42 0103 	orr.w	r1, r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	1e5a      	subs	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003df8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8003dfa:	7dfb      	ldrb	r3, [r7, #23]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d003      	beq.n	8003e08 <HAL_CAN_ConfigFilter+0x20>
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	f040 80be 	bne.w	8003f84 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003e08:	4b65      	ldr	r3, [pc, #404]	@ (8003fa0 <HAL_CAN_ConfigFilter+0x1b8>)
 8003e0a:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003e12:	f043 0201 	orr.w	r2, r3, #1
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003e22:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	2201      	movs	r2, #1
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	401a      	ands	r2, r3
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	69db      	ldr	r3, [r3, #28]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d123      	bne.n	8003eb2 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	43db      	mvns	r3, r3
 8003e74:	401a      	ands	r2, r3
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e88:	683a      	ldr	r2, [r7, #0]
 8003e8a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003e8c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	3248      	adds	r2, #72	@ 0x48
 8003e92:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ea6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ea8:	6939      	ldr	r1, [r7, #16]
 8003eaa:	3348      	adds	r3, #72	@ 0x48
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	440b      	add	r3, r1
 8003eb0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d122      	bne.n	8003f00 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003eda:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	3248      	adds	r2, #72	@ 0x48
 8003ee0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ef4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003ef6:	6939      	ldr	r1, [r7, #16]
 8003ef8:	3348      	adds	r3, #72	@ 0x48
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	440b      	add	r3, r1
 8003efe:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d109      	bne.n	8003f1c <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	401a      	ands	r2, r3
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8003f1a:	e007      	b.n	8003f2c <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	431a      	orrs	r2, r3
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d109      	bne.n	8003f48 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	401a      	ands	r2, r3
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003f46:	e007      	b.n	8003f58 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d107      	bne.n	8003f70 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f76:	f023 0201 	bic.w	r2, r3, #1
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e006      	b.n	8003f92 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40006400 	.word	0x40006400

08003fa4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d12e      	bne.n	8004016 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0201 	bic.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003fd0:	f7ff f9de 	bl	8003390 <HAL_GetTick>
 8003fd4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003fd6:	e012      	b.n	8003ffe <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003fd8:	f7ff f9da 	bl	8003390 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b0a      	cmp	r3, #10
 8003fe4:	d90b      	bls.n	8003ffe <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2205      	movs	r2, #5
 8003ff6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e012      	b.n	8004024 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e5      	bne.n	8003fd8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e006      	b.n	8004024 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
  }
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800402c:	b480      	push	{r7}
 800402e:	b089      	sub	sp, #36	@ 0x24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
 8004038:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004040:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800404a:	7ffb      	ldrb	r3, [r7, #31]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d003      	beq.n	8004058 <HAL_CAN_AddTxMessage+0x2c>
 8004050:	7ffb      	ldrb	r3, [r7, #31]
 8004052:	2b02      	cmp	r3, #2
 8004054:	f040 80ad 	bne.w	80041b2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004068:	2b00      	cmp	r3, #0
 800406a:	d105      	bne.n	8004078 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 8095 	beq.w	80041a2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	0e1b      	lsrs	r3, r3, #24
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004082:	2201      	movs	r2, #1
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	409a      	lsls	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10d      	bne.n	80040b0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800409e:	68f9      	ldr	r1, [r7, #12]
 80040a0:	6809      	ldr	r1, [r1, #0]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	3318      	adds	r3, #24
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	440b      	add	r3, r1
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	e00f      	b.n	80040d0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040ba:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040c0:	68f9      	ldr	r1, [r7, #12]
 80040c2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80040c4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	3318      	adds	r3, #24
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	440b      	add	r3, r1
 80040ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	3318      	adds	r3, #24
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	440b      	add	r3, r1
 80040e0:	3304      	adds	r3, #4
 80040e2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	7d1b      	ldrb	r3, [r3, #20]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d111      	bne.n	8004110 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	3318      	adds	r3, #24
 80040f4:	011b      	lsls	r3, r3, #4
 80040f6:	4413      	add	r3, r2
 80040f8:	3304      	adds	r3, #4
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	6811      	ldr	r1, [r2, #0]
 8004100:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	3318      	adds	r3, #24
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	440b      	add	r3, r1
 800410c:	3304      	adds	r3, #4
 800410e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3307      	adds	r3, #7
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	061a      	lsls	r2, r3, #24
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3306      	adds	r3, #6
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3305      	adds	r3, #5
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	021b      	lsls	r3, r3, #8
 800412a:	4313      	orrs	r3, r2
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	3204      	adds	r2, #4
 8004130:	7812      	ldrb	r2, [r2, #0]
 8004132:	4610      	mov	r0, r2
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	6811      	ldr	r1, [r2, #0]
 8004138:	ea43 0200 	orr.w	r2, r3, r0
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	440b      	add	r3, r1
 8004142:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004146:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3303      	adds	r3, #3
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	061a      	lsls	r2, r3, #24
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	3302      	adds	r3, #2
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	041b      	lsls	r3, r3, #16
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3301      	adds	r3, #1
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	4313      	orrs	r3, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	7812      	ldrb	r2, [r2, #0]
 8004168:	4610      	mov	r0, r2
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	6811      	ldr	r1, [r2, #0]
 800416e:	ea43 0200 	orr.w	r2, r3, r0
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	440b      	add	r3, r1
 8004178:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800417c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	3318      	adds	r3, #24
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	4413      	add	r3, r2
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	6811      	ldr	r1, [r2, #0]
 8004190:	f043 0201 	orr.w	r2, r3, #1
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	3318      	adds	r3, #24
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	440b      	add	r3, r1
 800419c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800419e:	2300      	movs	r3, #0
 80041a0:	e00e      	b.n	80041c0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e006      	b.n	80041c0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
  }
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3724      	adds	r7, #36	@ 0x24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041e0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80041e2:	7dfb      	ldrb	r3, [r7, #23]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d003      	beq.n	80041f0 <HAL_CAN_GetRxMessage+0x24>
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	f040 8103 	bne.w	80043f6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10e      	bne.n	8004214 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d116      	bne.n	8004232 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0f7      	b.n	8004404 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d107      	bne.n	8004232 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004226:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e0e8      	b.n	8004404 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	331b      	adds	r3, #27
 800423a:	011b      	lsls	r3, r3, #4
 800423c:	4413      	add	r3, r2
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 0204 	and.w	r2, r3, #4
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10c      	bne.n	800426a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	331b      	adds	r3, #27
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	4413      	add	r3, r2
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	0d5b      	lsrs	r3, r3, #21
 8004260:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e00b      	b.n	8004282 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	331b      	adds	r3, #27
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	4413      	add	r3, r2
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	331b      	adds	r3, #27
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	4413      	add	r3, r2
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0202 	and.w	r2, r3, #2
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	331b      	adds	r3, #27
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	4413      	add	r3, r2
 80042a4:	3304      	adds	r3, #4
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d003      	beq.n	80042b8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2208      	movs	r2, #8
 80042b4:	611a      	str	r2, [r3, #16]
 80042b6:	e00b      	b.n	80042d0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	331b      	adds	r3, #27
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	4413      	add	r3, r2
 80042c4:	3304      	adds	r3, #4
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 020f 	and.w	r2, r3, #15
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	331b      	adds	r3, #27
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	4413      	add	r3, r2
 80042dc:	3304      	adds	r3, #4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	0a1b      	lsrs	r3, r3, #8
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	331b      	adds	r3, #27
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	4413      	add	r3, r2
 80042f4:	3304      	adds	r3, #4
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	4413      	add	r3, r2
 800430a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	4413      	add	r3, r2
 8004320:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	0a1a      	lsrs	r2, r3, #8
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	3301      	adds	r3, #1
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	011b      	lsls	r3, r3, #4
 8004338:	4413      	add	r3, r2
 800433a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	0c1a      	lsrs	r2, r3, #16
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	3302      	adds	r3, #2
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	4413      	add	r3, r2
 8004354:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	0e1a      	lsrs	r2, r3, #24
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	3303      	adds	r3, #3
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	011b      	lsls	r3, r3, #4
 800436c:	4413      	add	r3, r2
 800436e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	3304      	adds	r3, #4
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	4413      	add	r3, r2
 8004386:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	0a1a      	lsrs	r2, r3, #8
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	3305      	adds	r3, #5
 8004392:	b2d2      	uxtb	r2, r2
 8004394:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	4413      	add	r3, r2
 80043a0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	0c1a      	lsrs	r2, r3, #16
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	3306      	adds	r3, #6
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	0e1a      	lsrs	r2, r3, #24
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	3307      	adds	r3, #7
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d108      	bne.n	80043e2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68da      	ldr	r2, [r3, #12]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0220 	orr.w	r2, r2, #32
 80043de:	60da      	str	r2, [r3, #12]
 80043e0:	e007      	b.n	80043f2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f042 0220 	orr.w	r2, r2, #32
 80043f0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e006      	b.n	8004404 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004420:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004422:	7bfb      	ldrb	r3, [r7, #15]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d002      	beq.n	800442e <HAL_CAN_ActivateNotification+0x1e>
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d109      	bne.n	8004442 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6959      	ldr	r1, [r3, #20]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	430a      	orrs	r2, r1
 800443c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800443e:	2300      	movs	r3, #0
 8004440:	e006      	b.n	8004450 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
  }
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08a      	sub	sp, #40	@ 0x28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004464:	2300      	movs	r3, #0
 8004466:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d07c      	beq.n	800459c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d023      	beq.n	80044f4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2201      	movs	r2, #1
 80044b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f983 	bl	80047ca <HAL_CAN_TxMailbox0CompleteCallback>
 80044c4:	e016      	b.n	80044f4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d004      	beq.n	80044da <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80044d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80044d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d8:	e00c      	b.n	80044f4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d004      	beq.n	80044ee <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80044e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80044ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ec:	e002      	b.n	80044f4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f989 	bl	8004806 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d024      	beq.n	8004548 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004506:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f963 	bl	80047de <HAL_CAN_TxMailbox1CompleteCallback>
 8004518:	e016      	b.n	8004548 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800452a:	627b      	str	r3, [r7, #36]	@ 0x24
 800452c:	e00c      	b.n	8004548 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004534:	2b00      	cmp	r3, #0
 8004536:	d004      	beq.n	8004542 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004540:	e002      	b.n	8004548 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f969 	bl	800481a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d024      	beq.n	800459c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800455a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 f943 	bl	80047f2 <HAL_CAN_TxMailbox2CompleteCallback>
 800456c:	e016      	b.n	800459c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800457e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004580:	e00c      	b.n	800459c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800458c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004592:	627b      	str	r3, [r7, #36]	@ 0x24
 8004594:	e002      	b.n	800459c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 f949 	bl	800482e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800459c:	6a3b      	ldr	r3, [r7, #32]
 800459e:	f003 0308 	and.w	r3, r3, #8
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00c      	beq.n	80045c0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d007      	beq.n	80045c0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045b6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2210      	movs	r2, #16
 80045be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d006      	beq.n	80045e2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2208      	movs	r2, #8
 80045da:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f930 	bl	8004842 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7fd f9d8 	bl	80019b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00c      	beq.n	8004624 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004616:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2210      	movs	r2, #16
 8004622:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d006      	beq.n	8004646 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2208      	movs	r2, #8
 800463e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f912 	bl	800486a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004646:	6a3b      	ldr	r3, [r7, #32]
 8004648:	f003 0310 	and.w	r3, r3, #16
 800464c:	2b00      	cmp	r3, #0
 800464e:	d009      	beq.n	8004664 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f8f9 	bl	8004856 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00b      	beq.n	8004686 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b00      	cmp	r3, #0
 8004676:	d006      	beq.n	8004686 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2210      	movs	r2, #16
 800467e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f8fc 	bl	800487e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00b      	beq.n	80046a8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d006      	beq.n	80046a8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2208      	movs	r2, #8
 80046a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f8f5 	bl	8004892 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d07b      	beq.n	80047aa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d072      	beq.n	80047a2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d008      	beq.n	80046d8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d003      	beq.n	80046d8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d008      	beq.n	80046f4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d003      	beq.n	80046f4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	f043 0302 	orr.w	r3, r3, #2
 80046f2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470a:	f043 0304 	orr.w	r3, r3, #4
 800470e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004716:	2b00      	cmp	r3, #0
 8004718:	d043      	beq.n	80047a2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004720:	2b00      	cmp	r3, #0
 8004722:	d03e      	beq.n	80047a2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800472a:	2b60      	cmp	r3, #96	@ 0x60
 800472c:	d02b      	beq.n	8004786 <HAL_CAN_IRQHandler+0x32a>
 800472e:	2b60      	cmp	r3, #96	@ 0x60
 8004730:	d82e      	bhi.n	8004790 <HAL_CAN_IRQHandler+0x334>
 8004732:	2b50      	cmp	r3, #80	@ 0x50
 8004734:	d022      	beq.n	800477c <HAL_CAN_IRQHandler+0x320>
 8004736:	2b50      	cmp	r3, #80	@ 0x50
 8004738:	d82a      	bhi.n	8004790 <HAL_CAN_IRQHandler+0x334>
 800473a:	2b40      	cmp	r3, #64	@ 0x40
 800473c:	d019      	beq.n	8004772 <HAL_CAN_IRQHandler+0x316>
 800473e:	2b40      	cmp	r3, #64	@ 0x40
 8004740:	d826      	bhi.n	8004790 <HAL_CAN_IRQHandler+0x334>
 8004742:	2b30      	cmp	r3, #48	@ 0x30
 8004744:	d010      	beq.n	8004768 <HAL_CAN_IRQHandler+0x30c>
 8004746:	2b30      	cmp	r3, #48	@ 0x30
 8004748:	d822      	bhi.n	8004790 <HAL_CAN_IRQHandler+0x334>
 800474a:	2b10      	cmp	r3, #16
 800474c:	d002      	beq.n	8004754 <HAL_CAN_IRQHandler+0x2f8>
 800474e:	2b20      	cmp	r3, #32
 8004750:	d005      	beq.n	800475e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004752:	e01d      	b.n	8004790 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	f043 0308 	orr.w	r3, r3, #8
 800475a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800475c:	e019      	b.n	8004792 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	f043 0310 	orr.w	r3, r3, #16
 8004764:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004766:	e014      	b.n	8004792 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	f043 0320 	orr.w	r3, r3, #32
 800476e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004770:	e00f      	b.n	8004792 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004778:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800477a:	e00a      	b.n	8004792 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004782:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004784:	e005      	b.n	8004792 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800478e:	e000      	b.n	8004792 <HAL_CAN_IRQHandler+0x336>
            break;
 8004790:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	699a      	ldr	r2, [r3, #24]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80047a0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2204      	movs	r2, #4
 80047a8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80047aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d008      	beq.n	80047c2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f872 	bl	80048a6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80047c2:	bf00      	nop
 80047c4:	3728      	adds	r7, #40	@ 0x28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004842:	b480      	push	{r7}
 8004844:	b083      	sub	sp, #12
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004872:	bf00      	nop
 8004874:	370c      	adds	r7, #12
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr

0800487e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
	...

080048bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004900 <__NVIC_SetPriorityGrouping+0x44>)
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80048d8:	4013      	ands	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80048e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80048e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80048ee:	4a04      	ldr	r2, [pc, #16]	@ (8004900 <__NVIC_SetPriorityGrouping+0x44>)
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	60d3      	str	r3, [r2, #12]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr
 8004900:	e000ed00 	.word	0xe000ed00

08004904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004908:	4b04      	ldr	r3, [pc, #16]	@ (800491c <__NVIC_GetPriorityGrouping+0x18>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	0a1b      	lsrs	r3, r3, #8
 800490e:	f003 0307 	and.w	r3, r3, #7
}
 8004912:	4618      	mov	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	e000ed00 	.word	0xe000ed00

08004920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	4603      	mov	r3, r0
 8004928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800492a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800492e:	2b00      	cmp	r3, #0
 8004930:	db0b      	blt.n	800494a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	f003 021f 	and.w	r2, r3, #31
 8004938:	4907      	ldr	r1, [pc, #28]	@ (8004958 <__NVIC_EnableIRQ+0x38>)
 800493a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800493e:	095b      	lsrs	r3, r3, #5
 8004940:	2001      	movs	r0, #1
 8004942:	fa00 f202 	lsl.w	r2, r0, r2
 8004946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800494a:	bf00      	nop
 800494c:	370c      	adds	r7, #12
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	e000e100 	.word	0xe000e100

0800495c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800496a:	2b00      	cmp	r3, #0
 800496c:	db12      	blt.n	8004994 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	f003 021f 	and.w	r2, r3, #31
 8004974:	490a      	ldr	r1, [pc, #40]	@ (80049a0 <__NVIC_DisableIRQ+0x44>)
 8004976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	2001      	movs	r0, #1
 800497e:	fa00 f202 	lsl.w	r2, r0, r2
 8004982:	3320      	adds	r3, #32
 8004984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004988:	f3bf 8f4f 	dsb	sy
}
 800498c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800498e:	f3bf 8f6f 	isb	sy
}
 8004992:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	e000e100 	.word	0xe000e100

080049a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	6039      	str	r1, [r7, #0]
 80049ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	db0a      	blt.n	80049ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	490c      	ldr	r1, [pc, #48]	@ (80049f0 <__NVIC_SetPriority+0x4c>)
 80049be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c2:	0112      	lsls	r2, r2, #4
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	440b      	add	r3, r1
 80049c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049cc:	e00a      	b.n	80049e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	4908      	ldr	r1, [pc, #32]	@ (80049f4 <__NVIC_SetPriority+0x50>)
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	3b04      	subs	r3, #4
 80049dc:	0112      	lsls	r2, r2, #4
 80049de:	b2d2      	uxtb	r2, r2
 80049e0:	440b      	add	r3, r1
 80049e2:	761a      	strb	r2, [r3, #24]
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	e000e100 	.word	0xe000e100
 80049f4:	e000ed00 	.word	0xe000ed00

080049f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b089      	sub	sp, #36	@ 0x24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f1c3 0307 	rsb	r3, r3, #7
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	bf28      	it	cs
 8004a16:	2304      	movcs	r3, #4
 8004a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	2b06      	cmp	r3, #6
 8004a20:	d902      	bls.n	8004a28 <NVIC_EncodePriority+0x30>
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	3b03      	subs	r3, #3
 8004a26:	e000      	b.n	8004a2a <NVIC_EncodePriority+0x32>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	fa02 f303 	lsl.w	r3, r2, r3
 8004a36:	43da      	mvns	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	401a      	ands	r2, r3
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a40:	f04f 31ff 	mov.w	r1, #4294967295
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4a:	43d9      	mvns	r1, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a50:	4313      	orrs	r3, r2
         );
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3724      	adds	r7, #36	@ 0x24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a70:	d301      	bcc.n	8004a76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a72:	2301      	movs	r3, #1
 8004a74:	e00f      	b.n	8004a96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a76:	4a0a      	ldr	r2, [pc, #40]	@ (8004aa0 <SysTick_Config+0x40>)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a7e:	210f      	movs	r1, #15
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295
 8004a84:	f7ff ff8e 	bl	80049a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a88:	4b05      	ldr	r3, [pc, #20]	@ (8004aa0 <SysTick_Config+0x40>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a8e:	4b04      	ldr	r3, [pc, #16]	@ (8004aa0 <SysTick_Config+0x40>)
 8004a90:	2207      	movs	r2, #7
 8004a92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	e000e010 	.word	0xe000e010

08004aa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff ff05 	bl	80048bc <__NVIC_SetPriorityGrouping>
}
 8004ab2:	bf00      	nop
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b086      	sub	sp, #24
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	607a      	str	r2, [r7, #4]
 8004ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004acc:	f7ff ff1a 	bl	8004904 <__NVIC_GetPriorityGrouping>
 8004ad0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	6978      	ldr	r0, [r7, #20]
 8004ad8:	f7ff ff8e 	bl	80049f8 <NVIC_EncodePriority>
 8004adc:	4602      	mov	r2, r0
 8004ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff ff5d 	bl	80049a4 <__NVIC_SetPriority>
}
 8004aea:	bf00      	nop
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b082      	sub	sp, #8
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	4603      	mov	r3, r0
 8004afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7ff ff0d 	bl	8004920 <__NVIC_EnableIRQ>
}
 8004b06:	bf00      	nop
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b082      	sub	sp, #8
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	4603      	mov	r3, r0
 8004b16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff ff1d 	bl	800495c <__NVIC_DisableIRQ>
}
 8004b22:	bf00      	nop
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b082      	sub	sp, #8
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff ff94 	bl	8004a60 <SysTick_Config>
 8004b38:	4603      	mov	r3, r0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d004      	beq.n	8004b60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2280      	movs	r2, #128	@ 0x80
 8004b5a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e00c      	b.n	8004b7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2205      	movs	r2, #5
 8004b64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0201 	bic.w	r2, r2, #1
 8004b76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b083      	sub	sp, #12
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b94:	b2db      	uxtb	r3, r3
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
	...

08004ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b089      	sub	sp, #36	@ 0x24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	e16b      	b.n	8004e98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	f040 815a 	bne.w	8004e92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d005      	beq.n	8004bf6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d130      	bne.n	8004c58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	2203      	movs	r2, #3
 8004c02:	fa02 f303 	lsl.w	r3, r2, r3
 8004c06:	43db      	mvns	r3, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1a:	69ba      	ldr	r2, [r7, #24]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 0201 	and.w	r2, r3, #1
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d017      	beq.n	8004c94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	2203      	movs	r2, #3
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	43db      	mvns	r3, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d123      	bne.n	8004ce8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	08da      	lsrs	r2, r3, #3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3208      	adds	r2, #8
 8004ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	220f      	movs	r2, #15
 8004cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbc:	43db      	mvns	r3, r3
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	691a      	ldr	r2, [r3, #16]
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	08da      	lsrs	r2, r3, #3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3208      	adds	r2, #8
 8004ce2:	69b9      	ldr	r1, [r7, #24]
 8004ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	2203      	movs	r2, #3
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 0203 	and.w	r2, r3, #3
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 80b4 	beq.w	8004e92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	4b60      	ldr	r3, [pc, #384]	@ (8004eb0 <HAL_GPIO_Init+0x30c>)
 8004d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d32:	4a5f      	ldr	r2, [pc, #380]	@ (8004eb0 <HAL_GPIO_Init+0x30c>)
 8004d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8004eb0 <HAL_GPIO_Init+0x30c>)
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d46:	4a5b      	ldr	r2, [pc, #364]	@ (8004eb4 <HAL_GPIO_Init+0x310>)
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	089b      	lsrs	r3, r3, #2
 8004d4c:	3302      	adds	r3, #2
 8004d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f003 0303 	and.w	r3, r3, #3
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	220f      	movs	r2, #15
 8004d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d62:	43db      	mvns	r3, r3
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	4013      	ands	r3, r2
 8004d68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a52      	ldr	r2, [pc, #328]	@ (8004eb8 <HAL_GPIO_Init+0x314>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d02b      	beq.n	8004dca <HAL_GPIO_Init+0x226>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a51      	ldr	r2, [pc, #324]	@ (8004ebc <HAL_GPIO_Init+0x318>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d025      	beq.n	8004dc6 <HAL_GPIO_Init+0x222>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a50      	ldr	r2, [pc, #320]	@ (8004ec0 <HAL_GPIO_Init+0x31c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d01f      	beq.n	8004dc2 <HAL_GPIO_Init+0x21e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a4f      	ldr	r2, [pc, #316]	@ (8004ec4 <HAL_GPIO_Init+0x320>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d019      	beq.n	8004dbe <HAL_GPIO_Init+0x21a>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a4e      	ldr	r2, [pc, #312]	@ (8004ec8 <HAL_GPIO_Init+0x324>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <HAL_GPIO_Init+0x216>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a4d      	ldr	r2, [pc, #308]	@ (8004ecc <HAL_GPIO_Init+0x328>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00d      	beq.n	8004db6 <HAL_GPIO_Init+0x212>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a4c      	ldr	r2, [pc, #304]	@ (8004ed0 <HAL_GPIO_Init+0x32c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d007      	beq.n	8004db2 <HAL_GPIO_Init+0x20e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a4b      	ldr	r2, [pc, #300]	@ (8004ed4 <HAL_GPIO_Init+0x330>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d101      	bne.n	8004dae <HAL_GPIO_Init+0x20a>
 8004daa:	2307      	movs	r3, #7
 8004dac:	e00e      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004dae:	2308      	movs	r3, #8
 8004db0:	e00c      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004db2:	2306      	movs	r3, #6
 8004db4:	e00a      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004db6:	2305      	movs	r3, #5
 8004db8:	e008      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004dba:	2304      	movs	r3, #4
 8004dbc:	e006      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e004      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e002      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e000      	b.n	8004dcc <HAL_GPIO_Init+0x228>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	69fa      	ldr	r2, [r7, #28]
 8004dce:	f002 0203 	and.w	r2, r2, #3
 8004dd2:	0092      	lsls	r2, r2, #2
 8004dd4:	4093      	lsls	r3, r2
 8004dd6:	69ba      	ldr	r2, [r7, #24]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ddc:	4935      	ldr	r1, [pc, #212]	@ (8004eb4 <HAL_GPIO_Init+0x310>)
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	089b      	lsrs	r3, r3, #2
 8004de2:	3302      	adds	r3, #2
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004dea:	4b3b      	ldr	r3, [pc, #236]	@ (8004ed8 <HAL_GPIO_Init+0x334>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	43db      	mvns	r3, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4013      	ands	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e0e:	4a32      	ldr	r2, [pc, #200]	@ (8004ed8 <HAL_GPIO_Init+0x334>)
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e14:	4b30      	ldr	r3, [pc, #192]	@ (8004ed8 <HAL_GPIO_Init+0x334>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e38:	4a27      	ldr	r2, [pc, #156]	@ (8004ed8 <HAL_GPIO_Init+0x334>)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e3e:	4b26      	ldr	r3, [pc, #152]	@ (8004ed8 <HAL_GPIO_Init+0x334>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	43db      	mvns	r3, r3
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e62:	4a1d      	ldr	r2, [pc, #116]	@ (8004ed8 <HAL_GPIO_Init+0x334>)
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e68:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed8 <HAL_GPIO_Init+0x334>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	43db      	mvns	r3, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4013      	ands	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e8c:	4a12      	ldr	r2, [pc, #72]	@ (8004ed8 <HAL_GPIO_Init+0x334>)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	3301      	adds	r3, #1
 8004e96:	61fb      	str	r3, [r7, #28]
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	2b0f      	cmp	r3, #15
 8004e9c:	f67f ae90 	bls.w	8004bc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ea0:	bf00      	nop
 8004ea2:	bf00      	nop
 8004ea4:	3724      	adds	r7, #36	@ 0x24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	40013800 	.word	0x40013800
 8004eb8:	40020000 	.word	0x40020000
 8004ebc:	40020400 	.word	0x40020400
 8004ec0:	40020800 	.word	0x40020800
 8004ec4:	40020c00 	.word	0x40020c00
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	40021400 	.word	0x40021400
 8004ed0:	40021800 	.word	0x40021800
 8004ed4:	40021c00 	.word	0x40021c00
 8004ed8:	40013c00 	.word	0x40013c00

08004edc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	691a      	ldr	r2, [r3, #16]
 8004eec:	887b      	ldrh	r3, [r7, #2]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	73fb      	strb	r3, [r7, #15]
 8004ef8:	e001      	b.n	8004efe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004efa:	2300      	movs	r3, #0
 8004efc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3714      	adds	r7, #20
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	460b      	mov	r3, r1
 8004f16:	807b      	strh	r3, [r7, #2]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f1c:	787b      	ldrb	r3, [r7, #1]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d003      	beq.n	8004f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f22:	887a      	ldrh	r2, [r7, #2]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f28:	e003      	b.n	8004f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f2a:	887b      	ldrh	r3, [r7, #2]
 8004f2c:	041a      	lsls	r2, r3, #16
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	619a      	str	r2, [r3, #24]
}
 8004f32:	bf00      	nop
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	460b      	mov	r3, r1
 8004f48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f50:	887a      	ldrh	r2, [r7, #2]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	4013      	ands	r3, r2
 8004f56:	041a      	lsls	r2, r3, #16
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	43d9      	mvns	r1, r3
 8004f5c:	887b      	ldrh	r3, [r7, #2]
 8004f5e:	400b      	ands	r3, r1
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	619a      	str	r2, [r3, #24]
}
 8004f66:	bf00      	nop
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr
	...

08004f74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004f7e:	4b08      	ldr	r3, [pc, #32]	@ (8004fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f80:	695a      	ldr	r2, [r3, #20]
 8004f82:	88fb      	ldrh	r3, [r7, #6]
 8004f84:	4013      	ands	r3, r2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d006      	beq.n	8004f98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f8a:	4a05      	ldr	r2, [pc, #20]	@ (8004fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f8c:	88fb      	ldrh	r3, [r7, #6]
 8004f8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f90:	88fb      	ldrh	r3, [r7, #6]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fc fc4a 	bl	800182c <HAL_GPIO_EXTI_Callback>
  }
}
 8004f98:	bf00      	nop
 8004f9a:	3708      	adds	r7, #8
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40013c00 	.word	0x40013c00

08004fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e12b      	b.n	800520e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fd fee2 	bl	8002d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2224      	movs	r2, #36	@ 0x24
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ff6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005006:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005008:	f003 f814 	bl	8008034 <HAL_RCC_GetPCLK1Freq>
 800500c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	4a81      	ldr	r2, [pc, #516]	@ (8005218 <HAL_I2C_Init+0x274>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d807      	bhi.n	8005028 <HAL_I2C_Init+0x84>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4a80      	ldr	r2, [pc, #512]	@ (800521c <HAL_I2C_Init+0x278>)
 800501c:	4293      	cmp	r3, r2
 800501e:	bf94      	ite	ls
 8005020:	2301      	movls	r3, #1
 8005022:	2300      	movhi	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	e006      	b.n	8005036 <HAL_I2C_Init+0x92>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4a7d      	ldr	r2, [pc, #500]	@ (8005220 <HAL_I2C_Init+0x27c>)
 800502c:	4293      	cmp	r3, r2
 800502e:	bf94      	ite	ls
 8005030:	2301      	movls	r3, #1
 8005032:	2300      	movhi	r3, #0
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e0e7      	b.n	800520e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	4a78      	ldr	r2, [pc, #480]	@ (8005224 <HAL_I2C_Init+0x280>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	0c9b      	lsrs	r3, r3, #18
 8005048:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4a6a      	ldr	r2, [pc, #424]	@ (8005218 <HAL_I2C_Init+0x274>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d802      	bhi.n	8005078 <HAL_I2C_Init+0xd4>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	3301      	adds	r3, #1
 8005076:	e009      	b.n	800508c <HAL_I2C_Init+0xe8>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800507e:	fb02 f303 	mul.w	r3, r2, r3
 8005082:	4a69      	ldr	r2, [pc, #420]	@ (8005228 <HAL_I2C_Init+0x284>)
 8005084:	fba2 2303 	umull	r2, r3, r2, r3
 8005088:	099b      	lsrs	r3, r3, #6
 800508a:	3301      	adds	r3, #1
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	6812      	ldr	r2, [r2, #0]
 8005090:	430b      	orrs	r3, r1
 8005092:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800509e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	495c      	ldr	r1, [pc, #368]	@ (8005218 <HAL_I2C_Init+0x274>)
 80050a8:	428b      	cmp	r3, r1
 80050aa:	d819      	bhi.n	80050e0 <HAL_I2C_Init+0x13c>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	1e59      	subs	r1, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80050ba:	1c59      	adds	r1, r3, #1
 80050bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80050c0:	400b      	ands	r3, r1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_I2C_Init+0x138>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1e59      	subs	r1, r3, #1
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80050d4:	3301      	adds	r3, #1
 80050d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050da:	e051      	b.n	8005180 <HAL_I2C_Init+0x1dc>
 80050dc:	2304      	movs	r3, #4
 80050de:	e04f      	b.n	8005180 <HAL_I2C_Init+0x1dc>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d111      	bne.n	800510c <HAL_I2C_Init+0x168>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	1e58      	subs	r0, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6859      	ldr	r1, [r3, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	440b      	add	r3, r1
 80050f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80050fa:	3301      	adds	r3, #1
 80050fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005100:	2b00      	cmp	r3, #0
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	e012      	b.n	8005132 <HAL_I2C_Init+0x18e>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	1e58      	subs	r0, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6859      	ldr	r1, [r3, #4]
 8005114:	460b      	mov	r3, r1
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	440b      	add	r3, r1
 800511a:	0099      	lsls	r1, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005122:	3301      	adds	r3, #1
 8005124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005128:	2b00      	cmp	r3, #0
 800512a:	bf0c      	ite	eq
 800512c:	2301      	moveq	r3, #1
 800512e:	2300      	movne	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <HAL_I2C_Init+0x196>
 8005136:	2301      	movs	r3, #1
 8005138:	e022      	b.n	8005180 <HAL_I2C_Init+0x1dc>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d10e      	bne.n	8005160 <HAL_I2C_Init+0x1bc>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1e58      	subs	r0, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6859      	ldr	r1, [r3, #4]
 800514a:	460b      	mov	r3, r1
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	440b      	add	r3, r1
 8005150:	fbb0 f3f3 	udiv	r3, r0, r3
 8005154:	3301      	adds	r3, #1
 8005156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800515a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800515e:	e00f      	b.n	8005180 <HAL_I2C_Init+0x1dc>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	1e58      	subs	r0, r3, #1
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6859      	ldr	r1, [r3, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	440b      	add	r3, r1
 800516e:	0099      	lsls	r1, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	fbb0 f3f3 	udiv	r3, r0, r3
 8005176:	3301      	adds	r3, #1
 8005178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800517c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	6809      	ldr	r1, [r1, #0]
 8005184:	4313      	orrs	r3, r2
 8005186:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69da      	ldr	r2, [r3, #28]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	430a      	orrs	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80051ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6911      	ldr	r1, [r2, #16]
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	68d2      	ldr	r2, [r2, #12]
 80051ba:	4311      	orrs	r1, r2
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	6812      	ldr	r2, [r2, #0]
 80051c0:	430b      	orrs	r3, r1
 80051c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695a      	ldr	r2, [r3, #20]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2220      	movs	r2, #32
 80051fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	000186a0 	.word	0x000186a0
 800521c:	001e847f 	.word	0x001e847f
 8005220:	003d08ff 	.word	0x003d08ff
 8005224:	431bde83 	.word	0x431bde83
 8005228:	10624dd3 	.word	0x10624dd3

0800522c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800523e:	2b80      	cmp	r3, #128	@ 0x80
 8005240:	d103      	bne.n	800524a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	611a      	str	r2, [r3, #16]
  }
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
	...

08005258 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af02      	add	r7, sp, #8
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	4608      	mov	r0, r1
 8005262:	4611      	mov	r1, r2
 8005264:	461a      	mov	r2, r3
 8005266:	4603      	mov	r3, r0
 8005268:	817b      	strh	r3, [r7, #10]
 800526a:	460b      	mov	r3, r1
 800526c:	813b      	strh	r3, [r7, #8]
 800526e:	4613      	mov	r3, r2
 8005270:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005272:	f7fe f88d 	bl	8003390 <HAL_GetTick>
 8005276:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b20      	cmp	r3, #32
 8005282:	f040 80d9 	bne.w	8005438 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	2319      	movs	r3, #25
 800528c:	2201      	movs	r2, #1
 800528e:	496d      	ldr	r1, [pc, #436]	@ (8005444 <HAL_I2C_Mem_Write+0x1ec>)
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f002 f81b 	bl	80072cc <I2C_WaitOnFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800529c:	2302      	movs	r3, #2
 800529e:	e0cc      	b.n	800543a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_I2C_Mem_Write+0x56>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e0c5      	b.n	800543a <HAL_I2C_Mem_Write+0x1e2>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d007      	beq.n	80052d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2221      	movs	r2, #33	@ 0x21
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2240      	movs	r2, #64	@ 0x40
 80052f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a3a      	ldr	r2, [r7, #32]
 80052fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005304:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4a4d      	ldr	r2, [pc, #308]	@ (8005448 <HAL_I2C_Mem_Write+0x1f0>)
 8005314:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005316:	88f8      	ldrh	r0, [r7, #6]
 8005318:	893a      	ldrh	r2, [r7, #8]
 800531a:	8979      	ldrh	r1, [r7, #10]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	9301      	str	r3, [sp, #4]
 8005320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	4603      	mov	r3, r0
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f001 fdaa 	bl	8006e80 <I2C_RequestMemoryWrite>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d052      	beq.n	80053d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e081      	b.n	800543a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f002 f8e0 	bl	8007500 <I2C_WaitOnTXEFlagUntilTimeout>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00d      	beq.n	8005362 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534a:	2b04      	cmp	r3, #4
 800534c:	d107      	bne.n	800535e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800535c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e06b      	b.n	800543a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005366:	781a      	ldrb	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800537c:	3b01      	subs	r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f003 0304 	and.w	r3, r3, #4
 800539c:	2b04      	cmp	r3, #4
 800539e:	d11b      	bne.n	80053d8 <HAL_I2C_Mem_Write+0x180>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d017      	beq.n	80053d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ac:	781a      	ldrb	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1aa      	bne.n	8005336 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f002 f8d3 	bl	8007590 <I2C_WaitOnBTFFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00d      	beq.n	800540c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d107      	bne.n	8005408 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005406:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e016      	b.n	800543a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800541a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2220      	movs	r2, #32
 8005420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	e000      	b.n	800543a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005438:	2302      	movs	r3, #2
  }
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	00100002 	.word	0x00100002
 8005448:	ffff0000 	.word	0xffff0000

0800544c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b08c      	sub	sp, #48	@ 0x30
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	4608      	mov	r0, r1
 8005456:	4611      	mov	r1, r2
 8005458:	461a      	mov	r2, r3
 800545a:	4603      	mov	r3, r0
 800545c:	817b      	strh	r3, [r7, #10]
 800545e:	460b      	mov	r3, r1
 8005460:	813b      	strh	r3, [r7, #8]
 8005462:	4613      	mov	r3, r2
 8005464:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005466:	f7fd ff93 	bl	8003390 <HAL_GetTick>
 800546a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b20      	cmp	r3, #32
 8005476:	f040 8214 	bne.w	80058a2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	2319      	movs	r3, #25
 8005480:	2201      	movs	r2, #1
 8005482:	497b      	ldr	r1, [pc, #492]	@ (8005670 <HAL_I2C_Mem_Read+0x224>)
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f001 ff21 	bl	80072cc <I2C_WaitOnFlagUntilTimeout>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d001      	beq.n	8005494 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005490:	2302      	movs	r3, #2
 8005492:	e207      	b.n	80058a4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_I2C_Mem_Read+0x56>
 800549e:	2302      	movs	r3, #2
 80054a0:	e200      	b.n	80058a4 <HAL_I2C_Mem_Read+0x458>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d007      	beq.n	80054c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2222      	movs	r2, #34	@ 0x22
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2240      	movs	r2, #64	@ 0x40
 80054e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80054f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fe:	b29a      	uxth	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4a5b      	ldr	r2, [pc, #364]	@ (8005674 <HAL_I2C_Mem_Read+0x228>)
 8005508:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800550a:	88f8      	ldrh	r0, [r7, #6]
 800550c:	893a      	ldrh	r2, [r7, #8]
 800550e:	8979      	ldrh	r1, [r7, #10]
 8005510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005512:	9301      	str	r3, [sp, #4]
 8005514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	4603      	mov	r3, r0
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f001 fd46 	bl	8006fac <I2C_RequestMemoryRead>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d001      	beq.n	800552a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e1bc      	b.n	80058a4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800552e:	2b00      	cmp	r3, #0
 8005530:	d113      	bne.n	800555a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005532:	2300      	movs	r3, #0
 8005534:	623b      	str	r3, [r7, #32]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	623b      	str	r3, [r7, #32]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	623b      	str	r3, [r7, #32]
 8005546:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	e190      	b.n	800587c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800555e:	2b01      	cmp	r3, #1
 8005560:	d11b      	bne.n	800559a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005570:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005572:	2300      	movs	r3, #0
 8005574:	61fb      	str	r3, [r7, #28]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	61fb      	str	r3, [r7, #28]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005596:	601a      	str	r2, [r3, #0]
 8005598:	e170      	b.n	800587c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d11b      	bne.n	80055da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c2:	2300      	movs	r3, #0
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	61bb      	str	r3, [r7, #24]
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	e150      	b.n	800587c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055da:	2300      	movs	r3, #0
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	617b      	str	r3, [r7, #20]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	617b      	str	r3, [r7, #20]
 80055ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80055f0:	e144      	b.n	800587c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f6:	2b03      	cmp	r3, #3
 80055f8:	f200 80f1 	bhi.w	80057de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005600:	2b01      	cmp	r3, #1
 8005602:	d123      	bne.n	800564c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005606:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f002 f83b 	bl	8007684 <I2C_WaitOnRXNEFlagUntilTimeout>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e145      	b.n	80058a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562a:	1c5a      	adds	r2, r3, #1
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800564a:	e117      	b.n	800587c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005650:	2b02      	cmp	r3, #2
 8005652:	d14e      	bne.n	80056f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565a:	2200      	movs	r2, #0
 800565c:	4906      	ldr	r1, [pc, #24]	@ (8005678 <HAL_I2C_Mem_Read+0x22c>)
 800565e:	68f8      	ldr	r0, [r7, #12]
 8005660:	f001 fe34 	bl	80072cc <I2C_WaitOnFlagUntilTimeout>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d008      	beq.n	800567c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e11a      	b.n	80058a4 <HAL_I2C_Mem_Read+0x458>
 800566e:	bf00      	nop
 8005670:	00100002 	.word	0x00100002
 8005674:	ffff0000 	.word	0xffff0000
 8005678:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800568a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056da:	3b01      	subs	r3, #1
 80056dc:	b29a      	uxth	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	3b01      	subs	r3, #1
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80056f0:	e0c4      	b.n	800587c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f8:	2200      	movs	r2, #0
 80056fa:	496c      	ldr	r1, [pc, #432]	@ (80058ac <HAL_I2C_Mem_Read+0x460>)
 80056fc:	68f8      	ldr	r0, [r7, #12]
 80056fe:	f001 fde5 	bl	80072cc <I2C_WaitOnFlagUntilTimeout>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e0cb      	b.n	80058a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800571a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005738:	3b01      	subs	r3, #1
 800573a:	b29a      	uxth	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005744:	b29b      	uxth	r3, r3
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005754:	2200      	movs	r2, #0
 8005756:	4955      	ldr	r1, [pc, #340]	@ (80058ac <HAL_I2C_Mem_Read+0x460>)
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f001 fdb7 	bl	80072cc <I2C_WaitOnFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e09d      	b.n	80058a4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005776:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005782:	b2d2      	uxtb	r2, r2
 8005784:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057bc:	1c5a      	adds	r2, r3, #1
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057dc:	e04e      	b.n	800587c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f001 ff4e 	bl	8007684 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e058      	b.n	80058a4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	691a      	ldr	r2, [r3, #16]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005804:	1c5a      	adds	r2, r3, #1
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800580e:	3b01      	subs	r3, #1
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b04      	cmp	r3, #4
 8005830:	d124      	bne.n	800587c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005836:	2b03      	cmp	r3, #3
 8005838:	d107      	bne.n	800584a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005848:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585c:	1c5a      	adds	r2, r3, #1
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005880:	2b00      	cmp	r3, #0
 8005882:	f47f aeb6 	bne.w	80055f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	e000      	b.n	80058a4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80058a2:	2302      	movs	r3, #2
  }
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3728      	adds	r7, #40	@ 0x28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	00010004 	.word	0x00010004

080058b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b088      	sub	sp, #32
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80058da:	7bfb      	ldrb	r3, [r7, #15]
 80058dc:	2b10      	cmp	r3, #16
 80058de:	d003      	beq.n	80058e8 <HAL_I2C_EV_IRQHandler+0x38>
 80058e0:	7bfb      	ldrb	r3, [r7, #15]
 80058e2:	2b40      	cmp	r3, #64	@ 0x40
 80058e4:	f040 80c1 	bne.w	8005a6a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f003 0301 	and.w	r3, r3, #1
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10d      	bne.n	800591e <HAL_I2C_EV_IRQHandler+0x6e>
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005908:	d003      	beq.n	8005912 <HAL_I2C_EV_IRQHandler+0x62>
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005910:	d101      	bne.n	8005916 <HAL_I2C_EV_IRQHandler+0x66>
 8005912:	2301      	movs	r3, #1
 8005914:	e000      	b.n	8005918 <HAL_I2C_EV_IRQHandler+0x68>
 8005916:	2300      	movs	r3, #0
 8005918:	2b01      	cmp	r3, #1
 800591a:	f000 8132 	beq.w	8005b82 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00c      	beq.n	8005942 <HAL_I2C_EV_IRQHandler+0x92>
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	0a5b      	lsrs	r3, r3, #9
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d006      	beq.n	8005942 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f001 ff31 	bl	800779c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fcf4 	bl	8006328 <I2C_Master_SB>
 8005940:	e092      	b.n	8005a68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	08db      	lsrs	r3, r3, #3
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <HAL_I2C_EV_IRQHandler+0xb2>
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	0a5b      	lsrs	r3, r3, #9
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fd6a 	bl	8006434 <I2C_Master_ADD10>
 8005960:	e082      	b.n	8005a68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <HAL_I2C_EV_IRQHandler+0xd2>
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	0a5b      	lsrs	r3, r3, #9
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d003      	beq.n	8005982 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fd84 	bl	8006488 <I2C_Master_ADDR>
 8005980:	e072      	b.n	8005a68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	089b      	lsrs	r3, r3, #2
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b00      	cmp	r3, #0
 800598c:	d03b      	beq.n	8005a06 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800599c:	f000 80f3 	beq.w	8005b86 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	09db      	lsrs	r3, r3, #7
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00f      	beq.n	80059cc <HAL_I2C_EV_IRQHandler+0x11c>
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	0a9b      	lsrs	r3, r3, #10
 80059b0:	f003 0301 	and.w	r3, r3, #1
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d009      	beq.n	80059cc <HAL_I2C_EV_IRQHandler+0x11c>
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	089b      	lsrs	r3, r3, #2
 80059bc:	f003 0301 	and.w	r3, r3, #1
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d103      	bne.n	80059cc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f94c 	bl	8005c62 <I2C_MasterTransmit_TXE>
 80059ca:	e04d      	b.n	8005a68 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	089b      	lsrs	r3, r3, #2
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80d6 	beq.w	8005b86 <HAL_I2C_EV_IRQHandler+0x2d6>
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	0a5b      	lsrs	r3, r3, #9
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f000 80cf 	beq.w	8005b86 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80059e8:	7bbb      	ldrb	r3, [r7, #14]
 80059ea:	2b21      	cmp	r3, #33	@ 0x21
 80059ec:	d103      	bne.n	80059f6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f9d3 	bl	8005d9a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059f4:	e0c7      	b.n	8005b86 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	2b40      	cmp	r3, #64	@ 0x40
 80059fa:	f040 80c4 	bne.w	8005b86 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fa41 	bl	8005e86 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a04:	e0bf      	b.n	8005b86 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a14:	f000 80b7 	beq.w	8005b86 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	099b      	lsrs	r3, r3, #6
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00f      	beq.n	8005a44 <HAL_I2C_EV_IRQHandler+0x194>
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	0a9b      	lsrs	r3, r3, #10
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d009      	beq.n	8005a44 <HAL_I2C_EV_IRQHandler+0x194>
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	089b      	lsrs	r3, r3, #2
 8005a34:	f003 0301 	and.w	r3, r3, #1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d103      	bne.n	8005a44 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 faba 	bl	8005fb6 <I2C_MasterReceive_RXNE>
 8005a42:	e011      	b.n	8005a68 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	089b      	lsrs	r3, r3, #2
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 809a 	beq.w	8005b86 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	0a5b      	lsrs	r3, r3, #9
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f000 8093 	beq.w	8005b86 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fb70 	bl	8006146 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a66:	e08e      	b.n	8005b86 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005a68:	e08d      	b.n	8005b86 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d004      	beq.n	8005a7c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	61fb      	str	r3, [r7, #28]
 8005a7a:	e007      	b.n	8005a8c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	085b      	lsrs	r3, r3, #1
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d012      	beq.n	8005abe <HAL_I2C_EV_IRQHandler+0x20e>
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	0a5b      	lsrs	r3, r3, #9
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00c      	beq.n	8005abe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005ab4:	69b9      	ldr	r1, [r7, #24]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 ff35 	bl	8006926 <I2C_Slave_ADDR>
 8005abc:	e066      	b.n	8005b8c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	091b      	lsrs	r3, r3, #4
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d009      	beq.n	8005ade <HAL_I2C_EV_IRQHandler+0x22e>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	0a5b      	lsrs	r3, r3, #9
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 ff70 	bl	80069bc <I2C_Slave_STOPF>
 8005adc:	e056      	b.n	8005b8c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005ade:	7bbb      	ldrb	r3, [r7, #14]
 8005ae0:	2b21      	cmp	r3, #33	@ 0x21
 8005ae2:	d002      	beq.n	8005aea <HAL_I2C_EV_IRQHandler+0x23a>
 8005ae4:	7bbb      	ldrb	r3, [r7, #14]
 8005ae6:	2b29      	cmp	r3, #41	@ 0x29
 8005ae8:	d125      	bne.n	8005b36 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	09db      	lsrs	r3, r3, #7
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00f      	beq.n	8005b16 <HAL_I2C_EV_IRQHandler+0x266>
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	0a9b      	lsrs	r3, r3, #10
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d009      	beq.n	8005b16 <HAL_I2C_EV_IRQHandler+0x266>
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	089b      	lsrs	r3, r3, #2
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d103      	bne.n	8005b16 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fe4b 	bl	80067aa <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b14:	e039      	b.n	8005b8a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	089b      	lsrs	r3, r3, #2
 8005b1a:	f003 0301 	and.w	r3, r3, #1
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d033      	beq.n	8005b8a <HAL_I2C_EV_IRQHandler+0x2da>
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	0a5b      	lsrs	r3, r3, #9
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d02d      	beq.n	8005b8a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fe78 	bl	8006824 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b34:	e029      	b.n	8005b8a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	099b      	lsrs	r3, r3, #6
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d00f      	beq.n	8005b62 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	0a9b      	lsrs	r3, r3, #10
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	089b      	lsrs	r3, r3, #2
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d103      	bne.n	8005b62 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fe83 	bl	8006866 <I2C_SlaveReceive_RXNE>
 8005b60:	e014      	b.n	8005b8c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	089b      	lsrs	r3, r3, #2
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00e      	beq.n	8005b8c <HAL_I2C_EV_IRQHandler+0x2dc>
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	0a5b      	lsrs	r3, r3, #9
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d008      	beq.n	8005b8c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 feb1 	bl	80068e2 <I2C_SlaveReceive_BTF>
 8005b80:	e004      	b.n	8005b8c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005b82:	bf00      	nop
 8005b84:	e002      	b.n	8005b8c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b86:	bf00      	nop
 8005b88:	e000      	b.n	8005b8c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b8a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005b8c:	3720      	adds	r7, #32
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b083      	sub	sp, #12
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005bd6:	bf00      	nop
 8005bd8:	370c      	adds	r7, #12
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	460b      	mov	r3, r1
 8005bec:	70fb      	strb	r3, [r7, #3]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b084      	sub	sp, #16
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c78:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d150      	bne.n	8005d2a <I2C_MasterTransmit_TXE+0xc8>
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	2b21      	cmp	r3, #33	@ 0x21
 8005c8c:	d14d      	bne.n	8005d2a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d01d      	beq.n	8005cd0 <I2C_MasterTransmit_TXE+0x6e>
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	2b20      	cmp	r3, #32
 8005c98:	d01a      	beq.n	8005cd0 <I2C_MasterTransmit_TXE+0x6e>
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ca0:	d016      	beq.n	8005cd0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005cb0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2211      	movs	r2, #17
 8005cb6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f7ff ff62 	bl	8005b92 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cce:	e060      	b.n	8005d92 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005cde:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cee:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b40      	cmp	r3, #64	@ 0x40
 8005d08:	d107      	bne.n	8005d1a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff ff7d 	bl	8005c12 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d18:	e03b      	b.n	8005d92 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff ff35 	bl	8005b92 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d28:	e033      	b.n	8005d92 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	2b21      	cmp	r3, #33	@ 0x21
 8005d2e:	d005      	beq.n	8005d3c <I2C_MasterTransmit_TXE+0xda>
 8005d30:	7bbb      	ldrb	r3, [r7, #14]
 8005d32:	2b40      	cmp	r3, #64	@ 0x40
 8005d34:	d12d      	bne.n	8005d92 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b22      	cmp	r3, #34	@ 0x22
 8005d3a:	d12a      	bne.n	8005d92 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d108      	bne.n	8005d58 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d54:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005d56:	e01c      	b.n	8005d92 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b40      	cmp	r3, #64	@ 0x40
 8005d62:	d103      	bne.n	8005d6c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f88e 	bl	8005e86 <I2C_MemoryTransmit_TXE_BTF>
}
 8005d6a:	e012      	b.n	8005d92 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d70:	781a      	ldrb	r2, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005d90:	e7ff      	b.n	8005d92 <I2C_MasterTransmit_TXE+0x130>
 8005d92:	bf00      	nop
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b21      	cmp	r3, #33	@ 0x21
 8005db2:	d164      	bne.n	8005e7e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d012      	beq.n	8005de4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc2:	781a      	ldrb	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dce:	1c5a      	adds	r2, r3, #1
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005de2:	e04c      	b.n	8005e7e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b08      	cmp	r3, #8
 8005de8:	d01d      	beq.n	8005e26 <I2C_MasterTransmit_BTF+0x8c>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d01a      	beq.n	8005e26 <I2C_MasterTransmit_BTF+0x8c>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005df6:	d016      	beq.n	8005e26 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e06:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2211      	movs	r2, #17
 8005e0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff feb7 	bl	8005b92 <HAL_I2C_MasterTxCpltCallback>
}
 8005e24:	e02b      	b.n	8005e7e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e34:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e44:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b40      	cmp	r3, #64	@ 0x40
 8005e5e:	d107      	bne.n	8005e70 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7ff fed2 	bl	8005c12 <HAL_I2C_MemTxCpltCallback>
}
 8005e6e:	e006      	b.n	8005e7e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff fe8a 	bl	8005b92 <HAL_I2C_MasterTxCpltCallback>
}
 8005e7e:	bf00      	nop
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e94:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d11d      	bne.n	8005eda <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d10b      	bne.n	8005ebe <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb6:	1c9a      	adds	r2, r3, #2
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005ebc:	e077      	b.n	8005fae <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	121b      	asrs	r3, r3, #8
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ed2:	1c5a      	adds	r2, r3, #1
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005ed8:	e069      	b.n	8005fae <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d10b      	bne.n	8005efa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005ef8:	e059      	b.n	8005fae <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d152      	bne.n	8005fa8 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2b22      	cmp	r3, #34	@ 0x22
 8005f06:	d10d      	bne.n	8005f24 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f16:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005f22:	e044      	b.n	8005fae <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d015      	beq.n	8005f5a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	2b21      	cmp	r3, #33	@ 0x21
 8005f32:	d112      	bne.n	8005f5a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f38:	781a      	ldrb	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005f58:	e029      	b.n	8005fae <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d124      	bne.n	8005fae <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	2b21      	cmp	r3, #33	@ 0x21
 8005f68:	d121      	bne.n	8005fae <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f78:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f88:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2220      	movs	r2, #32
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f7ff fe36 	bl	8005c12 <HAL_I2C_MemTxCpltCallback>
}
 8005fa6:	e002      	b.n	8005fae <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f7ff f93f 	bl	800522c <I2C_Flush_DR>
}
 8005fae:	bf00      	nop
 8005fb0:	3710      	adds	r7, #16
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}

08005fb6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b22      	cmp	r3, #34	@ 0x22
 8005fc8:	f040 80b9 	bne.w	800613e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd0:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2b03      	cmp	r3, #3
 8005fde:	d921      	bls.n	8006024 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691a      	ldr	r2, [r3, #16]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fea:	b2d2      	uxtb	r2, r2
 8005fec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff2:	1c5a      	adds	r2, r3, #1
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	3b01      	subs	r3, #1
 8006000:	b29a      	uxth	r2, r3
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800600a:	b29b      	uxth	r3, r3
 800600c:	2b03      	cmp	r3, #3
 800600e:	f040 8096 	bne.w	800613e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006020:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006022:	e08c      	b.n	800613e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006028:	2b02      	cmp	r3, #2
 800602a:	d07f      	beq.n	800612c <I2C_MasterReceive_RXNE+0x176>
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b01      	cmp	r3, #1
 8006030:	d002      	beq.n	8006038 <I2C_MasterReceive_RXNE+0x82>
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d179      	bne.n	800612c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f001 faf1 	bl	8007620 <I2C_WaitOnSTOPRequestThroughIT>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	d14c      	bne.n	80060de <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006052:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006062:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b01      	subs	r3, #1
 8006084:	b29a      	uxth	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b40      	cmp	r3, #64	@ 0x40
 800609c:	d10a      	bne.n	80060b4 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff fdba 	bl	8005c26 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80060b2:	e044      	b.n	800613e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b08      	cmp	r3, #8
 80060c0:	d002      	beq.n	80060c8 <I2C_MasterReceive_RXNE+0x112>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d103      	bne.n	80060d0 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80060ce:	e002      	b.n	80060d6 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2212      	movs	r2, #18
 80060d4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7ff fd65 	bl	8005ba6 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80060dc:	e02f      	b.n	800613e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685a      	ldr	r2, [r3, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80060ec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	691a      	ldr	r2, [r3, #16]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b01      	subs	r3, #1
 800610e:	b29a      	uxth	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f7ff fd88 	bl	8005c3a <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800612a:	e008      	b.n	800613e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800613a:	605a      	str	r2, [r3, #4]
}
 800613c:	e7ff      	b.n	800613e <I2C_MasterReceive_RXNE+0x188>
 800613e:	bf00      	nop
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}

08006146 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006146:	b580      	push	{r7, lr}
 8006148:	b084      	sub	sp, #16
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006152:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b04      	cmp	r3, #4
 800615c:	d11b      	bne.n	8006196 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800616c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006178:	b2d2      	uxtb	r2, r2
 800617a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006180:	1c5a      	adds	r2, r3, #1
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800618a:	b29b      	uxth	r3, r3
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006194:	e0c4      	b.n	8006320 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800619a:	b29b      	uxth	r3, r3
 800619c:	2b03      	cmp	r3, #3
 800619e:	d129      	bne.n	80061f4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685a      	ldr	r2, [r3, #4]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061ae:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d00a      	beq.n	80061cc <I2C_MasterReceive_BTF+0x86>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b02      	cmp	r3, #2
 80061ba:	d007      	beq.n	80061cc <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061ca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80061f2:	e095      	b.n	8006320 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d17d      	bne.n	80062fa <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d002      	beq.n	800620a <I2C_MasterReceive_BTF+0xc4>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2b10      	cmp	r3, #16
 8006208:	d108      	bne.n	800621c <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	e016      	b.n	800624a <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b04      	cmp	r3, #4
 8006220:	d002      	beq.n	8006228 <I2C_MasterReceive_BTF+0xe2>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d108      	bne.n	800623a <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	e007      	b.n	800624a <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006248:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006254:	b2d2      	uxtb	r2, r2
 8006256:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006266:	b29b      	uxth	r3, r3
 8006268:	3b01      	subs	r3, #1
 800626a:	b29a      	uxth	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627a:	b2d2      	uxtb	r2, r2
 800627c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b29a      	uxth	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	685a      	ldr	r2, [r3, #4]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80062a4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b40      	cmp	r3, #64	@ 0x40
 80062b8:	d10a      	bne.n	80062d0 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff fcac 	bl	8005c26 <HAL_I2C_MemRxCpltCallback>
}
 80062ce:	e027      	b.n	8006320 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b08      	cmp	r3, #8
 80062dc:	d002      	beq.n	80062e4 <I2C_MasterReceive_BTF+0x19e>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b20      	cmp	r3, #32
 80062e2:	d103      	bne.n	80062ec <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80062ea:	e002      	b.n	80062f2 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2212      	movs	r2, #18
 80062f0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f7ff fc57 	bl	8005ba6 <HAL_I2C_MasterRxCpltCallback>
}
 80062f8:	e012      	b.n	8006320 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630c:	1c5a      	adds	r2, r3, #1
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006316:	b29b      	uxth	r3, r3
 8006318:	3b01      	subs	r3, #1
 800631a:	b29a      	uxth	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006320:	bf00      	nop
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b40      	cmp	r3, #64	@ 0x40
 800633a:	d117      	bne.n	800636c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006340:	2b00      	cmp	r3, #0
 8006342:	d109      	bne.n	8006358 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006348:	b2db      	uxtb	r3, r3
 800634a:	461a      	mov	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006354:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006356:	e067      	b.n	8006428 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800635c:	b2db      	uxtb	r3, r3
 800635e:	f043 0301 	orr.w	r3, r3, #1
 8006362:	b2da      	uxtb	r2, r3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	611a      	str	r2, [r3, #16]
}
 800636a:	e05d      	b.n	8006428 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006374:	d133      	bne.n	80063de <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b21      	cmp	r3, #33	@ 0x21
 8006380:	d109      	bne.n	8006396 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006386:	b2db      	uxtb	r3, r3
 8006388:	461a      	mov	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006392:	611a      	str	r2, [r3, #16]
 8006394:	e008      	b.n	80063a8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800639a:	b2db      	uxtb	r3, r3
 800639c:	f043 0301 	orr.w	r3, r3, #1
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <I2C_Master_SB+0x92>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d108      	bne.n	80063cc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d032      	beq.n	8006428 <I2C_Master_SB+0x100>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d02d      	beq.n	8006428 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063da:	605a      	str	r2, [r3, #4]
}
 80063dc:	e024      	b.n	8006428 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10e      	bne.n	8006404 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	11db      	asrs	r3, r3, #7
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	f003 0306 	and.w	r3, r3, #6
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	f063 030f 	orn	r3, r3, #15
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	611a      	str	r2, [r3, #16]
}
 8006402:	e011      	b.n	8006428 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006408:	2b01      	cmp	r3, #1
 800640a:	d10d      	bne.n	8006428 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006410:	b29b      	uxth	r3, r3
 8006412:	11db      	asrs	r3, r3, #7
 8006414:	b2db      	uxtb	r3, r3
 8006416:	f003 0306 	and.w	r3, r3, #6
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f063 030e 	orn	r3, r3, #14
 8006420:	b2da      	uxtb	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	611a      	str	r2, [r3, #16]
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006440:	b2da      	uxtb	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800644c:	2b00      	cmp	r3, #0
 800644e:	d004      	beq.n	800645a <I2C_Master_ADD10+0x26>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006456:	2b00      	cmp	r3, #0
 8006458:	d108      	bne.n	800646c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00c      	beq.n	800647c <I2C_Master_ADD10+0x48>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800647a:	605a      	str	r2, [r3, #4]
  }
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006488:	b480      	push	{r7}
 800648a:	b091      	sub	sp, #68	@ 0x44
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006496:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a4:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b22      	cmp	r3, #34	@ 0x22
 80064b0:	f040 8169 	bne.w	8006786 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10f      	bne.n	80064dc <I2C_Master_ADDR+0x54>
 80064bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80064c0:	2b40      	cmp	r3, #64	@ 0x40
 80064c2:	d10b      	bne.n	80064dc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064c4:	2300      	movs	r3, #0
 80064c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80064d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064da:	e160      	b.n	800679e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d11d      	bne.n	8006520 <I2C_Master_ADDR+0x98>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80064ec:	d118      	bne.n	8006520 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ee:	2300      	movs	r3, #0
 80064f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006512:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	651a      	str	r2, [r3, #80]	@ 0x50
 800651e:	e13e      	b.n	800679e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d113      	bne.n	8006552 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800652a:	2300      	movs	r3, #0
 800652c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	699b      	ldr	r3, [r3, #24]
 800653c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800653e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	e115      	b.n	800677e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b01      	cmp	r3, #1
 800655a:	f040 808a 	bne.w	8006672 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800655e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006560:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006564:	d137      	bne.n	80065d6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006574:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006584:	d113      	bne.n	80065ae <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006594:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006596:	2300      	movs	r3, #0
 8006598:	627b      	str	r3, [r7, #36]	@ 0x24
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	e0e7      	b.n	800677e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ae:	2300      	movs	r3, #0
 80065b0:	623b      	str	r3, [r7, #32]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	623b      	str	r3, [r7, #32]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	699b      	ldr	r3, [r3, #24]
 80065c0:	623b      	str	r3, [r7, #32]
 80065c2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	e0d3      	b.n	800677e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80065d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d02e      	beq.n	800663a <I2C_Master_ADDR+0x1b2>
 80065dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d02b      	beq.n	800663a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80065e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e4:	2b12      	cmp	r3, #18
 80065e6:	d102      	bne.n	80065ee <I2C_Master_ADDR+0x166>
 80065e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d125      	bne.n	800663a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80065ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f0:	2b04      	cmp	r3, #4
 80065f2:	d00e      	beq.n	8006612 <I2C_Master_ADDR+0x18a>
 80065f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d00b      	beq.n	8006612 <I2C_Master_ADDR+0x18a>
 80065fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065fc:	2b10      	cmp	r3, #16
 80065fe:	d008      	beq.n	8006612 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800660e:	601a      	str	r2, [r3, #0]
 8006610:	e007      	b.n	8006622 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006620:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006622:	2300      	movs	r3, #0
 8006624:	61fb      	str	r3, [r7, #28]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	61fb      	str	r3, [r7, #28]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	61fb      	str	r3, [r7, #28]
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	e0a1      	b.n	800677e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006648:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800664a:	2300      	movs	r3, #0
 800664c:	61bb      	str	r3, [r7, #24]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	e085      	b.n	800677e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006676:	b29b      	uxth	r3, r3
 8006678:	2b02      	cmp	r3, #2
 800667a:	d14d      	bne.n	8006718 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800667c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667e:	2b04      	cmp	r3, #4
 8006680:	d016      	beq.n	80066b0 <I2C_Master_ADDR+0x228>
 8006682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006684:	2b02      	cmp	r3, #2
 8006686:	d013      	beq.n	80066b0 <I2C_Master_ADDR+0x228>
 8006688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800668a:	2b10      	cmp	r3, #16
 800668c:	d010      	beq.n	80066b0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800669c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	e007      	b.n	80066c0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066be:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ce:	d117      	bne.n	8006700 <I2C_Master_ADDR+0x278>
 80066d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066d6:	d00b      	beq.n	80066f0 <I2C_Master_ADDR+0x268>
 80066d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d008      	beq.n	80066f0 <I2C_Master_ADDR+0x268>
 80066de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d005      	beq.n	80066f0 <I2C_Master_ADDR+0x268>
 80066e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066e6:	2b10      	cmp	r3, #16
 80066e8:	d002      	beq.n	80066f0 <I2C_Master_ADDR+0x268>
 80066ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ec:	2b20      	cmp	r3, #32
 80066ee:	d107      	bne.n	8006700 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80066fe:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006700:	2300      	movs	r3, #0
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	617b      	str	r3, [r7, #20]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	e032      	b.n	800677e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006726:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006732:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006736:	d117      	bne.n	8006768 <I2C_Master_ADDR+0x2e0>
 8006738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800673e:	d00b      	beq.n	8006758 <I2C_Master_ADDR+0x2d0>
 8006740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006742:	2b01      	cmp	r3, #1
 8006744:	d008      	beq.n	8006758 <I2C_Master_ADDR+0x2d0>
 8006746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006748:	2b08      	cmp	r3, #8
 800674a:	d005      	beq.n	8006758 <I2C_Master_ADDR+0x2d0>
 800674c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674e:	2b10      	cmp	r3, #16
 8006750:	d002      	beq.n	8006758 <I2C_Master_ADDR+0x2d0>
 8006752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006754:	2b20      	cmp	r3, #32
 8006756:	d107      	bne.n	8006768 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006766:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006768:	2300      	movs	r3, #0
 800676a:	613b      	str	r3, [r7, #16]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006784:	e00b      	b.n	800679e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006786:	2300      	movs	r3, #0
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	60fb      	str	r3, [r7, #12]
 800679a:	68fb      	ldr	r3, [r7, #12]
}
 800679c:	e7ff      	b.n	800679e <I2C_Master_ADDR+0x316>
 800679e:	bf00      	nop
 80067a0:	3744      	adds	r7, #68	@ 0x44
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b084      	sub	sp, #16
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067b8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d02b      	beq.n	800681c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	781a      	ldrb	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067de:	b29b      	uxth	r3, r3
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b29a      	uxth	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d114      	bne.n	800681c <I2C_SlaveTransmit_TXE+0x72>
 80067f2:	7bfb      	ldrb	r3, [r7, #15]
 80067f4:	2b29      	cmp	r3, #41	@ 0x29
 80067f6:	d111      	bne.n	800681c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006806:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2221      	movs	r2, #33	@ 0x21
 800680c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2228      	movs	r2, #40	@ 0x28
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff f9cf 	bl	8005bba <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800681c:	bf00      	nop
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d011      	beq.n	800685a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683a:	781a      	ldrb	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006850:	b29b      	uxth	r3, r3
 8006852:	3b01      	subs	r3, #1
 8006854:	b29a      	uxth	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006874:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800687a:	b29b      	uxth	r3, r3
 800687c:	2b00      	cmp	r3, #0
 800687e:	d02c      	beq.n	80068da <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	691a      	ldr	r2, [r3, #16]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006892:	1c5a      	adds	r2, r3, #1
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800689c:	b29b      	uxth	r3, r3
 800689e:	3b01      	subs	r3, #1
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d114      	bne.n	80068da <I2C_SlaveReceive_RXNE+0x74>
 80068b0:	7bfb      	ldrb	r3, [r7, #15]
 80068b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80068b4:	d111      	bne.n	80068da <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068c4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2222      	movs	r2, #34	@ 0x22
 80068ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2228      	movs	r2, #40	@ 0x28
 80068d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7ff f97a 	bl	8005bce <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80068da:	bf00      	nop
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d012      	beq.n	800691a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	691a      	ldr	r2, [r3, #16]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fe:	b2d2      	uxtb	r2, r2
 8006900:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006906:	1c5a      	adds	r2, r3, #1
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006910:	b29b      	uxth	r3, r3
 8006912:	3b01      	subs	r3, #1
 8006914:	b29a      	uxth	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b084      	sub	sp, #16
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006930:	2300      	movs	r3, #0
 8006932:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800693a:	b2db      	uxtb	r3, r3
 800693c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006940:	2b28      	cmp	r3, #40	@ 0x28
 8006942:	d127      	bne.n	8006994 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006952:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	089b      	lsrs	r3, r3, #2
 8006958:	f003 0301 	and.w	r3, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006960:	2301      	movs	r3, #1
 8006962:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	09db      	lsrs	r3, r3, #7
 8006968:	f003 0301 	and.w	r3, r3, #1
 800696c:	2b00      	cmp	r3, #0
 800696e:	d103      	bne.n	8006978 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	81bb      	strh	r3, [r7, #12]
 8006976:	e002      	b.n	800697e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006986:	89ba      	ldrh	r2, [r7, #12]
 8006988:	7bfb      	ldrb	r3, [r7, #15]
 800698a:	4619      	mov	r1, r3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff f928 	bl	8005be2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006992:	e00e      	b.n	80069b2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006994:	2300      	movs	r3, #0
 8006996:	60bb      	str	r3, [r7, #8]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	60bb      	str	r3, [r7, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	60bb      	str	r3, [r7, #8]
 80069a8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
	...

080069bc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069ca:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80069da:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80069dc:	2300      	movs	r3, #0
 80069de:	60bb      	str	r3, [r7, #8]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	60bb      	str	r3, [r7, #8]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f042 0201 	orr.w	r2, r2, #1
 80069f6:	601a      	str	r2, [r3, #0]
 80069f8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a08:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a18:	d172      	bne.n	8006b00 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
 8006a1c:	2b22      	cmp	r3, #34	@ 0x22
 8006a1e:	d002      	beq.n	8006a26 <I2C_Slave_STOPF+0x6a>
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
 8006a22:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a24:	d135      	bne.n	8006a92 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	b29a      	uxth	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d005      	beq.n	8006a4a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a42:	f043 0204 	orr.w	r2, r3, #4
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a58:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe f891 	bl	8004b86 <HAL_DMA_GetState>
 8006a64:	4603      	mov	r3, r0
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d049      	beq.n	8006afe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6e:	4a69      	ldr	r2, [pc, #420]	@ (8006c14 <I2C_Slave_STOPF+0x258>)
 8006a70:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fe f863 	bl	8004b42 <HAL_DMA_Abort_IT>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d03d      	beq.n	8006afe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006a8c:	4610      	mov	r0, r2
 8006a8e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a90:	e035      	b.n	8006afe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d005      	beq.n	8006ab6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aae:	f043 0204 	orr.w	r2, r3, #4
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ac4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fe f85b 	bl	8004b86 <HAL_DMA_GetState>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d014      	beq.n	8006b00 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ada:	4a4e      	ldr	r2, [pc, #312]	@ (8006c14 <I2C_Slave_STOPF+0x258>)
 8006adc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fe f82d 	bl	8004b42 <HAL_DMA_Abort_IT>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d008      	beq.n	8006b00 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
 8006afc:	e000      	b.n	8006b00 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006afe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d03e      	beq.n	8006b88 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d112      	bne.n	8006b3e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	691a      	ldr	r2, [r3, #16]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b22:	b2d2      	uxtb	r2, r2
 8006b24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2a:	1c5a      	adds	r2, r3, #1
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	3b01      	subs	r3, #1
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	695b      	ldr	r3, [r3, #20]
 8006b44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b48:	2b40      	cmp	r3, #64	@ 0x40
 8006b4a:	d112      	bne.n	8006b72 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691a      	ldr	r2, [r3, #16]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b56:	b2d2      	uxtb	r2, r2
 8006b58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d005      	beq.n	8006b88 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b80:	f043 0204 	orr.w	r2, r3, #4
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d003      	beq.n	8006b98 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f843 	bl	8006c1c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006b96:	e039      	b.n	8006c0c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b9c:	d109      	bne.n	8006bb2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2228      	movs	r2, #40	@ 0x28
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7ff f80e 	bl	8005bce <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b28      	cmp	r3, #40	@ 0x28
 8006bbc:	d111      	bne.n	8006be2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a15      	ldr	r2, [pc, #84]	@ (8006c18 <I2C_Slave_STOPF+0x25c>)
 8006bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2220      	movs	r2, #32
 8006bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff f80f 	bl	8005bfe <HAL_I2C_ListenCpltCallback>
}
 8006be0:	e014      	b.n	8006c0c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be6:	2b22      	cmp	r3, #34	@ 0x22
 8006be8:	d002      	beq.n	8006bf0 <I2C_Slave_STOPF+0x234>
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	2b22      	cmp	r3, #34	@ 0x22
 8006bee:	d10d      	bne.n	8006c0c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7fe ffe1 	bl	8005bce <HAL_I2C_SlaveRxCpltCallback>
}
 8006c0c:	bf00      	nop
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	0800717d 	.word	0x0800717d
 8006c18:	ffff0000 	.word	0xffff0000

08006c1c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c2a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c32:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	2b10      	cmp	r3, #16
 8006c38:	d002      	beq.n	8006c40 <I2C_ITError+0x24>
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	2b40      	cmp	r3, #64	@ 0x40
 8006c3e:	d10a      	bne.n	8006c56 <I2C_ITError+0x3a>
 8006c40:	7bfb      	ldrb	r3, [r7, #15]
 8006c42:	2b22      	cmp	r3, #34	@ 0x22
 8006c44:	d107      	bne.n	8006c56 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c54:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c5c:	2b28      	cmp	r3, #40	@ 0x28
 8006c5e:	d107      	bne.n	8006c70 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2228      	movs	r2, #40	@ 0x28
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006c6e:	e015      	b.n	8006c9c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c7e:	d00a      	beq.n	8006c96 <I2C_ITError+0x7a>
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	2b60      	cmp	r3, #96	@ 0x60
 8006c84:	d007      	beq.n	8006c96 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ca6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006caa:	d162      	bne.n	8006d72 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cba:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d020      	beq.n	8006d0c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cce:	4a6a      	ldr	r2, [pc, #424]	@ (8006e78 <I2C_ITError+0x25c>)
 8006cd0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7fd ff33 	bl	8004b42 <HAL_DMA_Abort_IT>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 8089 	beq.w	8006df6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0201 	bic.w	r2, r2, #1
 8006cf2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006d06:	4610      	mov	r0, r2
 8006d08:	4798      	blx	r3
 8006d0a:	e074      	b.n	8006df6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d10:	4a59      	ldr	r2, [pc, #356]	@ (8006e78 <I2C_ITError+0x25c>)
 8006d12:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fd ff12 	bl	8004b42 <HAL_DMA_Abort_IT>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d068      	beq.n	8006df6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d2e:	2b40      	cmp	r3, #64	@ 0x40
 8006d30:	d10b      	bne.n	8006d4a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	691a      	ldr	r2, [r3, #16]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3c:	b2d2      	uxtb	r2, r2
 8006d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d44:	1c5a      	adds	r2, r3, #1
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0201 	bic.w	r2, r2, #1
 8006d58:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	4798      	blx	r3
 8006d70:	e041      	b.n	8006df6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b60      	cmp	r3, #96	@ 0x60
 8006d7c:	d125      	bne.n	8006dca <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2220      	movs	r2, #32
 8006d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d96:	2b40      	cmp	r3, #64	@ 0x40
 8006d98:	d10b      	bne.n	8006db2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da4:	b2d2      	uxtb	r2, r2
 8006da6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dac:	1c5a      	adds	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f022 0201 	bic.w	r2, r2, #1
 8006dc0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7fe ff43 	bl	8005c4e <HAL_I2C_AbortCpltCallback>
 8006dc8:	e015      	b.n	8006df6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dd4:	2b40      	cmp	r3, #64	@ 0x40
 8006dd6:	d10b      	bne.n	8006df0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	691a      	ldr	r2, [r3, #16]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f7fe ff22 	bl	8005c3a <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f003 0301 	and.w	r3, r3, #1
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10e      	bne.n	8006e24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d109      	bne.n	8006e24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d104      	bne.n	8006e24 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d007      	beq.n	8006e34 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	685a      	ldr	r2, [r3, #4]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e32:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e3a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d113      	bne.n	8006e70 <I2C_ITError+0x254>
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	2b28      	cmp	r3, #40	@ 0x28
 8006e4c:	d110      	bne.n	8006e70 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a0a      	ldr	r2, [pc, #40]	@ (8006e7c <I2C_ITError+0x260>)
 8006e52:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fe fec7 	bl	8005bfe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e70:	bf00      	nop
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	0800717d 	.word	0x0800717d
 8006e7c:	ffff0000 	.word	0xffff0000

08006e80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af02      	add	r7, sp, #8
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	4608      	mov	r0, r1
 8006e8a:	4611      	mov	r1, r2
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	4603      	mov	r3, r0
 8006e90:	817b      	strh	r3, [r7, #10]
 8006e92:	460b      	mov	r3, r1
 8006e94:	813b      	strh	r3, [r7, #8]
 8006e96:	4613      	mov	r3, r2
 8006e98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ea8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006eb6:	68f8      	ldr	r0, [r7, #12]
 8006eb8:	f000 fa08 	bl	80072cc <I2C_WaitOnFlagUntilTimeout>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00d      	beq.n	8006ede <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ed0:	d103      	bne.n	8006eda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ed8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e05f      	b.n	8006f9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ede:	897b      	ldrh	r3, [r7, #10]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006eec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef0:	6a3a      	ldr	r2, [r7, #32]
 8006ef2:	492d      	ldr	r1, [pc, #180]	@ (8006fa8 <I2C_RequestMemoryWrite+0x128>)
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 fa63 	bl	80073c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d001      	beq.n	8006f04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e04c      	b.n	8006f9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f04:	2300      	movs	r3, #0
 8006f06:	617b      	str	r3, [r7, #20]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f1c:	6a39      	ldr	r1, [r7, #32]
 8006f1e:	68f8      	ldr	r0, [r7, #12]
 8006f20:	f000 faee 	bl	8007500 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00d      	beq.n	8006f46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	d107      	bne.n	8006f42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e02b      	b.n	8006f9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f46:	88fb      	ldrh	r3, [r7, #6]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d105      	bne.n	8006f58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f4c:	893b      	ldrh	r3, [r7, #8]
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	611a      	str	r2, [r3, #16]
 8006f56:	e021      	b.n	8006f9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f58:	893b      	ldrh	r3, [r7, #8]
 8006f5a:	0a1b      	lsrs	r3, r3, #8
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f68:	6a39      	ldr	r1, [r7, #32]
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 fac8 	bl	8007500 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d00d      	beq.n	8006f92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	d107      	bne.n	8006f8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e005      	b.n	8006f9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f92:	893b      	ldrh	r3, [r7, #8]
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3718      	adds	r7, #24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	00010002 	.word	0x00010002

08006fac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	60f8      	str	r0, [r7, #12]
 8006fb4:	4608      	mov	r0, r1
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	461a      	mov	r2, r3
 8006fba:	4603      	mov	r3, r0
 8006fbc:	817b      	strh	r3, [r7, #10]
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	813b      	strh	r3, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006fd4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fe4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	6a3b      	ldr	r3, [r7, #32]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 f96a 	bl	80072cc <I2C_WaitOnFlagUntilTimeout>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00d      	beq.n	800701a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007008:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800700c:	d103      	bne.n	8007016 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007014:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e0aa      	b.n	8007170 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800701a:	897b      	ldrh	r3, [r7, #10]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	461a      	mov	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007028:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800702a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702c:	6a3a      	ldr	r2, [r7, #32]
 800702e:	4952      	ldr	r1, [pc, #328]	@ (8007178 <I2C_RequestMemoryRead+0x1cc>)
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 f9c5 	bl	80073c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e097      	b.n	8007170 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007040:	2300      	movs	r3, #0
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	617b      	str	r3, [r7, #20]
 8007054:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007058:	6a39      	ldr	r1, [r7, #32]
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 fa50 	bl	8007500 <I2C_WaitOnTXEFlagUntilTimeout>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00d      	beq.n	8007082 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706a:	2b04      	cmp	r3, #4
 800706c:	d107      	bne.n	800707e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800707c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e076      	b.n	8007170 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007082:	88fb      	ldrh	r3, [r7, #6]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d105      	bne.n	8007094 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007088:	893b      	ldrh	r3, [r7, #8]
 800708a:	b2da      	uxtb	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	611a      	str	r2, [r3, #16]
 8007092:	e021      	b.n	80070d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007094:	893b      	ldrh	r3, [r7, #8]
 8007096:	0a1b      	lsrs	r3, r3, #8
 8007098:	b29b      	uxth	r3, r3
 800709a:	b2da      	uxtb	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070a4:	6a39      	ldr	r1, [r7, #32]
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 fa2a 	bl	8007500 <I2C_WaitOnTXEFlagUntilTimeout>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00d      	beq.n	80070ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d107      	bne.n	80070ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e050      	b.n	8007170 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070ce:	893b      	ldrh	r3, [r7, #8]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070da:	6a39      	ldr	r1, [r7, #32]
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 fa0f 	bl	8007500 <I2C_WaitOnTXEFlagUntilTimeout>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00d      	beq.n	8007104 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ec:	2b04      	cmp	r3, #4
 80070ee:	d107      	bne.n	8007100 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e035      	b.n	8007170 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007112:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	6a3b      	ldr	r3, [r7, #32]
 800711a:	2200      	movs	r2, #0
 800711c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f8d3 	bl	80072cc <I2C_WaitOnFlagUntilTimeout>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00d      	beq.n	8007148 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800713a:	d103      	bne.n	8007144 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007142:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e013      	b.n	8007170 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007148:	897b      	ldrh	r3, [r7, #10]
 800714a:	b2db      	uxtb	r3, r3
 800714c:	f043 0301 	orr.w	r3, r3, #1
 8007150:	b2da      	uxtb	r2, r3
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715a:	6a3a      	ldr	r2, [r7, #32]
 800715c:	4906      	ldr	r1, [pc, #24]	@ (8007178 <I2C_RequestMemoryRead+0x1cc>)
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 f92e 	bl	80073c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d001      	beq.n	800716e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e000      	b.n	8007170 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	00010002 	.word	0x00010002

0800717c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007194:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007196:	4b4b      	ldr	r3, [pc, #300]	@ (80072c4 <I2C_DMAAbort+0x148>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	08db      	lsrs	r3, r3, #3
 800719c:	4a4a      	ldr	r2, [pc, #296]	@ (80072c8 <I2C_DMAAbort+0x14c>)
 800719e:	fba2 2303 	umull	r2, r3, r2, r3
 80071a2:	0a1a      	lsrs	r2, r3, #8
 80071a4:	4613      	mov	r3, r2
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	4413      	add	r3, r2
 80071aa:	00da      	lsls	r2, r3, #3
 80071ac:	1ad3      	subs	r3, r2, r3
 80071ae:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d106      	bne.n	80071c4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ba:	f043 0220 	orr.w	r2, r3, #32
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80071c2:	e00a      	b.n	80071da <I2C_DMAAbort+0x5e>
    }
    count--;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3b01      	subs	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071d8:	d0ea      	beq.n	80071b0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071e6:	2200      	movs	r2, #0
 80071e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f6:	2200      	movs	r2, #0
 80071f8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007208:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2200      	movs	r2, #0
 800720e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800721c:	2200      	movs	r2, #0
 800721e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800722c:	2200      	movs	r2, #0
 800722e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0201 	bic.w	r2, r2, #1
 800723e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b60      	cmp	r3, #96	@ 0x60
 800724a:	d10e      	bne.n	800726a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2220      	movs	r2, #32
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2200      	movs	r2, #0
 8007260:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007262:	6978      	ldr	r0, [r7, #20]
 8007264:	f7fe fcf3 	bl	8005c4e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007268:	e027      	b.n	80072ba <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800726a:	7cfb      	ldrb	r3, [r7, #19]
 800726c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007270:	2b28      	cmp	r3, #40	@ 0x28
 8007272:	d117      	bne.n	80072a4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0201 	orr.w	r2, r2, #1
 8007282:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007292:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	2200      	movs	r2, #0
 8007298:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2228      	movs	r2, #40	@ 0x28
 800729e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80072a2:	e007      	b.n	80072b4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80072b4:	6978      	ldr	r0, [r7, #20]
 80072b6:	f7fe fcc0 	bl	8005c3a <HAL_I2C_ErrorCallback>
}
 80072ba:	bf00      	nop
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20000004 	.word	0x20000004
 80072c8:	14f8b589 	.word	0x14f8b589

080072cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	4613      	mov	r3, r2
 80072da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072dc:	e048      	b.n	8007370 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e4:	d044      	beq.n	8007370 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072e6:	f7fc f853 	bl	8003390 <HAL_GetTick>
 80072ea:	4602      	mov	r2, r0
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	683a      	ldr	r2, [r7, #0]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d302      	bcc.n	80072fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d139      	bne.n	8007370 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	0c1b      	lsrs	r3, r3, #16
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b01      	cmp	r3, #1
 8007304:	d10d      	bne.n	8007322 <I2C_WaitOnFlagUntilTimeout+0x56>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	43da      	mvns	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	4013      	ands	r3, r2
 8007312:	b29b      	uxth	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	bf0c      	ite	eq
 8007318:	2301      	moveq	r3, #1
 800731a:	2300      	movne	r3, #0
 800731c:	b2db      	uxtb	r3, r3
 800731e:	461a      	mov	r2, r3
 8007320:	e00c      	b.n	800733c <I2C_WaitOnFlagUntilTimeout+0x70>
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	43da      	mvns	r2, r3
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	4013      	ands	r3, r2
 800732e:	b29b      	uxth	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	bf0c      	ite	eq
 8007334:	2301      	moveq	r3, #1
 8007336:	2300      	movne	r3, #0
 8007338:	b2db      	uxtb	r3, r3
 800733a:	461a      	mov	r2, r3
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	429a      	cmp	r2, r3
 8007340:	d116      	bne.n	8007370 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2220      	movs	r2, #32
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800735c:	f043 0220 	orr.w	r2, r3, #32
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e023      	b.n	80073b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	0c1b      	lsrs	r3, r3, #16
 8007374:	b2db      	uxtb	r3, r3
 8007376:	2b01      	cmp	r3, #1
 8007378:	d10d      	bne.n	8007396 <I2C_WaitOnFlagUntilTimeout+0xca>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	43da      	mvns	r2, r3
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	4013      	ands	r3, r2
 8007386:	b29b      	uxth	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	bf0c      	ite	eq
 800738c:	2301      	moveq	r3, #1
 800738e:	2300      	movne	r3, #0
 8007390:	b2db      	uxtb	r3, r3
 8007392:	461a      	mov	r2, r3
 8007394:	e00c      	b.n	80073b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	699b      	ldr	r3, [r3, #24]
 800739c:	43da      	mvns	r2, r3
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	4013      	ands	r3, r2
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bf0c      	ite	eq
 80073a8:	2301      	moveq	r3, #1
 80073aa:	2300      	movne	r3, #0
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	461a      	mov	r2, r3
 80073b0:	79fb      	ldrb	r3, [r7, #7]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d093      	beq.n	80072de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80073ce:	e071      	b.n	80074b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073de:	d123      	bne.n	8007428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80073f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2220      	movs	r2, #32
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007414:	f043 0204 	orr.w	r2, r3, #4
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e067      	b.n	80074f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742e:	d041      	beq.n	80074b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007430:	f7fb ffae 	bl	8003390 <HAL_GetTick>
 8007434:	4602      	mov	r2, r0
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	429a      	cmp	r2, r3
 800743e:	d302      	bcc.n	8007446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d136      	bne.n	80074b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	0c1b      	lsrs	r3, r3, #16
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b01      	cmp	r3, #1
 800744e:	d10c      	bne.n	800746a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	43da      	mvns	r2, r3
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	4013      	ands	r3, r2
 800745c:	b29b      	uxth	r3, r3
 800745e:	2b00      	cmp	r3, #0
 8007460:	bf14      	ite	ne
 8007462:	2301      	movne	r3, #1
 8007464:	2300      	moveq	r3, #0
 8007466:	b2db      	uxtb	r3, r3
 8007468:	e00b      	b.n	8007482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	43da      	mvns	r2, r3
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	4013      	ands	r3, r2
 8007476:	b29b      	uxth	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	bf14      	ite	ne
 800747c:	2301      	movne	r3, #1
 800747e:	2300      	moveq	r3, #0
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b00      	cmp	r3, #0
 8007484:	d016      	beq.n	80074b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a0:	f043 0220 	orr.w	r2, r3, #32
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e021      	b.n	80074f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	0c1b      	lsrs	r3, r3, #16
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d10c      	bne.n	80074d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	695b      	ldr	r3, [r3, #20]
 80074c4:	43da      	mvns	r2, r3
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	4013      	ands	r3, r2
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	bf14      	ite	ne
 80074d0:	2301      	movne	r3, #1
 80074d2:	2300      	moveq	r3, #0
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	e00b      	b.n	80074f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	699b      	ldr	r3, [r3, #24]
 80074de:	43da      	mvns	r2, r3
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	4013      	ands	r3, r2
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bf14      	ite	ne
 80074ea:	2301      	movne	r3, #1
 80074ec:	2300      	moveq	r3, #0
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f47f af6d 	bne.w	80073d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800750c:	e034      	b.n	8007578 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800750e:	68f8      	ldr	r0, [r7, #12]
 8007510:	f000 f915 	bl	800773e <I2C_IsAcknowledgeFailed>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e034      	b.n	8007588 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007524:	d028      	beq.n	8007578 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007526:	f7fb ff33 	bl	8003390 <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	68ba      	ldr	r2, [r7, #8]
 8007532:	429a      	cmp	r2, r3
 8007534:	d302      	bcc.n	800753c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d11d      	bne.n	8007578 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	695b      	ldr	r3, [r3, #20]
 8007542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007546:	2b80      	cmp	r3, #128	@ 0x80
 8007548:	d016      	beq.n	8007578 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007564:	f043 0220 	orr.w	r2, r3, #32
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e007      	b.n	8007588 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	695b      	ldr	r3, [r3, #20]
 800757e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007582:	2b80      	cmp	r3, #128	@ 0x80
 8007584:	d1c3      	bne.n	800750e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	60b9      	str	r1, [r7, #8]
 800759a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800759c:	e034      	b.n	8007608 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 f8cd 	bl	800773e <I2C_IsAcknowledgeFailed>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	e034      	b.n	8007618 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b4:	d028      	beq.n	8007608 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075b6:	f7fb feeb 	bl	8003390 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d302      	bcc.n	80075cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d11d      	bne.n	8007608 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d016      	beq.n	8007608 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f4:	f043 0220 	orr.w	r2, r3, #32
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e007      	b.n	8007618 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	f003 0304 	and.w	r3, r3, #4
 8007612:	2b04      	cmp	r3, #4
 8007614:	d1c3      	bne.n	800759e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007620:	b480      	push	{r7}
 8007622:	b085      	sub	sp, #20
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007628:	2300      	movs	r3, #0
 800762a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800762c:	4b13      	ldr	r3, [pc, #76]	@ (800767c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	08db      	lsrs	r3, r3, #3
 8007632:	4a13      	ldr	r2, [pc, #76]	@ (8007680 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007634:	fba2 2303 	umull	r2, r3, r2, r3
 8007638:	0a1a      	lsrs	r2, r3, #8
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	3b01      	subs	r3, #1
 8007646:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d107      	bne.n	800765e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007652:	f043 0220 	orr.w	r2, r3, #32
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e008      	b.n	8007670 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800766c:	d0e9      	beq.n	8007642 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	20000004 	.word	0x20000004
 8007680:	14f8b589 	.word	0x14f8b589

08007684 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007690:	e049      	b.n	8007726 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	f003 0310 	and.w	r3, r3, #16
 800769c:	2b10      	cmp	r3, #16
 800769e:	d119      	bne.n	80076d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f06f 0210 	mvn.w	r2, #16
 80076a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2220      	movs	r2, #32
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e030      	b.n	8007736 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076d4:	f7fb fe5c 	bl	8003390 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d302      	bcc.n	80076ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d11d      	bne.n	8007726 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f4:	2b40      	cmp	r3, #64	@ 0x40
 80076f6:	d016      	beq.n	8007726 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2220      	movs	r2, #32
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007712:	f043 0220 	orr.w	r2, r3, #32
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e007      	b.n	8007736 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007730:	2b40      	cmp	r3, #64	@ 0x40
 8007732:	d1ae      	bne.n	8007692 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800773e:	b480      	push	{r7}
 8007740:	b083      	sub	sp, #12
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007750:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007754:	d11b      	bne.n	800778e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800775e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2200      	movs	r2, #0
 8007764:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2220      	movs	r2, #32
 800776a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800777a:	f043 0204 	orr.w	r2, r3, #4
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e000      	b.n	8007790 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077a8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80077ac:	d103      	bne.n	80077b6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80077b4:	e007      	b.n	80077c6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ba:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80077be:	d102      	bne.n	80077c6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2208      	movs	r2, #8
 80077c4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d101      	bne.n	80077e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e267      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d075      	beq.n	80078de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80077f2:	4b88      	ldr	r3, [pc, #544]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 030c 	and.w	r3, r3, #12
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d00c      	beq.n	8007818 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077fe:	4b85      	ldr	r3, [pc, #532]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007806:	2b08      	cmp	r3, #8
 8007808:	d112      	bne.n	8007830 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800780a:	4b82      	ldr	r3, [pc, #520]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007812:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007816:	d10b      	bne.n	8007830 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007818:	4b7e      	ldr	r3, [pc, #504]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d05b      	beq.n	80078dc <HAL_RCC_OscConfig+0x108>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d157      	bne.n	80078dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e242      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007838:	d106      	bne.n	8007848 <HAL_RCC_OscConfig+0x74>
 800783a:	4b76      	ldr	r3, [pc, #472]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a75      	ldr	r2, [pc, #468]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	e01d      	b.n	8007884 <HAL_RCC_OscConfig+0xb0>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007850:	d10c      	bne.n	800786c <HAL_RCC_OscConfig+0x98>
 8007852:	4b70      	ldr	r3, [pc, #448]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a6f      	ldr	r2, [pc, #444]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800785c:	6013      	str	r3, [r2, #0]
 800785e:	4b6d      	ldr	r3, [pc, #436]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a6c      	ldr	r2, [pc, #432]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007868:	6013      	str	r3, [r2, #0]
 800786a:	e00b      	b.n	8007884 <HAL_RCC_OscConfig+0xb0>
 800786c:	4b69      	ldr	r3, [pc, #420]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a68      	ldr	r2, [pc, #416]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007876:	6013      	str	r3, [r2, #0]
 8007878:	4b66      	ldr	r3, [pc, #408]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a65      	ldr	r2, [pc, #404]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 800787e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d013      	beq.n	80078b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800788c:	f7fb fd80 	bl	8003390 <HAL_GetTick>
 8007890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007892:	e008      	b.n	80078a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007894:	f7fb fd7c 	bl	8003390 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	2b64      	cmp	r3, #100	@ 0x64
 80078a0:	d901      	bls.n	80078a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e207      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078a6:	4b5b      	ldr	r3, [pc, #364]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d0f0      	beq.n	8007894 <HAL_RCC_OscConfig+0xc0>
 80078b2:	e014      	b.n	80078de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078b4:	f7fb fd6c 	bl	8003390 <HAL_GetTick>
 80078b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078ba:	e008      	b.n	80078ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078bc:	f7fb fd68 	bl	8003390 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b64      	cmp	r3, #100	@ 0x64
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e1f3      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078ce:	4b51      	ldr	r3, [pc, #324]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1f0      	bne.n	80078bc <HAL_RCC_OscConfig+0xe8>
 80078da:	e000      	b.n	80078de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d063      	beq.n	80079b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80078ea:	4b4a      	ldr	r3, [pc, #296]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	f003 030c 	and.w	r3, r3, #12
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00b      	beq.n	800790e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078f6:	4b47      	ldr	r3, [pc, #284]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80078fe:	2b08      	cmp	r3, #8
 8007900:	d11c      	bne.n	800793c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007902:	4b44      	ldr	r3, [pc, #272]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d116      	bne.n	800793c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800790e:	4b41      	ldr	r3, [pc, #260]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <HAL_RCC_OscConfig+0x152>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d001      	beq.n	8007926 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e1c7      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007926:	4b3b      	ldr	r3, [pc, #236]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	691b      	ldr	r3, [r3, #16]
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	4937      	ldr	r1, [pc, #220]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007936:	4313      	orrs	r3, r2
 8007938:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800793a:	e03a      	b.n	80079b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d020      	beq.n	8007986 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007944:	4b34      	ldr	r3, [pc, #208]	@ (8007a18 <HAL_RCC_OscConfig+0x244>)
 8007946:	2201      	movs	r2, #1
 8007948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800794a:	f7fb fd21 	bl	8003390 <HAL_GetTick>
 800794e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007950:	e008      	b.n	8007964 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007952:	f7fb fd1d 	bl	8003390 <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b02      	cmp	r3, #2
 800795e:	d901      	bls.n	8007964 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007960:	2303      	movs	r3, #3
 8007962:	e1a8      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007964:	4b2b      	ldr	r3, [pc, #172]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b00      	cmp	r3, #0
 800796e:	d0f0      	beq.n	8007952 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007970:	4b28      	ldr	r3, [pc, #160]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	00db      	lsls	r3, r3, #3
 800797e:	4925      	ldr	r1, [pc, #148]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 8007980:	4313      	orrs	r3, r2
 8007982:	600b      	str	r3, [r1, #0]
 8007984:	e015      	b.n	80079b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007986:	4b24      	ldr	r3, [pc, #144]	@ (8007a18 <HAL_RCC_OscConfig+0x244>)
 8007988:	2200      	movs	r2, #0
 800798a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800798c:	f7fb fd00 	bl	8003390 <HAL_GetTick>
 8007990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007992:	e008      	b.n	80079a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007994:	f7fb fcfc 	bl	8003390 <HAL_GetTick>
 8007998:	4602      	mov	r2, r0
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d901      	bls.n	80079a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e187      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079a6:	4b1b      	ldr	r3, [pc, #108]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0302 	and.w	r3, r3, #2
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1f0      	bne.n	8007994 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 0308 	and.w	r3, r3, #8
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d036      	beq.n	8007a2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d016      	beq.n	80079f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079c6:	4b15      	ldr	r3, [pc, #84]	@ (8007a1c <HAL_RCC_OscConfig+0x248>)
 80079c8:	2201      	movs	r2, #1
 80079ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079cc:	f7fb fce0 	bl	8003390 <HAL_GetTick>
 80079d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079d2:	e008      	b.n	80079e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80079d4:	f7fb fcdc 	bl	8003390 <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e167      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a14 <HAL_RCC_OscConfig+0x240>)
 80079e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0f0      	beq.n	80079d4 <HAL_RCC_OscConfig+0x200>
 80079f2:	e01b      	b.n	8007a2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079f4:	4b09      	ldr	r3, [pc, #36]	@ (8007a1c <HAL_RCC_OscConfig+0x248>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079fa:	f7fb fcc9 	bl	8003390 <HAL_GetTick>
 80079fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a00:	e00e      	b.n	8007a20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a02:	f7fb fcc5 	bl	8003390 <HAL_GetTick>
 8007a06:	4602      	mov	r2, r0
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	2b02      	cmp	r3, #2
 8007a0e:	d907      	bls.n	8007a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e150      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
 8007a14:	40023800 	.word	0x40023800
 8007a18:	42470000 	.word	0x42470000
 8007a1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a20:	4b88      	ldr	r3, [pc, #544]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a24:	f003 0302 	and.w	r3, r3, #2
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1ea      	bne.n	8007a02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0304 	and.w	r3, r3, #4
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 8097 	beq.w	8007b68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a3e:	4b81      	ldr	r3, [pc, #516]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10f      	bne.n	8007a6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60bb      	str	r3, [r7, #8]
 8007a4e:	4b7d      	ldr	r3, [pc, #500]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a52:	4a7c      	ldr	r2, [pc, #496]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8007a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007a62:	60bb      	str	r3, [r7, #8]
 8007a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a66:	2301      	movs	r3, #1
 8007a68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a6a:	4b77      	ldr	r3, [pc, #476]	@ (8007c48 <HAL_RCC_OscConfig+0x474>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d118      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a76:	4b74      	ldr	r3, [pc, #464]	@ (8007c48 <HAL_RCC_OscConfig+0x474>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a73      	ldr	r2, [pc, #460]	@ (8007c48 <HAL_RCC_OscConfig+0x474>)
 8007a7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a82:	f7fb fc85 	bl	8003390 <HAL_GetTick>
 8007a86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a88:	e008      	b.n	8007a9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a8a:	f7fb fc81 	bl	8003390 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d901      	bls.n	8007a9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e10c      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a9c:	4b6a      	ldr	r3, [pc, #424]	@ (8007c48 <HAL_RCC_OscConfig+0x474>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d0f0      	beq.n	8007a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d106      	bne.n	8007abe <HAL_RCC_OscConfig+0x2ea>
 8007ab0:	4b64      	ldr	r3, [pc, #400]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ab4:	4a63      	ldr	r2, [pc, #396]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ab6:	f043 0301 	orr.w	r3, r3, #1
 8007aba:	6713      	str	r3, [r2, #112]	@ 0x70
 8007abc:	e01c      	b.n	8007af8 <HAL_RCC_OscConfig+0x324>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	2b05      	cmp	r3, #5
 8007ac4:	d10c      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x30c>
 8007ac6:	4b5f      	ldr	r3, [pc, #380]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aca:	4a5e      	ldr	r2, [pc, #376]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007acc:	f043 0304 	orr.w	r3, r3, #4
 8007ad0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ad2:	4b5c      	ldr	r3, [pc, #368]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ad4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ad6:	4a5b      	ldr	r2, [pc, #364]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ad8:	f043 0301 	orr.w	r3, r3, #1
 8007adc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ade:	e00b      	b.n	8007af8 <HAL_RCC_OscConfig+0x324>
 8007ae0:	4b58      	ldr	r3, [pc, #352]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ae2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ae4:	4a57      	ldr	r2, [pc, #348]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ae6:	f023 0301 	bic.w	r3, r3, #1
 8007aea:	6713      	str	r3, [r2, #112]	@ 0x70
 8007aec:	4b55      	ldr	r3, [pc, #340]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007af0:	4a54      	ldr	r2, [pc, #336]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007af2:	f023 0304 	bic.w	r3, r3, #4
 8007af6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d015      	beq.n	8007b2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b00:	f7fb fc46 	bl	8003390 <HAL_GetTick>
 8007b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b06:	e00a      	b.n	8007b1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b08:	f7fb fc42 	bl	8003390 <HAL_GetTick>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d901      	bls.n	8007b1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e0cb      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b1e:	4b49      	ldr	r3, [pc, #292]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0ee      	beq.n	8007b08 <HAL_RCC_OscConfig+0x334>
 8007b2a:	e014      	b.n	8007b56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b2c:	f7fb fc30 	bl	8003390 <HAL_GetTick>
 8007b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b32:	e00a      	b.n	8007b4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b34:	f7fb fc2c 	bl	8003390 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e0b5      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1ee      	bne.n	8007b34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007b56:	7dfb      	ldrb	r3, [r7, #23]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d105      	bne.n	8007b68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b5c:	4b39      	ldr	r3, [pc, #228]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b60:	4a38      	ldr	r2, [pc, #224]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	699b      	ldr	r3, [r3, #24]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 80a1 	beq.w	8007cb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b72:	4b34      	ldr	r3, [pc, #208]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f003 030c 	and.w	r3, r3, #12
 8007b7a:	2b08      	cmp	r3, #8
 8007b7c:	d05c      	beq.n	8007c38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d141      	bne.n	8007c0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b86:	4b31      	ldr	r3, [pc, #196]	@ (8007c4c <HAL_RCC_OscConfig+0x478>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b8c:	f7fb fc00 	bl	8003390 <HAL_GetTick>
 8007b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b92:	e008      	b.n	8007ba6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b94:	f7fb fbfc 	bl	8003390 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e087      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ba6:	4b27      	ldr	r3, [pc, #156]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f0      	bne.n	8007b94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	69da      	ldr	r2, [r3, #28]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	431a      	orrs	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bc0:	019b      	lsls	r3, r3, #6
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bc8:	085b      	lsrs	r3, r3, #1
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	041b      	lsls	r3, r3, #16
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd4:	061b      	lsls	r3, r3, #24
 8007bd6:	491b      	ldr	r1, [pc, #108]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8007c4c <HAL_RCC_OscConfig+0x478>)
 8007bde:	2201      	movs	r2, #1
 8007be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007be2:	f7fb fbd5 	bl	8003390 <HAL_GetTick>
 8007be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007be8:	e008      	b.n	8007bfc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bea:	f7fb fbd1 	bl	8003390 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d901      	bls.n	8007bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e05c      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bfc:	4b11      	ldr	r3, [pc, #68]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d0f0      	beq.n	8007bea <HAL_RCC_OscConfig+0x416>
 8007c08:	e054      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c0a:	4b10      	ldr	r3, [pc, #64]	@ (8007c4c <HAL_RCC_OscConfig+0x478>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c10:	f7fb fbbe 	bl	8003390 <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c18:	f7fb fbba 	bl	8003390 <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e045      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c2a:	4b06      	ldr	r3, [pc, #24]	@ (8007c44 <HAL_RCC_OscConfig+0x470>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1f0      	bne.n	8007c18 <HAL_RCC_OscConfig+0x444>
 8007c36:	e03d      	b.n	8007cb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d107      	bne.n	8007c50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e038      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
 8007c44:	40023800 	.word	0x40023800
 8007c48:	40007000 	.word	0x40007000
 8007c4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c50:	4b1b      	ldr	r3, [pc, #108]	@ (8007cc0 <HAL_RCC_OscConfig+0x4ec>)
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d028      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d121      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d11a      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007c80:	4013      	ands	r3, r2
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007c86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d111      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c96:	085b      	lsrs	r3, r3, #1
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d107      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007caa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d001      	beq.n	8007cb4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e000      	b.n	8007cb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	40023800 	.word	0x40023800

08007cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e0cc      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007cd8:	4b68      	ldr	r3, [pc, #416]	@ (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f003 0307 	and.w	r3, r3, #7
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d90c      	bls.n	8007d00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ce6:	4b65      	ldr	r3, [pc, #404]	@ (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	b2d2      	uxtb	r2, r2
 8007cec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cee:	4b63      	ldr	r3, [pc, #396]	@ (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d001      	beq.n	8007d00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	e0b8      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0302 	and.w	r3, r3, #2
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d020      	beq.n	8007d4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d005      	beq.n	8007d24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d18:	4b59      	ldr	r3, [pc, #356]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	4a58      	ldr	r2, [pc, #352]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d1e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007d22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0308 	and.w	r3, r3, #8
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d30:	4b53      	ldr	r3, [pc, #332]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	4a52      	ldr	r2, [pc, #328]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d36:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007d3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d3c:	4b50      	ldr	r3, [pc, #320]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	494d      	ldr	r1, [pc, #308]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d044      	beq.n	8007de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d107      	bne.n	8007d72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d62:	4b47      	ldr	r3, [pc, #284]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d119      	bne.n	8007da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e07f      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d003      	beq.n	8007d82 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d7e:	2b03      	cmp	r3, #3
 8007d80:	d107      	bne.n	8007d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d82:	4b3f      	ldr	r3, [pc, #252]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d109      	bne.n	8007da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e06f      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d92:	4b3b      	ldr	r3, [pc, #236]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0302 	and.w	r3, r3, #2
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e067      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007da2:	4b37      	ldr	r3, [pc, #220]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f023 0203 	bic.w	r2, r3, #3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	4934      	ldr	r1, [pc, #208]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007db4:	f7fb faec 	bl	8003390 <HAL_GetTick>
 8007db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dba:	e00a      	b.n	8007dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dbc:	f7fb fae8 	bl	8003390 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e04f      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f003 020c 	and.w	r2, r3, #12
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	009b      	lsls	r3, r3, #2
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d1eb      	bne.n	8007dbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007de4:	4b25      	ldr	r3, [pc, #148]	@ (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d20c      	bcs.n	8007e0c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007df2:	4b22      	ldr	r3, [pc, #136]	@ (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	b2d2      	uxtb	r2, r2
 8007df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dfa:	4b20      	ldr	r3, [pc, #128]	@ (8007e7c <HAL_RCC_ClockConfig+0x1b8>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0307 	and.w	r3, r3, #7
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d001      	beq.n	8007e0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e032      	b.n	8007e72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 0304 	and.w	r3, r3, #4
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d008      	beq.n	8007e2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e18:	4b19      	ldr	r3, [pc, #100]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	4916      	ldr	r1, [pc, #88]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 0308 	and.w	r3, r3, #8
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d009      	beq.n	8007e4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e36:	4b12      	ldr	r3, [pc, #72]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	490e      	ldr	r1, [pc, #56]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007e4a:	f000 f821 	bl	8007e90 <HAL_RCC_GetSysClockFreq>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	4b0b      	ldr	r3, [pc, #44]	@ (8007e80 <HAL_RCC_ClockConfig+0x1bc>)
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	091b      	lsrs	r3, r3, #4
 8007e56:	f003 030f 	and.w	r3, r3, #15
 8007e5a:	490a      	ldr	r1, [pc, #40]	@ (8007e84 <HAL_RCC_ClockConfig+0x1c0>)
 8007e5c:	5ccb      	ldrb	r3, [r1, r3]
 8007e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e62:	4a09      	ldr	r2, [pc, #36]	@ (8007e88 <HAL_RCC_ClockConfig+0x1c4>)
 8007e64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007e66:	4b09      	ldr	r3, [pc, #36]	@ (8007e8c <HAL_RCC_ClockConfig+0x1c8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fb fa4c 	bl	8003308 <HAL_InitTick>

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	40023c00 	.word	0x40023c00
 8007e80:	40023800 	.word	0x40023800
 8007e84:	0800de88 	.word	0x0800de88
 8007e88:	20000004 	.word	0x20000004
 8007e8c:	20000008 	.word	0x20000008

08007e90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e94:	b090      	sub	sp, #64	@ 0x40
 8007e96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ea8:	4b59      	ldr	r3, [pc, #356]	@ (8008010 <HAL_RCC_GetSysClockFreq+0x180>)
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	f003 030c 	and.w	r3, r3, #12
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	d00d      	beq.n	8007ed0 <HAL_RCC_GetSysClockFreq+0x40>
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	f200 80a1 	bhi.w	8007ffc <HAL_RCC_GetSysClockFreq+0x16c>
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <HAL_RCC_GetSysClockFreq+0x34>
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d003      	beq.n	8007eca <HAL_RCC_GetSysClockFreq+0x3a>
 8007ec2:	e09b      	b.n	8007ffc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ec4:	4b53      	ldr	r3, [pc, #332]	@ (8008014 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ec8:	e09b      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007eca:	4b53      	ldr	r3, [pc, #332]	@ (8008018 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ece:	e098      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ed0:	4b4f      	ldr	r3, [pc, #316]	@ (8008010 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ed8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007eda:	4b4d      	ldr	r3, [pc, #308]	@ (8008010 <HAL_RCC_GetSysClockFreq+0x180>)
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d028      	beq.n	8007f38 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8008010 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	099b      	lsrs	r3, r3, #6
 8007eec:	2200      	movs	r2, #0
 8007eee:	623b      	str	r3, [r7, #32]
 8007ef0:	627a      	str	r2, [r7, #36]	@ 0x24
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4b47      	ldr	r3, [pc, #284]	@ (8008018 <HAL_RCC_GetSysClockFreq+0x188>)
 8007efc:	fb03 f201 	mul.w	r2, r3, r1
 8007f00:	2300      	movs	r3, #0
 8007f02:	fb00 f303 	mul.w	r3, r0, r3
 8007f06:	4413      	add	r3, r2
 8007f08:	4a43      	ldr	r2, [pc, #268]	@ (8008018 <HAL_RCC_GetSysClockFreq+0x188>)
 8007f0a:	fba0 1202 	umull	r1, r2, r0, r2
 8007f0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007f10:	460a      	mov	r2, r1
 8007f12:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007f14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f16:	4413      	add	r3, r2
 8007f18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	61bb      	str	r3, [r7, #24]
 8007f20:	61fa      	str	r2, [r7, #28]
 8007f22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007f2a:	f7f8 fe1f 	bl	8000b6c <__aeabi_uldivmod>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	460b      	mov	r3, r1
 8007f32:	4613      	mov	r3, r2
 8007f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f36:	e053      	b.n	8007fe0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f38:	4b35      	ldr	r3, [pc, #212]	@ (8008010 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	099b      	lsrs	r3, r3, #6
 8007f3e:	2200      	movs	r2, #0
 8007f40:	613b      	str	r3, [r7, #16]
 8007f42:	617a      	str	r2, [r7, #20]
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007f4a:	f04f 0b00 	mov.w	fp, #0
 8007f4e:	4652      	mov	r2, sl
 8007f50:	465b      	mov	r3, fp
 8007f52:	f04f 0000 	mov.w	r0, #0
 8007f56:	f04f 0100 	mov.w	r1, #0
 8007f5a:	0159      	lsls	r1, r3, #5
 8007f5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f60:	0150      	lsls	r0, r2, #5
 8007f62:	4602      	mov	r2, r0
 8007f64:	460b      	mov	r3, r1
 8007f66:	ebb2 080a 	subs.w	r8, r2, sl
 8007f6a:	eb63 090b 	sbc.w	r9, r3, fp
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007f7a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007f7e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007f82:	ebb2 0408 	subs.w	r4, r2, r8
 8007f86:	eb63 0509 	sbc.w	r5, r3, r9
 8007f8a:	f04f 0200 	mov.w	r2, #0
 8007f8e:	f04f 0300 	mov.w	r3, #0
 8007f92:	00eb      	lsls	r3, r5, #3
 8007f94:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f98:	00e2      	lsls	r2, r4, #3
 8007f9a:	4614      	mov	r4, r2
 8007f9c:	461d      	mov	r5, r3
 8007f9e:	eb14 030a 	adds.w	r3, r4, sl
 8007fa2:	603b      	str	r3, [r7, #0]
 8007fa4:	eb45 030b 	adc.w	r3, r5, fp
 8007fa8:	607b      	str	r3, [r7, #4]
 8007faa:	f04f 0200 	mov.w	r2, #0
 8007fae:	f04f 0300 	mov.w	r3, #0
 8007fb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007fb6:	4629      	mov	r1, r5
 8007fb8:	028b      	lsls	r3, r1, #10
 8007fba:	4621      	mov	r1, r4
 8007fbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	028a      	lsls	r2, r1, #10
 8007fc4:	4610      	mov	r0, r2
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fca:	2200      	movs	r2, #0
 8007fcc:	60bb      	str	r3, [r7, #8]
 8007fce:	60fa      	str	r2, [r7, #12]
 8007fd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fd4:	f7f8 fdca 	bl	8000b6c <__aeabi_uldivmod>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	460b      	mov	r3, r1
 8007fdc:	4613      	mov	r3, r2
 8007fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8008010 <HAL_RCC_GetSysClockFreq+0x180>)
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	0c1b      	lsrs	r3, r3, #16
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	3301      	adds	r3, #1
 8007fec:	005b      	lsls	r3, r3, #1
 8007fee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007ff0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007ffa:	e002      	b.n	8008002 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ffc:	4b05      	ldr	r3, [pc, #20]	@ (8008014 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008000:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008004:	4618      	mov	r0, r3
 8008006:	3740      	adds	r7, #64	@ 0x40
 8008008:	46bd      	mov	sp, r7
 800800a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800800e:	bf00      	nop
 8008010:	40023800 	.word	0x40023800
 8008014:	00f42400 	.word	0x00f42400
 8008018:	017d7840 	.word	0x017d7840

0800801c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008020:	4b03      	ldr	r3, [pc, #12]	@ (8008030 <HAL_RCC_GetHCLKFreq+0x14>)
 8008022:	681b      	ldr	r3, [r3, #0]
}
 8008024:	4618      	mov	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	20000004 	.word	0x20000004

08008034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008038:	f7ff fff0 	bl	800801c <HAL_RCC_GetHCLKFreq>
 800803c:	4602      	mov	r2, r0
 800803e:	4b05      	ldr	r3, [pc, #20]	@ (8008054 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	0a9b      	lsrs	r3, r3, #10
 8008044:	f003 0307 	and.w	r3, r3, #7
 8008048:	4903      	ldr	r1, [pc, #12]	@ (8008058 <HAL_RCC_GetPCLK1Freq+0x24>)
 800804a:	5ccb      	ldrb	r3, [r1, r3]
 800804c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008050:	4618      	mov	r0, r3
 8008052:	bd80      	pop	{r7, pc}
 8008054:	40023800 	.word	0x40023800
 8008058:	0800de98 	.word	0x0800de98

0800805c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e022      	b.n	80080b4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d105      	bne.n	8008086 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7fa fee9 	bl	8002e58 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2203      	movs	r2, #3
 800808a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f814 	bl	80080bc <HAL_SD_InitCard>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e00a      	b.n	80080b4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2201      	movs	r2, #1
 80080ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80080bc:	b5b0      	push	{r4, r5, r7, lr}
 80080be:	b08e      	sub	sp, #56	@ 0x38
 80080c0:	af04      	add	r7, sp, #16
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80080c4:	2300      	movs	r3, #0
 80080c6:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80080c8:	2300      	movs	r3, #0
 80080ca:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80080cc:	2300      	movs	r3, #0
 80080ce:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80080d0:	2300      	movs	r3, #0
 80080d2:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80080d4:	2300      	movs	r3, #0
 80080d6:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80080d8:	2376      	movs	r3, #118	@ 0x76
 80080da:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681d      	ldr	r5, [r3, #0]
 80080e0:	466c      	mov	r4, sp
 80080e2:	f107 0318 	add.w	r3, r7, #24
 80080e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80080ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80080ee:	f107 030c 	add.w	r3, r7, #12
 80080f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80080f4:	4628      	mov	r0, r5
 80080f6:	f001 ffb7 	bl	800a068 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80080fa:	4b2a      	ldr	r3, [pc, #168]	@ (80081a4 <HAL_SD_InitCard+0xe8>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4618      	mov	r0, r3
 8008106:	f001 fff8 	bl	800a0fa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800810a:	4b26      	ldr	r3, [pc, #152]	@ (80081a4 <HAL_SD_InitCard+0xe8>)
 800810c:	2201      	movs	r2, #1
 800810e:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008110:	2002      	movs	r0, #2
 8008112:	f7fb f949 	bl	80033a8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f001 f878 	bl	800920c <SD_PowerON>
 800811c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800811e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00b      	beq.n	800813c <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2201      	movs	r2, #1
 8008128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008132:	431a      	orrs	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e02e      	b.n	800819a <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 ff97 	bl	8009070 <SD_InitCard>
 8008142:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00b      	beq.n	8008162 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008158:	431a      	orrs	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e01b      	b.n	800819a <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800816a:	4618      	mov	r0, r3
 800816c:	f002 f857 	bl	800a21e <SDMMC_CmdBlockLength>
 8008170:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00f      	beq.n	8008198 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a0a      	ldr	r2, [pc, #40]	@ (80081a8 <HAL_SD_InitCard+0xec>)
 800817e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008186:	431a      	orrs	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	e000      	b.n	800819a <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3728      	adds	r7, #40	@ 0x28
 800819e:	46bd      	mov	sp, r7
 80081a0:	bdb0      	pop	{r4, r5, r7, pc}
 80081a2:	bf00      	nop
 80081a4:	422580a0 	.word	0x422580a0
 80081a8:	004005ff 	.word	0x004005ff

080081ac <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b092      	sub	sp, #72	@ 0x48
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80081ba:	f7fb f8e9 	bl	8003390 <HAL_GetTick>
 80081be:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d107      	bne.n	80081de <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081d2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e1c5      	b.n	800856a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	f040 81b8 	bne.w	800855c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2200      	movs	r2, #0
 80081f0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80081f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	441a      	add	r2, r3
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d907      	bls.n	8008210 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008204:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	e1ac      	b.n	800856a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2203      	movs	r2, #3
 8008214:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2200      	movs	r2, #0
 800821e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008224:	2b01      	cmp	r3, #1
 8008226:	d002      	beq.n	800822e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822a:	025b      	lsls	r3, r3, #9
 800822c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800822e:	f04f 33ff 	mov.w	r3, #4294967295
 8008232:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	025b      	lsls	r3, r3, #9
 8008238:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800823a:	2390      	movs	r3, #144	@ 0x90
 800823c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800823e:	2302      	movs	r3, #2
 8008240:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008242:	2300      	movs	r3, #0
 8008244:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008246:	2301      	movs	r3, #1
 8008248:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f107 0214 	add.w	r2, r7, #20
 8008252:	4611      	mov	r1, r2
 8008254:	4618      	mov	r0, r3
 8008256:	f001 ffb6 	bl	800a1c6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	2b01      	cmp	r3, #1
 800825e:	d90a      	bls.n	8008276 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2202      	movs	r2, #2
 8008264:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800826c:	4618      	mov	r0, r3
 800826e:	f002 f81a 	bl	800a2a6 <SDMMC_CmdReadMultiBlock>
 8008272:	6478      	str	r0, [r7, #68]	@ 0x44
 8008274:	e009      	b.n	800828a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2201      	movs	r2, #1
 800827a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008282:	4618      	mov	r0, r3
 8008284:	f001 ffed 	bl	800a262 <SDMMC_CmdReadSingleBlock>
 8008288:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800828a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800828c:	2b00      	cmp	r3, #0
 800828e:	d012      	beq.n	80082b6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a7e      	ldr	r2, [pc, #504]	@ (8008490 <HAL_SD_ReadBlocks+0x2e4>)
 8008296:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800829c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800829e:	431a      	orrs	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e159      	b.n	800856a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80082ba:	e061      	b.n	8008380 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d03c      	beq.n	8008344 <HAL_SD_ReadBlocks+0x198>
 80082ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d039      	beq.n	8008344 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80082d0:	2300      	movs	r3, #0
 80082d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80082d4:	e033      	b.n	800833e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 feef 	bl	800a0be <SDIO_ReadFIFO>
 80082e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80082e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e4:	b2da      	uxtb	r2, r3
 80082e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082e8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80082ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082ec:	3301      	adds	r3, #1
 80082ee:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80082f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082f2:	3b01      	subs	r3, #1
 80082f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80082f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082f8:	0a1b      	lsrs	r3, r3, #8
 80082fa:	b2da      	uxtb	r2, r3
 80082fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082fe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008302:	3301      	adds	r3, #1
 8008304:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008308:	3b01      	subs	r3, #1
 800830a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800830c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800830e:	0c1b      	lsrs	r3, r3, #16
 8008310:	b2da      	uxtb	r2, r3
 8008312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008314:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008318:	3301      	adds	r3, #1
 800831a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800831c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800831e:	3b01      	subs	r3, #1
 8008320:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008324:	0e1b      	lsrs	r3, r3, #24
 8008326:	b2da      	uxtb	r2, r3
 8008328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800832c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800832e:	3301      	adds	r3, #1
 8008330:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008334:	3b01      	subs	r3, #1
 8008336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8008338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800833a:	3301      	adds	r3, #1
 800833c:	643b      	str	r3, [r7, #64]	@ 0x40
 800833e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008340:	2b07      	cmp	r3, #7
 8008342:	d9c8      	bls.n	80082d6 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008344:	f7fb f824 	bl	8003390 <HAL_GetTick>
 8008348:	4602      	mov	r2, r0
 800834a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834c:	1ad3      	subs	r3, r2, r3
 800834e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008350:	429a      	cmp	r2, r3
 8008352:	d902      	bls.n	800835a <HAL_SD_ReadBlocks+0x1ae>
 8008354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008356:	2b00      	cmp	r3, #0
 8008358:	d112      	bne.n	8008380 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a4c      	ldr	r2, [pc, #304]	@ (8008490 <HAL_SD_ReadBlocks+0x2e4>)
 8008360:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008366:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e0f4      	b.n	800856a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008386:	f240 332a 	movw	r3, #810	@ 0x32a
 800838a:	4013      	ands	r3, r2
 800838c:	2b00      	cmp	r3, #0
 800838e:	d095      	beq.n	80082bc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008396:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800839a:	2b00      	cmp	r3, #0
 800839c:	d022      	beq.n	80083e4 <HAL_SD_ReadBlocks+0x238>
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d91f      	bls.n	80083e4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083a8:	2b03      	cmp	r3, #3
 80083aa:	d01b      	beq.n	80083e4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f001 ffdf 	bl	800a374 <SDMMC_CmdStopTransfer>
 80083b6:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80083b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d012      	beq.n	80083e4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a33      	ldr	r2, [pc, #204]	@ (8008490 <HAL_SD_ReadBlocks+0x2e4>)
 80083c4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083cc:	431a      	orrs	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	e0c2      	b.n	800856a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083ea:	f003 0308 	and.w	r3, r3, #8
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d106      	bne.n	8008400 <HAL_SD_ReadBlocks+0x254>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d012      	beq.n	8008426 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a22      	ldr	r2, [pc, #136]	@ (8008490 <HAL_SD_ReadBlocks+0x2e4>)
 8008406:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800840c:	f043 0208 	orr.w	r2, r3, #8
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e0a1      	b.n	800856a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	2b00      	cmp	r3, #0
 8008432:	d012      	beq.n	800845a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a15      	ldr	r2, [pc, #84]	@ (8008490 <HAL_SD_ReadBlocks+0x2e4>)
 800843a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008440:	f043 0202 	orr.w	r2, r3, #2
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	e087      	b.n	800856a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008460:	f003 0320 	and.w	r3, r3, #32
 8008464:	2b00      	cmp	r3, #0
 8008466:	d064      	beq.n	8008532 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a08      	ldr	r2, [pc, #32]	@ (8008490 <HAL_SD_ReadBlocks+0x2e4>)
 800846e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008474:	f043 0220 	orr.w	r2, r3, #32
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e06d      	b.n	800856a <HAL_SD_ReadBlocks+0x3be>
 800848e:	bf00      	nop
 8008490:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4618      	mov	r0, r3
 800849a:	f001 fe10 	bl	800a0be <SDIO_ReadFIFO>
 800849e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80084a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80084a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084aa:	3301      	adds	r3, #1
 80084ac:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80084ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b0:	3b01      	subs	r3, #1
 80084b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80084b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b6:	0a1b      	lsrs	r3, r3, #8
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084bc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80084be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c0:	3301      	adds	r3, #1
 80084c2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80084c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084c6:	3b01      	subs	r3, #1
 80084c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80084ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084cc:	0c1b      	lsrs	r3, r3, #16
 80084ce:	b2da      	uxtb	r2, r3
 80084d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80084d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d6:	3301      	adds	r3, #1
 80084d8:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80084da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084dc:	3b01      	subs	r3, #1
 80084de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80084e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e2:	0e1b      	lsrs	r3, r3, #24
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80084ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ec:	3301      	adds	r3, #1
 80084ee:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80084f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f2:	3b01      	subs	r3, #1
 80084f4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80084f6:	f7fa ff4b 	bl	8003390 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084fe:	1ad3      	subs	r3, r2, r3
 8008500:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008502:	429a      	cmp	r2, r3
 8008504:	d902      	bls.n	800850c <HAL_SD_ReadBlocks+0x360>
 8008506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008508:	2b00      	cmp	r3, #0
 800850a:	d112      	bne.n	8008532 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a18      	ldr	r2, [pc, #96]	@ (8008574 <HAL_SD_ReadBlocks+0x3c8>)
 8008512:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008518:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2201      	movs	r2, #1
 8008524:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2200      	movs	r2, #0
 800852c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e01b      	b.n	800856a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d002      	beq.n	8008546 <HAL_SD_ReadBlocks+0x39a>
 8008540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1a6      	bne.n	8008494 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800854e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	e006      	b.n	800856a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008560:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
  }
}
 800856a:	4618      	mov	r0, r3
 800856c:	3748      	adds	r7, #72	@ 0x48
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	004005ff 	.word	0x004005ff

08008578 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b092      	sub	sp, #72	@ 0x48
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008586:	f7fa ff03 	bl	8003390 <HAL_GetTick>
 800858a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d107      	bne.n	80085aa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e16d      	b.n	8008886 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	f040 8160 	bne.w	8008878 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	441a      	add	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d907      	bls.n	80085dc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e154      	b.n	8008886 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2203      	movs	r2, #3
 80085e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	2200      	movs	r2, #0
 80085ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d002      	beq.n	80085fa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80085f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f6:	025b      	lsls	r3, r3, #9
 80085f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80085fa:	f04f 33ff 	mov.w	r3, #4294967295
 80085fe:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	025b      	lsls	r3, r3, #9
 8008604:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008606:	2390      	movs	r3, #144	@ 0x90
 8008608:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800860a:	2300      	movs	r3, #0
 800860c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800860e:	2300      	movs	r3, #0
 8008610:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008612:	2301      	movs	r3, #1
 8008614:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f107 0218 	add.w	r2, r7, #24
 800861e:	4611      	mov	r1, r2
 8008620:	4618      	mov	r0, r3
 8008622:	f001 fdd0 	bl	800a1c6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b01      	cmp	r3, #1
 800862a:	d90a      	bls.n	8008642 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2220      	movs	r2, #32
 8008630:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008638:	4618      	mov	r0, r3
 800863a:	f001 fe78 	bl	800a32e <SDMMC_CmdWriteMultiBlock>
 800863e:	6478      	str	r0, [r7, #68]	@ 0x44
 8008640:	e009      	b.n	8008656 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2210      	movs	r2, #16
 8008646:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800864e:	4618      	mov	r0, r3
 8008650:	f001 fe4b 	bl	800a2ea <SDMMC_CmdWriteSingleBlock>
 8008654:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008656:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008658:	2b00      	cmp	r3, #0
 800865a:	d012      	beq.n	8008682 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a8b      	ldr	r2, [pc, #556]	@ (8008890 <HAL_SD_WriteBlocks+0x318>)
 8008662:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800866a:	431a      	orrs	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e101      	b.n	8008886 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008682:	69fb      	ldr	r3, [r7, #28]
 8008684:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008686:	e065      	b.n	8008754 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800868e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008692:	2b00      	cmp	r3, #0
 8008694:	d040      	beq.n	8008718 <HAL_SD_WriteBlocks+0x1a0>
 8008696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008698:	2b00      	cmp	r3, #0
 800869a:	d03d      	beq.n	8008718 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800869c:	2300      	movs	r3, #0
 800869e:	643b      	str	r3, [r7, #64]	@ 0x40
 80086a0:	e037      	b.n	8008712 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80086a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80086a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086aa:	3301      	adds	r3, #1
 80086ac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80086ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086b0:	3b01      	subs	r3, #1
 80086b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80086b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	021a      	lsls	r2, r3, #8
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	4313      	orrs	r3, r2
 80086be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80086c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c2:	3301      	adds	r3, #1
 80086c4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80086c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086c8:	3b01      	subs	r3, #1
 80086ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80086cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ce:	781b      	ldrb	r3, [r3, #0]
 80086d0:	041a      	lsls	r2, r3, #16
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80086d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086da:	3301      	adds	r3, #1
 80086dc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80086de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086e0:	3b01      	subs	r3, #1
 80086e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80086e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	061a      	lsls	r2, r3, #24
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	4313      	orrs	r3, r2
 80086ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80086f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086f2:	3301      	adds	r3, #1
 80086f4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80086f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086f8:	3b01      	subs	r3, #1
 80086fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f107 0214 	add.w	r2, r7, #20
 8008704:	4611      	mov	r1, r2
 8008706:	4618      	mov	r0, r3
 8008708:	f001 fce6 	bl	800a0d8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800870c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800870e:	3301      	adds	r3, #1
 8008710:	643b      	str	r3, [r7, #64]	@ 0x40
 8008712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008714:	2b07      	cmp	r3, #7
 8008716:	d9c4      	bls.n	80086a2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008718:	f7fa fe3a 	bl	8003390 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008724:	429a      	cmp	r2, r3
 8008726:	d902      	bls.n	800872e <HAL_SD_WriteBlocks+0x1b6>
 8008728:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800872a:	2b00      	cmp	r3, #0
 800872c:	d112      	bne.n	8008754 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a57      	ldr	r2, [pc, #348]	@ (8008890 <HAL_SD_WriteBlocks+0x318>)
 8008734:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800873a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800873c:	431a      	orrs	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e098      	b.n	8008886 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800875a:	f240 331a 	movw	r3, #794	@ 0x31a
 800875e:	4013      	ands	r3, r2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d091      	beq.n	8008688 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800876a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800876e:	2b00      	cmp	r3, #0
 8008770:	d022      	beq.n	80087b8 <HAL_SD_WriteBlocks+0x240>
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d91f      	bls.n	80087b8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800877c:	2b03      	cmp	r3, #3
 800877e:	d01b      	beq.n	80087b8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4618      	mov	r0, r3
 8008786:	f001 fdf5 	bl	800a374 <SDMMC_CmdStopTransfer>
 800878a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800878c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800878e:	2b00      	cmp	r3, #0
 8008790:	d012      	beq.n	80087b8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a3e      	ldr	r2, [pc, #248]	@ (8008890 <HAL_SD_WriteBlocks+0x318>)
 8008798:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800879e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087a0:	431a      	orrs	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e066      	b.n	8008886 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087be:	f003 0308 	and.w	r3, r3, #8
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d106      	bne.n	80087d4 <HAL_SD_WriteBlocks+0x25c>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d012      	beq.n	80087fa <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a2d      	ldr	r2, [pc, #180]	@ (8008890 <HAL_SD_WriteBlocks+0x318>)
 80087da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087e0:	f043 0208 	orr.w	r2, r3, #8
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e045      	b.n	8008886 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008800:	f003 0302 	and.w	r3, r3, #2
 8008804:	2b00      	cmp	r3, #0
 8008806:	d012      	beq.n	800882e <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a20      	ldr	r2, [pc, #128]	@ (8008890 <HAL_SD_WriteBlocks+0x318>)
 800880e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008814:	f043 0202 	orr.w	r2, r3, #2
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e02b      	b.n	8008886 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008834:	f003 0310 	and.w	r3, r3, #16
 8008838:	2b00      	cmp	r3, #0
 800883a:	d012      	beq.n	8008862 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a13      	ldr	r2, [pc, #76]	@ (8008890 <HAL_SD_WriteBlocks+0x318>)
 8008842:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008848:	f043 0210 	orr.w	r2, r3, #16
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800885e:	2301      	movs	r3, #1
 8008860:	e011      	b.n	8008886 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f240 523a 	movw	r2, #1338	@ 0x53a
 800886a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	e006      	b.n	8008886 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800887c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008884:	2301      	movs	r3, #1
  }
}
 8008886:	4618      	mov	r0, r3
 8008888:	3748      	adds	r7, #72	@ 0x48
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	004005ff 	.word	0x004005ff

08008894 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088a0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d008      	beq.n	80088c2 <HAL_SD_IRQHandler+0x2e>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d003      	beq.n	80088c2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fd5c 	bl	8009378 <SD_Read_IT>
 80088c0:	e165      	b.n	8008b8e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 808f 	beq.w	80089f0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80088da:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	6812      	ldr	r2, [r2, #0]
 80088e6:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80088ea:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80088ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f022 0201 	bic.w	r2, r2, #1
 80088fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f003 0308 	and.w	r3, r3, #8
 8008906:	2b00      	cmp	r3, #0
 8008908:	d039      	beq.n	800897e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d104      	bne.n	800891e <HAL_SD_IRQHandler+0x8a>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f003 0320 	and.w	r3, r3, #32
 800891a:	2b00      	cmp	r3, #0
 800891c:	d011      	beq.n	8008942 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4618      	mov	r0, r3
 8008924:	f001 fd26 	bl	800a374 <SDMMC_CmdStopTransfer>
 8008928:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d008      	beq.n	8008942 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	431a      	orrs	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f92f 	bl	8008ba0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f240 523a 	movw	r2, #1338	@ 0x53a
 800894a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	2b00      	cmp	r3, #0
 8008962:	d104      	bne.n	800896e <HAL_SD_IRQHandler+0xda>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f002 f94c 	bl	800ac0c <HAL_SD_RxCpltCallback>
 8008974:	e10b      	b.n	8008b8e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f002 f93e 	bl	800abf8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800897c:	e107      	b.n	8008b8e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 8102 	beq.w	8008b8e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f003 0320 	and.w	r3, r3, #32
 8008990:	2b00      	cmp	r3, #0
 8008992:	d011      	beq.n	80089b8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4618      	mov	r0, r3
 800899a:	f001 fceb 	bl	800a374 <SDMMC_CmdStopTransfer>
 800899e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d008      	beq.n	80089b8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	431a      	orrs	r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f8f4 	bl	8008ba0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f040 80e5 	bne.w	8008b8e <HAL_SD_IRQHandler+0x2fa>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	f040 80df 	bne.w	8008b8e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f022 0208 	bic.w	r2, r2, #8
 80089de:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f002 f905 	bl	800abf8 <HAL_SD_TxCpltCallback>
}
 80089ee:	e0ce      	b.n	8008b8e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d008      	beq.n	8008a10 <HAL_SD_IRQHandler+0x17c>
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f003 0308 	and.w	r3, r3, #8
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d003      	beq.n	8008a10 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fd06 	bl	800941a <SD_Write_IT>
 8008a0e:	e0be      	b.n	8008b8e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a16:	f240 233a 	movw	r3, #570	@ 0x23a
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	f000 80b6 	beq.w	8008b8e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a28:	f003 0302 	and.w	r3, r3, #2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a34:	f043 0202 	orr.w	r2, r3, #2
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a42:	f003 0308 	and.w	r3, r3, #8
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d005      	beq.n	8008a56 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a4e:	f043 0208 	orr.w	r2, r3, #8
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a5c:	f003 0320 	and.w	r3, r3, #32
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d005      	beq.n	8008a70 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a68:	f043 0220 	orr.w	r2, r3, #32
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a76:	f003 0310 	and.w	r3, r3, #16
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d005      	beq.n	8008a8a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a82:	f043 0210 	orr.w	r2, r3, #16
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d005      	beq.n	8008aa4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a9c:	f043 0208 	orr.w	r2, r3, #8
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f240 723a 	movw	r2, #1850	@ 0x73a
 8008aac:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	6812      	ldr	r2, [r2, #0]
 8008ab8:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8008abc:	f023 0302 	bic.w	r3, r3, #2
 8008ac0:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f001 fc54 	bl	800a374 <SDMMC_CmdStopTransfer>
 8008acc:	4602      	mov	r2, r0
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f003 0308 	and.w	r3, r3, #8
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d00a      	beq.n	8008af8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 f855 	bl	8008ba0 <HAL_SD_ErrorCallback>
}
 8008af6:	e04a      	b.n	8008b8e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d045      	beq.n	8008b8e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f003 0310 	and.w	r3, r3, #16
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d104      	bne.n	8008b16 <HAL_SD_IRQHandler+0x282>
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d011      	beq.n	8008b3a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8008b98 <HAL_SD_IRQHandler+0x304>)
 8008b1c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7fc f80d 	bl	8004b42 <HAL_DMA_Abort_IT>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d02f      	beq.n	8008b8e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b32:	4618      	mov	r0, r3
 8008b34:	f000 fa2e 	bl	8008f94 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008b38:	e029      	b.n	8008b8e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d104      	bne.n	8008b4e <HAL_SD_IRQHandler+0x2ba>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f003 0302 	and.w	r3, r3, #2
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d011      	beq.n	8008b72 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b52:	4a12      	ldr	r2, [pc, #72]	@ (8008b9c <HAL_SD_IRQHandler+0x308>)
 8008b54:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fb fff1 	bl	8004b42 <HAL_DMA_Abort_IT>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d013      	beq.n	8008b8e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 fa49 	bl	8009002 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008b70:	e00d      	b.n	8008b8e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2200      	movs	r2, #0
 8008b84:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f002 f82c 	bl	800abe4 <HAL_SD_AbortCallback>
}
 8008b8c:	e7ff      	b.n	8008b8e <HAL_SD_IRQHandler+0x2fa>
 8008b8e:	bf00      	nop
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	08008f95 	.word	0x08008f95
 8008b9c:	08009003 	.word	0x08009003

08008ba0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008ba8:	bf00      	nop
 8008baa:	370c      	adds	r7, #12
 8008bac:	46bd      	mov	sp, r7
 8008bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb2:	4770      	bx	lr

08008bb4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bc2:	0f9b      	lsrs	r3, r3, #30
 8008bc4:	b2da      	uxtb	r2, r3
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bce:	0e9b      	lsrs	r3, r3, #26
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	f003 030f 	and.w	r3, r3, #15
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008be0:	0e1b      	lsrs	r3, r3, #24
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	f003 0303 	and.w	r3, r3, #3
 8008be8:	b2da      	uxtb	r2, r3
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bf2:	0c1b      	lsrs	r3, r3, #16
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008bfe:	0a1b      	lsrs	r3, r3, #8
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c14:	0d1b      	lsrs	r3, r3, #20
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c20:	0c1b      	lsrs	r3, r3, #16
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	f003 030f 	and.w	r3, r3, #15
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c32:	0bdb      	lsrs	r3, r3, #15
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	b2da      	uxtb	r2, r3
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c44:	0b9b      	lsrs	r3, r3, #14
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	f003 0301 	and.w	r3, r3, #1
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c56:	0b5b      	lsrs	r3, r3, #13
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	f003 0301 	and.w	r3, r3, #1
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c68:	0b1b      	lsrs	r3, r3, #12
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	f003 0301 	and.w	r3, r3, #1
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d163      	bne.n	8008d4c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008c88:	009a      	lsls	r2, r3, #2
 8008c8a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008c8e:	4013      	ands	r3, r2
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008c94:	0f92      	lsrs	r2, r2, #30
 8008c96:	431a      	orrs	r2, r3
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ca0:	0edb      	lsrs	r3, r3, #27
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	f003 0307 	and.w	r3, r3, #7
 8008ca8:	b2da      	uxtb	r2, r3
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cb2:	0e1b      	lsrs	r3, r3, #24
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	b2da      	uxtb	r2, r3
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cc4:	0d5b      	lsrs	r3, r3, #21
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	f003 0307 	and.w	r3, r3, #7
 8008ccc:	b2da      	uxtb	r2, r3
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cd6:	0c9b      	lsrs	r3, r3, #18
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	f003 0307 	and.w	r3, r3, #7
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ce8:	0bdb      	lsrs	r3, r3, #15
 8008cea:	b2db      	uxtb	r3, r3
 8008cec:	f003 0307 	and.w	r3, r3, #7
 8008cf0:	b2da      	uxtb	r2, r3
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	1c5a      	adds	r2, r3, #1
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	7e1b      	ldrb	r3, [r3, #24]
 8008d04:	b2db      	uxtb	r3, r3
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	3302      	adds	r3, #2
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008d16:	fb03 f202 	mul.w	r2, r3, r2
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	7a1b      	ldrb	r3, [r3, #8]
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	f003 030f 	and.w	r3, r3, #15
 8008d28:	2201      	movs	r2, #1
 8008d2a:	409a      	lsls	r2, r3
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008d38:	0a52      	lsrs	r2, r2, #9
 8008d3a:	fb03 f202 	mul.w	r2, r3, r2
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d48:	661a      	str	r2, [r3, #96]	@ 0x60
 8008d4a:	e031      	b.n	8008db0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d11d      	bne.n	8008d90 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d58:	041b      	lsls	r3, r3, #16
 8008d5a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d62:	0c1b      	lsrs	r3, r3, #16
 8008d64:	431a      	orrs	r2, r3
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	029a      	lsls	r2, r3, #10
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d84:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	661a      	str	r2, [r3, #96]	@ 0x60
 8008d8e:	e00f      	b.n	8008db0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a58      	ldr	r2, [pc, #352]	@ (8008ef8 <HAL_SD_GetCardCSD+0x344>)
 8008d96:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008dac:	2301      	movs	r3, #1
 8008dae:	e09d      	b.n	8008eec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008db4:	0b9b      	lsrs	r3, r3, #14
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dc6:	09db      	lsrs	r3, r3, #7
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dce:	b2da      	uxtb	r2, r3
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dde:	b2da      	uxtb	r2, r3
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008de8:	0fdb      	lsrs	r3, r3, #31
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008df4:	0f5b      	lsrs	r3, r3, #29
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	f003 0303 	and.w	r3, r3, #3
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e06:	0e9b      	lsrs	r3, r3, #26
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	f003 0307 	and.w	r3, r3, #7
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e18:	0d9b      	lsrs	r3, r3, #22
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	f003 030f 	and.w	r3, r3, #15
 8008e20:	b2da      	uxtb	r2, r3
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e2a:	0d5b      	lsrs	r3, r3, #21
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e46:	0c1b      	lsrs	r3, r3, #16
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	f003 0301 	and.w	r3, r3, #1
 8008e4e:	b2da      	uxtb	r2, r3
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e5a:	0bdb      	lsrs	r3, r3, #15
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e6e:	0b9b      	lsrs	r3, r3, #14
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	f003 0301 	and.w	r3, r3, #1
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e82:	0b5b      	lsrs	r3, r3, #13
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	f003 0301 	and.w	r3, r3, #1
 8008e8a:	b2da      	uxtb	r2, r3
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e96:	0b1b      	lsrs	r3, r3, #12
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	f003 0301 	and.w	r3, r3, #1
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008eaa:	0a9b      	lsrs	r3, r3, #10
 8008eac:	b2db      	uxtb	r3, r3
 8008eae:	f003 0303 	and.w	r3, r3, #3
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ebe:	0a1b      	lsrs	r3, r3, #8
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	f003 0303 	and.w	r3, r3, #3
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ed2:	085b      	lsrs	r3, r3, #1
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	004005ff 	.word	0x004005ff

08008efc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008f60:	f107 030c 	add.w	r3, r7, #12
 8008f64:	4619      	mov	r1, r3
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f9de 	bl	8009328 <SD_SendStatus>
 8008f6c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d005      	beq.n	8008f80 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	0a5b      	lsrs	r3, r3, #9
 8008f84:	f003 030f 	and.w	r3, r3, #15
 8008f88:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008f8a:	693b      	ldr	r3, [r7, #16]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fa0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008faa:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008fac:	68f8      	ldr	r0, [r7, #12]
 8008fae:	f7ff ffd1 	bl	8008f54 <HAL_SD_GetCardState>
 8008fb2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2b06      	cmp	r3, #6
 8008fc6:	d002      	beq.n	8008fce <SD_DMATxAbort+0x3a>
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	2b05      	cmp	r3, #5
 8008fcc:	d10a      	bne.n	8008fe4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f001 f9ce 	bl	800a374 <SDMMC_CmdStopTransfer>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fde:	431a      	orrs	r2, r3
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d103      	bne.n	8008ff4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008fec:	68f8      	ldr	r0, [r7, #12]
 8008fee:	f001 fdf9 	bl	800abe4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008ff2:	e002      	b.n	8008ffa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f7ff fdd3 	bl	8008ba0 <HAL_SD_ErrorCallback>
}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b084      	sub	sp, #16
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800900e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009018:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800901a:	68f8      	ldr	r0, [r7, #12]
 800901c:	f7ff ff9a 	bl	8008f54 <HAL_SD_GetCardState>
 8009020:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	2b06      	cmp	r3, #6
 8009034:	d002      	beq.n	800903c <SD_DMARxAbort+0x3a>
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	2b05      	cmp	r3, #5
 800903a:	d10a      	bne.n	8009052 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4618      	mov	r0, r3
 8009042:	f001 f997 	bl	800a374 <SDMMC_CmdStopTransfer>
 8009046:	4602      	mov	r2, r0
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800904c:	431a      	orrs	r2, r3
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009056:	2b00      	cmp	r3, #0
 8009058:	d103      	bne.n	8009062 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	f001 fdc2 	bl	800abe4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009060:	e002      	b.n	8009068 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	f7ff fd9c 	bl	8008ba0 <HAL_SD_ErrorCallback>
}
 8009068:	bf00      	nop
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009070:	b5b0      	push	{r4, r5, r7, lr}
 8009072:	b094      	sub	sp, #80	@ 0x50
 8009074:	af04      	add	r7, sp, #16
 8009076:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009078:	2301      	movs	r3, #1
 800907a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4618      	mov	r0, r3
 8009082:	f001 f848 	bl	800a116 <SDIO_GetPowerState>
 8009086:	4603      	mov	r3, r0
 8009088:	2b00      	cmp	r3, #0
 800908a:	d102      	bne.n	8009092 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800908c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009090:	e0b8      	b.n	8009204 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009096:	2b03      	cmp	r3, #3
 8009098:	d02f      	beq.n	80090fa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4618      	mov	r0, r3
 80090a0:	f001 fa2f 	bl	800a502 <SDMMC_CmdSendCID>
 80090a4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d001      	beq.n	80090b0 <SD_InitCard+0x40>
    {
      return errorstate;
 80090ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ae:	e0a9      	b.n	8009204 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2100      	movs	r1, #0
 80090b6:	4618      	mov	r0, r3
 80090b8:	f001 f872 	bl	800a1a0 <SDIO_GetResponse>
 80090bc:	4602      	mov	r2, r0
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2104      	movs	r1, #4
 80090c8:	4618      	mov	r0, r3
 80090ca:	f001 f869 	bl	800a1a0 <SDIO_GetResponse>
 80090ce:	4602      	mov	r2, r0
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2108      	movs	r1, #8
 80090da:	4618      	mov	r0, r3
 80090dc:	f001 f860 	bl	800a1a0 <SDIO_GetResponse>
 80090e0:	4602      	mov	r2, r0
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	210c      	movs	r1, #12
 80090ec:	4618      	mov	r0, r3
 80090ee:	f001 f857 	bl	800a1a0 <SDIO_GetResponse>
 80090f2:	4602      	mov	r2, r0
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090fe:	2b03      	cmp	r3, #3
 8009100:	d00d      	beq.n	800911e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f107 020e 	add.w	r2, r7, #14
 800910a:	4611      	mov	r1, r2
 800910c:	4618      	mov	r0, r3
 800910e:	f001 fa35 	bl	800a57c <SDMMC_CmdSetRelAdd>
 8009112:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009116:	2b00      	cmp	r3, #0
 8009118:	d001      	beq.n	800911e <SD_InitCard+0xae>
    {
      return errorstate;
 800911a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800911c:	e072      	b.n	8009204 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009122:	2b03      	cmp	r3, #3
 8009124:	d036      	beq.n	8009194 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009126:	89fb      	ldrh	r3, [r7, #14]
 8009128:	461a      	mov	r2, r3
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009136:	041b      	lsls	r3, r3, #16
 8009138:	4619      	mov	r1, r3
 800913a:	4610      	mov	r0, r2
 800913c:	f001 f9ff 	bl	800a53e <SDMMC_CmdSendCSD>
 8009140:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009144:	2b00      	cmp	r3, #0
 8009146:	d001      	beq.n	800914c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800914a:	e05b      	b.n	8009204 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2100      	movs	r1, #0
 8009152:	4618      	mov	r0, r3
 8009154:	f001 f824 	bl	800a1a0 <SDIO_GetResponse>
 8009158:	4602      	mov	r2, r0
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2104      	movs	r1, #4
 8009164:	4618      	mov	r0, r3
 8009166:	f001 f81b 	bl	800a1a0 <SDIO_GetResponse>
 800916a:	4602      	mov	r2, r0
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2108      	movs	r1, #8
 8009176:	4618      	mov	r0, r3
 8009178:	f001 f812 	bl	800a1a0 <SDIO_GetResponse>
 800917c:	4602      	mov	r2, r0
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	210c      	movs	r1, #12
 8009188:	4618      	mov	r0, r3
 800918a:	f001 f809 	bl	800a1a0 <SDIO_GetResponse>
 800918e:	4602      	mov	r2, r0
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2104      	movs	r1, #4
 800919a:	4618      	mov	r0, r3
 800919c:	f001 f800 	bl	800a1a0 <SDIO_GetResponse>
 80091a0:	4603      	mov	r3, r0
 80091a2:	0d1a      	lsrs	r2, r3, #20
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80091a8:	f107 0310 	add.w	r3, r7, #16
 80091ac:	4619      	mov	r1, r3
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f7ff fd00 	bl	8008bb4 <HAL_SD_GetCardCSD>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d002      	beq.n	80091c0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80091be:	e021      	b.n	8009204 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6819      	ldr	r1, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091c8:	041b      	lsls	r3, r3, #16
 80091ca:	2200      	movs	r2, #0
 80091cc:	461c      	mov	r4, r3
 80091ce:	4615      	mov	r5, r2
 80091d0:	4622      	mov	r2, r4
 80091d2:	462b      	mov	r3, r5
 80091d4:	4608      	mov	r0, r1
 80091d6:	f001 f8ef 	bl	800a3b8 <SDMMC_CmdSelDesel>
 80091da:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80091dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d001      	beq.n	80091e6 <SD_InitCard+0x176>
  {
    return errorstate;
 80091e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091e4:	e00e      	b.n	8009204 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681d      	ldr	r5, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	466c      	mov	r4, sp
 80091ee:	f103 0210 	add.w	r2, r3, #16
 80091f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80091f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80091f8:	3304      	adds	r3, #4
 80091fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80091fc:	4628      	mov	r0, r5
 80091fe:	f000 ff33 	bl	800a068 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3740      	adds	r7, #64	@ 0x40
 8009208:	46bd      	mov	sp, r7
 800920a:	bdb0      	pop	{r4, r5, r7, pc}

0800920c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009214:	2300      	movs	r3, #0
 8009216:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	617b      	str	r3, [r7, #20]
 800921c:	2300      	movs	r3, #0
 800921e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4618      	mov	r0, r3
 8009226:	f001 f8ea 	bl	800a3fe <SDMMC_CmdGoIdleState>
 800922a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d001      	beq.n	8009236 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	e072      	b.n	800931c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4618      	mov	r0, r3
 800923c:	f001 f8fd 	bl	800a43a <SDMMC_CmdOperCond>
 8009240:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00d      	beq.n	8009264 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4618      	mov	r0, r3
 8009254:	f001 f8d3 	bl	800a3fe <SDMMC_CmdGoIdleState>
 8009258:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d004      	beq.n	800926a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	e05b      	b.n	800931c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800926e:	2b01      	cmp	r3, #1
 8009270:	d137      	bne.n	80092e2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	2100      	movs	r1, #0
 8009278:	4618      	mov	r0, r3
 800927a:	f001 f8fd 	bl	800a478 <SDMMC_CmdAppCommand>
 800927e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d02d      	beq.n	80092e2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009286:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800928a:	e047      	b.n	800931c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	2100      	movs	r1, #0
 8009292:	4618      	mov	r0, r3
 8009294:	f001 f8f0 	bl	800a478 <SDMMC_CmdAppCommand>
 8009298:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d001      	beq.n	80092a4 <SD_PowerON+0x98>
    {
      return errorstate;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	e03b      	b.n	800931c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	491e      	ldr	r1, [pc, #120]	@ (8009324 <SD_PowerON+0x118>)
 80092aa:	4618      	mov	r0, r3
 80092ac:	f001 f906 	bl	800a4bc <SDMMC_CmdAppOperCommand>
 80092b0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d002      	beq.n	80092be <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80092b8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80092bc:	e02e      	b.n	800931c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2100      	movs	r1, #0
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 ff6b 	bl	800a1a0 <SDIO_GetResponse>
 80092ca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	0fdb      	lsrs	r3, r3, #31
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d101      	bne.n	80092d8 <SD_PowerON+0xcc>
 80092d4:	2301      	movs	r3, #1
 80092d6:	e000      	b.n	80092da <SD_PowerON+0xce>
 80092d8:	2300      	movs	r3, #0
 80092da:	613b      	str	r3, [r7, #16]

    count++;
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	3301      	adds	r3, #1
 80092e0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d802      	bhi.n	80092f2 <SD_PowerON+0xe6>
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0cc      	beq.n	800928c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d902      	bls.n	8009302 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80092fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009300:	e00c      	b.n	800931c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d003      	beq.n	8009314 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	645a      	str	r2, [r3, #68]	@ 0x44
 8009312:	e002      	b.n	800931a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	c1100000 	.word	0xc1100000

08009328 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b084      	sub	sp, #16
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d102      	bne.n	800933e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009338:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800933c:	e018      	b.n	8009370 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009346:	041b      	lsls	r3, r3, #16
 8009348:	4619      	mov	r1, r3
 800934a:	4610      	mov	r0, r2
 800934c:	f001 f937 	bl	800a5be <SDMMC_CmdSendStatus>
 8009350:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	e009      	b.n	8009370 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2100      	movs	r1, #0
 8009362:	4618      	mov	r0, r3
 8009364:	f000 ff1c 	bl	800a1a0 <SDIO_GetResponse>
 8009368:	4602      	mov	r2, r0
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009384:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800938a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d03f      	beq.n	8009412 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009392:	2300      	movs	r3, #0
 8009394:	617b      	str	r3, [r7, #20]
 8009396:	e033      	b.n	8009400 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4618      	mov	r0, r3
 800939e:	f000 fe8e 	bl	800a0be <SDIO_ReadFIFO>
 80093a2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	b2da      	uxtb	r2, r3
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	3301      	adds	r3, #1
 80093b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	3b01      	subs	r3, #1
 80093b6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	0a1b      	lsrs	r3, r3, #8
 80093bc:	b2da      	uxtb	r2, r3
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	3301      	adds	r3, #1
 80093c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	3b01      	subs	r3, #1
 80093cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	0c1b      	lsrs	r3, r3, #16
 80093d2:	b2da      	uxtb	r2, r3
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3301      	adds	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	0e1b      	lsrs	r3, r3, #24
 80093e8:	b2da      	uxtb	r2, r3
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	3301      	adds	r3, #1
 80093f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	3b01      	subs	r3, #1
 80093f8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	3301      	adds	r3, #1
 80093fe:	617b      	str	r3, [r7, #20]
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	2b07      	cmp	r3, #7
 8009404:	d9c8      	bls.n	8009398 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	693a      	ldr	r2, [r7, #16]
 8009410:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8009412:	bf00      	nop
 8009414:	3718      	adds	r7, #24
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800941a:	b580      	push	{r7, lr}
 800941c:	b086      	sub	sp, #24
 800941e:	af00      	add	r7, sp, #0
 8009420:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a1b      	ldr	r3, [r3, #32]
 8009426:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800942c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d043      	beq.n	80094bc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009434:	2300      	movs	r3, #0
 8009436:	617b      	str	r3, [r7, #20]
 8009438:	e037      	b.n	80094aa <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	3301      	adds	r3, #1
 8009444:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	3b01      	subs	r3, #1
 800944a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	021a      	lsls	r2, r3, #8
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	4313      	orrs	r3, r2
 8009456:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3301      	adds	r3, #1
 800945c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	3b01      	subs	r3, #1
 8009462:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	041a      	lsls	r2, r3, #16
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	4313      	orrs	r3, r2
 800946e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3301      	adds	r3, #1
 8009474:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	3b01      	subs	r3, #1
 800947a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	061a      	lsls	r2, r3, #24
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	4313      	orrs	r3, r2
 8009486:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	3301      	adds	r3, #1
 800948c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800948e:	693b      	ldr	r3, [r7, #16]
 8009490:	3b01      	subs	r3, #1
 8009492:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f107 0208 	add.w	r2, r7, #8
 800949c:	4611      	mov	r1, r2
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fe1a 	bl	800a0d8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	3301      	adds	r3, #1
 80094a8:	617b      	str	r3, [r7, #20]
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	2b07      	cmp	r3, #7
 80094ae:	d9c4      	bls.n	800943a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80094bc:	bf00      	nop
 80094be:	3718      	adds	r7, #24
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d101      	bne.n	80094d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e07b      	b.n	80095ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d108      	bne.n	80094f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094e6:	d009      	beq.n	80094fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	61da      	str	r2, [r3, #28]
 80094ee:	e005      	b.n	80094fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2200      	movs	r2, #0
 80094fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b00      	cmp	r3, #0
 800950c:	d106      	bne.n	800951c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7f9 fd0e 	bl	8002f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2202      	movs	r2, #2
 8009520:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009532:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	689b      	ldr	r3, [r3, #8]
 8009540:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009544:	431a      	orrs	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800954e:	431a      	orrs	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	f003 0302 	and.w	r3, r3, #2
 8009558:	431a      	orrs	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	695b      	ldr	r3, [r3, #20]
 800955e:	f003 0301 	and.w	r3, r3, #1
 8009562:	431a      	orrs	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800956c:	431a      	orrs	r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	69db      	ldr	r3, [r3, #28]
 8009572:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009576:	431a      	orrs	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a1b      	ldr	r3, [r3, #32]
 800957c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009580:	ea42 0103 	orr.w	r1, r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009588:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	0c1b      	lsrs	r3, r3, #16
 800959a:	f003 0104 	and.w	r1, r3, #4
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a2:	f003 0210 	and.w	r2, r3, #16
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	430a      	orrs	r2, r1
 80095ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	69da      	ldr	r2, [r3, #28]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80095bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80095cc:	2300      	movs	r3, #0
}
 80095ce:	4618      	mov	r0, r3
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b088      	sub	sp, #32
 80095da:	af00      	add	r7, sp, #0
 80095dc:	60f8      	str	r0, [r7, #12]
 80095de:	60b9      	str	r1, [r7, #8]
 80095e0:	603b      	str	r3, [r7, #0]
 80095e2:	4613      	mov	r3, r2
 80095e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095e6:	f7f9 fed3 	bl	8003390 <HAL_GetTick>
 80095ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80095ec:	88fb      	ldrh	r3, [r7, #6]
 80095ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80095f6:	b2db      	uxtb	r3, r3
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d001      	beq.n	8009600 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80095fc:	2302      	movs	r3, #2
 80095fe:	e12a      	b.n	8009856 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d002      	beq.n	800960c <HAL_SPI_Transmit+0x36>
 8009606:	88fb      	ldrh	r3, [r7, #6]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d101      	bne.n	8009610 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	e122      	b.n	8009856 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009616:	2b01      	cmp	r3, #1
 8009618:	d101      	bne.n	800961e <HAL_SPI_Transmit+0x48>
 800961a:	2302      	movs	r3, #2
 800961c:	e11b      	b.n	8009856 <HAL_SPI_Transmit+0x280>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2203      	movs	r2, #3
 800962a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	88fa      	ldrh	r2, [r7, #6]
 800963e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	88fa      	ldrh	r2, [r7, #6]
 8009644:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	2200      	movs	r2, #0
 800965c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800966c:	d10f      	bne.n	800968e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800967c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800968c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009698:	2b40      	cmp	r3, #64	@ 0x40
 800969a:	d007      	beq.n	80096ac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096b4:	d152      	bne.n	800975c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d002      	beq.n	80096c4 <HAL_SPI_Transmit+0xee>
 80096be:	8b7b      	ldrh	r3, [r7, #26]
 80096c0:	2b01      	cmp	r3, #1
 80096c2:	d145      	bne.n	8009750 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c8:	881a      	ldrh	r2, [r3, #0]
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096d4:	1c9a      	adds	r2, r3, #2
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80096de:	b29b      	uxth	r3, r3
 80096e0:	3b01      	subs	r3, #1
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80096e8:	e032      	b.n	8009750 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	f003 0302 	and.w	r3, r3, #2
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	d112      	bne.n	800971e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096fc:	881a      	ldrh	r2, [r3, #0]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009708:	1c9a      	adds	r2, r3, #2
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009712:	b29b      	uxth	r3, r3
 8009714:	3b01      	subs	r3, #1
 8009716:	b29a      	uxth	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800971c:	e018      	b.n	8009750 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800971e:	f7f9 fe37 	bl	8003390 <HAL_GetTick>
 8009722:	4602      	mov	r2, r0
 8009724:	69fb      	ldr	r3, [r7, #28]
 8009726:	1ad3      	subs	r3, r2, r3
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	429a      	cmp	r2, r3
 800972c:	d803      	bhi.n	8009736 <HAL_SPI_Transmit+0x160>
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009734:	d102      	bne.n	800973c <HAL_SPI_Transmit+0x166>
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d109      	bne.n	8009750 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2201      	movs	r2, #1
 8009740:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e082      	b.n	8009856 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009754:	b29b      	uxth	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1c7      	bne.n	80096ea <HAL_SPI_Transmit+0x114>
 800975a:	e053      	b.n	8009804 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d002      	beq.n	800976a <HAL_SPI_Transmit+0x194>
 8009764:	8b7b      	ldrh	r3, [r7, #26]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d147      	bne.n	80097fa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	330c      	adds	r3, #12
 8009774:	7812      	ldrb	r2, [r2, #0]
 8009776:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800977c:	1c5a      	adds	r2, r3, #1
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009786:	b29b      	uxth	r3, r3
 8009788:	3b01      	subs	r3, #1
 800978a:	b29a      	uxth	r2, r3
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009790:	e033      	b.n	80097fa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	689b      	ldr	r3, [r3, #8]
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b02      	cmp	r3, #2
 800979e:	d113      	bne.n	80097c8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	330c      	adds	r3, #12
 80097aa:	7812      	ldrb	r2, [r2, #0]
 80097ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097b2:	1c5a      	adds	r2, r3, #1
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80097bc:	b29b      	uxth	r3, r3
 80097be:	3b01      	subs	r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80097c6:	e018      	b.n	80097fa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097c8:	f7f9 fde2 	bl	8003390 <HAL_GetTick>
 80097cc:	4602      	mov	r2, r0
 80097ce:	69fb      	ldr	r3, [r7, #28]
 80097d0:	1ad3      	subs	r3, r2, r3
 80097d2:	683a      	ldr	r2, [r7, #0]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	d803      	bhi.n	80097e0 <HAL_SPI_Transmit+0x20a>
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097de:	d102      	bne.n	80097e6 <HAL_SPI_Transmit+0x210>
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d109      	bne.n	80097fa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2201      	movs	r2, #1
 80097ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e02d      	b.n	8009856 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80097fe:	b29b      	uxth	r3, r3
 8009800:	2b00      	cmp	r3, #0
 8009802:	d1c6      	bne.n	8009792 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009804:	69fa      	ldr	r2, [r7, #28]
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 fbd9 	bl	8009fc0 <SPI_EndRxTxTransaction>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2220      	movs	r2, #32
 8009818:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10a      	bne.n	8009838 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009822:	2300      	movs	r3, #0
 8009824:	617b      	str	r3, [r7, #20]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	617b      	str	r3, [r7, #20]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	617b      	str	r3, [r7, #20]
 8009836:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2201      	movs	r2, #1
 800983c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800984c:	2b00      	cmp	r3, #0
 800984e:	d001      	beq.n	8009854 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e000      	b.n	8009856 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8009854:	2300      	movs	r3, #0
  }
}
 8009856:	4618      	mov	r0, r3
 8009858:	3720      	adds	r7, #32
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b088      	sub	sp, #32
 8009862:	af02      	add	r7, sp, #8
 8009864:	60f8      	str	r0, [r7, #12]
 8009866:	60b9      	str	r1, [r7, #8]
 8009868:	603b      	str	r3, [r7, #0]
 800986a:	4613      	mov	r3, r2
 800986c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b01      	cmp	r3, #1
 8009878:	d001      	beq.n	800987e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800987a:	2302      	movs	r3, #2
 800987c:	e104      	b.n	8009a88 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800987e:	68bb      	ldr	r3, [r7, #8]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d002      	beq.n	800988a <HAL_SPI_Receive+0x2c>
 8009884:	88fb      	ldrh	r3, [r7, #6]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d101      	bne.n	800988e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e0fc      	b.n	8009a88 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009896:	d112      	bne.n	80098be <HAL_SPI_Receive+0x60>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	689b      	ldr	r3, [r3, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d10e      	bne.n	80098be <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2204      	movs	r2, #4
 80098a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80098a8:	88fa      	ldrh	r2, [r7, #6]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	4613      	mov	r3, r2
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	68b9      	ldr	r1, [r7, #8]
 80098b4:	68f8      	ldr	r0, [r7, #12]
 80098b6:	f000 f8eb 	bl	8009a90 <HAL_SPI_TransmitReceive>
 80098ba:	4603      	mov	r3, r0
 80098bc:	e0e4      	b.n	8009a88 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098be:	f7f9 fd67 	bl	8003390 <HAL_GetTick>
 80098c2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d101      	bne.n	80098d2 <HAL_SPI_Receive+0x74>
 80098ce:	2302      	movs	r3, #2
 80098d0:	e0da      	b.n	8009a88 <HAL_SPI_Receive+0x22a>
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2204      	movs	r2, #4
 80098de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	68ba      	ldr	r2, [r7, #8]
 80098ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	88fa      	ldrh	r2, [r7, #6]
 80098f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	88fa      	ldrh	r2, [r7, #6]
 80098f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	2200      	movs	r2, #0
 80098fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2200      	movs	r2, #0
 8009910:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	2200      	movs	r2, #0
 8009916:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009920:	d10f      	bne.n	8009942 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009930:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009940:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800994c:	2b40      	cmp	r3, #64	@ 0x40
 800994e:	d007      	beq.n	8009960 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800995e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d170      	bne.n	8009a4a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009968:	e035      	b.n	80099d6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	f003 0301 	and.w	r3, r3, #1
 8009974:	2b01      	cmp	r3, #1
 8009976:	d115      	bne.n	80099a4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f103 020c 	add.w	r2, r3, #12
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009984:	7812      	ldrb	r2, [r2, #0]
 8009986:	b2d2      	uxtb	r2, r2
 8009988:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800998e:	1c5a      	adds	r2, r3, #1
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009998:	b29b      	uxth	r3, r3
 800999a:	3b01      	subs	r3, #1
 800999c:	b29a      	uxth	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80099a2:	e018      	b.n	80099d6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099a4:	f7f9 fcf4 	bl	8003390 <HAL_GetTick>
 80099a8:	4602      	mov	r2, r0
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	683a      	ldr	r2, [r7, #0]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d803      	bhi.n	80099bc <HAL_SPI_Receive+0x15e>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ba:	d102      	bne.n	80099c2 <HAL_SPI_Receive+0x164>
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d109      	bne.n	80099d6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2200      	movs	r2, #0
 80099ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80099d2:	2303      	movs	r3, #3
 80099d4:	e058      	b.n	8009a88 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099da:	b29b      	uxth	r3, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d1c4      	bne.n	800996a <HAL_SPI_Receive+0x10c>
 80099e0:	e038      	b.n	8009a54 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	f003 0301 	and.w	r3, r3, #1
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d113      	bne.n	8009a18 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68da      	ldr	r2, [r3, #12]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099fa:	b292      	uxth	r2, r2
 80099fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a02:	1c9a      	adds	r2, r3, #2
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	3b01      	subs	r3, #1
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009a16:	e018      	b.n	8009a4a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a18:	f7f9 fcba 	bl	8003390 <HAL_GetTick>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	683a      	ldr	r2, [r7, #0]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d803      	bhi.n	8009a30 <HAL_SPI_Receive+0x1d2>
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2e:	d102      	bne.n	8009a36 <HAL_SPI_Receive+0x1d8>
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d109      	bne.n	8009a4a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e01e      	b.n	8009a88 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1c6      	bne.n	80099e2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 fa4b 	bl	8009ef4 <SPI_EndRxTransaction>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d002      	beq.n	8009a6a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2220      	movs	r2, #32
 8009a68:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2200      	movs	r2, #0
 8009a76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d001      	beq.n	8009a86 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e000      	b.n	8009a88 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8009a86:	2300      	movs	r3, #0
  }
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3718      	adds	r7, #24
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08a      	sub	sp, #40	@ 0x28
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009aa2:	f7f9 fc75 	bl	8003390 <HAL_GetTick>
 8009aa6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009aae:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009ab6:	887b      	ldrh	r3, [r7, #2]
 8009ab8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009aba:	7ffb      	ldrb	r3, [r7, #31]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d00c      	beq.n	8009ada <HAL_SPI_TransmitReceive+0x4a>
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ac6:	d106      	bne.n	8009ad6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d102      	bne.n	8009ad6 <HAL_SPI_TransmitReceive+0x46>
 8009ad0:	7ffb      	ldrb	r3, [r7, #31]
 8009ad2:	2b04      	cmp	r3, #4
 8009ad4:	d001      	beq.n	8009ada <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	e17f      	b.n	8009dda <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d005      	beq.n	8009aec <HAL_SPI_TransmitReceive+0x5c>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d002      	beq.n	8009aec <HAL_SPI_TransmitReceive+0x5c>
 8009ae6:	887b      	ldrh	r3, [r7, #2]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d101      	bne.n	8009af0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e174      	b.n	8009dda <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d101      	bne.n	8009afe <HAL_SPI_TransmitReceive+0x6e>
 8009afa:	2302      	movs	r3, #2
 8009afc:	e16d      	b.n	8009dda <HAL_SPI_TransmitReceive+0x34a>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b04      	cmp	r3, #4
 8009b10:	d003      	beq.n	8009b1a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2205      	movs	r2, #5
 8009b16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	887a      	ldrh	r2, [r7, #2]
 8009b2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	887a      	ldrh	r2, [r7, #2]
 8009b30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	887a      	ldrh	r2, [r7, #2]
 8009b3c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	887a      	ldrh	r2, [r7, #2]
 8009b42:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b5a:	2b40      	cmp	r3, #64	@ 0x40
 8009b5c:	d007      	beq.n	8009b6e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681a      	ldr	r2, [r3, #0]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b76:	d17e      	bne.n	8009c76 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d002      	beq.n	8009b86 <HAL_SPI_TransmitReceive+0xf6>
 8009b80:	8afb      	ldrh	r3, [r7, #22]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d16c      	bne.n	8009c60 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8a:	881a      	ldrh	r2, [r3, #0]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b96:	1c9a      	adds	r2, r3, #2
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	b29a      	uxth	r2, r3
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009baa:	e059      	b.n	8009c60 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	f003 0302 	and.w	r3, r3, #2
 8009bb6:	2b02      	cmp	r3, #2
 8009bb8:	d11b      	bne.n	8009bf2 <HAL_SPI_TransmitReceive+0x162>
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d016      	beq.n	8009bf2 <HAL_SPI_TransmitReceive+0x162>
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d113      	bne.n	8009bf2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bce:	881a      	ldrh	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bda:	1c9a      	adds	r2, r3, #2
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	3b01      	subs	r3, #1
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	689b      	ldr	r3, [r3, #8]
 8009bf8:	f003 0301 	and.w	r3, r3, #1
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d119      	bne.n	8009c34 <HAL_SPI_TransmitReceive+0x1a4>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d014      	beq.n	8009c34 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	68da      	ldr	r2, [r3, #12]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c14:	b292      	uxth	r2, r2
 8009c16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c1c:	1c9a      	adds	r2, r3, #2
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	b29a      	uxth	r2, r3
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c30:	2301      	movs	r3, #1
 8009c32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009c34:	f7f9 fbac 	bl	8003390 <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	6a3b      	ldr	r3, [r7, #32]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d80d      	bhi.n	8009c60 <HAL_SPI_TransmitReceive+0x1d0>
 8009c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c4a:	d009      	beq.n	8009c60 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e0bc      	b.n	8009dda <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1a0      	bne.n	8009bac <HAL_SPI_TransmitReceive+0x11c>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d19b      	bne.n	8009bac <HAL_SPI_TransmitReceive+0x11c>
 8009c74:	e082      	b.n	8009d7c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <HAL_SPI_TransmitReceive+0x1f4>
 8009c7e:	8afb      	ldrh	r3, [r7, #22]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d171      	bne.n	8009d68 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	330c      	adds	r3, #12
 8009c8e:	7812      	ldrb	r2, [r2, #0]
 8009c90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c96:	1c5a      	adds	r2, r3, #1
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009caa:	e05d      	b.n	8009d68 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	f003 0302 	and.w	r3, r3, #2
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d11c      	bne.n	8009cf4 <HAL_SPI_TransmitReceive+0x264>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d017      	beq.n	8009cf4 <HAL_SPI_TransmitReceive+0x264>
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d114      	bne.n	8009cf4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	330c      	adds	r3, #12
 8009cd4:	7812      	ldrb	r2, [r2, #0]
 8009cd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cdc:	1c5a      	adds	r2, r3, #1
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	b29a      	uxth	r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d119      	bne.n	8009d36 <HAL_SPI_TransmitReceive+0x2a6>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d014      	beq.n	8009d36 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68da      	ldr	r2, [r3, #12]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d16:	b2d2      	uxtb	r2, r2
 8009d18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d32:	2301      	movs	r3, #1
 8009d34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009d36:	f7f9 fb2b 	bl	8003390 <HAL_GetTick>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	6a3b      	ldr	r3, [r7, #32]
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d803      	bhi.n	8009d4e <HAL_SPI_TransmitReceive+0x2be>
 8009d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d4c:	d102      	bne.n	8009d54 <HAL_SPI_TransmitReceive+0x2c4>
 8009d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d109      	bne.n	8009d68 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009d64:	2303      	movs	r3, #3
 8009d66:	e038      	b.n	8009dda <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d19c      	bne.n	8009cac <HAL_SPI_TransmitReceive+0x21c>
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d197      	bne.n	8009cac <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d7c:	6a3a      	ldr	r2, [r7, #32]
 8009d7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f000 f91d 	bl	8009fc0 <SPI_EndRxTxTransaction>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d008      	beq.n	8009d9e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2220      	movs	r2, #32
 8009d90:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e01d      	b.n	8009dda <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	689b      	ldr	r3, [r3, #8]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10a      	bne.n	8009dbc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009da6:	2300      	movs	r3, #0
 8009da8:	613b      	str	r3, [r7, #16]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	613b      	str	r3, [r7, #16]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	613b      	str	r3, [r7, #16]
 8009dba:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d001      	beq.n	8009dd8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e000      	b.n	8009dda <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8009dd8:	2300      	movs	r3, #0
  }
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3728      	adds	r7, #40	@ 0x28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
	...

08009de4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b088      	sub	sp, #32
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	603b      	str	r3, [r7, #0]
 8009df0:	4613      	mov	r3, r2
 8009df2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009df4:	f7f9 facc 	bl	8003390 <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfc:	1a9b      	subs	r3, r3, r2
 8009dfe:	683a      	ldr	r2, [r7, #0]
 8009e00:	4413      	add	r3, r2
 8009e02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009e04:	f7f9 fac4 	bl	8003390 <HAL_GetTick>
 8009e08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009e0a:	4b39      	ldr	r3, [pc, #228]	@ (8009ef0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	015b      	lsls	r3, r3, #5
 8009e10:	0d1b      	lsrs	r3, r3, #20
 8009e12:	69fa      	ldr	r2, [r7, #28]
 8009e14:	fb02 f303 	mul.w	r3, r2, r3
 8009e18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e1a:	e055      	b.n	8009ec8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e22:	d051      	beq.n	8009ec8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e24:	f7f9 fab4 	bl	8003390 <HAL_GetTick>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	69bb      	ldr	r3, [r7, #24]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	69fa      	ldr	r2, [r7, #28]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d902      	bls.n	8009e3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d13d      	bne.n	8009eb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	685a      	ldr	r2, [r3, #4]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009e48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e52:	d111      	bne.n	8009e78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e5c:	d004      	beq.n	8009e68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e66:	d107      	bne.n	8009e78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e80:	d10f      	bne.n	8009ea2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009e90:	601a      	str	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ea0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e018      	b.n	8009ee8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d102      	bne.n	8009ec2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	61fb      	str	r3, [r7, #28]
 8009ec0:	e002      	b.n	8009ec8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	689a      	ldr	r2, [r3, #8]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	4013      	ands	r3, r2
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	bf0c      	ite	eq
 8009ed8:	2301      	moveq	r3, #1
 8009eda:	2300      	movne	r3, #0
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	461a      	mov	r2, r3
 8009ee0:	79fb      	ldrb	r3, [r7, #7]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d19a      	bne.n	8009e1c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3720      	adds	r7, #32
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}
 8009ef0:	20000004 	.word	0x20000004

08009ef4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af02      	add	r7, sp, #8
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f08:	d111      	bne.n	8009f2e <SPI_EndRxTransaction+0x3a>
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f12:	d004      	beq.n	8009f1e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f1c:	d107      	bne.n	8009f2e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f2c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f36:	d12a      	bne.n	8009f8e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	689b      	ldr	r3, [r3, #8]
 8009f3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f40:	d012      	beq.n	8009f68 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	2180      	movs	r1, #128	@ 0x80
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7ff ff49 	bl	8009de4 <SPI_WaitFlagStateUntilTimeout>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d02d      	beq.n	8009fb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f5c:	f043 0220 	orr.w	r2, r3, #32
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e026      	b.n	8009fb6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	9300      	str	r3, [sp, #0]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	2101      	movs	r1, #1
 8009f72:	68f8      	ldr	r0, [r7, #12]
 8009f74:	f7ff ff36 	bl	8009de4 <SPI_WaitFlagStateUntilTimeout>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d01a      	beq.n	8009fb4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f82:	f043 0220 	orr.w	r2, r3, #32
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	e013      	b.n	8009fb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	9300      	str	r3, [sp, #0]
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2200      	movs	r2, #0
 8009f96:	2101      	movs	r1, #1
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f7ff ff23 	bl	8009de4 <SPI_WaitFlagStateUntilTimeout>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d007      	beq.n	8009fb4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fa8:	f043 0220 	orr.w	r2, r3, #32
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	e000      	b.n	8009fb6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b088      	sub	sp, #32
 8009fc4:	af02      	add	r7, sp, #8
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	9300      	str	r3, [sp, #0]
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	2102      	movs	r1, #2
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f7ff ff04 	bl	8009de4 <SPI_WaitFlagStateUntilTimeout>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d007      	beq.n	8009ff2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fe6:	f043 0220 	orr.w	r2, r3, #32
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009fee:	2303      	movs	r3, #3
 8009ff0:	e032      	b.n	800a058 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009ff2:	4b1b      	ldr	r3, [pc, #108]	@ (800a060 <SPI_EndRxTxTransaction+0xa0>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a1b      	ldr	r2, [pc, #108]	@ (800a064 <SPI_EndRxTxTransaction+0xa4>)
 8009ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ffc:	0d5b      	lsrs	r3, r3, #21
 8009ffe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a002:	fb02 f303 	mul.w	r3, r2, r3
 800a006:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a010:	d112      	bne.n	800a038 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	9300      	str	r3, [sp, #0]
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	2200      	movs	r2, #0
 800a01a:	2180      	movs	r1, #128	@ 0x80
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f7ff fee1 	bl	8009de4 <SPI_WaitFlagStateUntilTimeout>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d016      	beq.n	800a056 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a02c:	f043 0220 	orr.w	r2, r3, #32
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	e00f      	b.n	800a058 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d00a      	beq.n	800a054 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	3b01      	subs	r3, #1
 800a042:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a04e:	2b80      	cmp	r3, #128	@ 0x80
 800a050:	d0f2      	beq.n	800a038 <SPI_EndRxTxTransaction+0x78>
 800a052:	e000      	b.n	800a056 <SPI_EndRxTxTransaction+0x96>
        break;
 800a054:	bf00      	nop
  }

  return HAL_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3718      	adds	r7, #24
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	20000004 	.word	0x20000004
 800a064:	165e9f81 	.word	0x165e9f81

0800a068 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a068:	b084      	sub	sp, #16
 800a06a:	b480      	push	{r7}
 800a06c:	b085      	sub	sp, #20
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	f107 001c 	add.w	r0, r7, #28
 800a076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a07a:	2300      	movs	r3, #0
 800a07c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a07e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a080:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a082:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a086:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a08a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a08e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a092:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	4313      	orrs	r3, r2
 800a098:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	685b      	ldr	r3, [r3, #4]
 800a09e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a0a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	431a      	orrs	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3714      	adds	r7, #20
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ba:	b004      	add	sp, #16
 800a0bc:	4770      	bx	lr

0800a0be <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a0be:	b480      	push	{r7}
 800a0c0:	b083      	sub	sp, #12
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	370c      	adds	r7, #12
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a0fa:	b480      	push	{r7}
 800a0fc:	b083      	sub	sp, #12
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2203      	movs	r2, #3
 800a106:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f003 0303 	and.w	r3, r3, #3
}
 800a126:	4618      	mov	r0, r3
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a132:	b480      	push	{r7}
 800a134:	b085      	sub	sp, #20
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
 800a13a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a13c:	2300      	movs	r3, #0
 800a13e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a150:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a156:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a15c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	4313      	orrs	r3, r2
 800a162:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a16c:	f023 030f 	bic.w	r3, r3, #15
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	431a      	orrs	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a178:	2300      	movs	r3, #0
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3714      	adds	r7, #20
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a186:	b480      	push	{r7}
 800a188:	b083      	sub	sp, #12
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	691b      	ldr	r3, [r3, #16]
 800a192:	b2db      	uxtb	r3, r3
}
 800a194:	4618      	mov	r0, r3
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
 800a1a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	3314      	adds	r3, #20
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	4413      	add	r3, r2
 800a1b4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
}  
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a1c6:	b480      	push	{r7}
 800a1c8:	b085      	sub	sp, #20
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
 800a1ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a1ec:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a1f2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a1f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a1fa:	68fa      	ldr	r2, [r7, #12]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a204:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	431a      	orrs	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a210:	2300      	movs	r3, #0

}
 800a212:	4618      	mov	r0, r3
 800a214:	3714      	adds	r7, #20
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b088      	sub	sp, #32
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a22c:	2310      	movs	r3, #16
 800a22e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a230:	2340      	movs	r3, #64	@ 0x40
 800a232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a234:	2300      	movs	r3, #0
 800a236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a238:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a23c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a23e:	f107 0308 	add.w	r3, r7, #8
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7ff ff74 	bl	800a132 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a24a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a24e:	2110      	movs	r1, #16
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 f9d7 	bl	800a604 <SDMMC_GetCmdResp1>
 800a256:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a258:	69fb      	ldr	r3, [r7, #28]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3720      	adds	r7, #32
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b088      	sub	sp, #32
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
 800a26a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a270:	2311      	movs	r3, #17
 800a272:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a274:	2340      	movs	r3, #64	@ 0x40
 800a276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a278:	2300      	movs	r3, #0
 800a27a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a27c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a280:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a282:	f107 0308 	add.w	r3, r7, #8
 800a286:	4619      	mov	r1, r3
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f7ff ff52 	bl	800a132 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a28e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a292:	2111      	movs	r1, #17
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 f9b5 	bl	800a604 <SDMMC_GetCmdResp1>
 800a29a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a29c:	69fb      	ldr	r3, [r7, #28]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3720      	adds	r7, #32
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b088      	sub	sp, #32
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a2b4:	2312      	movs	r3, #18
 800a2b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2b8:	2340      	movs	r3, #64	@ 0x40
 800a2ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2c6:	f107 0308 	add.w	r3, r7, #8
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7ff ff30 	bl	800a132 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a2d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2d6:	2112      	movs	r1, #18
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 f993 	bl	800a604 <SDMMC_GetCmdResp1>
 800a2de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2e0:	69fb      	ldr	r3, [r7, #28]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3720      	adds	r7, #32
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b088      	sub	sp, #32
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a2f8:	2318      	movs	r3, #24
 800a2fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2fc:	2340      	movs	r3, #64	@ 0x40
 800a2fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a300:	2300      	movs	r3, #0
 800a302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a304:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a308:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a30a:	f107 0308 	add.w	r3, r7, #8
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f7ff ff0e 	bl	800a132 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a31a:	2118      	movs	r1, #24
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f000 f971 	bl	800a604 <SDMMC_GetCmdResp1>
 800a322:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a324:	69fb      	ldr	r3, [r7, #28]
}
 800a326:	4618      	mov	r0, r3
 800a328:	3720      	adds	r7, #32
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b088      	sub	sp, #32
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a33c:	2319      	movs	r3, #25
 800a33e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a340:	2340      	movs	r3, #64	@ 0x40
 800a342:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a344:	2300      	movs	r3, #0
 800a346:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a348:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a34c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a34e:	f107 0308 	add.w	r3, r7, #8
 800a352:	4619      	mov	r1, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7ff feec 	bl	800a132 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a35a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a35e:	2119      	movs	r1, #25
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 f94f 	bl	800a604 <SDMMC_GetCmdResp1>
 800a366:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a368:	69fb      	ldr	r3, [r7, #28]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3720      	adds	r7, #32
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
	...

0800a374 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b088      	sub	sp, #32
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a37c:	2300      	movs	r3, #0
 800a37e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a380:	230c      	movs	r3, #12
 800a382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a384:	2340      	movs	r3, #64	@ 0x40
 800a386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a388:	2300      	movs	r3, #0
 800a38a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a38c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a390:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a392:	f107 0308 	add.w	r3, r7, #8
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f7ff feca 	bl	800a132 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a39e:	4a05      	ldr	r2, [pc, #20]	@ (800a3b4 <SDMMC_CmdStopTransfer+0x40>)
 800a3a0:	210c      	movs	r1, #12
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f92e 	bl	800a604 <SDMMC_GetCmdResp1>
 800a3a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3aa:	69fb      	ldr	r3, [r7, #28]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3720      	adds	r7, #32
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	bd80      	pop	{r7, pc}
 800a3b4:	05f5e100 	.word	0x05f5e100

0800a3b8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08a      	sub	sp, #40	@ 0x28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a3c8:	2307      	movs	r3, #7
 800a3ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3cc:	2340      	movs	r3, #64	@ 0x40
 800a3ce:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3d8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3da:	f107 0310 	add.w	r3, r7, #16
 800a3de:	4619      	mov	r1, r3
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	f7ff fea6 	bl	800a132 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a3e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3ea:	2107      	movs	r1, #7
 800a3ec:	68f8      	ldr	r0, [r7, #12]
 800a3ee:	f000 f909 	bl	800a604 <SDMMC_GetCmdResp1>
 800a3f2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3728      	adds	r7, #40	@ 0x28
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}

0800a3fe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b088      	sub	sp, #32
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a406:	2300      	movs	r3, #0
 800a408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a40a:	2300      	movs	r3, #0
 800a40c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a40e:	2300      	movs	r3, #0
 800a410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a412:	2300      	movs	r3, #0
 800a414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a41a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a41c:	f107 0308 	add.w	r3, r7, #8
 800a420:	4619      	mov	r1, r3
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f7ff fe85 	bl	800a132 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fb23 	bl	800aa74 <SDMMC_GetCmdError>
 800a42e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a430:	69fb      	ldr	r3, [r7, #28]
}
 800a432:	4618      	mov	r0, r3
 800a434:	3720      	adds	r7, #32
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a43a:	b580      	push	{r7, lr}
 800a43c:	b088      	sub	sp, #32
 800a43e:	af00      	add	r7, sp, #0
 800a440:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a442:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a446:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a448:	2308      	movs	r3, #8
 800a44a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a44c:	2340      	movs	r3, #64	@ 0x40
 800a44e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a450:	2300      	movs	r3, #0
 800a452:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a454:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a458:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a45a:	f107 0308 	add.w	r3, r7, #8
 800a45e:	4619      	mov	r1, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7ff fe66 	bl	800a132 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 fab6 	bl	800a9d8 <SDMMC_GetCmdResp7>
 800a46c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a46e:	69fb      	ldr	r3, [r7, #28]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3720      	adds	r7, #32
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b088      	sub	sp, #32
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a486:	2337      	movs	r3, #55	@ 0x37
 800a488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a48a:	2340      	movs	r3, #64	@ 0x40
 800a48c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a48e:	2300      	movs	r3, #0
 800a490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a496:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a498:	f107 0308 	add.w	r3, r7, #8
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7ff fe47 	bl	800a132 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a4a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4a8:	2137      	movs	r1, #55	@ 0x37
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f8aa 	bl	800a604 <SDMMC_GetCmdResp1>
 800a4b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4b2:	69fb      	ldr	r3, [r7, #28]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3720      	adds	r7, #32
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a4cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a4d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a4d2:	2329      	movs	r3, #41	@ 0x29
 800a4d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4d6:	2340      	movs	r3, #64	@ 0x40
 800a4d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4e4:	f107 0308 	add.w	r3, r7, #8
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff fe21 	bl	800a132 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 f9bd 	bl	800a870 <SDMMC_GetCmdResp3>
 800a4f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4f8:	69fb      	ldr	r3, [r7, #28]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3720      	adds	r7, #32
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b088      	sub	sp, #32
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a50a:	2300      	movs	r3, #0
 800a50c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a50e:	2302      	movs	r3, #2
 800a510:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a512:	23c0      	movs	r3, #192	@ 0xc0
 800a514:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a516:	2300      	movs	r3, #0
 800a518:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a51a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a51e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a520:	f107 0308 	add.w	r3, r7, #8
 800a524:	4619      	mov	r1, r3
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f7ff fe03 	bl	800a132 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f000 f957 	bl	800a7e0 <SDMMC_GetCmdResp2>
 800a532:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a534:	69fb      	ldr	r3, [r7, #28]
}
 800a536:	4618      	mov	r0, r3
 800a538:	3720      	adds	r7, #32
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b088      	sub	sp, #32
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
 800a546:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a54c:	2309      	movs	r3, #9
 800a54e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a550:	23c0      	movs	r3, #192	@ 0xc0
 800a552:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a554:	2300      	movs	r3, #0
 800a556:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a558:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a55c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a55e:	f107 0308 	add.w	r3, r7, #8
 800a562:	4619      	mov	r1, r3
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f7ff fde4 	bl	800a132 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 f938 	bl	800a7e0 <SDMMC_GetCmdResp2>
 800a570:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a572:	69fb      	ldr	r3, [r7, #28]
}
 800a574:	4618      	mov	r0, r3
 800a576:	3720      	adds	r7, #32
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b088      	sub	sp, #32
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a586:	2300      	movs	r3, #0
 800a588:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a58a:	2303      	movs	r3, #3
 800a58c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a58e:	2340      	movs	r3, #64	@ 0x40
 800a590:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a592:	2300      	movs	r3, #0
 800a594:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a59a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a59c:	f107 0308 	add.w	r3, r7, #8
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7ff fdc5 	bl	800a132 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a5a8:	683a      	ldr	r2, [r7, #0]
 800a5aa:	2103      	movs	r1, #3
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f99d 	bl	800a8ec <SDMMC_GetCmdResp6>
 800a5b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5b4:	69fb      	ldr	r3, [r7, #28]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3720      	adds	r7, #32
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b088      	sub	sp, #32
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a5cc:	230d      	movs	r3, #13
 800a5ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5d0:	2340      	movs	r3, #64	@ 0x40
 800a5d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5de:	f107 0308 	add.w	r3, r7, #8
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7ff fda4 	bl	800a132 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a5ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5ee:	210d      	movs	r1, #13
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f807 	bl	800a604 <SDMMC_GetCmdResp1>
 800a5f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5f8:	69fb      	ldr	r3, [r7, #28]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3720      	adds	r7, #32
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
	...

0800a604 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b088      	sub	sp, #32
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60f8      	str	r0, [r7, #12]
 800a60c:	460b      	mov	r3, r1
 800a60e:	607a      	str	r2, [r7, #4]
 800a610:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a612:	4b70      	ldr	r3, [pc, #448]	@ (800a7d4 <SDMMC_GetCmdResp1+0x1d0>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	4a70      	ldr	r2, [pc, #448]	@ (800a7d8 <SDMMC_GetCmdResp1+0x1d4>)
 800a618:	fba2 2303 	umull	r2, r3, r2, r3
 800a61c:	0a5a      	lsrs	r2, r3, #9
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	fb02 f303 	mul.w	r3, r2, r3
 800a624:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	1e5a      	subs	r2, r3, #1
 800a62a:	61fa      	str	r2, [r7, #28]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d102      	bne.n	800a636 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a630:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a634:	e0c9      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a63a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a642:	2b00      	cmp	r3, #0
 800a644:	d0ef      	beq.n	800a626 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1ea      	bne.n	800a626 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a654:	f003 0304 	and.w	r3, r3, #4
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d004      	beq.n	800a666 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	2204      	movs	r2, #4
 800a660:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a662:	2304      	movs	r3, #4
 800a664:	e0b1      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a66a:	f003 0301 	and.w	r3, r3, #1
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d004      	beq.n	800a67c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2201      	movs	r2, #1
 800a676:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a678:	2301      	movs	r3, #1
 800a67a:	e0a6      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	22c5      	movs	r2, #197	@ 0xc5
 800a680:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a682:	68f8      	ldr	r0, [r7, #12]
 800a684:	f7ff fd7f 	bl	800a186 <SDIO_GetCommandResponse>
 800a688:	4603      	mov	r3, r0
 800a68a:	461a      	mov	r2, r3
 800a68c:	7afb      	ldrb	r3, [r7, #11]
 800a68e:	4293      	cmp	r3, r2
 800a690:	d001      	beq.n	800a696 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a692:	2301      	movs	r3, #1
 800a694:	e099      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a696:	2100      	movs	r1, #0
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	f7ff fd81 	bl	800a1a0 <SDIO_GetResponse>
 800a69e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a6a0:	697a      	ldr	r2, [r7, #20]
 800a6a2:	4b4e      	ldr	r3, [pc, #312]	@ (800a7dc <SDMMC_GetCmdResp1+0x1d8>)
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d101      	bne.n	800a6ae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	e08d      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	da02      	bge.n	800a6ba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a6b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a6b8:	e087      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d001      	beq.n	800a6c8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a6c4:	2340      	movs	r3, #64	@ 0x40
 800a6c6:	e080      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a6d2:	2380      	movs	r3, #128	@ 0x80
 800a6d4:	e079      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a6e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a6e4:	e071      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d002      	beq.n	800a6f6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a6f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6f4:	e069      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d002      	beq.n	800a706 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a700:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a704:	e061      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a710:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a714:	e059      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d002      	beq.n	800a726 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a724:	e051      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d002      	beq.n	800a736 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a730:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a734:	e049      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d002      	beq.n	800a746 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a740:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a744:	e041      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d002      	beq.n	800a756 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a750:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a754:	e039      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d002      	beq.n	800a766 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a760:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a764:	e031      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d002      	beq.n	800a776 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a770:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a774:	e029      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d002      	beq.n	800a786 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a780:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a784:	e021      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a790:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a794:	e019      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d002      	beq.n	800a7a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a7a0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a7a4:	e011      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d002      	beq.n	800a7b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a7b0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a7b4:	e009      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f003 0308 	and.w	r3, r3, #8
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a7c0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a7c4:	e001      	b.n	800a7ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a7c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3720      	adds	r7, #32
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	20000004 	.word	0x20000004
 800a7d8:	10624dd3 	.word	0x10624dd3
 800a7dc:	fdffe008 	.word	0xfdffe008

0800a7e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7e8:	4b1f      	ldr	r3, [pc, #124]	@ (800a868 <SDMMC_GetCmdResp2+0x88>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a1f      	ldr	r2, [pc, #124]	@ (800a86c <SDMMC_GetCmdResp2+0x8c>)
 800a7ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a7f2:	0a5b      	lsrs	r3, r3, #9
 800a7f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7f8:	fb02 f303 	mul.w	r3, r2, r3
 800a7fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	1e5a      	subs	r2, r3, #1
 800a802:	60fa      	str	r2, [r7, #12]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d102      	bne.n	800a80e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a808:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a80c:	e026      	b.n	800a85c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a812:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d0ef      	beq.n	800a7fe <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a824:	2b00      	cmp	r3, #0
 800a826:	d1ea      	bne.n	800a7fe <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a82c:	f003 0304 	and.w	r3, r3, #4
 800a830:	2b00      	cmp	r3, #0
 800a832:	d004      	beq.n	800a83e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2204      	movs	r2, #4
 800a838:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a83a:	2304      	movs	r3, #4
 800a83c:	e00e      	b.n	800a85c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a842:	f003 0301 	and.w	r3, r3, #1
 800a846:	2b00      	cmp	r3, #0
 800a848:	d004      	beq.n	800a854 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2201      	movs	r2, #1
 800a84e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a850:	2301      	movs	r3, #1
 800a852:	e003      	b.n	800a85c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	22c5      	movs	r2, #197	@ 0xc5
 800a858:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr
 800a868:	20000004 	.word	0x20000004
 800a86c:	10624dd3 	.word	0x10624dd3

0800a870 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a878:	4b1a      	ldr	r3, [pc, #104]	@ (800a8e4 <SDMMC_GetCmdResp3+0x74>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	4a1a      	ldr	r2, [pc, #104]	@ (800a8e8 <SDMMC_GetCmdResp3+0x78>)
 800a87e:	fba2 2303 	umull	r2, r3, r2, r3
 800a882:	0a5b      	lsrs	r3, r3, #9
 800a884:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a888:	fb02 f303 	mul.w	r3, r2, r3
 800a88c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	1e5a      	subs	r2, r3, #1
 800a892:	60fa      	str	r2, [r7, #12]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d102      	bne.n	800a89e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a898:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a89c:	e01b      	b.n	800a8d6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0ef      	beq.n	800a88e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d1ea      	bne.n	800a88e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8bc:	f003 0304 	and.w	r3, r3, #4
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d004      	beq.n	800a8ce <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2204      	movs	r2, #4
 800a8c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a8ca:	2304      	movs	r3, #4
 800a8cc:	e003      	b.n	800a8d6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	22c5      	movs	r2, #197	@ 0xc5
 800a8d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3714      	adds	r7, #20
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	20000004 	.word	0x20000004
 800a8e8:	10624dd3 	.word	0x10624dd3

0800a8ec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b088      	sub	sp, #32
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	607a      	str	r2, [r7, #4]
 800a8f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a8fa:	4b35      	ldr	r3, [pc, #212]	@ (800a9d0 <SDMMC_GetCmdResp6+0xe4>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a35      	ldr	r2, [pc, #212]	@ (800a9d4 <SDMMC_GetCmdResp6+0xe8>)
 800a900:	fba2 2303 	umull	r2, r3, r2, r3
 800a904:	0a5b      	lsrs	r3, r3, #9
 800a906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a90a:	fb02 f303 	mul.w	r3, r2, r3
 800a90e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	1e5a      	subs	r2, r3, #1
 800a914:	61fa      	str	r2, [r7, #28]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d102      	bne.n	800a920 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a91a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a91e:	e052      	b.n	800a9c6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a924:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d0ef      	beq.n	800a910 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1ea      	bne.n	800a910 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a93e:	f003 0304 	and.w	r3, r3, #4
 800a942:	2b00      	cmp	r3, #0
 800a944:	d004      	beq.n	800a950 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2204      	movs	r2, #4
 800a94a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a94c:	2304      	movs	r3, #4
 800a94e:	e03a      	b.n	800a9c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a954:	f003 0301 	and.w	r3, r3, #1
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d004      	beq.n	800a966 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	2201      	movs	r2, #1
 800a960:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a962:	2301      	movs	r3, #1
 800a964:	e02f      	b.n	800a9c6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f7ff fc0d 	bl	800a186 <SDIO_GetCommandResponse>
 800a96c:	4603      	mov	r3, r0
 800a96e:	461a      	mov	r2, r3
 800a970:	7afb      	ldrb	r3, [r7, #11]
 800a972:	4293      	cmp	r3, r2
 800a974:	d001      	beq.n	800a97a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a976:	2301      	movs	r3, #1
 800a978:	e025      	b.n	800a9c6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	22c5      	movs	r2, #197	@ 0xc5
 800a97e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a980:	2100      	movs	r1, #0
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f7ff fc0c 	bl	800a1a0 <SDIO_GetResponse>
 800a988:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800a990:	2b00      	cmp	r3, #0
 800a992:	d106      	bne.n	800a9a2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	0c1b      	lsrs	r3, r3, #16
 800a998:	b29a      	uxth	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	e011      	b.n	800a9c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a9ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a9b0:	e009      	b.n	800a9c6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d002      	beq.n	800a9c2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a9bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a9c0:	e001      	b.n	800a9c6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a9c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3720      	adds	r7, #32
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
 800a9ce:	bf00      	nop
 800a9d0:	20000004 	.word	0x20000004
 800a9d4:	10624dd3 	.word	0x10624dd3

0800a9d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9e0:	4b22      	ldr	r3, [pc, #136]	@ (800aa6c <SDMMC_GetCmdResp7+0x94>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a22      	ldr	r2, [pc, #136]	@ (800aa70 <SDMMC_GetCmdResp7+0x98>)
 800a9e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ea:	0a5b      	lsrs	r3, r3, #9
 800a9ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9f0:	fb02 f303 	mul.w	r3, r2, r3
 800a9f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	1e5a      	subs	r2, r3, #1
 800a9fa:	60fa      	str	r2, [r7, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d102      	bne.n	800aa06 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa04:	e02c      	b.n	800aa60 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d0ef      	beq.n	800a9f6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1ea      	bne.n	800a9f6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa24:	f003 0304 	and.w	r3, r3, #4
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d004      	beq.n	800aa36 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2204      	movs	r2, #4
 800aa30:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa32:	2304      	movs	r3, #4
 800aa34:	e014      	b.n	800aa60 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa3a:	f003 0301 	and.w	r3, r3, #1
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d004      	beq.n	800aa4c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2201      	movs	r2, #1
 800aa46:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e009      	b.n	800aa60 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d002      	beq.n	800aa5e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2240      	movs	r2, #64	@ 0x40
 800aa5c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aa5e:	2300      	movs	r3, #0
  
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3714      	adds	r7, #20
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr
 800aa6c:	20000004 	.word	0x20000004
 800aa70:	10624dd3 	.word	0x10624dd3

0800aa74 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa7c:	4b11      	ldr	r3, [pc, #68]	@ (800aac4 <SDMMC_GetCmdError+0x50>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a11      	ldr	r2, [pc, #68]	@ (800aac8 <SDMMC_GetCmdError+0x54>)
 800aa82:	fba2 2303 	umull	r2, r3, r2, r3
 800aa86:	0a5b      	lsrs	r3, r3, #9
 800aa88:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa8c:	fb02 f303 	mul.w	r3, r2, r3
 800aa90:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	1e5a      	subs	r2, r3, #1
 800aa96:	60fa      	str	r2, [r7, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d102      	bne.n	800aaa2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa9c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aaa0:	e009      	b.n	800aab6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d0f1      	beq.n	800aa92 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	22c5      	movs	r2, #197	@ 0xc5
 800aab2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	20000004 	.word	0x20000004
 800aac8:	10624dd3 	.word	0x10624dd3

0800aacc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800aad0:	4904      	ldr	r1, [pc, #16]	@ (800aae4 <MX_FATFS_Init+0x18>)
 800aad2:	4805      	ldr	r0, [pc, #20]	@ (800aae8 <MX_FATFS_Init+0x1c>)
 800aad4:	f002 fb38 	bl	800d148 <FATFS_LinkDriver>
 800aad8:	4603      	mov	r3, r0
 800aada:	461a      	mov	r2, r3
 800aadc:	4b03      	ldr	r3, [pc, #12]	@ (800aaec <MX_FATFS_Init+0x20>)
 800aade:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aae0:	bf00      	nop
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	20000720 	.word	0x20000720
 800aae8:	0800dea0 	.word	0x0800dea0
 800aaec:	2000071c 	.word	0x2000071c

0800aaf0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aaf4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ab06:	2300      	movs	r3, #0
 800ab08:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ab0a:	f000 f89e 	bl	800ac4a <BSP_SD_IsDetected>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d001      	beq.n	800ab18 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	e005      	b.n	800ab24 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ab18:	4804      	ldr	r0, [pc, #16]	@ (800ab2c <BSP_SD_Init+0x2c>)
 800ab1a:	f7fd fa9f 	bl	800805c <HAL_SD_Init>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ab22:	79fb      	ldrb	r3, [r7, #7]
}
 800ab24:	4618      	mov	r0, r3
 800ab26:	3708      	adds	r7, #8
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	20000600 	.word	0x20000600

0800ab30 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b088      	sub	sp, #32
 800ab34:	af02      	add	r7, sp, #8
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
 800ab3c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	68f9      	ldr	r1, [r7, #12]
 800ab4c:	4806      	ldr	r0, [pc, #24]	@ (800ab68 <BSP_SD_ReadBlocks+0x38>)
 800ab4e:	f7fd fb2d 	bl	80081ac <HAL_SD_ReadBlocks>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3718      	adds	r7, #24
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	20000600 	.word	0x20000600

0800ab6c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b088      	sub	sp, #32
 800ab70:	af02      	add	r7, sp, #8
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
 800ab78:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68ba      	ldr	r2, [r7, #8]
 800ab86:	68f9      	ldr	r1, [r7, #12]
 800ab88:	4806      	ldr	r0, [pc, #24]	@ (800aba4 <BSP_SD_WriteBlocks+0x38>)
 800ab8a:	f7fd fcf5 	bl	8008578 <HAL_SD_WriteBlocks>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ab98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3718      	adds	r7, #24
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	20000600 	.word	0x20000600

0800aba8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800abac:	4805      	ldr	r0, [pc, #20]	@ (800abc4 <BSP_SD_GetCardState+0x1c>)
 800abae:	f7fe f9d1 	bl	8008f54 <HAL_SD_GetCardState>
 800abb2:	4603      	mov	r3, r0
 800abb4:	2b04      	cmp	r3, #4
 800abb6:	bf14      	ite	ne
 800abb8:	2301      	movne	r3, #1
 800abba:	2300      	moveq	r3, #0
 800abbc:	b2db      	uxtb	r3, r3
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	20000600 	.word	0x20000600

0800abc8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b082      	sub	sp, #8
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800abd0:	6879      	ldr	r1, [r7, #4]
 800abd2:	4803      	ldr	r0, [pc, #12]	@ (800abe0 <BSP_SD_GetCardInfo+0x18>)
 800abd4:	f7fe f992 	bl	8008efc <HAL_SD_GetCardInfo>
}
 800abd8:	bf00      	nop
 800abda:	3708      	adds	r7, #8
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}
 800abe0:	20000600 	.word	0x20000600

0800abe4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800abec:	f000 f818 	bl	800ac20 <BSP_SD_AbortCallback>
}
 800abf0:	bf00      	nop
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ac00:	f000 f815 	bl	800ac2e <BSP_SD_WriteCpltCallback>
}
 800ac04:	bf00      	nop
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ac14:	f000 f812 	bl	800ac3c <BSP_SD_ReadCpltCallback>
}
 800ac18:	bf00      	nop
 800ac1a:	3708      	adds	r7, #8
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}

0800ac20 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ac20:	b480      	push	{r7}
 800ac22:	af00      	add	r7, sp, #0

}
 800ac24:	bf00      	nop
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr

0800ac2e <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800ac2e:	b480      	push	{r7}
 800ac30:	af00      	add	r7, sp, #0

}
 800ac32:	bf00      	nop
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	af00      	add	r7, sp, #0

}
 800ac40:	bf00      	nop
 800ac42:	46bd      	mov	sp, r7
 800ac44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac48:	4770      	bx	lr

0800ac4a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b082      	sub	sp, #8
 800ac4e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ac50:	2301      	movs	r3, #1
 800ac52:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ac54:	f000 f80c 	bl	800ac70 <BSP_PlatformIsDetected>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d101      	bne.n	800ac62 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ac62:	79fb      	ldrb	r3, [r7, #7]
 800ac64:	b2db      	uxtb	r3, r3
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3708      	adds	r7, #8
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}
	...

0800ac70 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ac76:	2301      	movs	r3, #1
 800ac78:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ac7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ac7e:	4806      	ldr	r0, [pc, #24]	@ (800ac98 <BSP_PlatformIsDetected+0x28>)
 800ac80:	f7fa f92c 	bl	8004edc <HAL_GPIO_ReadPin>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ac8e:	79fb      	ldrb	r3, [r7, #7]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	40020800 	.word	0x40020800

0800ac9c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	4603      	mov	r3, r0
 800aca4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800aca6:	4b0b      	ldr	r3, [pc, #44]	@ (800acd4 <SD_CheckStatus+0x38>)
 800aca8:	2201      	movs	r2, #1
 800acaa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800acac:	f7ff ff7c 	bl	800aba8 <BSP_SD_GetCardState>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d107      	bne.n	800acc6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800acb6:	4b07      	ldr	r3, [pc, #28]	@ (800acd4 <SD_CheckStatus+0x38>)
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	f023 0301 	bic.w	r3, r3, #1
 800acc0:	b2da      	uxtb	r2, r3
 800acc2:	4b04      	ldr	r3, [pc, #16]	@ (800acd4 <SD_CheckStatus+0x38>)
 800acc4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800acc6:	4b03      	ldr	r3, [pc, #12]	@ (800acd4 <SD_CheckStatus+0x38>)
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	b2db      	uxtb	r3, r3
}
 800accc:	4618      	mov	r0, r3
 800acce:	3708      	adds	r7, #8
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	2000000d 	.word	0x2000000d

0800acd8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	4603      	mov	r3, r0
 800ace0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ace2:	4b0b      	ldr	r3, [pc, #44]	@ (800ad10 <SD_initialize+0x38>)
 800ace4:	2201      	movs	r2, #1
 800ace6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ace8:	f7ff ff0a 	bl	800ab00 <BSP_SD_Init>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d107      	bne.n	800ad02 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800acf2:	79fb      	ldrb	r3, [r7, #7]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7ff ffd1 	bl	800ac9c <SD_CheckStatus>
 800acfa:	4603      	mov	r3, r0
 800acfc:	461a      	mov	r2, r3
 800acfe:	4b04      	ldr	r3, [pc, #16]	@ (800ad10 <SD_initialize+0x38>)
 800ad00:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ad02:	4b03      	ldr	r3, [pc, #12]	@ (800ad10 <SD_initialize+0x38>)
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	b2db      	uxtb	r3, r3
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	2000000d 	.word	0x2000000d

0800ad14 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ad1e:	79fb      	ldrb	r3, [r7, #7]
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7ff ffbb 	bl	800ac9c <SD_CheckStatus>
 800ad26:	4603      	mov	r3, r0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60b9      	str	r1, [r7, #8]
 800ad38:	607a      	str	r2, [r7, #4]
 800ad3a:	603b      	str	r3, [r7, #0]
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ad44:	f04f 33ff 	mov.w	r3, #4294967295
 800ad48:	683a      	ldr	r2, [r7, #0]
 800ad4a:	6879      	ldr	r1, [r7, #4]
 800ad4c:	68b8      	ldr	r0, [r7, #8]
 800ad4e:	f7ff feef 	bl	800ab30 <BSP_SD_ReadBlocks>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d107      	bne.n	800ad68 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ad58:	bf00      	nop
 800ad5a:	f7ff ff25 	bl	800aba8 <BSP_SD_GetCardState>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d1fa      	bne.n	800ad5a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800ad64:	2300      	movs	r3, #0
 800ad66:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800ad68:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3718      	adds	r7, #24
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b086      	sub	sp, #24
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	60b9      	str	r1, [r7, #8]
 800ad7a:	607a      	str	r2, [r7, #4]
 800ad7c:	603b      	str	r3, [r7, #0]
 800ad7e:	4603      	mov	r3, r0
 800ad80:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ad86:	f04f 33ff 	mov.w	r3, #4294967295
 800ad8a:	683a      	ldr	r2, [r7, #0]
 800ad8c:	6879      	ldr	r1, [r7, #4]
 800ad8e:	68b8      	ldr	r0, [r7, #8]
 800ad90:	f7ff feec 	bl	800ab6c <BSP_SD_WriteBlocks>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d107      	bne.n	800adaa <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ad9a:	bf00      	nop
 800ad9c:	f7ff ff04 	bl	800aba8 <BSP_SD_GetCardState>
 800ada0:	4603      	mov	r3, r0
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1fa      	bne.n	800ad9c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ada6:	2300      	movs	r3, #0
 800ada8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800adaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08c      	sub	sp, #48	@ 0x30
 800adb8:	af00      	add	r7, sp, #0
 800adba:	4603      	mov	r3, r0
 800adbc:	603a      	str	r2, [r7, #0]
 800adbe:	71fb      	strb	r3, [r7, #7]
 800adc0:	460b      	mov	r3, r1
 800adc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800adc4:	2301      	movs	r3, #1
 800adc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800adca:	4b25      	ldr	r3, [pc, #148]	@ (800ae60 <SD_ioctl+0xac>)
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	b2db      	uxtb	r3, r3
 800add0:	f003 0301 	and.w	r3, r3, #1
 800add4:	2b00      	cmp	r3, #0
 800add6:	d001      	beq.n	800addc <SD_ioctl+0x28>
 800add8:	2303      	movs	r3, #3
 800adda:	e03c      	b.n	800ae56 <SD_ioctl+0xa2>

  switch (cmd)
 800addc:	79bb      	ldrb	r3, [r7, #6]
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d834      	bhi.n	800ae4c <SD_ioctl+0x98>
 800ade2:	a201      	add	r2, pc, #4	@ (adr r2, 800ade8 <SD_ioctl+0x34>)
 800ade4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade8:	0800adf9 	.word	0x0800adf9
 800adec:	0800ae01 	.word	0x0800ae01
 800adf0:	0800ae19 	.word	0x0800ae19
 800adf4:	0800ae33 	.word	0x0800ae33
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800adf8:	2300      	movs	r3, #0
 800adfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800adfe:	e028      	b.n	800ae52 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ae00:	f107 030c 	add.w	r3, r7, #12
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7ff fedf 	bl	800abc8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ae0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ae10:	2300      	movs	r3, #0
 800ae12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ae16:	e01c      	b.n	800ae52 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ae18:	f107 030c 	add.w	r3, r7, #12
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f7ff fed3 	bl	800abc8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ae22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ae30:	e00f      	b.n	800ae52 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ae32:	f107 030c 	add.w	r3, r7, #12
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7ff fec6 	bl	800abc8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ae3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae3e:	0a5a      	lsrs	r2, r3, #9
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ae44:	2300      	movs	r3, #0
 800ae46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800ae4a:	e002      	b.n	800ae52 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ae4c:	2304      	movs	r3, #4
 800ae4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800ae52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3730      	adds	r7, #48	@ 0x30
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	2000000d 	.word	0x2000000d

0800ae64 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b084      	sub	sp, #16
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ae6e:	79fb      	ldrb	r3, [r7, #7]
 800ae70:	4a08      	ldr	r2, [pc, #32]	@ (800ae94 <disk_status+0x30>)
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	4413      	add	r3, r2
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	79fa      	ldrb	r2, [r7, #7]
 800ae7c:	4905      	ldr	r1, [pc, #20]	@ (800ae94 <disk_status+0x30>)
 800ae7e:	440a      	add	r2, r1
 800ae80:	7a12      	ldrb	r2, [r2, #8]
 800ae82:	4610      	mov	r0, r2
 800ae84:	4798      	blx	r3
 800ae86:	4603      	mov	r3, r0
 800ae88:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ae8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	20000324 	.word	0x20000324

0800ae98 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800aea6:	79fb      	ldrb	r3, [r7, #7]
 800aea8:	4a0e      	ldr	r2, [pc, #56]	@ (800aee4 <disk_initialize+0x4c>)
 800aeaa:	5cd3      	ldrb	r3, [r2, r3]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d114      	bne.n	800aeda <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800aeb0:	79fb      	ldrb	r3, [r7, #7]
 800aeb2:	4a0c      	ldr	r2, [pc, #48]	@ (800aee4 <disk_initialize+0x4c>)
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4413      	add	r3, r2
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	79fa      	ldrb	r2, [r7, #7]
 800aebe:	4909      	ldr	r1, [pc, #36]	@ (800aee4 <disk_initialize+0x4c>)
 800aec0:	440a      	add	r2, r1
 800aec2:	7a12      	ldrb	r2, [r2, #8]
 800aec4:	4610      	mov	r0, r2
 800aec6:	4798      	blx	r3
 800aec8:	4603      	mov	r3, r0
 800aeca:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800aecc:	7bfb      	ldrb	r3, [r7, #15]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d103      	bne.n	800aeda <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800aed2:	79fb      	ldrb	r3, [r7, #7]
 800aed4:	4a03      	ldr	r2, [pc, #12]	@ (800aee4 <disk_initialize+0x4c>)
 800aed6:	2101      	movs	r1, #1
 800aed8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800aeda:	7bfb      	ldrb	r3, [r7, #15]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}
 800aee4:	20000324 	.word	0x20000324

0800aee8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aee8:	b590      	push	{r4, r7, lr}
 800aeea:	b087      	sub	sp, #28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	60b9      	str	r1, [r7, #8]
 800aef0:	607a      	str	r2, [r7, #4]
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	4603      	mov	r3, r0
 800aef6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aef8:	7bfb      	ldrb	r3, [r7, #15]
 800aefa:	4a0a      	ldr	r2, [pc, #40]	@ (800af24 <disk_read+0x3c>)
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	4413      	add	r3, r2
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	689c      	ldr	r4, [r3, #8]
 800af04:	7bfb      	ldrb	r3, [r7, #15]
 800af06:	4a07      	ldr	r2, [pc, #28]	@ (800af24 <disk_read+0x3c>)
 800af08:	4413      	add	r3, r2
 800af0a:	7a18      	ldrb	r0, [r3, #8]
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	68b9      	ldr	r1, [r7, #8]
 800af12:	47a0      	blx	r4
 800af14:	4603      	mov	r3, r0
 800af16:	75fb      	strb	r3, [r7, #23]
  return res;
 800af18:	7dfb      	ldrb	r3, [r7, #23]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	371c      	adds	r7, #28
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd90      	pop	{r4, r7, pc}
 800af22:	bf00      	nop
 800af24:	20000324 	.word	0x20000324

0800af28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800af28:	b590      	push	{r4, r7, lr}
 800af2a:	b087      	sub	sp, #28
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	60b9      	str	r1, [r7, #8]
 800af30:	607a      	str	r2, [r7, #4]
 800af32:	603b      	str	r3, [r7, #0]
 800af34:	4603      	mov	r3, r0
 800af36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800af38:	7bfb      	ldrb	r3, [r7, #15]
 800af3a:	4a0a      	ldr	r2, [pc, #40]	@ (800af64 <disk_write+0x3c>)
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	4413      	add	r3, r2
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	68dc      	ldr	r4, [r3, #12]
 800af44:	7bfb      	ldrb	r3, [r7, #15]
 800af46:	4a07      	ldr	r2, [pc, #28]	@ (800af64 <disk_write+0x3c>)
 800af48:	4413      	add	r3, r2
 800af4a:	7a18      	ldrb	r0, [r3, #8]
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	68b9      	ldr	r1, [r7, #8]
 800af52:	47a0      	blx	r4
 800af54:	4603      	mov	r3, r0
 800af56:	75fb      	strb	r3, [r7, #23]
  return res;
 800af58:	7dfb      	ldrb	r3, [r7, #23]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	371c      	adds	r7, #28
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd90      	pop	{r4, r7, pc}
 800af62:	bf00      	nop
 800af64:	20000324 	.word	0x20000324

0800af68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	603a      	str	r2, [r7, #0]
 800af72:	71fb      	strb	r3, [r7, #7]
 800af74:	460b      	mov	r3, r1
 800af76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800af78:	79fb      	ldrb	r3, [r7, #7]
 800af7a:	4a09      	ldr	r2, [pc, #36]	@ (800afa0 <disk_ioctl+0x38>)
 800af7c:	009b      	lsls	r3, r3, #2
 800af7e:	4413      	add	r3, r2
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	79fa      	ldrb	r2, [r7, #7]
 800af86:	4906      	ldr	r1, [pc, #24]	@ (800afa0 <disk_ioctl+0x38>)
 800af88:	440a      	add	r2, r1
 800af8a:	7a10      	ldrb	r0, [r2, #8]
 800af8c:	79b9      	ldrb	r1, [r7, #6]
 800af8e:	683a      	ldr	r2, [r7, #0]
 800af90:	4798      	blx	r3
 800af92:	4603      	mov	r3, r0
 800af94:	73fb      	strb	r3, [r7, #15]
  return res;
 800af96:	7bfb      	ldrb	r3, [r7, #15]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	20000324 	.word	0x20000324

0800afa4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800afa4:	b480      	push	{r7}
 800afa6:	b085      	sub	sp, #20
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	3301      	adds	r3, #1
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800afb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800afb8:	021b      	lsls	r3, r3, #8
 800afba:	b21a      	sxth	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	b21b      	sxth	r3, r3
 800afc2:	4313      	orrs	r3, r2
 800afc4:	b21b      	sxth	r3, r3
 800afc6:	81fb      	strh	r3, [r7, #14]
	return rv;
 800afc8:	89fb      	ldrh	r3, [r7, #14]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3714      	adds	r7, #20
 800afce:	46bd      	mov	sp, r7
 800afd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd4:	4770      	bx	lr

0800afd6 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800afd6:	b480      	push	{r7}
 800afd8:	b085      	sub	sp, #20
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	3303      	adds	r3, #3
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	021b      	lsls	r3, r3, #8
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	3202      	adds	r2, #2
 800afee:	7812      	ldrb	r2, [r2, #0]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	021b      	lsls	r3, r3, #8
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	3201      	adds	r2, #1
 800affc:	7812      	ldrb	r2, [r2, #0]
 800affe:	4313      	orrs	r3, r2
 800b000:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	021b      	lsls	r3, r3, #8
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	7812      	ldrb	r2, [r2, #0]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	60fb      	str	r3, [r7, #12]
	return rv;
 800b00e:	68fb      	ldr	r3, [r7, #12]
}
 800b010:	4618      	mov	r0, r3
 800b012:	3714      	adds	r7, #20
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr

0800b01c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	460b      	mov	r3, r1
 800b026:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	1c5a      	adds	r2, r3, #1
 800b02c:	607a      	str	r2, [r7, #4]
 800b02e:	887a      	ldrh	r2, [r7, #2]
 800b030:	b2d2      	uxtb	r2, r2
 800b032:	701a      	strb	r2, [r3, #0]
 800b034:	887b      	ldrh	r3, [r7, #2]
 800b036:	0a1b      	lsrs	r3, r3, #8
 800b038:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	1c5a      	adds	r2, r3, #1
 800b03e:	607a      	str	r2, [r7, #4]
 800b040:	887a      	ldrh	r2, [r7, #2]
 800b042:	b2d2      	uxtb	r2, r2
 800b044:	701a      	strb	r2, [r3, #0]
}
 800b046:	bf00      	nop
 800b048:	370c      	adds	r7, #12
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr

0800b052 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b052:	b480      	push	{r7}
 800b054:	b083      	sub	sp, #12
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	1c5a      	adds	r2, r3, #1
 800b060:	607a      	str	r2, [r7, #4]
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	b2d2      	uxtb	r2, r2
 800b066:	701a      	strb	r2, [r3, #0]
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	0a1b      	lsrs	r3, r3, #8
 800b06c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	1c5a      	adds	r2, r3, #1
 800b072:	607a      	str	r2, [r7, #4]
 800b074:	683a      	ldr	r2, [r7, #0]
 800b076:	b2d2      	uxtb	r2, r2
 800b078:	701a      	strb	r2, [r3, #0]
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	0a1b      	lsrs	r3, r3, #8
 800b07e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	1c5a      	adds	r2, r3, #1
 800b084:	607a      	str	r2, [r7, #4]
 800b086:	683a      	ldr	r2, [r7, #0]
 800b088:	b2d2      	uxtb	r2, r2
 800b08a:	701a      	strb	r2, [r3, #0]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	0a1b      	lsrs	r3, r3, #8
 800b090:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	1c5a      	adds	r2, r3, #1
 800b096:	607a      	str	r2, [r7, #4]
 800b098:	683a      	ldr	r2, [r7, #0]
 800b09a:	b2d2      	uxtb	r2, r2
 800b09c:	701a      	strb	r2, [r3, #0]
}
 800b09e:	bf00      	nop
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b0aa:	b480      	push	{r7}
 800b0ac:	b087      	sub	sp, #28
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	60f8      	str	r0, [r7, #12]
 800b0b2:	60b9      	str	r1, [r7, #8]
 800b0b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00d      	beq.n	800b0e0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	1c53      	adds	r3, r2, #1
 800b0c8:	613b      	str	r3, [r7, #16]
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	1c59      	adds	r1, r3, #1
 800b0ce:	6179      	str	r1, [r7, #20]
 800b0d0:	7812      	ldrb	r2, [r2, #0]
 800b0d2:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	3b01      	subs	r3, #1
 800b0d8:	607b      	str	r3, [r7, #4]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1f1      	bne.n	800b0c4 <mem_cpy+0x1a>
	}
}
 800b0e0:	bf00      	nop
 800b0e2:	371c      	adds	r7, #28
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr

0800b0ec <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b0ec:	b480      	push	{r7}
 800b0ee:	b087      	sub	sp, #28
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	1c5a      	adds	r2, r3, #1
 800b100:	617a      	str	r2, [r7, #20]
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	b2d2      	uxtb	r2, r2
 800b106:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	3b01      	subs	r3, #1
 800b10c:	607b      	str	r3, [r7, #4]
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1f3      	bne.n	800b0fc <mem_set+0x10>
}
 800b114:	bf00      	nop
 800b116:	bf00      	nop
 800b118:	371c      	adds	r7, #28
 800b11a:	46bd      	mov	sp, r7
 800b11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b120:	4770      	bx	lr

0800b122 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b122:	b480      	push	{r7}
 800b124:	b089      	sub	sp, #36	@ 0x24
 800b126:	af00      	add	r7, sp, #0
 800b128:	60f8      	str	r0, [r7, #12]
 800b12a:	60b9      	str	r1, [r7, #8]
 800b12c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	61fb      	str	r3, [r7, #28]
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b136:	2300      	movs	r3, #0
 800b138:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b13a:	69fb      	ldr	r3, [r7, #28]
 800b13c:	1c5a      	adds	r2, r3, #1
 800b13e:	61fa      	str	r2, [r7, #28]
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	4619      	mov	r1, r3
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	1c5a      	adds	r2, r3, #1
 800b148:	61ba      	str	r2, [r7, #24]
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	1acb      	subs	r3, r1, r3
 800b14e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	3b01      	subs	r3, #1
 800b154:	607b      	str	r3, [r7, #4]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d002      	beq.n	800b162 <mem_cmp+0x40>
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d0eb      	beq.n	800b13a <mem_cmp+0x18>

	return r;
 800b162:	697b      	ldr	r3, [r7, #20]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3724      	adds	r7, #36	@ 0x24
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b170:	b480      	push	{r7}
 800b172:	b083      	sub	sp, #12
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b17a:	e002      	b.n	800b182 <chk_chr+0x12>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3301      	adds	r3, #1
 800b180:	607b      	str	r3, [r7, #4]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	781b      	ldrb	r3, [r3, #0]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d005      	beq.n	800b196 <chk_chr+0x26>
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	4293      	cmp	r3, r2
 800b194:	d1f2      	bne.n	800b17c <chk_chr+0xc>
	return *str;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	781b      	ldrb	r3, [r3, #0]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	370c      	adds	r7, #12
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr
	...

0800b1a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	60bb      	str	r3, [r7, #8]
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	60fb      	str	r3, [r7, #12]
 800b1ba:	e029      	b.n	800b210 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b1bc:	4a27      	ldr	r2, [pc, #156]	@ (800b25c <chk_lock+0xb4>)
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	011b      	lsls	r3, r3, #4
 800b1c2:	4413      	add	r3, r2
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d01d      	beq.n	800b206 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b1ca:	4a24      	ldr	r2, [pc, #144]	@ (800b25c <chk_lock+0xb4>)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	011b      	lsls	r3, r3, #4
 800b1d0:	4413      	add	r3, r2
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d116      	bne.n	800b20a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b1dc:	4a1f      	ldr	r2, [pc, #124]	@ (800b25c <chk_lock+0xb4>)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	011b      	lsls	r3, r3, #4
 800b1e2:	4413      	add	r3, r2
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	681a      	ldr	r2, [r3, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d10c      	bne.n	800b20a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b1f0:	4a1a      	ldr	r2, [pc, #104]	@ (800b25c <chk_lock+0xb4>)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	011b      	lsls	r3, r3, #4
 800b1f6:	4413      	add	r3, r2
 800b1f8:	3308      	adds	r3, #8
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b200:	429a      	cmp	r2, r3
 800b202:	d102      	bne.n	800b20a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b204:	e007      	b.n	800b216 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b206:	2301      	movs	r3, #1
 800b208:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	3301      	adds	r3, #1
 800b20e:	60fb      	str	r3, [r7, #12]
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d9d2      	bls.n	800b1bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d109      	bne.n	800b230 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d102      	bne.n	800b228 <chk_lock+0x80>
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	2b02      	cmp	r3, #2
 800b226:	d101      	bne.n	800b22c <chk_lock+0x84>
 800b228:	2300      	movs	r3, #0
 800b22a:	e010      	b.n	800b24e <chk_lock+0xa6>
 800b22c:	2312      	movs	r3, #18
 800b22e:	e00e      	b.n	800b24e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d108      	bne.n	800b248 <chk_lock+0xa0>
 800b236:	4a09      	ldr	r2, [pc, #36]	@ (800b25c <chk_lock+0xb4>)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	011b      	lsls	r3, r3, #4
 800b23c:	4413      	add	r3, r2
 800b23e:	330c      	adds	r3, #12
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b246:	d101      	bne.n	800b24c <chk_lock+0xa4>
 800b248:	2310      	movs	r3, #16
 800b24a:	e000      	b.n	800b24e <chk_lock+0xa6>
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3714      	adds	r7, #20
 800b252:	46bd      	mov	sp, r7
 800b254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b258:	4770      	bx	lr
 800b25a:	bf00      	nop
 800b25c:	20000304 	.word	0x20000304

0800b260 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b266:	2300      	movs	r3, #0
 800b268:	607b      	str	r3, [r7, #4]
 800b26a:	e002      	b.n	800b272 <enq_lock+0x12>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	3301      	adds	r3, #1
 800b270:	607b      	str	r3, [r7, #4]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b01      	cmp	r3, #1
 800b276:	d806      	bhi.n	800b286 <enq_lock+0x26>
 800b278:	4a09      	ldr	r2, [pc, #36]	@ (800b2a0 <enq_lock+0x40>)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	011b      	lsls	r3, r3, #4
 800b27e:	4413      	add	r3, r2
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1f2      	bne.n	800b26c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2b02      	cmp	r3, #2
 800b28a:	bf14      	ite	ne
 800b28c:	2301      	movne	r3, #1
 800b28e:	2300      	moveq	r3, #0
 800b290:	b2db      	uxtb	r3, r3
}
 800b292:	4618      	mov	r0, r3
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop
 800b2a0:	20000304 	.word	0x20000304

0800b2a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	60fb      	str	r3, [r7, #12]
 800b2b2:	e01f      	b.n	800b2f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b2b4:	4a41      	ldr	r2, [pc, #260]	@ (800b3bc <inc_lock+0x118>)
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	011b      	lsls	r3, r3, #4
 800b2ba:	4413      	add	r3, r2
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d113      	bne.n	800b2ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b2c6:	4a3d      	ldr	r2, [pc, #244]	@ (800b3bc <inc_lock+0x118>)
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	011b      	lsls	r3, r3, #4
 800b2cc:	4413      	add	r3, r2
 800b2ce:	3304      	adds	r3, #4
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d109      	bne.n	800b2ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b2da:	4a38      	ldr	r2, [pc, #224]	@ (800b3bc <inc_lock+0x118>)
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	011b      	lsls	r3, r3, #4
 800b2e0:	4413      	add	r3, r2
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d006      	beq.n	800b2fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	60fb      	str	r3, [r7, #12]
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d9dc      	bls.n	800b2b4 <inc_lock+0x10>
 800b2fa:	e000      	b.n	800b2fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b2fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2b02      	cmp	r3, #2
 800b302:	d132      	bne.n	800b36a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b304:	2300      	movs	r3, #0
 800b306:	60fb      	str	r3, [r7, #12]
 800b308:	e002      	b.n	800b310 <inc_lock+0x6c>
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	3301      	adds	r3, #1
 800b30e:	60fb      	str	r3, [r7, #12]
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2b01      	cmp	r3, #1
 800b314:	d806      	bhi.n	800b324 <inc_lock+0x80>
 800b316:	4a29      	ldr	r2, [pc, #164]	@ (800b3bc <inc_lock+0x118>)
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	011b      	lsls	r3, r3, #4
 800b31c:	4413      	add	r3, r2
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1f2      	bne.n	800b30a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2b02      	cmp	r3, #2
 800b328:	d101      	bne.n	800b32e <inc_lock+0x8a>
 800b32a:	2300      	movs	r3, #0
 800b32c:	e040      	b.n	800b3b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	4922      	ldr	r1, [pc, #136]	@ (800b3bc <inc_lock+0x118>)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	011b      	lsls	r3, r3, #4
 800b338:	440b      	add	r3, r1
 800b33a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	689a      	ldr	r2, [r3, #8]
 800b340:	491e      	ldr	r1, [pc, #120]	@ (800b3bc <inc_lock+0x118>)
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	011b      	lsls	r3, r3, #4
 800b346:	440b      	add	r3, r1
 800b348:	3304      	adds	r3, #4
 800b34a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	695a      	ldr	r2, [r3, #20]
 800b350:	491a      	ldr	r1, [pc, #104]	@ (800b3bc <inc_lock+0x118>)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	011b      	lsls	r3, r3, #4
 800b356:	440b      	add	r3, r1
 800b358:	3308      	adds	r3, #8
 800b35a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b35c:	4a17      	ldr	r2, [pc, #92]	@ (800b3bc <inc_lock+0x118>)
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	011b      	lsls	r3, r3, #4
 800b362:	4413      	add	r3, r2
 800b364:	330c      	adds	r3, #12
 800b366:	2200      	movs	r2, #0
 800b368:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d009      	beq.n	800b384 <inc_lock+0xe0>
 800b370:	4a12      	ldr	r2, [pc, #72]	@ (800b3bc <inc_lock+0x118>)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	011b      	lsls	r3, r3, #4
 800b376:	4413      	add	r3, r2
 800b378:	330c      	adds	r3, #12
 800b37a:	881b      	ldrh	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d001      	beq.n	800b384 <inc_lock+0xe0>
 800b380:	2300      	movs	r3, #0
 800b382:	e015      	b.n	800b3b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d108      	bne.n	800b39c <inc_lock+0xf8>
 800b38a:	4a0c      	ldr	r2, [pc, #48]	@ (800b3bc <inc_lock+0x118>)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	011b      	lsls	r3, r3, #4
 800b390:	4413      	add	r3, r2
 800b392:	330c      	adds	r3, #12
 800b394:	881b      	ldrh	r3, [r3, #0]
 800b396:	3301      	adds	r3, #1
 800b398:	b29a      	uxth	r2, r3
 800b39a:	e001      	b.n	800b3a0 <inc_lock+0xfc>
 800b39c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b3a0:	4906      	ldr	r1, [pc, #24]	@ (800b3bc <inc_lock+0x118>)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	011b      	lsls	r3, r3, #4
 800b3a6:	440b      	add	r3, r1
 800b3a8:	330c      	adds	r3, #12
 800b3aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	3301      	adds	r3, #1
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3714      	adds	r7, #20
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	20000304 	.word	0x20000304

0800b3c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	607b      	str	r3, [r7, #4]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d825      	bhi.n	800b420 <dec_lock+0x60>
		n = Files[i].ctr;
 800b3d4:	4a17      	ldr	r2, [pc, #92]	@ (800b434 <dec_lock+0x74>)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	011b      	lsls	r3, r3, #4
 800b3da:	4413      	add	r3, r2
 800b3dc:	330c      	adds	r3, #12
 800b3de:	881b      	ldrh	r3, [r3, #0]
 800b3e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b3e2:	89fb      	ldrh	r3, [r7, #14]
 800b3e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3e8:	d101      	bne.n	800b3ee <dec_lock+0x2e>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b3ee:	89fb      	ldrh	r3, [r7, #14]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d002      	beq.n	800b3fa <dec_lock+0x3a>
 800b3f4:	89fb      	ldrh	r3, [r7, #14]
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b3fa:	4a0e      	ldr	r2, [pc, #56]	@ (800b434 <dec_lock+0x74>)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	011b      	lsls	r3, r3, #4
 800b400:	4413      	add	r3, r2
 800b402:	330c      	adds	r3, #12
 800b404:	89fa      	ldrh	r2, [r7, #14]
 800b406:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b408:	89fb      	ldrh	r3, [r7, #14]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d105      	bne.n	800b41a <dec_lock+0x5a>
 800b40e:	4a09      	ldr	r2, [pc, #36]	@ (800b434 <dec_lock+0x74>)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	011b      	lsls	r3, r3, #4
 800b414:	4413      	add	r3, r2
 800b416:	2200      	movs	r2, #0
 800b418:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b41a:	2300      	movs	r3, #0
 800b41c:	737b      	strb	r3, [r7, #13]
 800b41e:	e001      	b.n	800b424 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b420:	2302      	movs	r3, #2
 800b422:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b424:	7b7b      	ldrb	r3, [r7, #13]
}
 800b426:	4618      	mov	r0, r3
 800b428:	3714      	adds	r7, #20
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	20000304 	.word	0x20000304

0800b438 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b438:	b480      	push	{r7}
 800b43a:	b085      	sub	sp, #20
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b440:	2300      	movs	r3, #0
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	e010      	b.n	800b468 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b446:	4a0d      	ldr	r2, [pc, #52]	@ (800b47c <clear_lock+0x44>)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	011b      	lsls	r3, r3, #4
 800b44c:	4413      	add	r3, r2
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	429a      	cmp	r2, r3
 800b454:	d105      	bne.n	800b462 <clear_lock+0x2a>
 800b456:	4a09      	ldr	r2, [pc, #36]	@ (800b47c <clear_lock+0x44>)
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	011b      	lsls	r3, r3, #4
 800b45c:	4413      	add	r3, r2
 800b45e:	2200      	movs	r2, #0
 800b460:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3301      	adds	r3, #1
 800b466:	60fb      	str	r3, [r7, #12]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d9eb      	bls.n	800b446 <clear_lock+0xe>
	}
}
 800b46e:	bf00      	nop
 800b470:	bf00      	nop
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr
 800b47c:	20000304 	.word	0x20000304

0800b480 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	78db      	ldrb	r3, [r3, #3]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d034      	beq.n	800b4fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b498:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	7858      	ldrb	r0, [r3, #1]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	697a      	ldr	r2, [r7, #20]
 800b4a8:	f7ff fd3e 	bl	800af28 <disk_write>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d002      	beq.n	800b4b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	73fb      	strb	r3, [r7, #15]
 800b4b6:	e022      	b.n	800b4fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6a1b      	ldr	r3, [r3, #32]
 800b4c2:	697a      	ldr	r2, [r7, #20]
 800b4c4:	1ad2      	subs	r2, r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	699b      	ldr	r3, [r3, #24]
 800b4ca:	429a      	cmp	r2, r3
 800b4cc:	d217      	bcs.n	800b4fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	789b      	ldrb	r3, [r3, #2]
 800b4d2:	613b      	str	r3, [r7, #16]
 800b4d4:	e010      	b.n	800b4f8 <sync_window+0x78>
					wsect += fs->fsize;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	699b      	ldr	r3, [r3, #24]
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	4413      	add	r3, r2
 800b4de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	7858      	ldrb	r0, [r3, #1]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	697a      	ldr	r2, [r7, #20]
 800b4ee:	f7ff fd1b 	bl	800af28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	3b01      	subs	r3, #1
 800b4f6:	613b      	str	r3, [r7, #16]
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d8eb      	bhi.n	800b4d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b4fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3718      	adds	r7, #24
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b084      	sub	sp, #16
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d01b      	beq.n	800b558 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7ff ffad 	bl	800b480 <sync_window>
 800b526:	4603      	mov	r3, r0
 800b528:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b52a:	7bfb      	ldrb	r3, [r7, #15]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d113      	bne.n	800b558 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	7858      	ldrb	r0, [r3, #1]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b53a:	2301      	movs	r3, #1
 800b53c:	683a      	ldr	r2, [r7, #0]
 800b53e:	f7ff fcd3 	bl	800aee8 <disk_read>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d004      	beq.n	800b552 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b548:	f04f 33ff 	mov.w	r3, #4294967295
 800b54c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b54e:	2301      	movs	r3, #1
 800b550:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	683a      	ldr	r2, [r7, #0]
 800b556:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800b558:	7bfb      	ldrb	r3, [r7, #15]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
	...

0800b564 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7ff ff87 	bl	800b480 <sync_window>
 800b572:	4603      	mov	r3, r0
 800b574:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b576:	7bfb      	ldrb	r3, [r7, #15]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d158      	bne.n	800b62e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b03      	cmp	r3, #3
 800b582:	d148      	bne.n	800b616 <sync_fs+0xb2>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	791b      	ldrb	r3, [r3, #4]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d144      	bne.n	800b616 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	3330      	adds	r3, #48	@ 0x30
 800b590:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b594:	2100      	movs	r1, #0
 800b596:	4618      	mov	r0, r3
 800b598:	f7ff fda8 	bl	800b0ec <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	3330      	adds	r3, #48	@ 0x30
 800b5a0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b5a4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f7ff fd37 	bl	800b01c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	3330      	adds	r3, #48	@ 0x30
 800b5b2:	4921      	ldr	r1, [pc, #132]	@ (800b638 <sync_fs+0xd4>)
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	f7ff fd4c 	bl	800b052 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	3330      	adds	r3, #48	@ 0x30
 800b5be:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b5c2:	491e      	ldr	r1, [pc, #120]	@ (800b63c <sync_fs+0xd8>)
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7ff fd44 	bl	800b052 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	3330      	adds	r3, #48	@ 0x30
 800b5ce:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	4610      	mov	r0, r2
 800b5da:	f7ff fd3a 	bl	800b052 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	3330      	adds	r3, #48	@ 0x30
 800b5e2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	f7ff fd30 	bl	800b052 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	69db      	ldr	r3, [r3, #28]
 800b5f6:	1c5a      	adds	r2, r3, #1
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	7858      	ldrb	r0, [r3, #1]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b60a:	2301      	movs	r3, #1
 800b60c:	f7ff fc8c 	bl	800af28 <disk_write>
			fs->fsi_flag = 0;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	785b      	ldrb	r3, [r3, #1]
 800b61a:	2200      	movs	r2, #0
 800b61c:	2100      	movs	r1, #0
 800b61e:	4618      	mov	r0, r3
 800b620:	f7ff fca2 	bl	800af68 <disk_ioctl>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d001      	beq.n	800b62e <sync_fs+0xca>
 800b62a:	2301      	movs	r3, #1
 800b62c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3710      	adds	r7, #16
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	41615252 	.word	0x41615252
 800b63c:	61417272 	.word	0x61417272

0800b640 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	3b02      	subs	r3, #2
 800b64e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	695b      	ldr	r3, [r3, #20]
 800b654:	3b02      	subs	r3, #2
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	429a      	cmp	r2, r3
 800b65a:	d301      	bcc.n	800b660 <clust2sect+0x20>
 800b65c:	2300      	movs	r3, #0
 800b65e:	e008      	b.n	800b672 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	895b      	ldrh	r3, [r3, #10]
 800b664:	461a      	mov	r2, r3
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	fb03 f202 	mul.w	r2, r3, r2
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b670:	4413      	add	r3, r2
}
 800b672:	4618      	mov	r0, r3
 800b674:	370c      	adds	r7, #12
 800b676:	46bd      	mov	sp, r7
 800b678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67c:	4770      	bx	lr

0800b67e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b67e:	b580      	push	{r7, lr}
 800b680:	b086      	sub	sp, #24
 800b682:	af00      	add	r7, sp, #0
 800b684:	6078      	str	r0, [r7, #4]
 800b686:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	2b01      	cmp	r3, #1
 800b692:	d904      	bls.n	800b69e <get_fat+0x20>
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	695b      	ldr	r3, [r3, #20]
 800b698:	683a      	ldr	r2, [r7, #0]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d302      	bcc.n	800b6a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b69e:	2301      	movs	r3, #1
 800b6a0:	617b      	str	r3, [r7, #20]
 800b6a2:	e08e      	b.n	800b7c2 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b6a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	2b03      	cmp	r3, #3
 800b6b0:	d061      	beq.n	800b776 <get_fat+0xf8>
 800b6b2:	2b03      	cmp	r3, #3
 800b6b4:	dc7b      	bgt.n	800b7ae <get_fat+0x130>
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d002      	beq.n	800b6c0 <get_fat+0x42>
 800b6ba:	2b02      	cmp	r3, #2
 800b6bc:	d041      	beq.n	800b742 <get_fat+0xc4>
 800b6be:	e076      	b.n	800b7ae <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	60fb      	str	r3, [r7, #12]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	085b      	lsrs	r3, r3, #1
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	6a1a      	ldr	r2, [r3, #32]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	0a5b      	lsrs	r3, r3, #9
 800b6d6:	4413      	add	r3, r2
 800b6d8:	4619      	mov	r1, r3
 800b6da:	6938      	ldr	r0, [r7, #16]
 800b6dc:	f7ff ff14 	bl	800b508 <move_window>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d166      	bne.n	800b7b4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	1c5a      	adds	r2, r3, #1
 800b6ea:	60fa      	str	r2, [r7, #12]
 800b6ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6f0:	693a      	ldr	r2, [r7, #16]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b6f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	6a1a      	ldr	r2, [r3, #32]
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	0a5b      	lsrs	r3, r3, #9
 800b702:	4413      	add	r3, r2
 800b704:	4619      	mov	r1, r3
 800b706:	6938      	ldr	r0, [r7, #16]
 800b708:	f7ff fefe 	bl	800b508 <move_window>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d152      	bne.n	800b7b8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	4413      	add	r3, r2
 800b71c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b720:	021b      	lsls	r3, r3, #8
 800b722:	68ba      	ldr	r2, [r7, #8]
 800b724:	4313      	orrs	r3, r2
 800b726:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	f003 0301 	and.w	r3, r3, #1
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d002      	beq.n	800b738 <get_fat+0xba>
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	091b      	lsrs	r3, r3, #4
 800b736:	e002      	b.n	800b73e <get_fat+0xc0>
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b73e:	617b      	str	r3, [r7, #20]
			break;
 800b740:	e03f      	b.n	800b7c2 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	6a1a      	ldr	r2, [r3, #32]
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	0a1b      	lsrs	r3, r3, #8
 800b74a:	4413      	add	r3, r2
 800b74c:	4619      	mov	r1, r3
 800b74e:	6938      	ldr	r0, [r7, #16]
 800b750:	f7ff feda 	bl	800b508 <move_window>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d130      	bne.n	800b7bc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	005b      	lsls	r3, r3, #1
 800b764:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b768:	4413      	add	r3, r2
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7ff fc1a 	bl	800afa4 <ld_word>
 800b770:	4603      	mov	r3, r0
 800b772:	617b      	str	r3, [r7, #20]
			break;
 800b774:	e025      	b.n	800b7c2 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	6a1a      	ldr	r2, [r3, #32]
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	09db      	lsrs	r3, r3, #7
 800b77e:	4413      	add	r3, r2
 800b780:	4619      	mov	r1, r3
 800b782:	6938      	ldr	r0, [r7, #16]
 800b784:	f7ff fec0 	bl	800b508 <move_window>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d118      	bne.n	800b7c0 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b79c:	4413      	add	r3, r2
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7ff fc19 	bl	800afd6 <ld_dword>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b7aa:	617b      	str	r3, [r7, #20]
			break;
 800b7ac:	e009      	b.n	800b7c2 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	617b      	str	r3, [r7, #20]
 800b7b2:	e006      	b.n	800b7c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7b4:	bf00      	nop
 800b7b6:	e004      	b.n	800b7c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b7b8:	bf00      	nop
 800b7ba:	e002      	b.n	800b7c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b7bc:	bf00      	nop
 800b7be:	e000      	b.n	800b7c2 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b7c0:	bf00      	nop
		}
	}

	return val;
 800b7c2:	697b      	ldr	r3, [r7, #20]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3718      	adds	r7, #24
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b7cc:	b590      	push	{r4, r7, lr}
 800b7ce:	b089      	sub	sp, #36	@ 0x24
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b7d8:	2302      	movs	r3, #2
 800b7da:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	f240 80d9 	bls.w	800b996 <put_fat+0x1ca>
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	695b      	ldr	r3, [r3, #20]
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	f080 80d3 	bcs.w	800b996 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	2b03      	cmp	r3, #3
 800b7f6:	f000 8096 	beq.w	800b926 <put_fat+0x15a>
 800b7fa:	2b03      	cmp	r3, #3
 800b7fc:	f300 80cb 	bgt.w	800b996 <put_fat+0x1ca>
 800b800:	2b01      	cmp	r3, #1
 800b802:	d002      	beq.n	800b80a <put_fat+0x3e>
 800b804:	2b02      	cmp	r3, #2
 800b806:	d06e      	beq.n	800b8e6 <put_fat+0x11a>
 800b808:	e0c5      	b.n	800b996 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	61bb      	str	r3, [r7, #24]
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	085b      	lsrs	r3, r3, #1
 800b812:	69ba      	ldr	r2, [r7, #24]
 800b814:	4413      	add	r3, r2
 800b816:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6a1a      	ldr	r2, [r3, #32]
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	0a5b      	lsrs	r3, r3, #9
 800b820:	4413      	add	r3, r2
 800b822:	4619      	mov	r1, r3
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f7ff fe6f 	bl	800b508 <move_window>
 800b82a:	4603      	mov	r3, r0
 800b82c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b82e:	7ffb      	ldrb	r3, [r7, #31]
 800b830:	2b00      	cmp	r3, #0
 800b832:	f040 80a9 	bne.w	800b988 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	1c59      	adds	r1, r3, #1
 800b840:	61b9      	str	r1, [r7, #24]
 800b842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b846:	4413      	add	r3, r2
 800b848:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	f003 0301 	and.w	r3, r3, #1
 800b850:	2b00      	cmp	r3, #0
 800b852:	d00d      	beq.n	800b870 <put_fat+0xa4>
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	b25b      	sxtb	r3, r3
 800b85a:	f003 030f 	and.w	r3, r3, #15
 800b85e:	b25a      	sxtb	r2, r3
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	b25b      	sxtb	r3, r3
 800b864:	011b      	lsls	r3, r3, #4
 800b866:	b25b      	sxtb	r3, r3
 800b868:	4313      	orrs	r3, r2
 800b86a:	b25b      	sxtb	r3, r3
 800b86c:	b2db      	uxtb	r3, r3
 800b86e:	e001      	b.n	800b874 <put_fat+0xa8>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	b2db      	uxtb	r3, r3
 800b874:	697a      	ldr	r2, [r7, #20]
 800b876:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2201      	movs	r2, #1
 800b87c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6a1a      	ldr	r2, [r3, #32]
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	0a5b      	lsrs	r3, r3, #9
 800b886:	4413      	add	r3, r2
 800b888:	4619      	mov	r1, r3
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f7ff fe3c 	bl	800b508 <move_window>
 800b890:	4603      	mov	r3, r0
 800b892:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b894:	7ffb      	ldrb	r3, [r7, #31]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d178      	bne.n	800b98c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8a6:	4413      	add	r3, r2
 800b8a8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	f003 0301 	and.w	r3, r3, #1
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d003      	beq.n	800b8bc <put_fat+0xf0>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	091b      	lsrs	r3, r3, #4
 800b8b8:	b2db      	uxtb	r3, r3
 800b8ba:	e00e      	b.n	800b8da <put_fat+0x10e>
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	b25b      	sxtb	r3, r3
 800b8c2:	f023 030f 	bic.w	r3, r3, #15
 800b8c6:	b25a      	sxtb	r2, r3
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	0a1b      	lsrs	r3, r3, #8
 800b8cc:	b25b      	sxtb	r3, r3
 800b8ce:	f003 030f 	and.w	r3, r3, #15
 800b8d2:	b25b      	sxtb	r3, r3
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	b25b      	sxtb	r3, r3
 800b8d8:	b2db      	uxtb	r3, r3
 800b8da:	697a      	ldr	r2, [r7, #20]
 800b8dc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	70da      	strb	r2, [r3, #3]
			break;
 800b8e4:	e057      	b.n	800b996 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6a1a      	ldr	r2, [r3, #32]
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	0a1b      	lsrs	r3, r3, #8
 800b8ee:	4413      	add	r3, r2
 800b8f0:	4619      	mov	r1, r3
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f7ff fe08 	bl	800b508 <move_window>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b8fc:	7ffb      	ldrb	r3, [r7, #31]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d146      	bne.n	800b990 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	005b      	lsls	r3, r3, #1
 800b90c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b910:	4413      	add	r3, r2
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	b292      	uxth	r2, r2
 800b916:	4611      	mov	r1, r2
 800b918:	4618      	mov	r0, r3
 800b91a:	f7ff fb7f 	bl	800b01c <st_word>
			fs->wflag = 1;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2201      	movs	r2, #1
 800b922:	70da      	strb	r2, [r3, #3]
			break;
 800b924:	e037      	b.n	800b996 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6a1a      	ldr	r2, [r3, #32]
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	09db      	lsrs	r3, r3, #7
 800b92e:	4413      	add	r3, r2
 800b930:	4619      	mov	r1, r3
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f7ff fde8 	bl	800b508 <move_window>
 800b938:	4603      	mov	r3, r0
 800b93a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b93c:	7ffb      	ldrb	r3, [r7, #31]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d128      	bne.n	800b994 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b956:	4413      	add	r3, r2
 800b958:	4618      	mov	r0, r3
 800b95a:	f7ff fb3c 	bl	800afd6 <ld_dword>
 800b95e:	4603      	mov	r3, r0
 800b960:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800b964:	4323      	orrs	r3, r4
 800b966:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	009b      	lsls	r3, r3, #2
 800b972:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b976:	4413      	add	r3, r2
 800b978:	6879      	ldr	r1, [r7, #4]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7ff fb69 	bl	800b052 <st_dword>
			fs->wflag = 1;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2201      	movs	r2, #1
 800b984:	70da      	strb	r2, [r3, #3]
			break;
 800b986:	e006      	b.n	800b996 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b988:	bf00      	nop
 800b98a:	e004      	b.n	800b996 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b98c:	bf00      	nop
 800b98e:	e002      	b.n	800b996 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b990:	bf00      	nop
 800b992:	e000      	b.n	800b996 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b994:	bf00      	nop
		}
	}
	return res;
 800b996:	7ffb      	ldrb	r3, [r7, #31]
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3724      	adds	r7, #36	@ 0x24
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd90      	pop	{r4, r7, pc}

0800b9a0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b088      	sub	sp, #32
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60f8      	str	r0, [r7, #12]
 800b9a8:	60b9      	str	r1, [r7, #8]
 800b9aa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d904      	bls.n	800b9c6 <remove_chain+0x26>
 800b9bc:	69bb      	ldr	r3, [r7, #24]
 800b9be:	695b      	ldr	r3, [r3, #20]
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d301      	bcc.n	800b9ca <remove_chain+0x2a>
 800b9c6:	2302      	movs	r3, #2
 800b9c8:	e04b      	b.n	800ba62 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00c      	beq.n	800b9ea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b9d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d4:	6879      	ldr	r1, [r7, #4]
 800b9d6:	69b8      	ldr	r0, [r7, #24]
 800b9d8:	f7ff fef8 	bl	800b7cc <put_fat>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b9e0:	7ffb      	ldrb	r3, [r7, #31]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <remove_chain+0x4a>
 800b9e6:	7ffb      	ldrb	r3, [r7, #31]
 800b9e8:	e03b      	b.n	800ba62 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b9ea:	68b9      	ldr	r1, [r7, #8]
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	f7ff fe46 	bl	800b67e <get_fat>
 800b9f2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d031      	beq.n	800ba5e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b9fa:	697b      	ldr	r3, [r7, #20]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d101      	bne.n	800ba04 <remove_chain+0x64>
 800ba00:	2302      	movs	r3, #2
 800ba02:	e02e      	b.n	800ba62 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba0a:	d101      	bne.n	800ba10 <remove_chain+0x70>
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	e028      	b.n	800ba62 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ba10:	2200      	movs	r2, #0
 800ba12:	68b9      	ldr	r1, [r7, #8]
 800ba14:	69b8      	ldr	r0, [r7, #24]
 800ba16:	f7ff fed9 	bl	800b7cc <put_fat>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ba1e:	7ffb      	ldrb	r3, [r7, #31]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d001      	beq.n	800ba28 <remove_chain+0x88>
 800ba24:	7ffb      	ldrb	r3, [r7, #31]
 800ba26:	e01c      	b.n	800ba62 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	691a      	ldr	r2, [r3, #16]
 800ba2c:	69bb      	ldr	r3, [r7, #24]
 800ba2e:	695b      	ldr	r3, [r3, #20]
 800ba30:	3b02      	subs	r3, #2
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d20b      	bcs.n	800ba4e <remove_chain+0xae>
			fs->free_clst++;
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	691b      	ldr	r3, [r3, #16]
 800ba3a:	1c5a      	adds	r2, r3, #1
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ba40:	69bb      	ldr	r3, [r7, #24]
 800ba42:	791b      	ldrb	r3, [r3, #4]
 800ba44:	f043 0301 	orr.w	r3, r3, #1
 800ba48:	b2da      	uxtb	r2, r3
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d3c6      	bcc.n	800b9ea <remove_chain+0x4a>
 800ba5c:	e000      	b.n	800ba60 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ba5e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3720      	adds	r7, #32
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b088      	sub	sp, #32
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
 800ba72:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d10d      	bne.n	800ba9c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d004      	beq.n	800ba96 <create_chain+0x2c>
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	695b      	ldr	r3, [r3, #20]
 800ba90:	69ba      	ldr	r2, [r7, #24]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d31b      	bcc.n	800bace <create_chain+0x64>
 800ba96:	2301      	movs	r3, #1
 800ba98:	61bb      	str	r3, [r7, #24]
 800ba9a:	e018      	b.n	800bace <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ba9c:	6839      	ldr	r1, [r7, #0]
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7ff fded 	bl	800b67e <get_fat>
 800baa4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d801      	bhi.n	800bab0 <create_chain+0x46>
 800baac:	2301      	movs	r3, #1
 800baae:	e070      	b.n	800bb92 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bab6:	d101      	bne.n	800babc <create_chain+0x52>
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	e06a      	b.n	800bb92 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	695b      	ldr	r3, [r3, #20]
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d201      	bcs.n	800baca <create_chain+0x60>
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	e063      	b.n	800bb92 <create_chain+0x128>
		scl = clst;
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	3301      	adds	r3, #1
 800bad6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	695b      	ldr	r3, [r3, #20]
 800badc:	69fa      	ldr	r2, [r7, #28]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d307      	bcc.n	800baf2 <create_chain+0x88>
				ncl = 2;
 800bae2:	2302      	movs	r3, #2
 800bae4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bae6:	69fa      	ldr	r2, [r7, #28]
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	429a      	cmp	r2, r3
 800baec:	d901      	bls.n	800baf2 <create_chain+0x88>
 800baee:	2300      	movs	r3, #0
 800baf0:	e04f      	b.n	800bb92 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800baf2:	69f9      	ldr	r1, [r7, #28]
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f7ff fdc2 	bl	800b67e <get_fat>
 800bafa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00e      	beq.n	800bb20 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d003      	beq.n	800bb10 <create_chain+0xa6>
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0e:	d101      	bne.n	800bb14 <create_chain+0xaa>
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	e03e      	b.n	800bb92 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bb14:	69fa      	ldr	r2, [r7, #28]
 800bb16:	69bb      	ldr	r3, [r7, #24]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d1da      	bne.n	800bad2 <create_chain+0x68>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	e038      	b.n	800bb92 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bb20:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bb22:	f04f 32ff 	mov.w	r2, #4294967295
 800bb26:	69f9      	ldr	r1, [r7, #28]
 800bb28:	6938      	ldr	r0, [r7, #16]
 800bb2a:	f7ff fe4f 	bl	800b7cc <put_fat>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bb32:	7dfb      	ldrb	r3, [r7, #23]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d109      	bne.n	800bb4c <create_chain+0xe2>
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d006      	beq.n	800bb4c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bb3e:	69fa      	ldr	r2, [r7, #28]
 800bb40:	6839      	ldr	r1, [r7, #0]
 800bb42:	6938      	ldr	r0, [r7, #16]
 800bb44:	f7ff fe42 	bl	800b7cc <put_fat>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bb4c:	7dfb      	ldrb	r3, [r7, #23]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d116      	bne.n	800bb80 <create_chain+0x116>
		fs->last_clst = ncl;
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	69fa      	ldr	r2, [r7, #28]
 800bb56:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	691a      	ldr	r2, [r3, #16]
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	695b      	ldr	r3, [r3, #20]
 800bb60:	3b02      	subs	r3, #2
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d804      	bhi.n	800bb70 <create_chain+0x106>
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	1e5a      	subs	r2, r3, #1
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	791b      	ldrb	r3, [r3, #4]
 800bb74:	f043 0301 	orr.w	r3, r3, #1
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	711a      	strb	r2, [r3, #4]
 800bb7e:	e007      	b.n	800bb90 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bb80:	7dfb      	ldrb	r3, [r7, #23]
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d102      	bne.n	800bb8c <create_chain+0x122>
 800bb86:	f04f 33ff 	mov.w	r3, #4294967295
 800bb8a:	e000      	b.n	800bb8e <create_chain+0x124>
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bb90:	69fb      	ldr	r3, [r7, #28]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3720      	adds	r7, #32
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b087      	sub	sp, #28
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbae:	3304      	adds	r3, #4
 800bbb0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	0a5b      	lsrs	r3, r3, #9
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	8952      	ldrh	r2, [r2, #10]
 800bbba:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbbe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	1d1a      	adds	r2, r3, #4
 800bbc4:	613a      	str	r2, [r7, #16]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d101      	bne.n	800bbd4 <clmt_clust+0x3a>
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	e010      	b.n	800bbf6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bbd4:	697a      	ldr	r2, [r7, #20]
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d307      	bcc.n	800bbec <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bbdc:	697a      	ldr	r2, [r7, #20]
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	617b      	str	r3, [r7, #20]
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bbea:	e7e9      	b.n	800bbc0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bbec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	681a      	ldr	r2, [r3, #0]
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	4413      	add	r3, r2
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	371c      	adds	r7, #28
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b086      	sub	sp, #24
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
 800bc0a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc18:	d204      	bcs.n	800bc24 <dir_sdi+0x22>
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	f003 031f 	and.w	r3, r3, #31
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d001      	beq.n	800bc28 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bc24:	2302      	movs	r3, #2
 800bc26:	e063      	b.n	800bcf0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	683a      	ldr	r2, [r7, #0]
 800bc2c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d106      	bne.n	800bc48 <dir_sdi+0x46>
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	d902      	bls.n	800bc48 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc46:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bc48:	697b      	ldr	r3, [r7, #20]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d10c      	bne.n	800bc68 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	095b      	lsrs	r3, r3, #5
 800bc52:	693a      	ldr	r2, [r7, #16]
 800bc54:	8912      	ldrh	r2, [r2, #8]
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d301      	bcc.n	800bc5e <dir_sdi+0x5c>
 800bc5a:	2302      	movs	r3, #2
 800bc5c:	e048      	b.n	800bcf0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	61da      	str	r2, [r3, #28]
 800bc66:	e029      	b.n	800bcbc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	895b      	ldrh	r3, [r3, #10]
 800bc6c:	025b      	lsls	r3, r3, #9
 800bc6e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bc70:	e019      	b.n	800bca6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6979      	ldr	r1, [r7, #20]
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7ff fd01 	bl	800b67e <get_fat>
 800bc7c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc84:	d101      	bne.n	800bc8a <dir_sdi+0x88>
 800bc86:	2301      	movs	r3, #1
 800bc88:	e032      	b.n	800bcf0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d904      	bls.n	800bc9a <dir_sdi+0x98>
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	695b      	ldr	r3, [r3, #20]
 800bc94:	697a      	ldr	r2, [r7, #20]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d301      	bcc.n	800bc9e <dir_sdi+0x9c>
 800bc9a:	2302      	movs	r3, #2
 800bc9c:	e028      	b.n	800bcf0 <dir_sdi+0xee>
			ofs -= csz;
 800bc9e:	683a      	ldr	r2, [r7, #0]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	1ad3      	subs	r3, r2, r3
 800bca4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bca6:	683a      	ldr	r2, [r7, #0]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d2e1      	bcs.n	800bc72 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800bcae:	6979      	ldr	r1, [r7, #20]
 800bcb0:	6938      	ldr	r0, [r7, #16]
 800bcb2:	f7ff fcc5 	bl	800b640 <clust2sect>
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	697a      	ldr	r2, [r7, #20]
 800bcc0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	69db      	ldr	r3, [r3, #28]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d101      	bne.n	800bcce <dir_sdi+0xcc>
 800bcca:	2302      	movs	r3, #2
 800bccc:	e010      	b.n	800bcf0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	69da      	ldr	r2, [r3, #28]
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	0a5b      	lsrs	r3, r3, #9
 800bcd6:	441a      	add	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bce8:	441a      	add	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3718      	adds	r7, #24
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b086      	sub	sp, #24
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	695b      	ldr	r3, [r3, #20]
 800bd0c:	3320      	adds	r3, #32
 800bd0e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	69db      	ldr	r3, [r3, #28]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d003      	beq.n	800bd20 <dir_next+0x28>
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd1e:	d301      	bcc.n	800bd24 <dir_next+0x2c>
 800bd20:	2304      	movs	r3, #4
 800bd22:	e0aa      	b.n	800be7a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f040 8098 	bne.w	800be60 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	69db      	ldr	r3, [r3, #28]
 800bd34:	1c5a      	adds	r2, r3, #1
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	699b      	ldr	r3, [r3, #24]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d10b      	bne.n	800bd5a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	095b      	lsrs	r3, r3, #5
 800bd46:	68fa      	ldr	r2, [r7, #12]
 800bd48:	8912      	ldrh	r2, [r2, #8]
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	f0c0 8088 	bcc.w	800be60 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	61da      	str	r2, [r3, #28]
 800bd56:	2304      	movs	r3, #4
 800bd58:	e08f      	b.n	800be7a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	0a5b      	lsrs	r3, r3, #9
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	8952      	ldrh	r2, [r2, #10]
 800bd62:	3a01      	subs	r2, #1
 800bd64:	4013      	ands	r3, r2
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d17a      	bne.n	800be60 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	699b      	ldr	r3, [r3, #24]
 800bd70:	4619      	mov	r1, r3
 800bd72:	4610      	mov	r0, r2
 800bd74:	f7ff fc83 	bl	800b67e <get_fat>
 800bd78:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d801      	bhi.n	800bd84 <dir_next+0x8c>
 800bd80:	2302      	movs	r3, #2
 800bd82:	e07a      	b.n	800be7a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd8a:	d101      	bne.n	800bd90 <dir_next+0x98>
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e074      	b.n	800be7a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	695b      	ldr	r3, [r3, #20]
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d358      	bcc.n	800be4c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d104      	bne.n	800bdaa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2200      	movs	r2, #0
 800bda4:	61da      	str	r2, [r3, #28]
 800bda6:	2304      	movs	r3, #4
 800bda8:	e067      	b.n	800be7a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	699b      	ldr	r3, [r3, #24]
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	4610      	mov	r0, r2
 800bdb4:	f7ff fe59 	bl	800ba6a <create_chain>
 800bdb8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d101      	bne.n	800bdc4 <dir_next+0xcc>
 800bdc0:	2307      	movs	r3, #7
 800bdc2:	e05a      	b.n	800be7a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d101      	bne.n	800bdce <dir_next+0xd6>
 800bdca:	2302      	movs	r3, #2
 800bdcc:	e055      	b.n	800be7a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd4:	d101      	bne.n	800bdda <dir_next+0xe2>
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e04f      	b.n	800be7a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f7ff fb50 	bl	800b480 <sync_window>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d001      	beq.n	800bdea <dir_next+0xf2>
 800bde6:	2301      	movs	r3, #1
 800bde8:	e047      	b.n	800be7a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	3330      	adds	r3, #48	@ 0x30
 800bdee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f7ff f979 	bl	800b0ec <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	613b      	str	r3, [r7, #16]
 800bdfe:	6979      	ldr	r1, [r7, #20]
 800be00:	68f8      	ldr	r0, [r7, #12]
 800be02:	f7ff fc1d 	bl	800b640 <clust2sect>
 800be06:	4602      	mov	r2, r0
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800be0c:	e012      	b.n	800be34 <dir_next+0x13c>
						fs->wflag = 1;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2201      	movs	r2, #1
 800be12:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	f7ff fb33 	bl	800b480 <sync_window>
 800be1a:	4603      	mov	r3, r0
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d001      	beq.n	800be24 <dir_next+0x12c>
 800be20:	2301      	movs	r3, #1
 800be22:	e02a      	b.n	800be7a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	3301      	adds	r3, #1
 800be28:	613b      	str	r3, [r7, #16]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be2e:	1c5a      	adds	r2, r3, #1
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	62da      	str	r2, [r3, #44]	@ 0x2c
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	895b      	ldrh	r3, [r3, #10]
 800be38:	461a      	mov	r2, r3
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d3e6      	bcc.n	800be0e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	1ad2      	subs	r2, r2, r3
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	697a      	ldr	r2, [r7, #20]
 800be50:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800be52:	6979      	ldr	r1, [r7, #20]
 800be54:	68f8      	ldr	r0, [r7, #12]
 800be56:	f7ff fbf3 	bl	800b640 <clust2sect>
 800be5a:	4602      	mov	r2, r0
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	68ba      	ldr	r2, [r7, #8]
 800be64:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be6c:	68bb      	ldr	r3, [r7, #8]
 800be6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be72:	441a      	add	r2, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800be78:	2300      	movs	r3, #0
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3718      	adds	r7, #24
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b086      	sub	sp, #24
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800be92:	2100      	movs	r1, #0
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f7ff feb4 	bl	800bc02 <dir_sdi>
 800be9a:	4603      	mov	r3, r0
 800be9c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800be9e:	7dfb      	ldrb	r3, [r7, #23]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d12b      	bne.n	800befc <dir_alloc+0x7a>
		n = 0;
 800bea4:	2300      	movs	r3, #0
 800bea6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	69db      	ldr	r3, [r3, #28]
 800beac:	4619      	mov	r1, r3
 800beae:	68f8      	ldr	r0, [r7, #12]
 800beb0:	f7ff fb2a 	bl	800b508 <move_window>
 800beb4:	4603      	mov	r3, r0
 800beb6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800beb8:	7dfb      	ldrb	r3, [r7, #23]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d11d      	bne.n	800befa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6a1b      	ldr	r3, [r3, #32]
 800bec2:	781b      	ldrb	r3, [r3, #0]
 800bec4:	2be5      	cmp	r3, #229	@ 0xe5
 800bec6:	d004      	beq.n	800bed2 <dir_alloc+0x50>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6a1b      	ldr	r3, [r3, #32]
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d107      	bne.n	800bee2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	3301      	adds	r3, #1
 800bed6:	613b      	str	r3, [r7, #16]
 800bed8:	693a      	ldr	r2, [r7, #16]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d102      	bne.n	800bee6 <dir_alloc+0x64>
 800bee0:	e00c      	b.n	800befc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bee2:	2300      	movs	r3, #0
 800bee4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bee6:	2101      	movs	r1, #1
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f7ff ff05 	bl	800bcf8 <dir_next>
 800beee:	4603      	mov	r3, r0
 800bef0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bef2:	7dfb      	ldrb	r3, [r7, #23]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d0d7      	beq.n	800bea8 <dir_alloc+0x26>
 800bef8:	e000      	b.n	800befc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800befa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800befc:	7dfb      	ldrb	r3, [r7, #23]
 800befe:	2b04      	cmp	r3, #4
 800bf00:	d101      	bne.n	800bf06 <dir_alloc+0x84>
 800bf02:	2307      	movs	r3, #7
 800bf04:	75fb      	strb	r3, [r7, #23]
	return res;
 800bf06:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	3718      	adds	r7, #24
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	331a      	adds	r3, #26
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7ff f840 	bl	800afa4 <ld_word>
 800bf24:	4603      	mov	r3, r0
 800bf26:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	2b03      	cmp	r3, #3
 800bf2e:	d109      	bne.n	800bf44 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	3314      	adds	r3, #20
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7ff f835 	bl	800afa4 <ld_word>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	041b      	lsls	r3, r3, #16
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bf44:	68fb      	ldr	r3, [r7, #12]
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}

0800bf4e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bf4e:	b580      	push	{r7, lr}
 800bf50:	b084      	sub	sp, #16
 800bf52:	af00      	add	r7, sp, #0
 800bf54:	60f8      	str	r0, [r7, #12]
 800bf56:	60b9      	str	r1, [r7, #8]
 800bf58:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	331a      	adds	r3, #26
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	b292      	uxth	r2, r2
 800bf62:	4611      	mov	r1, r2
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7ff f859 	bl	800b01c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	2b03      	cmp	r3, #3
 800bf70:	d109      	bne.n	800bf86 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	f103 0214 	add.w	r2, r3, #20
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	0c1b      	lsrs	r3, r3, #16
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	4619      	mov	r1, r3
 800bf80:	4610      	mov	r0, r2
 800bf82:	f7ff f84b 	bl	800b01c <st_word>
	}
}
 800bf86:	bf00      	nop
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bf8e:	b580      	push	{r7, lr}
 800bf90:	b086      	sub	sp, #24
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff fe2f 	bl	800bc02 <dir_sdi>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bfa8:	7dfb      	ldrb	r3, [r7, #23]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d001      	beq.n	800bfb2 <dir_find+0x24>
 800bfae:	7dfb      	ldrb	r3, [r7, #23]
 800bfb0:	e03e      	b.n	800c030 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	69db      	ldr	r3, [r3, #28]
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	6938      	ldr	r0, [r7, #16]
 800bfba:	f7ff faa5 	bl	800b508 <move_window>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bfc2:	7dfb      	ldrb	r3, [r7, #23]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d12f      	bne.n	800c028 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	6a1b      	ldr	r3, [r3, #32]
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bfd0:	7bfb      	ldrb	r3, [r7, #15]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d102      	bne.n	800bfdc <dir_find+0x4e>
 800bfd6:	2304      	movs	r3, #4
 800bfd8:	75fb      	strb	r3, [r7, #23]
 800bfda:	e028      	b.n	800c02e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6a1b      	ldr	r3, [r3, #32]
 800bfe0:	330b      	adds	r3, #11
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6a1b      	ldr	r3, [r3, #32]
 800bff2:	330b      	adds	r3, #11
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	f003 0308 	and.w	r3, r3, #8
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d10a      	bne.n	800c014 <dir_find+0x86>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a18      	ldr	r0, [r3, #32]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	3324      	adds	r3, #36	@ 0x24
 800c006:	220b      	movs	r2, #11
 800c008:	4619      	mov	r1, r3
 800c00a:	f7ff f88a 	bl	800b122 <mem_cmp>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00b      	beq.n	800c02c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c014:	2100      	movs	r1, #0
 800c016:	6878      	ldr	r0, [r7, #4]
 800c018:	f7ff fe6e 	bl	800bcf8 <dir_next>
 800c01c:	4603      	mov	r3, r0
 800c01e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c020:	7dfb      	ldrb	r3, [r7, #23]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d0c5      	beq.n	800bfb2 <dir_find+0x24>
 800c026:	e002      	b.n	800c02e <dir_find+0xa0>
		if (res != FR_OK) break;
 800c028:	bf00      	nop
 800c02a:	e000      	b.n	800c02e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c02c:	bf00      	nop

	return res;
 800c02e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3718      	adds	r7, #24
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c046:	2101      	movs	r1, #1
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f7ff ff1a 	bl	800be82 <dir_alloc>
 800c04e:	4603      	mov	r3, r0
 800c050:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c052:	7bfb      	ldrb	r3, [r7, #15]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d11c      	bne.n	800c092 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	69db      	ldr	r3, [r3, #28]
 800c05c:	4619      	mov	r1, r3
 800c05e:	68b8      	ldr	r0, [r7, #8]
 800c060:	f7ff fa52 	bl	800b508 <move_window>
 800c064:	4603      	mov	r3, r0
 800c066:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c068:	7bfb      	ldrb	r3, [r7, #15]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d111      	bne.n	800c092 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6a1b      	ldr	r3, [r3, #32]
 800c072:	2220      	movs	r2, #32
 800c074:	2100      	movs	r1, #0
 800c076:	4618      	mov	r0, r3
 800c078:	f7ff f838 	bl	800b0ec <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6a18      	ldr	r0, [r3, #32]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	3324      	adds	r3, #36	@ 0x24
 800c084:	220b      	movs	r2, #11
 800c086:	4619      	mov	r1, r3
 800c088:	f7ff f80f 	bl	800b0aa <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	2201      	movs	r2, #1
 800c090:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c092:	7bfb      	ldrb	r3, [r7, #15]
}
 800c094:	4618      	mov	r0, r3
 800c096:	3710      	adds	r7, #16
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b088      	sub	sp, #32
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	60fb      	str	r3, [r7, #12]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	3324      	adds	r3, #36	@ 0x24
 800c0b0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c0b2:	220b      	movs	r2, #11
 800c0b4:	2120      	movs	r1, #32
 800c0b6:	68b8      	ldr	r0, [r7, #8]
 800c0b8:	f7ff f818 	bl	800b0ec <mem_set>
	si = i = 0; ni = 8;
 800c0bc:	2300      	movs	r3, #0
 800c0be:	613b      	str	r3, [r7, #16]
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	61fb      	str	r3, [r7, #28]
 800c0c4:	2308      	movs	r3, #8
 800c0c6:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	1c5a      	adds	r2, r3, #1
 800c0cc:	61fa      	str	r2, [r7, #28]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c0d6:	7efb      	ldrb	r3, [r7, #27]
 800c0d8:	2b20      	cmp	r3, #32
 800c0da:	d94e      	bls.n	800c17a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c0dc:	7efb      	ldrb	r3, [r7, #27]
 800c0de:	2b2f      	cmp	r3, #47	@ 0x2f
 800c0e0:	d006      	beq.n	800c0f0 <create_name+0x54>
 800c0e2:	7efb      	ldrb	r3, [r7, #27]
 800c0e4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c0e6:	d110      	bne.n	800c10a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c0e8:	e002      	b.n	800c0f0 <create_name+0x54>
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	61fb      	str	r3, [r7, #28]
 800c0f0:	68fa      	ldr	r2, [r7, #12]
 800c0f2:	69fb      	ldr	r3, [r7, #28]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	2b2f      	cmp	r3, #47	@ 0x2f
 800c0fa:	d0f6      	beq.n	800c0ea <create_name+0x4e>
 800c0fc:	68fa      	ldr	r2, [r7, #12]
 800c0fe:	69fb      	ldr	r3, [r7, #28]
 800c100:	4413      	add	r3, r2
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	2b5c      	cmp	r3, #92	@ 0x5c
 800c106:	d0f0      	beq.n	800c0ea <create_name+0x4e>
			break;
 800c108:	e038      	b.n	800c17c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c10a:	7efb      	ldrb	r3, [r7, #27]
 800c10c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c10e:	d003      	beq.n	800c118 <create_name+0x7c>
 800c110:	693a      	ldr	r2, [r7, #16]
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	429a      	cmp	r2, r3
 800c116:	d30c      	bcc.n	800c132 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	2b0b      	cmp	r3, #11
 800c11c:	d002      	beq.n	800c124 <create_name+0x88>
 800c11e:	7efb      	ldrb	r3, [r7, #27]
 800c120:	2b2e      	cmp	r3, #46	@ 0x2e
 800c122:	d001      	beq.n	800c128 <create_name+0x8c>
 800c124:	2306      	movs	r3, #6
 800c126:	e044      	b.n	800c1b2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c128:	2308      	movs	r3, #8
 800c12a:	613b      	str	r3, [r7, #16]
 800c12c:	230b      	movs	r3, #11
 800c12e:	617b      	str	r3, [r7, #20]
			continue;
 800c130:	e022      	b.n	800c178 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c132:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c136:	2b00      	cmp	r3, #0
 800c138:	da04      	bge.n	800c144 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c13a:	7efb      	ldrb	r3, [r7, #27]
 800c13c:	3b80      	subs	r3, #128	@ 0x80
 800c13e:	4a1f      	ldr	r2, [pc, #124]	@ (800c1bc <create_name+0x120>)
 800c140:	5cd3      	ldrb	r3, [r2, r3]
 800c142:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c144:	7efb      	ldrb	r3, [r7, #27]
 800c146:	4619      	mov	r1, r3
 800c148:	481d      	ldr	r0, [pc, #116]	@ (800c1c0 <create_name+0x124>)
 800c14a:	f7ff f811 	bl	800b170 <chk_chr>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d001      	beq.n	800c158 <create_name+0xbc>
 800c154:	2306      	movs	r3, #6
 800c156:	e02c      	b.n	800c1b2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c158:	7efb      	ldrb	r3, [r7, #27]
 800c15a:	2b60      	cmp	r3, #96	@ 0x60
 800c15c:	d905      	bls.n	800c16a <create_name+0xce>
 800c15e:	7efb      	ldrb	r3, [r7, #27]
 800c160:	2b7a      	cmp	r3, #122	@ 0x7a
 800c162:	d802      	bhi.n	800c16a <create_name+0xce>
 800c164:	7efb      	ldrb	r3, [r7, #27]
 800c166:	3b20      	subs	r3, #32
 800c168:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	1c5a      	adds	r2, r3, #1
 800c16e:	613a      	str	r2, [r7, #16]
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	4413      	add	r3, r2
 800c174:	7efa      	ldrb	r2, [r7, #27]
 800c176:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c178:	e7a6      	b.n	800c0c8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c17a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	441a      	add	r2, r3
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d101      	bne.n	800c190 <create_name+0xf4>
 800c18c:	2306      	movs	r3, #6
 800c18e:	e010      	b.n	800c1b2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	781b      	ldrb	r3, [r3, #0]
 800c194:	2be5      	cmp	r3, #229	@ 0xe5
 800c196:	d102      	bne.n	800c19e <create_name+0x102>
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	2205      	movs	r2, #5
 800c19c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c19e:	7efb      	ldrb	r3, [r7, #27]
 800c1a0:	2b20      	cmp	r3, #32
 800c1a2:	d801      	bhi.n	800c1a8 <create_name+0x10c>
 800c1a4:	2204      	movs	r2, #4
 800c1a6:	e000      	b.n	800c1aa <create_name+0x10e>
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	68bb      	ldr	r3, [r7, #8]
 800c1ac:	330b      	adds	r3, #11
 800c1ae:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c1b0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3720      	adds	r7, #32
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	0800deb4 	.word	0x0800deb4
 800c1c0:	0800dc68 	.word	0x0800dc68

0800c1c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b086      	sub	sp, #24
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c1d8:	e002      	b.n	800c1e0 <follow_path+0x1c>
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	603b      	str	r3, [r7, #0]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c1e6:	d0f8      	beq.n	800c1da <follow_path+0x16>
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	781b      	ldrb	r3, [r3, #0]
 800c1ec:	2b5c      	cmp	r3, #92	@ 0x5c
 800c1ee:	d0f4      	beq.n	800c1da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c1f0:	693b      	ldr	r3, [r7, #16]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	781b      	ldrb	r3, [r3, #0]
 800c1fa:	2b1f      	cmp	r3, #31
 800c1fc:	d80a      	bhi.n	800c214 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2280      	movs	r2, #128	@ 0x80
 800c202:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c206:	2100      	movs	r1, #0
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7ff fcfa 	bl	800bc02 <dir_sdi>
 800c20e:	4603      	mov	r3, r0
 800c210:	75fb      	strb	r3, [r7, #23]
 800c212:	e043      	b.n	800c29c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c214:	463b      	mov	r3, r7
 800c216:	4619      	mov	r1, r3
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7ff ff3f 	bl	800c09c <create_name>
 800c21e:	4603      	mov	r3, r0
 800c220:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c222:	7dfb      	ldrb	r3, [r7, #23]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d134      	bne.n	800c292 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f7ff feb0 	bl	800bf8e <dir_find>
 800c22e:	4603      	mov	r3, r0
 800c230:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c238:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c23a:	7dfb      	ldrb	r3, [r7, #23]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00a      	beq.n	800c256 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c240:	7dfb      	ldrb	r3, [r7, #23]
 800c242:	2b04      	cmp	r3, #4
 800c244:	d127      	bne.n	800c296 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c246:	7afb      	ldrb	r3, [r7, #11]
 800c248:	f003 0304 	and.w	r3, r3, #4
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d122      	bne.n	800c296 <follow_path+0xd2>
 800c250:	2305      	movs	r3, #5
 800c252:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c254:	e01f      	b.n	800c296 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c256:	7afb      	ldrb	r3, [r7, #11]
 800c258:	f003 0304 	and.w	r3, r3, #4
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d11c      	bne.n	800c29a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	799b      	ldrb	r3, [r3, #6]
 800c264:	f003 0310 	and.w	r3, r3, #16
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d102      	bne.n	800c272 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c26c:	2305      	movs	r3, #5
 800c26e:	75fb      	strb	r3, [r7, #23]
 800c270:	e014      	b.n	800c29c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	695b      	ldr	r3, [r3, #20]
 800c27c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c280:	4413      	add	r3, r2
 800c282:	4619      	mov	r1, r3
 800c284:	68f8      	ldr	r0, [r7, #12]
 800c286:	f7ff fe43 	bl	800bf10 <ld_clust>
 800c28a:	4602      	mov	r2, r0
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c290:	e7c0      	b.n	800c214 <follow_path+0x50>
			if (res != FR_OK) break;
 800c292:	bf00      	nop
 800c294:	e002      	b.n	800c29c <follow_path+0xd8>
				break;
 800c296:	bf00      	nop
 800c298:	e000      	b.n	800c29c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c29a:	bf00      	nop
			}
		}
	}

	return res;
 800c29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3718      	adds	r7, #24
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}

0800c2a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c2a6:	b480      	push	{r7}
 800c2a8:	b087      	sub	sp, #28
 800c2aa:	af00      	add	r7, sp, #0
 800c2ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c2ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c2b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d031      	beq.n	800c320 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	617b      	str	r3, [r7, #20]
 800c2c2:	e002      	b.n	800c2ca <get_ldnumber+0x24>
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	617b      	str	r3, [r7, #20]
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	2b20      	cmp	r3, #32
 800c2d0:	d903      	bls.n	800c2da <get_ldnumber+0x34>
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	2b3a      	cmp	r3, #58	@ 0x3a
 800c2d8:	d1f4      	bne.n	800c2c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	781b      	ldrb	r3, [r3, #0]
 800c2de:	2b3a      	cmp	r3, #58	@ 0x3a
 800c2e0:	d11c      	bne.n	800c31c <get_ldnumber+0x76>
			tp = *path;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	1c5a      	adds	r2, r3, #1
 800c2ec:	60fa      	str	r2, [r7, #12]
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	3b30      	subs	r3, #48	@ 0x30
 800c2f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	2b09      	cmp	r3, #9
 800c2f8:	d80e      	bhi.n	800c318 <get_ldnumber+0x72>
 800c2fa:	68fa      	ldr	r2, [r7, #12]
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d10a      	bne.n	800c318 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d107      	bne.n	800c318 <get_ldnumber+0x72>
					vol = (int)i;
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	3301      	adds	r3, #1
 800c310:	617b      	str	r3, [r7, #20]
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	697a      	ldr	r2, [r7, #20]
 800c316:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	e002      	b.n	800c322 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c31c:	2300      	movs	r3, #0
 800c31e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c320:	693b      	ldr	r3, [r7, #16]
}
 800c322:	4618      	mov	r0, r3
 800c324:	371c      	adds	r7, #28
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
	...

0800c330 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2200      	movs	r2, #0
 800c33e:	70da      	strb	r2, [r3, #3]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f04f 32ff 	mov.w	r2, #4294967295
 800c346:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c348:	6839      	ldr	r1, [r7, #0]
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f7ff f8dc 	bl	800b508 <move_window>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	d001      	beq.n	800c35a <check_fs+0x2a>
 800c356:	2304      	movs	r3, #4
 800c358:	e038      	b.n	800c3cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	3330      	adds	r3, #48	@ 0x30
 800c35e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c362:	4618      	mov	r0, r3
 800c364:	f7fe fe1e 	bl	800afa4 <ld_word>
 800c368:	4603      	mov	r3, r0
 800c36a:	461a      	mov	r2, r3
 800c36c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c370:	429a      	cmp	r2, r3
 800c372:	d001      	beq.n	800c378 <check_fs+0x48>
 800c374:	2303      	movs	r3, #3
 800c376:	e029      	b.n	800c3cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c37e:	2be9      	cmp	r3, #233	@ 0xe9
 800c380:	d009      	beq.n	800c396 <check_fs+0x66>
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c388:	2beb      	cmp	r3, #235	@ 0xeb
 800c38a:	d11e      	bne.n	800c3ca <check_fs+0x9a>
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c392:	2b90      	cmp	r3, #144	@ 0x90
 800c394:	d119      	bne.n	800c3ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	3330      	adds	r3, #48	@ 0x30
 800c39a:	3336      	adds	r3, #54	@ 0x36
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7fe fe1a 	bl	800afd6 <ld_dword>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c3a8:	4a0a      	ldr	r2, [pc, #40]	@ (800c3d4 <check_fs+0xa4>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d101      	bne.n	800c3b2 <check_fs+0x82>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	e00c      	b.n	800c3cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	3330      	adds	r3, #48	@ 0x30
 800c3b6:	3352      	adds	r3, #82	@ 0x52
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fe fe0c 	bl	800afd6 <ld_dword>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	4a05      	ldr	r2, [pc, #20]	@ (800c3d8 <check_fs+0xa8>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d101      	bne.n	800c3ca <check_fs+0x9a>
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	e000      	b.n	800c3cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c3ca:	2302      	movs	r3, #2
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3708      	adds	r7, #8
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	00544146 	.word	0x00544146
 800c3d8:	33544146 	.word	0x33544146

0800c3dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b096      	sub	sp, #88	@ 0x58
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c3f0:	68f8      	ldr	r0, [r7, #12]
 800c3f2:	f7ff ff58 	bl	800c2a6 <get_ldnumber>
 800c3f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c3f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	da01      	bge.n	800c402 <find_volume+0x26>
 800c3fe:	230b      	movs	r3, #11
 800c400:	e22d      	b.n	800c85e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c402:	4aa1      	ldr	r2, [pc, #644]	@ (800c688 <find_volume+0x2ac>)
 800c404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c40a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c40c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d101      	bne.n	800c416 <find_volume+0x3a>
 800c412:	230c      	movs	r3, #12
 800c414:	e223      	b.n	800c85e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c41a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c41c:	79fb      	ldrb	r3, [r7, #7]
 800c41e:	f023 0301 	bic.w	r3, r3, #1
 800c422:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d01a      	beq.n	800c462 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c42e:	785b      	ldrb	r3, [r3, #1]
 800c430:	4618      	mov	r0, r3
 800c432:	f7fe fd17 	bl	800ae64 <disk_status>
 800c436:	4603      	mov	r3, r0
 800c438:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c43c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c440:	f003 0301 	and.w	r3, r3, #1
 800c444:	2b00      	cmp	r3, #0
 800c446:	d10c      	bne.n	800c462 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c448:	79fb      	ldrb	r3, [r7, #7]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d007      	beq.n	800c45e <find_volume+0x82>
 800c44e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c452:	f003 0304 	and.w	r3, r3, #4
 800c456:	2b00      	cmp	r3, #0
 800c458:	d001      	beq.n	800c45e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c45a:	230a      	movs	r3, #10
 800c45c:	e1ff      	b.n	800c85e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c45e:	2300      	movs	r3, #0
 800c460:	e1fd      	b.n	800c85e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c464:	2200      	movs	r2, #0
 800c466:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c46e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c472:	785b      	ldrb	r3, [r3, #1]
 800c474:	4618      	mov	r0, r3
 800c476:	f7fe fd0f 	bl	800ae98 <disk_initialize>
 800c47a:	4603      	mov	r3, r0
 800c47c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c480:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c484:	f003 0301 	and.w	r3, r3, #1
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d001      	beq.n	800c490 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c48c:	2303      	movs	r3, #3
 800c48e:	e1e6      	b.n	800c85e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c490:	79fb      	ldrb	r3, [r7, #7]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d007      	beq.n	800c4a6 <find_volume+0xca>
 800c496:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c49a:	f003 0304 	and.w	r3, r3, #4
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d001      	beq.n	800c4a6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c4a2:	230a      	movs	r3, #10
 800c4a4:	e1db      	b.n	800c85e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c4aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c4ac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c4ae:	f7ff ff3f 	bl	800c330 <check_fs>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c4b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	d149      	bne.n	800c554 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4c4:	e01e      	b.n	800c504 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c4cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4ce:	011b      	lsls	r3, r3, #4
 800c4d0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c4d4:	4413      	add	r3, r2
 800c4d6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c4d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4da:	3304      	adds	r3, #4
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d006      	beq.n	800c4f0 <find_volume+0x114>
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7fe fd75 	bl	800afd6 <ld_dword>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	e000      	b.n	800c4f2 <find_volume+0x116>
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	3358      	adds	r3, #88	@ 0x58
 800c4f8:	443b      	add	r3, r7
 800c4fa:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c4fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c500:	3301      	adds	r3, #1
 800c502:	643b      	str	r3, [r7, #64]	@ 0x40
 800c504:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c506:	2b03      	cmp	r3, #3
 800c508:	d9dd      	bls.n	800c4c6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c50a:	2300      	movs	r3, #0
 800c50c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c50e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c510:	2b00      	cmp	r3, #0
 800c512:	d002      	beq.n	800c51a <find_volume+0x13e>
 800c514:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c516:	3b01      	subs	r3, #1
 800c518:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c51a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	3358      	adds	r3, #88	@ 0x58
 800c520:	443b      	add	r3, r7
 800c522:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c526:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d005      	beq.n	800c53a <find_volume+0x15e>
 800c52e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c530:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c532:	f7ff fefd 	bl	800c330 <check_fs>
 800c536:	4603      	mov	r3, r0
 800c538:	e000      	b.n	800c53c <find_volume+0x160>
 800c53a:	2303      	movs	r3, #3
 800c53c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c540:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c544:	2b01      	cmp	r3, #1
 800c546:	d905      	bls.n	800c554 <find_volume+0x178>
 800c548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c54a:	3301      	adds	r3, #1
 800c54c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c54e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c550:	2b03      	cmp	r3, #3
 800c552:	d9e2      	bls.n	800c51a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c554:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c558:	2b04      	cmp	r3, #4
 800c55a:	d101      	bne.n	800c560 <find_volume+0x184>
 800c55c:	2301      	movs	r3, #1
 800c55e:	e17e      	b.n	800c85e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c560:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c564:	2b01      	cmp	r3, #1
 800c566:	d901      	bls.n	800c56c <find_volume+0x190>
 800c568:	230d      	movs	r3, #13
 800c56a:	e178      	b.n	800c85e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c56e:	3330      	adds	r3, #48	@ 0x30
 800c570:	330b      	adds	r3, #11
 800c572:	4618      	mov	r0, r3
 800c574:	f7fe fd16 	bl	800afa4 <ld_word>
 800c578:	4603      	mov	r3, r0
 800c57a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c57e:	d001      	beq.n	800c584 <find_volume+0x1a8>
 800c580:	230d      	movs	r3, #13
 800c582:	e16c      	b.n	800c85e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c586:	3330      	adds	r3, #48	@ 0x30
 800c588:	3316      	adds	r3, #22
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7fe fd0a 	bl	800afa4 <ld_word>
 800c590:	4603      	mov	r3, r0
 800c592:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c596:	2b00      	cmp	r3, #0
 800c598:	d106      	bne.n	800c5a8 <find_volume+0x1cc>
 800c59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c59c:	3330      	adds	r3, #48	@ 0x30
 800c59e:	3324      	adds	r3, #36	@ 0x24
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7fe fd18 	bl	800afd6 <ld_dword>
 800c5a6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c5ac:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c5ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ba:	789b      	ldrb	r3, [r3, #2]
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	d005      	beq.n	800c5cc <find_volume+0x1f0>
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c2:	789b      	ldrb	r3, [r3, #2]
 800c5c4:	2b02      	cmp	r3, #2
 800c5c6:	d001      	beq.n	800c5cc <find_volume+0x1f0>
 800c5c8:	230d      	movs	r3, #13
 800c5ca:	e148      	b.n	800c85e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ce:	789b      	ldrb	r3, [r3, #2]
 800c5d0:	461a      	mov	r2, r3
 800c5d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c5d4:	fb02 f303 	mul.w	r3, r2, r3
 800c5d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c5e0:	461a      	mov	r2, r3
 800c5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c5e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e8:	895b      	ldrh	r3, [r3, #10]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d008      	beq.n	800c600 <find_volume+0x224>
 800c5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f0:	895b      	ldrh	r3, [r3, #10]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f6:	895b      	ldrh	r3, [r3, #10]
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d001      	beq.n	800c604 <find_volume+0x228>
 800c600:	230d      	movs	r3, #13
 800c602:	e12c      	b.n	800c85e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c606:	3330      	adds	r3, #48	@ 0x30
 800c608:	3311      	adds	r3, #17
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7fe fcca 	bl	800afa4 <ld_word>
 800c610:	4603      	mov	r3, r0
 800c612:	461a      	mov	r2, r3
 800c614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c616:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c61a:	891b      	ldrh	r3, [r3, #8]
 800c61c:	f003 030f 	and.w	r3, r3, #15
 800c620:	b29b      	uxth	r3, r3
 800c622:	2b00      	cmp	r3, #0
 800c624:	d001      	beq.n	800c62a <find_volume+0x24e>
 800c626:	230d      	movs	r3, #13
 800c628:	e119      	b.n	800c85e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c62c:	3330      	adds	r3, #48	@ 0x30
 800c62e:	3313      	adds	r3, #19
 800c630:	4618      	mov	r0, r3
 800c632:	f7fe fcb7 	bl	800afa4 <ld_word>
 800c636:	4603      	mov	r3, r0
 800c638:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c63a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d106      	bne.n	800c64e <find_volume+0x272>
 800c640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c642:	3330      	adds	r3, #48	@ 0x30
 800c644:	3320      	adds	r3, #32
 800c646:	4618      	mov	r0, r3
 800c648:	f7fe fcc5 	bl	800afd6 <ld_dword>
 800c64c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c650:	3330      	adds	r3, #48	@ 0x30
 800c652:	330e      	adds	r3, #14
 800c654:	4618      	mov	r0, r3
 800c656:	f7fe fca5 	bl	800afa4 <ld_word>
 800c65a:	4603      	mov	r3, r0
 800c65c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c65e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c660:	2b00      	cmp	r3, #0
 800c662:	d101      	bne.n	800c668 <find_volume+0x28c>
 800c664:	230d      	movs	r3, #13
 800c666:	e0fa      	b.n	800c85e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c668:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c66a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c66c:	4413      	add	r3, r2
 800c66e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c670:	8912      	ldrh	r2, [r2, #8]
 800c672:	0912      	lsrs	r2, r2, #4
 800c674:	b292      	uxth	r2, r2
 800c676:	4413      	add	r3, r2
 800c678:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c67a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c67e:	429a      	cmp	r2, r3
 800c680:	d204      	bcs.n	800c68c <find_volume+0x2b0>
 800c682:	230d      	movs	r3, #13
 800c684:	e0eb      	b.n	800c85e <find_volume+0x482>
 800c686:	bf00      	nop
 800c688:	200002fc 	.word	0x200002fc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c68c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c690:	1ad3      	subs	r3, r2, r3
 800c692:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c694:	8952      	ldrh	r2, [r2, #10]
 800c696:	fbb3 f3f2 	udiv	r3, r3, r2
 800c69a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d101      	bne.n	800c6a6 <find_volume+0x2ca>
 800c6a2:	230d      	movs	r3, #13
 800c6a4:	e0db      	b.n	800c85e <find_volume+0x482>
		fmt = FS_FAT32;
 800c6a6:	2303      	movs	r3, #3
 800c6a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ae:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d802      	bhi.n	800c6bc <find_volume+0x2e0>
 800c6b6:	2302      	movs	r3, #2
 800c6b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6be:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d802      	bhi.n	800c6cc <find_volume+0x2f0>
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ce:	1c9a      	adds	r2, r3, #2
 800c6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d2:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c6d8:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c6da:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c6dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6de:	441a      	add	r2, r3
 800c6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6e2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c6e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e8:	441a      	add	r2, r3
 800c6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ec:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800c6ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c6f2:	2b03      	cmp	r3, #3
 800c6f4:	d11e      	bne.n	800c734 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6f8:	3330      	adds	r3, #48	@ 0x30
 800c6fa:	332a      	adds	r3, #42	@ 0x2a
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f7fe fc51 	bl	800afa4 <ld_word>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d001      	beq.n	800c70c <find_volume+0x330>
 800c708:	230d      	movs	r3, #13
 800c70a:	e0a8      	b.n	800c85e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c70e:	891b      	ldrh	r3, [r3, #8]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d001      	beq.n	800c718 <find_volume+0x33c>
 800c714:	230d      	movs	r3, #13
 800c716:	e0a2      	b.n	800c85e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c71a:	3330      	adds	r3, #48	@ 0x30
 800c71c:	332c      	adds	r3, #44	@ 0x2c
 800c71e:	4618      	mov	r0, r3
 800c720:	f7fe fc59 	bl	800afd6 <ld_dword>
 800c724:	4602      	mov	r2, r0
 800c726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c728:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c72c:	695b      	ldr	r3, [r3, #20]
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	647b      	str	r3, [r7, #68]	@ 0x44
 800c732:	e01f      	b.n	800c774 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c736:	891b      	ldrh	r3, [r3, #8]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d101      	bne.n	800c740 <find_volume+0x364>
 800c73c:	230d      	movs	r3, #13
 800c73e:	e08e      	b.n	800c85e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c742:	6a1a      	ldr	r2, [r3, #32]
 800c744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c746:	441a      	add	r2, r3
 800c748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c74c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c750:	2b02      	cmp	r3, #2
 800c752:	d103      	bne.n	800c75c <find_volume+0x380>
 800c754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c756:	695b      	ldr	r3, [r3, #20]
 800c758:	005b      	lsls	r3, r3, #1
 800c75a:	e00a      	b.n	800c772 <find_volume+0x396>
 800c75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75e:	695a      	ldr	r2, [r3, #20]
 800c760:	4613      	mov	r3, r2
 800c762:	005b      	lsls	r3, r3, #1
 800c764:	4413      	add	r3, r2
 800c766:	085a      	lsrs	r2, r3, #1
 800c768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76a:	695b      	ldr	r3, [r3, #20]
 800c76c:	f003 0301 	and.w	r3, r3, #1
 800c770:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c772:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c776:	699a      	ldr	r2, [r3, #24]
 800c778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c77a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c77e:	0a5b      	lsrs	r3, r3, #9
 800c780:	429a      	cmp	r2, r3
 800c782:	d201      	bcs.n	800c788 <find_volume+0x3ac>
 800c784:	230d      	movs	r3, #13
 800c786:	e06a      	b.n	800c85e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c78a:	f04f 32ff 	mov.w	r2, #4294967295
 800c78e:	611a      	str	r2, [r3, #16]
 800c790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c792:	691a      	ldr	r2, [r3, #16]
 800c794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c796:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79a:	2280      	movs	r2, #128	@ 0x80
 800c79c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c79e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c7a2:	2b03      	cmp	r3, #3
 800c7a4:	d149      	bne.n	800c83a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a8:	3330      	adds	r3, #48	@ 0x30
 800c7aa:	3330      	adds	r3, #48	@ 0x30
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f7fe fbf9 	bl	800afa4 <ld_word>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d140      	bne.n	800c83a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c7b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	4619      	mov	r1, r3
 800c7be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c7c0:	f7fe fea2 	bl	800b508 <move_window>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d137      	bne.n	800c83a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d2:	3330      	adds	r3, #48	@ 0x30
 800c7d4:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f7fe fbe3 	bl	800afa4 <ld_word>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d127      	bne.n	800c83a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ec:	3330      	adds	r3, #48	@ 0x30
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fe fbf1 	bl	800afd6 <ld_dword>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	4a1c      	ldr	r2, [pc, #112]	@ (800c868 <find_volume+0x48c>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d11e      	bne.n	800c83a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7fe:	3330      	adds	r3, #48	@ 0x30
 800c800:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c804:	4618      	mov	r0, r3
 800c806:	f7fe fbe6 	bl	800afd6 <ld_dword>
 800c80a:	4603      	mov	r3, r0
 800c80c:	4a17      	ldr	r2, [pc, #92]	@ (800c86c <find_volume+0x490>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d113      	bne.n	800c83a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c814:	3330      	adds	r3, #48	@ 0x30
 800c816:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c81a:	4618      	mov	r0, r3
 800c81c:	f7fe fbdb 	bl	800afd6 <ld_dword>
 800c820:	4602      	mov	r2, r0
 800c822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c824:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c828:	3330      	adds	r3, #48	@ 0x30
 800c82a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fe fbd1 	bl	800afd6 <ld_dword>
 800c834:	4602      	mov	r2, r0
 800c836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c838:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c83c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c840:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c842:	4b0b      	ldr	r3, [pc, #44]	@ (800c870 <find_volume+0x494>)
 800c844:	881b      	ldrh	r3, [r3, #0]
 800c846:	3301      	adds	r3, #1
 800c848:	b29a      	uxth	r2, r3
 800c84a:	4b09      	ldr	r3, [pc, #36]	@ (800c870 <find_volume+0x494>)
 800c84c:	801a      	strh	r2, [r3, #0]
 800c84e:	4b08      	ldr	r3, [pc, #32]	@ (800c870 <find_volume+0x494>)
 800c850:	881a      	ldrh	r2, [r3, #0]
 800c852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c854:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c856:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c858:	f7fe fdee 	bl	800b438 <clear_lock>
#endif
	return FR_OK;
 800c85c:	2300      	movs	r3, #0
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3758      	adds	r7, #88	@ 0x58
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}
 800c866:	bf00      	nop
 800c868:	41615252 	.word	0x41615252
 800c86c:	61417272 	.word	0x61417272
 800c870:	20000300 	.word	0x20000300

0800c874 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c87e:	2309      	movs	r3, #9
 800c880:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d01c      	beq.n	800c8c2 <validate+0x4e>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d018      	beq.n	800c8c2 <validate+0x4e>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d013      	beq.n	800c8c2 <validate+0x4e>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	889a      	ldrh	r2, [r3, #4]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	88db      	ldrh	r3, [r3, #6]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d10c      	bne.n	800c8c2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	785b      	ldrb	r3, [r3, #1]
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7fe fad8 	bl	800ae64 <disk_status>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	f003 0301 	and.w	r3, r3, #1
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d101      	bne.n	800c8c2 <validate+0x4e>
			res = FR_OK;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c8c2:	7bfb      	ldrb	r3, [r7, #15]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d102      	bne.n	800c8ce <validate+0x5a>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	e000      	b.n	800c8d0 <validate+0x5c>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	683a      	ldr	r2, [r7, #0]
 800c8d2:	6013      	str	r3, [r2, #0]
	return res;
 800c8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
	...

0800c8e0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b088      	sub	sp, #32
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	60f8      	str	r0, [r7, #12]
 800c8e8:	60b9      	str	r1, [r7, #8]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c8f2:	f107 0310 	add.w	r3, r7, #16
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	f7ff fcd5 	bl	800c2a6 <get_ldnumber>
 800c8fc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	2b00      	cmp	r3, #0
 800c902:	da01      	bge.n	800c908 <f_mount+0x28>
 800c904:	230b      	movs	r3, #11
 800c906:	e02b      	b.n	800c960 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c908:	4a17      	ldr	r2, [pc, #92]	@ (800c968 <f_mount+0x88>)
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c910:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c912:	69bb      	ldr	r3, [r7, #24]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d005      	beq.n	800c924 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c918:	69b8      	ldr	r0, [r7, #24]
 800c91a:	f7fe fd8d 	bl	800b438 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	2200      	movs	r2, #0
 800c922:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d002      	beq.n	800c930 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2200      	movs	r2, #0
 800c92e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	490d      	ldr	r1, [pc, #52]	@ (800c968 <f_mount+0x88>)
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d002      	beq.n	800c946 <f_mount+0x66>
 800c940:	79fb      	ldrb	r3, [r7, #7]
 800c942:	2b01      	cmp	r3, #1
 800c944:	d001      	beq.n	800c94a <f_mount+0x6a>
 800c946:	2300      	movs	r3, #0
 800c948:	e00a      	b.n	800c960 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c94a:	f107 010c 	add.w	r1, r7, #12
 800c94e:	f107 0308 	add.w	r3, r7, #8
 800c952:	2200      	movs	r2, #0
 800c954:	4618      	mov	r0, r3
 800c956:	f7ff fd41 	bl	800c3dc <find_volume>
 800c95a:	4603      	mov	r3, r0
 800c95c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c95e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3720      	adds	r7, #32
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	200002fc 	.word	0x200002fc

0800c96c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b098      	sub	sp, #96	@ 0x60
 800c970:	af00      	add	r7, sp, #0
 800c972:	60f8      	str	r0, [r7, #12]
 800c974:	60b9      	str	r1, [r7, #8]
 800c976:	4613      	mov	r3, r2
 800c978:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d101      	bne.n	800c984 <f_open+0x18>
 800c980:	2309      	movs	r3, #9
 800c982:	e1a9      	b.n	800ccd8 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c984:	79fb      	ldrb	r3, [r7, #7]
 800c986:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c98a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c98c:	79fa      	ldrb	r2, [r7, #7]
 800c98e:	f107 0110 	add.w	r1, r7, #16
 800c992:	f107 0308 	add.w	r3, r7, #8
 800c996:	4618      	mov	r0, r3
 800c998:	f7ff fd20 	bl	800c3dc <find_volume>
 800c99c:	4603      	mov	r3, r0
 800c99e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800c9a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	f040 818d 	bne.w	800ccc6 <f_open+0x35a>
		dj.obj.fs = fs;
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	f107 0314 	add.w	r3, r7, #20
 800c9b6:	4611      	mov	r1, r2
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7ff fc03 	bl	800c1c4 <follow_path>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c9c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d118      	bne.n	800c9fe <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c9cc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c9d0:	b25b      	sxtb	r3, r3
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	da03      	bge.n	800c9de <f_open+0x72>
				res = FR_INVALID_NAME;
 800c9d6:	2306      	movs	r3, #6
 800c9d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c9dc:	e00f      	b.n	800c9fe <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c9de:	79fb      	ldrb	r3, [r7, #7]
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	bf8c      	ite	hi
 800c9e4:	2301      	movhi	r3, #1
 800c9e6:	2300      	movls	r3, #0
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	f107 0314 	add.w	r3, r7, #20
 800c9f0:	4611      	mov	r1, r2
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f7fe fbd8 	bl	800b1a8 <chk_lock>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c9fe:	79fb      	ldrb	r3, [r7, #7]
 800ca00:	f003 031c 	and.w	r3, r3, #28
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d07f      	beq.n	800cb08 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800ca08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d017      	beq.n	800ca40 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ca10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca14:	2b04      	cmp	r3, #4
 800ca16:	d10e      	bne.n	800ca36 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ca18:	f7fe fc22 	bl	800b260 <enq_lock>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d006      	beq.n	800ca30 <f_open+0xc4>
 800ca22:	f107 0314 	add.w	r3, r7, #20
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7ff fb06 	bl	800c038 <dir_register>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	e000      	b.n	800ca32 <f_open+0xc6>
 800ca30:	2312      	movs	r3, #18
 800ca32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ca36:	79fb      	ldrb	r3, [r7, #7]
 800ca38:	f043 0308 	orr.w	r3, r3, #8
 800ca3c:	71fb      	strb	r3, [r7, #7]
 800ca3e:	e010      	b.n	800ca62 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ca40:	7ebb      	ldrb	r3, [r7, #26]
 800ca42:	f003 0311 	and.w	r3, r3, #17
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d003      	beq.n	800ca52 <f_open+0xe6>
					res = FR_DENIED;
 800ca4a:	2307      	movs	r3, #7
 800ca4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ca50:	e007      	b.n	800ca62 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ca52:	79fb      	ldrb	r3, [r7, #7]
 800ca54:	f003 0304 	and.w	r3, r3, #4
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d002      	beq.n	800ca62 <f_open+0xf6>
 800ca5c:	2308      	movs	r3, #8
 800ca5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ca62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d168      	bne.n	800cb3c <f_open+0x1d0>
 800ca6a:	79fb      	ldrb	r3, [r7, #7]
 800ca6c:	f003 0308 	and.w	r3, r3, #8
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d063      	beq.n	800cb3c <f_open+0x1d0>
				dw = GET_FATTIME();
 800ca74:	f7fe f83c 	bl	800aaf0 <get_fattime>
 800ca78:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ca7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca7c:	330e      	adds	r3, #14
 800ca7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe fae6 	bl	800b052 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ca86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca88:	3316      	adds	r3, #22
 800ca8a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f7fe fae0 	bl	800b052 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ca92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca94:	330b      	adds	r3, #11
 800ca96:	2220      	movs	r2, #32
 800ca98:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ca9e:	4611      	mov	r1, r2
 800caa0:	4618      	mov	r0, r3
 800caa2:	f7ff fa35 	bl	800bf10 <ld_clust>
 800caa6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800caac:	2200      	movs	r2, #0
 800caae:	4618      	mov	r0, r3
 800cab0:	f7ff fa4d 	bl	800bf4e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cab6:	331c      	adds	r3, #28
 800cab8:	2100      	movs	r1, #0
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fe fac9 	bl	800b052 <st_dword>
					fs->wflag = 1;
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	2201      	movs	r2, #1
 800cac4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d037      	beq.n	800cb3c <f_open+0x1d0>
						dw = fs->winsect;
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cad0:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cad2:	f107 0314 	add.w	r3, r7, #20
 800cad6:	2200      	movs	r2, #0
 800cad8:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fe ff60 	bl	800b9a0 <remove_chain>
 800cae0:	4603      	mov	r3, r0
 800cae2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800cae6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800caea:	2b00      	cmp	r3, #0
 800caec:	d126      	bne.n	800cb3c <f_open+0x1d0>
							res = move_window(fs, dw);
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7fe fd08 	bl	800b508 <move_window>
 800caf8:	4603      	mov	r3, r0
 800cafa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb02:	3a01      	subs	r2, #1
 800cb04:	60da      	str	r2, [r3, #12]
 800cb06:	e019      	b.n	800cb3c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cb08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d115      	bne.n	800cb3c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cb10:	7ebb      	ldrb	r3, [r7, #26]
 800cb12:	f003 0310 	and.w	r3, r3, #16
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d003      	beq.n	800cb22 <f_open+0x1b6>
					res = FR_NO_FILE;
 800cb1a:	2304      	movs	r3, #4
 800cb1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cb20:	e00c      	b.n	800cb3c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cb22:	79fb      	ldrb	r3, [r7, #7]
 800cb24:	f003 0302 	and.w	r3, r3, #2
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d007      	beq.n	800cb3c <f_open+0x1d0>
 800cb2c:	7ebb      	ldrb	r3, [r7, #26]
 800cb2e:	f003 0301 	and.w	r3, r3, #1
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d002      	beq.n	800cb3c <f_open+0x1d0>
						res = FR_DENIED;
 800cb36:	2307      	movs	r3, #7
 800cb38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cb3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d126      	bne.n	800cb92 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cb44:	79fb      	ldrb	r3, [r7, #7]
 800cb46:	f003 0308 	and.w	r3, r3, #8
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d003      	beq.n	800cb56 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800cb4e:	79fb      	ldrb	r3, [r7, #7]
 800cb50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb54:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800cb5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cb64:	79fb      	ldrb	r3, [r7, #7]
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	bf8c      	ite	hi
 800cb6a:	2301      	movhi	r3, #1
 800cb6c:	2300      	movls	r3, #0
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	461a      	mov	r2, r3
 800cb72:	f107 0314 	add.w	r3, r7, #20
 800cb76:	4611      	mov	r1, r2
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7fe fb93 	bl	800b2a4 <inc_lock>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	691b      	ldr	r3, [r3, #16]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d102      	bne.n	800cb92 <f_open+0x226>
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cb92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	f040 8095 	bne.w	800ccc6 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cba0:	4611      	mov	r1, r2
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7ff f9b4 	bl	800bf10 <ld_clust>
 800cba8:	4602      	mov	r2, r0
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cbae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbb0:	331c      	adds	r3, #28
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fe fa0f 	bl	800afd6 <ld_dword>
 800cbb8:	4602      	mov	r2, r0
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cbc4:	693a      	ldr	r2, [r7, #16]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cbca:	693b      	ldr	r3, [r7, #16]
 800cbcc:	88da      	ldrh	r2, [r3, #6]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	79fa      	ldrb	r2, [r7, #7]
 800cbd6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	3330      	adds	r3, #48	@ 0x30
 800cbee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cbf2:	2100      	movs	r1, #0
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fe fa79 	bl	800b0ec <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cbfa:	79fb      	ldrb	r3, [r7, #7]
 800cbfc:	f003 0320 	and.w	r3, r3, #32
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d060      	beq.n	800ccc6 <f_open+0x35a>
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d05c      	beq.n	800ccc6 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	68da      	ldr	r2, [r3, #12]
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	895b      	ldrh	r3, [r3, #10]
 800cc18:	025b      	lsls	r3, r3, #9
 800cc1a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	68db      	ldr	r3, [r3, #12]
 800cc26:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc28:	e016      	b.n	800cc58 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7fe fd25 	bl	800b67e <get_fat>
 800cc34:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800cc36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d802      	bhi.n	800cc42 <f_open+0x2d6>
 800cc3c:	2302      	movs	r3, #2
 800cc3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cc42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cc44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc48:	d102      	bne.n	800cc50 <f_open+0x2e4>
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cc50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc54:	1ad3      	subs	r3, r2, r3
 800cc56:	657b      	str	r3, [r7, #84]	@ 0x54
 800cc58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d103      	bne.n	800cc68 <f_open+0x2fc>
 800cc60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cc62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d8e0      	bhi.n	800cc2a <f_open+0x2be>
				}
				fp->clust = clst;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cc6c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cc6e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d127      	bne.n	800ccc6 <f_open+0x35a>
 800cc76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d022      	beq.n	800ccc6 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cc84:	4618      	mov	r0, r3
 800cc86:	f7fe fcdb 	bl	800b640 <clust2sect>
 800cc8a:	6478      	str	r0, [r7, #68]	@ 0x44
 800cc8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d103      	bne.n	800cc9a <f_open+0x32e>
						res = FR_INT_ERR;
 800cc92:	2302      	movs	r3, #2
 800cc94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cc98:	e015      	b.n	800ccc6 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cc9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc9c:	0a5a      	lsrs	r2, r3, #9
 800cc9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cca0:	441a      	add	r2, r3
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	7858      	ldrb	r0, [r3, #1]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6a1a      	ldr	r2, [r3, #32]
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	f7fe f917 	bl	800aee8 <disk_read>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d002      	beq.n	800ccc6 <f_open+0x35a>
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ccc6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d002      	beq.n	800ccd4 <f_open+0x368>
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ccd4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3760      	adds	r7, #96	@ 0x60
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b08e      	sub	sp, #56	@ 0x38
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	607a      	str	r2, [r7, #4]
 800ccec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ccee:	68bb      	ldr	r3, [r7, #8]
 800ccf0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	f107 0214 	add.w	r2, r7, #20
 800ccfe:	4611      	mov	r1, r2
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7ff fdb7 	bl	800c874 <validate>
 800cd06:	4603      	mov	r3, r0
 800cd08:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cd0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d107      	bne.n	800cd24 <f_read+0x44>
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	7d5b      	ldrb	r3, [r3, #21]
 800cd18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cd1c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d002      	beq.n	800cd2a <f_read+0x4a>
 800cd24:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cd28:	e115      	b.n	800cf56 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	7d1b      	ldrb	r3, [r3, #20]
 800cd2e:	f003 0301 	and.w	r3, r3, #1
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d101      	bne.n	800cd3a <f_read+0x5a>
 800cd36:	2307      	movs	r3, #7
 800cd38:	e10d      	b.n	800cf56 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	68da      	ldr	r2, [r3, #12]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	699b      	ldr	r3, [r3, #24]
 800cd42:	1ad3      	subs	r3, r2, r3
 800cd44:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	6a3b      	ldr	r3, [r7, #32]
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	f240 80fe 	bls.w	800cf4c <f_read+0x26c>
 800cd50:	6a3b      	ldr	r3, [r7, #32]
 800cd52:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cd54:	e0fa      	b.n	800cf4c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f040 80c6 	bne.w	800cef0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	699b      	ldr	r3, [r3, #24]
 800cd68:	0a5b      	lsrs	r3, r3, #9
 800cd6a:	697a      	ldr	r2, [r7, #20]
 800cd6c:	8952      	ldrh	r2, [r2, #10]
 800cd6e:	3a01      	subs	r2, #1
 800cd70:	4013      	ands	r3, r2
 800cd72:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cd74:	69fb      	ldr	r3, [r7, #28]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d12f      	bne.n	800cdda <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	699b      	ldr	r3, [r3, #24]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d103      	bne.n	800cd8a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd88:	e013      	b.n	800cdb2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d007      	beq.n	800cda2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	699b      	ldr	r3, [r3, #24]
 800cd96:	4619      	mov	r1, r3
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f7fe fefe 	bl	800bb9a <clmt_clust>
 800cd9e:	6338      	str	r0, [r7, #48]	@ 0x30
 800cda0:	e007      	b.n	800cdb2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cda2:	68fa      	ldr	r2, [r7, #12]
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	69db      	ldr	r3, [r3, #28]
 800cda8:	4619      	mov	r1, r3
 800cdaa:	4610      	mov	r0, r2
 800cdac:	f7fe fc67 	bl	800b67e <get_fat>
 800cdb0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cdb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	d804      	bhi.n	800cdc2 <f_read+0xe2>
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2202      	movs	r2, #2
 800cdbc:	755a      	strb	r2, [r3, #21]
 800cdbe:	2302      	movs	r3, #2
 800cdc0:	e0c9      	b.n	800cf56 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cdc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc8:	d104      	bne.n	800cdd4 <f_read+0xf4>
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2201      	movs	r2, #1
 800cdce:	755a      	strb	r2, [r3, #21]
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	e0c0      	b.n	800cf56 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdd8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	69db      	ldr	r3, [r3, #28]
 800cde0:	4619      	mov	r1, r3
 800cde2:	4610      	mov	r0, r2
 800cde4:	f7fe fc2c 	bl	800b640 <clust2sect>
 800cde8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cdea:	69bb      	ldr	r3, [r7, #24]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d104      	bne.n	800cdfa <f_read+0x11a>
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	2202      	movs	r2, #2
 800cdf4:	755a      	strb	r2, [r3, #21]
 800cdf6:	2302      	movs	r3, #2
 800cdf8:	e0ad      	b.n	800cf56 <f_read+0x276>
			sect += csect;
 800cdfa:	69ba      	ldr	r2, [r7, #24]
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	4413      	add	r3, r2
 800ce00:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	0a5b      	lsrs	r3, r3, #9
 800ce06:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800ce08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d039      	beq.n	800ce82 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ce0e:	69fa      	ldr	r2, [r7, #28]
 800ce10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce12:	4413      	add	r3, r2
 800ce14:	697a      	ldr	r2, [r7, #20]
 800ce16:	8952      	ldrh	r2, [r2, #10]
 800ce18:	4293      	cmp	r3, r2
 800ce1a:	d905      	bls.n	800ce28 <f_read+0x148>
					cc = fs->csize - csect;
 800ce1c:	697b      	ldr	r3, [r7, #20]
 800ce1e:	895b      	ldrh	r3, [r3, #10]
 800ce20:	461a      	mov	r2, r3
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	1ad3      	subs	r3, r2, r3
 800ce26:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	7858      	ldrb	r0, [r3, #1]
 800ce2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2e:	69ba      	ldr	r2, [r7, #24]
 800ce30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ce32:	f7fe f859 	bl	800aee8 <disk_read>
 800ce36:	4603      	mov	r3, r0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d004      	beq.n	800ce46 <f_read+0x166>
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	755a      	strb	r2, [r3, #21]
 800ce42:	2301      	movs	r3, #1
 800ce44:	e087      	b.n	800cf56 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	7d1b      	ldrb	r3, [r3, #20]
 800ce4a:	b25b      	sxtb	r3, r3
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	da14      	bge.n	800ce7a <f_read+0x19a>
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6a1a      	ldr	r2, [r3, #32]
 800ce54:	69bb      	ldr	r3, [r7, #24]
 800ce56:	1ad3      	subs	r3, r2, r3
 800ce58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce5a:	429a      	cmp	r2, r3
 800ce5c:	d90d      	bls.n	800ce7a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	6a1a      	ldr	r2, [r3, #32]
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	1ad3      	subs	r3, r2, r3
 800ce66:	025b      	lsls	r3, r3, #9
 800ce68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce6a:	18d0      	adds	r0, r2, r3
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	3330      	adds	r3, #48	@ 0x30
 800ce70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ce74:	4619      	mov	r1, r3
 800ce76:	f7fe f918 	bl	800b0aa <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ce7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce7c:	025b      	lsls	r3, r3, #9
 800ce7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ce80:	e050      	b.n	800cf24 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	6a1b      	ldr	r3, [r3, #32]
 800ce86:	69ba      	ldr	r2, [r7, #24]
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	d02e      	beq.n	800ceea <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	7d1b      	ldrb	r3, [r3, #20]
 800ce90:	b25b      	sxtb	r3, r3
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	da18      	bge.n	800cec8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	7858      	ldrb	r0, [r3, #1]
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	6a1a      	ldr	r2, [r3, #32]
 800cea4:	2301      	movs	r3, #1
 800cea6:	f7fe f83f 	bl	800af28 <disk_write>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d004      	beq.n	800ceba <f_read+0x1da>
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	755a      	strb	r2, [r3, #21]
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e04d      	b.n	800cf56 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	7d1b      	ldrb	r3, [r3, #20]
 800cebe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cec2:	b2da      	uxtb	r2, r3
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	7858      	ldrb	r0, [r3, #1]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ced2:	2301      	movs	r3, #1
 800ced4:	69ba      	ldr	r2, [r7, #24]
 800ced6:	f7fe f807 	bl	800aee8 <disk_read>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d004      	beq.n	800ceea <f_read+0x20a>
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2201      	movs	r2, #1
 800cee4:	755a      	strb	r2, [r3, #21]
 800cee6:	2301      	movs	r3, #1
 800cee8:	e035      	b.n	800cf56 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	69ba      	ldr	r2, [r7, #24]
 800ceee:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	699b      	ldr	r3, [r3, #24]
 800cef4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cef8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800cefc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cefe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d901      	bls.n	800cf0a <f_read+0x22a>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	699b      	ldr	r3, [r3, #24]
 800cf14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf18:	4413      	add	r3, r2
 800cf1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf1c:	4619      	mov	r1, r3
 800cf1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf20:	f7fe f8c3 	bl	800b0aa <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cf24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cf26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf28:	4413      	add	r3, r2
 800cf2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	699a      	ldr	r2, [r3, #24]
 800cf30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf32:	441a      	add	r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	619a      	str	r2, [r3, #24]
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	681a      	ldr	r2, [r3, #0]
 800cf3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf3e:	441a      	add	r2, r3
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	601a      	str	r2, [r3, #0]
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf48:	1ad3      	subs	r3, r2, r3
 800cf4a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	f47f af01 	bne.w	800cd56 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cf54:	2300      	movs	r3, #0
}
 800cf56:	4618      	mov	r0, r3
 800cf58:	3738      	adds	r7, #56	@ 0x38
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b086      	sub	sp, #24
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f107 0208 	add.w	r2, r7, #8
 800cf6c:	4611      	mov	r1, r2
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7ff fc80 	bl	800c874 <validate>
 800cf74:	4603      	mov	r3, r0
 800cf76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cf78:	7dfb      	ldrb	r3, [r7, #23]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d168      	bne.n	800d050 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	7d1b      	ldrb	r3, [r3, #20]
 800cf82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d062      	beq.n	800d050 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	7d1b      	ldrb	r3, [r3, #20]
 800cf8e:	b25b      	sxtb	r3, r3
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	da15      	bge.n	800cfc0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	7858      	ldrb	r0, [r3, #1]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	6a1a      	ldr	r2, [r3, #32]
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	f7fd ffc0 	bl	800af28 <disk_write>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d001      	beq.n	800cfb2 <f_sync+0x54>
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e04f      	b.n	800d052 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	7d1b      	ldrb	r3, [r3, #20]
 800cfb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cfc0:	f7fd fd96 	bl	800aaf0 <get_fattime>
 800cfc4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cfc6:	68ba      	ldr	r2, [r7, #8]
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfcc:	4619      	mov	r1, r3
 800cfce:	4610      	mov	r0, r2
 800cfd0:	f7fe fa9a 	bl	800b508 <move_window>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cfd8:	7dfb      	ldrb	r3, [r7, #23]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d138      	bne.n	800d050 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfe2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	330b      	adds	r3, #11
 800cfe8:	781a      	ldrb	r2, [r3, #0]
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	330b      	adds	r3, #11
 800cfee:	f042 0220 	orr.w	r2, r2, #32
 800cff2:	b2d2      	uxtb	r2, r2
 800cff4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6818      	ldr	r0, [r3, #0]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	461a      	mov	r2, r3
 800d000:	68f9      	ldr	r1, [r7, #12]
 800d002:	f7fe ffa4 	bl	800bf4e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f103 021c 	add.w	r2, r3, #28
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	68db      	ldr	r3, [r3, #12]
 800d010:	4619      	mov	r1, r3
 800d012:	4610      	mov	r0, r2
 800d014:	f7fe f81d 	bl	800b052 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	3316      	adds	r3, #22
 800d01c:	6939      	ldr	r1, [r7, #16]
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fe f817 	bl	800b052 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	3312      	adds	r3, #18
 800d028:	2100      	movs	r1, #0
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fd fff6 	bl	800b01c <st_word>
					fs->wflag = 1;
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	2201      	movs	r2, #1
 800d034:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fe fa93 	bl	800b564 <sync_fs>
 800d03e:	4603      	mov	r3, r0
 800d040:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	7d1b      	ldrb	r3, [r3, #20]
 800d046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d04a:	b2da      	uxtb	r2, r3
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d050:	7dfb      	ldrb	r3, [r7, #23]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3718      	adds	r7, #24
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b084      	sub	sp, #16
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f7ff ff7b 	bl	800cf5e <f_sync>
 800d068:	4603      	mov	r3, r0
 800d06a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d06c:	7bfb      	ldrb	r3, [r7, #15]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d118      	bne.n	800d0a4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f107 0208 	add.w	r2, r7, #8
 800d078:	4611      	mov	r1, r2
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7ff fbfa 	bl	800c874 <validate>
 800d080:	4603      	mov	r3, r0
 800d082:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d084:	7bfb      	ldrb	r3, [r7, #15]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d10c      	bne.n	800d0a4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	691b      	ldr	r3, [r3, #16]
 800d08e:	4618      	mov	r0, r3
 800d090:	f7fe f996 	bl	800b3c0 <dec_lock>
 800d094:	4603      	mov	r3, r0
 800d096:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d098:	7bfb      	ldrb	r3, [r7, #15]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d102      	bne.n	800d0a4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
	...

0800d0b0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b087      	sub	sp, #28
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	60f8      	str	r0, [r7, #12]
 800d0b8:	60b9      	str	r1, [r7, #8]
 800d0ba:	4613      	mov	r3, r2
 800d0bc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d0c6:	4b1f      	ldr	r3, [pc, #124]	@ (800d144 <FATFS_LinkDriverEx+0x94>)
 800d0c8:	7a5b      	ldrb	r3, [r3, #9]
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d131      	bne.n	800d134 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d0d0:	4b1c      	ldr	r3, [pc, #112]	@ (800d144 <FATFS_LinkDriverEx+0x94>)
 800d0d2:	7a5b      	ldrb	r3, [r3, #9]
 800d0d4:	b2db      	uxtb	r3, r3
 800d0d6:	461a      	mov	r2, r3
 800d0d8:	4b1a      	ldr	r3, [pc, #104]	@ (800d144 <FATFS_LinkDriverEx+0x94>)
 800d0da:	2100      	movs	r1, #0
 800d0dc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d0de:	4b19      	ldr	r3, [pc, #100]	@ (800d144 <FATFS_LinkDriverEx+0x94>)
 800d0e0:	7a5b      	ldrb	r3, [r3, #9]
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	4a17      	ldr	r2, [pc, #92]	@ (800d144 <FATFS_LinkDriverEx+0x94>)
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	4413      	add	r3, r2
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d0ee:	4b15      	ldr	r3, [pc, #84]	@ (800d144 <FATFS_LinkDriverEx+0x94>)
 800d0f0:	7a5b      	ldrb	r3, [r3, #9]
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	461a      	mov	r2, r3
 800d0f6:	4b13      	ldr	r3, [pc, #76]	@ (800d144 <FATFS_LinkDriverEx+0x94>)
 800d0f8:	4413      	add	r3, r2
 800d0fa:	79fa      	ldrb	r2, [r7, #7]
 800d0fc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d0fe:	4b11      	ldr	r3, [pc, #68]	@ (800d144 <FATFS_LinkDriverEx+0x94>)
 800d100:	7a5b      	ldrb	r3, [r3, #9]
 800d102:	b2db      	uxtb	r3, r3
 800d104:	1c5a      	adds	r2, r3, #1
 800d106:	b2d1      	uxtb	r1, r2
 800d108:	4a0e      	ldr	r2, [pc, #56]	@ (800d144 <FATFS_LinkDriverEx+0x94>)
 800d10a:	7251      	strb	r1, [r2, #9]
 800d10c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d10e:	7dbb      	ldrb	r3, [r7, #22]
 800d110:	3330      	adds	r3, #48	@ 0x30
 800d112:	b2da      	uxtb	r2, r3
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	3301      	adds	r3, #1
 800d11c:	223a      	movs	r2, #58	@ 0x3a
 800d11e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	3302      	adds	r3, #2
 800d124:	222f      	movs	r2, #47	@ 0x2f
 800d126:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	3303      	adds	r3, #3
 800d12c:	2200      	movs	r2, #0
 800d12e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d130:	2300      	movs	r3, #0
 800d132:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d134:	7dfb      	ldrb	r3, [r7, #23]
}
 800d136:	4618      	mov	r0, r3
 800d138:	371c      	adds	r7, #28
 800d13a:	46bd      	mov	sp, r7
 800d13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d140:	4770      	bx	lr
 800d142:	bf00      	nop
 800d144:	20000324 	.word	0x20000324

0800d148 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d152:	2200      	movs	r2, #0
 800d154:	6839      	ldr	r1, [r7, #0]
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7ff ffaa 	bl	800d0b0 <FATFS_LinkDriverEx>
 800d15c:	4603      	mov	r3, r0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	3708      	adds	r7, #8
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
	...

0800d168 <siprintf>:
 800d168:	b40e      	push	{r1, r2, r3}
 800d16a:	b510      	push	{r4, lr}
 800d16c:	b09d      	sub	sp, #116	@ 0x74
 800d16e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d170:	9002      	str	r0, [sp, #8]
 800d172:	9006      	str	r0, [sp, #24]
 800d174:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d178:	480a      	ldr	r0, [pc, #40]	@ (800d1a4 <siprintf+0x3c>)
 800d17a:	9107      	str	r1, [sp, #28]
 800d17c:	9104      	str	r1, [sp, #16]
 800d17e:	490a      	ldr	r1, [pc, #40]	@ (800d1a8 <siprintf+0x40>)
 800d180:	f853 2b04 	ldr.w	r2, [r3], #4
 800d184:	9105      	str	r1, [sp, #20]
 800d186:	2400      	movs	r4, #0
 800d188:	a902      	add	r1, sp, #8
 800d18a:	6800      	ldr	r0, [r0, #0]
 800d18c:	9301      	str	r3, [sp, #4]
 800d18e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d190:	f000 f99c 	bl	800d4cc <_svfiprintf_r>
 800d194:	9b02      	ldr	r3, [sp, #8]
 800d196:	701c      	strb	r4, [r3, #0]
 800d198:	b01d      	add	sp, #116	@ 0x74
 800d19a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d19e:	b003      	add	sp, #12
 800d1a0:	4770      	bx	lr
 800d1a2:	bf00      	nop
 800d1a4:	20000010 	.word	0x20000010
 800d1a8:	ffff0208 	.word	0xffff0208

0800d1ac <memset>:
 800d1ac:	4402      	add	r2, r0
 800d1ae:	4603      	mov	r3, r0
 800d1b0:	4293      	cmp	r3, r2
 800d1b2:	d100      	bne.n	800d1b6 <memset+0xa>
 800d1b4:	4770      	bx	lr
 800d1b6:	f803 1b01 	strb.w	r1, [r3], #1
 800d1ba:	e7f9      	b.n	800d1b0 <memset+0x4>

0800d1bc <__errno>:
 800d1bc:	4b01      	ldr	r3, [pc, #4]	@ (800d1c4 <__errno+0x8>)
 800d1be:	6818      	ldr	r0, [r3, #0]
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	20000010 	.word	0x20000010

0800d1c8 <__libc_init_array>:
 800d1c8:	b570      	push	{r4, r5, r6, lr}
 800d1ca:	4d0d      	ldr	r5, [pc, #52]	@ (800d200 <__libc_init_array+0x38>)
 800d1cc:	4c0d      	ldr	r4, [pc, #52]	@ (800d204 <__libc_init_array+0x3c>)
 800d1ce:	1b64      	subs	r4, r4, r5
 800d1d0:	10a4      	asrs	r4, r4, #2
 800d1d2:	2600      	movs	r6, #0
 800d1d4:	42a6      	cmp	r6, r4
 800d1d6:	d109      	bne.n	800d1ec <__libc_init_array+0x24>
 800d1d8:	4d0b      	ldr	r5, [pc, #44]	@ (800d208 <__libc_init_array+0x40>)
 800d1da:	4c0c      	ldr	r4, [pc, #48]	@ (800d20c <__libc_init_array+0x44>)
 800d1dc:	f000 fc6c 	bl	800dab8 <_init>
 800d1e0:	1b64      	subs	r4, r4, r5
 800d1e2:	10a4      	asrs	r4, r4, #2
 800d1e4:	2600      	movs	r6, #0
 800d1e6:	42a6      	cmp	r6, r4
 800d1e8:	d105      	bne.n	800d1f6 <__libc_init_array+0x2e>
 800d1ea:	bd70      	pop	{r4, r5, r6, pc}
 800d1ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1f0:	4798      	blx	r3
 800d1f2:	3601      	adds	r6, #1
 800d1f4:	e7ee      	b.n	800d1d4 <__libc_init_array+0xc>
 800d1f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1fa:	4798      	blx	r3
 800d1fc:	3601      	adds	r6, #1
 800d1fe:	e7f2      	b.n	800d1e6 <__libc_init_array+0x1e>
 800d200:	0800df70 	.word	0x0800df70
 800d204:	0800df70 	.word	0x0800df70
 800d208:	0800df70 	.word	0x0800df70
 800d20c:	0800df74 	.word	0x0800df74

0800d210 <__retarget_lock_acquire_recursive>:
 800d210:	4770      	bx	lr

0800d212 <__retarget_lock_release_recursive>:
 800d212:	4770      	bx	lr

0800d214 <strcpy>:
 800d214:	4603      	mov	r3, r0
 800d216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d21a:	f803 2b01 	strb.w	r2, [r3], #1
 800d21e:	2a00      	cmp	r2, #0
 800d220:	d1f9      	bne.n	800d216 <strcpy+0x2>
 800d222:	4770      	bx	lr

0800d224 <_free_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	4605      	mov	r5, r0
 800d228:	2900      	cmp	r1, #0
 800d22a:	d041      	beq.n	800d2b0 <_free_r+0x8c>
 800d22c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d230:	1f0c      	subs	r4, r1, #4
 800d232:	2b00      	cmp	r3, #0
 800d234:	bfb8      	it	lt
 800d236:	18e4      	addlt	r4, r4, r3
 800d238:	f000 f8e0 	bl	800d3fc <__malloc_lock>
 800d23c:	4a1d      	ldr	r2, [pc, #116]	@ (800d2b4 <_free_r+0x90>)
 800d23e:	6813      	ldr	r3, [r2, #0]
 800d240:	b933      	cbnz	r3, 800d250 <_free_r+0x2c>
 800d242:	6063      	str	r3, [r4, #4]
 800d244:	6014      	str	r4, [r2, #0]
 800d246:	4628      	mov	r0, r5
 800d248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d24c:	f000 b8dc 	b.w	800d408 <__malloc_unlock>
 800d250:	42a3      	cmp	r3, r4
 800d252:	d908      	bls.n	800d266 <_free_r+0x42>
 800d254:	6820      	ldr	r0, [r4, #0]
 800d256:	1821      	adds	r1, r4, r0
 800d258:	428b      	cmp	r3, r1
 800d25a:	bf01      	itttt	eq
 800d25c:	6819      	ldreq	r1, [r3, #0]
 800d25e:	685b      	ldreq	r3, [r3, #4]
 800d260:	1809      	addeq	r1, r1, r0
 800d262:	6021      	streq	r1, [r4, #0]
 800d264:	e7ed      	b.n	800d242 <_free_r+0x1e>
 800d266:	461a      	mov	r2, r3
 800d268:	685b      	ldr	r3, [r3, #4]
 800d26a:	b10b      	cbz	r3, 800d270 <_free_r+0x4c>
 800d26c:	42a3      	cmp	r3, r4
 800d26e:	d9fa      	bls.n	800d266 <_free_r+0x42>
 800d270:	6811      	ldr	r1, [r2, #0]
 800d272:	1850      	adds	r0, r2, r1
 800d274:	42a0      	cmp	r0, r4
 800d276:	d10b      	bne.n	800d290 <_free_r+0x6c>
 800d278:	6820      	ldr	r0, [r4, #0]
 800d27a:	4401      	add	r1, r0
 800d27c:	1850      	adds	r0, r2, r1
 800d27e:	4283      	cmp	r3, r0
 800d280:	6011      	str	r1, [r2, #0]
 800d282:	d1e0      	bne.n	800d246 <_free_r+0x22>
 800d284:	6818      	ldr	r0, [r3, #0]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	6053      	str	r3, [r2, #4]
 800d28a:	4408      	add	r0, r1
 800d28c:	6010      	str	r0, [r2, #0]
 800d28e:	e7da      	b.n	800d246 <_free_r+0x22>
 800d290:	d902      	bls.n	800d298 <_free_r+0x74>
 800d292:	230c      	movs	r3, #12
 800d294:	602b      	str	r3, [r5, #0]
 800d296:	e7d6      	b.n	800d246 <_free_r+0x22>
 800d298:	6820      	ldr	r0, [r4, #0]
 800d29a:	1821      	adds	r1, r4, r0
 800d29c:	428b      	cmp	r3, r1
 800d29e:	bf04      	itt	eq
 800d2a0:	6819      	ldreq	r1, [r3, #0]
 800d2a2:	685b      	ldreq	r3, [r3, #4]
 800d2a4:	6063      	str	r3, [r4, #4]
 800d2a6:	bf04      	itt	eq
 800d2a8:	1809      	addeq	r1, r1, r0
 800d2aa:	6021      	streq	r1, [r4, #0]
 800d2ac:	6054      	str	r4, [r2, #4]
 800d2ae:	e7ca      	b.n	800d246 <_free_r+0x22>
 800d2b0:	bd38      	pop	{r3, r4, r5, pc}
 800d2b2:	bf00      	nop
 800d2b4:	20000474 	.word	0x20000474

0800d2b8 <sbrk_aligned>:
 800d2b8:	b570      	push	{r4, r5, r6, lr}
 800d2ba:	4e0f      	ldr	r6, [pc, #60]	@ (800d2f8 <sbrk_aligned+0x40>)
 800d2bc:	460c      	mov	r4, r1
 800d2be:	6831      	ldr	r1, [r6, #0]
 800d2c0:	4605      	mov	r5, r0
 800d2c2:	b911      	cbnz	r1, 800d2ca <sbrk_aligned+0x12>
 800d2c4:	f000 fba4 	bl	800da10 <_sbrk_r>
 800d2c8:	6030      	str	r0, [r6, #0]
 800d2ca:	4621      	mov	r1, r4
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	f000 fb9f 	bl	800da10 <_sbrk_r>
 800d2d2:	1c43      	adds	r3, r0, #1
 800d2d4:	d103      	bne.n	800d2de <sbrk_aligned+0x26>
 800d2d6:	f04f 34ff 	mov.w	r4, #4294967295
 800d2da:	4620      	mov	r0, r4
 800d2dc:	bd70      	pop	{r4, r5, r6, pc}
 800d2de:	1cc4      	adds	r4, r0, #3
 800d2e0:	f024 0403 	bic.w	r4, r4, #3
 800d2e4:	42a0      	cmp	r0, r4
 800d2e6:	d0f8      	beq.n	800d2da <sbrk_aligned+0x22>
 800d2e8:	1a21      	subs	r1, r4, r0
 800d2ea:	4628      	mov	r0, r5
 800d2ec:	f000 fb90 	bl	800da10 <_sbrk_r>
 800d2f0:	3001      	adds	r0, #1
 800d2f2:	d1f2      	bne.n	800d2da <sbrk_aligned+0x22>
 800d2f4:	e7ef      	b.n	800d2d6 <sbrk_aligned+0x1e>
 800d2f6:	bf00      	nop
 800d2f8:	20000470 	.word	0x20000470

0800d2fc <_malloc_r>:
 800d2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d300:	1ccd      	adds	r5, r1, #3
 800d302:	f025 0503 	bic.w	r5, r5, #3
 800d306:	3508      	adds	r5, #8
 800d308:	2d0c      	cmp	r5, #12
 800d30a:	bf38      	it	cc
 800d30c:	250c      	movcc	r5, #12
 800d30e:	2d00      	cmp	r5, #0
 800d310:	4606      	mov	r6, r0
 800d312:	db01      	blt.n	800d318 <_malloc_r+0x1c>
 800d314:	42a9      	cmp	r1, r5
 800d316:	d904      	bls.n	800d322 <_malloc_r+0x26>
 800d318:	230c      	movs	r3, #12
 800d31a:	6033      	str	r3, [r6, #0]
 800d31c:	2000      	movs	r0, #0
 800d31e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d322:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d3f8 <_malloc_r+0xfc>
 800d326:	f000 f869 	bl	800d3fc <__malloc_lock>
 800d32a:	f8d8 3000 	ldr.w	r3, [r8]
 800d32e:	461c      	mov	r4, r3
 800d330:	bb44      	cbnz	r4, 800d384 <_malloc_r+0x88>
 800d332:	4629      	mov	r1, r5
 800d334:	4630      	mov	r0, r6
 800d336:	f7ff ffbf 	bl	800d2b8 <sbrk_aligned>
 800d33a:	1c43      	adds	r3, r0, #1
 800d33c:	4604      	mov	r4, r0
 800d33e:	d158      	bne.n	800d3f2 <_malloc_r+0xf6>
 800d340:	f8d8 4000 	ldr.w	r4, [r8]
 800d344:	4627      	mov	r7, r4
 800d346:	2f00      	cmp	r7, #0
 800d348:	d143      	bne.n	800d3d2 <_malloc_r+0xd6>
 800d34a:	2c00      	cmp	r4, #0
 800d34c:	d04b      	beq.n	800d3e6 <_malloc_r+0xea>
 800d34e:	6823      	ldr	r3, [r4, #0]
 800d350:	4639      	mov	r1, r7
 800d352:	4630      	mov	r0, r6
 800d354:	eb04 0903 	add.w	r9, r4, r3
 800d358:	f000 fb5a 	bl	800da10 <_sbrk_r>
 800d35c:	4581      	cmp	r9, r0
 800d35e:	d142      	bne.n	800d3e6 <_malloc_r+0xea>
 800d360:	6821      	ldr	r1, [r4, #0]
 800d362:	1a6d      	subs	r5, r5, r1
 800d364:	4629      	mov	r1, r5
 800d366:	4630      	mov	r0, r6
 800d368:	f7ff ffa6 	bl	800d2b8 <sbrk_aligned>
 800d36c:	3001      	adds	r0, #1
 800d36e:	d03a      	beq.n	800d3e6 <_malloc_r+0xea>
 800d370:	6823      	ldr	r3, [r4, #0]
 800d372:	442b      	add	r3, r5
 800d374:	6023      	str	r3, [r4, #0]
 800d376:	f8d8 3000 	ldr.w	r3, [r8]
 800d37a:	685a      	ldr	r2, [r3, #4]
 800d37c:	bb62      	cbnz	r2, 800d3d8 <_malloc_r+0xdc>
 800d37e:	f8c8 7000 	str.w	r7, [r8]
 800d382:	e00f      	b.n	800d3a4 <_malloc_r+0xa8>
 800d384:	6822      	ldr	r2, [r4, #0]
 800d386:	1b52      	subs	r2, r2, r5
 800d388:	d420      	bmi.n	800d3cc <_malloc_r+0xd0>
 800d38a:	2a0b      	cmp	r2, #11
 800d38c:	d917      	bls.n	800d3be <_malloc_r+0xc2>
 800d38e:	1961      	adds	r1, r4, r5
 800d390:	42a3      	cmp	r3, r4
 800d392:	6025      	str	r5, [r4, #0]
 800d394:	bf18      	it	ne
 800d396:	6059      	strne	r1, [r3, #4]
 800d398:	6863      	ldr	r3, [r4, #4]
 800d39a:	bf08      	it	eq
 800d39c:	f8c8 1000 	streq.w	r1, [r8]
 800d3a0:	5162      	str	r2, [r4, r5]
 800d3a2:	604b      	str	r3, [r1, #4]
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	f000 f82f 	bl	800d408 <__malloc_unlock>
 800d3aa:	f104 000b 	add.w	r0, r4, #11
 800d3ae:	1d23      	adds	r3, r4, #4
 800d3b0:	f020 0007 	bic.w	r0, r0, #7
 800d3b4:	1ac2      	subs	r2, r0, r3
 800d3b6:	bf1c      	itt	ne
 800d3b8:	1a1b      	subne	r3, r3, r0
 800d3ba:	50a3      	strne	r3, [r4, r2]
 800d3bc:	e7af      	b.n	800d31e <_malloc_r+0x22>
 800d3be:	6862      	ldr	r2, [r4, #4]
 800d3c0:	42a3      	cmp	r3, r4
 800d3c2:	bf0c      	ite	eq
 800d3c4:	f8c8 2000 	streq.w	r2, [r8]
 800d3c8:	605a      	strne	r2, [r3, #4]
 800d3ca:	e7eb      	b.n	800d3a4 <_malloc_r+0xa8>
 800d3cc:	4623      	mov	r3, r4
 800d3ce:	6864      	ldr	r4, [r4, #4]
 800d3d0:	e7ae      	b.n	800d330 <_malloc_r+0x34>
 800d3d2:	463c      	mov	r4, r7
 800d3d4:	687f      	ldr	r7, [r7, #4]
 800d3d6:	e7b6      	b.n	800d346 <_malloc_r+0x4a>
 800d3d8:	461a      	mov	r2, r3
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	42a3      	cmp	r3, r4
 800d3de:	d1fb      	bne.n	800d3d8 <_malloc_r+0xdc>
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	6053      	str	r3, [r2, #4]
 800d3e4:	e7de      	b.n	800d3a4 <_malloc_r+0xa8>
 800d3e6:	230c      	movs	r3, #12
 800d3e8:	6033      	str	r3, [r6, #0]
 800d3ea:	4630      	mov	r0, r6
 800d3ec:	f000 f80c 	bl	800d408 <__malloc_unlock>
 800d3f0:	e794      	b.n	800d31c <_malloc_r+0x20>
 800d3f2:	6005      	str	r5, [r0, #0]
 800d3f4:	e7d6      	b.n	800d3a4 <_malloc_r+0xa8>
 800d3f6:	bf00      	nop
 800d3f8:	20000474 	.word	0x20000474

0800d3fc <__malloc_lock>:
 800d3fc:	4801      	ldr	r0, [pc, #4]	@ (800d404 <__malloc_lock+0x8>)
 800d3fe:	f7ff bf07 	b.w	800d210 <__retarget_lock_acquire_recursive>
 800d402:	bf00      	nop
 800d404:	2000046c 	.word	0x2000046c

0800d408 <__malloc_unlock>:
 800d408:	4801      	ldr	r0, [pc, #4]	@ (800d410 <__malloc_unlock+0x8>)
 800d40a:	f7ff bf02 	b.w	800d212 <__retarget_lock_release_recursive>
 800d40e:	bf00      	nop
 800d410:	2000046c 	.word	0x2000046c

0800d414 <__ssputs_r>:
 800d414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d418:	688e      	ldr	r6, [r1, #8]
 800d41a:	461f      	mov	r7, r3
 800d41c:	42be      	cmp	r6, r7
 800d41e:	680b      	ldr	r3, [r1, #0]
 800d420:	4682      	mov	sl, r0
 800d422:	460c      	mov	r4, r1
 800d424:	4690      	mov	r8, r2
 800d426:	d82d      	bhi.n	800d484 <__ssputs_r+0x70>
 800d428:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d42c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d430:	d026      	beq.n	800d480 <__ssputs_r+0x6c>
 800d432:	6965      	ldr	r5, [r4, #20]
 800d434:	6909      	ldr	r1, [r1, #16]
 800d436:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d43a:	eba3 0901 	sub.w	r9, r3, r1
 800d43e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d442:	1c7b      	adds	r3, r7, #1
 800d444:	444b      	add	r3, r9
 800d446:	106d      	asrs	r5, r5, #1
 800d448:	429d      	cmp	r5, r3
 800d44a:	bf38      	it	cc
 800d44c:	461d      	movcc	r5, r3
 800d44e:	0553      	lsls	r3, r2, #21
 800d450:	d527      	bpl.n	800d4a2 <__ssputs_r+0x8e>
 800d452:	4629      	mov	r1, r5
 800d454:	f7ff ff52 	bl	800d2fc <_malloc_r>
 800d458:	4606      	mov	r6, r0
 800d45a:	b360      	cbz	r0, 800d4b6 <__ssputs_r+0xa2>
 800d45c:	6921      	ldr	r1, [r4, #16]
 800d45e:	464a      	mov	r2, r9
 800d460:	f000 fae6 	bl	800da30 <memcpy>
 800d464:	89a3      	ldrh	r3, [r4, #12]
 800d466:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d46a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d46e:	81a3      	strh	r3, [r4, #12]
 800d470:	6126      	str	r6, [r4, #16]
 800d472:	6165      	str	r5, [r4, #20]
 800d474:	444e      	add	r6, r9
 800d476:	eba5 0509 	sub.w	r5, r5, r9
 800d47a:	6026      	str	r6, [r4, #0]
 800d47c:	60a5      	str	r5, [r4, #8]
 800d47e:	463e      	mov	r6, r7
 800d480:	42be      	cmp	r6, r7
 800d482:	d900      	bls.n	800d486 <__ssputs_r+0x72>
 800d484:	463e      	mov	r6, r7
 800d486:	6820      	ldr	r0, [r4, #0]
 800d488:	4632      	mov	r2, r6
 800d48a:	4641      	mov	r1, r8
 800d48c:	f000 faa6 	bl	800d9dc <memmove>
 800d490:	68a3      	ldr	r3, [r4, #8]
 800d492:	1b9b      	subs	r3, r3, r6
 800d494:	60a3      	str	r3, [r4, #8]
 800d496:	6823      	ldr	r3, [r4, #0]
 800d498:	4433      	add	r3, r6
 800d49a:	6023      	str	r3, [r4, #0]
 800d49c:	2000      	movs	r0, #0
 800d49e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4a2:	462a      	mov	r2, r5
 800d4a4:	f000 fad2 	bl	800da4c <_realloc_r>
 800d4a8:	4606      	mov	r6, r0
 800d4aa:	2800      	cmp	r0, #0
 800d4ac:	d1e0      	bne.n	800d470 <__ssputs_r+0x5c>
 800d4ae:	6921      	ldr	r1, [r4, #16]
 800d4b0:	4650      	mov	r0, sl
 800d4b2:	f7ff feb7 	bl	800d224 <_free_r>
 800d4b6:	230c      	movs	r3, #12
 800d4b8:	f8ca 3000 	str.w	r3, [sl]
 800d4bc:	89a3      	ldrh	r3, [r4, #12]
 800d4be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4c2:	81a3      	strh	r3, [r4, #12]
 800d4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c8:	e7e9      	b.n	800d49e <__ssputs_r+0x8a>
	...

0800d4cc <_svfiprintf_r>:
 800d4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d0:	4698      	mov	r8, r3
 800d4d2:	898b      	ldrh	r3, [r1, #12]
 800d4d4:	061b      	lsls	r3, r3, #24
 800d4d6:	b09d      	sub	sp, #116	@ 0x74
 800d4d8:	4607      	mov	r7, r0
 800d4da:	460d      	mov	r5, r1
 800d4dc:	4614      	mov	r4, r2
 800d4de:	d510      	bpl.n	800d502 <_svfiprintf_r+0x36>
 800d4e0:	690b      	ldr	r3, [r1, #16]
 800d4e2:	b973      	cbnz	r3, 800d502 <_svfiprintf_r+0x36>
 800d4e4:	2140      	movs	r1, #64	@ 0x40
 800d4e6:	f7ff ff09 	bl	800d2fc <_malloc_r>
 800d4ea:	6028      	str	r0, [r5, #0]
 800d4ec:	6128      	str	r0, [r5, #16]
 800d4ee:	b930      	cbnz	r0, 800d4fe <_svfiprintf_r+0x32>
 800d4f0:	230c      	movs	r3, #12
 800d4f2:	603b      	str	r3, [r7, #0]
 800d4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f8:	b01d      	add	sp, #116	@ 0x74
 800d4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4fe:	2340      	movs	r3, #64	@ 0x40
 800d500:	616b      	str	r3, [r5, #20]
 800d502:	2300      	movs	r3, #0
 800d504:	9309      	str	r3, [sp, #36]	@ 0x24
 800d506:	2320      	movs	r3, #32
 800d508:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d50c:	f8cd 800c 	str.w	r8, [sp, #12]
 800d510:	2330      	movs	r3, #48	@ 0x30
 800d512:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d6b0 <_svfiprintf_r+0x1e4>
 800d516:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d51a:	f04f 0901 	mov.w	r9, #1
 800d51e:	4623      	mov	r3, r4
 800d520:	469a      	mov	sl, r3
 800d522:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d526:	b10a      	cbz	r2, 800d52c <_svfiprintf_r+0x60>
 800d528:	2a25      	cmp	r2, #37	@ 0x25
 800d52a:	d1f9      	bne.n	800d520 <_svfiprintf_r+0x54>
 800d52c:	ebba 0b04 	subs.w	fp, sl, r4
 800d530:	d00b      	beq.n	800d54a <_svfiprintf_r+0x7e>
 800d532:	465b      	mov	r3, fp
 800d534:	4622      	mov	r2, r4
 800d536:	4629      	mov	r1, r5
 800d538:	4638      	mov	r0, r7
 800d53a:	f7ff ff6b 	bl	800d414 <__ssputs_r>
 800d53e:	3001      	adds	r0, #1
 800d540:	f000 80a7 	beq.w	800d692 <_svfiprintf_r+0x1c6>
 800d544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d546:	445a      	add	r2, fp
 800d548:	9209      	str	r2, [sp, #36]	@ 0x24
 800d54a:	f89a 3000 	ldrb.w	r3, [sl]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	f000 809f 	beq.w	800d692 <_svfiprintf_r+0x1c6>
 800d554:	2300      	movs	r3, #0
 800d556:	f04f 32ff 	mov.w	r2, #4294967295
 800d55a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d55e:	f10a 0a01 	add.w	sl, sl, #1
 800d562:	9304      	str	r3, [sp, #16]
 800d564:	9307      	str	r3, [sp, #28]
 800d566:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d56a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d56c:	4654      	mov	r4, sl
 800d56e:	2205      	movs	r2, #5
 800d570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d574:	484e      	ldr	r0, [pc, #312]	@ (800d6b0 <_svfiprintf_r+0x1e4>)
 800d576:	f7f2 fe33 	bl	80001e0 <memchr>
 800d57a:	9a04      	ldr	r2, [sp, #16]
 800d57c:	b9d8      	cbnz	r0, 800d5b6 <_svfiprintf_r+0xea>
 800d57e:	06d0      	lsls	r0, r2, #27
 800d580:	bf44      	itt	mi
 800d582:	2320      	movmi	r3, #32
 800d584:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d588:	0711      	lsls	r1, r2, #28
 800d58a:	bf44      	itt	mi
 800d58c:	232b      	movmi	r3, #43	@ 0x2b
 800d58e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d592:	f89a 3000 	ldrb.w	r3, [sl]
 800d596:	2b2a      	cmp	r3, #42	@ 0x2a
 800d598:	d015      	beq.n	800d5c6 <_svfiprintf_r+0xfa>
 800d59a:	9a07      	ldr	r2, [sp, #28]
 800d59c:	4654      	mov	r4, sl
 800d59e:	2000      	movs	r0, #0
 800d5a0:	f04f 0c0a 	mov.w	ip, #10
 800d5a4:	4621      	mov	r1, r4
 800d5a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d5aa:	3b30      	subs	r3, #48	@ 0x30
 800d5ac:	2b09      	cmp	r3, #9
 800d5ae:	d94b      	bls.n	800d648 <_svfiprintf_r+0x17c>
 800d5b0:	b1b0      	cbz	r0, 800d5e0 <_svfiprintf_r+0x114>
 800d5b2:	9207      	str	r2, [sp, #28]
 800d5b4:	e014      	b.n	800d5e0 <_svfiprintf_r+0x114>
 800d5b6:	eba0 0308 	sub.w	r3, r0, r8
 800d5ba:	fa09 f303 	lsl.w	r3, r9, r3
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	9304      	str	r3, [sp, #16]
 800d5c2:	46a2      	mov	sl, r4
 800d5c4:	e7d2      	b.n	800d56c <_svfiprintf_r+0xa0>
 800d5c6:	9b03      	ldr	r3, [sp, #12]
 800d5c8:	1d19      	adds	r1, r3, #4
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	9103      	str	r1, [sp, #12]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	bfbb      	ittet	lt
 800d5d2:	425b      	neglt	r3, r3
 800d5d4:	f042 0202 	orrlt.w	r2, r2, #2
 800d5d8:	9307      	strge	r3, [sp, #28]
 800d5da:	9307      	strlt	r3, [sp, #28]
 800d5dc:	bfb8      	it	lt
 800d5de:	9204      	strlt	r2, [sp, #16]
 800d5e0:	7823      	ldrb	r3, [r4, #0]
 800d5e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d5e4:	d10a      	bne.n	800d5fc <_svfiprintf_r+0x130>
 800d5e6:	7863      	ldrb	r3, [r4, #1]
 800d5e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d5ea:	d132      	bne.n	800d652 <_svfiprintf_r+0x186>
 800d5ec:	9b03      	ldr	r3, [sp, #12]
 800d5ee:	1d1a      	adds	r2, r3, #4
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	9203      	str	r2, [sp, #12]
 800d5f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5f8:	3402      	adds	r4, #2
 800d5fa:	9305      	str	r3, [sp, #20]
 800d5fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d6c0 <_svfiprintf_r+0x1f4>
 800d600:	7821      	ldrb	r1, [r4, #0]
 800d602:	2203      	movs	r2, #3
 800d604:	4650      	mov	r0, sl
 800d606:	f7f2 fdeb 	bl	80001e0 <memchr>
 800d60a:	b138      	cbz	r0, 800d61c <_svfiprintf_r+0x150>
 800d60c:	9b04      	ldr	r3, [sp, #16]
 800d60e:	eba0 000a 	sub.w	r0, r0, sl
 800d612:	2240      	movs	r2, #64	@ 0x40
 800d614:	4082      	lsls	r2, r0
 800d616:	4313      	orrs	r3, r2
 800d618:	3401      	adds	r4, #1
 800d61a:	9304      	str	r3, [sp, #16]
 800d61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d620:	4824      	ldr	r0, [pc, #144]	@ (800d6b4 <_svfiprintf_r+0x1e8>)
 800d622:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d626:	2206      	movs	r2, #6
 800d628:	f7f2 fdda 	bl	80001e0 <memchr>
 800d62c:	2800      	cmp	r0, #0
 800d62e:	d036      	beq.n	800d69e <_svfiprintf_r+0x1d2>
 800d630:	4b21      	ldr	r3, [pc, #132]	@ (800d6b8 <_svfiprintf_r+0x1ec>)
 800d632:	bb1b      	cbnz	r3, 800d67c <_svfiprintf_r+0x1b0>
 800d634:	9b03      	ldr	r3, [sp, #12]
 800d636:	3307      	adds	r3, #7
 800d638:	f023 0307 	bic.w	r3, r3, #7
 800d63c:	3308      	adds	r3, #8
 800d63e:	9303      	str	r3, [sp, #12]
 800d640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d642:	4433      	add	r3, r6
 800d644:	9309      	str	r3, [sp, #36]	@ 0x24
 800d646:	e76a      	b.n	800d51e <_svfiprintf_r+0x52>
 800d648:	fb0c 3202 	mla	r2, ip, r2, r3
 800d64c:	460c      	mov	r4, r1
 800d64e:	2001      	movs	r0, #1
 800d650:	e7a8      	b.n	800d5a4 <_svfiprintf_r+0xd8>
 800d652:	2300      	movs	r3, #0
 800d654:	3401      	adds	r4, #1
 800d656:	9305      	str	r3, [sp, #20]
 800d658:	4619      	mov	r1, r3
 800d65a:	f04f 0c0a 	mov.w	ip, #10
 800d65e:	4620      	mov	r0, r4
 800d660:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d664:	3a30      	subs	r2, #48	@ 0x30
 800d666:	2a09      	cmp	r2, #9
 800d668:	d903      	bls.n	800d672 <_svfiprintf_r+0x1a6>
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d0c6      	beq.n	800d5fc <_svfiprintf_r+0x130>
 800d66e:	9105      	str	r1, [sp, #20]
 800d670:	e7c4      	b.n	800d5fc <_svfiprintf_r+0x130>
 800d672:	fb0c 2101 	mla	r1, ip, r1, r2
 800d676:	4604      	mov	r4, r0
 800d678:	2301      	movs	r3, #1
 800d67a:	e7f0      	b.n	800d65e <_svfiprintf_r+0x192>
 800d67c:	ab03      	add	r3, sp, #12
 800d67e:	9300      	str	r3, [sp, #0]
 800d680:	462a      	mov	r2, r5
 800d682:	4b0e      	ldr	r3, [pc, #56]	@ (800d6bc <_svfiprintf_r+0x1f0>)
 800d684:	a904      	add	r1, sp, #16
 800d686:	4638      	mov	r0, r7
 800d688:	f3af 8000 	nop.w
 800d68c:	1c42      	adds	r2, r0, #1
 800d68e:	4606      	mov	r6, r0
 800d690:	d1d6      	bne.n	800d640 <_svfiprintf_r+0x174>
 800d692:	89ab      	ldrh	r3, [r5, #12]
 800d694:	065b      	lsls	r3, r3, #25
 800d696:	f53f af2d 	bmi.w	800d4f4 <_svfiprintf_r+0x28>
 800d69a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d69c:	e72c      	b.n	800d4f8 <_svfiprintf_r+0x2c>
 800d69e:	ab03      	add	r3, sp, #12
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	462a      	mov	r2, r5
 800d6a4:	4b05      	ldr	r3, [pc, #20]	@ (800d6bc <_svfiprintf_r+0x1f0>)
 800d6a6:	a904      	add	r1, sp, #16
 800d6a8:	4638      	mov	r0, r7
 800d6aa:	f000 f879 	bl	800d7a0 <_printf_i>
 800d6ae:	e7ed      	b.n	800d68c <_svfiprintf_r+0x1c0>
 800d6b0:	0800df34 	.word	0x0800df34
 800d6b4:	0800df3e 	.word	0x0800df3e
 800d6b8:	00000000 	.word	0x00000000
 800d6bc:	0800d415 	.word	0x0800d415
 800d6c0:	0800df3a 	.word	0x0800df3a

0800d6c4 <_printf_common>:
 800d6c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6c8:	4616      	mov	r6, r2
 800d6ca:	4698      	mov	r8, r3
 800d6cc:	688a      	ldr	r2, [r1, #8]
 800d6ce:	690b      	ldr	r3, [r1, #16]
 800d6d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d6d4:	4293      	cmp	r3, r2
 800d6d6:	bfb8      	it	lt
 800d6d8:	4613      	movlt	r3, r2
 800d6da:	6033      	str	r3, [r6, #0]
 800d6dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d6e0:	4607      	mov	r7, r0
 800d6e2:	460c      	mov	r4, r1
 800d6e4:	b10a      	cbz	r2, 800d6ea <_printf_common+0x26>
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	6033      	str	r3, [r6, #0]
 800d6ea:	6823      	ldr	r3, [r4, #0]
 800d6ec:	0699      	lsls	r1, r3, #26
 800d6ee:	bf42      	ittt	mi
 800d6f0:	6833      	ldrmi	r3, [r6, #0]
 800d6f2:	3302      	addmi	r3, #2
 800d6f4:	6033      	strmi	r3, [r6, #0]
 800d6f6:	6825      	ldr	r5, [r4, #0]
 800d6f8:	f015 0506 	ands.w	r5, r5, #6
 800d6fc:	d106      	bne.n	800d70c <_printf_common+0x48>
 800d6fe:	f104 0a19 	add.w	sl, r4, #25
 800d702:	68e3      	ldr	r3, [r4, #12]
 800d704:	6832      	ldr	r2, [r6, #0]
 800d706:	1a9b      	subs	r3, r3, r2
 800d708:	42ab      	cmp	r3, r5
 800d70a:	dc26      	bgt.n	800d75a <_printf_common+0x96>
 800d70c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d710:	6822      	ldr	r2, [r4, #0]
 800d712:	3b00      	subs	r3, #0
 800d714:	bf18      	it	ne
 800d716:	2301      	movne	r3, #1
 800d718:	0692      	lsls	r2, r2, #26
 800d71a:	d42b      	bmi.n	800d774 <_printf_common+0xb0>
 800d71c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d720:	4641      	mov	r1, r8
 800d722:	4638      	mov	r0, r7
 800d724:	47c8      	blx	r9
 800d726:	3001      	adds	r0, #1
 800d728:	d01e      	beq.n	800d768 <_printf_common+0xa4>
 800d72a:	6823      	ldr	r3, [r4, #0]
 800d72c:	6922      	ldr	r2, [r4, #16]
 800d72e:	f003 0306 	and.w	r3, r3, #6
 800d732:	2b04      	cmp	r3, #4
 800d734:	bf02      	ittt	eq
 800d736:	68e5      	ldreq	r5, [r4, #12]
 800d738:	6833      	ldreq	r3, [r6, #0]
 800d73a:	1aed      	subeq	r5, r5, r3
 800d73c:	68a3      	ldr	r3, [r4, #8]
 800d73e:	bf0c      	ite	eq
 800d740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d744:	2500      	movne	r5, #0
 800d746:	4293      	cmp	r3, r2
 800d748:	bfc4      	itt	gt
 800d74a:	1a9b      	subgt	r3, r3, r2
 800d74c:	18ed      	addgt	r5, r5, r3
 800d74e:	2600      	movs	r6, #0
 800d750:	341a      	adds	r4, #26
 800d752:	42b5      	cmp	r5, r6
 800d754:	d11a      	bne.n	800d78c <_printf_common+0xc8>
 800d756:	2000      	movs	r0, #0
 800d758:	e008      	b.n	800d76c <_printf_common+0xa8>
 800d75a:	2301      	movs	r3, #1
 800d75c:	4652      	mov	r2, sl
 800d75e:	4641      	mov	r1, r8
 800d760:	4638      	mov	r0, r7
 800d762:	47c8      	blx	r9
 800d764:	3001      	adds	r0, #1
 800d766:	d103      	bne.n	800d770 <_printf_common+0xac>
 800d768:	f04f 30ff 	mov.w	r0, #4294967295
 800d76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d770:	3501      	adds	r5, #1
 800d772:	e7c6      	b.n	800d702 <_printf_common+0x3e>
 800d774:	18e1      	adds	r1, r4, r3
 800d776:	1c5a      	adds	r2, r3, #1
 800d778:	2030      	movs	r0, #48	@ 0x30
 800d77a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d77e:	4422      	add	r2, r4
 800d780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d788:	3302      	adds	r3, #2
 800d78a:	e7c7      	b.n	800d71c <_printf_common+0x58>
 800d78c:	2301      	movs	r3, #1
 800d78e:	4622      	mov	r2, r4
 800d790:	4641      	mov	r1, r8
 800d792:	4638      	mov	r0, r7
 800d794:	47c8      	blx	r9
 800d796:	3001      	adds	r0, #1
 800d798:	d0e6      	beq.n	800d768 <_printf_common+0xa4>
 800d79a:	3601      	adds	r6, #1
 800d79c:	e7d9      	b.n	800d752 <_printf_common+0x8e>
	...

0800d7a0 <_printf_i>:
 800d7a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a4:	7e0f      	ldrb	r7, [r1, #24]
 800d7a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d7a8:	2f78      	cmp	r7, #120	@ 0x78
 800d7aa:	4691      	mov	r9, r2
 800d7ac:	4680      	mov	r8, r0
 800d7ae:	460c      	mov	r4, r1
 800d7b0:	469a      	mov	sl, r3
 800d7b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d7b6:	d807      	bhi.n	800d7c8 <_printf_i+0x28>
 800d7b8:	2f62      	cmp	r7, #98	@ 0x62
 800d7ba:	d80a      	bhi.n	800d7d2 <_printf_i+0x32>
 800d7bc:	2f00      	cmp	r7, #0
 800d7be:	f000 80d1 	beq.w	800d964 <_printf_i+0x1c4>
 800d7c2:	2f58      	cmp	r7, #88	@ 0x58
 800d7c4:	f000 80b8 	beq.w	800d938 <_printf_i+0x198>
 800d7c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d7cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d7d0:	e03a      	b.n	800d848 <_printf_i+0xa8>
 800d7d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d7d6:	2b15      	cmp	r3, #21
 800d7d8:	d8f6      	bhi.n	800d7c8 <_printf_i+0x28>
 800d7da:	a101      	add	r1, pc, #4	@ (adr r1, 800d7e0 <_printf_i+0x40>)
 800d7dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7e0:	0800d839 	.word	0x0800d839
 800d7e4:	0800d84d 	.word	0x0800d84d
 800d7e8:	0800d7c9 	.word	0x0800d7c9
 800d7ec:	0800d7c9 	.word	0x0800d7c9
 800d7f0:	0800d7c9 	.word	0x0800d7c9
 800d7f4:	0800d7c9 	.word	0x0800d7c9
 800d7f8:	0800d84d 	.word	0x0800d84d
 800d7fc:	0800d7c9 	.word	0x0800d7c9
 800d800:	0800d7c9 	.word	0x0800d7c9
 800d804:	0800d7c9 	.word	0x0800d7c9
 800d808:	0800d7c9 	.word	0x0800d7c9
 800d80c:	0800d94b 	.word	0x0800d94b
 800d810:	0800d877 	.word	0x0800d877
 800d814:	0800d905 	.word	0x0800d905
 800d818:	0800d7c9 	.word	0x0800d7c9
 800d81c:	0800d7c9 	.word	0x0800d7c9
 800d820:	0800d96d 	.word	0x0800d96d
 800d824:	0800d7c9 	.word	0x0800d7c9
 800d828:	0800d877 	.word	0x0800d877
 800d82c:	0800d7c9 	.word	0x0800d7c9
 800d830:	0800d7c9 	.word	0x0800d7c9
 800d834:	0800d90d 	.word	0x0800d90d
 800d838:	6833      	ldr	r3, [r6, #0]
 800d83a:	1d1a      	adds	r2, r3, #4
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	6032      	str	r2, [r6, #0]
 800d840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d848:	2301      	movs	r3, #1
 800d84a:	e09c      	b.n	800d986 <_printf_i+0x1e6>
 800d84c:	6833      	ldr	r3, [r6, #0]
 800d84e:	6820      	ldr	r0, [r4, #0]
 800d850:	1d19      	adds	r1, r3, #4
 800d852:	6031      	str	r1, [r6, #0]
 800d854:	0606      	lsls	r6, r0, #24
 800d856:	d501      	bpl.n	800d85c <_printf_i+0xbc>
 800d858:	681d      	ldr	r5, [r3, #0]
 800d85a:	e003      	b.n	800d864 <_printf_i+0xc4>
 800d85c:	0645      	lsls	r5, r0, #25
 800d85e:	d5fb      	bpl.n	800d858 <_printf_i+0xb8>
 800d860:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d864:	2d00      	cmp	r5, #0
 800d866:	da03      	bge.n	800d870 <_printf_i+0xd0>
 800d868:	232d      	movs	r3, #45	@ 0x2d
 800d86a:	426d      	negs	r5, r5
 800d86c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d870:	4858      	ldr	r0, [pc, #352]	@ (800d9d4 <_printf_i+0x234>)
 800d872:	230a      	movs	r3, #10
 800d874:	e011      	b.n	800d89a <_printf_i+0xfa>
 800d876:	6821      	ldr	r1, [r4, #0]
 800d878:	6833      	ldr	r3, [r6, #0]
 800d87a:	0608      	lsls	r0, r1, #24
 800d87c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d880:	d402      	bmi.n	800d888 <_printf_i+0xe8>
 800d882:	0649      	lsls	r1, r1, #25
 800d884:	bf48      	it	mi
 800d886:	b2ad      	uxthmi	r5, r5
 800d888:	2f6f      	cmp	r7, #111	@ 0x6f
 800d88a:	4852      	ldr	r0, [pc, #328]	@ (800d9d4 <_printf_i+0x234>)
 800d88c:	6033      	str	r3, [r6, #0]
 800d88e:	bf14      	ite	ne
 800d890:	230a      	movne	r3, #10
 800d892:	2308      	moveq	r3, #8
 800d894:	2100      	movs	r1, #0
 800d896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d89a:	6866      	ldr	r6, [r4, #4]
 800d89c:	60a6      	str	r6, [r4, #8]
 800d89e:	2e00      	cmp	r6, #0
 800d8a0:	db05      	blt.n	800d8ae <_printf_i+0x10e>
 800d8a2:	6821      	ldr	r1, [r4, #0]
 800d8a4:	432e      	orrs	r6, r5
 800d8a6:	f021 0104 	bic.w	r1, r1, #4
 800d8aa:	6021      	str	r1, [r4, #0]
 800d8ac:	d04b      	beq.n	800d946 <_printf_i+0x1a6>
 800d8ae:	4616      	mov	r6, r2
 800d8b0:	fbb5 f1f3 	udiv	r1, r5, r3
 800d8b4:	fb03 5711 	mls	r7, r3, r1, r5
 800d8b8:	5dc7      	ldrb	r7, [r0, r7]
 800d8ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d8be:	462f      	mov	r7, r5
 800d8c0:	42bb      	cmp	r3, r7
 800d8c2:	460d      	mov	r5, r1
 800d8c4:	d9f4      	bls.n	800d8b0 <_printf_i+0x110>
 800d8c6:	2b08      	cmp	r3, #8
 800d8c8:	d10b      	bne.n	800d8e2 <_printf_i+0x142>
 800d8ca:	6823      	ldr	r3, [r4, #0]
 800d8cc:	07df      	lsls	r7, r3, #31
 800d8ce:	d508      	bpl.n	800d8e2 <_printf_i+0x142>
 800d8d0:	6923      	ldr	r3, [r4, #16]
 800d8d2:	6861      	ldr	r1, [r4, #4]
 800d8d4:	4299      	cmp	r1, r3
 800d8d6:	bfde      	ittt	le
 800d8d8:	2330      	movle	r3, #48	@ 0x30
 800d8da:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d8de:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d8e2:	1b92      	subs	r2, r2, r6
 800d8e4:	6122      	str	r2, [r4, #16]
 800d8e6:	f8cd a000 	str.w	sl, [sp]
 800d8ea:	464b      	mov	r3, r9
 800d8ec:	aa03      	add	r2, sp, #12
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	4640      	mov	r0, r8
 800d8f2:	f7ff fee7 	bl	800d6c4 <_printf_common>
 800d8f6:	3001      	adds	r0, #1
 800d8f8:	d14a      	bne.n	800d990 <_printf_i+0x1f0>
 800d8fa:	f04f 30ff 	mov.w	r0, #4294967295
 800d8fe:	b004      	add	sp, #16
 800d900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	f043 0320 	orr.w	r3, r3, #32
 800d90a:	6023      	str	r3, [r4, #0]
 800d90c:	4832      	ldr	r0, [pc, #200]	@ (800d9d8 <_printf_i+0x238>)
 800d90e:	2778      	movs	r7, #120	@ 0x78
 800d910:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	6831      	ldr	r1, [r6, #0]
 800d918:	061f      	lsls	r7, r3, #24
 800d91a:	f851 5b04 	ldr.w	r5, [r1], #4
 800d91e:	d402      	bmi.n	800d926 <_printf_i+0x186>
 800d920:	065f      	lsls	r7, r3, #25
 800d922:	bf48      	it	mi
 800d924:	b2ad      	uxthmi	r5, r5
 800d926:	6031      	str	r1, [r6, #0]
 800d928:	07d9      	lsls	r1, r3, #31
 800d92a:	bf44      	itt	mi
 800d92c:	f043 0320 	orrmi.w	r3, r3, #32
 800d930:	6023      	strmi	r3, [r4, #0]
 800d932:	b11d      	cbz	r5, 800d93c <_printf_i+0x19c>
 800d934:	2310      	movs	r3, #16
 800d936:	e7ad      	b.n	800d894 <_printf_i+0xf4>
 800d938:	4826      	ldr	r0, [pc, #152]	@ (800d9d4 <_printf_i+0x234>)
 800d93a:	e7e9      	b.n	800d910 <_printf_i+0x170>
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	f023 0320 	bic.w	r3, r3, #32
 800d942:	6023      	str	r3, [r4, #0]
 800d944:	e7f6      	b.n	800d934 <_printf_i+0x194>
 800d946:	4616      	mov	r6, r2
 800d948:	e7bd      	b.n	800d8c6 <_printf_i+0x126>
 800d94a:	6833      	ldr	r3, [r6, #0]
 800d94c:	6825      	ldr	r5, [r4, #0]
 800d94e:	6961      	ldr	r1, [r4, #20]
 800d950:	1d18      	adds	r0, r3, #4
 800d952:	6030      	str	r0, [r6, #0]
 800d954:	062e      	lsls	r6, r5, #24
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	d501      	bpl.n	800d95e <_printf_i+0x1be>
 800d95a:	6019      	str	r1, [r3, #0]
 800d95c:	e002      	b.n	800d964 <_printf_i+0x1c4>
 800d95e:	0668      	lsls	r0, r5, #25
 800d960:	d5fb      	bpl.n	800d95a <_printf_i+0x1ba>
 800d962:	8019      	strh	r1, [r3, #0]
 800d964:	2300      	movs	r3, #0
 800d966:	6123      	str	r3, [r4, #16]
 800d968:	4616      	mov	r6, r2
 800d96a:	e7bc      	b.n	800d8e6 <_printf_i+0x146>
 800d96c:	6833      	ldr	r3, [r6, #0]
 800d96e:	1d1a      	adds	r2, r3, #4
 800d970:	6032      	str	r2, [r6, #0]
 800d972:	681e      	ldr	r6, [r3, #0]
 800d974:	6862      	ldr	r2, [r4, #4]
 800d976:	2100      	movs	r1, #0
 800d978:	4630      	mov	r0, r6
 800d97a:	f7f2 fc31 	bl	80001e0 <memchr>
 800d97e:	b108      	cbz	r0, 800d984 <_printf_i+0x1e4>
 800d980:	1b80      	subs	r0, r0, r6
 800d982:	6060      	str	r0, [r4, #4]
 800d984:	6863      	ldr	r3, [r4, #4]
 800d986:	6123      	str	r3, [r4, #16]
 800d988:	2300      	movs	r3, #0
 800d98a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d98e:	e7aa      	b.n	800d8e6 <_printf_i+0x146>
 800d990:	6923      	ldr	r3, [r4, #16]
 800d992:	4632      	mov	r2, r6
 800d994:	4649      	mov	r1, r9
 800d996:	4640      	mov	r0, r8
 800d998:	47d0      	blx	sl
 800d99a:	3001      	adds	r0, #1
 800d99c:	d0ad      	beq.n	800d8fa <_printf_i+0x15a>
 800d99e:	6823      	ldr	r3, [r4, #0]
 800d9a0:	079b      	lsls	r3, r3, #30
 800d9a2:	d413      	bmi.n	800d9cc <_printf_i+0x22c>
 800d9a4:	68e0      	ldr	r0, [r4, #12]
 800d9a6:	9b03      	ldr	r3, [sp, #12]
 800d9a8:	4298      	cmp	r0, r3
 800d9aa:	bfb8      	it	lt
 800d9ac:	4618      	movlt	r0, r3
 800d9ae:	e7a6      	b.n	800d8fe <_printf_i+0x15e>
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	4632      	mov	r2, r6
 800d9b4:	4649      	mov	r1, r9
 800d9b6:	4640      	mov	r0, r8
 800d9b8:	47d0      	blx	sl
 800d9ba:	3001      	adds	r0, #1
 800d9bc:	d09d      	beq.n	800d8fa <_printf_i+0x15a>
 800d9be:	3501      	adds	r5, #1
 800d9c0:	68e3      	ldr	r3, [r4, #12]
 800d9c2:	9903      	ldr	r1, [sp, #12]
 800d9c4:	1a5b      	subs	r3, r3, r1
 800d9c6:	42ab      	cmp	r3, r5
 800d9c8:	dcf2      	bgt.n	800d9b0 <_printf_i+0x210>
 800d9ca:	e7eb      	b.n	800d9a4 <_printf_i+0x204>
 800d9cc:	2500      	movs	r5, #0
 800d9ce:	f104 0619 	add.w	r6, r4, #25
 800d9d2:	e7f5      	b.n	800d9c0 <_printf_i+0x220>
 800d9d4:	0800df45 	.word	0x0800df45
 800d9d8:	0800df56 	.word	0x0800df56

0800d9dc <memmove>:
 800d9dc:	4288      	cmp	r0, r1
 800d9de:	b510      	push	{r4, lr}
 800d9e0:	eb01 0402 	add.w	r4, r1, r2
 800d9e4:	d902      	bls.n	800d9ec <memmove+0x10>
 800d9e6:	4284      	cmp	r4, r0
 800d9e8:	4623      	mov	r3, r4
 800d9ea:	d807      	bhi.n	800d9fc <memmove+0x20>
 800d9ec:	1e43      	subs	r3, r0, #1
 800d9ee:	42a1      	cmp	r1, r4
 800d9f0:	d008      	beq.n	800da04 <memmove+0x28>
 800d9f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9fa:	e7f8      	b.n	800d9ee <memmove+0x12>
 800d9fc:	4402      	add	r2, r0
 800d9fe:	4601      	mov	r1, r0
 800da00:	428a      	cmp	r2, r1
 800da02:	d100      	bne.n	800da06 <memmove+0x2a>
 800da04:	bd10      	pop	{r4, pc}
 800da06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da0e:	e7f7      	b.n	800da00 <memmove+0x24>

0800da10 <_sbrk_r>:
 800da10:	b538      	push	{r3, r4, r5, lr}
 800da12:	4d06      	ldr	r5, [pc, #24]	@ (800da2c <_sbrk_r+0x1c>)
 800da14:	2300      	movs	r3, #0
 800da16:	4604      	mov	r4, r0
 800da18:	4608      	mov	r0, r1
 800da1a:	602b      	str	r3, [r5, #0]
 800da1c:	f7f5 fb52 	bl	80030c4 <_sbrk>
 800da20:	1c43      	adds	r3, r0, #1
 800da22:	d102      	bne.n	800da2a <_sbrk_r+0x1a>
 800da24:	682b      	ldr	r3, [r5, #0]
 800da26:	b103      	cbz	r3, 800da2a <_sbrk_r+0x1a>
 800da28:	6023      	str	r3, [r4, #0]
 800da2a:	bd38      	pop	{r3, r4, r5, pc}
 800da2c:	20000468 	.word	0x20000468

0800da30 <memcpy>:
 800da30:	440a      	add	r2, r1
 800da32:	4291      	cmp	r1, r2
 800da34:	f100 33ff 	add.w	r3, r0, #4294967295
 800da38:	d100      	bne.n	800da3c <memcpy+0xc>
 800da3a:	4770      	bx	lr
 800da3c:	b510      	push	{r4, lr}
 800da3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da46:	4291      	cmp	r1, r2
 800da48:	d1f9      	bne.n	800da3e <memcpy+0xe>
 800da4a:	bd10      	pop	{r4, pc}

0800da4c <_realloc_r>:
 800da4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da50:	4607      	mov	r7, r0
 800da52:	4614      	mov	r4, r2
 800da54:	460d      	mov	r5, r1
 800da56:	b921      	cbnz	r1, 800da62 <_realloc_r+0x16>
 800da58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da5c:	4611      	mov	r1, r2
 800da5e:	f7ff bc4d 	b.w	800d2fc <_malloc_r>
 800da62:	b92a      	cbnz	r2, 800da70 <_realloc_r+0x24>
 800da64:	f7ff fbde 	bl	800d224 <_free_r>
 800da68:	4625      	mov	r5, r4
 800da6a:	4628      	mov	r0, r5
 800da6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da70:	f000 f81a 	bl	800daa8 <_malloc_usable_size_r>
 800da74:	4284      	cmp	r4, r0
 800da76:	4606      	mov	r6, r0
 800da78:	d802      	bhi.n	800da80 <_realloc_r+0x34>
 800da7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da7e:	d8f4      	bhi.n	800da6a <_realloc_r+0x1e>
 800da80:	4621      	mov	r1, r4
 800da82:	4638      	mov	r0, r7
 800da84:	f7ff fc3a 	bl	800d2fc <_malloc_r>
 800da88:	4680      	mov	r8, r0
 800da8a:	b908      	cbnz	r0, 800da90 <_realloc_r+0x44>
 800da8c:	4645      	mov	r5, r8
 800da8e:	e7ec      	b.n	800da6a <_realloc_r+0x1e>
 800da90:	42b4      	cmp	r4, r6
 800da92:	4622      	mov	r2, r4
 800da94:	4629      	mov	r1, r5
 800da96:	bf28      	it	cs
 800da98:	4632      	movcs	r2, r6
 800da9a:	f7ff ffc9 	bl	800da30 <memcpy>
 800da9e:	4629      	mov	r1, r5
 800daa0:	4638      	mov	r0, r7
 800daa2:	f7ff fbbf 	bl	800d224 <_free_r>
 800daa6:	e7f1      	b.n	800da8c <_realloc_r+0x40>

0800daa8 <_malloc_usable_size_r>:
 800daa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daac:	1f18      	subs	r0, r3, #4
 800daae:	2b00      	cmp	r3, #0
 800dab0:	bfbc      	itt	lt
 800dab2:	580b      	ldrlt	r3, [r1, r0]
 800dab4:	18c0      	addlt	r0, r0, r3
 800dab6:	4770      	bx	lr

0800dab8 <_init>:
 800dab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daba:	bf00      	nop
 800dabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dabe:	bc08      	pop	{r3}
 800dac0:	469e      	mov	lr, r3
 800dac2:	4770      	bx	lr

0800dac4 <_fini>:
 800dac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dac6:	bf00      	nop
 800dac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daca:	bc08      	pop	{r3}
 800dacc:	469e      	mov	lr, r3
 800dace:	4770      	bx	lr
