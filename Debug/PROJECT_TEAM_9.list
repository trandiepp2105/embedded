
PROJECT_TEAM_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004760  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  080048e8  080048e8  000058e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b24  08004b24  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b24  08004b24  00005b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b2c  08004b2c  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b2c  08004b2c  00005b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b30  08004b30  00005b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004b34  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000000cc  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a33a  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b44  00000000  00000000  00010376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  00011ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003154  00000000  00000000  000128b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc76  00000000  00000000  00015a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9782  00000000  00000000  0002267a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbdfc  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 0000079a  00000000  00000000  000dbe3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000028a4  00000000  00000000  000dc5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000dee80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048d0 	.word	0x080048d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080048d0 	.word	0x080048d0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

int main(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000508:	f001 f9dc 	bl	80018c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050c:	f000 f810 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000510:	f000 f8da 	bl	80006c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000514:	f000 f8a2 	bl	800065c <MX_SPI1_Init>
  MX_I2C2_Init();
 8000518:	f000 f872 	bl	8000600 <MX_I2C2_Init>
  Manual_LCD_Init();       // Initialize the LCD using the manual driver
 800051c:	f000 fa30 	bl	8000980 <Manual_LCD_Init>
  Manual_LCD_DrawLayout(); // Draw the predefined layout
 8000520:	f000 fe58 	bl	80011d4 <Manual_LCD_DrawLayout>

  while (1)
  {
    // The layout is static, so no need to redraw in the loop unless it changes
    HAL_Delay(1000); // Keep the MCU busy or add other tasks
 8000524:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000528:	f001 fa3e 	bl	80019a8 <HAL_Delay>
 800052c:	e7fa      	b.n	8000524 <main+0x20>
	...

08000530 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	@ 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	@ 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 f99a 	bl	8004878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b27      	ldr	r3, [pc, #156]	@ (80005f8 <SystemClock_Config+0xc8>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	4a26      	ldr	r2, [pc, #152]	@ (80005f8 <SystemClock_Config+0xc8>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	@ 0x40
 8000564:	4b24      	ldr	r3, [pc, #144]	@ (80005f8 <SystemClock_Config+0xc8>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b21      	ldr	r3, [pc, #132]	@ (80005fc <SystemClock_Config+0xcc>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a20      	ldr	r2, [pc, #128]	@ (80005fc <SystemClock_Config+0xcc>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1e      	ldr	r3, [pc, #120]	@ (80005fc <SystemClock_Config+0xcc>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000598:	2302      	movs	r3, #2
 800059a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059c:	2300      	movs	r3, #0
 800059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005a4:	2354      	movs	r3, #84	@ 0x54
 80005a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005ac:	2304      	movs	r3, #4
 80005ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fa71 	bl	8003a9c <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c0:	f000 f90c 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2102      	movs	r1, #2
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 fcd3 	bl	8003f8c <HAL_RCC_ClockConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005ec:	f000 f8f6 	bl	80007dc <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3750      	adds	r7, #80	@ 0x50
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40007000 	.word	0x40007000

08000600 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000604:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <MX_I2C2_Init+0x50>)
 8000606:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <MX_I2C2_Init+0x54>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800060a:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <MX_I2C2_Init+0x50>)
 800060c:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <MX_I2C2_Init+0x58>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <MX_I2C2_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <MX_I2C2_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061c:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <MX_I2C2_Init+0x50>)
 800061e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000622:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <MX_I2C2_Init+0x50>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <MX_I2C2_Init+0x50>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000630:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <MX_I2C2_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000636:	4b06      	ldr	r3, [pc, #24]	@ (8000650 <MX_I2C2_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800063c:	4804      	ldr	r0, [pc, #16]	@ (8000650 <MX_I2C2_Init+0x50>)
 800063e:	f001 fcf3 	bl	8002028 <HAL_I2C_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000648:	f000 f8c8 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000028 	.word	0x20000028
 8000654:	40005800 	.word	0x40005800
 8000658:	000186a0 	.word	0x000186a0

0800065c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000660:	4b17      	ldr	r3, [pc, #92]	@ (80006c0 <MX_SPI1_Init+0x64>)
 8000662:	4a18      	ldr	r2, [pc, #96]	@ (80006c4 <MX_SPI1_Init+0x68>)
 8000664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <MX_SPI1_Init+0x64>)
 8000668:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800066c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800066e:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_SPI1_Init+0x64>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_SPI1_Init+0x64>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_SPI1_Init+0x64>)
 800067c:	2200      	movs	r2, #0
 800067e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_SPI1_Init+0x64>)
 8000682:	2200      	movs	r2, #0
 8000684:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_SPI1_Init+0x64>)
 8000688:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800068c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_SPI1_Init+0x64>)
 8000690:	2220      	movs	r2, #32
 8000692:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <MX_SPI1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_SPI1_Init+0x64>)
 800069c:	2200      	movs	r2, #0
 800069e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <MX_SPI1_Init+0x64>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_SPI1_Init+0x64>)
 80006a8:	220a      	movs	r2, #10
 80006aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ac:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_SPI1_Init+0x64>)
 80006ae:	f003 fe39 	bl	8004324 <HAL_SPI_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006b8:	f000 f890 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	2000007c 	.word	0x2000007c
 80006c4:	40013000 	.word	0x40013000

080006c8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	4b3b      	ldr	r3, [pc, #236]	@ (80007d0 <MX_GPIO_Init+0x108>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a3a      	ldr	r2, [pc, #232]	@ (80007d0 <MX_GPIO_Init+0x108>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b38      	ldr	r3, [pc, #224]	@ (80007d0 <MX_GPIO_Init+0x108>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b34      	ldr	r3, [pc, #208]	@ (80007d0 <MX_GPIO_Init+0x108>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a33      	ldr	r2, [pc, #204]	@ (80007d0 <MX_GPIO_Init+0x108>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b31      	ldr	r3, [pc, #196]	@ (80007d0 <MX_GPIO_Init+0x108>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b2d      	ldr	r3, [pc, #180]	@ (80007d0 <MX_GPIO_Init+0x108>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a2c      	ldr	r2, [pc, #176]	@ (80007d0 <MX_GPIO_Init+0x108>)
 8000720:	f043 0302 	orr.w	r3, r3, #2
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b2a      	ldr	r3, [pc, #168]	@ (80007d0 <MX_GPIO_Init+0x108>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f003 0302 	and.w	r3, r3, #2
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 8000738:	4826      	ldr	r0, [pc, #152]	@ (80007d4 <MX_GPIO_Init+0x10c>)
 800073a:	f001 fc37 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000744:	4824      	ldr	r0, [pc, #144]	@ (80007d8 <MX_GPIO_Init+0x110>)
 8000746:	f001 fc31 	bl	8001fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800074a:	2302      	movs	r3, #2
 800074c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000752:	2302      	movs	r3, #2
 8000754:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	4619      	mov	r1, r3
 800075c:	481e      	ldr	r0, [pc, #120]	@ (80007d8 <MX_GPIO_Init+0x110>)
 800075e:	f001 fa89 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_BL_Pin LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin;
 8000762:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8000766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	2301      	movs	r3, #1
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	4619      	mov	r1, r3
 800077a:	4816      	ldr	r0, [pc, #88]	@ (80007d4 <MX_GPIO_Init+0x10c>)
 800077c:	f001 fa7a 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 8000780:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	4619      	mov	r1, r3
 8000798:	480f      	ldr	r0, [pc, #60]	@ (80007d8 <MX_GPIO_Init+0x110>)
 800079a:	f001 fa6b 	bl	8001c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800079e:	2310      	movs	r3, #16
 80007a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	4808      	ldr	r0, [pc, #32]	@ (80007d4 <MX_GPIO_Init+0x10c>)
 80007b4:	f001 fa5e 	bl	8001c74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2100      	movs	r1, #0
 80007bc:	200a      	movs	r0, #10
 80007be:	f001 f9f2 	bl	8001ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007c2:	200a      	movs	r0, #10
 80007c4:	f001 fa0b 	bl	8001bde <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007c8:	bf00      	nop
 80007ca:	3720      	adds	r7, #32
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400
 80007d8:	40020000 	.word	0x40020000

080007dc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <Error_Handler+0x8>

080007e8 <LCD_SPI_Send>:

// External SPI handle defined in main.c
extern SPI_HandleTypeDef hspi1;

// Low-level SPI communication functions
static void LCD_SPI_Send(uint8_t data) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80007f2:	1df9      	adds	r1, r7, #7
 80007f4:	f04f 33ff 	mov.w	r3, #4294967295
 80007f8:	2201      	movs	r2, #1
 80007fa:	4803      	ldr	r0, [pc, #12]	@ (8000808 <LCD_SPI_Send+0x20>)
 80007fc:	f003 fe1b 	bl	8004436 <HAL_SPI_Transmit>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	2000007c 	.word	0x2000007c

0800080c <LCD_Write_Cmd>:

static void LCD_Write_Cmd(uint8_t cmd) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // DC low for command
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800081c:	480a      	ldr	r0, [pc, #40]	@ (8000848 <LCD_Write_Cmd+0x3c>)
 800081e:	f001 fbc5 	bl	8001fac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8000822:	2200      	movs	r2, #0
 8000824:	2180      	movs	r1, #128	@ 0x80
 8000826:	4808      	ldr	r0, [pc, #32]	@ (8000848 <LCD_Write_Cmd+0x3c>)
 8000828:	f001 fbc0 	bl	8001fac <HAL_GPIO_WritePin>
    LCD_SPI_Send(cmd);
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ffda 	bl	80007e8 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);   // CS high to deselect
 8000834:	2201      	movs	r2, #1
 8000836:	2180      	movs	r1, #128	@ 0x80
 8000838:	4803      	ldr	r0, [pc, #12]	@ (8000848 <LCD_Write_Cmd+0x3c>)
 800083a:	f001 fbb7 	bl	8001fac <HAL_GPIO_WritePin>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40020400 	.word	0x40020400

0800084c <LCD_Write_Data>:

static void LCD_Write_Data(uint8_t data) {
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8000856:	2201      	movs	r2, #1
 8000858:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800085c:	480a      	ldr	r0, [pc, #40]	@ (8000888 <LCD_Write_Data+0x3c>)
 800085e:	f001 fba5 	bl	8001fac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8000862:	2200      	movs	r2, #0
 8000864:	2180      	movs	r1, #128	@ 0x80
 8000866:	4808      	ldr	r0, [pc, #32]	@ (8000888 <LCD_Write_Data+0x3c>)
 8000868:	f001 fba0 	bl	8001fac <HAL_GPIO_WritePin>
    LCD_SPI_Send(data);
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ffba 	bl	80007e8 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);   // CS high to deselect
 8000874:	2201      	movs	r2, #1
 8000876:	2180      	movs	r1, #128	@ 0x80
 8000878:	4803      	ldr	r0, [pc, #12]	@ (8000888 <LCD_Write_Data+0x3c>)
 800087a:	f001 fb97 	bl	8001fac <HAL_GPIO_WritePin>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40020400 	.word	0x40020400

0800088c <LCD_Write_Data16>:

static void LCD_Write_Data16(uint16_t data) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8000896:	2201      	movs	r2, #1
 8000898:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800089c:	4810      	ldr	r0, [pc, #64]	@ (80008e0 <LCD_Write_Data16+0x54>)
 800089e:	f001 fb85 	bl	8001fac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 80008a2:	2200      	movs	r2, #0
 80008a4:	2180      	movs	r1, #128	@ 0x80
 80008a6:	480e      	ldr	r0, [pc, #56]	@ (80008e0 <LCD_Write_Data16+0x54>)
 80008a8:	f001 fb80 	bl	8001fac <HAL_GPIO_WritePin>
    uint8_t bytes[2];
    bytes[0] = (data >> 8) & 0xFF;
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	0a1b      	lsrs	r3, r3, #8
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	733b      	strb	r3, [r7, #12]
    bytes[1] = data & 0xFF;
 80008b6:	88fb      	ldrh	r3, [r7, #6]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, bytes, 2, HAL_MAX_DELAY);
 80008bc:	f107 010c 	add.w	r1, r7, #12
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295
 80008c4:	2202      	movs	r2, #2
 80008c6:	4807      	ldr	r0, [pc, #28]	@ (80008e4 <LCD_Write_Data16+0x58>)
 80008c8:	f003 fdb5 	bl	8004436 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);   // CS high to deselect
 80008cc:	2201      	movs	r2, #1
 80008ce:	2180      	movs	r1, #128	@ 0x80
 80008d0:	4803      	ldr	r0, [pc, #12]	@ (80008e0 <LCD_Write_Data16+0x54>)
 80008d2:	f001 fb6b 	bl	8001fac <HAL_GPIO_WritePin>
}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40020400 	.word	0x40020400
 80008e4:	2000007c 	.word	0x2000007c

080008e8 <LCD_Set_Address_Window>:

// Set drawing window
static void LCD_Set_Address_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4604      	mov	r4, r0
 80008f0:	4608      	mov	r0, r1
 80008f2:	4611      	mov	r1, r2
 80008f4:	461a      	mov	r2, r3
 80008f6:	4623      	mov	r3, r4
 80008f8:	80fb      	strh	r3, [r7, #6]
 80008fa:	4603      	mov	r3, r0
 80008fc:	80bb      	strh	r3, [r7, #4]
 80008fe:	460b      	mov	r3, r1
 8000900:	807b      	strh	r3, [r7, #2]
 8000902:	4613      	mov	r3, r2
 8000904:	803b      	strh	r3, [r7, #0]
    LCD_Write_Cmd(0x2A); // Column Address Set
 8000906:	202a      	movs	r0, #42	@ 0x2a
 8000908:	f7ff ff80 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(x1 >> 8);
 800090c:	88fb      	ldrh	r3, [r7, #6]
 800090e:	0a1b      	lsrs	r3, r3, #8
 8000910:	b29b      	uxth	r3, r3
 8000912:	b2db      	uxtb	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff99 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(x1 & 0xFF);
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff94 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(x2 >> 8);
 8000924:	887b      	ldrh	r3, [r7, #2]
 8000926:	0a1b      	lsrs	r3, r3, #8
 8000928:	b29b      	uxth	r3, r3
 800092a:	b2db      	uxtb	r3, r3
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff ff8d 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(x2 & 0xFF);
 8000932:	887b      	ldrh	r3, [r7, #2]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff88 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0x2B); // Page Address Set
 800093c:	202b      	movs	r0, #43	@ 0x2b
 800093e:	f7ff ff65 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(y1 >> 8);
 8000942:	88bb      	ldrh	r3, [r7, #4]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	b2db      	uxtb	r3, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ff7e 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(y1 & 0xFF);
 8000950:	88bb      	ldrh	r3, [r7, #4]
 8000952:	b2db      	uxtb	r3, r3
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff79 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(y2 >> 8);
 800095a:	883b      	ldrh	r3, [r7, #0]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	b29b      	uxth	r3, r3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff ff72 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(y2 & 0xFF);
 8000968:	883b      	ldrh	r3, [r7, #0]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff6d 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0x2C); // Memory Write
 8000972:	202c      	movs	r0, #44	@ 0x2c
 8000974:	f7ff ff4a 	bl	800080c <LCD_Write_Cmd>
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	bd90      	pop	{r4, r7, pc}

08000980 <Manual_LCD_Init>:

void Manual_LCD_Init(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
    // Hardware Reset
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2104      	movs	r1, #4
 8000988:	4889      	ldr	r0, [pc, #548]	@ (8000bb0 <Manual_LCD_Init+0x230>)
 800098a:	f001 fb0f 	bl	8001fac <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800098e:	2064      	movs	r0, #100	@ 0x64
 8000990:	f001 f80a 	bl	80019a8 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2104      	movs	r1, #4
 8000998:	4885      	ldr	r0, [pc, #532]	@ (8000bb0 <Manual_LCD_Init+0x230>)
 800099a:	f001 fb07 	bl	8001fac <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800099e:	2064      	movs	r0, #100	@ 0x64
 80009a0:	f001 f802 	bl	80019a8 <HAL_Delay>

    // Backlight ON
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2140      	movs	r1, #64	@ 0x40
 80009a8:	4881      	ldr	r0, [pc, #516]	@ (8000bb0 <Manual_LCD_Init+0x230>)
 80009aa:	f001 faff 	bl	8001fac <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80009ae:	200a      	movs	r0, #10
 80009b0:	f000 fffa 	bl	80019a8 <HAL_Delay>

    // Initialization sequence (Example for ILI9341 - ADJUST FOR YOUR LCD)
    LCD_Write_Cmd(0xCF); // Power Control B
 80009b4:	20cf      	movs	r0, #207	@ 0xcf
 80009b6:	f7ff ff29 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 80009ba:	2000      	movs	r0, #0
 80009bc:	f7ff ff46 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 80009c0:	20c1      	movs	r0, #193	@ 0xc1
 80009c2:	f7ff ff43 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x30);
 80009c6:	2030      	movs	r0, #48	@ 0x30
 80009c8:	f7ff ff40 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0xED); // Power on sequence control
 80009cc:	20ed      	movs	r0, #237	@ 0xed
 80009ce:	f7ff ff1d 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x64);
 80009d2:	2064      	movs	r0, #100	@ 0x64
 80009d4:	f7ff ff3a 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x03);
 80009d8:	2003      	movs	r0, #3
 80009da:	f7ff ff37 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x12);
 80009de:	2012      	movs	r0, #18
 80009e0:	f7ff ff34 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x81);
 80009e4:	2081      	movs	r0, #129	@ 0x81
 80009e6:	f7ff ff31 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0xE8); // Driver timing control A
 80009ea:	20e8      	movs	r0, #232	@ 0xe8
 80009ec:	f7ff ff0e 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x85);
 80009f0:	2085      	movs	r0, #133	@ 0x85
 80009f2:	f7ff ff2b 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x00);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f7ff ff28 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x78);
 80009fc:	2078      	movs	r0, #120	@ 0x78
 80009fe:	f7ff ff25 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0xCB); // Power control A
 8000a02:	20cb      	movs	r0, #203	@ 0xcb
 8000a04:	f7ff ff02 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x39);
 8000a08:	2039      	movs	r0, #57	@ 0x39
 8000a0a:	f7ff ff1f 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x2C);
 8000a0e:	202c      	movs	r0, #44	@ 0x2c
 8000a10:	f7ff ff1c 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff ff19 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x34);
 8000a1a:	2034      	movs	r0, #52	@ 0x34
 8000a1c:	f7ff ff16 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x02);
 8000a20:	2002      	movs	r0, #2
 8000a22:	f7ff ff13 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0xF7); // Pump ratio control
 8000a26:	20f7      	movs	r0, #247	@ 0xf7
 8000a28:	f7ff fef0 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x20);
 8000a2c:	2020      	movs	r0, #32
 8000a2e:	f7ff ff0d 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0xEA); // Driver timing control B
 8000a32:	20ea      	movs	r0, #234	@ 0xea
 8000a34:	f7ff feea 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f7ff ff07 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f7ff ff04 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0xC0); // Power Control 1
 8000a44:	20c0      	movs	r0, #192	@ 0xc0
 8000a46:	f7ff fee1 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x23); // VRH[5:0]
 8000a4a:	2023      	movs	r0, #35	@ 0x23
 8000a4c:	f7ff fefe 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0xC1); // Power Control 2
 8000a50:	20c1      	movs	r0, #193	@ 0xc1
 8000a52:	f7ff fedb 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x10); // SAP[2:0];BT[3:0]
 8000a56:	2010      	movs	r0, #16
 8000a58:	f7ff fef8 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0xC5); // VCOM Control 1
 8000a5c:	20c5      	movs	r0, #197	@ 0xc5
 8000a5e:	f7ff fed5 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x3E); // Contrast
 8000a62:	203e      	movs	r0, #62	@ 0x3e
 8000a64:	f7ff fef2 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x28);
 8000a68:	2028      	movs	r0, #40	@ 0x28
 8000a6a:	f7ff feef 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0xC7); // VCOM Control 2
 8000a6e:	20c7      	movs	r0, #199	@ 0xc7
 8000a70:	f7ff fecc 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x86); // --
 8000a74:	2086      	movs	r0, #134	@ 0x86
 8000a76:	f7ff fee9 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0x36); // Memory Access Control
 8000a7a:	2036      	movs	r0, #54	@ 0x36
 8000a7c:	f7ff fec6 	bl	800080c <LCD_Write_Cmd>
    // LCD_Write_Data(0x08); // Previous value
    LCD_Write_Data(0x28); // Try this: MV=1, MY=0, MX=0, BGR=1 (Landscape, X:T-B, Y:L-R)
 8000a80:	2028      	movs	r0, #40	@ 0x28
 8000a82:	f7ff fee3 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0x3A); // Pixel Format Set
 8000a86:	203a      	movs	r0, #58	@ 0x3a
 8000a88:	f7ff fec0 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x55); // 16 bits/pixel
 8000a8c:	2055      	movs	r0, #85	@ 0x55
 8000a8e:	f7ff fedd 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0xB1); // Frame Rate Control (In Normal Mode/Full Colors)
 8000a92:	20b1      	movs	r0, #177	@ 0xb1
 8000a94:	f7ff feba 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f7ff fed7 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x18);
 8000a9e:	2018      	movs	r0, #24
 8000aa0:	f7ff fed4 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0xB6); // Display Function Control
 8000aa4:	20b6      	movs	r0, #182	@ 0xb6
 8000aa6:	f7ff feb1 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x08);
 8000aaa:	2008      	movs	r0, #8
 8000aac:	f7ff fece 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x82);
 8000ab0:	2082      	movs	r0, #130	@ 0x82
 8000ab2:	f7ff fecb 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x27);
 8000ab6:	2027      	movs	r0, #39	@ 0x27
 8000ab8:	f7ff fec8 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0xF2); // Enable 3G
 8000abc:	20f2      	movs	r0, #242	@ 0xf2
 8000abe:	f7ff fea5 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x00); // 3Gamma Function Disable
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f7ff fec2 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0x26); // Gamma Set
 8000ac8:	2026      	movs	r0, #38	@ 0x26
 8000aca:	f7ff fe9f 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x01); // Gamma curve selected
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f7ff febc 	bl	800084c <LCD_Write_Data>

    // ... (Positive and Negative Gamma Correction remain the same) ...
    LCD_Write_Cmd(0xE0); // Positive Gamma Correction
 8000ad4:	20e0      	movs	r0, #224	@ 0xe0
 8000ad6:	f7ff fe99 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x0F);
 8000ada:	200f      	movs	r0, #15
 8000adc:	f7ff feb6 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8000ae0:	2031      	movs	r0, #49	@ 0x31
 8000ae2:	f7ff feb3 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x2B);
 8000ae6:	202b      	movs	r0, #43	@ 0x2b
 8000ae8:	f7ff feb0 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8000aec:	200c      	movs	r0, #12
 8000aee:	f7ff fead 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8000af2:	200e      	movs	r0, #14
 8000af4:	f7ff feaa 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8000af8:	2008      	movs	r0, #8
 8000afa:	f7ff fea7 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x4E);
 8000afe:	204e      	movs	r0, #78	@ 0x4e
 8000b00:	f7ff fea4 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0xF1);
 8000b04:	20f1      	movs	r0, #241	@ 0xf1
 8000b06:	f7ff fea1 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x37);
 8000b0a:	2037      	movs	r0, #55	@ 0x37
 8000b0c:	f7ff fe9e 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x07);
 8000b10:	2007      	movs	r0, #7
 8000b12:	f7ff fe9b 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x10);
 8000b16:	2010      	movs	r0, #16
 8000b18:	f7ff fe98 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f7ff fe95 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8000b22:	200e      	movs	r0, #14
 8000b24:	f7ff fe92 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x09);
 8000b28:	2009      	movs	r0, #9
 8000b2a:	f7ff fe8f 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff fe8c 	bl	800084c <LCD_Write_Data>

    LCD_Write_Cmd(0xE1); // Negative Gamma Correction
 8000b34:	20e1      	movs	r0, #225	@ 0xe1
 8000b36:	f7ff fe69 	bl	800080c <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fe86 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8000b40:	200e      	movs	r0, #14
 8000b42:	f7ff fe83 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x14);
 8000b46:	2014      	movs	r0, #20
 8000b48:	f7ff fe80 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f7ff fe7d 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x11);
 8000b52:	2011      	movs	r0, #17
 8000b54:	f7ff fe7a 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x07);
 8000b58:	2007      	movs	r0, #7
 8000b5a:	f7ff fe77 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8000b5e:	2031      	movs	r0, #49	@ 0x31
 8000b60:	f7ff fe74 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 8000b64:	20c1      	movs	r0, #193	@ 0xc1
 8000b66:	f7ff fe71 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x48);
 8000b6a:	2048      	movs	r0, #72	@ 0x48
 8000b6c:	f7ff fe6e 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8000b70:	2008      	movs	r0, #8
 8000b72:	f7ff fe6b 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8000b76:	200f      	movs	r0, #15
 8000b78:	f7ff fe68 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8000b7c:	200c      	movs	r0, #12
 8000b7e:	f7ff fe65 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8000b82:	2031      	movs	r0, #49	@ 0x31
 8000b84:	f7ff fe62 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x36);
 8000b88:	2036      	movs	r0, #54	@ 0x36
 8000b8a:	f7ff fe5f 	bl	800084c <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8000b8e:	200f      	movs	r0, #15
 8000b90:	f7ff fe5c 	bl	800084c <LCD_Write_Data>


    LCD_Write_Cmd(0x11); // Exit Sleep
 8000b94:	2011      	movs	r0, #17
 8000b96:	f7ff fe39 	bl	800080c <LCD_Write_Cmd>
    HAL_Delay(120);
 8000b9a:	2078      	movs	r0, #120	@ 0x78
 8000b9c:	f000 ff04 	bl	80019a8 <HAL_Delay>
    LCD_Write_Cmd(0x29); // Display ON
 8000ba0:	2029      	movs	r0, #41	@ 0x29
 8000ba2:	f7ff fe33 	bl	800080c <LCD_Write_Cmd>

    Manual_LCD_Clear(COLOR_BLACK);
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 f804 	bl	8000bb4 <Manual_LCD_Clear>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40020400 	.word	0x40020400

08000bb4 <Manual_LCD_Clear>:
//
//    Manual_LCD_Clear(COLOR_RED);
//}
//

void Manual_LCD_Clear(uint16_t color) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	80fb      	strh	r3, [r7, #6]
    LCD_Set_Address_Window(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 8000bbe:	f240 133f 	movw	r3, #319	@ 0x13f
 8000bc2:	22ef      	movs	r2, #239	@ 0xef
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff fe8e 	bl	80008e8 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8000bcc:	2201      	movs	r2, #1
 8000bce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bd2:	4815      	ldr	r0, [pc, #84]	@ (8000c28 <Manual_LCD_Clear+0x74>)
 8000bd4:	f001 f9ea 	bl	8001fac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2180      	movs	r1, #128	@ 0x80
 8000bdc:	4812      	ldr	r0, [pc, #72]	@ (8000c28 <Manual_LCD_Clear+0x74>)
 8000bde:	f001 f9e5 	bl	8001fac <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	723b      	strb	r3, [r7, #8]
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++) {
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	e00a      	b.n	8000c0e <Manual_LCD_Clear+0x5a>
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8000bf8:	f107 0108 	add.w	r1, r7, #8
 8000bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000c00:	2202      	movs	r2, #2
 8000c02:	480a      	ldr	r0, [pc, #40]	@ (8000c2c <Manual_LCD_Clear+0x78>)
 8000c04:	f003 fc17 	bl	8004436 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++) {
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000c14:	d3f0      	bcc.n	8000bf8 <Manual_LCD_Clear+0x44>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);   // CS high to deselect
 8000c16:	2201      	movs	r2, #1
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	4803      	ldr	r0, [pc, #12]	@ (8000c28 <Manual_LCD_Clear+0x74>)
 8000c1c:	f001 f9c6 	bl	8001fac <HAL_GPIO_WritePin>
}
 8000c20:	bf00      	nop
 8000c22:	3710      	adds	r7, #16
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	2000007c 	.word	0x2000007c

08000c30 <Manual_LCD_DrawPixel>:

void Manual_LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	80fb      	strh	r3, [r7, #6]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	80bb      	strh	r3, [r7, #4]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	807b      	strh	r3, [r7, #2]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT) return;
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	2bef      	cmp	r3, #239	@ 0xef
 8000c46:	d80e      	bhi.n	8000c66 <Manual_LCD_DrawPixel+0x36>
 8000c48:	88bb      	ldrh	r3, [r7, #4]
 8000c4a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000c4e:	d20a      	bcs.n	8000c66 <Manual_LCD_DrawPixel+0x36>
    LCD_Set_Address_Window(x, y, x, y);
 8000c50:	88bb      	ldrh	r3, [r7, #4]
 8000c52:	88fa      	ldrh	r2, [r7, #6]
 8000c54:	88b9      	ldrh	r1, [r7, #4]
 8000c56:	88f8      	ldrh	r0, [r7, #6]
 8000c58:	f7ff fe46 	bl	80008e8 <LCD_Set_Address_Window>
    LCD_Write_Data16(color);
 8000c5c:	887b      	ldrh	r3, [r7, #2]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fe14 	bl	800088c <LCD_Write_Data16>
 8000c64:	e000      	b.n	8000c68 <Manual_LCD_DrawPixel+0x38>
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT) return;
 8000c66:	bf00      	nop
}
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <Manual_LCD_DrawLine>:

void Manual_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color) {
 8000c6e:	b590      	push	{r4, r7, lr}
 8000c70:	b087      	sub	sp, #28
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4604      	mov	r4, r0
 8000c76:	4608      	mov	r0, r1
 8000c78:	4611      	mov	r1, r2
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4623      	mov	r3, r4
 8000c7e:	80fb      	strh	r3, [r7, #6]
 8000c80:	4603      	mov	r3, r0
 8000c82:	80bb      	strh	r3, [r7, #4]
 8000c84:	460b      	mov	r3, r1
 8000c86:	807b      	strh	r3, [r7, #2]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8000c8c:	883a      	ldrh	r2, [r7, #0]
 8000c8e:	88bb      	ldrh	r3, [r7, #4]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000c96:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000c9a:	8879      	ldrh	r1, [r7, #2]
 8000c9c:	88fb      	ldrh	r3, [r7, #6]
 8000c9e:	1acb      	subs	r3, r1, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	bfb8      	it	lt
 8000ca4:	425b      	neglt	r3, r3
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	bfcc      	ite	gt
 8000caa:	2301      	movgt	r3, #1
 8000cac:	2300      	movle	r3, #0
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	827b      	strh	r3, [r7, #18]
    if (steep) {
 8000cb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d00b      	beq.n	8000cd2 <Manual_LCD_DrawLine+0x64>
        uint16_t temp;
        temp = x1; x1 = y1; y1 = temp;
 8000cba:	88fb      	ldrh	r3, [r7, #6]
 8000cbc:	823b      	strh	r3, [r7, #16]
 8000cbe:	88bb      	ldrh	r3, [r7, #4]
 8000cc0:	80fb      	strh	r3, [r7, #6]
 8000cc2:	8a3b      	ldrh	r3, [r7, #16]
 8000cc4:	80bb      	strh	r3, [r7, #4]
        temp = x2; x2 = y2; y2 = temp;
 8000cc6:	887b      	ldrh	r3, [r7, #2]
 8000cc8:	823b      	strh	r3, [r7, #16]
 8000cca:	883b      	ldrh	r3, [r7, #0]
 8000ccc:	807b      	strh	r3, [r7, #2]
 8000cce:	8a3b      	ldrh	r3, [r7, #16]
 8000cd0:	803b      	strh	r3, [r7, #0]
    }
    if (x1 > x2) {
 8000cd2:	88fa      	ldrh	r2, [r7, #6]
 8000cd4:	887b      	ldrh	r3, [r7, #2]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d90b      	bls.n	8000cf2 <Manual_LCD_DrawLine+0x84>
        uint16_t temp;
        temp = x1; x1 = x2; x2 = temp;
 8000cda:	88fb      	ldrh	r3, [r7, #6]
 8000cdc:	81fb      	strh	r3, [r7, #14]
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	80fb      	strh	r3, [r7, #6]
 8000ce2:	89fb      	ldrh	r3, [r7, #14]
 8000ce4:	807b      	strh	r3, [r7, #2]
        temp = y1; y1 = y2; y2 = temp;
 8000ce6:	88bb      	ldrh	r3, [r7, #4]
 8000ce8:	81fb      	strh	r3, [r7, #14]
 8000cea:	883b      	ldrh	r3, [r7, #0]
 8000cec:	80bb      	strh	r3, [r7, #4]
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	803b      	strh	r3, [r7, #0]
    }
    int16_t dx = x2 - x1;
 8000cf2:	887a      	ldrh	r2, [r7, #2]
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	81bb      	strh	r3, [r7, #12]
    int16_t dy = abs(y2 - y1);
 8000cfc:	883a      	ldrh	r2, [r7, #0]
 8000cfe:	88bb      	ldrh	r3, [r7, #4]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	817b      	strh	r3, [r7, #10]
    int16_t err = dx / 2;
 8000d0a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000d0e:	0fda      	lsrs	r2, r3, #31
 8000d10:	4413      	add	r3, r2
 8000d12:	105b      	asrs	r3, r3, #1
 8000d14:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;
    if (y1 < y2) ystep = 1;
 8000d16:	88ba      	ldrh	r2, [r7, #4]
 8000d18:	883b      	ldrh	r3, [r7, #0]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d202      	bcs.n	8000d24 <Manual_LCD_DrawLine+0xb6>
 8000d1e:	2301      	movs	r3, #1
 8000d20:	82bb      	strh	r3, [r7, #20]
 8000d22:	e029      	b.n	8000d78 <Manual_LCD_DrawLine+0x10a>
    else ystep = -1;
 8000d24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d28:	82bb      	strh	r3, [r7, #20]

    for (; x1 <= x2; x1++) {
 8000d2a:	e025      	b.n	8000d78 <Manual_LCD_DrawLine+0x10a>
        if (steep) Manual_LCD_DrawPixel(y1, x1, color);
 8000d2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d006      	beq.n	8000d42 <Manual_LCD_DrawLine+0xd4>
 8000d34:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000d36:	88f9      	ldrh	r1, [r7, #6]
 8000d38:	88bb      	ldrh	r3, [r7, #4]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ff78 	bl	8000c30 <Manual_LCD_DrawPixel>
 8000d40:	e005      	b.n	8000d4e <Manual_LCD_DrawLine+0xe0>
        else Manual_LCD_DrawPixel(x1, y1, color);
 8000d42:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000d44:	88b9      	ldrh	r1, [r7, #4]
 8000d46:	88fb      	ldrh	r3, [r7, #6]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff71 	bl	8000c30 <Manual_LCD_DrawPixel>
        err -= dy;
 8000d4e:	8afa      	ldrh	r2, [r7, #22]
 8000d50:	897b      	ldrh	r3, [r7, #10]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 8000d58:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	da08      	bge.n	8000d72 <Manual_LCD_DrawLine+0x104>
            y1 += ystep;
 8000d60:	8aba      	ldrh	r2, [r7, #20]
 8000d62:	88bb      	ldrh	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8000d68:	8afa      	ldrh	r2, [r7, #22]
 8000d6a:	89bb      	ldrh	r3, [r7, #12]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	82fb      	strh	r3, [r7, #22]
    for (; x1 <= x2; x1++) {
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	3301      	adds	r3, #1
 8000d76:	80fb      	strh	r3, [r7, #6]
 8000d78:	88fa      	ldrh	r2, [r7, #6]
 8000d7a:	887b      	ldrh	r3, [r7, #2]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d9d5      	bls.n	8000d2c <Manual_LCD_DrawLine+0xbe>
        }
    }
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd90      	pop	{r4, r7, pc}

08000d8a <Manual_LCD_DrawRectangle>:

void Manual_LCD_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 8000d8a:	b590      	push	{r4, r7, lr}
 8000d8c:	b085      	sub	sp, #20
 8000d8e:	af02      	add	r7, sp, #8
 8000d90:	4604      	mov	r4, r0
 8000d92:	4608      	mov	r0, r1
 8000d94:	4611      	mov	r1, r2
 8000d96:	461a      	mov	r2, r3
 8000d98:	4623      	mov	r3, r4
 8000d9a:	80fb      	strh	r3, [r7, #6]
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	80bb      	strh	r3, [r7, #4]
 8000da0:	460b      	mov	r3, r1
 8000da2:	807b      	strh	r3, [r7, #2]
 8000da4:	4613      	mov	r3, r2
 8000da6:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	2bef      	cmp	r3, #239	@ 0xef
 8000dac:	d865      	bhi.n	8000e7a <Manual_LCD_DrawRectangle+0xf0>
 8000dae:	88bb      	ldrh	r3, [r7, #4]
 8000db0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000db4:	d261      	bcs.n	8000e7a <Manual_LCD_DrawRectangle+0xf0>
    if ((x + width - 1) >= LCD_WIDTH) width = LCD_WIDTH - x;
 8000db6:	88fa      	ldrh	r2, [r7, #6]
 8000db8:	887b      	ldrh	r3, [r7, #2]
 8000dba:	4413      	add	r3, r2
 8000dbc:	2bf0      	cmp	r3, #240	@ 0xf0
 8000dbe:	dd03      	ble.n	8000dc8 <Manual_LCD_DrawRectangle+0x3e>
 8000dc0:	88fb      	ldrh	r3, [r7, #6]
 8000dc2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000dc6:	807b      	strh	r3, [r7, #2]
    if ((y + height - 1) >= LCD_HEIGHT) height = LCD_HEIGHT - y;
 8000dc8:	88ba      	ldrh	r2, [r7, #4]
 8000dca:	883b      	ldrh	r3, [r7, #0]
 8000dcc:	4413      	add	r3, r2
 8000dce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000dd2:	dd03      	ble.n	8000ddc <Manual_LCD_DrawRectangle+0x52>
 8000dd4:	88bb      	ldrh	r3, [r7, #4]
 8000dd6:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000dda:	803b      	strh	r3, [r7, #0]

    Manual_LCD_DrawLine(x, y, x + width - 1, y, color);
 8000ddc:	88fa      	ldrh	r2, [r7, #6]
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	4413      	add	r3, r2
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	3b01      	subs	r3, #1
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	88bc      	ldrh	r4, [r7, #4]
 8000dea:	88b9      	ldrh	r1, [r7, #4]
 8000dec:	88f8      	ldrh	r0, [r7, #6]
 8000dee:	8b3b      	ldrh	r3, [r7, #24]
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	4623      	mov	r3, r4
 8000df4:	f7ff ff3b 	bl	8000c6e <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y + height - 1, x + width - 1, y + height - 1, color);
 8000df8:	88ba      	ldrh	r2, [r7, #4]
 8000dfa:	883b      	ldrh	r3, [r7, #0]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	3b01      	subs	r3, #1
 8000e02:	b299      	uxth	r1, r3
 8000e04:	88fa      	ldrh	r2, [r7, #6]
 8000e06:	887b      	ldrh	r3, [r7, #2]
 8000e08:	4413      	add	r3, r2
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	b29c      	uxth	r4, r3
 8000e10:	88ba      	ldrh	r2, [r7, #4]
 8000e12:	883b      	ldrh	r3, [r7, #0]
 8000e14:	4413      	add	r3, r2
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	88f8      	ldrh	r0, [r7, #6]
 8000e1e:	8b3b      	ldrh	r3, [r7, #24]
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	4613      	mov	r3, r2
 8000e24:	4622      	mov	r2, r4
 8000e26:	f7ff ff22 	bl	8000c6e <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y, x, y + height - 1, color);
 8000e2a:	88ba      	ldrh	r2, [r7, #4]
 8000e2c:	883b      	ldrh	r3, [r7, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	3b01      	subs	r3, #1
 8000e34:	b29c      	uxth	r4, r3
 8000e36:	88fa      	ldrh	r2, [r7, #6]
 8000e38:	88b9      	ldrh	r1, [r7, #4]
 8000e3a:	88f8      	ldrh	r0, [r7, #6]
 8000e3c:	8b3b      	ldrh	r3, [r7, #24]
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	4623      	mov	r3, r4
 8000e42:	f7ff ff14 	bl	8000c6e <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x + width - 1, y, x + width - 1, y + height - 1, color);
 8000e46:	88fa      	ldrh	r2, [r7, #6]
 8000e48:	887b      	ldrh	r3, [r7, #2]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	b298      	uxth	r0, r3
 8000e52:	88fa      	ldrh	r2, [r7, #6]
 8000e54:	887b      	ldrh	r3, [r7, #2]
 8000e56:	4413      	add	r3, r2
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	b29c      	uxth	r4, r3
 8000e5e:	88ba      	ldrh	r2, [r7, #4]
 8000e60:	883b      	ldrh	r3, [r7, #0]
 8000e62:	4413      	add	r3, r2
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	3b01      	subs	r3, #1
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	88b9      	ldrh	r1, [r7, #4]
 8000e6c:	8b3b      	ldrh	r3, [r7, #24]
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	4613      	mov	r3, r2
 8000e72:	4622      	mov	r2, r4
 8000e74:	f7ff fefb 	bl	8000c6e <Manual_LCD_DrawLine>
 8000e78:	e000      	b.n	8000e7c <Manual_LCD_DrawRectangle+0xf2>
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 8000e7a:	bf00      	nop
}
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd90      	pop	{r4, r7, pc}
	...

08000e84 <Manual_LCD_FillRectangle>:

void Manual_LCD_FillRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color) {
 8000e84:	b590      	push	{r4, r7, lr}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	4608      	mov	r0, r1
 8000e8e:	4611      	mov	r1, r2
 8000e90:	461a      	mov	r2, r3
 8000e92:	4623      	mov	r3, r4
 8000e94:	80fb      	strh	r3, [r7, #6]
 8000e96:	4603      	mov	r3, r0
 8000e98:	80bb      	strh	r3, [r7, #4]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	807b      	strh	r3, [r7, #2]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	2bef      	cmp	r3, #239	@ 0xef
 8000ea6:	d855      	bhi.n	8000f54 <Manual_LCD_FillRectangle+0xd0>
 8000ea8:	88bb      	ldrh	r3, [r7, #4]
 8000eaa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000eae:	d251      	bcs.n	8000f54 <Manual_LCD_FillRectangle+0xd0>
    if ((x + width) > LCD_WIDTH) width = LCD_WIDTH - x;
 8000eb0:	88fa      	ldrh	r2, [r7, #6]
 8000eb2:	887b      	ldrh	r3, [r7, #2]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	2bf0      	cmp	r3, #240	@ 0xf0
 8000eb8:	dd03      	ble.n	8000ec2 <Manual_LCD_FillRectangle+0x3e>
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000ec0:	807b      	strh	r3, [r7, #2]
    if ((y + height) > LCD_HEIGHT) height = LCD_HEIGHT - y;
 8000ec2:	88ba      	ldrh	r2, [r7, #4]
 8000ec4:	883b      	ldrh	r3, [r7, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ecc:	dd03      	ble.n	8000ed6 <Manual_LCD_FillRectangle+0x52>
 8000ece:	88bb      	ldrh	r3, [r7, #4]
 8000ed0:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000ed4:	803b      	strh	r3, [r7, #0]

    LCD_Set_Address_Window(x, y, x + width - 1, y + height - 1);
 8000ed6:	88fa      	ldrh	r2, [r7, #6]
 8000ed8:	887b      	ldrh	r3, [r7, #2]
 8000eda:	4413      	add	r3, r2
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	b29c      	uxth	r4, r3
 8000ee2:	88ba      	ldrh	r2, [r7, #4]
 8000ee4:	883b      	ldrh	r3, [r7, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	3b01      	subs	r3, #1
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	88b9      	ldrh	r1, [r7, #4]
 8000ef0:	88f8      	ldrh	r0, [r7, #6]
 8000ef2:	4622      	mov	r2, r4
 8000ef4:	f7ff fcf8 	bl	80008e8 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000efe:	4817      	ldr	r0, [pc, #92]	@ (8000f5c <Manual_LCD_FillRectangle+0xd8>)
 8000f00:	f001 f854 	bl	8001fac <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8000f04:	2200      	movs	r2, #0
 8000f06:	2180      	movs	r1, #128	@ 0x80
 8000f08:	4814      	ldr	r0, [pc, #80]	@ (8000f5c <Manual_LCD_FillRectangle+0xd8>)
 8000f0a:	f001 f84f 	bl	8001fac <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 8000f0e:	8c3b      	ldrh	r3, [r7, #32]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	723b      	strb	r3, [r7, #8]
 8000f18:	8c3b      	ldrh	r3, [r7, #32]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)width * height; i++) {
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	e00a      	b.n	8000f3a <Manual_LCD_FillRectangle+0xb6>
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8000f24:	f107 0108 	add.w	r1, r7, #8
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	480c      	ldr	r0, [pc, #48]	@ (8000f60 <Manual_LCD_FillRectangle+0xdc>)
 8000f30:	f003 fa81 	bl	8004436 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)width * height; i++) {
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3301      	adds	r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	887b      	ldrh	r3, [r7, #2]
 8000f3c:	883a      	ldrh	r2, [r7, #0]
 8000f3e:	fb02 f303 	mul.w	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d3ed      	bcc.n	8000f24 <Manual_LCD_FillRectangle+0xa0>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);   // CS high to deselect
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2180      	movs	r1, #128	@ 0x80
 8000f4c:	4803      	ldr	r0, [pc, #12]	@ (8000f5c <Manual_LCD_FillRectangle+0xd8>)
 8000f4e:	f001 f82d 	bl	8001fac <HAL_GPIO_WritePin>
 8000f52:	e000      	b.n	8000f56 <Manual_LCD_FillRectangle+0xd2>
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;
 8000f54:	bf00      	nop
}
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	2000007c 	.word	0x2000007c

08000f64 <Manual_LCD_DrawChar>:
// For simplicity, this example will draw a fixed pattern for 'A' and 'B', etc.
// A proper implementation would look up character data in a font table.
// Placeholder for font data - you need to define this
extern const unsigned char Font5x7[][5]; // Example: needs to be defined in font.c

void Manual_LCD_DrawChar(uint16_t x, uint16_t y, char c, uint16_t charColor, uint16_t bgColor, uint8_t size) {
 8000f64:	b590      	push	{r4, r7, lr}
 8000f66:	b087      	sub	sp, #28
 8000f68:	af02      	add	r7, sp, #8
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	4608      	mov	r0, r1
 8000f6e:	4611      	mov	r1, r2
 8000f70:	461a      	mov	r2, r3
 8000f72:	4623      	mov	r3, r4
 8000f74:	80fb      	strh	r3, [r7, #6]
 8000f76:	4603      	mov	r3, r0
 8000f78:	80bb      	strh	r3, [r7, #4]
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	70fb      	strb	r3, [r7, #3]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	803b      	strh	r3, [r7, #0]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT || (x + 5 * size) > LCD_WIDTH || (y + 7 * size) > LCD_HEIGHT) {
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	2bef      	cmp	r3, #239	@ 0xef
 8000f86:	f200 80d1 	bhi.w	800112c <Manual_LCD_DrawChar+0x1c8>
 8000f8a:	88bb      	ldrh	r3, [r7, #4]
 8000f8c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000f90:	f080 80cc 	bcs.w	800112c <Manual_LCD_DrawChar+0x1c8>
 8000f94:	88f9      	ldrh	r1, [r7, #6]
 8000f96:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	2bf0      	cmp	r3, #240	@ 0xf0
 8000fa4:	f300 80c2 	bgt.w	800112c <Manual_LCD_DrawChar+0x1c8>
 8000fa8:	88b9      	ldrh	r1, [r7, #4]
 8000faa:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000fae:	4613      	mov	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	1a9b      	subs	r3, r3, r2
 8000fb4:	440b      	add	r3, r1
 8000fb6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000fba:	f300 80b7 	bgt.w	800112c <Manual_LCD_DrawChar+0x1c8>
        return; // Character won't fit
    }

    if (c < ' ' || c > '~') c = '?'; // Handle non-printable characters
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	2b1f      	cmp	r3, #31
 8000fc2:	d902      	bls.n	8000fca <Manual_LCD_DrawChar+0x66>
 8000fc4:	78fb      	ldrb	r3, [r7, #3]
 8000fc6:	2b7e      	cmp	r3, #126	@ 0x7e
 8000fc8:	d901      	bls.n	8000fce <Manual_LCD_DrawChar+0x6a>
 8000fca:	233f      	movs	r3, #63	@ 0x3f
 8000fcc:	70fb      	strb	r3, [r7, #3]

    for (uint8_t i = 0; i < 5; i++) { // Width of char
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	e088      	b.n	80010e6 <Manual_LCD_DrawChar+0x182>
        uint8_t line = Font5x7[c - ' '][i];
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	f1a3 0220 	sub.w	r2, r3, #32
 8000fda:	7bf9      	ldrb	r1, [r7, #15]
 8000fdc:	4855      	ldr	r0, [pc, #340]	@ (8001134 <Manual_LCD_DrawChar+0x1d0>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4403      	add	r3, r0
 8000fe6:	440b      	add	r3, r1
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++) { // Height of char
 8000fec:	2300      	movs	r3, #0
 8000fee:	737b      	strb	r3, [r7, #13]
 8000ff0:	e073      	b.n	80010da <Manual_LCD_DrawChar+0x176>
            if (line & 0x01) { // Check bit
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d034      	beq.n	8001066 <Manual_LCD_DrawChar+0x102>
                if (size == 1) {
 8000ffc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001000:	2b01      	cmp	r3, #1
 8001002:	d10e      	bne.n	8001022 <Manual_LCD_DrawChar+0xbe>
                    Manual_LCD_DrawPixel(x + i, y + j, charColor);
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	b29a      	uxth	r2, r3
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	4413      	add	r3, r2
 800100c:	b298      	uxth	r0, r3
 800100e:	7b7b      	ldrb	r3, [r7, #13]
 8001010:	b29a      	uxth	r2, r3
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	4413      	add	r3, r2
 8001016:	b29b      	uxth	r3, r3
 8001018:	883a      	ldrh	r2, [r7, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fe08 	bl	8000c30 <Manual_LCD_DrawPixel>
 8001020:	e055      	b.n	80010ce <Manual_LCD_DrawChar+0x16a>
                } else {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, charColor);
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	b29a      	uxth	r2, r3
 8001026:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800102a:	b29b      	uxth	r3, r3
 800102c:	fb12 f303 	smulbb	r3, r2, r3
 8001030:	b29a      	uxth	r2, r3
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	4413      	add	r3, r2
 8001036:	b298      	uxth	r0, r3
 8001038:	7b7b      	ldrb	r3, [r7, #13]
 800103a:	b29a      	uxth	r2, r3
 800103c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001040:	b29b      	uxth	r3, r3
 8001042:	fb12 f303 	smulbb	r3, r2, r3
 8001046:	b29a      	uxth	r2, r3
 8001048:	88bb      	ldrh	r3, [r7, #4]
 800104a:	4413      	add	r3, r2
 800104c:	b299      	uxth	r1, r3
 800104e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001052:	b29a      	uxth	r2, r3
 8001054:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001058:	b29c      	uxth	r4, r3
 800105a:	883b      	ldrh	r3, [r7, #0]
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	4623      	mov	r3, r4
 8001060:	f7ff ff10 	bl	8000e84 <Manual_LCD_FillRectangle>
 8001064:	e033      	b.n	80010ce <Manual_LCD_DrawChar+0x16a>
                }
            } else {
                 if (size == 1) {
 8001066:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800106a:	2b01      	cmp	r3, #1
 800106c:	d10e      	bne.n	800108c <Manual_LCD_DrawChar+0x128>
                    Manual_LCD_DrawPixel(x + i, y + j, bgColor);
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	b29a      	uxth	r2, r3
 8001072:	88fb      	ldrh	r3, [r7, #6]
 8001074:	4413      	add	r3, r2
 8001076:	b298      	uxth	r0, r3
 8001078:	7b7b      	ldrb	r3, [r7, #13]
 800107a:	b29a      	uxth	r2, r3
 800107c:	88bb      	ldrh	r3, [r7, #4]
 800107e:	4413      	add	r3, r2
 8001080:	b29b      	uxth	r3, r3
 8001082:	8c3a      	ldrh	r2, [r7, #32]
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff fdd3 	bl	8000c30 <Manual_LCD_DrawPixel>
 800108a:	e020      	b.n	80010ce <Manual_LCD_DrawChar+0x16a>
                 } else {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, bgColor);
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	b29a      	uxth	r2, r3
 8001090:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001094:	b29b      	uxth	r3, r3
 8001096:	fb12 f303 	smulbb	r3, r2, r3
 800109a:	b29a      	uxth	r2, r3
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	4413      	add	r3, r2
 80010a0:	b298      	uxth	r0, r3
 80010a2:	7b7b      	ldrb	r3, [r7, #13]
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	fb12 f303 	smulbb	r3, r2, r3
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	88bb      	ldrh	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	b299      	uxth	r1, r3
 80010b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80010bc:	b29a      	uxth	r2, r3
 80010be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80010c2:	b29c      	uxth	r4, r3
 80010c4:	8c3b      	ldrh	r3, [r7, #32]
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	4623      	mov	r3, r4
 80010ca:	f7ff fedb 	bl	8000e84 <Manual_LCD_FillRectangle>
                 }
            }
            line >>= 1;
 80010ce:	7bbb      	ldrb	r3, [r7, #14]
 80010d0:	085b      	lsrs	r3, r3, #1
 80010d2:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++) { // Height of char
 80010d4:	7b7b      	ldrb	r3, [r7, #13]
 80010d6:	3301      	adds	r3, #1
 80010d8:	737b      	strb	r3, [r7, #13]
 80010da:	7b7b      	ldrb	r3, [r7, #13]
 80010dc:	2b06      	cmp	r3, #6
 80010de:	d988      	bls.n	8000ff2 <Manual_LCD_DrawChar+0x8e>
    for (uint8_t i = 0; i < 5; i++) { // Width of char
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	3301      	adds	r3, #1
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	f67f af73 	bls.w	8000fd4 <Manual_LCD_DrawChar+0x70>
        }
    }
     // Draw a small gap for characters if size > 1 or if you want background fill for the gap
    if (size > 0) { // Fill the column after the character (for spacing)
 80010ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d01b      	beq.n	800112e <Manual_LCD_DrawChar+0x1ca>
        Manual_LCD_FillRectangle(x + 5 * size, y, size, 7 * size, bgColor);
 80010f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	0092      	lsls	r2, r2, #2
 8001100:	4413      	add	r3, r2
 8001102:	b29a      	uxth	r2, r3
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	4413      	add	r3, r2
 8001108:	b298      	uxth	r0, r3
 800110a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800110e:	b29a      	uxth	r2, r3
 8001110:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001114:	b29b      	uxth	r3, r3
 8001116:	4619      	mov	r1, r3
 8001118:	00c9      	lsls	r1, r1, #3
 800111a:	1acb      	subs	r3, r1, r3
 800111c:	b29c      	uxth	r4, r3
 800111e:	88b9      	ldrh	r1, [r7, #4]
 8001120:	8c3b      	ldrh	r3, [r7, #32]
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4623      	mov	r3, r4
 8001126:	f7ff fead 	bl	8000e84 <Manual_LCD_FillRectangle>
 800112a:	e000      	b.n	800112e <Manual_LCD_DrawChar+0x1ca>
        return; // Character won't fit
 800112c:	bf00      	nop
    }
}
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}
 8001134:	08004930 	.word	0x08004930

08001138 <Manual_LCD_DrawString>:


void Manual_LCD_DrawString(uint16_t x, uint16_t y, const char *str, uint16_t charColor, uint16_t bgColor, uint8_t size) {
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b087      	sub	sp, #28
 800113c:	af02      	add	r7, sp, #8
 800113e:	60ba      	str	r2, [r7, #8]
 8001140:	461a      	mov	r2, r3
 8001142:	4603      	mov	r3, r0
 8001144:	81fb      	strh	r3, [r7, #14]
 8001146:	460b      	mov	r3, r1
 8001148:	81bb      	strh	r3, [r7, #12]
 800114a:	4613      	mov	r3, r2
 800114c:	80fb      	strh	r3, [r7, #6]
    while (*str) {
 800114e:	e037      	b.n	80011c0 <Manual_LCD_DrawString+0x88>
        Manual_LCD_DrawChar(x, y, *str, charColor, bgColor, size);
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	781a      	ldrb	r2, [r3, #0]
 8001154:	88fc      	ldrh	r4, [r7, #6]
 8001156:	89b9      	ldrh	r1, [r7, #12]
 8001158:	89f8      	ldrh	r0, [r7, #14]
 800115a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	8c3b      	ldrh	r3, [r7, #32]
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	4623      	mov	r3, r4
 8001166:	f7ff fefd 	bl	8000f64 <Manual_LCD_DrawChar>
        x += 6 * size; // Advance X position (5 for char + 1 for spacing)
 800116a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800116e:	b29b      	uxth	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	0052      	lsls	r2, r2, #1
 8001174:	4413      	add	r3, r2
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	b29a      	uxth	r2, r3
 800117a:	89fb      	ldrh	r3, [r7, #14]
 800117c:	4413      	add	r3, r2
 800117e:	81fb      	strh	r3, [r7, #14]
        if (x + 5 * size >= LCD_WIDTH) { // Simple wrap
 8001180:	89f9      	ldrh	r1, [r7, #14]
 8001182:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001186:	4613      	mov	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	440b      	add	r3, r1
 800118e:	2bef      	cmp	r3, #239	@ 0xef
 8001190:	dd09      	ble.n	80011a6 <Manual_LCD_DrawString+0x6e>
            x = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	81fb      	strh	r3, [r7, #14]
            y += 8 * size; // Advance Y position
 8001196:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800119a:	b29b      	uxth	r3, r3
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	b29a      	uxth	r2, r3
 80011a0:	89bb      	ldrh	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	81bb      	strh	r3, [r7, #12]
        }
        if (y + 7 * size >= LCD_HEIGHT) break; // Out of screen
 80011a6:	89b9      	ldrh	r1, [r7, #12]
 80011a8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	1a9b      	subs	r3, r3, r2
 80011b2:	440b      	add	r3, r1
 80011b4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80011b8:	da07      	bge.n	80011ca <Manual_LCD_DrawString+0x92>
        str++;
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	3301      	adds	r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
    while (*str) {
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1c3      	bne.n	8001150 <Manual_LCD_DrawString+0x18>
    }
}
 80011c8:	e000      	b.n	80011cc <Manual_LCD_DrawString+0x94>
        if (y + 7 * size >= LCD_HEIGHT) break; // Out of screen
 80011ca:	bf00      	nop
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd90      	pop	{r4, r7, pc}

080011d4 <Manual_LCD_DrawLayout>:

void Manual_LCD_DrawLayout(void) {
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b09f      	sub	sp, #124	@ 0x7c
 80011d8:	af02      	add	r7, sp, #8
    // Clear screen with blue background
    Manual_LCD_Clear(COLOR_BLUE);
 80011da:	201f      	movs	r0, #31
 80011dc:	f7ff fcea 	bl	8000bb4 <Manual_LCD_Clear>

    uint16_t text_color =  COLOR_WHITE;
 80011e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011e4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    uint16_t box_fill_color = COLOR_BLACK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    uint16_t box_border_color = COLOR_WHITE;
 80011ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011f2:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    uint8_t font_size = 1;
 80011f6:	2301      	movs	r3, #1
 80011f8:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
    uint8_t char_height = 7; // For 5x7 font at size 1
 80011fc:	2307      	movs	r3, #7
 80011fe:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
    // uint8_t char_width_with_spacing = 6; // For 5x7 font at size 1

    // 1. Top Info Box: "Nhom: [nhom 01]"
    uint16_t info_box_x = 10;
 8001202:	230a      	movs	r3, #10
 8001204:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    uint16_t info_box_y = 10;
 8001208:	230a      	movs	r3, #10
 800120a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    uint16_t info_box_w = 150;
 800120e:	2396      	movs	r3, #150	@ 0x96
 8001210:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
    uint16_t info_box_h = 30;
 8001214:	231e      	movs	r3, #30
 8001216:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
    const char *info_text = "Nhom: [nhom 01]";
 800121a:	4bcd      	ldr	r3, [pc, #820]	@ (8001550 <Manual_LCD_DrawLayout+0x37c>)
 800121c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint16_t info_text_x = info_box_x + 5;
 800121e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001222:	3305      	adds	r3, #5
 8001224:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    uint16_t info_text_y = info_box_y + (info_box_h - char_height * font_size) / 2;
 8001228:	f8b7 2060 	ldrh.w	r2, [r7, #96]	@ 0x60
 800122c:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001230:	f897 1069 	ldrb.w	r1, [r7, #105]	@ 0x69
 8001234:	fb01 f303 	mul.w	r3, r1, r3
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	0fda      	lsrs	r2, r3, #31
 800123c:	4413      	add	r3, r2
 800123e:	105b      	asrs	r3, r3, #1
 8001240:	b29a      	uxth	r2, r3
 8001242:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8001246:	4413      	add	r3, r2
 8001248:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

    Manual_LCD_FillRectangle(info_box_x, info_box_y, info_box_w, info_box_h, box_fill_color);
 800124c:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 8001250:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8001254:	f8b7 1064 	ldrh.w	r1, [r7, #100]	@ 0x64
 8001258:	f8b7 0066 	ldrh.w	r0, [r7, #102]	@ 0x66
 800125c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	4623      	mov	r3, r4
 8001264:	f7ff fe0e 	bl	8000e84 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(info_box_x, info_box_y, info_box_w, info_box_h, box_border_color);
 8001268:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 800126c:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8001270:	f8b7 1064 	ldrh.w	r1, [r7, #100]	@ 0x64
 8001274:	f8b7 0066 	ldrh.w	r0, [r7, #102]	@ 0x66
 8001278:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	4623      	mov	r3, r4
 8001280:	f7ff fd83 	bl	8000d8a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(info_text_x, info_text_y, info_text, text_color, box_fill_color, font_size);
 8001284:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001288:	f8b7 1058 	ldrh.w	r1, [r7, #88]	@ 0x58
 800128c:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 8001290:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	4613      	mov	r3, r2
 800129e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80012a0:	f7ff ff4a 	bl	8001138 <Manual_LCD_DrawString>

    // 2. Task Boxes Grid
    uint16_t margin = 15;
 80012a4:	230f      	movs	r3, #15
 80012a6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    uint16_t spacing_between_boxes = 10;
 80012aa:	230a      	movs	r3, #10
 80012ac:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    uint16_t task_box_w = (LCD_WIDTH - 2 * margin - spacing_between_boxes) / 2;
 80012b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80012b4:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 80012b8:	005a      	lsls	r2, r3, #1
 80012ba:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	0fda      	lsrs	r2, r3, #31
 80012c2:	4413      	add	r3, r2
 80012c4:	105b      	asrs	r3, r3, #1
 80012c6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t task_box_h = 70;
 80012ca:	2346      	movs	r3, #70	@ 0x46
 80012cc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    uint16_t start_y_tasks_row1 = info_box_y + info_box_h + 20;
 80012d0:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 80012d4:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80012d8:	4413      	add	r3, r2
 80012da:	b29b      	uxth	r3, r3
 80012dc:	3314      	adds	r3, #20
 80012de:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint16_t text_task_x_padding = 10; // Left padding for text inside task boxes
 80012e2:	230a      	movs	r3, #10
 80012e4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    uint16_t text_task_y_offset = (task_box_h - char_height * font_size) / 2;
 80012e8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80012ec:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80012f0:	f897 1069 	ldrb.w	r1, [r7, #105]	@ 0x69
 80012f4:	fb01 f303 	mul.w	r3, r1, r3
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	0fda      	lsrs	r2, r3, #31
 80012fc:	4413      	add	r3, r2
 80012fe:	105b      	asrs	r3, r3, #1
 8001300:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

    // Task 02-1 (Top-Left)
    uint16_t task1_x = margin;
 8001304:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001308:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    uint16_t task1_y = start_y_tasks_row1;
 800130c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001310:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    const char *task1_text = "Task 02-1";
 8001314:	4b8f      	ldr	r3, [pc, #572]	@ (8001554 <Manual_LCD_DrawLayout+0x380>)
 8001316:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t text_task1_x = task1_x + text_task_x_padding;
 8001318:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800131c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001320:	4413      	add	r3, r2
 8001322:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint16_t text_task1_y = task1_y + text_task_y_offset;
 8001324:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001328:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800132c:	4413      	add	r3, r2
 800132e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    Manual_LCD_FillRectangle(task1_x, task1_y, task_box_w, task_box_h, box_fill_color);
 8001330:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 8001334:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8001338:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800133c:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8001340:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	4623      	mov	r3, r4
 8001348:	f7ff fd9c 	bl	8000e84 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task1_x, task1_y, task_box_w, task_box_h, box_border_color);
 800134c:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 8001350:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8001354:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8001358:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 800135c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	4623      	mov	r3, r4
 8001364:	f7ff fd11 	bl	8000d8a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task1_x, text_task1_y, task1_text, text_color, box_fill_color, font_size);
 8001368:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800136c:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 800136e:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 8001370:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001380:	f7ff feda 	bl	8001138 <Manual_LCD_DrawString>

    // Task 02-2 (Top-Right)
    uint16_t task2_x = task1_x + task_box_w + spacing_between_boxes;
 8001384:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001388:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800138c:	4413      	add	r3, r2
 800138e:	b29a      	uxth	r2, r3
 8001390:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001394:	4413      	add	r3, r2
 8001396:	877b      	strh	r3, [r7, #58]	@ 0x3a
    uint16_t task2_y = start_y_tasks_row1;
 8001398:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800139c:	873b      	strh	r3, [r7, #56]	@ 0x38
    const char *task2_text = "Task 02-2";
 800139e:	4b6e      	ldr	r3, [pc, #440]	@ (8001558 <Manual_LCD_DrawLayout+0x384>)
 80013a0:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t text_task2_x = task2_x + text_task_x_padding;
 80013a2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80013a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80013a8:	4413      	add	r3, r2
 80013aa:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t text_task2_y = task2_y + text_task_y_offset;
 80013ac:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80013ae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80013b2:	4413      	add	r3, r2
 80013b4:	863b      	strh	r3, [r7, #48]	@ 0x30
    Manual_LCD_FillRectangle(task2_x, task2_y, task_box_w, task_box_h, box_fill_color);
 80013b6:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 80013ba:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 80013be:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80013c0:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 80013c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	4623      	mov	r3, r4
 80013ca:	f7ff fd5b 	bl	8000e84 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task2_x, task2_y, task_box_w, task_box_h, box_border_color);
 80013ce:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 80013d2:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 80013d6:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80013d8:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 80013da:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	4623      	mov	r3, r4
 80013e2:	f7ff fcd2 	bl	8000d8a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task2_x, text_task2_y, task2_text, text_color, box_fill_color, font_size);
 80013e6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80013ea:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80013ec:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 80013ee:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	4613      	mov	r3, r2
 80013fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013fe:	f7ff fe9b 	bl	8001138 <Manual_LCD_DrawString>

    // Second row of task boxes
    uint16_t start_y_tasks_row2 = start_y_tasks_row1 + task_box_h + spacing_between_boxes;
 8001402:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8001406:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800140a:	4413      	add	r3, r2
 800140c:	b29a      	uxth	r2, r3
 800140e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001412:	4413      	add	r3, r2
 8001414:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Task 02-3 (Bottom-Left)
    uint16_t task3_x = margin;
 8001416:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800141a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t task3_y = start_y_tasks_row2;
 800141c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800141e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    const char *task3_text = "Task 02-3";
 8001420:	4b4e      	ldr	r3, [pc, #312]	@ (800155c <Manual_LCD_DrawLayout+0x388>)
 8001422:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t text_task3_x = task3_x + text_task_x_padding;
 8001424:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001426:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800142a:	4413      	add	r3, r2
 800142c:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t text_task3_y = task3_y + text_task_y_offset;
 800142e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001430:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001434:	4413      	add	r3, r2
 8001436:	843b      	strh	r3, [r7, #32]
    Manual_LCD_FillRectangle(task3_x, task3_y, task_box_w, task_box_h, box_fill_color);
 8001438:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 800143c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8001440:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8001442:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 8001444:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	4623      	mov	r3, r4
 800144c:	f7ff fd1a 	bl	8000e84 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task3_x, task3_y, task_box_w, task_box_h, box_border_color);
 8001450:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 8001454:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8001458:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800145a:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 800145c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	4623      	mov	r3, r4
 8001464:	f7ff fc91 	bl	8000d8a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task3_x, text_task3_y, task3_text, text_color, box_fill_color, font_size);
 8001468:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800146c:	8c39      	ldrh	r1, [r7, #32]
 800146e:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8001470:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	4613      	mov	r3, r2
 800147e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001480:	f7ff fe5a 	bl	8001138 <Manual_LCD_DrawString>

    // Task 02-4 (Bottom-Right)
    uint16_t task4_x = task1_x + task_box_w + spacing_between_boxes;
 8001484:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001488:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800148c:	4413      	add	r3, r2
 800148e:	b29a      	uxth	r2, r3
 8001490:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001494:	4413      	add	r3, r2
 8001496:	83fb      	strh	r3, [r7, #30]
    uint16_t task4_y = start_y_tasks_row2;
 8001498:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800149a:	83bb      	strh	r3, [r7, #28]
    const char *task4_text = "Task 02-4";
 800149c:	4b30      	ldr	r3, [pc, #192]	@ (8001560 <Manual_LCD_DrawLayout+0x38c>)
 800149e:	61bb      	str	r3, [r7, #24]
    uint16_t text_task4_x = task4_x + text_task_x_padding;
 80014a0:	8bfa      	ldrh	r2, [r7, #30]
 80014a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80014a6:	4413      	add	r3, r2
 80014a8:	82fb      	strh	r3, [r7, #22]
    uint16_t text_task4_y = task4_y + text_task_y_offset;
 80014aa:	8bba      	ldrh	r2, [r7, #28]
 80014ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80014b0:	4413      	add	r3, r2
 80014b2:	82bb      	strh	r3, [r7, #20]
    Manual_LCD_FillRectangle(task4_x, task4_y, task_box_w, task_box_h, box_fill_color);
 80014b4:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 80014b8:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 80014bc:	8bb9      	ldrh	r1, [r7, #28]
 80014be:	8bf8      	ldrh	r0, [r7, #30]
 80014c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80014c4:	9300      	str	r3, [sp, #0]
 80014c6:	4623      	mov	r3, r4
 80014c8:	f7ff fcdc 	bl	8000e84 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task4_x, task4_y, task_box_w, task_box_h, box_border_color);
 80014cc:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 80014d0:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 80014d4:	8bb9      	ldrh	r1, [r7, #28]
 80014d6:	8bf8      	ldrh	r0, [r7, #30]
 80014d8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4623      	mov	r3, r4
 80014e0:	f7ff fc53 	bl	8000d8a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task4_x, text_task4_y, task4_text, text_color, box_fill_color, font_size);
 80014e4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80014e8:	8ab9      	ldrh	r1, [r7, #20]
 80014ea:	8af8      	ldrh	r0, [r7, #22]
 80014ec:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	4613      	mov	r3, r2
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	f7ff fe1c 	bl	8001138 <Manual_LCD_DrawString>

    // 3. Back Button
    uint16_t back_button_h = 30;
 8001500:	231e      	movs	r3, #30
 8001502:	827b      	strh	r3, [r7, #18]
    uint16_t back_button_w = 90;
 8001504:	235a      	movs	r3, #90	@ 0x5a
 8001506:	823b      	strh	r3, [r7, #16]
    const char *back_button_text = "<<Back";
 8001508:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <Manual_LCD_DrawLayout+0x390>)
 800150a:	60fb      	str	r3, [r7, #12]
    uint16_t back_button_text_len = strlen(back_button_text);
 800150c:	68f8      	ldr	r0, [r7, #12]
 800150e:	f7fe fe5b 	bl	80001c8 <strlen>
 8001512:	4603      	mov	r3, r0
 8001514:	817b      	strh	r3, [r7, #10]
    uint16_t back_button_text_pixel_width = back_button_text_len * 6 * font_size; // 6 is char width with spacing for 5x7 font
 8001516:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 800151a:	b29b      	uxth	r3, r3
 800151c:	897a      	ldrh	r2, [r7, #10]
 800151e:	fb12 f303 	smulbb	r3, r2, r3
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	0052      	lsls	r2, r2, #1
 8001528:	4413      	add	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	813b      	strh	r3, [r7, #8]

    uint16_t back_button_y = start_y_tasks_row2 + task_box_h + 20;
 800152e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8001530:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8001534:	4413      	add	r3, r2
 8001536:	b29b      	uxth	r3, r3
 8001538:	3314      	adds	r3, #20
 800153a:	80fb      	strh	r3, [r7, #6]
    uint16_t back_button_x = LCD_WIDTH - margin - back_button_w;
 800153c:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8001540:	8a3b      	ldrh	r3, [r7, #16]
 8001542:	4413      	add	r3, r2
 8001544:	b29b      	uxth	r3, r3
 8001546:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800154a:	80bb      	strh	r3, [r7, #4]
 800154c:	e00c      	b.n	8001568 <Manual_LCD_DrawLayout+0x394>
 800154e:	bf00      	nop
 8001550:	080048e8 	.word	0x080048e8
 8001554:	080048f8 	.word	0x080048f8
 8001558:	08004904 	.word	0x08004904
 800155c:	08004910 	.word	0x08004910
 8001560:	0800491c 	.word	0x0800491c
 8001564:	08004928 	.word	0x08004928

    uint16_t text_button_x = back_button_x + (back_button_w - back_button_text_pixel_width) / 2;
 8001568:	8a3a      	ldrh	r2, [r7, #16]
 800156a:	893b      	ldrh	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	0fda      	lsrs	r2, r3, #31
 8001570:	4413      	add	r3, r2
 8001572:	105b      	asrs	r3, r3, #1
 8001574:	b29a      	uxth	r2, r3
 8001576:	88bb      	ldrh	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	807b      	strh	r3, [r7, #2]
    uint16_t text_button_y = back_button_y + (back_button_h - char_height * font_size) / 2;
 800157c:	8a7a      	ldrh	r2, [r7, #18]
 800157e:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001582:	f897 1069 	ldrb.w	r1, [r7, #105]	@ 0x69
 8001586:	fb01 f303 	mul.w	r3, r1, r3
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	0fda      	lsrs	r2, r3, #31
 800158e:	4413      	add	r3, r2
 8001590:	105b      	asrs	r3, r3, #1
 8001592:	b29a      	uxth	r2, r3
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	4413      	add	r3, r2
 8001598:	803b      	strh	r3, [r7, #0]

    Manual_LCD_FillRectangle(back_button_x, back_button_y, back_button_w, back_button_h, box_fill_color);
 800159a:	8a7c      	ldrh	r4, [r7, #18]
 800159c:	8a3a      	ldrh	r2, [r7, #16]
 800159e:	88f9      	ldrh	r1, [r7, #6]
 80015a0:	88b8      	ldrh	r0, [r7, #4]
 80015a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	4623      	mov	r3, r4
 80015aa:	f7ff fc6b 	bl	8000e84 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(back_button_x, back_button_y, back_button_w, back_button_h, box_border_color);
 80015ae:	8a7c      	ldrh	r4, [r7, #18]
 80015b0:	8a3a      	ldrh	r2, [r7, #16]
 80015b2:	88f9      	ldrh	r1, [r7, #6]
 80015b4:	88b8      	ldrh	r0, [r7, #4]
 80015b6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	4623      	mov	r3, r4
 80015be:	f7ff fbe4 	bl	8000d8a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_button_x, text_button_y, back_button_text, text_color, box_fill_color, font_size);
 80015c2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80015c6:	8839      	ldrh	r1, [r7, #0]
 80015c8:	8878      	ldrh	r0, [r7, #2]
 80015ca:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	4613      	mov	r3, r2
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	f7ff fdad 	bl	8001138 <Manual_LCD_DrawString>
}
 80015de:	bf00      	nop
 80015e0:	3774      	adds	r7, #116	@ 0x74
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd90      	pop	{r4, r7, pc}
 80015e6:	bf00      	nop

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <HAL_MspInit+0x4c>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001634 <HAL_MspInit+0x4c>)
 80015f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <HAL_MspInit+0x4c>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <HAL_MspInit+0x4c>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	4a08      	ldr	r2, [pc, #32]	@ (8001634 <HAL_MspInit+0x4c>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	@ 0x40
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <HAL_MspInit+0x4c>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40023800 	.word	0x40023800

08001638 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a26      	ldr	r2, [pc, #152]	@ (80016f0 <HAL_I2C_MspInit+0xb8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d145      	bne.n	80016e6 <HAL_I2C_MspInit+0xae>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 800165e:	4b25      	ldr	r3, [pc, #148]	@ (80016f4 <HAL_I2C_MspInit+0xbc>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a24      	ldr	r2, [pc, #144]	@ (80016f4 <HAL_I2C_MspInit+0xbc>)
 8001664:	f043 0302 	orr.w	r3, r3, #2
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <HAL_I2C_MspInit+0xbc>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin;
 8001676:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800167a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167c:	2312      	movs	r3, #18
 800167e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001680:	2301      	movs	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001684:	2303      	movs	r3, #3
 8001686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001688:	2304      	movs	r3, #4
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	4819      	ldr	r0, [pc, #100]	@ (80016f8 <HAL_I2C_MspInit+0xc0>)
 8001694:	f000 faee 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDA_Pin;
 8001698:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169e:	2312      	movs	r3, #18
 80016a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016aa:	2304      	movs	r3, #4
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 0314 	add.w	r3, r7, #20
 80016b2:	4619      	mov	r1, r3
 80016b4:	4810      	ldr	r0, [pc, #64]	@ (80016f8 <HAL_I2C_MspInit+0xc0>)
 80016b6:	f000 fadd 	bl	8001c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	4b0d      	ldr	r3, [pc, #52]	@ (80016f4 <HAL_I2C_MspInit+0xbc>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c2:	4a0c      	ldr	r2, [pc, #48]	@ (80016f4 <HAL_I2C_MspInit+0xbc>)
 80016c4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ca:	4b0a      	ldr	r3, [pc, #40]	@ (80016f4 <HAL_I2C_MspInit+0xbc>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2100      	movs	r1, #0
 80016da:	2021      	movs	r0, #33	@ 0x21
 80016dc:	f000 fa63 	bl	8001ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80016e0:	2021      	movs	r0, #33	@ 0x21
 80016e2:	f000 fa7c 	bl	8001bde <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 80016e6:	bf00      	nop
 80016e8:	3728      	adds	r7, #40	@ 0x28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40005800 	.word	0x40005800
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020400 	.word	0x40020400

080016fc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	@ 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0314 	add.w	r3, r7, #20
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a28      	ldr	r2, [pc, #160]	@ (80017bc <HAL_SPI_MspInit+0xc0>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d149      	bne.n	80017b2 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b27      	ldr	r3, [pc, #156]	@ (80017c0 <HAL_SPI_MspInit+0xc4>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	4a26      	ldr	r2, [pc, #152]	@ (80017c0 <HAL_SPI_MspInit+0xc4>)
 8001728:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800172c:	6453      	str	r3, [r2, #68]	@ 0x44
 800172e:	4b24      	ldr	r3, [pc, #144]	@ (80017c0 <HAL_SPI_MspInit+0xc4>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <HAL_SPI_MspInit+0xc4>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	4a1f      	ldr	r2, [pc, #124]	@ (80017c0 <HAL_SPI_MspInit+0xc4>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	@ 0x30
 800174a:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <HAL_SPI_MspInit+0xc4>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b19      	ldr	r3, [pc, #100]	@ (80017c0 <HAL_SPI_MspInit+0xc4>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	4a18      	ldr	r2, [pc, #96]	@ (80017c0 <HAL_SPI_MspInit+0xc4>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	@ 0x30
 8001766:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <HAL_SPI_MspInit+0xc4>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin|MOSI_Pin;
 8001772:	23c0      	movs	r3, #192	@ 0xc0
 8001774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177e:	2303      	movs	r3, #3
 8001780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001782:	2305      	movs	r3, #5
 8001784:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	480d      	ldr	r0, [pc, #52]	@ (80017c4 <HAL_SPI_MspInit+0xc8>)
 800178e:	f000 fa71 	bl	8001c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCLK_Pin;
 8001792:	2308      	movs	r3, #8
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017a2:	2305      	movs	r3, #5
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCLK_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4806      	ldr	r0, [pc, #24]	@ (80017c8 <HAL_SPI_MspInit+0xcc>)
 80017ae:	f000 fa61 	bl	8001c74 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80017b2:	bf00      	nop
 80017b4:	3728      	adds	r7, #40	@ 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40013000 	.word	0x40013000
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020400 	.word	0x40020400

080017cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <NMI_Handler+0x4>

080017d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <HardFault_Handler+0x4>

080017dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <MemManage_Handler+0x4>

080017e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <BusFault_Handler+0x4>

080017ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <UsageFault_Handler+0x4>

080017f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001822:	f000 f8a1 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}

0800182a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 800182e:	2010      	movs	r0, #16
 8001830:	f000 fbd6 	bl	8001fe0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <I2C2_EV_IRQHandler+0x10>)
 800183e:	f000 fd4c 	bl	80022da <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000028 	.word	0x20000028

0800184c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001870:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001874:	f7ff ffea 	bl	800184c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001878:	480c      	ldr	r0, [pc, #48]	@ (80018ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800187a:	490d      	ldr	r1, [pc, #52]	@ (80018b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001890:	4c0a      	ldr	r4, [pc, #40]	@ (80018bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800189e:	f002 fff3 	bl	8004888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a2:	f7fe fe2f 	bl	8000504 <main>
  bx  lr    
 80018a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80018b4:	08004b34 	.word	0x08004b34
  ldr r2, =_sbss
 80018b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80018bc:	200000d8 	.word	0x200000d8

080018c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC_IRQHandler>
	...

080018c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001904 <HAL_Init+0x40>)
 80018ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <HAL_Init+0x40>)
 80018da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a07      	ldr	r2, [pc, #28]	@ (8001904 <HAL_Init+0x40>)
 80018e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f94f 	bl	8001b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f2:	200f      	movs	r0, #15
 80018f4:	f000 f808 	bl	8001908 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f8:	f7ff fe76 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00

08001908 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001910:	4b12      	ldr	r3, [pc, #72]	@ (800195c <HAL_InitTick+0x54>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b12      	ldr	r3, [pc, #72]	@ (8001960 <HAL_InitTick+0x58>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	4619      	mov	r1, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001922:	fbb2 f3f3 	udiv	r3, r2, r3
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f967 	bl	8001bfa <HAL_SYSTICK_Config>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00e      	b.n	8001954 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2b0f      	cmp	r3, #15
 800193a:	d80a      	bhi.n	8001952 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193c:	2200      	movs	r2, #0
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
 8001944:	f000 f92f 	bl	8001ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001948:	4a06      	ldr	r2, [pc, #24]	@ (8001964 <HAL_InitTick+0x5c>)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194e:	2300      	movs	r3, #0
 8001950:	e000      	b.n	8001954 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000000 	.word	0x20000000
 8001960:	20000008 	.word	0x20000008
 8001964:	20000004 	.word	0x20000004

08001968 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008
 800198c:	200000d4 	.word	0x200000d4

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	200000d4 	.word	0x200000d4

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000008 	.word	0x20000008

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db0b      	blt.n	8001a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4907      	ldr	r1, [pc, #28]	@ (8001a8c <__NVIC_EnableIRQ+0x38>)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	@ (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	@ (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	@ 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	@ 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b5c:	d301      	bcc.n	8001b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00f      	b.n	8001b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b62:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <SysTick_Config+0x40>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f7ff ff8e 	bl	8001a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <SysTick_Config+0x40>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7a:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <SysTick_Config+0x40>)
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	e000e010 	.word	0xe000e010

08001b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff29 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb8:	f7ff ff3e 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f7ff ff8e 	bl	8001ae4 <NVIC_EncodePriority>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff5d 	bl	8001a90 <__NVIC_SetPriority>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff31 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffa2 	bl	8001b4c <SysTick_Config>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d004      	beq.n	8001c30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2280      	movs	r2, #128	@ 0x80
 8001c2a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e00c      	b.n	8001c4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2205      	movs	r2, #5
 8001c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr

08001c56 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c64:	b2db      	uxtb	r3, r3
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	@ 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	e16b      	b.n	8001f68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c90:	2201      	movs	r2, #1
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	f040 815a 	bne.w	8001f62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d005      	beq.n	8001cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d130      	bne.n	8001d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 0201 	and.w	r2, r3, #1
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d017      	beq.n	8001d64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689a      	ldr	r2, [r3, #8]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d123      	bne.n	8001db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	08da      	lsrs	r2, r3, #3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3208      	adds	r2, #8
 8001d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	220f      	movs	r2, #15
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	08da      	lsrs	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3208      	adds	r2, #8
 8001db2:	69b9      	ldr	r1, [r7, #24]
 8001db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	2203      	movs	r2, #3
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0203 	and.w	r2, r3, #3
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80b4 	beq.w	8001f62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b60      	ldr	r3, [pc, #384]	@ (8001f80 <HAL_GPIO_Init+0x30c>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e02:	4a5f      	ldr	r2, [pc, #380]	@ (8001f80 <HAL_GPIO_Init+0x30c>)
 8001e04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e0a:	4b5d      	ldr	r3, [pc, #372]	@ (8001f80 <HAL_GPIO_Init+0x30c>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e16:	4a5b      	ldr	r2, [pc, #364]	@ (8001f84 <HAL_GPIO_Init+0x310>)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	220f      	movs	r2, #15
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a52      	ldr	r2, [pc, #328]	@ (8001f88 <HAL_GPIO_Init+0x314>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d02b      	beq.n	8001e9a <HAL_GPIO_Init+0x226>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a51      	ldr	r2, [pc, #324]	@ (8001f8c <HAL_GPIO_Init+0x318>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d025      	beq.n	8001e96 <HAL_GPIO_Init+0x222>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a50      	ldr	r2, [pc, #320]	@ (8001f90 <HAL_GPIO_Init+0x31c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01f      	beq.n	8001e92 <HAL_GPIO_Init+0x21e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a4f      	ldr	r2, [pc, #316]	@ (8001f94 <HAL_GPIO_Init+0x320>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d019      	beq.n	8001e8e <HAL_GPIO_Init+0x21a>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a4e      	ldr	r2, [pc, #312]	@ (8001f98 <HAL_GPIO_Init+0x324>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_GPIO_Init+0x216>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a4d      	ldr	r2, [pc, #308]	@ (8001f9c <HAL_GPIO_Init+0x328>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00d      	beq.n	8001e86 <HAL_GPIO_Init+0x212>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fa0 <HAL_GPIO_Init+0x32c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <HAL_GPIO_Init+0x20e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4b      	ldr	r2, [pc, #300]	@ (8001fa4 <HAL_GPIO_Init+0x330>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d101      	bne.n	8001e7e <HAL_GPIO_Init+0x20a>
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	e00e      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e7e:	2308      	movs	r3, #8
 8001e80:	e00c      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e82:	2306      	movs	r3, #6
 8001e84:	e00a      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e86:	2305      	movs	r3, #5
 8001e88:	e008      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	e006      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e004      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_GPIO_Init+0x228>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	69fa      	ldr	r2, [r7, #28]
 8001e9e:	f002 0203 	and.w	r2, r2, #3
 8001ea2:	0092      	lsls	r2, r2, #2
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eac:	4935      	ldr	r1, [pc, #212]	@ (8001f84 <HAL_GPIO_Init+0x310>)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eba:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ede:	4a32      	ldr	r2, [pc, #200]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee4:	4b30      	ldr	r3, [pc, #192]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f08:	4a27      	ldr	r2, [pc, #156]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f0e:	4b26      	ldr	r3, [pc, #152]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f32:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f38:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f5c:	4a12      	ldr	r2, [pc, #72]	@ (8001fa8 <HAL_GPIO_Init+0x334>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3301      	adds	r3, #1
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b0f      	cmp	r3, #15
 8001f6c:	f67f ae90 	bls.w	8001c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	3724      	adds	r7, #36	@ 0x24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40013800 	.word	0x40013800
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40020400 	.word	0x40020400
 8001f90:	40020800 	.word	0x40020800
 8001f94:	40020c00 	.word	0x40020c00
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40021400 	.word	0x40021400
 8001fa0:	40021800 	.word	0x40021800
 8001fa4:	40021c00 	.word	0x40021c00
 8001fa8:	40013c00 	.word	0x40013c00

08001fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	807b      	strh	r3, [r7, #2]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fbc:	787b      	ldrb	r3, [r7, #1]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fc2:	887a      	ldrh	r2, [r7, #2]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fc8:	e003      	b.n	8001fd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fca:	887b      	ldrh	r3, [r7, #2]
 8001fcc:	041a      	lsls	r2, r3, #16
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	619a      	str	r2, [r3, #24]
}
 8001fd2:	bf00      	nop
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001fea:	4b08      	ldr	r3, [pc, #32]	@ (800200c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d006      	beq.n	8002004 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ff6:	4a05      	ldr	r2, [pc, #20]	@ (800200c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ffc:	88fb      	ldrh	r3, [r7, #6]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f000 f806 	bl	8002010 <HAL_GPIO_EXTI_Callback>
  }
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40013c00 	.word	0x40013c00

08002010 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e12b      	b.n	8002292 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d106      	bne.n	8002054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff faf2 	bl	8001638 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2224      	movs	r2, #36	@ 0x24
 8002058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 0201 	bic.w	r2, r2, #1
 800206a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800207a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800208a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800208c:	f002 f936 	bl	80042fc <HAL_RCC_GetPCLK1Freq>
 8002090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4a81      	ldr	r2, [pc, #516]	@ (800229c <HAL_I2C_Init+0x274>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d807      	bhi.n	80020ac <HAL_I2C_Init+0x84>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	4a80      	ldr	r2, [pc, #512]	@ (80022a0 <HAL_I2C_Init+0x278>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	bf94      	ite	ls
 80020a4:	2301      	movls	r3, #1
 80020a6:	2300      	movhi	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	e006      	b.n	80020ba <HAL_I2C_Init+0x92>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4a7d      	ldr	r2, [pc, #500]	@ (80022a4 <HAL_I2C_Init+0x27c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	bf94      	ite	ls
 80020b4:	2301      	movls	r3, #1
 80020b6:	2300      	movhi	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0e7      	b.n	8002292 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	4a78      	ldr	r2, [pc, #480]	@ (80022a8 <HAL_I2C_Init+0x280>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	0c9b      	lsrs	r3, r3, #18
 80020cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	430a      	orrs	r2, r1
 80020e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	4a6a      	ldr	r2, [pc, #424]	@ (800229c <HAL_I2C_Init+0x274>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d802      	bhi.n	80020fc <HAL_I2C_Init+0xd4>
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	3301      	adds	r3, #1
 80020fa:	e009      	b.n	8002110 <HAL_I2C_Init+0xe8>
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002102:	fb02 f303 	mul.w	r3, r2, r3
 8002106:	4a69      	ldr	r2, [pc, #420]	@ (80022ac <HAL_I2C_Init+0x284>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	3301      	adds	r3, #1
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	430b      	orrs	r3, r1
 8002116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002122:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	495c      	ldr	r1, [pc, #368]	@ (800229c <HAL_I2C_Init+0x274>)
 800212c:	428b      	cmp	r3, r1
 800212e:	d819      	bhi.n	8002164 <HAL_I2C_Init+0x13c>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	1e59      	subs	r1, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	fbb1 f3f3 	udiv	r3, r1, r3
 800213e:	1c59      	adds	r1, r3, #1
 8002140:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002144:	400b      	ands	r3, r1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_I2C_Init+0x138>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1e59      	subs	r1, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	fbb1 f3f3 	udiv	r3, r1, r3
 8002158:	3301      	adds	r3, #1
 800215a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800215e:	e051      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 8002160:	2304      	movs	r3, #4
 8002162:	e04f      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d111      	bne.n	8002190 <HAL_I2C_Init+0x168>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1e58      	subs	r0, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6859      	ldr	r1, [r3, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	440b      	add	r3, r1
 800217a:	fbb0 f3f3 	udiv	r3, r0, r3
 800217e:	3301      	adds	r3, #1
 8002180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	e012      	b.n	80021b6 <HAL_I2C_Init+0x18e>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1e58      	subs	r0, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6859      	ldr	r1, [r3, #4]
 8002198:	460b      	mov	r3, r1
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	440b      	add	r3, r1
 800219e:	0099      	lsls	r1, r3, #2
 80021a0:	440b      	add	r3, r1
 80021a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021a6:	3301      	adds	r3, #1
 80021a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf0c      	ite	eq
 80021b0:	2301      	moveq	r3, #1
 80021b2:	2300      	movne	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <HAL_I2C_Init+0x196>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e022      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10e      	bne.n	80021e4 <HAL_I2C_Init+0x1bc>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1e58      	subs	r0, r3, #1
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6859      	ldr	r1, [r3, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	440b      	add	r3, r1
 80021d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d8:	3301      	adds	r3, #1
 80021da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021e2:	e00f      	b.n	8002204 <HAL_I2C_Init+0x1dc>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1e58      	subs	r0, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	0099      	lsls	r1, r3, #2
 80021f4:	440b      	add	r3, r1
 80021f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80021fa:	3301      	adds	r3, #1
 80021fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002200:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	6809      	ldr	r1, [r1, #0]
 8002208:	4313      	orrs	r3, r2
 800220a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002232:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6911      	ldr	r1, [r2, #16]
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68d2      	ldr	r2, [r2, #12]
 800223e:	4311      	orrs	r1, r2
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	430b      	orrs	r3, r1
 8002246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	430a      	orrs	r2, r1
 8002262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2220      	movs	r2, #32
 800227e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	000186a0 	.word	0x000186a0
 80022a0:	001e847f 	.word	0x001e847f
 80022a4:	003d08ff 	.word	0x003d08ff
 80022a8:	431bde83 	.word	0x431bde83
 80022ac:	10624dd3 	.word	0x10624dd3

080022b0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c2:	2b80      	cmp	r3, #128	@ 0x80
 80022c4:	d103      	bne.n	80022ce <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
  }
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b088      	sub	sp, #32
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f2:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022fa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002302:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	2b10      	cmp	r3, #16
 8002308:	d003      	beq.n	8002312 <HAL_I2C_EV_IRQHandler+0x38>
 800230a:	7bfb      	ldrb	r3, [r7, #15]
 800230c:	2b40      	cmp	r3, #64	@ 0x40
 800230e:	f040 80c1 	bne.w	8002494 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10d      	bne.n	8002348 <HAL_I2C_EV_IRQHandler+0x6e>
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8002332:	d003      	beq.n	800233c <HAL_I2C_EV_IRQHandler+0x62>
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800233a:	d101      	bne.n	8002340 <HAL_I2C_EV_IRQHandler+0x66>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_I2C_EV_IRQHandler+0x68>
 8002340:	2300      	movs	r3, #0
 8002342:	2b01      	cmp	r3, #1
 8002344:	f000 8132 	beq.w	80025ac <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00c      	beq.n	800236c <HAL_I2C_EV_IRQHandler+0x92>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	0a5b      	lsrs	r3, r3, #9
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d006      	beq.n	800236c <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f001 fb80 	bl	8003a64 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fcf8 	bl	8002d5a <I2C_Master_SB>
 800236a:	e092      	b.n	8002492 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	08db      	lsrs	r3, r3, #3
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	2b00      	cmp	r3, #0
 8002376:	d009      	beq.n	800238c <HAL_I2C_EV_IRQHandler+0xb2>
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	0a5b      	lsrs	r3, r3, #9
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 fd6e 	bl	8002e66 <I2C_Master_ADD10>
 800238a:	e082      	b.n	8002492 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	085b      	lsrs	r3, r3, #1
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <HAL_I2C_EV_IRQHandler+0xd2>
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	0a5b      	lsrs	r3, r3, #9
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f000 fd88 	bl	8002eba <I2C_Master_ADDR>
 80023aa:	e072      	b.n	8002492 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d03b      	beq.n	8002430 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023c6:	f000 80f3 	beq.w	80025b0 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	09db      	lsrs	r3, r3, #7
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00f      	beq.n	80023f6 <HAL_I2C_EV_IRQHandler+0x11c>
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	0a9b      	lsrs	r3, r3, #10
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d009      	beq.n	80023f6 <HAL_I2C_EV_IRQHandler+0x11c>
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d103      	bne.n	80023f6 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f94c 	bl	800268c <I2C_MasterTransmit_TXE>
 80023f4:	e04d      	b.n	8002492 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	089b      	lsrs	r3, r3, #2
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 80d6 	beq.w	80025b0 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	0a5b      	lsrs	r3, r3, #9
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80cf 	beq.w	80025b0 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002412:	7bbb      	ldrb	r3, [r7, #14]
 8002414:	2b21      	cmp	r3, #33	@ 0x21
 8002416:	d103      	bne.n	8002420 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f9d3 	bl	80027c4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800241e:	e0c7      	b.n	80025b0 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b40      	cmp	r3, #64	@ 0x40
 8002424:	f040 80c4 	bne.w	80025b0 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fa41 	bl	80028b0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800242e:	e0bf      	b.n	80025b0 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800243a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800243e:	f000 80b7 	beq.w	80025b0 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	099b      	lsrs	r3, r3, #6
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00f      	beq.n	800246e <HAL_I2C_EV_IRQHandler+0x194>
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	0a9b      	lsrs	r3, r3, #10
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <HAL_I2C_EV_IRQHandler+0x194>
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	089b      	lsrs	r3, r3, #2
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d103      	bne.n	800246e <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 faba 	bl	80029e0 <I2C_MasterReceive_RXNE>
 800246c:	e011      	b.n	8002492 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	089b      	lsrs	r3, r3, #2
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 809a 	beq.w	80025b0 <HAL_I2C_EV_IRQHandler+0x2d6>
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	0a5b      	lsrs	r3, r3, #9
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8093 	beq.w	80025b0 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fb70 	bl	8002b70 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002490:	e08e      	b.n	80025b0 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002492:	e08d      	b.n	80025b0 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002498:	2b00      	cmp	r3, #0
 800249a:	d004      	beq.n	80024a6 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	e007      	b.n	80024b6 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d012      	beq.n	80024e8 <HAL_I2C_EV_IRQHandler+0x20e>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	0a5b      	lsrs	r3, r3, #9
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00c      	beq.n	80024e8 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80024de:	69b9      	ldr	r1, [r7, #24]
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f000 ff39 	bl	8003358 <I2C_Slave_ADDR>
 80024e6:	e066      	b.n	80025b6 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d009      	beq.n	8002508 <HAL_I2C_EV_IRQHandler+0x22e>
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	0a5b      	lsrs	r3, r3, #9
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 ff73 	bl	80033ec <I2C_Slave_STOPF>
 8002506:	e056      	b.n	80025b6 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002508:	7bbb      	ldrb	r3, [r7, #14]
 800250a:	2b21      	cmp	r3, #33	@ 0x21
 800250c:	d002      	beq.n	8002514 <HAL_I2C_EV_IRQHandler+0x23a>
 800250e:	7bbb      	ldrb	r3, [r7, #14]
 8002510:	2b29      	cmp	r3, #41	@ 0x29
 8002512:	d125      	bne.n	8002560 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	09db      	lsrs	r3, r3, #7
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00f      	beq.n	8002540 <HAL_I2C_EV_IRQHandler+0x266>
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	0a9b      	lsrs	r3, r3, #10
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	d009      	beq.n	8002540 <HAL_I2C_EV_IRQHandler+0x266>
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b00      	cmp	r3, #0
 8002536:	d103      	bne.n	8002540 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 fe4f 	bl	80031dc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800253e:	e039      	b.n	80025b4 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	089b      	lsrs	r3, r3, #2
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d033      	beq.n	80025b4 <HAL_I2C_EV_IRQHandler+0x2da>
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	0a5b      	lsrs	r3, r3, #9
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d02d      	beq.n	80025b4 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 fe7c 	bl	8003256 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800255e:	e029      	b.n	80025b4 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	099b      	lsrs	r3, r3, #6
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00f      	beq.n	800258c <HAL_I2C_EV_IRQHandler+0x2b2>
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	0a9b      	lsrs	r3, r3, #10
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b00      	cmp	r3, #0
 8002576:	d009      	beq.n	800258c <HAL_I2C_EV_IRQHandler+0x2b2>
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d103      	bne.n	800258c <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 fe87 	bl	8003298 <I2C_SlaveReceive_RXNE>
 800258a:	e014      	b.n	80025b6 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	f003 0301 	and.w	r3, r3, #1
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00e      	beq.n	80025b6 <HAL_I2C_EV_IRQHandler+0x2dc>
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	0a5b      	lsrs	r3, r3, #9
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d008      	beq.n	80025b6 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 feb5 	bl	8003314 <I2C_SlaveReceive_BTF>
 80025aa:	e004      	b.n	80025b6 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80025ac:	bf00      	nop
 80025ae:	e002      	b.n	80025b6 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025b0:	bf00      	nop
 80025b2:	e000      	b.n	80025b6 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80025b4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80025b6:	3720      	adds	r7, #32
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	70fb      	strb	r3, [r7, #3]
 8002618:	4613      	mov	r3, r2
 800261a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800269a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026a2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d150      	bne.n	8002754 <I2C_MasterTransmit_TXE+0xc8>
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	2b21      	cmp	r3, #33	@ 0x21
 80026b6:	d14d      	bne.n	8002754 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b08      	cmp	r3, #8
 80026bc:	d01d      	beq.n	80026fa <I2C_MasterTransmit_TXE+0x6e>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	2b20      	cmp	r3, #32
 80026c2:	d01a      	beq.n	80026fa <I2C_MasterTransmit_TXE+0x6e>
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80026ca:	d016      	beq.n	80026fa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026da:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2211      	movs	r2, #17
 80026e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ff62 	bl	80025bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80026f8:	e060      	b.n	80027bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002708:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002718:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b40      	cmp	r3, #64	@ 0x40
 8002732:	d107      	bne.n	8002744 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ff7d 	bl	800263c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002742:	e03b      	b.n	80027bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff ff35 	bl	80025bc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002752:	e033      	b.n	80027bc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002754:	7bfb      	ldrb	r3, [r7, #15]
 8002756:	2b21      	cmp	r3, #33	@ 0x21
 8002758:	d005      	beq.n	8002766 <I2C_MasterTransmit_TXE+0xda>
 800275a:	7bbb      	ldrb	r3, [r7, #14]
 800275c:	2b40      	cmp	r3, #64	@ 0x40
 800275e:	d12d      	bne.n	80027bc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b22      	cmp	r3, #34	@ 0x22
 8002764:	d12a      	bne.n	80027bc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276a:	b29b      	uxth	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d108      	bne.n	8002782 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800277e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002780:	e01c      	b.n	80027bc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b40      	cmp	r3, #64	@ 0x40
 800278c:	d103      	bne.n	8002796 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f88e 	bl	80028b0 <I2C_MemoryTransmit_TXE_BTF>
}
 8002794:	e012      	b.n	80027bc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	781a      	ldrb	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80027ba:	e7ff      	b.n	80027bc <I2C_MasterTransmit_TXE+0x130>
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027d0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b21      	cmp	r3, #33	@ 0x21
 80027dc:	d164      	bne.n	80028a8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d012      	beq.n	800280e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ec:	781a      	ldrb	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800280c:	e04c      	b.n	80028a8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2b08      	cmp	r3, #8
 8002812:	d01d      	beq.n	8002850 <I2C_MasterTransmit_BTF+0x8c>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2b20      	cmp	r3, #32
 8002818:	d01a      	beq.n	8002850 <I2C_MasterTransmit_BTF+0x8c>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002820:	d016      	beq.n	8002850 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002830:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2211      	movs	r2, #17
 8002836:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff feb7 	bl	80025bc <HAL_I2C_MasterTxCpltCallback>
}
 800284e:	e02b      	b.n	80028a8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685a      	ldr	r2, [r3, #4]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800285e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800286e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2220      	movs	r2, #32
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b40      	cmp	r3, #64	@ 0x40
 8002888:	d107      	bne.n	800289a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fed2 	bl	800263c <HAL_I2C_MemTxCpltCallback>
}
 8002898:	e006      	b.n	80028a8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff fe8a 	bl	80025bc <HAL_I2C_MasterTxCpltCallback>
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028be:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d11d      	bne.n	8002904 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d10b      	bne.n	80028e8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e0:	1c9a      	adds	r2, r3, #2
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80028e6:	e077      	b.n	80029d8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	121b      	asrs	r3, r3, #8
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002902:	e069      	b.n	80029d8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002908:	2b01      	cmp	r3, #1
 800290a:	d10b      	bne.n	8002924 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002910:	b2da      	uxtb	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002922:	e059      	b.n	80029d8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002928:	2b02      	cmp	r3, #2
 800292a:	d152      	bne.n	80029d2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	2b22      	cmp	r3, #34	@ 0x22
 8002930:	d10d      	bne.n	800294e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002940:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800294c:	e044      	b.n	80029d8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d015      	beq.n	8002984 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b21      	cmp	r3, #33	@ 0x21
 800295c:	d112      	bne.n	8002984 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	781a      	ldrb	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002982:	e029      	b.n	80029d8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d124      	bne.n	80029d8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	2b21      	cmp	r3, #33	@ 0x21
 8002992:	d121      	bne.n	80029d8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029a2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff fe36 	bl	800263c <HAL_I2C_MemTxCpltCallback>
}
 80029d0:	e002      	b.n	80029d8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff fc6c 	bl	80022b0 <I2C_Flush_DR>
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b22      	cmp	r3, #34	@ 0x22
 80029f2:	f040 80b9 	bne.w	8002b68 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b03      	cmp	r3, #3
 8002a08:	d921      	bls.n	8002a4e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	f040 8096 	bne.w	8002b68 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a4a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002a4c:	e08c      	b.n	8002b68 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d07f      	beq.n	8002b56 <I2C_MasterReceive_RXNE+0x176>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d002      	beq.n	8002a62 <I2C_MasterReceive_RXNE+0x82>
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d179      	bne.n	8002b56 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 ffcc 	bl	8003a00 <I2C_WaitOnSTOPRequestThroughIT>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d14c      	bne.n	8002b08 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a7c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002a8c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b40      	cmp	r3, #64	@ 0x40
 8002ac6:	d10a      	bne.n	8002ade <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff fdba 	bl	8002650 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002adc:	e044      	b.n	8002b68 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b08      	cmp	r3, #8
 8002aea:	d002      	beq.n	8002af2 <I2C_MasterReceive_RXNE+0x112>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d103      	bne.n	8002afa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002af8:	e002      	b.n	8002b00 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2212      	movs	r2, #18
 8002afe:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f7ff fd65 	bl	80025d0 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b06:	e02f      	b.n	8002b68 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002b16:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff fd88 	bl	8002664 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002b54:	e008      	b.n	8002b68 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b64:	605a      	str	r2, [r3, #4]
}
 8002b66:	e7ff      	b.n	8002b68 <I2C_MasterReceive_RXNE+0x188>
 8002b68:	bf00      	nop
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d11b      	bne.n	8002bc0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b96:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002bbe:	e0c8      	b.n	8002d52 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b03      	cmp	r3, #3
 8002bc8:	d129      	bne.n	8002c1e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bd8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d00a      	beq.n	8002bf6 <I2C_MasterReceive_BTF+0x86>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d007      	beq.n	8002bf6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bf4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	691a      	ldr	r2, [r3, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c08:	1c5a      	adds	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002c1c:	e099      	b.n	8002d52 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	f040 8081 	bne.w	8002d2c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d002      	beq.n	8002c36 <I2C_MasterReceive_BTF+0xc6>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b10      	cmp	r3, #16
 8002c34:	d108      	bne.n	8002c48 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	e019      	b.n	8002c7c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d002      	beq.n	8002c54 <I2C_MasterReceive_BTF+0xe4>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d108      	bne.n	8002c66 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e00a      	b.n	8002c7c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2b10      	cmp	r3, #16
 8002c6a:	d007      	beq.n	8002c7c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c7a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691a      	ldr	r2, [r3, #16]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002cd6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b40      	cmp	r3, #64	@ 0x40
 8002cea:	d10a      	bne.n	8002d02 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7ff fca8 	bl	8002650 <HAL_I2C_MemRxCpltCallback>
}
 8002d00:	e027      	b.n	8002d52 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	d002      	beq.n	8002d16 <I2C_MasterReceive_BTF+0x1a6>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d103      	bne.n	8002d1e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d1c:	e002      	b.n	8002d24 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2212      	movs	r2, #18
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff fc53 	bl	80025d0 <HAL_I2C_MasterRxCpltCallback>
}
 8002d2a:	e012      	b.n	8002d52 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b40      	cmp	r3, #64	@ 0x40
 8002d6c:	d117      	bne.n	8002d9e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d86:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002d88:	e067      	b.n	8002e5a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	611a      	str	r2, [r3, #16]
}
 8002d9c:	e05d      	b.n	8002e5a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002da6:	d133      	bne.n	8002e10 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b21      	cmp	r3, #33	@ 0x21
 8002db2:	d109      	bne.n	8002dc8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002dc4:	611a      	str	r2, [r3, #16]
 8002dc6:	e008      	b.n	8002dda <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d004      	beq.n	8002dec <I2C_Master_SB+0x92>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d108      	bne.n	8002dfe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d032      	beq.n	8002e5a <I2C_Master_SB+0x100>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d02d      	beq.n	8002e5a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e0c:	605a      	str	r2, [r3, #4]
}
 8002e0e:	e024      	b.n	8002e5a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10e      	bne.n	8002e36 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	11db      	asrs	r3, r3, #7
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	f003 0306 	and.w	r3, r3, #6
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	f063 030f 	orn	r3, r3, #15
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	611a      	str	r2, [r3, #16]
}
 8002e34:	e011      	b.n	8002e5a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d10d      	bne.n	8002e5a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	11db      	asrs	r3, r3, #7
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f003 0306 	and.w	r3, r3, #6
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	f063 030e 	orn	r3, r3, #14
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	611a      	str	r2, [r3, #16]
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d004      	beq.n	8002e8c <I2C_Master_ADD10+0x26>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d108      	bne.n	8002e9e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00c      	beq.n	8002eae <I2C_Master_ADD10+0x48>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eac:	605a      	str	r2, [r3, #4]
  }
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b091      	sub	sp, #68	@ 0x44
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002ec8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b22      	cmp	r3, #34	@ 0x22
 8002ee2:	f040 8169 	bne.w	80031b8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10f      	bne.n	8002f0e <I2C_Master_ADDR+0x54>
 8002eee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002ef2:	2b40      	cmp	r3, #64	@ 0x40
 8002ef4:	d10b      	bne.n	8002f0e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0c:	e160      	b.n	80031d0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11d      	bne.n	8002f52 <I2C_Master_ADDR+0x98>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002f1e:	d118      	bne.n	8002f52 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f20:	2300      	movs	r3, #0
 8002f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f44:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002f50:	e13e      	b.n	80031d0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d113      	bne.n	8002f84 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f80:	601a      	str	r2, [r3, #0]
 8002f82:	e115      	b.n	80031b0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	f040 808a 	bne.w	80030a4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f92:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f96:	d137      	bne.n	8003008 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fb6:	d113      	bne.n	8002fe0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fc6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fc8:	2300      	movs	r3, #0
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fde:	e0e7      	b.n	80031b0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	623b      	str	r3, [r7, #32]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	623b      	str	r3, [r7, #32]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	623b      	str	r3, [r7, #32]
 8002ff4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e0d3      	b.n	80031b0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300a:	2b08      	cmp	r3, #8
 800300c:	d02e      	beq.n	800306c <I2C_Master_ADDR+0x1b2>
 800300e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003010:	2b20      	cmp	r3, #32
 8003012:	d02b      	beq.n	800306c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003016:	2b12      	cmp	r3, #18
 8003018:	d102      	bne.n	8003020 <I2C_Master_ADDR+0x166>
 800301a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800301c:	2b01      	cmp	r3, #1
 800301e:	d125      	bne.n	800306c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003022:	2b04      	cmp	r3, #4
 8003024:	d00e      	beq.n	8003044 <I2C_Master_ADDR+0x18a>
 8003026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003028:	2b02      	cmp	r3, #2
 800302a:	d00b      	beq.n	8003044 <I2C_Master_ADDR+0x18a>
 800302c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800302e:	2b10      	cmp	r3, #16
 8003030:	d008      	beq.n	8003044 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	e007      	b.n	8003054 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003052:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003054:	2300      	movs	r3, #0
 8003056:	61fb      	str	r3, [r7, #28]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	61fb      	str	r3, [r7, #28]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	e0a1      	b.n	80031b0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800307a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307c:	2300      	movs	r3, #0
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	e085      	b.n	80031b0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d14d      	bne.n	800314a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80030ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d016      	beq.n	80030e2 <I2C_Master_ADDR+0x228>
 80030b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d013      	beq.n	80030e2 <I2C_Master_ADDR+0x228>
 80030ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030bc:	2b10      	cmp	r3, #16
 80030be:	d010      	beq.n	80030e2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ce:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	e007      	b.n	80030f2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80030f0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003100:	d117      	bne.n	8003132 <I2C_Master_ADDR+0x278>
 8003102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003104:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003108:	d00b      	beq.n	8003122 <I2C_Master_ADDR+0x268>
 800310a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800310c:	2b01      	cmp	r3, #1
 800310e:	d008      	beq.n	8003122 <I2C_Master_ADDR+0x268>
 8003110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003112:	2b08      	cmp	r3, #8
 8003114:	d005      	beq.n	8003122 <I2C_Master_ADDR+0x268>
 8003116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003118:	2b10      	cmp	r3, #16
 800311a:	d002      	beq.n	8003122 <I2C_Master_ADDR+0x268>
 800311c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800311e:	2b20      	cmp	r3, #32
 8003120:	d107      	bne.n	8003132 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003130:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	617b      	str	r3, [r7, #20]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	e032      	b.n	80031b0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003158:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003168:	d117      	bne.n	800319a <I2C_Master_ADDR+0x2e0>
 800316a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800316c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003170:	d00b      	beq.n	800318a <I2C_Master_ADDR+0x2d0>
 8003172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003174:	2b01      	cmp	r3, #1
 8003176:	d008      	beq.n	800318a <I2C_Master_ADDR+0x2d0>
 8003178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800317a:	2b08      	cmp	r3, #8
 800317c:	d005      	beq.n	800318a <I2C_Master_ADDR+0x2d0>
 800317e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003180:	2b10      	cmp	r3, #16
 8003182:	d002      	beq.n	800318a <I2C_Master_ADDR+0x2d0>
 8003184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003186:	2b20      	cmp	r3, #32
 8003188:	d107      	bne.n	800319a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003198:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80031b6:	e00b      	b.n	80031d0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	60fb      	str	r3, [r7, #12]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
}
 80031ce:	e7ff      	b.n	80031d0 <I2C_Master_ADDR+0x316>
 80031d0:	bf00      	nop
 80031d2:	3744      	adds	r7, #68	@ 0x44
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d02b      	beq.n	800324e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	781a      	ldrb	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	3b01      	subs	r3, #1
 8003214:	b29a      	uxth	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d114      	bne.n	800324e <I2C_SlaveTransmit_TXE+0x72>
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	2b29      	cmp	r3, #41	@ 0x29
 8003228:	d111      	bne.n	800324e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003238:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2221      	movs	r2, #33	@ 0x21
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2228      	movs	r2, #40	@ 0x28
 8003244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7ff f9cb 	bl	80025e4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800324e:	bf00      	nop
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d011      	beq.n	800328c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d02c      	beq.n	800330c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d114      	bne.n	800330c <I2C_SlaveReceive_RXNE+0x74>
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
 80032e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80032e6:	d111      	bne.n	800330c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2222      	movs	r2, #34	@ 0x22
 80032fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2228      	movs	r2, #40	@ 0x28
 8003302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff f976 	bl	80025f8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800330c:	bf00      	nop
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d012      	beq.n	800334c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	691a      	ldr	r2, [r3, #16]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8003362:	2300      	movs	r3, #0
 8003364:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003372:	2b28      	cmp	r3, #40	@ 0x28
 8003374:	d127      	bne.n	80033c6 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003384:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	09db      	lsrs	r3, r3, #7
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	81bb      	strh	r3, [r7, #12]
 80033a8:	e002      	b.n	80033b0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80033b8:	89ba      	ldrh	r2, [r7, #12]
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	4619      	mov	r1, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff f924 	bl	800260c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80033c4:	e00e      	b.n	80033e4 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80033e4:	bf00      	nop
 80033e6:	3710      	adds	r7, #16
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033fa:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800340a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003438:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003444:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003448:	d172      	bne.n	8003530 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800344a:	7bfb      	ldrb	r3, [r7, #15]
 800344c:	2b22      	cmp	r3, #34	@ 0x22
 800344e:	d002      	beq.n	8003456 <I2C_Slave_STOPF+0x6a>
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	2b2a      	cmp	r3, #42	@ 0x2a
 8003454:	d135      	bne.n	80034c2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	b29a      	uxth	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d005      	beq.n	800347a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003472:	f043 0204 	orr.w	r2, r3, #4
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003488:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe fbe1 	bl	8001c56 <HAL_DMA_GetState>
 8003494:	4603      	mov	r3, r0
 8003496:	2b01      	cmp	r3, #1
 8003498:	d049      	beq.n	800352e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800349e:	4a69      	ldr	r2, [pc, #420]	@ (8003644 <I2C_Slave_STOPF+0x258>)
 80034a0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7fe fbb3 	bl	8001c12 <HAL_DMA_Abort_IT>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d03d      	beq.n	800352e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034bc:	4610      	mov	r0, r2
 80034be:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80034c0:	e035      	b.n	800352e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034de:	f043 0204 	orr.w	r2, r3, #4
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe fbab 	bl	8001c56 <HAL_DMA_GetState>
 8003500:	4603      	mov	r3, r0
 8003502:	2b01      	cmp	r3, #1
 8003504:	d014      	beq.n	8003530 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800350a:	4a4e      	ldr	r2, [pc, #312]	@ (8003644 <I2C_Slave_STOPF+0x258>)
 800350c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fb7d 	bl	8001c12 <HAL_DMA_Abort_IT>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003522:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003528:	4610      	mov	r0, r2
 800352a:	4798      	blx	r3
 800352c:	e000      	b.n	8003530 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800352e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d03e      	beq.n	80035b8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b04      	cmp	r3, #4
 8003546:	d112      	bne.n	800356e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003564:	b29b      	uxth	r3, r3
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	695b      	ldr	r3, [r3, #20]
 8003574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003578:	2b40      	cmp	r3, #64	@ 0x40
 800357a:	d112      	bne.n	80035a2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691a      	ldr	r2, [r3, #16]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003598:	b29b      	uxth	r3, r3
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b0:	f043 0204 	orr.w	r2, r3, #4
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f843 	bl	800364c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80035c6:	e039      	b.n	800363c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80035cc:	d109      	bne.n	80035e2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2228      	movs	r2, #40	@ 0x28
 80035d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff f80b 	bl	80025f8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b28      	cmp	r3, #40	@ 0x28
 80035ec:	d111      	bne.n	8003612 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a15      	ldr	r2, [pc, #84]	@ (8003648 <I2C_Slave_STOPF+0x25c>)
 80035f2:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2220      	movs	r2, #32
 80035fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff f80c 	bl	8002628 <HAL_I2C_ListenCpltCallback>
}
 8003610:	e014      	b.n	800363c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	2b22      	cmp	r3, #34	@ 0x22
 8003618:	d002      	beq.n	8003620 <I2C_Slave_STOPF+0x234>
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	2b22      	cmp	r3, #34	@ 0x22
 800361e:	d10d      	bne.n	800363c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7fe ffde 	bl	80025f8 <HAL_I2C_SlaveRxCpltCallback>
}
 800363c:	bf00      	nop
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	080038b1 	.word	0x080038b1
 8003648:	ffff0000 	.word	0xffff0000

0800364c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800365a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003662:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003664:	7bbb      	ldrb	r3, [r7, #14]
 8003666:	2b10      	cmp	r3, #16
 8003668:	d002      	beq.n	8003670 <I2C_ITError+0x24>
 800366a:	7bbb      	ldrb	r3, [r7, #14]
 800366c:	2b40      	cmp	r3, #64	@ 0x40
 800366e:	d10a      	bne.n	8003686 <I2C_ITError+0x3a>
 8003670:	7bfb      	ldrb	r3, [r7, #15]
 8003672:	2b22      	cmp	r3, #34	@ 0x22
 8003674:	d107      	bne.n	8003686 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003684:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003686:	7bfb      	ldrb	r3, [r7, #15]
 8003688:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800368c:	2b28      	cmp	r3, #40	@ 0x28
 800368e:	d107      	bne.n	80036a0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2228      	movs	r2, #40	@ 0x28
 800369a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800369e:	e015      	b.n	80036cc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ae:	d00a      	beq.n	80036c6 <I2C_ITError+0x7a>
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
 80036b2:	2b60      	cmp	r3, #96	@ 0x60
 80036b4:	d007      	beq.n	80036c6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036da:	d162      	bne.n	80037a2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036ea:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d020      	beq.n	800373c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036fe:	4a6a      	ldr	r2, [pc, #424]	@ (80038a8 <I2C_ITError+0x25c>)
 8003700:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003706:	4618      	mov	r0, r3
 8003708:	f7fe fa83 	bl	8001c12 <HAL_DMA_Abort_IT>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8089 	beq.w	8003826 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f022 0201 	bic.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003736:	4610      	mov	r0, r2
 8003738:	4798      	blx	r3
 800373a:	e074      	b.n	8003826 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003740:	4a59      	ldr	r2, [pc, #356]	@ (80038a8 <I2C_ITError+0x25c>)
 8003742:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe fa62 	bl	8001c12 <HAL_DMA_Abort_IT>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d068      	beq.n	8003826 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375e:	2b40      	cmp	r3, #64	@ 0x40
 8003760:	d10b      	bne.n	800377a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	691a      	ldr	r2, [r3, #16]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003796:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800379c:	4610      	mov	r0, r2
 800379e:	4798      	blx	r3
 80037a0:	e041      	b.n	8003826 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b60      	cmp	r3, #96	@ 0x60
 80037ac:	d125      	bne.n	80037fa <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2220      	movs	r2, #32
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c6:	2b40      	cmp	r3, #64	@ 0x40
 80037c8:	d10b      	bne.n	80037e2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0201 	bic.w	r2, r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fe ff40 	bl	8002678 <HAL_I2C_AbortCpltCallback>
 80037f8:	e015      	b.n	8003826 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003804:	2b40      	cmp	r3, #64	@ 0x40
 8003806:	d10b      	bne.n	8003820 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7fe ff1f 	bl	8002664 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10e      	bne.n	8003854 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003846:	2b00      	cmp	r3, #0
 8003848:	d104      	bne.n	8003854 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003862:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800386a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b04      	cmp	r3, #4
 8003876:	d113      	bne.n	80038a0 <I2C_ITError+0x254>
 8003878:	7bfb      	ldrb	r3, [r7, #15]
 800387a:	2b28      	cmp	r3, #40	@ 0x28
 800387c:	d110      	bne.n	80038a0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a0a      	ldr	r2, [pc, #40]	@ (80038ac <I2C_ITError+0x260>)
 8003882:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fe fec4 	bl	8002628 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	080038b1 	.word	0x080038b1
 80038ac:	ffff0000 	.word	0xffff0000

080038b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80038ca:	4b4b      	ldr	r3, [pc, #300]	@ (80039f8 <I2C_DMAAbort+0x148>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	08db      	lsrs	r3, r3, #3
 80038d0:	4a4a      	ldr	r2, [pc, #296]	@ (80039fc <I2C_DMAAbort+0x14c>)
 80038d2:	fba2 2303 	umull	r2, r3, r2, r3
 80038d6:	0a1a      	lsrs	r2, r3, #8
 80038d8:	4613      	mov	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	00da      	lsls	r2, r3, #3
 80038e0:	1ad3      	subs	r3, r2, r3
 80038e2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d106      	bne.n	80038f8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	f043 0220 	orr.w	r2, r3, #32
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80038f6:	e00a      	b.n	800390e <I2C_DMAAbort+0x5e>
    }
    count--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800390c:	d0ea      	beq.n	80038e4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800391a:	2200      	movs	r2, #0
 800391c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392a:	2200      	movs	r2, #0
 800392c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800393c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2200      	movs	r2, #0
 8003942:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003950:	2200      	movs	r2, #0
 8003952:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003960:	2200      	movs	r2, #0
 8003962:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b60      	cmp	r3, #96	@ 0x60
 800397e:	d10e      	bne.n	800399e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	2200      	movs	r2, #0
 8003994:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003996:	6978      	ldr	r0, [r7, #20]
 8003998:	f7fe fe6e 	bl	8002678 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800399c:	e027      	b.n	80039ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80039a4:	2b28      	cmp	r3, #40	@ 0x28
 80039a6:	d117      	bne.n	80039d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2200      	movs	r2, #0
 80039cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2228      	movs	r2, #40	@ 0x28
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80039d6:	e007      	b.n	80039e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80039e8:	6978      	ldr	r0, [r7, #20]
 80039ea:	f7fe fe3b 	bl	8002664 <HAL_I2C_ErrorCallback>
}
 80039ee:	bf00      	nop
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000000 	.word	0x20000000
 80039fc:	14f8b589 	.word	0x14f8b589

08003a00 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a0c:	4b13      	ldr	r3, [pc, #76]	@ (8003a5c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	08db      	lsrs	r3, r3, #3
 8003a12:	4a13      	ldr	r2, [pc, #76]	@ (8003a60 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003a14:	fba2 2303 	umull	r2, r3, r2, r3
 8003a18:	0a1a      	lsrs	r2, r3, #8
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d107      	bne.n	8003a3e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e008      	b.n	8003a50 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a4c:	d0e9      	beq.n	8003a22 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	20000000 	.word	0x20000000
 8003a60:	14f8b589 	.word	0x14f8b589

08003a64 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a70:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003a74:	d103      	bne.n	8003a7e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a7c:	e007      	b.n	8003a8e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a82:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003a86:	d102      	bne.n	8003a8e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2208      	movs	r2, #8
 8003a8c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
	...

08003a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e267      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d075      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003aba:	4b88      	ldr	r3, [pc, #544]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 030c 	and.w	r3, r3, #12
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d00c      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac6:	4b85      	ldr	r3, [pc, #532]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ace:	2b08      	cmp	r3, #8
 8003ad0:	d112      	bne.n	8003af8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ad2:	4b82      	ldr	r3, [pc, #520]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ada:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ade:	d10b      	bne.n	8003af8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae0:	4b7e      	ldr	r3, [pc, #504]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d05b      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x108>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d157      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e242      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b00:	d106      	bne.n	8003b10 <HAL_RCC_OscConfig+0x74>
 8003b02:	4b76      	ldr	r3, [pc, #472]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a75      	ldr	r2, [pc, #468]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e01d      	b.n	8003b4c <HAL_RCC_OscConfig+0xb0>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b18:	d10c      	bne.n	8003b34 <HAL_RCC_OscConfig+0x98>
 8003b1a:	4b70      	ldr	r3, [pc, #448]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a6f      	ldr	r2, [pc, #444]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003b20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b24:	6013      	str	r3, [r2, #0]
 8003b26:	4b6d      	ldr	r3, [pc, #436]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a6c      	ldr	r2, [pc, #432]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	e00b      	b.n	8003b4c <HAL_RCC_OscConfig+0xb0>
 8003b34:	4b69      	ldr	r3, [pc, #420]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a68      	ldr	r2, [pc, #416]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	4b66      	ldr	r3, [pc, #408]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a65      	ldr	r2, [pc, #404]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d013      	beq.n	8003b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fd ff1c 	bl	8001990 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b5c:	f7fd ff18 	bl	8001990 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b64      	cmp	r3, #100	@ 0x64
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e207      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	4b5b      	ldr	r3, [pc, #364]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0xc0>
 8003b7a:	e014      	b.n	8003ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fd ff08 	bl	8001990 <HAL_GetTick>
 8003b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b84:	f7fd ff04 	bl	8001990 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b64      	cmp	r3, #100	@ 0x64
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e1f3      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	4b51      	ldr	r3, [pc, #324]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1f0      	bne.n	8003b84 <HAL_RCC_OscConfig+0xe8>
 8003ba2:	e000      	b.n	8003ba6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d063      	beq.n	8003c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bb2:	4b4a      	ldr	r3, [pc, #296]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00b      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bbe:	4b47      	ldr	r3, [pc, #284]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d11c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bca:	4b44      	ldr	r3, [pc, #272]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d116      	bne.n	8003c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd6:	4b41      	ldr	r3, [pc, #260]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0302 	and.w	r3, r3, #2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <HAL_RCC_OscConfig+0x152>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d001      	beq.n	8003bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e1c7      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bee:	4b3b      	ldr	r3, [pc, #236]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4937      	ldr	r1, [pc, #220]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c02:	e03a      	b.n	8003c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d020      	beq.n	8003c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c0c:	4b34      	ldr	r3, [pc, #208]	@ (8003ce0 <HAL_RCC_OscConfig+0x244>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c12:	f7fd febd 	bl	8001990 <HAL_GetTick>
 8003c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c1a:	f7fd feb9 	bl	8001990 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e1a8      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0f0      	beq.n	8003c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c38:	4b28      	ldr	r3, [pc, #160]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	4925      	ldr	r1, [pc, #148]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	600b      	str	r3, [r1, #0]
 8003c4c:	e015      	b.n	8003c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4e:	4b24      	ldr	r3, [pc, #144]	@ (8003ce0 <HAL_RCC_OscConfig+0x244>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fd fe9c 	bl	8001990 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c5c:	f7fd fe98 	bl	8001990 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e187      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0308 	and.w	r3, r3, #8
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d036      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d016      	beq.n	8003cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8e:	4b15      	ldr	r3, [pc, #84]	@ (8003ce4 <HAL_RCC_OscConfig+0x248>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c94:	f7fd fe7c 	bl	8001990 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c9c:	f7fd fe78 	bl	8001990 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e167      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cae:	4b0b      	ldr	r3, [pc, #44]	@ (8003cdc <HAL_RCC_OscConfig+0x240>)
 8003cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0f0      	beq.n	8003c9c <HAL_RCC_OscConfig+0x200>
 8003cba:	e01b      	b.n	8003cf4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cbc:	4b09      	ldr	r3, [pc, #36]	@ (8003ce4 <HAL_RCC_OscConfig+0x248>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cc2:	f7fd fe65 	bl	8001990 <HAL_GetTick>
 8003cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc8:	e00e      	b.n	8003ce8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cca:	f7fd fe61 	bl	8001990 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d907      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e150      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	42470000 	.word	0x42470000
 8003ce4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce8:	4b88      	ldr	r3, [pc, #544]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003cea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1ea      	bne.n	8003cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8097 	beq.w	8003e30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d02:	2300      	movs	r3, #0
 8003d04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d06:	4b81      	ldr	r3, [pc, #516]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10f      	bne.n	8003d32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d12:	2300      	movs	r3, #0
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	4b7d      	ldr	r3, [pc, #500]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003d1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d22:	4b7a      	ldr	r3, [pc, #488]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d2a:	60bb      	str	r3, [r7, #8]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d32:	4b77      	ldr	r3, [pc, #476]	@ (8003f10 <HAL_RCC_OscConfig+0x474>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d118      	bne.n	8003d70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d3e:	4b74      	ldr	r3, [pc, #464]	@ (8003f10 <HAL_RCC_OscConfig+0x474>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a73      	ldr	r2, [pc, #460]	@ (8003f10 <HAL_RCC_OscConfig+0x474>)
 8003d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d4a:	f7fd fe21 	bl	8001990 <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d52:	f7fd fe1d 	bl	8001990 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e10c      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d64:	4b6a      	ldr	r3, [pc, #424]	@ (8003f10 <HAL_RCC_OscConfig+0x474>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d106      	bne.n	8003d86 <HAL_RCC_OscConfig+0x2ea>
 8003d78:	4b64      	ldr	r3, [pc, #400]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d7c:	4a63      	ldr	r2, [pc, #396]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003d7e:	f043 0301 	orr.w	r3, r3, #1
 8003d82:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d84:	e01c      	b.n	8003dc0 <HAL_RCC_OscConfig+0x324>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	2b05      	cmp	r3, #5
 8003d8c:	d10c      	bne.n	8003da8 <HAL_RCC_OscConfig+0x30c>
 8003d8e:	4b5f      	ldr	r3, [pc, #380]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d92:	4a5e      	ldr	r2, [pc, #376]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003d94:	f043 0304 	orr.w	r3, r3, #4
 8003d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d9a:	4b5c      	ldr	r3, [pc, #368]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9e:	4a5b      	ldr	r2, [pc, #364]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da6:	e00b      	b.n	8003dc0 <HAL_RCC_OscConfig+0x324>
 8003da8:	4b58      	ldr	r3, [pc, #352]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dac:	4a57      	ldr	r2, [pc, #348]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db4:	4b55      	ldr	r3, [pc, #340]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db8:	4a54      	ldr	r2, [pc, #336]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003dba:	f023 0304 	bic.w	r3, r3, #4
 8003dbe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d015      	beq.n	8003df4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc8:	f7fd fde2 	bl	8001990 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dce:	e00a      	b.n	8003de6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd0:	f7fd fdde 	bl	8001990 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e0cb      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de6:	4b49      	ldr	r3, [pc, #292]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0ee      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x334>
 8003df2:	e014      	b.n	8003e1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df4:	f7fd fdcc 	bl	8001990 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dfa:	e00a      	b.n	8003e12 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfc:	f7fd fdc8 	bl	8001990 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e0b5      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e12:	4b3e      	ldr	r3, [pc, #248]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1ee      	bne.n	8003dfc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e1e:	7dfb      	ldrb	r3, [r7, #23]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d105      	bne.n	8003e30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e24:	4b39      	ldr	r3, [pc, #228]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e28:	4a38      	ldr	r2, [pc, #224]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003e2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80a1 	beq.w	8003f7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e3a:	4b34      	ldr	r3, [pc, #208]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f003 030c 	and.w	r3, r3, #12
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d05c      	beq.n	8003f00 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d141      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4e:	4b31      	ldr	r3, [pc, #196]	@ (8003f14 <HAL_RCC_OscConfig+0x478>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e54:	f7fd fd9c 	bl	8001990 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5c:	f7fd fd98 	bl	8001990 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e087      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6e:	4b27      	ldr	r3, [pc, #156]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	019b      	lsls	r3, r3, #6
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e90:	085b      	lsrs	r3, r3, #1
 8003e92:	3b01      	subs	r3, #1
 8003e94:	041b      	lsls	r3, r3, #16
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9c:	061b      	lsls	r3, r3, #24
 8003e9e:	491b      	ldr	r1, [pc, #108]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f14 <HAL_RCC_OscConfig+0x478>)
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eaa:	f7fd fd71 	bl	8001990 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb0:	e008      	b.n	8003ec4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eb2:	f7fd fd6d 	bl	8001990 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e05c      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec4:	4b11      	ldr	r3, [pc, #68]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f0      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x416>
 8003ed0:	e054      	b.n	8003f7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed2:	4b10      	ldr	r3, [pc, #64]	@ (8003f14 <HAL_RCC_OscConfig+0x478>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed8:	f7fd fd5a 	bl	8001990 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fd fd56 	bl	8001990 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e045      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef2:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <HAL_RCC_OscConfig+0x470>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x444>
 8003efe:	e03d      	b.n	8003f7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d107      	bne.n	8003f18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e038      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	40007000 	.word	0x40007000
 8003f14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f18:	4b1b      	ldr	r3, [pc, #108]	@ (8003f88 <HAL_RCC_OscConfig+0x4ec>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d028      	beq.n	8003f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d121      	bne.n	8003f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d11a      	bne.n	8003f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f48:	4013      	ands	r3, r2
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d111      	bne.n	8003f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5e:	085b      	lsrs	r3, r3, #1
 8003f60:	3b01      	subs	r3, #1
 8003f62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d107      	bne.n	8003f78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40023800 	.word	0x40023800

08003f8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e0cc      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa0:	4b68      	ldr	r3, [pc, #416]	@ (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0307 	and.w	r3, r3, #7
 8003fa8:	683a      	ldr	r2, [r7, #0]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d90c      	bls.n	8003fc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fae:	4b65      	ldr	r3, [pc, #404]	@ (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb6:	4b63      	ldr	r3, [pc, #396]	@ (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0307 	and.w	r3, r3, #7
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d001      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0b8      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d020      	beq.n	8004016 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe0:	4b59      	ldr	r3, [pc, #356]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	4a58      	ldr	r2, [pc, #352]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d005      	beq.n	8004004 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff8:	4b53      	ldr	r3, [pc, #332]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	4a52      	ldr	r2, [pc, #328]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004002:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004004:	4b50      	ldr	r3, [pc, #320]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	494d      	ldr	r1, [pc, #308]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d044      	beq.n	80040ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d107      	bne.n	800403a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	4b47      	ldr	r3, [pc, #284]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d119      	bne.n	800406a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e07f      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d003      	beq.n	800404a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004046:	2b03      	cmp	r3, #3
 8004048:	d107      	bne.n	800405a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404a:	4b3f      	ldr	r3, [pc, #252]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e06f      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405a:	4b3b      	ldr	r3, [pc, #236]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e067      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800406a:	4b37      	ldr	r3, [pc, #220]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f023 0203 	bic.w	r2, r3, #3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4934      	ldr	r1, [pc, #208]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	4313      	orrs	r3, r2
 800407a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800407c:	f7fd fc88 	bl	8001990 <HAL_GetTick>
 8004080:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004082:	e00a      	b.n	800409a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004084:	f7fd fc84 	bl	8001990 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004092:	4293      	cmp	r3, r2
 8004094:	d901      	bls.n	800409a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e04f      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409a:	4b2b      	ldr	r3, [pc, #172]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f003 020c 	and.w	r2, r3, #12
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d1eb      	bne.n	8004084 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040ac:	4b25      	ldr	r3, [pc, #148]	@ (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d20c      	bcs.n	80040d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ba:	4b22      	ldr	r3, [pc, #136]	@ (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c2:	4b20      	ldr	r3, [pc, #128]	@ (8004144 <HAL_RCC_ClockConfig+0x1b8>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0307 	and.w	r3, r3, #7
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d001      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e032      	b.n	800413a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e0:	4b19      	ldr	r3, [pc, #100]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	4916      	ldr	r1, [pc, #88]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d009      	beq.n	8004112 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040fe:	4b12      	ldr	r3, [pc, #72]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	490e      	ldr	r1, [pc, #56]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	4313      	orrs	r3, r2
 8004110:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004112:	f000 f821 	bl	8004158 <HAL_RCC_GetSysClockFreq>
 8004116:	4602      	mov	r2, r0
 8004118:	4b0b      	ldr	r3, [pc, #44]	@ (8004148 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	091b      	lsrs	r3, r3, #4
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	490a      	ldr	r1, [pc, #40]	@ (800414c <HAL_RCC_ClockConfig+0x1c0>)
 8004124:	5ccb      	ldrb	r3, [r1, r3]
 8004126:	fa22 f303 	lsr.w	r3, r2, r3
 800412a:	4a09      	ldr	r2, [pc, #36]	@ (8004150 <HAL_RCC_ClockConfig+0x1c4>)
 800412c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800412e:	4b09      	ldr	r3, [pc, #36]	@ (8004154 <HAL_RCC_ClockConfig+0x1c8>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fd fbe8 	bl	8001908 <HAL_InitTick>

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40023c00 	.word	0x40023c00
 8004148:	40023800 	.word	0x40023800
 800414c:	08004b0c 	.word	0x08004b0c
 8004150:	20000000 	.word	0x20000000
 8004154:	20000004 	.word	0x20000004

08004158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800415c:	b090      	sub	sp, #64	@ 0x40
 800415e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004170:	4b59      	ldr	r3, [pc, #356]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 030c 	and.w	r3, r3, #12
 8004178:	2b08      	cmp	r3, #8
 800417a:	d00d      	beq.n	8004198 <HAL_RCC_GetSysClockFreq+0x40>
 800417c:	2b08      	cmp	r3, #8
 800417e:	f200 80a1 	bhi.w	80042c4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_RCC_GetSysClockFreq+0x34>
 8004186:	2b04      	cmp	r3, #4
 8004188:	d003      	beq.n	8004192 <HAL_RCC_GetSysClockFreq+0x3a>
 800418a:	e09b      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800418c:	4b53      	ldr	r3, [pc, #332]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x184>)
 800418e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004190:	e09b      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004192:	4b53      	ldr	r3, [pc, #332]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004194:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004196:	e098      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004198:	4b4f      	ldr	r3, [pc, #316]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x180>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041a2:	4b4d      	ldr	r3, [pc, #308]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d028      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ae:	4b4a      	ldr	r3, [pc, #296]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	099b      	lsrs	r3, r3, #6
 80041b4:	2200      	movs	r2, #0
 80041b6:	623b      	str	r3, [r7, #32]
 80041b8:	627a      	str	r2, [r7, #36]	@ 0x24
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80041c0:	2100      	movs	r1, #0
 80041c2:	4b47      	ldr	r3, [pc, #284]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80041c4:	fb03 f201 	mul.w	r2, r3, r1
 80041c8:	2300      	movs	r3, #0
 80041ca:	fb00 f303 	mul.w	r3, r0, r3
 80041ce:	4413      	add	r3, r2
 80041d0:	4a43      	ldr	r2, [pc, #268]	@ (80042e0 <HAL_RCC_GetSysClockFreq+0x188>)
 80041d2:	fba0 1202 	umull	r1, r2, r0, r2
 80041d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041d8:	460a      	mov	r2, r1
 80041da:	62ba      	str	r2, [r7, #40]	@ 0x28
 80041dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041de:	4413      	add	r3, r2
 80041e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e4:	2200      	movs	r2, #0
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	61fa      	str	r2, [r7, #28]
 80041ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80041f2:	f7fb fff1 	bl	80001d8 <__aeabi_uldivmod>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4613      	mov	r3, r2
 80041fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041fe:	e053      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004200:	4b35      	ldr	r3, [pc, #212]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	099b      	lsrs	r3, r3, #6
 8004206:	2200      	movs	r2, #0
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	617a      	str	r2, [r7, #20]
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004212:	f04f 0b00 	mov.w	fp, #0
 8004216:	4652      	mov	r2, sl
 8004218:	465b      	mov	r3, fp
 800421a:	f04f 0000 	mov.w	r0, #0
 800421e:	f04f 0100 	mov.w	r1, #0
 8004222:	0159      	lsls	r1, r3, #5
 8004224:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004228:	0150      	lsls	r0, r2, #5
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	ebb2 080a 	subs.w	r8, r2, sl
 8004232:	eb63 090b 	sbc.w	r9, r3, fp
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004242:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004246:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800424a:	ebb2 0408 	subs.w	r4, r2, r8
 800424e:	eb63 0509 	sbc.w	r5, r3, r9
 8004252:	f04f 0200 	mov.w	r2, #0
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	00eb      	lsls	r3, r5, #3
 800425c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004260:	00e2      	lsls	r2, r4, #3
 8004262:	4614      	mov	r4, r2
 8004264:	461d      	mov	r5, r3
 8004266:	eb14 030a 	adds.w	r3, r4, sl
 800426a:	603b      	str	r3, [r7, #0]
 800426c:	eb45 030b 	adc.w	r3, r5, fp
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	f04f 0200 	mov.w	r2, #0
 8004276:	f04f 0300 	mov.w	r3, #0
 800427a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800427e:	4629      	mov	r1, r5
 8004280:	028b      	lsls	r3, r1, #10
 8004282:	4621      	mov	r1, r4
 8004284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004288:	4621      	mov	r1, r4
 800428a:	028a      	lsls	r2, r1, #10
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004292:	2200      	movs	r2, #0
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	60fa      	str	r2, [r7, #12]
 8004298:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800429c:	f7fb ff9c 	bl	80001d8 <__aeabi_uldivmod>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4613      	mov	r3, r2
 80042a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80042a8:	4b0b      	ldr	r3, [pc, #44]	@ (80042d8 <HAL_RCC_GetSysClockFreq+0x180>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	0c1b      	lsrs	r3, r3, #16
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	3301      	adds	r3, #1
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80042b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042c2:	e002      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042c4:	4b05      	ldr	r3, [pc, #20]	@ (80042dc <HAL_RCC_GetSysClockFreq+0x184>)
 80042c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80042c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3740      	adds	r7, #64	@ 0x40
 80042d0:	46bd      	mov	sp, r7
 80042d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800
 80042dc:	00f42400 	.word	0x00f42400
 80042e0:	017d7840 	.word	0x017d7840

080042e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e8:	4b03      	ldr	r3, [pc, #12]	@ (80042f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ea:	681b      	ldr	r3, [r3, #0]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000000 	.word	0x20000000

080042fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004300:	f7ff fff0 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8004304:	4602      	mov	r2, r0
 8004306:	4b05      	ldr	r3, [pc, #20]	@ (800431c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	0a9b      	lsrs	r3, r3, #10
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	4903      	ldr	r1, [pc, #12]	@ (8004320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004312:	5ccb      	ldrb	r3, [r1, r3]
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40023800 	.word	0x40023800
 8004320:	08004b1c 	.word	0x08004b1c

08004324 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e07b      	b.n	800442e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	2b00      	cmp	r3, #0
 800433c:	d108      	bne.n	8004350 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004346:	d009      	beq.n	800435c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	61da      	str	r2, [r3, #28]
 800434e:	e005      	b.n	800435c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fd f9c0 	bl	80016fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004392:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e0:	ea42 0103 	orr.w	r1, r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	0c1b      	lsrs	r3, r3, #16
 80043fa:	f003 0104 	and.w	r1, r3, #4
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004402:	f003 0210 	and.w	r2, r3, #16
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800441c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b088      	sub	sp, #32
 800443a:	af00      	add	r7, sp, #0
 800443c:	60f8      	str	r0, [r7, #12]
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	603b      	str	r3, [r7, #0]
 8004442:	4613      	mov	r3, r2
 8004444:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004446:	f7fd faa3 	bl	8001990 <HAL_GetTick>
 800444a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800444c:	88fb      	ldrh	r3, [r7, #6]
 800444e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b01      	cmp	r3, #1
 800445a:	d001      	beq.n	8004460 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800445c:	2302      	movs	r3, #2
 800445e:	e12a      	b.n	80046b6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <HAL_SPI_Transmit+0x36>
 8004466:	88fb      	ldrh	r3, [r7, #6]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e122      	b.n	80046b6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_SPI_Transmit+0x48>
 800447a:	2302      	movs	r3, #2
 800447c:	e11b      	b.n	80046b6 <HAL_SPI_Transmit+0x280>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2203      	movs	r2, #3
 800448a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	88fa      	ldrh	r2, [r7, #6]
 800449e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	88fa      	ldrh	r2, [r7, #6]
 80044a4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2200      	movs	r2, #0
 80044bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044cc:	d10f      	bne.n	80044ee <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f8:	2b40      	cmp	r3, #64	@ 0x40
 80044fa:	d007      	beq.n	800450c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800450a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004514:	d152      	bne.n	80045bc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <HAL_SPI_Transmit+0xee>
 800451e:	8b7b      	ldrh	r3, [r7, #26]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d145      	bne.n	80045b0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	881a      	ldrh	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004534:	1c9a      	adds	r2, r3, #2
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800453e:	b29b      	uxth	r3, r3
 8004540:	3b01      	subs	r3, #1
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004548:	e032      	b.n	80045b0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b02      	cmp	r3, #2
 8004556:	d112      	bne.n	800457e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455c:	881a      	ldrh	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004568:	1c9a      	adds	r2, r3, #2
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004572:	b29b      	uxth	r3, r3
 8004574:	3b01      	subs	r3, #1
 8004576:	b29a      	uxth	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800457c:	e018      	b.n	80045b0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800457e:	f7fd fa07 	bl	8001990 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d803      	bhi.n	8004596 <HAL_SPI_Transmit+0x160>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004594:	d102      	bne.n	800459c <HAL_SPI_Transmit+0x166>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d109      	bne.n	80045b0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e082      	b.n	80046b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1c7      	bne.n	800454a <HAL_SPI_Transmit+0x114>
 80045ba:	e053      	b.n	8004664 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <HAL_SPI_Transmit+0x194>
 80045c4:	8b7b      	ldrh	r3, [r7, #26]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d147      	bne.n	800465a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	330c      	adds	r3, #12
 80045d4:	7812      	ldrb	r2, [r2, #0]
 80045d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	3b01      	subs	r3, #1
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045f0:	e033      	b.n	800465a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d113      	bne.n	8004628 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	330c      	adds	r3, #12
 800460a:	7812      	ldrb	r2, [r2, #0]
 800460c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29a      	uxth	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004626:	e018      	b.n	800465a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004628:	f7fd f9b2 	bl	8001990 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d803      	bhi.n	8004640 <HAL_SPI_Transmit+0x20a>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463e:	d102      	bne.n	8004646 <HAL_SPI_Transmit+0x210>
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e02d      	b.n	80046b6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800465e:	b29b      	uxth	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1c6      	bne.n	80045f2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	6839      	ldr	r1, [r7, #0]
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f8b1 	bl	80047d0 <SPI_EndRxTxTransaction>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d002      	beq.n	800467a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10a      	bne.n	8004698 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e000      	b.n	80046b6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80046b4:	2300      	movs	r3, #0
  }
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3720      	adds	r7, #32
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b088      	sub	sp, #32
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	603b      	str	r3, [r7, #0]
 80046cc:	4613      	mov	r3, r2
 80046ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046d0:	f7fd f95e 	bl	8001990 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046d8:	1a9b      	subs	r3, r3, r2
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	4413      	add	r3, r2
 80046de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046e0:	f7fd f956 	bl	8001990 <HAL_GetTick>
 80046e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046e6:	4b39      	ldr	r3, [pc, #228]	@ (80047cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	015b      	lsls	r3, r3, #5
 80046ec:	0d1b      	lsrs	r3, r3, #20
 80046ee:	69fa      	ldr	r2, [r7, #28]
 80046f0:	fb02 f303 	mul.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046f6:	e054      	b.n	80047a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fe:	d050      	beq.n	80047a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004700:	f7fd f946 	bl	8001990 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	69fa      	ldr	r2, [r7, #28]
 800470c:	429a      	cmp	r2, r3
 800470e:	d902      	bls.n	8004716 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d13d      	bne.n	8004792 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004724:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800472e:	d111      	bne.n	8004754 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004738:	d004      	beq.n	8004744 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004742:	d107      	bne.n	8004754 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004752:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800475c:	d10f      	bne.n	800477e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800477c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e017      	b.n	80047c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004798:	2300      	movs	r3, #0
 800479a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	3b01      	subs	r3, #1
 80047a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	4013      	ands	r3, r2
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	bf0c      	ite	eq
 80047b2:	2301      	moveq	r3, #1
 80047b4:	2300      	movne	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d19b      	bne.n	80046f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	20000000 	.word	0x20000000

080047d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af02      	add	r7, sp, #8
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2201      	movs	r2, #1
 80047e4:	2102      	movs	r1, #2
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f7ff ff6a 	bl	80046c0 <SPI_WaitFlagStateUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d007      	beq.n	8004802 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047f6:	f043 0220 	orr.w	r2, r3, #32
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e032      	b.n	8004868 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004802:	4b1b      	ldr	r3, [pc, #108]	@ (8004870 <SPI_EndRxTxTransaction+0xa0>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1b      	ldr	r2, [pc, #108]	@ (8004874 <SPI_EndRxTxTransaction+0xa4>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	0d5b      	lsrs	r3, r3, #21
 800480e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004820:	d112      	bne.n	8004848 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2200      	movs	r2, #0
 800482a:	2180      	movs	r1, #128	@ 0x80
 800482c:	68f8      	ldr	r0, [r7, #12]
 800482e:	f7ff ff47 	bl	80046c0 <SPI_WaitFlagStateUntilTimeout>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d016      	beq.n	8004866 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800483c:	f043 0220 	orr.w	r2, r3, #32
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e00f      	b.n	8004868 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	3b01      	subs	r3, #1
 8004852:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485e:	2b80      	cmp	r3, #128	@ 0x80
 8004860:	d0f2      	beq.n	8004848 <SPI_EndRxTxTransaction+0x78>
 8004862:	e000      	b.n	8004866 <SPI_EndRxTxTransaction+0x96>
        break;
 8004864:	bf00      	nop
  }

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	20000000 	.word	0x20000000
 8004874:	165e9f81 	.word	0x165e9f81

08004878 <memset>:
 8004878:	4402      	add	r2, r0
 800487a:	4603      	mov	r3, r0
 800487c:	4293      	cmp	r3, r2
 800487e:	d100      	bne.n	8004882 <memset+0xa>
 8004880:	4770      	bx	lr
 8004882:	f803 1b01 	strb.w	r1, [r3], #1
 8004886:	e7f9      	b.n	800487c <memset+0x4>

08004888 <__libc_init_array>:
 8004888:	b570      	push	{r4, r5, r6, lr}
 800488a:	4d0d      	ldr	r5, [pc, #52]	@ (80048c0 <__libc_init_array+0x38>)
 800488c:	4c0d      	ldr	r4, [pc, #52]	@ (80048c4 <__libc_init_array+0x3c>)
 800488e:	1b64      	subs	r4, r4, r5
 8004890:	10a4      	asrs	r4, r4, #2
 8004892:	2600      	movs	r6, #0
 8004894:	42a6      	cmp	r6, r4
 8004896:	d109      	bne.n	80048ac <__libc_init_array+0x24>
 8004898:	4d0b      	ldr	r5, [pc, #44]	@ (80048c8 <__libc_init_array+0x40>)
 800489a:	4c0c      	ldr	r4, [pc, #48]	@ (80048cc <__libc_init_array+0x44>)
 800489c:	f000 f818 	bl	80048d0 <_init>
 80048a0:	1b64      	subs	r4, r4, r5
 80048a2:	10a4      	asrs	r4, r4, #2
 80048a4:	2600      	movs	r6, #0
 80048a6:	42a6      	cmp	r6, r4
 80048a8:	d105      	bne.n	80048b6 <__libc_init_array+0x2e>
 80048aa:	bd70      	pop	{r4, r5, r6, pc}
 80048ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80048b0:	4798      	blx	r3
 80048b2:	3601      	adds	r6, #1
 80048b4:	e7ee      	b.n	8004894 <__libc_init_array+0xc>
 80048b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ba:	4798      	blx	r3
 80048bc:	3601      	adds	r6, #1
 80048be:	e7f2      	b.n	80048a6 <__libc_init_array+0x1e>
 80048c0:	08004b2c 	.word	0x08004b2c
 80048c4:	08004b2c 	.word	0x08004b2c
 80048c8:	08004b2c 	.word	0x08004b2c
 80048cc:	08004b30 	.word	0x08004b30

080048d0 <_init>:
 80048d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d2:	bf00      	nop
 80048d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048d6:	bc08      	pop	{r3}
 80048d8:	469e      	mov	lr, r3
 80048da:	4770      	bx	lr

080048dc <_fini>:
 80048dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048de:	bf00      	nop
 80048e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e2:	bc08      	pop	{r3}
 80048e4:	469e      	mov	lr, r3
 80048e6:	4770      	bx	lr
