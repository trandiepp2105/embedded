
PROJECT_TEAM_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a94  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  08006c24  08006c24  00007c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee8  08006ee8  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006ee8  08006ee8  00007ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ef0  08006ef0  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ef0  08006ef0  00007ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ef4  08006ef4  00007ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006ef8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000805c  2**0
                  CONTENTS
 10 .bss          00000258  20000060  20000060  00008060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  00008060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b232  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001efc  00000000  00000000  000132be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  000151c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ecb  00000000  00000000  00015c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5f6  00000000  00000000  00018b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba6f5  00000000  00000000  00027109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e17fe  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000809  00000000  00000000  000e1841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003214  00000000  00000000  000e204c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000e5260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c0c 	.word	0x08006c0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006c0c 	.word	0x08006c0c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b988 	b.w	8000eb4 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	468e      	mov	lr, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	4688      	mov	r8, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4617      	mov	r7, r2
 8000bd0:	d962      	bls.n	8000c98 <__udivmoddi4+0xdc>
 8000bd2:	fab2 f682 	clz	r6, r2
 8000bd6:	b14e      	cbz	r6, 8000bec <__udivmoddi4+0x30>
 8000bd8:	f1c6 0320 	rsb	r3, r6, #32
 8000bdc:	fa01 f806 	lsl.w	r8, r1, r6
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	40b7      	lsls	r7, r6
 8000be6:	ea43 0808 	orr.w	r8, r3, r8
 8000bea:	40b4      	lsls	r4, r6
 8000bec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf0:	fa1f fc87 	uxth.w	ip, r7
 8000bf4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bf8:	0c23      	lsrs	r3, r4, #16
 8000bfa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fb01 f20c 	mul.w	r2, r1, ip
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c10:	f080 80ea 	bcs.w	8000de8 <__udivmoddi4+0x22c>
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f240 80e7 	bls.w	8000de8 <__udivmoddi4+0x22c>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	443b      	add	r3, r7
 8000c1e:	1a9a      	subs	r2, r3, r2
 8000c20:	b2a3      	uxth	r3, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c2e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c32:	459c      	cmp	ip, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x8e>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3c:	f080 80d6 	bcs.w	8000dec <__udivmoddi4+0x230>
 8000c40:	459c      	cmp	ip, r3
 8000c42:	f240 80d3 	bls.w	8000dec <__udivmoddi4+0x230>
 8000c46:	443b      	add	r3, r7
 8000c48:	3802      	subs	r0, #2
 8000c4a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c4e:	eba3 030c 	sub.w	r3, r3, ip
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11d      	cbz	r5, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40f3      	lsrs	r3, r6
 8000c58:	2200      	movs	r2, #0
 8000c5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d905      	bls.n	8000c72 <__udivmoddi4+0xb6>
 8000c66:	b10d      	cbz	r5, 8000c6c <__udivmoddi4+0xb0>
 8000c68:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e7f5      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c72:	fab3 f183 	clz	r1, r3
 8000c76:	2900      	cmp	r1, #0
 8000c78:	d146      	bne.n	8000d08 <__udivmoddi4+0x14c>
 8000c7a:	4573      	cmp	r3, lr
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xc8>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 8105 	bhi.w	8000e8e <__udivmoddi4+0x2d2>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	4690      	mov	r8, r2
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e5      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c92:	e9c5 4800 	strd	r4, r8, [r5]
 8000c96:	e7e2      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f000 8090 	beq.w	8000dbe <__udivmoddi4+0x202>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f040 80a4 	bne.w	8000df0 <__udivmoddi4+0x234>
 8000ca8:	1a8a      	subs	r2, r1, r2
 8000caa:	0c03      	lsrs	r3, r0, #16
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	b280      	uxth	r0, r0
 8000cb2:	b2bc      	uxth	r4, r7
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cba:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cc2:	fb04 f20c 	mul.w	r2, r4, ip
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x11e>
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x11c>
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	f200 80e0 	bhi.w	8000e98 <__udivmoddi4+0x2dc>
 8000cd8:	46c4      	mov	ip, r8
 8000cda:	1a9b      	subs	r3, r3, r2
 8000cdc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ce0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ce4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ce8:	fb02 f404 	mul.w	r4, r2, r4
 8000cec:	429c      	cmp	r4, r3
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x144>
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x142>
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	f200 80ca 	bhi.w	8000e92 <__udivmoddi4+0x2d6>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	1b1b      	subs	r3, r3, r4
 8000d02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d06:	e7a5      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d08:	f1c1 0620 	rsb	r6, r1, #32
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d12:	431f      	orrs	r7, r3
 8000d14:	fa0e f401 	lsl.w	r4, lr, r1
 8000d18:	fa20 f306 	lsr.w	r3, r0, r6
 8000d1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d24:	4323      	orrs	r3, r4
 8000d26:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2a:	fa1f fc87 	uxth.w	ip, r7
 8000d2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d32:	0c1c      	lsrs	r4, r3, #16
 8000d34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	fa02 f201 	lsl.w	r2, r2, r1
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x1a0>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d4e:	f080 809c 	bcs.w	8000e8a <__udivmoddi4+0x2ce>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f240 8099 	bls.w	8000e8a <__udivmoddi4+0x2ce>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	443c      	add	r4, r7
 8000d5c:	eba4 040e 	sub.w	r4, r4, lr
 8000d60:	fa1f fe83 	uxth.w	lr, r3
 8000d64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d68:	fb09 4413 	mls	r4, r9, r3, r4
 8000d6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d74:	45a4      	cmp	ip, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1ce>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d7e:	f080 8082 	bcs.w	8000e86 <__udivmoddi4+0x2ca>
 8000d82:	45a4      	cmp	ip, r4
 8000d84:	d97f      	bls.n	8000e86 <__udivmoddi4+0x2ca>
 8000d86:	3b02      	subs	r3, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d8e:	eba4 040c 	sub.w	r4, r4, ip
 8000d92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d96:	4564      	cmp	r4, ip
 8000d98:	4673      	mov	r3, lr
 8000d9a:	46e1      	mov	r9, ip
 8000d9c:	d362      	bcc.n	8000e64 <__udivmoddi4+0x2a8>
 8000d9e:	d05f      	beq.n	8000e60 <__udivmoddi4+0x2a4>
 8000da0:	b15d      	cbz	r5, 8000dba <__udivmoddi4+0x1fe>
 8000da2:	ebb8 0203 	subs.w	r2, r8, r3
 8000da6:	eb64 0409 	sbc.w	r4, r4, r9
 8000daa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dae:	fa22 f301 	lsr.w	r3, r2, r1
 8000db2:	431e      	orrs	r6, r3
 8000db4:	40cc      	lsrs	r4, r1
 8000db6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dba:	2100      	movs	r1, #0
 8000dbc:	e74f      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000dbe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dc2:	0c01      	lsrs	r1, r0, #16
 8000dc4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dc8:	b280      	uxth	r0, r0
 8000dca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	463c      	mov	r4, r7
 8000dd4:	46b8      	mov	r8, r7
 8000dd6:	46be      	mov	lr, r7
 8000dd8:	2620      	movs	r6, #32
 8000dda:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dde:	eba2 0208 	sub.w	r2, r2, r8
 8000de2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000de6:	e766      	b.n	8000cb6 <__udivmoddi4+0xfa>
 8000de8:	4601      	mov	r1, r0
 8000dea:	e718      	b.n	8000c1e <__udivmoddi4+0x62>
 8000dec:	4610      	mov	r0, r2
 8000dee:	e72c      	b.n	8000c4a <__udivmoddi4+0x8e>
 8000df0:	f1c6 0220 	rsb	r2, r6, #32
 8000df4:	fa2e f302 	lsr.w	r3, lr, r2
 8000df8:	40b7      	lsls	r7, r6
 8000dfa:	40b1      	lsls	r1, r6
 8000dfc:	fa20 f202 	lsr.w	r2, r0, r2
 8000e00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e04:	430a      	orrs	r2, r1
 8000e06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e0a:	b2bc      	uxth	r4, r7
 8000e0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb08 f904 	mul.w	r9, r8, r4
 8000e1a:	40b0      	lsls	r0, r6
 8000e1c:	4589      	cmp	r9, r1
 8000e1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e22:	b280      	uxth	r0, r0
 8000e24:	d93e      	bls.n	8000ea4 <__udivmoddi4+0x2e8>
 8000e26:	1879      	adds	r1, r7, r1
 8000e28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e2c:	d201      	bcs.n	8000e32 <__udivmoddi4+0x276>
 8000e2e:	4589      	cmp	r9, r1
 8000e30:	d81f      	bhi.n	8000e72 <__udivmoddi4+0x2b6>
 8000e32:	eba1 0109 	sub.w	r1, r1, r9
 8000e36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3a:	fb09 f804 	mul.w	r8, r9, r4
 8000e3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e42:	b292      	uxth	r2, r2
 8000e44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e48:	4542      	cmp	r2, r8
 8000e4a:	d229      	bcs.n	8000ea0 <__udivmoddi4+0x2e4>
 8000e4c:	18ba      	adds	r2, r7, r2
 8000e4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e52:	d2c4      	bcs.n	8000dde <__udivmoddi4+0x222>
 8000e54:	4542      	cmp	r2, r8
 8000e56:	d2c2      	bcs.n	8000dde <__udivmoddi4+0x222>
 8000e58:	f1a9 0102 	sub.w	r1, r9, #2
 8000e5c:	443a      	add	r2, r7
 8000e5e:	e7be      	b.n	8000dde <__udivmoddi4+0x222>
 8000e60:	45f0      	cmp	r8, lr
 8000e62:	d29d      	bcs.n	8000da0 <__udivmoddi4+0x1e4>
 8000e64:	ebbe 0302 	subs.w	r3, lr, r2
 8000e68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	46e1      	mov	r9, ip
 8000e70:	e796      	b.n	8000da0 <__udivmoddi4+0x1e4>
 8000e72:	eba7 0909 	sub.w	r9, r7, r9
 8000e76:	4449      	add	r1, r9
 8000e78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e80:	fb09 f804 	mul.w	r8, r9, r4
 8000e84:	e7db      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e86:	4673      	mov	r3, lr
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1ce>
 8000e8a:	4650      	mov	r0, sl
 8000e8c:	e766      	b.n	8000d5c <__udivmoddi4+0x1a0>
 8000e8e:	4608      	mov	r0, r1
 8000e90:	e6fd      	b.n	8000c8e <__udivmoddi4+0xd2>
 8000e92:	443b      	add	r3, r7
 8000e94:	3a02      	subs	r2, #2
 8000e96:	e733      	b.n	8000d00 <__udivmoddi4+0x144>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	443b      	add	r3, r7
 8000e9e:	e71c      	b.n	8000cda <__udivmoddi4+0x11e>
 8000ea0:	4649      	mov	r1, r9
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x222>
 8000ea4:	eba1 0109 	sub.w	r1, r1, r9
 8000ea8:	46c4      	mov	ip, r8
 8000eaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eae:	fb09 f804 	mul.w	r8, r9, r4
 8000eb2:	e7c4      	b.n	8000e3e <__udivmoddi4+0x282>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0a8      	sub	sp, #160	@ 0xa0
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // Task Box Definitions
  uint16_t start_y_tasks_row1 = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 8000ebe:	233c      	movs	r3, #60	@ 0x3c
 8000ec0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
  uint16_t start_y_tasks_row2 = start_y_tasks_row1 + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8000ec4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000ec8:	3350      	adds	r3, #80	@ 0x50
 8000eca:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

  TaskBox_t task_boxes[] = {
 8000ece:	230a      	movs	r3, #10
 8000ed0:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8000ed4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000ed8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8000edc:	2369      	movs	r3, #105	@ 0x69
 8000ede:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8000ee2:	2346      	movs	r3, #70	@ 0x46
 8000ee4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8000ee8:	4bb7      	ldr	r3, [pc, #732]	@ (80011c8 <main+0x310>)
 8000eea:	667b      	str	r3, [r7, #100]	@ 0x64
 8000eec:	237d      	movs	r3, #125	@ 0x7d
 8000eee:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8000ef2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000ef6:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8000efa:	2369      	movs	r3, #105	@ 0x69
 8000efc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8000f00:	2346      	movs	r3, #70	@ 0x46
 8000f02:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8000f06:	4bb1      	ldr	r3, [pc, #708]	@ (80011cc <main+0x314>)
 8000f08:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f0a:	230a      	movs	r3, #10
 8000f0c:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8000f10:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8000f14:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8000f18:	2369      	movs	r3, #105	@ 0x69
 8000f1a:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8000f1e:	2346      	movs	r3, #70	@ 0x46
 8000f20:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8000f24:	4baa      	ldr	r3, [pc, #680]	@ (80011d0 <main+0x318>)
 8000f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000f28:	237d      	movs	r3, #125	@ 0x7d
 8000f2a:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
 8000f2e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8000f32:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8000f36:	2369      	movs	r3, #105	@ 0x69
 8000f38:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8000f3c:	2346      	movs	r3, #70	@ 0x46
 8000f3e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8000f42:	4ba4      	ldr	r3, [pc, #656]	@ (80011d4 <main+0x31c>)
 8000f44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      {MARGIN, start_y_tasks_row1, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-1"},
      {(uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES), start_y_tasks_row1, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-2"},
      {MARGIN, start_y_tasks_row2, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-3"},
      {(uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES), start_y_tasks_row2, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-4"}};
  const int num_tasks = sizeof(task_boxes) / sizeof(task_boxes[0]);
 8000f48:	2304      	movs	r3, #4
 8000f4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  char info_text_buffer[50];
  char current_task_text[20];
  Coordinate rawPoint, displayPoint;

  // Define the Back Button Box (ADJUST x, y, w, h AS PER YOUR Manual_LCD_DrawLayout)
  TaskBox_t back_button_box = {
 8000f4e:	237d      	movs	r3, #125	@ 0x7d
 8000f50:	803b      	strh	r3, [r7, #0]
      (uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES),              // x: same margin as tasks
      (uint16_t)(start_y_tasks_row2 + TASK_BOX_H + TASK_TO_BACK_BUTTON_SPACING), // y: towards the bottom
 8000f52:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8000f56:	335a      	adds	r3, #90	@ 0x5a
 8000f58:	b29b      	uxth	r3, r3
  TaskBox_t back_button_box = {
 8000f5a:	807b      	strh	r3, [r7, #2]
 8000f5c:	235a      	movs	r3, #90	@ 0x5a
 8000f5e:	80bb      	strh	r3, [r7, #4]
 8000f60:	232d      	movs	r3, #45	@ 0x2d
 8000f62:	80fb      	strh	r3, [r7, #6]
 8000f64:	4b9c      	ldr	r3, [pc, #624]	@ (80011d8 <main+0x320>)
 8000f66:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f68:	f001 fe8e 	bl	8002c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6c:	f000 f93a 	bl	80011e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f70:	f000 fa04 	bl	800137c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f74:	f000 f9cc 	bl	8001310 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000f78:	f000 f99c 	bl	80012b4 <MX_I2C2_Init>
  Manual_LCD_Init();
 8000f7c:	f000 fb46 	bl	800160c <Manual_LCD_Init>
  Manual_Touch_Init(&hspi1);
 8000f80:	4896      	ldr	r0, [pc, #600]	@ (80011dc <main+0x324>)
 8000f82:	f001 fa01 	bl	8002388 <Manual_Touch_Init>

  Manual_LCD_Clear(COLOR_BLACK);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f000 fc5a 	bl	8001840 <Manual_LCD_Clear>
  Manual_LCD_DrawLayout(); // This function should draw the tasks and the back button
 8000f8c:	f000 ff68 	bl	8001e60 <Manual_LCD_DrawLayout>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (Manual_Touch_Pressed())
 8000f90:	f001 fa10 	bl	80023b4 <Manual_Touch_Pressed>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f000 8112 	beq.w	80011c0 <main+0x308>
    {
      if (Manual_Touch_GetRawPoint(&rawPoint))
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 fa17 	bl	80023d4 <Manual_Touch_GetRawPoint>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 8104 	beq.w	80011b6 <main+0x2fe>
      {
        Manual_Touch_ApplyCalibration(&displayPoint, &rawPoint);
 8000fae:	f107 0210 	add.w	r2, r7, #16
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 fbed 	bl	8002798 <Manual_Touch_ApplyCalibration>

        int task_hit_index = -1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        for (int i = 0; i < num_tasks; i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000fcc:	e057      	b.n	800107e <main+0x1c6>
        {
          if (displayPoint.x >= task_boxes[i].x && displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 8000fce:	89b9      	ldrh	r1, [r7, #12]
 8000fd0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	33a0      	adds	r3, #160	@ 0xa0
 8000fde:	443b      	add	r3, r7
 8000fe0:	3b44      	subs	r3, #68	@ 0x44
 8000fe2:	881b      	ldrh	r3, [r3, #0]
 8000fe4:	4299      	cmp	r1, r3
 8000fe6:	d345      	bcc.n	8001074 <main+0x1bc>
 8000fe8:	89bb      	ldrh	r3, [r7, #12]
 8000fea:	4619      	mov	r1, r3
 8000fec:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	33a0      	adds	r3, #160	@ 0xa0
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3b44      	subs	r3, #68	@ 0x44
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	33a0      	adds	r3, #160	@ 0xa0
 8001010:	443b      	add	r3, r7
 8001012:	3b40      	subs	r3, #64	@ 0x40
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	4403      	add	r3, r0
 8001018:	4299      	cmp	r1, r3
 800101a:	da2b      	bge.n	8001074 <main+0x1bc>
              displayPoint.y >= task_boxes[i].y && displayPoint.y < (task_boxes[i].y + task_boxes[i].h))
 800101c:	89f9      	ldrh	r1, [r7, #14]
 800101e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	33a0      	adds	r3, #160	@ 0xa0
 800102c:	443b      	add	r3, r7
 800102e:	3b42      	subs	r3, #66	@ 0x42
 8001030:	881b      	ldrh	r3, [r3, #0]
          if (displayPoint.x >= task_boxes[i].x && displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 8001032:	4299      	cmp	r1, r3
 8001034:	d31e      	bcc.n	8001074 <main+0x1bc>
              displayPoint.y >= task_boxes[i].y && displayPoint.y < (task_boxes[i].y + task_boxes[i].h))
 8001036:	89fb      	ldrh	r3, [r7, #14]
 8001038:	4619      	mov	r1, r3
 800103a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	33a0      	adds	r3, #160	@ 0xa0
 8001048:	443b      	add	r3, r7
 800104a:	3b42      	subs	r3, #66	@ 0x42
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	33a0      	adds	r3, #160	@ 0xa0
 800105e:	443b      	add	r3, r7
 8001060:	3b3e      	subs	r3, #62	@ 0x3e
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	4403      	add	r3, r0
 8001066:	4299      	cmp	r1, r3
 8001068:	da04      	bge.n	8001074 <main+0x1bc>
          {
            task_hit_index = i;
 800106a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800106e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            break;
 8001072:	e00a      	b.n	800108a <main+0x1d2>
        for (int i = 0; i < num_tasks; i++)
 8001074:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001078:	3301      	adds	r3, #1
 800107a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800107e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001082:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001086:	429a      	cmp	r2, r3
 8001088:	dba1      	blt.n	8000fce <main+0x116>
          }
        }

        bool back_button_pressed = false;
 800108a:	2300      	movs	r3, #0
 800108c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (displayPoint.x >= back_button_box.x && displayPoint.x < (back_button_box.x + back_button_box.w) &&
 8001090:	89ba      	ldrh	r2, [r7, #12]
 8001092:	883b      	ldrh	r3, [r7, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d316      	bcc.n	80010c6 <main+0x20e>
 8001098:	89bb      	ldrh	r3, [r7, #12]
 800109a:	461a      	mov	r2, r3
 800109c:	883b      	ldrh	r3, [r7, #0]
 800109e:	4619      	mov	r1, r3
 80010a0:	88bb      	ldrh	r3, [r7, #4]
 80010a2:	440b      	add	r3, r1
 80010a4:	429a      	cmp	r2, r3
 80010a6:	da0e      	bge.n	80010c6 <main+0x20e>
            displayPoint.y >= back_button_box.y && displayPoint.y < (back_button_box.y + back_button_box.h))
 80010a8:	89fa      	ldrh	r2, [r7, #14]
 80010aa:	887b      	ldrh	r3, [r7, #2]
        if (displayPoint.x >= back_button_box.x && displayPoint.x < (back_button_box.x + back_button_box.w) &&
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d30a      	bcc.n	80010c6 <main+0x20e>
            displayPoint.y >= back_button_box.y && displayPoint.y < (back_button_box.y + back_button_box.h))
 80010b0:	89fb      	ldrh	r3, [r7, #14]
 80010b2:	461a      	mov	r2, r3
 80010b4:	887b      	ldrh	r3, [r7, #2]
 80010b6:	4619      	mov	r1, r3
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	440b      	add	r3, r1
 80010bc:	429a      	cmp	r2, r3
 80010be:	da02      	bge.n	80010c6 <main+0x20e>
        {
          back_button_pressed = true;
 80010c0:	2301      	movs	r3, #1
 80010c2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        }

        if (task_hit_index != -1)
 80010c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80010ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ce:	d04d      	beq.n	800116c <main+0x2b4>
        {
          // reset fill color of previous task box(using current_task_text)
          if (strlen(current_task_text) > 0)
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d028      	beq.n	800112c <main+0x274>
          {
            if (strcmp(current_task_text, task_boxes[task_hit_index].name) != 0)
 80010da:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80010de:	4613      	mov	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	4413      	add	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	33a0      	adds	r3, #160	@ 0xa0
 80010e8:	443b      	add	r3, r7
 80010ea:	3b3c      	subs	r3, #60	@ 0x3c
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f86b 	bl	80001d0 <strcmp>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d024      	beq.n	800114a <main+0x292>
            {
              Manual_LCD_RefillTaskBox(current_task_text, COLOR_BLACK);                 // Refill the task box with red color
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f001 f870 	bl	80021ec <Manual_LCD_RefillTaskBox>
              Manual_LCD_RefillTaskBox(task_boxes[task_hit_index].name, COLOR_MAGENTA); // Refill the task box with red color
 800110c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001110:	4613      	mov	r3, r2
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	33a0      	adds	r3, #160	@ 0xa0
 800111a:	443b      	add	r3, r7
 800111c:	3b3c      	subs	r3, #60	@ 0x3c
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8001124:	4618      	mov	r0, r3
 8001126:	f001 f861 	bl	80021ec <Manual_LCD_RefillTaskBox>
 800112a:	e00e      	b.n	800114a <main+0x292>
            }
          }
          else
          {
            Manual_LCD_RefillTaskBox(task_boxes[task_hit_index].name, COLOR_MAGENTA); // Refill the task box with red color
 800112c:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	33a0      	adds	r3, #160	@ 0xa0
 800113a:	443b      	add	r3, r7
 800113c:	3b3c      	subs	r3, #60	@ 0x3c
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8001144:	4618      	mov	r0, r3
 8001146:	f001 f851 	bl	80021ec <Manual_LCD_RefillTaskBox>
          }
          strcpy(current_task_text, task_boxes[task_hit_index].name); // Update current task text
 800114a:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800114e:	4613      	mov	r3, r2
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	33a0      	adds	r3, #160	@ 0xa0
 8001158:	443b      	add	r3, r7
 800115a:	3b3c      	subs	r3, #60	@ 0x3c
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f005 f8ff 	bl	8006368 <strcpy>
 800116a:	e012      	b.n	8001192 <main+0x2da>

          // sprintf(info_text_buffer, "Task: %s", task_boxes[task_hit_index].name);
        }
        else if (back_button_pressed)
 800116c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <main+0x2ca>
        {
          sprintf(info_text_buffer, "Back"); // Display "Back" when back button is touched
 8001174:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001178:	4917      	ldr	r1, [pc, #92]	@ (80011d8 <main+0x320>)
 800117a:	4618      	mov	r0, r3
 800117c:	f005 f89e 	bl	80062bc <siprintf>
 8001180:	e007      	b.n	8001192 <main+0x2da>
        }
        else
        {
          sprintf(info_text_buffer, "Touch: X=%03u Y=%03u", displayPoint.x, displayPoint.y);
 8001182:	89bb      	ldrh	r3, [r7, #12]
 8001184:	461a      	mov	r2, r3
 8001186:	89fb      	ldrh	r3, [r7, #14]
 8001188:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800118c:	4914      	ldr	r1, [pc, #80]	@ (80011e0 <main+0x328>)
 800118e:	f005 f895 	bl	80062bc <siprintf>
        }
        Manual_LCD_UpdateInfoText(info_text_buffer);
 8001192:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001196:	4618      	mov	r0, r3
 8001198:	f000 fff6 	bl	8002188 <Manual_LCD_UpdateInfoText>

        while (Manual_Touch_Pressed())
 800119c:	e002      	b.n	80011a4 <main+0x2ec>
        {
          HAL_Delay(20);
 800119e:	2014      	movs	r0, #20
 80011a0:	f001 fde4 	bl	8002d6c <HAL_Delay>
        while (Manual_Touch_Pressed())
 80011a4:	f001 f906 	bl	80023b4 <Manual_Touch_Pressed>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f7      	bne.n	800119e <main+0x2e6>
 80011ae:	e007      	b.n	80011c0 <main+0x308>
      }
      else
      {
        while (Manual_Touch_Pressed())
        {
          HAL_Delay(20);
 80011b0:	2014      	movs	r0, #20
 80011b2:	f001 fddb 	bl	8002d6c <HAL_Delay>
        while (Manual_Touch_Pressed())
 80011b6:	f001 f8fd 	bl	80023b4 <Manual_Touch_Pressed>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f7      	bne.n	80011b0 <main+0x2f8>
        }
      }
    }
    HAL_Delay(50);
 80011c0:	2032      	movs	r0, #50	@ 0x32
 80011c2:	f001 fdd3 	bl	8002d6c <HAL_Delay>
    if (Manual_Touch_Pressed())
 80011c6:	e6e3      	b.n	8000f90 <main+0xd8>
 80011c8:	08006c24 	.word	0x08006c24
 80011cc:	08006c30 	.word	0x08006c30
 80011d0:	08006c3c 	.word	0x08006c3c
 80011d4:	08006c48 	.word	0x08006c48
 80011d8:	08006c54 	.word	0x08006c54
 80011dc:	200000d0 	.word	0x200000d0
 80011e0:	08006c5c 	.word	0x08006c5c

080011e4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	@ 0x50
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0320 	add.w	r3, r7, #32
 80011ee:	2230      	movs	r2, #48	@ 0x30
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f005 f884 	bl	8006300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <SystemClock_Config+0xc8>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	4a26      	ldr	r2, [pc, #152]	@ (80012ac <SystemClock_Config+0xc8>)
 8001212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001216:	6413      	str	r3, [r2, #64]	@ 0x40
 8001218:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <SystemClock_Config+0xc8>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001224:	2300      	movs	r3, #0
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	4b21      	ldr	r3, [pc, #132]	@ (80012b0 <SystemClock_Config+0xcc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a20      	ldr	r2, [pc, #128]	@ (80012b0 <SystemClock_Config+0xcc>)
 800122e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001232:	6013      	str	r3, [r2, #0]
 8001234:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <SystemClock_Config+0xcc>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001244:	2301      	movs	r3, #1
 8001246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001248:	2310      	movs	r3, #16
 800124a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800124c:	2302      	movs	r3, #2
 800124e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001250:	2300      	movs	r3, #0
 8001252:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001254:	2308      	movs	r3, #8
 8001256:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001258:	2354      	movs	r3, #84	@ 0x54
 800125a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800125c:	2302      	movs	r3, #2
 800125e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001260:	2304      	movs	r3, #4
 8001262:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	4618      	mov	r0, r3
 800126a:	f003 fe11 	bl	8004e90 <HAL_RCC_OscConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001274:	f000 f8f8 	bl	8001468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001278:	230f      	movs	r3, #15
 800127a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127c:	2302      	movs	r3, #2
 800127e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001284:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001288:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	2102      	movs	r1, #2
 8001294:	4618      	mov	r0, r3
 8001296:	f004 f873 	bl	8005380 <HAL_RCC_ClockConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012a0:	f000 f8e2 	bl	8001468 <Error_Handler>
  }
}
 80012a4:	bf00      	nop
 80012a6:	3750      	adds	r7, #80	@ 0x50
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40007000 	.word	0x40007000

080012b4 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */
  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012b8:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <MX_I2C2_Init+0x50>)
 80012ba:	4a13      	ldr	r2, [pc, #76]	@ (8001308 <MX_I2C2_Init+0x54>)
 80012bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012be:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_I2C2_Init+0x50>)
 80012c0:	4a12      	ldr	r2, [pc, #72]	@ (800130c <MX_I2C2_Init+0x58>)
 80012c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_I2C2_Init+0x50>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_I2C2_Init+0x50>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_I2C2_Init+0x50>)
 80012d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <MX_I2C2_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_I2C2_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <MX_I2C2_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_I2C2_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	@ (8001304 <MX_I2C2_Init+0x50>)
 80012f2:	f002 f893 	bl	800341c <HAL_I2C_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012fc:	f000 f8b4 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */
}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	2000007c 	.word	0x2000007c
 8001308:	40005800 	.word	0x40005800
 800130c:	000186a0 	.word	0x000186a0

08001310 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_Init 0 */
  /* USER CODE END SPI1_Init 0 */
  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001314:	4b17      	ldr	r3, [pc, #92]	@ (8001374 <MX_SPI1_Init+0x64>)
 8001316:	4a18      	ldr	r2, [pc, #96]	@ (8001378 <MX_SPI1_Init+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800131a:	4b16      	ldr	r3, [pc, #88]	@ (8001374 <MX_SPI1_Init+0x64>)
 800131c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001320:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001322:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <MX_SPI1_Init+0x64>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <MX_SPI1_Init+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800132e:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <MX_SPI1_Init+0x64>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001334:	4b0f      	ldr	r3, [pc, #60]	@ (8001374 <MX_SPI1_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800133a:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <MX_SPI1_Init+0x64>)
 800133c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001340:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001342:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <MX_SPI1_Init+0x64>)
 8001344:	2230      	movs	r2, #48	@ 0x30
 8001346:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001348:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <MX_SPI1_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <MX_SPI1_Init+0x64>)
 8001350:	2200      	movs	r2, #0
 8001352:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001354:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <MX_SPI1_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <MX_SPI1_Init+0x64>)
 800135c:	220a      	movs	r2, #10
 800135e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001360:	4804      	ldr	r0, [pc, #16]	@ (8001374 <MX_SPI1_Init+0x64>)
 8001362:	f004 f9d9 	bl	8005718 <HAL_SPI_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800136c:	f000 f87c 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200000d0 	.word	0x200000d0
 8001378:	40013000 	.word	0x40013000

0800137c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001382:	f107 030c 	add.w	r3, r7, #12
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b31      	ldr	r3, [pc, #196]	@ (800145c <MX_GPIO_Init+0xe0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a30      	ldr	r2, [pc, #192]	@ (800145c <MX_GPIO_Init+0xe0>)
 800139c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b2e      	ldr	r3, [pc, #184]	@ (800145c <MX_GPIO_Init+0xe0>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	4b2a      	ldr	r3, [pc, #168]	@ (800145c <MX_GPIO_Init+0xe0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a29      	ldr	r2, [pc, #164]	@ (800145c <MX_GPIO_Init+0xe0>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b27      	ldr	r3, [pc, #156]	@ (800145c <MX_GPIO_Init+0xe0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	603b      	str	r3, [r7, #0]
 80013ce:	4b23      	ldr	r3, [pc, #140]	@ (800145c <MX_GPIO_Init+0xe0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a22      	ldr	r2, [pc, #136]	@ (800145c <MX_GPIO_Init+0xe0>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b20      	ldr	r3, [pc, #128]	@ (800145c <MX_GPIO_Init+0xe0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 80013ec:	481c      	ldr	r0, [pc, #112]	@ (8001460 <MX_GPIO_Init+0xe4>)
 80013ee:	f001 ffd7 	bl	80033a0 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level for TP_CS to be deselected initially */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013f8:	481a      	ldr	r0, [pc, #104]	@ (8001464 <MX_GPIO_Init+0xe8>)
 80013fa:	f001 ffd1 	bl	80033a0 <HAL_GPIO_WritePin>
  // GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  // GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  // HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_RST_Pin LCD_BL_Pin LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin;
 80013fe:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8001402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4619      	mov	r1, r3
 8001416:	4812      	ldr	r0, [pc, #72]	@ (8001460 <MX_GPIO_Init+0xe4>)
 8001418:	f001 fe0e 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 800141c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001420:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	4619      	mov	r1, r3
 8001434:	480b      	ldr	r0, [pc, #44]	@ (8001464 <MX_GPIO_Init+0xe8>)
 8001436:	f001 fdff 	bl	8003038 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin (Configured for polling) */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800143a:	2310      	movs	r3, #16
 800143c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001442:	2301      	movs	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4619      	mov	r1, r3
 800144c:	4804      	ldr	r0, [pc, #16]	@ (8001460 <MX_GPIO_Init+0xe4>)
 800144e:	f001 fdf3 	bl	8003038 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001452:	bf00      	nop
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	40020400 	.word	0x40020400
 8001464:	40020000 	.word	0x40020000

08001468 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800146c:	b672      	cpsid	i
}
 800146e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <Error_Handler+0x8>

08001474 <LCD_SPI_Send>:
// External SPI handle defined in main.c
extern SPI_HandleTypeDef hspi1;

// Low-level SPI communication functions
static void LCD_SPI_Send(uint8_t data)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 800147e:	1df9      	adds	r1, r7, #7
 8001480:	f04f 33ff 	mov.w	r3, #4294967295
 8001484:	2201      	movs	r2, #1
 8001486:	4803      	ldr	r0, [pc, #12]	@ (8001494 <LCD_SPI_Send+0x20>)
 8001488:	f004 f9cf 	bl	800582a <HAL_SPI_Transmit>
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	200000d0 	.word	0x200000d0

08001498 <LCD_Write_Cmd>:

static void LCD_Write_Cmd(uint8_t cmd)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // DC low for command
 80014a2:	2200      	movs	r2, #0
 80014a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014a8:	480a      	ldr	r0, [pc, #40]	@ (80014d4 <LCD_Write_Cmd+0x3c>)
 80014aa:	f001 ff79 	bl	80033a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 80014ae:	2200      	movs	r2, #0
 80014b0:	2180      	movs	r1, #128	@ 0x80
 80014b2:	4808      	ldr	r0, [pc, #32]	@ (80014d4 <LCD_Write_Cmd+0x3c>)
 80014b4:	f001 ff74 	bl	80033a0 <HAL_GPIO_WritePin>
    LCD_SPI_Send(cmd);
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ffda 	bl	8001474 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 80014c0:	2201      	movs	r2, #1
 80014c2:	2180      	movs	r1, #128	@ 0x80
 80014c4:	4803      	ldr	r0, [pc, #12]	@ (80014d4 <LCD_Write_Cmd+0x3c>)
 80014c6:	f001 ff6b 	bl	80033a0 <HAL_GPIO_WritePin>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40020400 	.word	0x40020400

080014d8 <LCD_Write_Data>:

static void LCD_Write_Data(uint8_t data)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 80014e2:	2201      	movs	r2, #1
 80014e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014e8:	480a      	ldr	r0, [pc, #40]	@ (8001514 <LCD_Write_Data+0x3c>)
 80014ea:	f001 ff59 	bl	80033a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 80014ee:	2200      	movs	r2, #0
 80014f0:	2180      	movs	r1, #128	@ 0x80
 80014f2:	4808      	ldr	r0, [pc, #32]	@ (8001514 <LCD_Write_Data+0x3c>)
 80014f4:	f001 ff54 	bl	80033a0 <HAL_GPIO_WritePin>
    LCD_SPI_Send(data);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ffba 	bl	8001474 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001500:	2201      	movs	r2, #1
 8001502:	2180      	movs	r1, #128	@ 0x80
 8001504:	4803      	ldr	r0, [pc, #12]	@ (8001514 <LCD_Write_Data+0x3c>)
 8001506:	f001 ff4b 	bl	80033a0 <HAL_GPIO_WritePin>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40020400 	.word	0x40020400

08001518 <LCD_Write_Data16>:

static void LCD_Write_Data16(uint16_t data)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001522:	2201      	movs	r2, #1
 8001524:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001528:	4810      	ldr	r0, [pc, #64]	@ (800156c <LCD_Write_Data16+0x54>)
 800152a:	f001 ff39 	bl	80033a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 800152e:	2200      	movs	r2, #0
 8001530:	2180      	movs	r1, #128	@ 0x80
 8001532:	480e      	ldr	r0, [pc, #56]	@ (800156c <LCD_Write_Data16+0x54>)
 8001534:	f001 ff34 	bl	80033a0 <HAL_GPIO_WritePin>
    uint8_t bytes[2];
    bytes[0] = (data >> 8) & 0xFF;
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	0a1b      	lsrs	r3, r3, #8
 800153c:	b29b      	uxth	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	733b      	strb	r3, [r7, #12]
    bytes[1] = data & 0xFF;
 8001542:	88fb      	ldrh	r3, [r7, #6]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, bytes, 2, HAL_MAX_DELAY);
 8001548:	f107 010c 	add.w	r1, r7, #12
 800154c:	f04f 33ff 	mov.w	r3, #4294967295
 8001550:	2202      	movs	r2, #2
 8001552:	4807      	ldr	r0, [pc, #28]	@ (8001570 <LCD_Write_Data16+0x58>)
 8001554:	f004 f969 	bl	800582a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001558:	2201      	movs	r2, #1
 800155a:	2180      	movs	r1, #128	@ 0x80
 800155c:	4803      	ldr	r0, [pc, #12]	@ (800156c <LCD_Write_Data16+0x54>)
 800155e:	f001 ff1f 	bl	80033a0 <HAL_GPIO_WritePin>
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40020400 	.word	0x40020400
 8001570:	200000d0 	.word	0x200000d0

08001574 <LCD_Set_Address_Window>:

// Set drawing window
static void LCD_Set_Address_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001574:	b590      	push	{r4, r7, lr}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4604      	mov	r4, r0
 800157c:	4608      	mov	r0, r1
 800157e:	4611      	mov	r1, r2
 8001580:	461a      	mov	r2, r3
 8001582:	4623      	mov	r3, r4
 8001584:	80fb      	strh	r3, [r7, #6]
 8001586:	4603      	mov	r3, r0
 8001588:	80bb      	strh	r3, [r7, #4]
 800158a:	460b      	mov	r3, r1
 800158c:	807b      	strh	r3, [r7, #2]
 800158e:	4613      	mov	r3, r2
 8001590:	803b      	strh	r3, [r7, #0]
    LCD_Write_Cmd(0x2A); // Column Address Set
 8001592:	202a      	movs	r0, #42	@ 0x2a
 8001594:	f7ff ff80 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(x1 >> 8);
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	0a1b      	lsrs	r3, r3, #8
 800159c:	b29b      	uxth	r3, r3
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff99 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(x1 & 0xFF);
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff ff94 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(x2 >> 8);
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	0a1b      	lsrs	r3, r3, #8
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff8d 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(x2 & 0xFF);
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff88 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0x2B); // Page Address Set
 80015c8:	202b      	movs	r0, #43	@ 0x2b
 80015ca:	f7ff ff65 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(y1 >> 8);
 80015ce:	88bb      	ldrh	r3, [r7, #4]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff7e 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(y1 & 0xFF);
 80015dc:	88bb      	ldrh	r3, [r7, #4]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff79 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(y2 >> 8);
 80015e6:	883b      	ldrh	r3, [r7, #0]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ff72 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(y2 & 0xFF);
 80015f4:	883b      	ldrh	r3, [r7, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff6d 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0x2C); // Memory Write
 80015fe:	202c      	movs	r0, #44	@ 0x2c
 8001600:	f7ff ff4a 	bl	8001498 <LCD_Write_Cmd>
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bd90      	pop	{r4, r7, pc}

0800160c <Manual_LCD_Init>:
        }
    }
}

void Manual_LCD_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
    // Hardware Reset
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001610:	2200      	movs	r2, #0
 8001612:	2104      	movs	r1, #4
 8001614:	4889      	ldr	r0, [pc, #548]	@ (800183c <Manual_LCD_Init+0x230>)
 8001616:	f001 fec3 	bl	80033a0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800161a:	2064      	movs	r0, #100	@ 0x64
 800161c:	f001 fba6 	bl	8002d6c <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001620:	2201      	movs	r2, #1
 8001622:	2104      	movs	r1, #4
 8001624:	4885      	ldr	r0, [pc, #532]	@ (800183c <Manual_LCD_Init+0x230>)
 8001626:	f001 febb 	bl	80033a0 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800162a:	2064      	movs	r0, #100	@ 0x64
 800162c:	f001 fb9e 	bl	8002d6c <HAL_Delay>

    // Backlight ON
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8001630:	2201      	movs	r2, #1
 8001632:	2140      	movs	r1, #64	@ 0x40
 8001634:	4881      	ldr	r0, [pc, #516]	@ (800183c <Manual_LCD_Init+0x230>)
 8001636:	f001 feb3 	bl	80033a0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800163a:	200a      	movs	r0, #10
 800163c:	f001 fb96 	bl	8002d6c <HAL_Delay>

    // Initialization sequence (Example for ILI9341 - ADJUST FOR YOUR LCD)
    LCD_Write_Cmd(0xCF); // Power Control B
 8001640:	20cf      	movs	r0, #207	@ 0xcf
 8001642:	f7ff ff29 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001646:	2000      	movs	r0, #0
 8001648:	f7ff ff46 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 800164c:	20c1      	movs	r0, #193	@ 0xc1
 800164e:	f7ff ff43 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x30);
 8001652:	2030      	movs	r0, #48	@ 0x30
 8001654:	f7ff ff40 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0xED); // Power on sequence control
 8001658:	20ed      	movs	r0, #237	@ 0xed
 800165a:	f7ff ff1d 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x64);
 800165e:	2064      	movs	r0, #100	@ 0x64
 8001660:	f7ff ff3a 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001664:	2003      	movs	r0, #3
 8001666:	f7ff ff37 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x12);
 800166a:	2012      	movs	r0, #18
 800166c:	f7ff ff34 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x81);
 8001670:	2081      	movs	r0, #129	@ 0x81
 8001672:	f7ff ff31 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0xE8); // Driver timing control A
 8001676:	20e8      	movs	r0, #232	@ 0xe8
 8001678:	f7ff ff0e 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x85);
 800167c:	2085      	movs	r0, #133	@ 0x85
 800167e:	f7ff ff2b 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff ff28 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x78);
 8001688:	2078      	movs	r0, #120	@ 0x78
 800168a:	f7ff ff25 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0xCB); // Power control A
 800168e:	20cb      	movs	r0, #203	@ 0xcb
 8001690:	f7ff ff02 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x39);
 8001694:	2039      	movs	r0, #57	@ 0x39
 8001696:	f7ff ff1f 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x2C);
 800169a:	202c      	movs	r0, #44	@ 0x2c
 800169c:	f7ff ff1c 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 80016a0:	2000      	movs	r0, #0
 80016a2:	f7ff ff19 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x34);
 80016a6:	2034      	movs	r0, #52	@ 0x34
 80016a8:	f7ff ff16 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x02);
 80016ac:	2002      	movs	r0, #2
 80016ae:	f7ff ff13 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0xF7); // Pump ratio control
 80016b2:	20f7      	movs	r0, #247	@ 0xf7
 80016b4:	f7ff fef0 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x20);
 80016b8:	2020      	movs	r0, #32
 80016ba:	f7ff ff0d 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0xEA); // Driver timing control B
 80016be:	20ea      	movs	r0, #234	@ 0xea
 80016c0:	f7ff feea 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 80016c4:	2000      	movs	r0, #0
 80016c6:	f7ff ff07 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff ff04 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0xC0);  // Power Control 1
 80016d0:	20c0      	movs	r0, #192	@ 0xc0
 80016d2:	f7ff fee1 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x23); // VRH[5:0]
 80016d6:	2023      	movs	r0, #35	@ 0x23
 80016d8:	f7ff fefe 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0xC1);  // Power Control 2
 80016dc:	20c1      	movs	r0, #193	@ 0xc1
 80016de:	f7ff fedb 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x10); // SAP[2:0];BT[3:0]
 80016e2:	2010      	movs	r0, #16
 80016e4:	f7ff fef8 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0xC5);  // VCOM Control 1
 80016e8:	20c5      	movs	r0, #197	@ 0xc5
 80016ea:	f7ff fed5 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x3E); // Contrast
 80016ee:	203e      	movs	r0, #62	@ 0x3e
 80016f0:	f7ff fef2 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x28);
 80016f4:	2028      	movs	r0, #40	@ 0x28
 80016f6:	f7ff feef 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0xC7);  // VCOM Control 2
 80016fa:	20c7      	movs	r0, #199	@ 0xc7
 80016fc:	f7ff fecc 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x86); // --
 8001700:	2086      	movs	r0, #134	@ 0x86
 8001702:	f7ff fee9 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0x36); // Memory Access Control
 8001706:	2036      	movs	r0, #54	@ 0x36
 8001708:	f7ff fec6 	bl	8001498 <LCD_Write_Cmd>
    // LCD_Write_Data(0x08); // Previous value
    LCD_Write_Data(0x28); // Try this: MV=1, MY=0, MX=0, BGR=1 (Landscape, X:T-B, Y:L-R)
 800170c:	2028      	movs	r0, #40	@ 0x28
 800170e:	f7ff fee3 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0x3A);  // Pixel Format Set
 8001712:	203a      	movs	r0, #58	@ 0x3a
 8001714:	f7ff fec0 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x55); // 16 bits/pixel
 8001718:	2055      	movs	r0, #85	@ 0x55
 800171a:	f7ff fedd 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0xB1); // Frame Rate Control (In Normal Mode/Full Colors)
 800171e:	20b1      	movs	r0, #177	@ 0xb1
 8001720:	f7ff feba 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff fed7 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x18);
 800172a:	2018      	movs	r0, #24
 800172c:	f7ff fed4 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0xB6); // Display Function Control
 8001730:	20b6      	movs	r0, #182	@ 0xb6
 8001732:	f7ff feb1 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x08);
 8001736:	2008      	movs	r0, #8
 8001738:	f7ff fece 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x82);
 800173c:	2082      	movs	r0, #130	@ 0x82
 800173e:	f7ff fecb 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x27);
 8001742:	2027      	movs	r0, #39	@ 0x27
 8001744:	f7ff fec8 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0xF2);  // Enable 3G
 8001748:	20f2      	movs	r0, #242	@ 0xf2
 800174a:	f7ff fea5 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x00); // 3Gamma Function Disable
 800174e:	2000      	movs	r0, #0
 8001750:	f7ff fec2 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0x26);  // Gamma Set
 8001754:	2026      	movs	r0, #38	@ 0x26
 8001756:	f7ff fe9f 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x01); // Gamma curve selected
 800175a:	2001      	movs	r0, #1
 800175c:	f7ff febc 	bl	80014d8 <LCD_Write_Data>

    // ... (Positive and Negative Gamma Correction remain the same) ...
    LCD_Write_Cmd(0xE0); // Positive Gamma Correction
 8001760:	20e0      	movs	r0, #224	@ 0xe0
 8001762:	f7ff fe99 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x0F);
 8001766:	200f      	movs	r0, #15
 8001768:	f7ff feb6 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 800176c:	2031      	movs	r0, #49	@ 0x31
 800176e:	f7ff feb3 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x2B);
 8001772:	202b      	movs	r0, #43	@ 0x2b
 8001774:	f7ff feb0 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8001778:	200c      	movs	r0, #12
 800177a:	f7ff fead 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 800177e:	200e      	movs	r0, #14
 8001780:	f7ff feaa 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8001784:	2008      	movs	r0, #8
 8001786:	f7ff fea7 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x4E);
 800178a:	204e      	movs	r0, #78	@ 0x4e
 800178c:	f7ff fea4 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0xF1);
 8001790:	20f1      	movs	r0, #241	@ 0xf1
 8001792:	f7ff fea1 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x37);
 8001796:	2037      	movs	r0, #55	@ 0x37
 8001798:	f7ff fe9e 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 800179c:	2007      	movs	r0, #7
 800179e:	f7ff fe9b 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x10);
 80017a2:	2010      	movs	r0, #16
 80017a4:	f7ff fe98 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f7ff fe95 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 80017ae:	200e      	movs	r0, #14
 80017b0:	f7ff fe92 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x09);
 80017b4:	2009      	movs	r0, #9
 80017b6:	f7ff fe8f 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff fe8c 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0xE1); // Negative Gamma Correction
 80017c0:	20e1      	movs	r0, #225	@ 0xe1
 80017c2:	f7ff fe69 	bl	8001498 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 80017c6:	2000      	movs	r0, #0
 80017c8:	f7ff fe86 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 80017cc:	200e      	movs	r0, #14
 80017ce:	f7ff fe83 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x14);
 80017d2:	2014      	movs	r0, #20
 80017d4:	f7ff fe80 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 80017d8:	2003      	movs	r0, #3
 80017da:	f7ff fe7d 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x11);
 80017de:	2011      	movs	r0, #17
 80017e0:	f7ff fe7a 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 80017e4:	2007      	movs	r0, #7
 80017e6:	f7ff fe77 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 80017ea:	2031      	movs	r0, #49	@ 0x31
 80017ec:	f7ff fe74 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 80017f0:	20c1      	movs	r0, #193	@ 0xc1
 80017f2:	f7ff fe71 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x48);
 80017f6:	2048      	movs	r0, #72	@ 0x48
 80017f8:	f7ff fe6e 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x08);
 80017fc:	2008      	movs	r0, #8
 80017fe:	f7ff fe6b 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8001802:	200f      	movs	r0, #15
 8001804:	f7ff fe68 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8001808:	200c      	movs	r0, #12
 800180a:	f7ff fe65 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 800180e:	2031      	movs	r0, #49	@ 0x31
 8001810:	f7ff fe62 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x36);
 8001814:	2036      	movs	r0, #54	@ 0x36
 8001816:	f7ff fe5f 	bl	80014d8 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 800181a:	200f      	movs	r0, #15
 800181c:	f7ff fe5c 	bl	80014d8 <LCD_Write_Data>

    LCD_Write_Cmd(0x11); // Exit Sleep
 8001820:	2011      	movs	r0, #17
 8001822:	f7ff fe39 	bl	8001498 <LCD_Write_Cmd>
    HAL_Delay(120);
 8001826:	2078      	movs	r0, #120	@ 0x78
 8001828:	f001 faa0 	bl	8002d6c <HAL_Delay>
    LCD_Write_Cmd(0x29); // Display ON
 800182c:	2029      	movs	r0, #41	@ 0x29
 800182e:	f7ff fe33 	bl	8001498 <LCD_Write_Cmd>

    Manual_LCD_Clear(COLOR_BLACK);
 8001832:	2000      	movs	r0, #0
 8001834:	f000 f804 	bl	8001840 <Manual_LCD_Clear>
}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40020400 	.word	0x40020400

08001840 <Manual_LCD_Clear>:

void Manual_LCD_Clear(uint16_t color)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
    LCD_Set_Address_Window(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 800184a:	f240 133f 	movw	r3, #319	@ 0x13f
 800184e:	22ef      	movs	r2, #239	@ 0xef
 8001850:	2100      	movs	r1, #0
 8001852:	2000      	movs	r0, #0
 8001854:	f7ff fe8e 	bl	8001574 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001858:	2201      	movs	r2, #1
 800185a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800185e:	4815      	ldr	r0, [pc, #84]	@ (80018b4 <Manual_LCD_Clear+0x74>)
 8001860:	f001 fd9e 	bl	80033a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001864:	2200      	movs	r2, #0
 8001866:	2180      	movs	r1, #128	@ 0x80
 8001868:	4812      	ldr	r0, [pc, #72]	@ (80018b4 <Manual_LCD_Clear+0x74>)
 800186a:	f001 fd99 	bl	80033a0 <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	0a1b      	lsrs	r3, r3, #8
 8001872:	b29b      	uxth	r3, r3
 8001874:	b2db      	uxtb	r3, r3
 8001876:	723b      	strb	r3, [r7, #8]
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	e00a      	b.n	800189a <Manual_LCD_Clear+0x5a>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8001884:	f107 0108 	add.w	r1, r7, #8
 8001888:	f04f 33ff 	mov.w	r3, #4294967295
 800188c:	2202      	movs	r2, #2
 800188e:	480a      	ldr	r0, [pc, #40]	@ (80018b8 <Manual_LCD_Clear+0x78>)
 8001890:	f003 ffcb 	bl	800582a <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80018a0:	d3f0      	bcc.n	8001884 <Manual_LCD_Clear+0x44>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 80018a2:	2201      	movs	r2, #1
 80018a4:	2180      	movs	r1, #128	@ 0x80
 80018a6:	4803      	ldr	r0, [pc, #12]	@ (80018b4 <Manual_LCD_Clear+0x74>)
 80018a8:	f001 fd7a 	bl	80033a0 <HAL_GPIO_WritePin>
}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40020400 	.word	0x40020400
 80018b8:	200000d0 	.word	0x200000d0

080018bc <Manual_LCD_DrawPixel>:

void Manual_LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	80fb      	strh	r3, [r7, #6]
 80018c6:	460b      	mov	r3, r1
 80018c8:	80bb      	strh	r3, [r7, #4]
 80018ca:	4613      	mov	r3, r2
 80018cc:	807b      	strh	r3, [r7, #2]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	2bef      	cmp	r3, #239	@ 0xef
 80018d2:	d80e      	bhi.n	80018f2 <Manual_LCD_DrawPixel+0x36>
 80018d4:	88bb      	ldrh	r3, [r7, #4]
 80018d6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80018da:	d20a      	bcs.n	80018f2 <Manual_LCD_DrawPixel+0x36>
        return;
    LCD_Set_Address_Window(x, y, x, y);
 80018dc:	88bb      	ldrh	r3, [r7, #4]
 80018de:	88fa      	ldrh	r2, [r7, #6]
 80018e0:	88b9      	ldrh	r1, [r7, #4]
 80018e2:	88f8      	ldrh	r0, [r7, #6]
 80018e4:	f7ff fe46 	bl	8001574 <LCD_Set_Address_Window>
    LCD_Write_Data16(color);
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fe14 	bl	8001518 <LCD_Write_Data16>
 80018f0:	e000      	b.n	80018f4 <Manual_LCD_DrawPixel+0x38>
        return;
 80018f2:	bf00      	nop
}
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <Manual_LCD_DrawLine>:

void Manual_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 80018fa:	b590      	push	{r4, r7, lr}
 80018fc:	b087      	sub	sp, #28
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4604      	mov	r4, r0
 8001902:	4608      	mov	r0, r1
 8001904:	4611      	mov	r1, r2
 8001906:	461a      	mov	r2, r3
 8001908:	4623      	mov	r3, r4
 800190a:	80fb      	strh	r3, [r7, #6]
 800190c:	4603      	mov	r3, r0
 800190e:	80bb      	strh	r3, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001918:	883a      	ldrh	r2, [r7, #0]
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001922:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001926:	8879      	ldrh	r1, [r7, #2]
 8001928:	88fb      	ldrh	r3, [r7, #6]
 800192a:	1acb      	subs	r3, r1, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	bfb8      	it	lt
 8001930:	425b      	neglt	r3, r3
 8001932:	429a      	cmp	r2, r3
 8001934:	bfcc      	ite	gt
 8001936:	2301      	movgt	r3, #1
 8001938:	2300      	movle	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	827b      	strh	r3, [r7, #18]
    if (steep)
 800193e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d00b      	beq.n	800195e <Manual_LCD_DrawLine+0x64>
    {
        uint16_t temp;
        temp = x1;
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	823b      	strh	r3, [r7, #16]
        x1 = y1;
 800194a:	88bb      	ldrh	r3, [r7, #4]
 800194c:	80fb      	strh	r3, [r7, #6]
        y1 = temp;
 800194e:	8a3b      	ldrh	r3, [r7, #16]
 8001950:	80bb      	strh	r3, [r7, #4]
        temp = x2;
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	823b      	strh	r3, [r7, #16]
        x2 = y2;
 8001956:	883b      	ldrh	r3, [r7, #0]
 8001958:	807b      	strh	r3, [r7, #2]
        y2 = temp;
 800195a:	8a3b      	ldrh	r3, [r7, #16]
 800195c:	803b      	strh	r3, [r7, #0]
    }
    if (x1 > x2)
 800195e:	88fa      	ldrh	r2, [r7, #6]
 8001960:	887b      	ldrh	r3, [r7, #2]
 8001962:	429a      	cmp	r2, r3
 8001964:	d90b      	bls.n	800197e <Manual_LCD_DrawLine+0x84>
    {
        uint16_t temp;
        temp = x1;
 8001966:	88fb      	ldrh	r3, [r7, #6]
 8001968:	81fb      	strh	r3, [r7, #14]
        x1 = x2;
 800196a:	887b      	ldrh	r3, [r7, #2]
 800196c:	80fb      	strh	r3, [r7, #6]
        x2 = temp;
 800196e:	89fb      	ldrh	r3, [r7, #14]
 8001970:	807b      	strh	r3, [r7, #2]
        temp = y1;
 8001972:	88bb      	ldrh	r3, [r7, #4]
 8001974:	81fb      	strh	r3, [r7, #14]
        y1 = y2;
 8001976:	883b      	ldrh	r3, [r7, #0]
 8001978:	80bb      	strh	r3, [r7, #4]
        y2 = temp;
 800197a:	89fb      	ldrh	r3, [r7, #14]
 800197c:	803b      	strh	r3, [r7, #0]
    }
    int16_t dx = x2 - x1;
 800197e:	887a      	ldrh	r2, [r7, #2]
 8001980:	88fb      	ldrh	r3, [r7, #6]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	b29b      	uxth	r3, r3
 8001986:	81bb      	strh	r3, [r7, #12]
    int16_t dy = abs(y2 - y1);
 8001988:	883a      	ldrh	r2, [r7, #0]
 800198a:	88bb      	ldrh	r3, [r7, #4]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	bfb8      	it	lt
 8001992:	425b      	neglt	r3, r3
 8001994:	817b      	strh	r3, [r7, #10]
    int16_t err = dx / 2;
 8001996:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800199a:	0fda      	lsrs	r2, r3, #31
 800199c:	4413      	add	r3, r2
 800199e:	105b      	asrs	r3, r3, #1
 80019a0:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;
    if (y1 < y2)
 80019a2:	88ba      	ldrh	r2, [r7, #4]
 80019a4:	883b      	ldrh	r3, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d202      	bcs.n	80019b0 <Manual_LCD_DrawLine+0xb6>
        ystep = 1;
 80019aa:	2301      	movs	r3, #1
 80019ac:	82bb      	strh	r3, [r7, #20]
 80019ae:	e029      	b.n	8001a04 <Manual_LCD_DrawLine+0x10a>
    else
        ystep = -1;
 80019b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019b4:	82bb      	strh	r3, [r7, #20]

    for (; x1 <= x2; x1++)
 80019b6:	e025      	b.n	8001a04 <Manual_LCD_DrawLine+0x10a>
    {
        if (steep)
 80019b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d006      	beq.n	80019ce <Manual_LCD_DrawLine+0xd4>
            Manual_LCD_DrawPixel(y1, x1, color);
 80019c0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80019c2:	88f9      	ldrh	r1, [r7, #6]
 80019c4:	88bb      	ldrh	r3, [r7, #4]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ff78 	bl	80018bc <Manual_LCD_DrawPixel>
 80019cc:	e005      	b.n	80019da <Manual_LCD_DrawLine+0xe0>
        else
            Manual_LCD_DrawPixel(x1, y1, color);
 80019ce:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80019d0:	88b9      	ldrh	r1, [r7, #4]
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff71 	bl	80018bc <Manual_LCD_DrawPixel>
        err -= dy;
 80019da:	8afa      	ldrh	r2, [r7, #22]
 80019dc:	897b      	ldrh	r3, [r7, #10]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	82fb      	strh	r3, [r7, #22]
        if (err < 0)
 80019e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da08      	bge.n	80019fe <Manual_LCD_DrawLine+0x104>
        {
            y1 += ystep;
 80019ec:	8aba      	ldrh	r2, [r7, #20]
 80019ee:	88bb      	ldrh	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80019f4:	8afa      	ldrh	r2, [r7, #22]
 80019f6:	89bb      	ldrh	r3, [r7, #12]
 80019f8:	4413      	add	r3, r2
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	82fb      	strh	r3, [r7, #22]
    for (; x1 <= x2; x1++)
 80019fe:	88fb      	ldrh	r3, [r7, #6]
 8001a00:	3301      	adds	r3, #1
 8001a02:	80fb      	strh	r3, [r7, #6]
 8001a04:	88fa      	ldrh	r2, [r7, #6]
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d9d5      	bls.n	80019b8 <Manual_LCD_DrawLine+0xbe>
        }
    }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	371c      	adds	r7, #28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd90      	pop	{r4, r7, pc}

08001a16 <Manual_LCD_DrawRectangle>:

void Manual_LCD_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001a16:	b590      	push	{r4, r7, lr}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af02      	add	r7, sp, #8
 8001a1c:	4604      	mov	r4, r0
 8001a1e:	4608      	mov	r0, r1
 8001a20:	4611      	mov	r1, r2
 8001a22:	461a      	mov	r2, r3
 8001a24:	4623      	mov	r3, r4
 8001a26:	80fb      	strh	r3, [r7, #6]
 8001a28:	4603      	mov	r3, r0
 8001a2a:	80bb      	strh	r3, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
 8001a30:	4613      	mov	r3, r2
 8001a32:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	2bef      	cmp	r3, #239	@ 0xef
 8001a38:	d865      	bhi.n	8001b06 <Manual_LCD_DrawRectangle+0xf0>
 8001a3a:	88bb      	ldrh	r3, [r7, #4]
 8001a3c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001a40:	d261      	bcs.n	8001b06 <Manual_LCD_DrawRectangle+0xf0>
        return;
    if ((x + width - 1) >= LCD_WIDTH)
 8001a42:	88fa      	ldrh	r2, [r7, #6]
 8001a44:	887b      	ldrh	r3, [r7, #2]
 8001a46:	4413      	add	r3, r2
 8001a48:	2bf0      	cmp	r3, #240	@ 0xf0
 8001a4a:	dd03      	ble.n	8001a54 <Manual_LCD_DrawRectangle+0x3e>
        width = LCD_WIDTH - x;
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001a52:	807b      	strh	r3, [r7, #2]
    if ((y + height - 1) >= LCD_HEIGHT)
 8001a54:	88ba      	ldrh	r2, [r7, #4]
 8001a56:	883b      	ldrh	r3, [r7, #0]
 8001a58:	4413      	add	r3, r2
 8001a5a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001a5e:	dd03      	ble.n	8001a68 <Manual_LCD_DrawRectangle+0x52>
        height = LCD_HEIGHT - y;
 8001a60:	88bb      	ldrh	r3, [r7, #4]
 8001a62:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001a66:	803b      	strh	r3, [r7, #0]

    Manual_LCD_DrawLine(x, y, x + width - 1, y, color);
 8001a68:	88fa      	ldrh	r2, [r7, #6]
 8001a6a:	887b      	ldrh	r3, [r7, #2]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	88bc      	ldrh	r4, [r7, #4]
 8001a76:	88b9      	ldrh	r1, [r7, #4]
 8001a78:	88f8      	ldrh	r0, [r7, #6]
 8001a7a:	8b3b      	ldrh	r3, [r7, #24]
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	4623      	mov	r3, r4
 8001a80:	f7ff ff3b 	bl	80018fa <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y + height - 1, x + width - 1, y + height - 1, color);
 8001a84:	88ba      	ldrh	r2, [r7, #4]
 8001a86:	883b      	ldrh	r3, [r7, #0]
 8001a88:	4413      	add	r3, r2
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b299      	uxth	r1, r3
 8001a90:	88fa      	ldrh	r2, [r7, #6]
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	4413      	add	r3, r2
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29c      	uxth	r4, r3
 8001a9c:	88ba      	ldrh	r2, [r7, #4]
 8001a9e:	883b      	ldrh	r3, [r7, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	88f8      	ldrh	r0, [r7, #6]
 8001aaa:	8b3b      	ldrh	r3, [r7, #24]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	4622      	mov	r2, r4
 8001ab2:	f7ff ff22 	bl	80018fa <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y, x, y + height - 1, color);
 8001ab6:	88ba      	ldrh	r2, [r7, #4]
 8001ab8:	883b      	ldrh	r3, [r7, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29c      	uxth	r4, r3
 8001ac2:	88fa      	ldrh	r2, [r7, #6]
 8001ac4:	88b9      	ldrh	r1, [r7, #4]
 8001ac6:	88f8      	ldrh	r0, [r7, #6]
 8001ac8:	8b3b      	ldrh	r3, [r7, #24]
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	4623      	mov	r3, r4
 8001ace:	f7ff ff14 	bl	80018fa <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x + width - 1, y, x + width - 1, y + height - 1, color);
 8001ad2:	88fa      	ldrh	r2, [r7, #6]
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	3b01      	subs	r3, #1
 8001adc:	b298      	uxth	r0, r3
 8001ade:	88fa      	ldrh	r2, [r7, #6]
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29c      	uxth	r4, r3
 8001aea:	88ba      	ldrh	r2, [r7, #4]
 8001aec:	883b      	ldrh	r3, [r7, #0]
 8001aee:	4413      	add	r3, r2
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	88b9      	ldrh	r1, [r7, #4]
 8001af8:	8b3b      	ldrh	r3, [r7, #24]
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	4613      	mov	r3, r2
 8001afe:	4622      	mov	r2, r4
 8001b00:	f7ff fefb 	bl	80018fa <Manual_LCD_DrawLine>
 8001b04:	e000      	b.n	8001b08 <Manual_LCD_DrawRectangle+0xf2>
        return;
 8001b06:	bf00      	nop
}
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd90      	pop	{r4, r7, pc}
	...

08001b10 <Manual_LCD_FillRectangle>:

void Manual_LCD_FillRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4604      	mov	r4, r0
 8001b18:	4608      	mov	r0, r1
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4623      	mov	r3, r4
 8001b20:	80fb      	strh	r3, [r7, #6]
 8001b22:	4603      	mov	r3, r0
 8001b24:	80bb      	strh	r3, [r7, #4]
 8001b26:	460b      	mov	r3, r1
 8001b28:	807b      	strh	r3, [r7, #2]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 8001b2e:	88fb      	ldrh	r3, [r7, #6]
 8001b30:	2bef      	cmp	r3, #239	@ 0xef
 8001b32:	d855      	bhi.n	8001be0 <Manual_LCD_FillRectangle+0xd0>
 8001b34:	88bb      	ldrh	r3, [r7, #4]
 8001b36:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001b3a:	d251      	bcs.n	8001be0 <Manual_LCD_FillRectangle+0xd0>
        return;
    if ((x + width) > LCD_WIDTH)
 8001b3c:	88fa      	ldrh	r2, [r7, #6]
 8001b3e:	887b      	ldrh	r3, [r7, #2]
 8001b40:	4413      	add	r3, r2
 8001b42:	2bf0      	cmp	r3, #240	@ 0xf0
 8001b44:	dd03      	ble.n	8001b4e <Manual_LCD_FillRectangle+0x3e>
        width = LCD_WIDTH - x;
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001b4c:	807b      	strh	r3, [r7, #2]
    if ((y + height) > LCD_HEIGHT)
 8001b4e:	88ba      	ldrh	r2, [r7, #4]
 8001b50:	883b      	ldrh	r3, [r7, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001b58:	dd03      	ble.n	8001b62 <Manual_LCD_FillRectangle+0x52>
        height = LCD_HEIGHT - y;
 8001b5a:	88bb      	ldrh	r3, [r7, #4]
 8001b5c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001b60:	803b      	strh	r3, [r7, #0]

    LCD_Set_Address_Window(x, y, x + width - 1, y + height - 1);
 8001b62:	88fa      	ldrh	r2, [r7, #6]
 8001b64:	887b      	ldrh	r3, [r7, #2]
 8001b66:	4413      	add	r3, r2
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29c      	uxth	r4, r3
 8001b6e:	88ba      	ldrh	r2, [r7, #4]
 8001b70:	883b      	ldrh	r3, [r7, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	88b9      	ldrh	r1, [r7, #4]
 8001b7c:	88f8      	ldrh	r0, [r7, #6]
 8001b7e:	4622      	mov	r2, r4
 8001b80:	f7ff fcf8 	bl	8001574 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b8a:	4817      	ldr	r0, [pc, #92]	@ (8001be8 <Manual_LCD_FillRectangle+0xd8>)
 8001b8c:	f001 fc08 	bl	80033a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001b90:	2200      	movs	r2, #0
 8001b92:	2180      	movs	r1, #128	@ 0x80
 8001b94:	4814      	ldr	r0, [pc, #80]	@ (8001be8 <Manual_LCD_FillRectangle+0xd8>)
 8001b96:	f001 fc03 	bl	80033a0 <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 8001b9a:	8c3b      	ldrh	r3, [r7, #32]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	723b      	strb	r3, [r7, #8]
 8001ba4:	8c3b      	ldrh	r3, [r7, #32]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	e00a      	b.n	8001bc6 <Manual_LCD_FillRectangle+0xb6>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8001bb0:	f107 0108 	add.w	r1, r7, #8
 8001bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb8:	2202      	movs	r2, #2
 8001bba:	480c      	ldr	r0, [pc, #48]	@ (8001bec <Manual_LCD_FillRectangle+0xdc>)
 8001bbc:	f003 fe35 	bl	800582a <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	887b      	ldrh	r3, [r7, #2]
 8001bc8:	883a      	ldrh	r2, [r7, #0]
 8001bca:	fb02 f303 	mul.w	r3, r2, r3
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d3ed      	bcc.n	8001bb0 <Manual_LCD_FillRectangle+0xa0>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	2180      	movs	r1, #128	@ 0x80
 8001bd8:	4803      	ldr	r0, [pc, #12]	@ (8001be8 <Manual_LCD_FillRectangle+0xd8>)
 8001bda:	f001 fbe1 	bl	80033a0 <HAL_GPIO_WritePin>
 8001bde:	e000      	b.n	8001be2 <Manual_LCD_FillRectangle+0xd2>
        return;
 8001be0:	bf00      	nop
}
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd90      	pop	{r4, r7, pc}
 8001be8:	40020400 	.word	0x40020400
 8001bec:	200000d0 	.word	0x200000d0

08001bf0 <Manual_LCD_DrawChar>:
// A proper implementation would look up character data in a font table.
// Placeholder for font data - you need to define this
extern const unsigned char Font5x7[][5]; // Example: needs to be defined in font.c

void Manual_LCD_DrawChar(uint16_t x, uint16_t y, char c, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 8001bf0:	b590      	push	{r4, r7, lr}
 8001bf2:	b087      	sub	sp, #28
 8001bf4:	af02      	add	r7, sp, #8
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	4608      	mov	r0, r1
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4623      	mov	r3, r4
 8001c00:	80fb      	strh	r3, [r7, #6]
 8001c02:	4603      	mov	r3, r0
 8001c04:	80bb      	strh	r3, [r7, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	70fb      	strb	r3, [r7, #3]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	803b      	strh	r3, [r7, #0]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT || (x + 5 * size) > LCD_WIDTH || (y + 7 * size) > LCD_HEIGHT)
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	2bef      	cmp	r3, #239	@ 0xef
 8001c12:	f200 80d1 	bhi.w	8001db8 <Manual_LCD_DrawChar+0x1c8>
 8001c16:	88bb      	ldrh	r3, [r7, #4]
 8001c18:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001c1c:	f080 80cc 	bcs.w	8001db8 <Manual_LCD_DrawChar+0x1c8>
 8001c20:	88f9      	ldrh	r1, [r7, #6]
 8001c22:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001c26:	4613      	mov	r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001c30:	f300 80c2 	bgt.w	8001db8 <Manual_LCD_DrawChar+0x1c8>
 8001c34:	88b9      	ldrh	r1, [r7, #4]
 8001c36:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	1a9b      	subs	r3, r3, r2
 8001c40:	440b      	add	r3, r1
 8001c42:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001c46:	f300 80b7 	bgt.w	8001db8 <Manual_LCD_DrawChar+0x1c8>
    {
        return; // Character won't fit
    }

    if (c < ' ' || c > '~')
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	2b1f      	cmp	r3, #31
 8001c4e:	d902      	bls.n	8001c56 <Manual_LCD_DrawChar+0x66>
 8001c50:	78fb      	ldrb	r3, [r7, #3]
 8001c52:	2b7e      	cmp	r3, #126	@ 0x7e
 8001c54:	d901      	bls.n	8001c5a <Manual_LCD_DrawChar+0x6a>
        c = '?'; // Handle non-printable characters
 8001c56:	233f      	movs	r3, #63	@ 0x3f
 8001c58:	70fb      	strb	r3, [r7, #3]

    for (uint8_t i = 0; i < 5; i++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	e088      	b.n	8001d72 <Manual_LCD_DrawChar+0x182>
    { // Width of char
        uint8_t line = Font5x7[c - ' '][i];
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	f1a3 0220 	sub.w	r2, r3, #32
 8001c66:	7bf9      	ldrb	r1, [r7, #15]
 8001c68:	4855      	ldr	r0, [pc, #340]	@ (8001dc0 <Manual_LCD_DrawChar+0x1d0>)
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	4403      	add	r3, r0
 8001c72:	440b      	add	r3, r1
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	737b      	strb	r3, [r7, #13]
 8001c7c:	e073      	b.n	8001d66 <Manual_LCD_DrawChar+0x176>
        { // Height of char
            if (line & 0x01)
 8001c7e:	7bbb      	ldrb	r3, [r7, #14]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d034      	beq.n	8001cf2 <Manual_LCD_DrawChar+0x102>
            { // Check bit
                if (size == 1)
 8001c88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d10e      	bne.n	8001cae <Manual_LCD_DrawChar+0xbe>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, charColor);
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	88fb      	ldrh	r3, [r7, #6]
 8001c96:	4413      	add	r3, r2
 8001c98:	b298      	uxth	r0, r3
 8001c9a:	7b7b      	ldrb	r3, [r7, #13]
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	88bb      	ldrh	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	883a      	ldrh	r2, [r7, #0]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f7ff fe08 	bl	80018bc <Manual_LCD_DrawPixel>
 8001cac:	e055      	b.n	8001d5a <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, charColor);
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	fb12 f303 	smulbb	r3, r2, r3
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	b298      	uxth	r0, r3
 8001cc4:	7b7b      	ldrb	r3, [r7, #13]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	fb12 f303 	smulbb	r3, r2, r3
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	88bb      	ldrh	r3, [r7, #4]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	b299      	uxth	r1, r3
 8001cda:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ce4:	b29c      	uxth	r4, r3
 8001ce6:	883b      	ldrh	r3, [r7, #0]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	4623      	mov	r3, r4
 8001cec:	f7ff ff10 	bl	8001b10 <Manual_LCD_FillRectangle>
 8001cf0:	e033      	b.n	8001d5a <Manual_LCD_DrawChar+0x16a>
                }
            }
            else
            {
                if (size == 1)
 8001cf2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d10e      	bne.n	8001d18 <Manual_LCD_DrawChar+0x128>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, bgColor);
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	4413      	add	r3, r2
 8001d02:	b298      	uxth	r0, r3
 8001d04:	7b7b      	ldrb	r3, [r7, #13]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	88bb      	ldrh	r3, [r7, #4]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	8c3a      	ldrh	r2, [r7, #32]
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7ff fdd3 	bl	80018bc <Manual_LCD_DrawPixel>
 8001d16:	e020      	b.n	8001d5a <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, bgColor);
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	fb12 f303 	smulbb	r3, r2, r3
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	88fb      	ldrh	r3, [r7, #6]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b298      	uxth	r0, r3
 8001d2e:	7b7b      	ldrb	r3, [r7, #13]
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	fb12 f303 	smulbb	r3, r2, r3
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	88bb      	ldrh	r3, [r7, #4]
 8001d40:	4413      	add	r3, r2
 8001d42:	b299      	uxth	r1, r3
 8001d44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d4e:	b29c      	uxth	r4, r3
 8001d50:	8c3b      	ldrh	r3, [r7, #32]
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	4623      	mov	r3, r4
 8001d56:	f7ff fedb 	bl	8001b10 <Manual_LCD_FillRectangle>
                }
            }
            line >>= 1;
 8001d5a:	7bbb      	ldrb	r3, [r7, #14]
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 8001d60:	7b7b      	ldrb	r3, [r7, #13]
 8001d62:	3301      	adds	r3, #1
 8001d64:	737b      	strb	r3, [r7, #13]
 8001d66:	7b7b      	ldrb	r3, [r7, #13]
 8001d68:	2b06      	cmp	r3, #6
 8001d6a:	d988      	bls.n	8001c7e <Manual_LCD_DrawChar+0x8e>
    for (uint8_t i = 0; i < 5; i++)
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	f67f af73 	bls.w	8001c60 <Manual_LCD_DrawChar+0x70>
        }
    }
    // Draw a small gap for characters if size > 1 or if you want background fill for the gap
    if (size > 0)
 8001d7a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d01b      	beq.n	8001dba <Manual_LCD_DrawChar+0x1ca>
    { // Fill the column after the character (for spacing)
        Manual_LCD_FillRectangle(x + 5 * size, y, size, 7 * size, bgColor);
 8001d82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	0092      	lsls	r2, r2, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	4413      	add	r3, r2
 8001d94:	b298      	uxth	r0, r3
 8001d96:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	4619      	mov	r1, r3
 8001da4:	00c9      	lsls	r1, r1, #3
 8001da6:	1acb      	subs	r3, r1, r3
 8001da8:	b29c      	uxth	r4, r3
 8001daa:	88b9      	ldrh	r1, [r7, #4]
 8001dac:	8c3b      	ldrh	r3, [r7, #32]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	4623      	mov	r3, r4
 8001db2:	f7ff fead 	bl	8001b10 <Manual_LCD_FillRectangle>
 8001db6:	e000      	b.n	8001dba <Manual_LCD_DrawChar+0x1ca>
        return; // Character won't fit
 8001db8:	bf00      	nop
    }
}
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd90      	pop	{r4, r7, pc}
 8001dc0:	08006cc0 	.word	0x08006cc0

08001dc4 <Manual_LCD_DrawString>:

void Manual_LCD_DrawString(uint16_t x, uint16_t y, const char *str, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b087      	sub	sp, #28
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	60ba      	str	r2, [r7, #8]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4603      	mov	r3, r0
 8001dd0:	81fb      	strh	r3, [r7, #14]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	81bb      	strh	r3, [r7, #12]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	80fb      	strh	r3, [r7, #6]
    while (*str)
 8001dda:	e037      	b.n	8001e4c <Manual_LCD_DrawString+0x88>
    {
        Manual_LCD_DrawChar(x, y, *str, charColor, bgColor, size);
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	781a      	ldrb	r2, [r3, #0]
 8001de0:	88fc      	ldrh	r4, [r7, #6]
 8001de2:	89b9      	ldrh	r1, [r7, #12]
 8001de4:	89f8      	ldrh	r0, [r7, #14]
 8001de6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001dea:	9301      	str	r3, [sp, #4]
 8001dec:	8c3b      	ldrh	r3, [r7, #32]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	4623      	mov	r3, r4
 8001df2:	f7ff fefd 	bl	8001bf0 <Manual_LCD_DrawChar>
        x += 6 * size; // Advance X position (5 for char + 1 for spacing)
 8001df6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	0052      	lsls	r2, r2, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	89fb      	ldrh	r3, [r7, #14]
 8001e08:	4413      	add	r3, r2
 8001e0a:	81fb      	strh	r3, [r7, #14]
        if (x + 5 * size >= LCD_WIDTH)
 8001e0c:	89f9      	ldrh	r1, [r7, #14]
 8001e0e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001e12:	4613      	mov	r3, r2
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	4413      	add	r3, r2
 8001e18:	440b      	add	r3, r1
 8001e1a:	2bef      	cmp	r3, #239	@ 0xef
 8001e1c:	dd09      	ble.n	8001e32 <Manual_LCD_DrawString+0x6e>
        { // Simple wrap
            x = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	81fb      	strh	r3, [r7, #14]
            y += 8 * size; // Advance Y position
 8001e22:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	89bb      	ldrh	r3, [r7, #12]
 8001e2e:	4413      	add	r3, r2
 8001e30:	81bb      	strh	r3, [r7, #12]
        }
        if (y + 7 * size >= LCD_HEIGHT)
 8001e32:	89b9      	ldrh	r1, [r7, #12]
 8001e34:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	1a9b      	subs	r3, r3, r2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001e44:	da07      	bge.n	8001e56 <Manual_LCD_DrawString+0x92>
            break; // Out of screen
        str++;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
    while (*str)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1c3      	bne.n	8001ddc <Manual_LCD_DrawString+0x18>
    }
}
 8001e54:	e000      	b.n	8001e58 <Manual_LCD_DrawString+0x94>
            break; // Out of screen
 8001e56:	bf00      	nop
}
 8001e58:	bf00      	nop
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd90      	pop	{r4, r7, pc}

08001e60 <Manual_LCD_DrawLayout>:

void Manual_LCD_DrawLayout(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b09a      	sub	sp, #104	@ 0x68
 8001e64:	af02      	add	r7, sp, #8
    // Clear screen with blue background
    Manual_LCD_Clear(COLOR_BLUE);
 8001e66:	201f      	movs	r0, #31
 8001e68:	f7ff fcea 	bl	8001840 <Manual_LCD_Clear>

    uint16_t text_color = COLOR_WHITE;
 8001e6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e70:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint16_t box_fill_color = COLOR_BLACK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    uint16_t box_border_color = COLOR_WHITE;
 8001e7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e7e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    uint8_t font_size = 1;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
    uint8_t char_height = 7; // For 5x7 font at size 1
 8001e88:	2307      	movs	r3, #7
 8001e8a:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
    // uint8_t char_width_with_spacing = 6; // For 5x7 font at size 1

    // 1. Top Info Box: "Nhom: [nhom 01]"
    const char *info_text = "Nhom: [nhom 01]";
 8001e8e:	4bb8      	ldr	r3, [pc, #736]	@ (8002170 <Manual_LCD_DrawLayout+0x310>)
 8001e90:	657b      	str	r3, [r7, #84]	@ 0x54
    uint16_t info_text_x = MARGIN + 5;
 8001e92:	230f      	movs	r3, #15
 8001e94:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t info_text_y = INFO_BOX_Y + (INFO_BOX_H - char_height * font_size) / 2;
 8001e98:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001e9c:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8001ea0:	fb02 f303 	mul.w	r3, r2, r3
 8001ea4:	f1c3 031e 	rsb	r3, r3, #30
 8001ea8:	0fda      	lsrs	r2, r3, #31
 8001eaa:	4413      	add	r3, r2
 8001eac:	105b      	asrs	r3, r3, #1
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	330a      	adds	r3, #10
 8001eb2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

    Manual_LCD_FillRectangle(MARGIN, INFO_BOX_Y, INFO_BOX_W, INFO_BOX_H, box_fill_color);
 8001eb6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001eba:	9300      	str	r3, [sp, #0]
 8001ebc:	231e      	movs	r3, #30
 8001ebe:	2296      	movs	r2, #150	@ 0x96
 8001ec0:	210a      	movs	r1, #10
 8001ec2:	200a      	movs	r0, #10
 8001ec4:	f7ff fe24 	bl	8001b10 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(MARGIN, INFO_BOX_Y, INFO_BOX_W, INFO_BOX_H, box_border_color);
 8001ec8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	231e      	movs	r3, #30
 8001ed0:	2296      	movs	r2, #150	@ 0x96
 8001ed2:	210a      	movs	r1, #10
 8001ed4:	200a      	movs	r0, #10
 8001ed6:	f7ff fd9e 	bl	8001a16 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(info_text_x, info_text_y, info_text, text_color, box_fill_color, font_size);
 8001eda:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8001ede:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 8001ee2:	f8b7 0052 	ldrh.w	r0, [r7, #82]	@ 0x52
 8001ee6:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ef6:	f7ff ff65 	bl	8001dc4 <Manual_LCD_DrawString>

    // 2. Task Boxes Grid
    uint16_t start_y_tasks_row1 = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 8001efa:	233c      	movs	r3, #60	@ 0x3c
 8001efc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint16_t text_task_x_padding = 10; // Left padding for text inside task boxes
 8001f00:	230a      	movs	r3, #10
 8001f02:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    uint16_t text_task_y_offset = (TASK_BOX_H - char_height * font_size) / 2;
 8001f06:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001f0a:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	f1c3 0346 	rsb	r3, r3, #70	@ 0x46
 8001f16:	0fda      	lsrs	r2, r3, #31
 8001f18:	4413      	add	r3, r2
 8001f1a:	105b      	asrs	r3, r3, #1
 8001f1c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

    // Task 02-1 (Top-Left)
    uint16_t task1_x = MARGIN;
 8001f20:	230a      	movs	r3, #10
 8001f22:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    uint16_t task1_y = start_y_tasks_row1;
 8001f26:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001f2a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    const char *task1_text = "Task 02-1";
 8001f2e:	4b91      	ldr	r3, [pc, #580]	@ (8002174 <Manual_LCD_DrawLayout+0x314>)
 8001f30:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t text_task1_x = task1_x + text_task_x_padding;
 8001f32:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001f36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001f3a:	4413      	add	r3, r2
 8001f3c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint16_t text_task1_y = task1_y + text_task_y_offset;
 8001f3e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001f42:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001f46:	4413      	add	r3, r2
 8001f48:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    Manual_LCD_FillRectangle(task1_x, task1_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 8001f4a:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8001f4e:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8001f52:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2346      	movs	r3, #70	@ 0x46
 8001f5a:	2269      	movs	r2, #105	@ 0x69
 8001f5c:	f7ff fdd8 	bl	8001b10 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task1_x, task1_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 8001f60:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8001f64:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8001f68:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2346      	movs	r3, #70	@ 0x46
 8001f70:	2269      	movs	r2, #105	@ 0x69
 8001f72:	f7ff fd50 	bl	8001a16 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task1_x, text_task1_y, task1_text, text_color, box_fill_color, font_size);
 8001f76:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8001f7a:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8001f7c:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 8001f7e:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f8e:	f7ff ff19 	bl	8001dc4 <Manual_LCD_DrawString>

    // Task 02-2 (Top-Right)
    uint16_t task2_x = task1_x + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 8001f92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001f96:	3373      	adds	r3, #115	@ 0x73
 8001f98:	877b      	strh	r3, [r7, #58]	@ 0x3a
    uint16_t task2_y = start_y_tasks_row1;
 8001f9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001f9e:	873b      	strh	r3, [r7, #56]	@ 0x38
    const char *task2_text = "Task 02-2";
 8001fa0:	4b75      	ldr	r3, [pc, #468]	@ (8002178 <Manual_LCD_DrawLayout+0x318>)
 8001fa2:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t text_task2_x = task2_x + text_task_x_padding;
 8001fa4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8001fa6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001faa:	4413      	add	r3, r2
 8001fac:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t text_task2_y = task2_y + text_task_y_offset;
 8001fae:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001fb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001fb4:	4413      	add	r3, r2
 8001fb6:	863b      	strh	r3, [r7, #48]	@ 0x30
    Manual_LCD_FillRectangle(task2_x, task2_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 8001fb8:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8001fba:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 8001fbc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2346      	movs	r3, #70	@ 0x46
 8001fc4:	2269      	movs	r2, #105	@ 0x69
 8001fc6:	f7ff fda3 	bl	8001b10 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task2_x, task2_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 8001fca:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8001fcc:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 8001fce:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	2346      	movs	r3, #70	@ 0x46
 8001fd6:	2269      	movs	r2, #105	@ 0x69
 8001fd8:	f7ff fd1d 	bl	8001a16 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task2_x, text_task2_y, task2_text, text_color, box_fill_color, font_size);
 8001fdc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8001fe0:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8001fe2:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 8001fe4:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ff4:	f7ff fee6 	bl	8001dc4 <Manual_LCD_DrawString>

    // Second row of task boxes
    uint16_t start_y_tasks_row2 = start_y_tasks_row1 + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8001ff8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001ffc:	3350      	adds	r3, #80	@ 0x50
 8001ffe:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Task 02-3 (Bottom-Left)
    uint16_t task3_x = MARGIN;
 8002000:	230a      	movs	r3, #10
 8002002:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t task3_y = start_y_tasks_row2;
 8002004:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002006:	857b      	strh	r3, [r7, #42]	@ 0x2a
    const char *task3_text = "Task 02-3";
 8002008:	4b5c      	ldr	r3, [pc, #368]	@ (800217c <Manual_LCD_DrawLayout+0x31c>)
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t text_task3_x = task3_x + text_task_x_padding;
 800200c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800200e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002012:	4413      	add	r3, r2
 8002014:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t text_task3_y = task3_y + text_task_y_offset;
 8002016:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002018:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800201c:	4413      	add	r3, r2
 800201e:	843b      	strh	r3, [r7, #32]
    Manual_LCD_FillRectangle(task3_x, task3_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 8002020:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8002022:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 8002024:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2346      	movs	r3, #70	@ 0x46
 800202c:	2269      	movs	r2, #105	@ 0x69
 800202e:	f7ff fd6f 	bl	8001b10 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task3_x, task3_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 8002032:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8002034:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 8002036:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2346      	movs	r3, #70	@ 0x46
 800203e:	2269      	movs	r2, #105	@ 0x69
 8002040:	f7ff fce9 	bl	8001a16 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task3_x, text_task3_y, task3_text, text_color, box_fill_color, font_size);
 8002044:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002048:	8c39      	ldrh	r1, [r7, #32]
 800204a:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 800204c:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	4613      	mov	r3, r2
 800205a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800205c:	f7ff feb2 	bl	8001dc4 <Manual_LCD_DrawString>

    // Task 02-4 (Bottom-Right)
    uint16_t task4_x = task1_x + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 8002060:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002064:	3373      	adds	r3, #115	@ 0x73
 8002066:	83fb      	strh	r3, [r7, #30]
    uint16_t task4_y = start_y_tasks_row2;
 8002068:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800206a:	83bb      	strh	r3, [r7, #28]
    const char *task4_text = "Task 02-4";
 800206c:	4b44      	ldr	r3, [pc, #272]	@ (8002180 <Manual_LCD_DrawLayout+0x320>)
 800206e:	61bb      	str	r3, [r7, #24]
    uint16_t text_task4_x = task4_x + text_task_x_padding;
 8002070:	8bfa      	ldrh	r2, [r7, #30]
 8002072:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002076:	4413      	add	r3, r2
 8002078:	82fb      	strh	r3, [r7, #22]
    uint16_t text_task4_y = task4_y + text_task_y_offset;
 800207a:	8bba      	ldrh	r2, [r7, #28]
 800207c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002080:	4413      	add	r3, r2
 8002082:	82bb      	strh	r3, [r7, #20]
    Manual_LCD_FillRectangle(task4_x, task4_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 8002084:	8bb9      	ldrh	r1, [r7, #28]
 8002086:	8bf8      	ldrh	r0, [r7, #30]
 8002088:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2346      	movs	r3, #70	@ 0x46
 8002090:	2269      	movs	r2, #105	@ 0x69
 8002092:	f7ff fd3d 	bl	8001b10 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task4_x, task4_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 8002096:	8bb9      	ldrh	r1, [r7, #28]
 8002098:	8bf8      	ldrh	r0, [r7, #30]
 800209a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2346      	movs	r3, #70	@ 0x46
 80020a2:	2269      	movs	r2, #105	@ 0x69
 80020a4:	f7ff fcb7 	bl	8001a16 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task4_x, text_task4_y, task4_text, text_color, box_fill_color, font_size);
 80020a8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80020ac:	8ab9      	ldrh	r1, [r7, #20]
 80020ae:	8af8      	ldrh	r0, [r7, #22]
 80020b0:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	4613      	mov	r3, r2
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	f7ff fe80 	bl	8001dc4 <Manual_LCD_DrawString>

    // 3. Back Button
    const char *back_button_text = "<<Back";
 80020c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002184 <Manual_LCD_DrawLayout+0x324>)
 80020c6:	613b      	str	r3, [r7, #16]
    uint16_t back_button_text_len = strlen(back_button_text);
 80020c8:	6938      	ldr	r0, [r7, #16]
 80020ca:	f7fe f88b 	bl	80001e4 <strlen>
 80020ce:	4603      	mov	r3, r0
 80020d0:	81fb      	strh	r3, [r7, #14]
    uint16_t back_button_text_pixel_width = back_button_text_len * 6 * font_size; // 6 is char width with spacing for 5x7 font
 80020d2:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	89fa      	ldrh	r2, [r7, #14]
 80020da:	fb12 f303 	smulbb	r3, r2, r3
 80020de:	b29b      	uxth	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	0052      	lsls	r2, r2, #1
 80020e4:	4413      	add	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	81bb      	strh	r3, [r7, #12]

    uint16_t back_button_y = start_y_tasks_row2 + TASK_BOX_H + TASK_TO_BACK_BUTTON_SPACING;
 80020ea:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80020ec:	335a      	adds	r3, #90	@ 0x5a
 80020ee:	817b      	strh	r3, [r7, #10]
    uint16_t back_button_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 80020f0:	237d      	movs	r3, #125	@ 0x7d
 80020f2:	813b      	strh	r3, [r7, #8]
    uint16_t text_button_x = back_button_x + (BACK_BUTTON_W - back_button_text_pixel_width) / 2;
 80020f4:	89bb      	ldrh	r3, [r7, #12]
 80020f6:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 80020fa:	0fda      	lsrs	r2, r3, #31
 80020fc:	4413      	add	r3, r2
 80020fe:	105b      	asrs	r3, r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	893b      	ldrh	r3, [r7, #8]
 8002104:	4413      	add	r3, r2
 8002106:	80fb      	strh	r3, [r7, #6]
    uint16_t text_button_y = back_button_y + (BACK_BUTTON_H - char_height * font_size) / 2;
 8002108:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800210c:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	f1c3 032d 	rsb	r3, r3, #45	@ 0x2d
 8002118:	0fda      	lsrs	r2, r3, #31
 800211a:	4413      	add	r3, r2
 800211c:	105b      	asrs	r3, r3, #1
 800211e:	b29a      	uxth	r2, r3
 8002120:	897b      	ldrh	r3, [r7, #10]
 8002122:	4413      	add	r3, r2
 8002124:	80bb      	strh	r3, [r7, #4]

    Manual_LCD_FillRectangle(back_button_x, back_button_y, BACK_BUTTON_W, BACK_BUTTON_H, box_fill_color);
 8002126:	8979      	ldrh	r1, [r7, #10]
 8002128:	8938      	ldrh	r0, [r7, #8]
 800212a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800212e:	9300      	str	r3, [sp, #0]
 8002130:	232d      	movs	r3, #45	@ 0x2d
 8002132:	225a      	movs	r2, #90	@ 0x5a
 8002134:	f7ff fcec 	bl	8001b10 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(back_button_x, back_button_y, BACK_BUTTON_W, BACK_BUTTON_H, box_border_color);
 8002138:	8979      	ldrh	r1, [r7, #10]
 800213a:	8938      	ldrh	r0, [r7, #8]
 800213c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	232d      	movs	r3, #45	@ 0x2d
 8002144:	225a      	movs	r2, #90	@ 0x5a
 8002146:	f7ff fc66 	bl	8001a16 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_button_x, text_button_y, back_button_text, text_color, box_fill_color, font_size);
 800214a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800214e:	88b9      	ldrh	r1, [r7, #4]
 8002150:	88f8      	ldrh	r0, [r7, #6]
 8002152:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	4613      	mov	r3, r2
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	f7ff fe2f 	bl	8001dc4 <Manual_LCD_DrawString>
}
 8002166:	bf00      	nop
 8002168:	3760      	adds	r7, #96	@ 0x60
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	08006c74 	.word	0x08006c74
 8002174:	08006c84 	.word	0x08006c84
 8002178:	08006c90 	.word	0x08006c90
 800217c:	08006c9c 	.word	0x08006c9c
 8002180:	08006ca8 	.word	0x08006ca8
 8002184:	08006cb4 	.word	0x08006cb4

08002188 <Manual_LCD_UpdateInfoText>:

// New function to update the info text
void Manual_LCD_UpdateInfoText(const char *new_text)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af02      	add	r7, sp, #8
 800218e:	6078      	str	r0, [r7, #4]
    uint8_t font_size = 1;
 8002190:	2301      	movs	r3, #1
 8002192:	75fb      	strb	r3, [r7, #23]
    uint8_t char_height = 7; // For 5x7 font at size 1
 8002194:	2307      	movs	r3, #7
 8002196:	75bb      	strb	r3, [r7, #22]

    uint16_t text_color = COLOR_WHITE;     // Original text color from DrawLayout
 8002198:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800219c:	82bb      	strh	r3, [r7, #20]
    uint16_t box_fill_color = COLOR_BLACK; // Original box fill color from DrawLayout
 800219e:	2300      	movs	r3, #0
 80021a0:	827b      	strh	r3, [r7, #18]

    uint16_t info_text_x = MARGIN + 5;
 80021a2:	230f      	movs	r3, #15
 80021a4:	823b      	strh	r3, [r7, #16]
    uint16_t info_text_y = INFO_BOX_Y + (INFO_BOX_H - char_height * font_size) / 2;
 80021a6:	7dbb      	ldrb	r3, [r7, #22]
 80021a8:	7dfa      	ldrb	r2, [r7, #23]
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	f1c3 031e 	rsb	r3, r3, #30
 80021b2:	0fda      	lsrs	r2, r3, #31
 80021b4:	4413      	add	r3, r2
 80021b6:	105b      	asrs	r3, r3, #1
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	330a      	adds	r3, #10
 80021bc:	81fb      	strh	r3, [r7, #14]

    // Clear the inner part of the info box where text resides
    // The border is 1px, so we fill from x+1, y+1 with width-2, height-2
    Manual_LCD_FillRectangle(MARGIN + 1, INFO_BOX_Y + 1, INFO_BOX_W - 2, INFO_BOX_H - 2, box_fill_color);
 80021be:	8a7b      	ldrh	r3, [r7, #18]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	231c      	movs	r3, #28
 80021c4:	2294      	movs	r2, #148	@ 0x94
 80021c6:	210b      	movs	r1, #11
 80021c8:	200b      	movs	r0, #11
 80021ca:	f7ff fca1 	bl	8001b10 <Manual_LCD_FillRectangle>

    // Draw the new string with original text color and original box fill as background
    Manual_LCD_DrawString(info_text_x, info_text_y, new_text, text_color, box_fill_color, font_size);
 80021ce:	8aba      	ldrh	r2, [r7, #20]
 80021d0:	89f9      	ldrh	r1, [r7, #14]
 80021d2:	8a38      	ldrh	r0, [r7, #16]
 80021d4:	7dfb      	ldrb	r3, [r7, #23]
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	8a7b      	ldrh	r3, [r7, #18]
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	4613      	mov	r3, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	f7ff fdf0 	bl	8001dc4 <Manual_LCD_DrawString>
}
 80021e4:	bf00      	nop
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <Manual_LCD_RefillTaskBox>:

// New function to refill a task box and redraw its text
void Manual_LCD_RefillTaskBox(const char *task_name, uint16_t new_fill_color)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	@ 0x28
 80021f0:	af02      	add	r7, sp, #8
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
    uint16_t original_text_color = COLOR_WHITE;
 80021f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021fc:	82fb      	strh	r3, [r7, #22]
    uint16_t original_box_border_color = COLOR_WHITE;
 80021fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002202:	82bb      	strh	r3, [r7, #20]
    uint8_t font_size = 1;
 8002204:	2301      	movs	r3, #1
 8002206:	74fb      	strb	r3, [r7, #19]
    uint8_t char_height = 7; // For 5x7 font at size 1
 8002208:	2307      	movs	r3, #7
 800220a:	74bb      	strb	r3, [r7, #18]

    uint16_t text_task_x_padding = 10;
 800220c:	230a      	movs	r3, #10
 800220e:	823b      	strh	r3, [r7, #16]
    uint16_t text_task_y_offset = (TASK_BOX_H - char_height * font_size) / 2;
 8002210:	7cbb      	ldrb	r3, [r7, #18]
 8002212:	7cfa      	ldrb	r2, [r7, #19]
 8002214:	fb02 f303 	mul.w	r3, r2, r3
 8002218:	f1c3 0346 	rsb	r3, r3, #70	@ 0x46
 800221c:	0fda      	lsrs	r2, r3, #31
 800221e:	4413      	add	r3, r2
 8002220:	105b      	asrs	r3, r3, #1
 8002222:	81fb      	strh	r3, [r7, #14]

    uint16_t current_task_x = 0, current_task_y = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	83fb      	strh	r3, [r7, #30]
 8002228:	2300      	movs	r3, #0
 800222a:	83bb      	strh	r3, [r7, #28]
    uint16_t text_draw_x = 0, text_draw_y = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	81bb      	strh	r3, [r7, #12]
 8002230:	2300      	movs	r3, #0
 8002232:	817b      	strh	r3, [r7, #10]
    const char *original_task_text_content = "";
 8002234:	4b30      	ldr	r3, [pc, #192]	@ (80022f8 <Manual_LCD_RefillTaskBox+0x10c>)
 8002236:	61bb      	str	r3, [r7, #24]

    if (strcmp(task_name, "Task 02-1") == 0)
 8002238:	4930      	ldr	r1, [pc, #192]	@ (80022fc <Manual_LCD_RefillTaskBox+0x110>)
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7fd ffc8 	bl	80001d0 <strcmp>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d106      	bne.n	8002254 <Manual_LCD_RefillTaskBox+0x68>
    {
        current_task_x = MARGIN;
 8002246:	230a      	movs	r3, #10
 8002248:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 800224a:	233c      	movs	r3, #60	@ 0x3c
 800224c:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-1";
 800224e:	4b2b      	ldr	r3, [pc, #172]	@ (80022fc <Manual_LCD_RefillTaskBox+0x110>)
 8002250:	61bb      	str	r3, [r7, #24]
 8002252:	e028      	b.n	80022a6 <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-2") == 0)
 8002254:	492a      	ldr	r1, [pc, #168]	@ (8002300 <Manual_LCD_RefillTaskBox+0x114>)
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fd ffba 	bl	80001d0 <strcmp>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d106      	bne.n	8002270 <Manual_LCD_RefillTaskBox+0x84>
    {
        current_task_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 8002262:	237d      	movs	r3, #125	@ 0x7d
 8002264:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 8002266:	233c      	movs	r3, #60	@ 0x3c
 8002268:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-2";
 800226a:	4b25      	ldr	r3, [pc, #148]	@ (8002300 <Manual_LCD_RefillTaskBox+0x114>)
 800226c:	61bb      	str	r3, [r7, #24]
 800226e:	e01a      	b.n	80022a6 <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-3") == 0)
 8002270:	4924      	ldr	r1, [pc, #144]	@ (8002304 <Manual_LCD_RefillTaskBox+0x118>)
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fd ffac 	bl	80001d0 <strcmp>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d106      	bne.n	800228c <Manual_LCD_RefillTaskBox+0xa0>
    {
        current_task_x = MARGIN;
 800227e:	230a      	movs	r3, #10
 8002280:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8002282:	238c      	movs	r3, #140	@ 0x8c
 8002284:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-3";
 8002286:	4b1f      	ldr	r3, [pc, #124]	@ (8002304 <Manual_LCD_RefillTaskBox+0x118>)
 8002288:	61bb      	str	r3, [r7, #24]
 800228a:	e00c      	b.n	80022a6 <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-4") == 0)
 800228c:	491e      	ldr	r1, [pc, #120]	@ (8002308 <Manual_LCD_RefillTaskBox+0x11c>)
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7fd ff9e 	bl	80001d0 <strcmp>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d129      	bne.n	80022ee <Manual_LCD_RefillTaskBox+0x102>
    {
        current_task_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 800229a:	237d      	movs	r3, #125	@ 0x7d
 800229c:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 800229e:	238c      	movs	r3, #140	@ 0x8c
 80022a0:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-4";
 80022a2:	4b19      	ldr	r3, [pc, #100]	@ (8002308 <Manual_LCD_RefillTaskBox+0x11c>)
 80022a4:	61bb      	str	r3, [r7, #24]
    else
    {
        return; // Unknown task name, do nothing
    }

    text_draw_x = current_task_x + text_task_x_padding;
 80022a6:	8bfa      	ldrh	r2, [r7, #30]
 80022a8:	8a3b      	ldrh	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	81bb      	strh	r3, [r7, #12]
    text_draw_y = current_task_y + text_task_y_offset;
 80022ae:	8bba      	ldrh	r2, [r7, #28]
 80022b0:	89fb      	ldrh	r3, [r7, #14]
 80022b2:	4413      	add	r3, r2
 80022b4:	817b      	strh	r3, [r7, #10]

    // 1. Refill the entire task box with the new color
    Manual_LCD_FillRectangle(current_task_x, current_task_y, TASK_BOX_W_CALC, TASK_BOX_H, new_fill_color);
 80022b6:	8bb9      	ldrh	r1, [r7, #28]
 80022b8:	8bf8      	ldrh	r0, [r7, #30]
 80022ba:	887b      	ldrh	r3, [r7, #2]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	2346      	movs	r3, #70	@ 0x46
 80022c0:	2269      	movs	r2, #105	@ 0x69
 80022c2:	f7ff fc25 	bl	8001b10 <Manual_LCD_FillRectangle>

    // 2. Redraw the border
    Manual_LCD_DrawRectangle(current_task_x, current_task_y, TASK_BOX_W_CALC, TASK_BOX_H, original_box_border_color);
 80022c6:	8bb9      	ldrh	r1, [r7, #28]
 80022c8:	8bf8      	ldrh	r0, [r7, #30]
 80022ca:	8abb      	ldrh	r3, [r7, #20]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2346      	movs	r3, #70	@ 0x46
 80022d0:	2269      	movs	r2, #105	@ 0x69
 80022d2:	f7ff fba0 	bl	8001a16 <Manual_LCD_DrawRectangle>

    // 3. Redraw the original text using the original text color and the new_fill_color as background
    Manual_LCD_DrawString(text_draw_x, text_draw_y, original_task_text_content, original_text_color, new_fill_color, font_size);
 80022d6:	8afa      	ldrh	r2, [r7, #22]
 80022d8:	8979      	ldrh	r1, [r7, #10]
 80022da:	89b8      	ldrh	r0, [r7, #12]
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	f7ff fd6c 	bl	8001dc4 <Manual_LCD_DrawString>
 80022ec:	e000      	b.n	80022f0 <Manual_LCD_RefillTaskBox+0x104>
        return; // Unknown task name, do nothing
 80022ee:	bf00      	nop
 80022f0:	3720      	adds	r7, #32
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	08006cbc 	.word	0x08006cbc
 80022fc:	08006c84 	.word	0x08006c84
 8002300:	08006c90 	.word	0x08006c90
 8002304:	08006c9c 	.word	0x08006c9c
 8002308:	08006ca8 	.word	0x08006ca8

0800230c <TP_Read_ADC_Raw>:
Coordinate CalScreenSample[3]; // Raw ADC values from touch panel for calibration points

// Low-level SPI communication for touch
// Sends 1 byte command, receives 2 bytes data (12-bit ADC value)
static uint16_t TP_Read_ADC_Raw(uint8_t cmd)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_byte = cmd;
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buffer[2] = {0, 0};
 800231a:	2300      	movs	r3, #0
 800231c:	813b      	strh	r3, [r7, #8]
    uint16_t adc_val = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	81fb      	strh	r3, [r7, #14]

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET); // Select touch controller
 8002322:	2200      	movs	r2, #0
 8002324:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002328:	4815      	ldr	r0, [pc, #84]	@ (8002380 <TP_Read_ADC_Raw+0x74>)
 800232a:	f001 f839 	bl	80033a0 <HAL_GPIO_WritePin>

    // Send command byte
    HAL_SPI_Transmit(g_hspi_touch_ptr, &tx_byte, 1, HAL_MAX_DELAY);
 800232e:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <TP_Read_ADC_Raw+0x78>)
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	f107 010d 	add.w	r1, r7, #13
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	2201      	movs	r2, #1
 800233c:	f003 fa75 	bl	800582a <HAL_SPI_Transmit>

    // Receive 2 data bytes. Some controllers might need dummy clocks before data is valid.
    // For XPT2046/ADS7846, data usually follows directly.
    HAL_SPI_Receive(g_hspi_touch_ptr, rx_buffer, 2, HAL_MAX_DELAY);
 8002340:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <TP_Read_ADC_Raw+0x78>)
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	f107 0108 	add.w	r1, r7, #8
 8002348:	f04f 33ff 	mov.w	r3, #4294967295
 800234c:	2202      	movs	r2, #2
 800234e:	f003 fbb0 	bl	8005ab2 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect
 8002352:	2201      	movs	r2, #1
 8002354:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002358:	4809      	ldr	r0, [pc, #36]	@ (8002380 <TP_Read_ADC_Raw+0x74>)
 800235a:	f001 f821 	bl	80033a0 <HAL_GPIO_WritePin>

    adc_val = (rx_buffer[0] << 8) | rx_buffer[1];
 800235e:	7a3b      	ldrb	r3, [r7, #8]
 8002360:	b21b      	sxth	r3, r3
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	b21a      	sxth	r2, r3
 8002366:	7a7b      	ldrb	r3, [r7, #9]
 8002368:	b21b      	sxth	r3, r3
 800236a:	4313      	orrs	r3, r2
 800236c:	b21b      	sxth	r3, r3
 800236e:	81fb      	strh	r3, [r7, #14]
    adc_val >>= 3; // Keep the most significant 12 bits (XPT2046 specific, D0 is at bit 3 of second byte)
 8002370:	89fb      	ldrh	r3, [r7, #14]
 8002372:	08db      	lsrs	r3, r3, #3
 8002374:	81fb      	strh	r3, [r7, #14]
                   // Original code used >>4, which might be for a different ADC alignment or resolution.
                   // If raw values are consistently too low or high, this shift might need adjustment.
    return adc_val;
 8002376:	89fb      	ldrh	r3, [r7, #14]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40020000 	.word	0x40020000
 8002384:	20000128 	.word	0x20000128

08002388 <Manual_Touch_Init>:

void Manual_Touch_Init(SPI_HandleTypeDef *hspi_touch)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
    g_hspi_touch_ptr = hspi_touch;
 8002390:	4a06      	ldr	r2, [pc, #24]	@ (80023ac <Manual_Touch_Init+0x24>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
    // GPIOs for TP_CS (PA9) and TP_IRQ (PB4) are assumed to be initialized
    // in main.c's MX_GPIO_Init() as Output PP and Input Pull-up respectively.
    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect touch controller initially
 8002396:	2201      	movs	r2, #1
 8002398:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800239c:	4804      	ldr	r0, [pc, #16]	@ (80023b0 <Manual_Touch_Init+0x28>)
 800239e:	f000 ffff 	bl	80033a0 <HAL_GPIO_WritePin>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000128 	.word	0x20000128
 80023b0:	40020000 	.word	0x40020000

080023b4 <Manual_Touch_Pressed>:

uint8_t Manual_Touch_Pressed(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
    // TP_IRQ_Pin is low when pressed (assuming pull-up resistor is enabled)
    return (HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == GPIO_PIN_RESET);
 80023b8:	2110      	movs	r1, #16
 80023ba:	4805      	ldr	r0, [pc, #20]	@ (80023d0 <Manual_Touch_Pressed+0x1c>)
 80023bc:	f000 ffd8 	bl	8003370 <HAL_GPIO_ReadPin>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	bf0c      	ite	eq
 80023c6:	2301      	moveq	r3, #1
 80023c8:	2300      	movne	r3, #0
 80023ca:	b2db      	uxtb	r3, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40020400 	.word	0x40020400

080023d4 <Manual_Touch_GetRawPoint>:

uint8_t Manual_Touch_GetRawPoint(Coordinate *rawPoint)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b095      	sub	sp, #84	@ 0x54
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
    if (!Manual_Touch_Pressed())
 80023dc:	f7ff ffea 	bl	80023b4 <Manual_Touch_Pressed>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <Manual_Touch_GetRawPoint+0x16>
    {
        return 0; // Not pressed
 80023e6:	2300      	movs	r3, #0
 80023e8:	e1d0      	b.n	800278c <Manual_Touch_GetRawPoint+0x3b8>
    uint16_t x_samples[TOUCH_AVG_SAMPLES];
    uint16_t y_samples[TOUCH_AVG_SAMPLES];
    uint8_t i;

    // Read all X samples first
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80023f0:	e03e      	b.n	8002470 <Manual_Touch_GetRawPoint+0x9c>
    {
        if (!Manual_Touch_Pressed() && i >= 1)
 80023f2:	f7ff ffdf 	bl	80023b4 <Manual_Touch_Pressed>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d128      	bne.n	800244e <Manual_Touch_GetRawPoint+0x7a>
 80023fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002400:	2b00      	cmp	r3, #0
 8002402:	d024      	beq.n	800244e <Manual_Touch_GetRawPoint+0x7a>
        { // Check if pen lifted after at least one sample
            // If pen lifted early, try to use what we have if enough samples, or fail
            if (i < 3)
 8002404:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002408:	2b02      	cmp	r3, #2
 800240a:	d801      	bhi.n	8002410 <Manual_Touch_GetRawPoint+0x3c>
                return 0; // Not enough samples for even one average
 800240c:	2300      	movs	r3, #0
 800240e:	e1bd      	b.n	800278c <Manual_Touch_GetRawPoint+0x3b8>
            // Fill remaining samples with the last good one to avoid distorting average too much
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 8002410:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002414:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002418:	e014      	b.n	8002444 <Manual_Touch_GetRawPoint+0x70>
            {
                x_samples[j] = x_samples[i - 1];
 800241a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800241e:	3b01      	subs	r3, #1
 8002420:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	3350      	adds	r3, #80	@ 0x50
 8002428:	443b      	add	r3, r7
 800242a:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800242e:	0053      	lsls	r3, r2, #1
 8002430:	3350      	adds	r3, #80	@ 0x50
 8002432:	443b      	add	r3, r7
 8002434:	460a      	mov	r2, r1
 8002436:	f823 2c24 	strh.w	r2, [r3, #-36]
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 800243a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800243e:	3301      	adds	r3, #1
 8002440:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002444:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002448:	2b08      	cmp	r3, #8
 800244a:	d9e6      	bls.n	800241a <Manual_Touch_GetRawPoint+0x46>
            }
            break; // Exit X sampling loop
 800244c:	e014      	b.n	8002478 <Manual_Touch_GetRawPoint+0xa4>
        }
        x_samples[i] = TP_Read_ADC_Raw(TP_CMD_READ_X);
 800244e:	f897 404f 	ldrb.w	r4, [r7, #79]	@ 0x4f
 8002452:	20d0      	movs	r0, #208	@ 0xd0
 8002454:	f7ff ff5a 	bl	800230c <TP_Read_ADC_Raw>
 8002458:	4603      	mov	r3, r0
 800245a:	461a      	mov	r2, r3
 800245c:	0063      	lsls	r3, r4, #1
 800245e:	3350      	adds	r3, #80	@ 0x50
 8002460:	443b      	add	r3, r7
 8002462:	f823 2c24 	strh.w	r2, [r3, #-36]
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 8002466:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800246a:	3301      	adds	r3, #1
 800246c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002470:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002474:	2b08      	cmp	r3, #8
 8002476:	d9bc      	bls.n	80023f2 <Manual_Touch_GetRawPoint+0x1e>
        // HAL_Delay(1); // Increased delay slightly
    }

    // Read all Y samples
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 8002478:	2300      	movs	r3, #0
 800247a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800247e:	e03e      	b.n	80024fe <Manual_Touch_GetRawPoint+0x12a>
    {
        if (!Manual_Touch_Pressed() && i >= 1)
 8002480:	f7ff ff98 	bl	80023b4 <Manual_Touch_Pressed>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d128      	bne.n	80024dc <Manual_Touch_GetRawPoint+0x108>
 800248a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800248e:	2b00      	cmp	r3, #0
 8002490:	d024      	beq.n	80024dc <Manual_Touch_GetRawPoint+0x108>
        {
            if (i < 3)
 8002492:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002496:	2b02      	cmp	r3, #2
 8002498:	d801      	bhi.n	800249e <Manual_Touch_GetRawPoint+0xca>
                return 0;
 800249a:	2300      	movs	r3, #0
 800249c:	e176      	b.n	800278c <Manual_Touch_GetRawPoint+0x3b8>
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 800249e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80024a2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80024a6:	e014      	b.n	80024d2 <Manual_Touch_GetRawPoint+0xfe>
            {
                y_samples[j] = y_samples[i - 1];
 80024a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80024ac:	3b01      	subs	r3, #1
 80024ae:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	3350      	adds	r3, #80	@ 0x50
 80024b6:	443b      	add	r3, r7
 80024b8:	f833 1c38 	ldrh.w	r1, [r3, #-56]
 80024bc:	0053      	lsls	r3, r2, #1
 80024be:	3350      	adds	r3, #80	@ 0x50
 80024c0:	443b      	add	r3, r7
 80024c2:	460a      	mov	r2, r1
 80024c4:	f823 2c38 	strh.w	r2, [r3, #-56]
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 80024c8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024cc:	3301      	adds	r3, #1
 80024ce:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80024d2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d9e6      	bls.n	80024a8 <Manual_Touch_GetRawPoint+0xd4>
            }
            break; // Exit Y sampling loop
 80024da:	e014      	b.n	8002506 <Manual_Touch_GetRawPoint+0x132>
        }
        y_samples[i] = TP_Read_ADC_Raw(TP_CMD_READ_Y);
 80024dc:	f897 404f 	ldrb.w	r4, [r7, #79]	@ 0x4f
 80024e0:	2090      	movs	r0, #144	@ 0x90
 80024e2:	f7ff ff13 	bl	800230c <TP_Read_ADC_Raw>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	0063      	lsls	r3, r4, #1
 80024ec:	3350      	adds	r3, #80	@ 0x50
 80024ee:	443b      	add	r3, r7
 80024f0:	f823 2c38 	strh.w	r2, [r3, #-56]
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 80024f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80024f8:	3301      	adds	r3, #1
 80024fa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80024fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002502:	2b08      	cmp	r3, #8
 8002504:	d9bc      	bls.n	8002480 <Manual_Touch_GetRawPoint+0xac>
        // HAL_Delay(2); // Increased delay slightly
    }

    // Averaging and filtering logic from original code
    uint16_t avg_x[3], avg_y[3];
    avg_x[0] = (x_samples[0] + x_samples[1] + x_samples[2]) / 3;
 8002506:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002508:	461a      	mov	r2, r3
 800250a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800250c:	4413      	add	r3, r2
 800250e:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8002510:	4413      	add	r3, r2
 8002512:	4aa0      	ldr	r2, [pc, #640]	@ (8002794 <Manual_Touch_GetRawPoint+0x3c0>)
 8002514:	fb82 1203 	smull	r1, r2, r2, r3
 8002518:	17db      	asrs	r3, r3, #31
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	b29b      	uxth	r3, r3
 800251e:	823b      	strh	r3, [r7, #16]
    avg_x[1] = (x_samples[3] + x_samples[4] + x_samples[5]) / 3;
 8002520:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002522:	461a      	mov	r2, r3
 8002524:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002526:	4413      	add	r3, r2
 8002528:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800252a:	4413      	add	r3, r2
 800252c:	4a99      	ldr	r2, [pc, #612]	@ (8002794 <Manual_Touch_GetRawPoint+0x3c0>)
 800252e:	fb82 1203 	smull	r1, r2, r2, r3
 8002532:	17db      	asrs	r3, r3, #31
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	b29b      	uxth	r3, r3
 8002538:	827b      	strh	r3, [r7, #18]
    avg_x[2] = (x_samples[6] + x_samples[7] + x_samples[8]) / 3;
 800253a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800253c:	461a      	mov	r2, r3
 800253e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002540:	4413      	add	r3, r2
 8002542:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002544:	4413      	add	r3, r2
 8002546:	4a93      	ldr	r2, [pc, #588]	@ (8002794 <Manual_Touch_GetRawPoint+0x3c0>)
 8002548:	fb82 1203 	smull	r1, r2, r2, r3
 800254c:	17db      	asrs	r3, r3, #31
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	b29b      	uxth	r3, r3
 8002552:	82bb      	strh	r3, [r7, #20]

    avg_y[0] = (y_samples[0] + y_samples[1] + y_samples[2]) / 3;
 8002554:	8b3b      	ldrh	r3, [r7, #24]
 8002556:	461a      	mov	r2, r3
 8002558:	8b7b      	ldrh	r3, [r7, #26]
 800255a:	4413      	add	r3, r2
 800255c:	8bba      	ldrh	r2, [r7, #28]
 800255e:	4413      	add	r3, r2
 8002560:	4a8c      	ldr	r2, [pc, #560]	@ (8002794 <Manual_Touch_GetRawPoint+0x3c0>)
 8002562:	fb82 1203 	smull	r1, r2, r2, r3
 8002566:	17db      	asrs	r3, r3, #31
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	b29b      	uxth	r3, r3
 800256c:	813b      	strh	r3, [r7, #8]
    avg_y[1] = (y_samples[3] + y_samples[4] + y_samples[5]) / 3;
 800256e:	8bfb      	ldrh	r3, [r7, #30]
 8002570:	461a      	mov	r2, r3
 8002572:	8c3b      	ldrh	r3, [r7, #32]
 8002574:	4413      	add	r3, r2
 8002576:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002578:	4413      	add	r3, r2
 800257a:	4a86      	ldr	r2, [pc, #536]	@ (8002794 <Manual_Touch_GetRawPoint+0x3c0>)
 800257c:	fb82 1203 	smull	r1, r2, r2, r3
 8002580:	17db      	asrs	r3, r3, #31
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	b29b      	uxth	r3, r3
 8002586:	817b      	strh	r3, [r7, #10]
    avg_y[2] = (y_samples[6] + y_samples[7] + y_samples[8]) / 3;
 8002588:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800258a:	461a      	mov	r2, r3
 800258c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800258e:	4413      	add	r3, r2
 8002590:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002592:	4413      	add	r3, r2
 8002594:	4a7f      	ldr	r2, [pc, #508]	@ (8002794 <Manual_Touch_GetRawPoint+0x3c0>)
 8002596:	fb82 1203 	smull	r1, r2, r2, r3
 800259a:	17db      	asrs	r3, r3, #31
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	b29b      	uxth	r3, r3
 80025a0:	81bb      	strh	r3, [r7, #12]

    int16_t m0x = avg_x[0] > avg_x[1] ? avg_x[0] - avg_x[1] : avg_x[1] - avg_x[0];
 80025a2:	8a3a      	ldrh	r2, [r7, #16]
 80025a4:	8a7b      	ldrh	r3, [r7, #18]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d905      	bls.n	80025b6 <Manual_Touch_GetRawPoint+0x1e2>
 80025aa:	8a3a      	ldrh	r2, [r7, #16]
 80025ac:	8a7b      	ldrh	r3, [r7, #18]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	b21b      	sxth	r3, r3
 80025b4:	e004      	b.n	80025c0 <Manual_Touch_GetRawPoint+0x1ec>
 80025b6:	8a7a      	ldrh	r2, [r7, #18]
 80025b8:	8a3b      	ldrh	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	b29b      	uxth	r3, r3
 80025be:	b21b      	sxth	r3, r3
 80025c0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    int16_t m1x = avg_x[1] > avg_x[2] ? avg_x[1] - avg_x[2] : avg_x[2] - avg_x[1];
 80025c4:	8a7a      	ldrh	r2, [r7, #18]
 80025c6:	8abb      	ldrh	r3, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d905      	bls.n	80025d8 <Manual_Touch_GetRawPoint+0x204>
 80025cc:	8a7a      	ldrh	r2, [r7, #18]
 80025ce:	8abb      	ldrh	r3, [r7, #20]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	b21b      	sxth	r3, r3
 80025d6:	e004      	b.n	80025e2 <Manual_Touch_GetRawPoint+0x20e>
 80025d8:	8aba      	ldrh	r2, [r7, #20]
 80025da:	8a7b      	ldrh	r3, [r7, #18]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	b29b      	uxth	r3, r3
 80025e0:	b21b      	sxth	r3, r3
 80025e2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    int16_t m2x = avg_x[2] > avg_x[0] ? avg_x[2] - avg_x[0] : avg_x[0] - avg_x[2];
 80025e6:	8aba      	ldrh	r2, [r7, #20]
 80025e8:	8a3b      	ldrh	r3, [r7, #16]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d905      	bls.n	80025fa <Manual_Touch_GetRawPoint+0x226>
 80025ee:	8aba      	ldrh	r2, [r7, #20]
 80025f0:	8a3b      	ldrh	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	b21b      	sxth	r3, r3
 80025f8:	e004      	b.n	8002604 <Manual_Touch_GetRawPoint+0x230>
 80025fa:	8a3a      	ldrh	r2, [r7, #16]
 80025fc:	8abb      	ldrh	r3, [r7, #20]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	b29b      	uxth	r3, r3
 8002602:	b21b      	sxth	r3, r3
 8002604:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    if (m0x > TOUCH_RAW_THRESHOLD && m1x > TOUCH_RAW_THRESHOLD && m2x > TOUCH_RAW_THRESHOLD)
 8002608:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800260c:	2b23      	cmp	r3, #35	@ 0x23
 800260e:	dd09      	ble.n	8002624 <Manual_Touch_GetRawPoint+0x250>
 8002610:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8002614:	2b23      	cmp	r3, #35	@ 0x23
 8002616:	dd05      	ble.n	8002624 <Manual_Touch_GetRawPoint+0x250>
 8002618:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 800261c:	2b23      	cmp	r3, #35	@ 0x23
 800261e:	dd01      	ble.n	8002624 <Manual_Touch_GetRawPoint+0x250>
        return 0; // Unstable X
 8002620:	2300      	movs	r3, #0
 8002622:	e0b3      	b.n	800278c <Manual_Touch_GetRawPoint+0x3b8>

    if (m0x < m1x)
 8002624:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8002628:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800262c:	429a      	cmp	r2, r3
 800262e:	da19      	bge.n	8002664 <Manual_Touch_GetRawPoint+0x290>
        rawPoint->x = (m2x < m0x) ? (avg_x[0] + avg_x[2]) / 2 : (avg_x[0] + avg_x[1]) / 2;
 8002630:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8002634:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002638:	429a      	cmp	r2, r3
 800263a:	da08      	bge.n	800264e <Manual_Touch_GetRawPoint+0x27a>
 800263c:	8a3b      	ldrh	r3, [r7, #16]
 800263e:	461a      	mov	r2, r3
 8002640:	8abb      	ldrh	r3, [r7, #20]
 8002642:	4413      	add	r3, r2
 8002644:	0fda      	lsrs	r2, r3, #31
 8002646:	4413      	add	r3, r2
 8002648:	105b      	asrs	r3, r3, #1
 800264a:	b29b      	uxth	r3, r3
 800264c:	e007      	b.n	800265e <Manual_Touch_GetRawPoint+0x28a>
 800264e:	8a3b      	ldrh	r3, [r7, #16]
 8002650:	461a      	mov	r2, r3
 8002652:	8a7b      	ldrh	r3, [r7, #18]
 8002654:	4413      	add	r3, r2
 8002656:	0fda      	lsrs	r2, r3, #31
 8002658:	4413      	add	r3, r2
 800265a:	105b      	asrs	r3, r3, #1
 800265c:	b29b      	uxth	r3, r3
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	8013      	strh	r3, [r2, #0]
 8002662:	e018      	b.n	8002696 <Manual_Touch_GetRawPoint+0x2c2>
    else
        rawPoint->x = (m2x < m1x) ? (avg_x[0] + avg_x[2]) / 2 : (avg_x[1] + avg_x[2]) / 2;
 8002664:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8002668:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800266c:	429a      	cmp	r2, r3
 800266e:	da08      	bge.n	8002682 <Manual_Touch_GetRawPoint+0x2ae>
 8002670:	8a3b      	ldrh	r3, [r7, #16]
 8002672:	461a      	mov	r2, r3
 8002674:	8abb      	ldrh	r3, [r7, #20]
 8002676:	4413      	add	r3, r2
 8002678:	0fda      	lsrs	r2, r3, #31
 800267a:	4413      	add	r3, r2
 800267c:	105b      	asrs	r3, r3, #1
 800267e:	b29b      	uxth	r3, r3
 8002680:	e007      	b.n	8002692 <Manual_Touch_GetRawPoint+0x2be>
 8002682:	8a7b      	ldrh	r3, [r7, #18]
 8002684:	461a      	mov	r2, r3
 8002686:	8abb      	ldrh	r3, [r7, #20]
 8002688:	4413      	add	r3, r2
 800268a:	0fda      	lsrs	r2, r3, #31
 800268c:	4413      	add	r3, r2
 800268e:	105b      	asrs	r3, r3, #1
 8002690:	b29b      	uxth	r3, r3
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	8013      	strh	r3, [r2, #0]

    int16_t m0y = avg_y[0] > avg_y[1] ? avg_y[0] - avg_y[1] : avg_y[1] - avg_y[0];
 8002696:	893a      	ldrh	r2, [r7, #8]
 8002698:	897b      	ldrh	r3, [r7, #10]
 800269a:	429a      	cmp	r2, r3
 800269c:	d905      	bls.n	80026aa <Manual_Touch_GetRawPoint+0x2d6>
 800269e:	893a      	ldrh	r2, [r7, #8]
 80026a0:	897b      	ldrh	r3, [r7, #10]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	b21b      	sxth	r3, r3
 80026a8:	e004      	b.n	80026b4 <Manual_Touch_GetRawPoint+0x2e0>
 80026aa:	897a      	ldrh	r2, [r7, #10]
 80026ac:	893b      	ldrh	r3, [r7, #8]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	b21b      	sxth	r3, r3
 80026b4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    int16_t m1y = avg_y[1] > avg_y[2] ? avg_y[1] - avg_y[2] : avg_y[2] - avg_y[1];
 80026b8:	897a      	ldrh	r2, [r7, #10]
 80026ba:	89bb      	ldrh	r3, [r7, #12]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d905      	bls.n	80026cc <Manual_Touch_GetRawPoint+0x2f8>
 80026c0:	897a      	ldrh	r2, [r7, #10]
 80026c2:	89bb      	ldrh	r3, [r7, #12]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	b21b      	sxth	r3, r3
 80026ca:	e004      	b.n	80026d6 <Manual_Touch_GetRawPoint+0x302>
 80026cc:	89ba      	ldrh	r2, [r7, #12]
 80026ce:	897b      	ldrh	r3, [r7, #10]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	b21b      	sxth	r3, r3
 80026d6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t m2y = avg_y[2] > avg_y[0] ? avg_y[2] - avg_y[0] : avg_y[0] - avg_y[2];
 80026da:	89ba      	ldrh	r2, [r7, #12]
 80026dc:	893b      	ldrh	r3, [r7, #8]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d905      	bls.n	80026ee <Manual_Touch_GetRawPoint+0x31a>
 80026e2:	89ba      	ldrh	r2, [r7, #12]
 80026e4:	893b      	ldrh	r3, [r7, #8]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	b21b      	sxth	r3, r3
 80026ec:	e004      	b.n	80026f8 <Manual_Touch_GetRawPoint+0x324>
 80026ee:	893a      	ldrh	r2, [r7, #8]
 80026f0:	89bb      	ldrh	r3, [r7, #12]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	b21b      	sxth	r3, r3
 80026f8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    if (m0y > TOUCH_RAW_THRESHOLD && m1y > TOUCH_RAW_THRESHOLD && m2y > TOUCH_RAW_THRESHOLD)
 80026fc:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8002700:	2b23      	cmp	r3, #35	@ 0x23
 8002702:	dd09      	ble.n	8002718 <Manual_Touch_GetRawPoint+0x344>
 8002704:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8002708:	2b23      	cmp	r3, #35	@ 0x23
 800270a:	dd05      	ble.n	8002718 <Manual_Touch_GetRawPoint+0x344>
 800270c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8002710:	2b23      	cmp	r3, #35	@ 0x23
 8002712:	dd01      	ble.n	8002718 <Manual_Touch_GetRawPoint+0x344>
        return 0; // Unstable Y
 8002714:	2300      	movs	r3, #0
 8002716:	e039      	b.n	800278c <Manual_Touch_GetRawPoint+0x3b8>

    if (m0y < m1y)
 8002718:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 800271c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8002720:	429a      	cmp	r2, r3
 8002722:	da19      	bge.n	8002758 <Manual_Touch_GetRawPoint+0x384>
        rawPoint->y = (m2y < m0y) ? (avg_y[0] + avg_y[2]) / 2 : (avg_y[0] + avg_y[1]) / 2;
 8002724:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8002728:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800272c:	429a      	cmp	r2, r3
 800272e:	da08      	bge.n	8002742 <Manual_Touch_GetRawPoint+0x36e>
 8002730:	893b      	ldrh	r3, [r7, #8]
 8002732:	461a      	mov	r2, r3
 8002734:	89bb      	ldrh	r3, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	0fda      	lsrs	r2, r3, #31
 800273a:	4413      	add	r3, r2
 800273c:	105b      	asrs	r3, r3, #1
 800273e:	b29b      	uxth	r3, r3
 8002740:	e007      	b.n	8002752 <Manual_Touch_GetRawPoint+0x37e>
 8002742:	893b      	ldrh	r3, [r7, #8]
 8002744:	461a      	mov	r2, r3
 8002746:	897b      	ldrh	r3, [r7, #10]
 8002748:	4413      	add	r3, r2
 800274a:	0fda      	lsrs	r2, r3, #31
 800274c:	4413      	add	r3, r2
 800274e:	105b      	asrs	r3, r3, #1
 8002750:	b29b      	uxth	r3, r3
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	8053      	strh	r3, [r2, #2]
 8002756:	e018      	b.n	800278a <Manual_Touch_GetRawPoint+0x3b6>
    else
        rawPoint->y = (m2y < m1y) ? (avg_y[0] + avg_y[2]) / 2 : (avg_y[1] + avg_y[2]) / 2;
 8002758:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 800275c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8002760:	429a      	cmp	r2, r3
 8002762:	da08      	bge.n	8002776 <Manual_Touch_GetRawPoint+0x3a2>
 8002764:	893b      	ldrh	r3, [r7, #8]
 8002766:	461a      	mov	r2, r3
 8002768:	89bb      	ldrh	r3, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	0fda      	lsrs	r2, r3, #31
 800276e:	4413      	add	r3, r2
 8002770:	105b      	asrs	r3, r3, #1
 8002772:	b29b      	uxth	r3, r3
 8002774:	e007      	b.n	8002786 <Manual_Touch_GetRawPoint+0x3b2>
 8002776:	897b      	ldrh	r3, [r7, #10]
 8002778:	461a      	mov	r2, r3
 800277a:	89bb      	ldrh	r3, [r7, #12]
 800277c:	4413      	add	r3, r2
 800277e:	0fda      	lsrs	r2, r3, #31
 8002780:	4413      	add	r3, r2
 8002782:	105b      	asrs	r3, r3, #1
 8002784:	b29b      	uxth	r3, r3
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	8053      	strh	r3, [r2, #2]

    return 1; // Valid point obtained
 800278a:	2301      	movs	r3, #1
}
 800278c:	4618      	mov	r0, r3
 800278e:	3754      	adds	r7, #84	@ 0x54
 8002790:	46bd      	mov	sp, r7
 8002792:	bd90      	pop	{r4, r7, pc}
 8002794:	55555556 	.word	0x55555556

08002798 <Manual_Touch_ApplyCalibration>:
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    return 1; // Success
}

uint8_t Manual_Touch_ApplyCalibration(Coordinate *displayPoint, const Coordinate *screenPoint)
{
 8002798:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
 80027a2:	6039      	str	r1, [r7, #0]
    if (touchMatrix.Divider == 0)
 80027a4:	4b64      	ldr	r3, [pc, #400]	@ (8002938 <Manual_Touch_ApplyCalibration+0x1a0>)
 80027a6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	f04f 0300 	mov.w	r3, #0
 80027b2:	f7fe f999 	bl	8000ae8 <__aeabi_dcmpeq>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d023      	beq.n	8002804 <Manual_Touch_ApplyCalibration+0x6c>
    { // Not calibrated or calibration failed
        // Fallback: direct scaling (highly inaccurate without calibration)
        displayPoint->x = (uint16_t)(((long)screenPoint->x * LCD_WIDTH) / 4095);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	461a      	mov	r2, r3
 80027c2:	4613      	mov	r3, r2
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	1a9b      	subs	r3, r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	4a5c      	ldr	r2, [pc, #368]	@ (800293c <Manual_Touch_ApplyCalibration+0x1a4>)
 80027cc:	fb82 1203 	smull	r1, r2, r2, r3
 80027d0:	441a      	add	r2, r3
 80027d2:	12d2      	asrs	r2, r2, #11
 80027d4:	17db      	asrs	r3, r3, #31
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	b29a      	uxth	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	801a      	strh	r2, [r3, #0]
        displayPoint->y = (uint16_t)(((long)screenPoint->y * LCD_HEIGHT) / 4095);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	885b      	ldrh	r3, [r3, #2]
 80027e2:	461a      	mov	r2, r3
 80027e4:	4613      	mov	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	4413      	add	r3, r2
 80027ea:	019b      	lsls	r3, r3, #6
 80027ec:	4a53      	ldr	r2, [pc, #332]	@ (800293c <Manual_Touch_ApplyCalibration+0x1a4>)
 80027ee:	fb82 1203 	smull	r1, r2, r2, r3
 80027f2:	441a      	add	r2, r3
 80027f4:	12d2      	asrs	r2, r2, #11
 80027f6:	17db      	asrs	r3, r3, #31
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	805a      	strh	r2, [r3, #2]
        return 0; // Indicated that calibration matrix was not used
 8002800:	2300      	movs	r3, #0
 8002802:	e094      	b.n	800292e <Manual_Touch_ApplyCalibration+0x196>
    }

    // Apply calibration matrix
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002804:	4b4c      	ldr	r3, [pc, #304]	@ (8002938 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002806:	e9d3 4500 	ldrd	r4, r5, [r3]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd fe98 	bl	8000544 <__aeabi_i2d>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4620      	mov	r0, r4
 800281a:	4629      	mov	r1, r5
 800281c:	f7fd fefc 	bl	8000618 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4690      	mov	r8, r2
 8002826:	4699      	mov	r9, r3
                                  (touchMatrix.Bn * screenPoint->y) +
 8002828:	4b43      	ldr	r3, [pc, #268]	@ (8002938 <Manual_Touch_ApplyCalibration+0x1a0>)
 800282a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	885b      	ldrh	r3, [r3, #2]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fe86 	bl	8000544 <__aeabi_i2d>
 8002838:	4602      	mov	r2, r0
 800283a:	460b      	mov	r3, r1
 800283c:	4620      	mov	r0, r4
 800283e:	4629      	mov	r1, r5
 8002840:	f7fd feea 	bl	8000618 <__aeabi_dmul>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002848:	4640      	mov	r0, r8
 800284a:	4649      	mov	r1, r9
 800284c:	f7fd fd2e 	bl	80002ac <__adddf3>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
                                  touchMatrix.Cn) /
 8002858:	4b37      	ldr	r3, [pc, #220]	@ (8002938 <Manual_Touch_ApplyCalibration+0x1a0>)
 800285a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
                                  (touchMatrix.Bn * screenPoint->y) +
 800285e:	f7fd fd25 	bl	80002ac <__adddf3>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 800286a:	4b33      	ldr	r3, [pc, #204]	@ (8002938 <Manual_Touch_ApplyCalibration+0x1a0>)
 800286c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Cn) /
 8002870:	f7fd fffc 	bl	800086c <__aeabi_ddiv>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	f7fe f966 	bl	8000b4c <__aeabi_d2uiz>
 8002880:	4603      	mov	r3, r0
 8002882:	b29a      	uxth	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	801a      	strh	r2, [r3, #0]
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002888:	4b2b      	ldr	r3, [pc, #172]	@ (8002938 <Manual_Touch_ApplyCalibration+0x1a0>)
 800288a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fe56 	bl	8000544 <__aeabi_i2d>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4620      	mov	r0, r4
 800289e:	4629      	mov	r1, r5
 80028a0:	f7fd feba 	bl	8000618 <__aeabi_dmul>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4690      	mov	r8, r2
 80028aa:	4699      	mov	r9, r3
                                  (touchMatrix.En * screenPoint->y) +
 80028ac:	4b22      	ldr	r3, [pc, #136]	@ (8002938 <Manual_Touch_ApplyCalibration+0x1a0>)
 80028ae:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	885b      	ldrh	r3, [r3, #2]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fd fe44 	bl	8000544 <__aeabi_i2d>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4620      	mov	r0, r4
 80028c2:	4629      	mov	r1, r5
 80028c4:	f7fd fea8 	bl	8000618 <__aeabi_dmul>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 80028cc:	4640      	mov	r0, r8
 80028ce:	4649      	mov	r1, r9
 80028d0:	f7fd fcec 	bl	80002ac <__adddf3>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
                                  touchMatrix.Fn) /
 80028dc:	4b16      	ldr	r3, [pc, #88]	@ (8002938 <Manual_Touch_ApplyCalibration+0x1a0>)
 80028de:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
                                  (touchMatrix.En * screenPoint->y) +
 80028e2:	f7fd fce3 	bl	80002ac <__adddf3>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 80028ee:	4b12      	ldr	r3, [pc, #72]	@ (8002938 <Manual_Touch_ApplyCalibration+0x1a0>)
 80028f0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Fn) /
 80028f4:	f7fd ffba 	bl	800086c <__aeabi_ddiv>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 80028fc:	4610      	mov	r0, r2
 80028fe:	4619      	mov	r1, r3
 8002900:	f7fe f924 	bl	8000b4c <__aeabi_d2uiz>
 8002904:	4603      	mov	r3, r0
 8002906:	b29a      	uxth	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	805a      	strh	r2, [r3, #2]

    // Constrain to LCD boundaries
    if (displayPoint->x >= LCD_WIDTH)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	2bef      	cmp	r3, #239	@ 0xef
 8002912:	d902      	bls.n	800291a <Manual_Touch_ApplyCalibration+0x182>
        displayPoint->x = LCD_WIDTH - 1;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	22ef      	movs	r2, #239	@ 0xef
 8002918:	801a      	strh	r2, [r3, #0]
    if (displayPoint->y >= LCD_HEIGHT)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	885b      	ldrh	r3, [r3, #2]
 800291e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002922:	d303      	bcc.n	800292c <Manual_Touch_ApplyCalibration+0x194>
        displayPoint->y = LCD_HEIGHT - 1;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f240 123f 	movw	r2, #319	@ 0x13f
 800292a:	805a      	strh	r2, [r3, #2]
    // Note: long double might produce negative intermediate results if raw values are way off.
    // Casting to uint16_t will wrap. Consider clamping if signed intermediates are possible.
    // For typical touch values, this should be fine.

    return 1; // Calibration matrix used
 800292c:	2301      	movs	r3, #1
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002938:	20000130 	.word	0x20000130
 800293c:	80080081 	.word	0x80080081

08002940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	607b      	str	r3, [r7, #4]
 800294a:	4b10      	ldr	r3, [pc, #64]	@ (800298c <HAL_MspInit+0x4c>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294e:	4a0f      	ldr	r2, [pc, #60]	@ (800298c <HAL_MspInit+0x4c>)
 8002950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002954:	6453      	str	r3, [r2, #68]	@ 0x44
 8002956:	4b0d      	ldr	r3, [pc, #52]	@ (800298c <HAL_MspInit+0x4c>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800295e:	607b      	str	r3, [r7, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	603b      	str	r3, [r7, #0]
 8002966:	4b09      	ldr	r3, [pc, #36]	@ (800298c <HAL_MspInit+0x4c>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	4a08      	ldr	r2, [pc, #32]	@ (800298c <HAL_MspInit+0x4c>)
 800296c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002970:	6413      	str	r3, [r2, #64]	@ 0x40
 8002972:	4b06      	ldr	r3, [pc, #24]	@ (800298c <HAL_MspInit+0x4c>)
 8002974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800

08002990 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	@ 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a26      	ldr	r2, [pc, #152]	@ (8002a48 <HAL_I2C_MspInit+0xb8>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d145      	bne.n	8002a3e <HAL_I2C_MspInit+0xae>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	4b25      	ldr	r3, [pc, #148]	@ (8002a4c <HAL_I2C_MspInit+0xbc>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	4a24      	ldr	r2, [pc, #144]	@ (8002a4c <HAL_I2C_MspInit+0xbc>)
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029c2:	4b22      	ldr	r3, [pc, #136]	@ (8002a4c <HAL_I2C_MspInit+0xbc>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	613b      	str	r3, [r7, #16]
 80029cc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin;
 80029ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d4:	2312      	movs	r3, #18
 80029d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029d8:	2301      	movs	r3, #1
 80029da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029e0:	2304      	movs	r3, #4
 80029e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	4619      	mov	r1, r3
 80029ea:	4819      	ldr	r0, [pc, #100]	@ (8002a50 <HAL_I2C_MspInit+0xc0>)
 80029ec:	f000 fb24 	bl	8003038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDA_Pin;
 80029f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029f6:	2312      	movs	r3, #18
 80029f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fe:	2303      	movs	r3, #3
 8002a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a02:	2304      	movs	r3, #4
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8002a06:	f107 0314 	add.w	r3, r7, #20
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4810      	ldr	r0, [pc, #64]	@ (8002a50 <HAL_I2C_MspInit+0xc0>)
 8002a0e:	f000 fb13 	bl	8003038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <HAL_I2C_MspInit+0xbc>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a4c <HAL_I2C_MspInit+0xbc>)
 8002a1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <HAL_I2C_MspInit+0xbc>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	2021      	movs	r0, #33	@ 0x21
 8002a34:	f000 fa99 	bl	8002f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002a38:	2021      	movs	r0, #33	@ 0x21
 8002a3a:	f000 fab2 	bl	8002fa2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002a3e:	bf00      	nop
 8002a40:	3728      	adds	r7, #40	@ 0x28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40005800 	.word	0x40005800
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40020400 	.word	0x40020400

08002a54 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	@ 0x28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a28      	ldr	r2, [pc, #160]	@ (8002b14 <HAL_SPI_MspInit+0xc0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d149      	bne.n	8002b0a <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	4b27      	ldr	r3, [pc, #156]	@ (8002b18 <HAL_SPI_MspInit+0xc4>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	4a26      	ldr	r2, [pc, #152]	@ (8002b18 <HAL_SPI_MspInit+0xc4>)
 8002a80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a86:	4b24      	ldr	r3, [pc, #144]	@ (8002b18 <HAL_SPI_MspInit+0xc4>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b20      	ldr	r3, [pc, #128]	@ (8002b18 <HAL_SPI_MspInit+0xc4>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b18 <HAL_SPI_MspInit+0xc4>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b18 <HAL_SPI_MspInit+0xc4>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
 8002ab2:	4b19      	ldr	r3, [pc, #100]	@ (8002b18 <HAL_SPI_MspInit+0xc4>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	4a18      	ldr	r2, [pc, #96]	@ (8002b18 <HAL_SPI_MspInit+0xc4>)
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002abe:	4b16      	ldr	r3, [pc, #88]	@ (8002b18 <HAL_SPI_MspInit+0xc4>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	60bb      	str	r3, [r7, #8]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin|MOSI_Pin;
 8002aca:	23c0      	movs	r3, #192	@ 0xc0
 8002acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ada:	2305      	movs	r3, #5
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	480d      	ldr	r0, [pc, #52]	@ (8002b1c <HAL_SPI_MspInit+0xc8>)
 8002ae6:	f000 faa7 	bl	8003038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCLK_Pin;
 8002aea:	2308      	movs	r3, #8
 8002aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aee:	2302      	movs	r3, #2
 8002af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af6:	2303      	movs	r3, #3
 8002af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002afa:	2305      	movs	r3, #5
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCLK_GPIO_Port, &GPIO_InitStruct);
 8002afe:	f107 0314 	add.w	r3, r7, #20
 8002b02:	4619      	mov	r1, r3
 8002b04:	4806      	ldr	r0, [pc, #24]	@ (8002b20 <HAL_SPI_MspInit+0xcc>)
 8002b06:	f000 fa97 	bl	8003038 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b0a:	bf00      	nop
 8002b0c:	3728      	adds	r7, #40	@ 0x28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40013000 	.word	0x40013000
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40020000 	.word	0x40020000
 8002b20:	40020400 	.word	0x40020400

08002b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <NMI_Handler+0x4>

08002b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <HardFault_Handler+0x4>

08002b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b38:	bf00      	nop
 8002b3a:	e7fd      	b.n	8002b38 <MemManage_Handler+0x4>

08002b3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <BusFault_Handler+0x4>

08002b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b48:	bf00      	nop
 8002b4a:	e7fd      	b.n	8002b48 <UsageFault_Handler+0x4>

08002b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b50:	bf00      	nop
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b6c:	bf00      	nop
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b7a:	f000 f8d7 	bl	8002d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8002b86:	2010      	movs	r0, #16
 8002b88:	f000 fc24 	bl	80033d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002b94:	4802      	ldr	r0, [pc, #8]	@ (8002ba0 <I2C2_EV_IRQHandler+0x10>)
 8002b96:	f000 fd9a 	bl	80036ce <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	2000007c 	.word	0x2000007c

08002ba4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bac:	4a14      	ldr	r2, [pc, #80]	@ (8002c00 <_sbrk+0x5c>)
 8002bae:	4b15      	ldr	r3, [pc, #84]	@ (8002c04 <_sbrk+0x60>)
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bb8:	4b13      	ldr	r3, [pc, #76]	@ (8002c08 <_sbrk+0x64>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	@ (8002c08 <_sbrk+0x64>)
 8002bc2:	4a12      	ldr	r2, [pc, #72]	@ (8002c0c <_sbrk+0x68>)
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bc6:	4b10      	ldr	r3, [pc, #64]	@ (8002c08 <_sbrk+0x64>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4413      	add	r3, r2
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d207      	bcs.n	8002be4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bd4:	f003 fb9c 	bl	8006310 <__errno>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	220c      	movs	r2, #12
 8002bdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bde:	f04f 33ff 	mov.w	r3, #4294967295
 8002be2:	e009      	b.n	8002bf8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002be4:	4b08      	ldr	r3, [pc, #32]	@ (8002c08 <_sbrk+0x64>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bea:	4b07      	ldr	r3, [pc, #28]	@ (8002c08 <_sbrk+0x64>)
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	4a05      	ldr	r2, [pc, #20]	@ (8002c08 <_sbrk+0x64>)
 8002bf4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	20020000 	.word	0x20020000
 8002c04:	00000400 	.word	0x00000400
 8002c08:	20000168 	.word	0x20000168
 8002c0c:	200002b8 	.word	0x200002b8

08002c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c14:	4b06      	ldr	r3, [pc, #24]	@ (8002c30 <SystemInit+0x20>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1a:	4a05      	ldr	r2, [pc, #20]	@ (8002c30 <SystemInit+0x20>)
 8002c1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c24:	bf00      	nop
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c6c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c38:	f7ff ffea 	bl	8002c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c3c:	480c      	ldr	r0, [pc, #48]	@ (8002c70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c3e:	490d      	ldr	r1, [pc, #52]	@ (8002c74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c40:	4a0d      	ldr	r2, [pc, #52]	@ (8002c78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c44:	e002      	b.n	8002c4c <LoopCopyDataInit>

08002c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c4a:	3304      	adds	r3, #4

08002c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c50:	d3f9      	bcc.n	8002c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c52:	4a0a      	ldr	r2, [pc, #40]	@ (8002c7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c54:	4c0a      	ldr	r4, [pc, #40]	@ (8002c80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c58:	e001      	b.n	8002c5e <LoopFillZerobss>

08002c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c5c:	3204      	adds	r2, #4

08002c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c60:	d3fb      	bcc.n	8002c5a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002c62:	f003 fb5b 	bl	800631c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c66:	f7fe f927 	bl	8000eb8 <main>
  bx  lr    
 8002c6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c74:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002c78:	08006ef8 	.word	0x08006ef8
  ldr r2, =_sbss
 8002c7c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002c80:	200002b8 	.word	0x200002b8

08002c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c84:	e7fe      	b.n	8002c84 <ADC_IRQHandler>
	...

08002c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc8 <HAL_Init+0x40>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a0d      	ldr	r2, [pc, #52]	@ (8002cc8 <HAL_Init+0x40>)
 8002c92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c98:	4b0b      	ldr	r3, [pc, #44]	@ (8002cc8 <HAL_Init+0x40>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc8 <HAL_Init+0x40>)
 8002c9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca4:	4b08      	ldr	r3, [pc, #32]	@ (8002cc8 <HAL_Init+0x40>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a07      	ldr	r2, [pc, #28]	@ (8002cc8 <HAL_Init+0x40>)
 8002caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb0:	2003      	movs	r0, #3
 8002cb2:	f000 f94f 	bl	8002f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cb6:	200f      	movs	r0, #15
 8002cb8:	f000 f808 	bl	8002ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cbc:	f7ff fe40 	bl	8002940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023c00 	.word	0x40023c00

08002ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cd4:	4b12      	ldr	r3, [pc, #72]	@ (8002d20 <HAL_InitTick+0x54>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b12      	ldr	r3, [pc, #72]	@ (8002d24 <HAL_InitTick+0x58>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f967 	bl	8002fbe <HAL_SYSTICK_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e00e      	b.n	8002d18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b0f      	cmp	r3, #15
 8002cfe:	d80a      	bhi.n	8002d16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d00:	2200      	movs	r2, #0
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295
 8002d08:	f000 f92f 	bl	8002f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d0c:	4a06      	ldr	r2, [pc, #24]	@ (8002d28 <HAL_InitTick+0x5c>)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e000      	b.n	8002d18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000000 	.word	0x20000000
 8002d24:	20000008 	.word	0x20000008
 8002d28:	20000004 	.word	0x20000004

08002d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d30:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <HAL_IncTick+0x20>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	461a      	mov	r2, r3
 8002d36:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <HAL_IncTick+0x24>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	4a04      	ldr	r2, [pc, #16]	@ (8002d50 <HAL_IncTick+0x24>)
 8002d3e:	6013      	str	r3, [r2, #0]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000008 	.word	0x20000008
 8002d50:	2000016c 	.word	0x2000016c

08002d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return uwTick;
 8002d58:	4b03      	ldr	r3, [pc, #12]	@ (8002d68 <HAL_GetTick+0x14>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	2000016c 	.word	0x2000016c

08002d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d74:	f7ff ffee 	bl	8002d54 <HAL_GetTick>
 8002d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d84:	d005      	beq.n	8002d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d86:	4b0a      	ldr	r3, [pc, #40]	@ (8002db0 <HAL_Delay+0x44>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4413      	add	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d92:	bf00      	nop
 8002d94:	f7ff ffde 	bl	8002d54 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d8f7      	bhi.n	8002d94 <HAL_Delay+0x28>
  {
  }
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3710      	adds	r7, #16
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000008 	.word	0x20000008

08002db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ddc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002de6:	4a04      	ldr	r2, [pc, #16]	@ (8002df8 <__NVIC_SetPriorityGrouping+0x44>)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	60d3      	str	r3, [r2, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e00:	4b04      	ldr	r3, [pc, #16]	@ (8002e14 <__NVIC_GetPriorityGrouping+0x18>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	0a1b      	lsrs	r3, r3, #8
 8002e06:	f003 0307 	and.w	r3, r3, #7
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000ed00 	.word	0xe000ed00

08002e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	db0b      	blt.n	8002e42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e2a:	79fb      	ldrb	r3, [r7, #7]
 8002e2c:	f003 021f 	and.w	r2, r3, #31
 8002e30:	4907      	ldr	r1, [pc, #28]	@ (8002e50 <__NVIC_EnableIRQ+0x38>)
 8002e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2001      	movs	r0, #1
 8002e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	e000e100 	.word	0xe000e100

08002e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	6039      	str	r1, [r7, #0]
 8002e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	db0a      	blt.n	8002e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	490c      	ldr	r1, [pc, #48]	@ (8002ea0 <__NVIC_SetPriority+0x4c>)
 8002e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e72:	0112      	lsls	r2, r2, #4
 8002e74:	b2d2      	uxtb	r2, r2
 8002e76:	440b      	add	r3, r1
 8002e78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e7c:	e00a      	b.n	8002e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	4908      	ldr	r1, [pc, #32]	@ (8002ea4 <__NVIC_SetPriority+0x50>)
 8002e84:	79fb      	ldrb	r3, [r7, #7]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	3b04      	subs	r3, #4
 8002e8c:	0112      	lsls	r2, r2, #4
 8002e8e:	b2d2      	uxtb	r2, r2
 8002e90:	440b      	add	r3, r1
 8002e92:	761a      	strb	r2, [r3, #24]
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr
 8002ea0:	e000e100 	.word	0xe000e100
 8002ea4:	e000ed00 	.word	0xe000ed00

08002ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b089      	sub	sp, #36	@ 0x24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	f1c3 0307 	rsb	r3, r3, #7
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	bf28      	it	cs
 8002ec6:	2304      	movcs	r3, #4
 8002ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3304      	adds	r3, #4
 8002ece:	2b06      	cmp	r3, #6
 8002ed0:	d902      	bls.n	8002ed8 <NVIC_EncodePriority+0x30>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3b03      	subs	r3, #3
 8002ed6:	e000      	b.n	8002eda <NVIC_EncodePriority+0x32>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	401a      	ands	r2, r3
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	43d9      	mvns	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f00:	4313      	orrs	r3, r2
         );
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3724      	adds	r7, #36	@ 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f20:	d301      	bcc.n	8002f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f22:	2301      	movs	r3, #1
 8002f24:	e00f      	b.n	8002f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f26:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <SysTick_Config+0x40>)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f2e:	210f      	movs	r1, #15
 8002f30:	f04f 30ff 	mov.w	r0, #4294967295
 8002f34:	f7ff ff8e 	bl	8002e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f38:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <SysTick_Config+0x40>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f3e:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <SysTick_Config+0x40>)
 8002f40:	2207      	movs	r2, #7
 8002f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	e000e010 	.word	0xe000e010

08002f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f7ff ff29 	bl	8002db4 <__NVIC_SetPriorityGrouping>
}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	4603      	mov	r3, r0
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f7c:	f7ff ff3e 	bl	8002dfc <__NVIC_GetPriorityGrouping>
 8002f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68b9      	ldr	r1, [r7, #8]
 8002f86:	6978      	ldr	r0, [r7, #20]
 8002f88:	f7ff ff8e 	bl	8002ea8 <NVIC_EncodePriority>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff5d 	bl	8002e54 <__NVIC_SetPriority>
}
 8002f9a:	bf00      	nop
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	4603      	mov	r3, r0
 8002faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff ff31 	bl	8002e18 <__NVIC_EnableIRQ>
}
 8002fb6:	bf00      	nop
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff ffa2 	bl	8002f10 <SysTick_Config>
 8002fcc:	4603      	mov	r3, r0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3708      	adds	r7, #8
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d004      	beq.n	8002ff4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2280      	movs	r2, #128	@ 0x80
 8002fee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e00c      	b.n	800300e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2205      	movs	r2, #5
 8002ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003028:	b2db      	uxtb	r3, r3
}
 800302a:	4618      	mov	r0, r3
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
	...

08003038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	@ 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003042:	2300      	movs	r3, #0
 8003044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	e16b      	b.n	800332c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003054:	2201      	movs	r2, #1
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4013      	ands	r3, r2
 8003066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	429a      	cmp	r2, r3
 800306e:	f040 815a 	bne.w	8003326 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d005      	beq.n	800308a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003086:	2b02      	cmp	r3, #2
 8003088:	d130      	bne.n	80030ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	2203      	movs	r2, #3
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030c0:	2201      	movs	r2, #1
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	091b      	lsrs	r3, r3, #4
 80030d6:	f003 0201 	and.w	r2, r3, #1
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	fa02 f303 	lsl.w	r3, r2, r3
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d017      	beq.n	8003128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	2203      	movs	r2, #3
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4013      	ands	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	689a      	ldr	r2, [r3, #8]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d123      	bne.n	800317c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	08da      	lsrs	r2, r3, #3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3208      	adds	r2, #8
 800313c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	220f      	movs	r2, #15
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	08da      	lsrs	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3208      	adds	r2, #8
 8003176:	69b9      	ldr	r1, [r7, #24]
 8003178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	2203      	movs	r2, #3
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f003 0203 	and.w	r2, r3, #3
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80b4 	beq.w	8003326 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	4b60      	ldr	r3, [pc, #384]	@ (8003344 <HAL_GPIO_Init+0x30c>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	4a5f      	ldr	r2, [pc, #380]	@ (8003344 <HAL_GPIO_Init+0x30c>)
 80031c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ce:	4b5d      	ldr	r3, [pc, #372]	@ (8003344 <HAL_GPIO_Init+0x30c>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031da:	4a5b      	ldr	r2, [pc, #364]	@ (8003348 <HAL_GPIO_Init+0x310>)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	3302      	adds	r3, #2
 80031e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	220f      	movs	r2, #15
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a52      	ldr	r2, [pc, #328]	@ (800334c <HAL_GPIO_Init+0x314>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d02b      	beq.n	800325e <HAL_GPIO_Init+0x226>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a51      	ldr	r2, [pc, #324]	@ (8003350 <HAL_GPIO_Init+0x318>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d025      	beq.n	800325a <HAL_GPIO_Init+0x222>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a50      	ldr	r2, [pc, #320]	@ (8003354 <HAL_GPIO_Init+0x31c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d01f      	beq.n	8003256 <HAL_GPIO_Init+0x21e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4f      	ldr	r2, [pc, #316]	@ (8003358 <HAL_GPIO_Init+0x320>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d019      	beq.n	8003252 <HAL_GPIO_Init+0x21a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a4e      	ldr	r2, [pc, #312]	@ (800335c <HAL_GPIO_Init+0x324>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_GPIO_Init+0x216>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a4d      	ldr	r2, [pc, #308]	@ (8003360 <HAL_GPIO_Init+0x328>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00d      	beq.n	800324a <HAL_GPIO_Init+0x212>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a4c      	ldr	r2, [pc, #304]	@ (8003364 <HAL_GPIO_Init+0x32c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <HAL_GPIO_Init+0x20e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4b      	ldr	r2, [pc, #300]	@ (8003368 <HAL_GPIO_Init+0x330>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d101      	bne.n	8003242 <HAL_GPIO_Init+0x20a>
 800323e:	2307      	movs	r3, #7
 8003240:	e00e      	b.n	8003260 <HAL_GPIO_Init+0x228>
 8003242:	2308      	movs	r3, #8
 8003244:	e00c      	b.n	8003260 <HAL_GPIO_Init+0x228>
 8003246:	2306      	movs	r3, #6
 8003248:	e00a      	b.n	8003260 <HAL_GPIO_Init+0x228>
 800324a:	2305      	movs	r3, #5
 800324c:	e008      	b.n	8003260 <HAL_GPIO_Init+0x228>
 800324e:	2304      	movs	r3, #4
 8003250:	e006      	b.n	8003260 <HAL_GPIO_Init+0x228>
 8003252:	2303      	movs	r3, #3
 8003254:	e004      	b.n	8003260 <HAL_GPIO_Init+0x228>
 8003256:	2302      	movs	r3, #2
 8003258:	e002      	b.n	8003260 <HAL_GPIO_Init+0x228>
 800325a:	2301      	movs	r3, #1
 800325c:	e000      	b.n	8003260 <HAL_GPIO_Init+0x228>
 800325e:	2300      	movs	r3, #0
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	f002 0203 	and.w	r2, r2, #3
 8003266:	0092      	lsls	r2, r2, #2
 8003268:	4093      	lsls	r3, r2
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003270:	4935      	ldr	r1, [pc, #212]	@ (8003348 <HAL_GPIO_Init+0x310>)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	089b      	lsrs	r3, r3, #2
 8003276:	3302      	adds	r3, #2
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800327e:	4b3b      	ldr	r3, [pc, #236]	@ (800336c <HAL_GPIO_Init+0x334>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032a2:	4a32      	ldr	r2, [pc, #200]	@ (800336c <HAL_GPIO_Init+0x334>)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032a8:	4b30      	ldr	r3, [pc, #192]	@ (800336c <HAL_GPIO_Init+0x334>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032cc:	4a27      	ldr	r2, [pc, #156]	@ (800336c <HAL_GPIO_Init+0x334>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032d2:	4b26      	ldr	r3, [pc, #152]	@ (800336c <HAL_GPIO_Init+0x334>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032f6:	4a1d      	ldr	r2, [pc, #116]	@ (800336c <HAL_GPIO_Init+0x334>)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032fc:	4b1b      	ldr	r3, [pc, #108]	@ (800336c <HAL_GPIO_Init+0x334>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003320:	4a12      	ldr	r2, [pc, #72]	@ (800336c <HAL_GPIO_Init+0x334>)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3301      	adds	r3, #1
 800332a:	61fb      	str	r3, [r7, #28]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	2b0f      	cmp	r3, #15
 8003330:	f67f ae90 	bls.w	8003054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003334:	bf00      	nop
 8003336:	bf00      	nop
 8003338:	3724      	adds	r7, #36	@ 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40023800 	.word	0x40023800
 8003348:	40013800 	.word	0x40013800
 800334c:	40020000 	.word	0x40020000
 8003350:	40020400 	.word	0x40020400
 8003354:	40020800 	.word	0x40020800
 8003358:	40020c00 	.word	0x40020c00
 800335c:	40021000 	.word	0x40021000
 8003360:	40021400 	.word	0x40021400
 8003364:	40021800 	.word	0x40021800
 8003368:	40021c00 	.word	0x40021c00
 800336c:	40013c00 	.word	0x40013c00

08003370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	460b      	mov	r3, r1
 800337a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	887b      	ldrh	r3, [r7, #2]
 8003382:	4013      	ands	r3, r2
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
 800338c:	e001      	b.n	8003392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	807b      	strh	r3, [r7, #2]
 80033ac:	4613      	mov	r3, r2
 80033ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b0:	787b      	ldrb	r3, [r7, #1]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033b6:	887a      	ldrh	r2, [r7, #2]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033bc:	e003      	b.n	80033c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033be:	887b      	ldrh	r3, [r7, #2]
 80033c0:	041a      	lsls	r2, r3, #16
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	619a      	str	r2, [r3, #24]
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
	...

080033d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033de:	4b08      	ldr	r3, [pc, #32]	@ (8003400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d006      	beq.n	80033f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ea:	4a05      	ldr	r2, [pc, #20]	@ (8003400 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033f0:	88fb      	ldrh	r3, [r7, #6]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 f806 	bl	8003404 <HAL_GPIO_EXTI_Callback>
  }
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40013c00 	.word	0x40013c00

08003404 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
	...

0800341c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e12b      	b.n	8003686 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff faa4 	bl	8002990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2224      	movs	r2, #36	@ 0x24
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0201 	bic.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800346e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800347e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003480:	f002 f936 	bl	80056f0 <HAL_RCC_GetPCLK1Freq>
 8003484:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4a81      	ldr	r2, [pc, #516]	@ (8003690 <HAL_I2C_Init+0x274>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d807      	bhi.n	80034a0 <HAL_I2C_Init+0x84>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a80      	ldr	r2, [pc, #512]	@ (8003694 <HAL_I2C_Init+0x278>)
 8003494:	4293      	cmp	r3, r2
 8003496:	bf94      	ite	ls
 8003498:	2301      	movls	r3, #1
 800349a:	2300      	movhi	r3, #0
 800349c:	b2db      	uxtb	r3, r3
 800349e:	e006      	b.n	80034ae <HAL_I2C_Init+0x92>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4a7d      	ldr	r2, [pc, #500]	@ (8003698 <HAL_I2C_Init+0x27c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	bf94      	ite	ls
 80034a8:	2301      	movls	r3, #1
 80034aa:	2300      	movhi	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e0e7      	b.n	8003686 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4a78      	ldr	r2, [pc, #480]	@ (800369c <HAL_I2C_Init+0x280>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	0c9b      	lsrs	r3, r3, #18
 80034c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4a6a      	ldr	r2, [pc, #424]	@ (8003690 <HAL_I2C_Init+0x274>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d802      	bhi.n	80034f0 <HAL_I2C_Init+0xd4>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	3301      	adds	r3, #1
 80034ee:	e009      	b.n	8003504 <HAL_I2C_Init+0xe8>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80034f6:	fb02 f303 	mul.w	r3, r2, r3
 80034fa:	4a69      	ldr	r2, [pc, #420]	@ (80036a0 <HAL_I2C_Init+0x284>)
 80034fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003500:	099b      	lsrs	r3, r3, #6
 8003502:	3301      	adds	r3, #1
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6812      	ldr	r2, [r2, #0]
 8003508:	430b      	orrs	r3, r1
 800350a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003516:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	495c      	ldr	r1, [pc, #368]	@ (8003690 <HAL_I2C_Init+0x274>)
 8003520:	428b      	cmp	r3, r1
 8003522:	d819      	bhi.n	8003558 <HAL_I2C_Init+0x13c>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	1e59      	subs	r1, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003532:	1c59      	adds	r1, r3, #1
 8003534:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003538:	400b      	ands	r3, r1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_I2C_Init+0x138>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1e59      	subs	r1, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	fbb1 f3f3 	udiv	r3, r1, r3
 800354c:	3301      	adds	r3, #1
 800354e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003552:	e051      	b.n	80035f8 <HAL_I2C_Init+0x1dc>
 8003554:	2304      	movs	r3, #4
 8003556:	e04f      	b.n	80035f8 <HAL_I2C_Init+0x1dc>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d111      	bne.n	8003584 <HAL_I2C_Init+0x168>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	1e58      	subs	r0, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6859      	ldr	r1, [r3, #4]
 8003568:	460b      	mov	r3, r1
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	440b      	add	r3, r1
 800356e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003572:	3301      	adds	r3, #1
 8003574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	e012      	b.n	80035aa <HAL_I2C_Init+0x18e>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1e58      	subs	r0, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	460b      	mov	r3, r1
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	0099      	lsls	r1, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	fbb0 f3f3 	udiv	r3, r0, r3
 800359a:	3301      	adds	r3, #1
 800359c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Init+0x196>
 80035ae:	2301      	movs	r3, #1
 80035b0:	e022      	b.n	80035f8 <HAL_I2C_Init+0x1dc>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10e      	bne.n	80035d8 <HAL_I2C_Init+0x1bc>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	1e58      	subs	r0, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6859      	ldr	r1, [r3, #4]
 80035c2:	460b      	mov	r3, r1
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	440b      	add	r3, r1
 80035c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80035cc:	3301      	adds	r3, #1
 80035ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035d6:	e00f      	b.n	80035f8 <HAL_I2C_Init+0x1dc>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	1e58      	subs	r0, r3, #1
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	0099      	lsls	r1, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ee:	3301      	adds	r3, #1
 80035f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	6809      	ldr	r1, [r1, #0]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69da      	ldr	r2, [r3, #28]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003626:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6911      	ldr	r1, [r2, #16]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	68d2      	ldr	r2, [r2, #12]
 8003632:	4311      	orrs	r1, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	430b      	orrs	r3, r1
 800363a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	000186a0 	.word	0x000186a0
 8003694:	001e847f 	.word	0x001e847f
 8003698:	003d08ff 	.word	0x003d08ff
 800369c:	431bde83 	.word	0x431bde83
 80036a0:	10624dd3 	.word	0x10624dd3

080036a4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b6:	2b80      	cmp	r3, #128	@ 0x80
 80036b8:	d103      	bne.n	80036c2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	611a      	str	r2, [r3, #16]
  }
}
 80036c2:	bf00      	nop
 80036c4:	370c      	adds	r7, #12
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b088      	sub	sp, #32
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f6:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d003      	beq.n	8003706 <HAL_I2C_EV_IRQHandler+0x38>
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	2b40      	cmp	r3, #64	@ 0x40
 8003702:	f040 80c1 	bne.w	8003888 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10d      	bne.n	800373c <HAL_I2C_EV_IRQHandler+0x6e>
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003726:	d003      	beq.n	8003730 <HAL_I2C_EV_IRQHandler+0x62>
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800372e:	d101      	bne.n	8003734 <HAL_I2C_EV_IRQHandler+0x66>
 8003730:	2301      	movs	r3, #1
 8003732:	e000      	b.n	8003736 <HAL_I2C_EV_IRQHandler+0x68>
 8003734:	2300      	movs	r3, #0
 8003736:	2b01      	cmp	r3, #1
 8003738:	f000 8132 	beq.w	80039a0 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00c      	beq.n	8003760 <HAL_I2C_EV_IRQHandler+0x92>
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	0a5b      	lsrs	r3, r3, #9
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	2b00      	cmp	r3, #0
 8003750:	d006      	beq.n	8003760 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f001 fb80 	bl	8004e58 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fcf8 	bl	800414e <I2C_Master_SB>
 800375e:	e092      	b.n	8003886 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	08db      	lsrs	r3, r3, #3
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <HAL_I2C_EV_IRQHandler+0xb2>
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	0a5b      	lsrs	r3, r3, #9
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fd6e 	bl	800425a <I2C_Master_ADD10>
 800377e:	e082      	b.n	8003886 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d009      	beq.n	80037a0 <HAL_I2C_EV_IRQHandler+0xd2>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	0a5b      	lsrs	r3, r3, #9
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fd88 	bl	80042ae <I2C_Master_ADDR>
 800379e:	e072      	b.n	8003886 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	089b      	lsrs	r3, r3, #2
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d03b      	beq.n	8003824 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037ba:	f000 80f3 	beq.w	80039a4 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	09db      	lsrs	r3, r3, #7
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00f      	beq.n	80037ea <HAL_I2C_EV_IRQHandler+0x11c>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	0a9b      	lsrs	r3, r3, #10
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d009      	beq.n	80037ea <HAL_I2C_EV_IRQHandler+0x11c>
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	089b      	lsrs	r3, r3, #2
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d103      	bne.n	80037ea <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f94c 	bl	8003a80 <I2C_MasterTransmit_TXE>
 80037e8:	e04d      	b.n	8003886 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	089b      	lsrs	r3, r3, #2
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 80d6 	beq.w	80039a4 <HAL_I2C_EV_IRQHandler+0x2d6>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	0a5b      	lsrs	r3, r3, #9
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80cf 	beq.w	80039a4 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003806:	7bbb      	ldrb	r3, [r7, #14]
 8003808:	2b21      	cmp	r3, #33	@ 0x21
 800380a:	d103      	bne.n	8003814 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 f9d3 	bl	8003bb8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003812:	e0c7      	b.n	80039a4 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b40      	cmp	r3, #64	@ 0x40
 8003818:	f040 80c4 	bne.w	80039a4 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 fa41 	bl	8003ca4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003822:	e0bf      	b.n	80039a4 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800382e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003832:	f000 80b7 	beq.w	80039a4 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	099b      	lsrs	r3, r3, #6
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00f      	beq.n	8003862 <HAL_I2C_EV_IRQHandler+0x194>
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	0a9b      	lsrs	r3, r3, #10
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d009      	beq.n	8003862 <HAL_I2C_EV_IRQHandler+0x194>
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	089b      	lsrs	r3, r3, #2
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d103      	bne.n	8003862 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 faba 	bl	8003dd4 <I2C_MasterReceive_RXNE>
 8003860:	e011      	b.n	8003886 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	089b      	lsrs	r3, r3, #2
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 809a 	beq.w	80039a4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	0a5b      	lsrs	r3, r3, #9
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8093 	beq.w	80039a4 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fb70 	bl	8003f64 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003884:	e08e      	b.n	80039a4 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003886:	e08d      	b.n	80039a4 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388c:	2b00      	cmp	r3, #0
 800388e:	d004      	beq.n	800389a <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	61fb      	str	r3, [r7, #28]
 8003898:	e007      	b.n	80038aa <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d012      	beq.n	80038dc <HAL_I2C_EV_IRQHandler+0x20e>
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	0a5b      	lsrs	r3, r3, #9
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00c      	beq.n	80038dc <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80038d2:	69b9      	ldr	r1, [r7, #24]
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f000 ff39 	bl	800474c <I2C_Slave_ADDR>
 80038da:	e066      	b.n	80039aa <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	091b      	lsrs	r3, r3, #4
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <HAL_I2C_EV_IRQHandler+0x22e>
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	0a5b      	lsrs	r3, r3, #9
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 ff73 	bl	80047e0 <I2C_Slave_STOPF>
 80038fa:	e056      	b.n	80039aa <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038fc:	7bbb      	ldrb	r3, [r7, #14]
 80038fe:	2b21      	cmp	r3, #33	@ 0x21
 8003900:	d002      	beq.n	8003908 <HAL_I2C_EV_IRQHandler+0x23a>
 8003902:	7bbb      	ldrb	r3, [r7, #14]
 8003904:	2b29      	cmp	r3, #41	@ 0x29
 8003906:	d125      	bne.n	8003954 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	09db      	lsrs	r3, r3, #7
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00f      	beq.n	8003934 <HAL_I2C_EV_IRQHandler+0x266>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	0a9b      	lsrs	r3, r3, #10
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <HAL_I2C_EV_IRQHandler+0x266>
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	089b      	lsrs	r3, r3, #2
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d103      	bne.n	8003934 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fe4f 	bl	80045d0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003932:	e039      	b.n	80039a8 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d033      	beq.n	80039a8 <HAL_I2C_EV_IRQHandler+0x2da>
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	0a5b      	lsrs	r3, r3, #9
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d02d      	beq.n	80039a8 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 fe7c 	bl	800464a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003952:	e029      	b.n	80039a8 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	099b      	lsrs	r3, r3, #6
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00f      	beq.n	8003980 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	0a9b      	lsrs	r3, r3, #10
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d009      	beq.n	8003980 <HAL_I2C_EV_IRQHandler+0x2b2>
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	089b      	lsrs	r3, r3, #2
 8003970:	f003 0301 	and.w	r3, r3, #1
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fe87 	bl	800468c <I2C_SlaveReceive_RXNE>
 800397e:	e014      	b.n	80039aa <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	089b      	lsrs	r3, r3, #2
 8003984:	f003 0301 	and.w	r3, r3, #1
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00e      	beq.n	80039aa <HAL_I2C_EV_IRQHandler+0x2dc>
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	0a5b      	lsrs	r3, r3, #9
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 feb5 	bl	8004708 <I2C_SlaveReceive_BTF>
 800399e:	e004      	b.n	80039aa <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80039a0:	bf00      	nop
 80039a2:	e002      	b.n	80039aa <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039a4:	bf00      	nop
 80039a6:	e000      	b.n	80039aa <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039a8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80039aa:	3720      	adds	r7, #32
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	70fb      	strb	r3, [r7, #3]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a8e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a96:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d150      	bne.n	8003b48 <I2C_MasterTransmit_TXE+0xc8>
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	2b21      	cmp	r3, #33	@ 0x21
 8003aaa:	d14d      	bne.n	8003b48 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d01d      	beq.n	8003aee <I2C_MasterTransmit_TXE+0x6e>
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	2b20      	cmp	r3, #32
 8003ab6:	d01a      	beq.n	8003aee <I2C_MasterTransmit_TXE+0x6e>
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003abe:	d016      	beq.n	8003aee <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ace:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2211      	movs	r2, #17
 8003ad4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ff62 	bl	80039b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003aec:	e060      	b.n	8003bb0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003afc:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2220      	movs	r2, #32
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b40      	cmp	r3, #64	@ 0x40
 8003b26:	d107      	bne.n	8003b38 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff ff7d 	bl	8003a30 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b36:	e03b      	b.n	8003bb0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff ff35 	bl	80039b0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b46:	e033      	b.n	8003bb0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b21      	cmp	r3, #33	@ 0x21
 8003b4c:	d005      	beq.n	8003b5a <I2C_MasterTransmit_TXE+0xda>
 8003b4e:	7bbb      	ldrb	r3, [r7, #14]
 8003b50:	2b40      	cmp	r3, #64	@ 0x40
 8003b52:	d12d      	bne.n	8003bb0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b22      	cmp	r3, #34	@ 0x22
 8003b58:	d12a      	bne.n	8003bb0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d108      	bne.n	8003b76 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b72:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b74:	e01c      	b.n	8003bb0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b40      	cmp	r3, #64	@ 0x40
 8003b80:	d103      	bne.n	8003b8a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f88e 	bl	8003ca4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003b88:	e012      	b.n	8003bb0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8e:	781a      	ldrb	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	b29a      	uxth	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003bae:	e7ff      	b.n	8003bb0 <I2C_MasterTransmit_TXE+0x130>
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b21      	cmp	r3, #33	@ 0x21
 8003bd0:	d164      	bne.n	8003c9c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d012      	beq.n	8003c02 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003c00:	e04c      	b.n	8003c9c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d01d      	beq.n	8003c44 <I2C_MasterTransmit_BTF+0x8c>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d01a      	beq.n	8003c44 <I2C_MasterTransmit_BTF+0x8c>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c14:	d016      	beq.n	8003c44 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c24:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2211      	movs	r2, #17
 8003c2a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff feb7 	bl	80039b0 <HAL_I2C_MasterTxCpltCallback>
}
 8003c42:	e02b      	b.n	8003c9c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c52:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c62:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b40      	cmp	r3, #64	@ 0x40
 8003c7c:	d107      	bne.n	8003c8e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7ff fed2 	bl	8003a30 <HAL_I2C_MemTxCpltCallback>
}
 8003c8c:	e006      	b.n	8003c9c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff fe8a 	bl	80039b0 <HAL_I2C_MasterTxCpltCallback>
}
 8003c9c:	bf00      	nop
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d11d      	bne.n	8003cf8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d10b      	bne.n	8003cdc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cd4:	1c9a      	adds	r2, r3, #2
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003cda:	e077      	b.n	8003dcc <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	121b      	asrs	r3, r3, #8
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003cf6:	e069      	b.n	8003dcc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d10b      	bne.n	8003d18 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d16:	e059      	b.n	8003dcc <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d152      	bne.n	8003dc6 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	2b22      	cmp	r3, #34	@ 0x22
 8003d24:	d10d      	bne.n	8003d42 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d34:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d40:	e044      	b.n	8003dcc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d015      	beq.n	8003d78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	2b21      	cmp	r3, #33	@ 0x21
 8003d50:	d112      	bne.n	8003d78 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	781a      	ldrb	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003d76:	e029      	b.n	8003dcc <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d124      	bne.n	8003dcc <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003d82:	7bfb      	ldrb	r3, [r7, #15]
 8003d84:	2b21      	cmp	r3, #33	@ 0x21
 8003d86:	d121      	bne.n	8003dcc <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d96:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003da6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7ff fe36 	bl	8003a30 <HAL_I2C_MemTxCpltCallback>
}
 8003dc4:	e002      	b.n	8003dcc <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7ff fc6c 	bl	80036a4 <I2C_Flush_DR>
}
 8003dcc:	bf00      	nop
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b084      	sub	sp, #16
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b22      	cmp	r3, #34	@ 0x22
 8003de6:	f040 80b9 	bne.w	8003f5c <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dee:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d921      	bls.n	8003e42 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	f040 8096 	bne.w	8003f5c <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e3e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003e40:	e08c      	b.n	8003f5c <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d07f      	beq.n	8003f4a <I2C_MasterReceive_RXNE+0x176>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d002      	beq.n	8003e56 <I2C_MasterReceive_RXNE+0x82>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d179      	bne.n	8003f4a <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 ffcc 	bl	8004df4 <I2C_WaitOnSTOPRequestThroughIT>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d14c      	bne.n	8003efc <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e70:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e80:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	691a      	ldr	r2, [r3, #16]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8c:	b2d2      	uxtb	r2, r2
 8003e8e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b40      	cmp	r3, #64	@ 0x40
 8003eba:	d10a      	bne.n	8003ed2 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7ff fdba 	bl	8003a44 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003ed0:	e044      	b.n	8003f5c <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d002      	beq.n	8003ee6 <I2C_MasterReceive_RXNE+0x112>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d103      	bne.n	8003eee <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	@ 0x30
 8003eec:	e002      	b.n	8003ef4 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2212      	movs	r2, #18
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff fd65 	bl	80039c4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003efa:	e02f      	b.n	8003f5c <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f0a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff fd88 	bl	8003a58 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f48:	e008      	b.n	8003f5c <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f58:	605a      	str	r2, [r3, #4]
}
 8003f5a:	e7ff      	b.n	8003f5c <I2C_MasterReceive_RXNE+0x188>
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f70:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d11b      	bne.n	8003fb4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f8a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691a      	ldr	r2, [r3, #16]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003fb2:	e0c8      	b.n	8004146 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d129      	bne.n	8004012 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fcc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d00a      	beq.n	8003fea <I2C_MasterReceive_BTF+0x86>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d007      	beq.n	8003fea <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004010:	e099      	b.n	8004146 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	f040 8081 	bne.w	8004120 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d002      	beq.n	800402a <I2C_MasterReceive_BTF+0xc6>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b10      	cmp	r3, #16
 8004028:	d108      	bne.n	800403c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	e019      	b.n	8004070 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b04      	cmp	r3, #4
 8004040:	d002      	beq.n	8004048 <I2C_MasterReceive_BTF+0xe4>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d108      	bne.n	800405a <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e00a      	b.n	8004070 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b10      	cmp	r3, #16
 800405e:	d007      	beq.n	8004070 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800406e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691a      	ldr	r2, [r3, #16]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	3b01      	subs	r3, #1
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80040ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2220      	movs	r2, #32
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b40      	cmp	r3, #64	@ 0x40
 80040de:	d10a      	bne.n	80040f6 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7ff fca8 	bl	8003a44 <HAL_I2C_MemRxCpltCallback>
}
 80040f4:	e027      	b.n	8004146 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d002      	beq.n	800410a <I2C_MasterReceive_BTF+0x1a6>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b20      	cmp	r3, #32
 8004108:	d103      	bne.n	8004112 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004110:	e002      	b.n	8004118 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2212      	movs	r2, #18
 8004116:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff fc53 	bl	80039c4 <HAL_I2C_MasterRxCpltCallback>
}
 800411e:	e012      	b.n	8004146 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b40      	cmp	r3, #64	@ 0x40
 8004160:	d117      	bne.n	8004192 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416e:	b2db      	uxtb	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800417a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800417c:	e067      	b.n	800424e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004182:	b2db      	uxtb	r3, r3
 8004184:	f043 0301 	orr.w	r3, r3, #1
 8004188:	b2da      	uxtb	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	611a      	str	r2, [r3, #16]
}
 8004190:	e05d      	b.n	800424e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800419a:	d133      	bne.n	8004204 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b21      	cmp	r3, #33	@ 0x21
 80041a6:	d109      	bne.n	80041bc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041b8:	611a      	str	r2, [r3, #16]
 80041ba:	e008      	b.n	80041ce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d004      	beq.n	80041e0 <I2C_Master_SB+0x92>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d108      	bne.n	80041f2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d032      	beq.n	800424e <I2C_Master_SB+0x100>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d02d      	beq.n	800424e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004200:	605a      	str	r2, [r3, #4]
}
 8004202:	e024      	b.n	800424e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10e      	bne.n	800422a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004210:	b29b      	uxth	r3, r3
 8004212:	11db      	asrs	r3, r3, #7
 8004214:	b2db      	uxtb	r3, r3
 8004216:	f003 0306 	and.w	r3, r3, #6
 800421a:	b2db      	uxtb	r3, r3
 800421c:	f063 030f 	orn	r3, r3, #15
 8004220:	b2da      	uxtb	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	611a      	str	r2, [r3, #16]
}
 8004228:	e011      	b.n	800424e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422e:	2b01      	cmp	r3, #1
 8004230:	d10d      	bne.n	800424e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004236:	b29b      	uxth	r3, r3
 8004238:	11db      	asrs	r3, r3, #7
 800423a:	b2db      	uxtb	r3, r3
 800423c:	f003 0306 	and.w	r3, r3, #6
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f063 030e 	orn	r3, r3, #14
 8004246:	b2da      	uxtb	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	611a      	str	r2, [r3, #16]
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004266:	b2da      	uxtb	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004272:	2b00      	cmp	r3, #0
 8004274:	d004      	beq.n	8004280 <I2C_Master_ADD10+0x26>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427c:	2b00      	cmp	r3, #0
 800427e:	d108      	bne.n	8004292 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00c      	beq.n	80042a2 <I2C_Master_ADD10+0x48>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800428c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d007      	beq.n	80042a2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042a0:	605a      	str	r2, [r3, #4]
  }
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80042ae:	b480      	push	{r7}
 80042b0:	b091      	sub	sp, #68	@ 0x44
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b22      	cmp	r3, #34	@ 0x22
 80042d6:	f040 8169 	bne.w	80045ac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10f      	bne.n	8004302 <I2C_Master_ADDR+0x54>
 80042e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80042e6:	2b40      	cmp	r3, #64	@ 0x40
 80042e8:	d10b      	bne.n	8004302 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ea:	2300      	movs	r3, #0
 80042ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80042fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004300:	e160      	b.n	80045c4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004306:	2b00      	cmp	r3, #0
 8004308:	d11d      	bne.n	8004346 <I2C_Master_ADDR+0x98>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004312:	d118      	bne.n	8004346 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004314:	2300      	movs	r3, #0
 8004316:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004338:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	651a      	str	r2, [r3, #80]	@ 0x50
 8004344:	e13e      	b.n	80045c4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d113      	bne.n	8004378 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004350:	2300      	movs	r3, #0
 8004352:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695b      	ldr	r3, [r3, #20]
 800435a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004364:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004374:	601a      	str	r2, [r3, #0]
 8004376:	e115      	b.n	80045a4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437c:	b29b      	uxth	r3, r3
 800437e:	2b01      	cmp	r3, #1
 8004380:	f040 808a 	bne.w	8004498 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004386:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800438a:	d137      	bne.n	80043fc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800439a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043aa:	d113      	bne.n	80043d4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043ba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043bc:	2300      	movs	r3, #0
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	e0e7      	b.n	80045a4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d4:	2300      	movs	r3, #0
 80043d6:	623b      	str	r3, [r7, #32]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	623b      	str	r3, [r7, #32]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	623b      	str	r3, [r7, #32]
 80043e8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	e0d3      	b.n	80045a4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80043fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d02e      	beq.n	8004460 <I2C_Master_ADDR+0x1b2>
 8004402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004404:	2b20      	cmp	r3, #32
 8004406:	d02b      	beq.n	8004460 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800440a:	2b12      	cmp	r3, #18
 800440c:	d102      	bne.n	8004414 <I2C_Master_ADDR+0x166>
 800440e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004410:	2b01      	cmp	r3, #1
 8004412:	d125      	bne.n	8004460 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004416:	2b04      	cmp	r3, #4
 8004418:	d00e      	beq.n	8004438 <I2C_Master_ADDR+0x18a>
 800441a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441c:	2b02      	cmp	r3, #2
 800441e:	d00b      	beq.n	8004438 <I2C_Master_ADDR+0x18a>
 8004420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004422:	2b10      	cmp	r3, #16
 8004424:	d008      	beq.n	8004438 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004434:	601a      	str	r2, [r3, #0]
 8004436:	e007      	b.n	8004448 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004446:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004448:	2300      	movs	r3, #0
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	61fb      	str	r3, [r7, #28]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	699b      	ldr	r3, [r3, #24]
 800445a:	61fb      	str	r3, [r7, #28]
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	e0a1      	b.n	80045a4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800446e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004470:	2300      	movs	r3, #0
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	61bb      	str	r3, [r7, #24]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	61bb      	str	r3, [r7, #24]
 8004484:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004494:	601a      	str	r2, [r3, #0]
 8004496:	e085      	b.n	80045a4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d14d      	bne.n	800453e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d016      	beq.n	80044d6 <I2C_Master_ADDR+0x228>
 80044a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d013      	beq.n	80044d6 <I2C_Master_ADDR+0x228>
 80044ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b0:	2b10      	cmp	r3, #16
 80044b2:	d010      	beq.n	80044d6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044c2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e007      	b.n	80044e6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044e4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044f4:	d117      	bne.n	8004526 <I2C_Master_ADDR+0x278>
 80044f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044fc:	d00b      	beq.n	8004516 <I2C_Master_ADDR+0x268>
 80044fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004500:	2b01      	cmp	r3, #1
 8004502:	d008      	beq.n	8004516 <I2C_Master_ADDR+0x268>
 8004504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004506:	2b08      	cmp	r3, #8
 8004508:	d005      	beq.n	8004516 <I2C_Master_ADDR+0x268>
 800450a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450c:	2b10      	cmp	r3, #16
 800450e:	d002      	beq.n	8004516 <I2C_Master_ADDR+0x268>
 8004510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004512:	2b20      	cmp	r3, #32
 8004514:	d107      	bne.n	8004526 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004524:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	e032      	b.n	80045a4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800454c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800455c:	d117      	bne.n	800458e <I2C_Master_ADDR+0x2e0>
 800455e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004560:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004564:	d00b      	beq.n	800457e <I2C_Master_ADDR+0x2d0>
 8004566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004568:	2b01      	cmp	r3, #1
 800456a:	d008      	beq.n	800457e <I2C_Master_ADDR+0x2d0>
 800456c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456e:	2b08      	cmp	r3, #8
 8004570:	d005      	beq.n	800457e <I2C_Master_ADDR+0x2d0>
 8004572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004574:	2b10      	cmp	r3, #16
 8004576:	d002      	beq.n	800457e <I2C_Master_ADDR+0x2d0>
 8004578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457a:	2b20      	cmp	r3, #32
 800457c:	d107      	bne.n	800458e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800458c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458e:	2300      	movs	r3, #0
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80045aa:	e00b      	b.n	80045c4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
}
 80045c2:	e7ff      	b.n	80045c4 <I2C_Master_ADDR+0x316>
 80045c4:	bf00      	nop
 80045c6:	3744      	adds	r7, #68	@ 0x44
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d02b      	beq.n	8004642 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ee:	781a      	ldrb	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d114      	bne.n	8004642 <I2C_SlaveTransmit_TXE+0x72>
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	2b29      	cmp	r3, #41	@ 0x29
 800461c:	d111      	bne.n	8004642 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800462c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2221      	movs	r2, #33	@ 0x21
 8004632:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2228      	movs	r2, #40	@ 0x28
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f7ff f9cb 	bl	80039d8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d011      	beq.n	8004680 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	781a      	ldrb	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800469a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d02c      	beq.n	8004700 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691a      	ldr	r2, [r3, #16]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	b2d2      	uxtb	r2, r2
 80046b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d114      	bne.n	8004700 <I2C_SlaveReceive_RXNE+0x74>
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80046da:	d111      	bne.n	8004700 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2222      	movs	r2, #34	@ 0x22
 80046f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2228      	movs	r2, #40	@ 0x28
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff f976 	bl	80039ec <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004714:	b29b      	uxth	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d012      	beq.n	8004740 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004736:	b29b      	uxth	r3, r3
 8004738:	3b01      	subs	r3, #1
 800473a:	b29a      	uxth	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004756:	2300      	movs	r3, #0
 8004758:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004760:	b2db      	uxtb	r3, r3
 8004762:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004766:	2b28      	cmp	r3, #40	@ 0x28
 8004768:	d127      	bne.n	80047ba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004778:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	089b      	lsrs	r3, r3, #2
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004786:	2301      	movs	r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	09db      	lsrs	r3, r3, #7
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d103      	bne.n	800479e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	81bb      	strh	r3, [r7, #12]
 800479c:	e002      	b.n	80047a4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80047ac:	89ba      	ldrh	r2, [r7, #12]
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	4619      	mov	r1, r3
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7ff f924 	bl	8003a00 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80047b8:	e00e      	b.n	80047d8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ba:	2300      	movs	r3, #0
 80047bc:	60bb      	str	r3, [r7, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80047d8:	bf00      	nop
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047ee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80047fe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004800:	2300      	movs	r3, #0
 8004802:	60bb      	str	r3, [r7, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]
 800481c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800482c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800483c:	d172      	bne.n	8004924 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b22      	cmp	r3, #34	@ 0x22
 8004842:	d002      	beq.n	800484a <I2C_Slave_STOPF+0x6a>
 8004844:	7bfb      	ldrb	r3, [r7, #15]
 8004846:	2b2a      	cmp	r3, #42	@ 0x2a
 8004848:	d135      	bne.n	80048b6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	b29a      	uxth	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004866:	f043 0204 	orr.w	r2, r3, #4
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800487c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe fbc9 	bl	800301a <HAL_DMA_GetState>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d049      	beq.n	8004922 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004892:	4a69      	ldr	r2, [pc, #420]	@ (8004a38 <I2C_Slave_STOPF+0x258>)
 8004894:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489a:	4618      	mov	r0, r3
 800489c:	f7fe fb9b 	bl	8002fd6 <HAL_DMA_Abort_IT>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d03d      	beq.n	8004922 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048b0:	4610      	mov	r0, r2
 80048b2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048b4:	e035      	b.n	8004922 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	b29a      	uxth	r2, r3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d005      	beq.n	80048da <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d2:	f043 0204 	orr.w	r2, r3, #4
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048e8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe fb93 	bl	800301a <HAL_DMA_GetState>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d014      	beq.n	8004924 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048fe:	4a4e      	ldr	r2, [pc, #312]	@ (8004a38 <I2C_Slave_STOPF+0x258>)
 8004900:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004906:	4618      	mov	r0, r3
 8004908:	f7fe fb65 	bl	8002fd6 <HAL_DMA_Abort_IT>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d008      	beq.n	8004924 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800491c:	4610      	mov	r0, r2
 800491e:	4798      	blx	r3
 8004920:	e000      	b.n	8004924 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004922:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d03e      	beq.n	80049ac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	f003 0304 	and.w	r3, r3, #4
 8004938:	2b04      	cmp	r3, #4
 800493a:	d112      	bne.n	8004962 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496c:	2b40      	cmp	r3, #64	@ 0x40
 800496e:	d112      	bne.n	8004996 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691a      	ldr	r2, [r3, #16]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a4:	f043 0204 	orr.w	r2, r3, #4
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f843 	bl	8004a40 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80049ba:	e039      	b.n	8004a30 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2b2a      	cmp	r3, #42	@ 0x2a
 80049c0:	d109      	bne.n	80049d6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2228      	movs	r2, #40	@ 0x28
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff f80b 	bl	80039ec <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b28      	cmp	r3, #40	@ 0x28
 80049e0:	d111      	bne.n	8004a06 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a15      	ldr	r2, [pc, #84]	@ (8004a3c <I2C_Slave_STOPF+0x25c>)
 80049e6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff f80c 	bl	8003a1c <HAL_I2C_ListenCpltCallback>
}
 8004a04:	e014      	b.n	8004a30 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0a:	2b22      	cmp	r3, #34	@ 0x22
 8004a0c:	d002      	beq.n	8004a14 <I2C_Slave_STOPF+0x234>
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b22      	cmp	r3, #34	@ 0x22
 8004a12:	d10d      	bne.n	8004a30 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fe ffde 	bl	80039ec <HAL_I2C_SlaveRxCpltCallback>
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	08004ca5 	.word	0x08004ca5
 8004a3c:	ffff0000 	.word	0xffff0000

08004a40 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a4e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a56:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a58:	7bbb      	ldrb	r3, [r7, #14]
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d002      	beq.n	8004a64 <I2C_ITError+0x24>
 8004a5e:	7bbb      	ldrb	r3, [r7, #14]
 8004a60:	2b40      	cmp	r3, #64	@ 0x40
 8004a62:	d10a      	bne.n	8004a7a <I2C_ITError+0x3a>
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
 8004a66:	2b22      	cmp	r3, #34	@ 0x22
 8004a68:	d107      	bne.n	8004a7a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a78:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004a80:	2b28      	cmp	r3, #40	@ 0x28
 8004a82:	d107      	bne.n	8004a94 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2228      	movs	r2, #40	@ 0x28
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a92:	e015      	b.n	8004ac0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004aa2:	d00a      	beq.n	8004aba <I2C_ITError+0x7a>
 8004aa4:	7bfb      	ldrb	r3, [r7, #15]
 8004aa6:	2b60      	cmp	r3, #96	@ 0x60
 8004aa8:	d007      	beq.n	8004aba <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2220      	movs	r2, #32
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004aca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ace:	d162      	bne.n	8004b96 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ade:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d020      	beq.n	8004b30 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004af2:	4a6a      	ldr	r2, [pc, #424]	@ (8004c9c <I2C_ITError+0x25c>)
 8004af4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fe fa6b 	bl	8002fd6 <HAL_DMA_Abort_IT>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 8089 	beq.w	8004c1a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0201 	bic.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	4798      	blx	r3
 8004b2e:	e074      	b.n	8004c1a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b34:	4a59      	ldr	r2, [pc, #356]	@ (8004c9c <I2C_ITError+0x25c>)
 8004b36:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fe fa4a 	bl	8002fd6 <HAL_DMA_Abort_IT>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d068      	beq.n	8004c1a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b52:	2b40      	cmp	r3, #64	@ 0x40
 8004b54:	d10b      	bne.n	8004b6e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691a      	ldr	r2, [r3, #16]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b60:	b2d2      	uxtb	r2, r2
 8004b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0201 	bic.w	r2, r2, #1
 8004b7c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b90:	4610      	mov	r0, r2
 8004b92:	4798      	blx	r3
 8004b94:	e041      	b.n	8004c1a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b60      	cmp	r3, #96	@ 0x60
 8004ba0:	d125      	bne.n	8004bee <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bba:	2b40      	cmp	r3, #64	@ 0x40
 8004bbc:	d10b      	bne.n	8004bd6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd0:	1c5a      	adds	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7fe ff40 	bl	8003a6c <HAL_I2C_AbortCpltCallback>
 8004bec:	e015      	b.n	8004c1a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf8:	2b40      	cmp	r3, #64	@ 0x40
 8004bfa:	d10b      	bne.n	8004c14 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	b2d2      	uxtb	r2, r2
 8004c08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7fe ff1f 	bl	8003a58 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10e      	bne.n	8004c48 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d109      	bne.n	8004c48 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d104      	bne.n	8004c48 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d007      	beq.n	8004c58 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c56:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c5e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d113      	bne.n	8004c94 <I2C_ITError+0x254>
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	2b28      	cmp	r3, #40	@ 0x28
 8004c70:	d110      	bne.n	8004c94 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca0 <I2C_ITError+0x260>)
 8004c76:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fe fec4 	bl	8003a1c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	08004ca5 	.word	0x08004ca5
 8004ca0:	ffff0000 	.word	0xffff0000

08004ca4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cbc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cbe:	4b4b      	ldr	r3, [pc, #300]	@ (8004dec <I2C_DMAAbort+0x148>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	08db      	lsrs	r3, r3, #3
 8004cc4:	4a4a      	ldr	r2, [pc, #296]	@ (8004df0 <I2C_DMAAbort+0x14c>)
 8004cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cca:	0a1a      	lsrs	r2, r3, #8
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	00da      	lsls	r2, r3, #3
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d106      	bne.n	8004cec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce2:	f043 0220 	orr.w	r2, r3, #32
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004cea:	e00a      	b.n	8004d02 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d00:	d0ea      	beq.n	8004cd8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d0e:	2200      	movs	r2, #0
 8004d10:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d1e:	2200      	movs	r2, #0
 8004d20:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d30:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	2200      	movs	r2, #0
 8004d36:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d44:	2200      	movs	r2, #0
 8004d46:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d54:	2200      	movs	r2, #0
 8004d56:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b60      	cmp	r3, #96	@ 0x60
 8004d72:	d10e      	bne.n	8004d92 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2200      	movs	r2, #0
 8004d88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d8a:	6978      	ldr	r0, [r7, #20]
 8004d8c:	f7fe fe6e 	bl	8003a6c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d90:	e027      	b.n	8004de2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004d92:	7cfb      	ldrb	r3, [r7, #19]
 8004d94:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d98:	2b28      	cmp	r3, #40	@ 0x28
 8004d9a:	d117      	bne.n	8004dcc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0201 	orr.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004dba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	2228      	movs	r2, #40	@ 0x28
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004dca:	e007      	b.n	8004ddc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004ddc:	6978      	ldr	r0, [r7, #20]
 8004dde:	f7fe fe3b 	bl	8003a58 <HAL_I2C_ErrorCallback>
}
 8004de2:	bf00      	nop
 8004de4:	3718      	adds	r7, #24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20000000 	.word	0x20000000
 8004df0:	14f8b589 	.word	0x14f8b589

08004df4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e00:	4b13      	ldr	r3, [pc, #76]	@ (8004e50 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	08db      	lsrs	r3, r3, #3
 8004e06:	4a13      	ldr	r2, [pc, #76]	@ (8004e54 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e08:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0c:	0a1a      	lsrs	r2, r3, #8
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d107      	bne.n	8004e32 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e008      	b.n	8004e44 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e40:	d0e9      	beq.n	8004e16 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	20000000 	.word	0x20000000
 8004e54:	14f8b589 	.word	0x14f8b589

08004e58 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b083      	sub	sp, #12
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004e68:	d103      	bne.n	8004e72 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e70:	e007      	b.n	8004e82 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e76:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004e7a:	d102      	bne.n	8004e82 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2208      	movs	r2, #8
 8004e80:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004e82:	bf00      	nop
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
	...

08004e90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e267      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d075      	beq.n	8004f9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004eae:	4b88      	ldr	r3, [pc, #544]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eba:	4b85      	ldr	r3, [pc, #532]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d112      	bne.n	8004eec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ec6:	4b82      	ldr	r3, [pc, #520]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ed2:	d10b      	bne.n	8004eec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed4:	4b7e      	ldr	r3, [pc, #504]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d05b      	beq.n	8004f98 <HAL_RCC_OscConfig+0x108>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d157      	bne.n	8004f98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e242      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCC_OscConfig+0x74>
 8004ef6:	4b76      	ldr	r3, [pc, #472]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a75      	ldr	r2, [pc, #468]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004efc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e01d      	b.n	8004f40 <HAL_RCC_OscConfig+0xb0>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x98>
 8004f0e:	4b70      	ldr	r3, [pc, #448]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a6f      	ldr	r2, [pc, #444]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a6c      	ldr	r2, [pc, #432]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f24:	6013      	str	r3, [r2, #0]
 8004f26:	e00b      	b.n	8004f40 <HAL_RCC_OscConfig+0xb0>
 8004f28:	4b69      	ldr	r3, [pc, #420]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a68      	ldr	r2, [pc, #416]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	4b66      	ldr	r3, [pc, #408]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a65      	ldr	r2, [pc, #404]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d013      	beq.n	8004f70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fd ff04 	bl	8002d54 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f50:	f7fd ff00 	bl	8002d54 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	@ 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e207      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f62:	4b5b      	ldr	r3, [pc, #364]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d0f0      	beq.n	8004f50 <HAL_RCC_OscConfig+0xc0>
 8004f6e:	e014      	b.n	8004f9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f70:	f7fd fef0 	bl	8002d54 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f78:	f7fd feec 	bl	8002d54 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b64      	cmp	r3, #100	@ 0x64
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e1f3      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8a:	4b51      	ldr	r3, [pc, #324]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0xe8>
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d063      	beq.n	800506e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00b      	beq.n	8004fca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fb2:	4b47      	ldr	r3, [pc, #284]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d11c      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fbe:	4b44      	ldr	r3, [pc, #272]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d116      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fca:	4b41      	ldr	r3, [pc, #260]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d005      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x152>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e1c7      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4937      	ldr	r1, [pc, #220]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ff6:	e03a      	b.n	800506e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d020      	beq.n	8005042 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005000:	4b34      	ldr	r3, [pc, #208]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005002:	2201      	movs	r2, #1
 8005004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fd fea5 	bl	8002d54 <HAL_GetTick>
 800500a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500c:	e008      	b.n	8005020 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800500e:	f7fd fea1 	bl	8002d54 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	2b02      	cmp	r3, #2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e1a8      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005020:	4b2b      	ldr	r3, [pc, #172]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f0      	beq.n	800500e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502c:	4b28      	ldr	r3, [pc, #160]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	691b      	ldr	r3, [r3, #16]
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	4925      	ldr	r1, [pc, #148]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 800503c:	4313      	orrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]
 8005040:	e015      	b.n	800506e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005042:	4b24      	ldr	r3, [pc, #144]	@ (80050d4 <HAL_RCC_OscConfig+0x244>)
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005048:	f7fd fe84 	bl	8002d54 <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504e:	e008      	b.n	8005062 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005050:	f7fd fe80 	bl	8002d54 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d901      	bls.n	8005062 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	e187      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005062:	4b1b      	ldr	r3, [pc, #108]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0302 	and.w	r3, r3, #2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1f0      	bne.n	8005050 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d036      	beq.n	80050e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d016      	beq.n	80050b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005082:	4b15      	ldr	r3, [pc, #84]	@ (80050d8 <HAL_RCC_OscConfig+0x248>)
 8005084:	2201      	movs	r2, #1
 8005086:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005088:	f7fd fe64 	bl	8002d54 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005090:	f7fd fe60 	bl	8002d54 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e167      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a2:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <HAL_RCC_OscConfig+0x240>)
 80050a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x200>
 80050ae:	e01b      	b.n	80050e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b0:	4b09      	ldr	r3, [pc, #36]	@ (80050d8 <HAL_RCC_OscConfig+0x248>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b6:	f7fd fe4d 	bl	8002d54 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050bc:	e00e      	b.n	80050dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050be:	f7fd fe49 	bl	8002d54 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d907      	bls.n	80050dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e150      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
 80050d0:	40023800 	.word	0x40023800
 80050d4:	42470000 	.word	0x42470000
 80050d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050dc:	4b88      	ldr	r3, [pc, #544]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80050de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1ea      	bne.n	80050be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 8097 	beq.w	8005224 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050f6:	2300      	movs	r3, #0
 80050f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050fa:	4b81      	ldr	r3, [pc, #516]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10f      	bne.n	8005126 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005106:	2300      	movs	r3, #0
 8005108:	60bb      	str	r3, [r7, #8]
 800510a:	4b7d      	ldr	r3, [pc, #500]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	4a7c      	ldr	r2, [pc, #496]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005114:	6413      	str	r3, [r2, #64]	@ 0x40
 8005116:	4b7a      	ldr	r3, [pc, #488]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800511e:	60bb      	str	r3, [r7, #8]
 8005120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005122:	2301      	movs	r3, #1
 8005124:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005126:	4b77      	ldr	r3, [pc, #476]	@ (8005304 <HAL_RCC_OscConfig+0x474>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800512e:	2b00      	cmp	r3, #0
 8005130:	d118      	bne.n	8005164 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005132:	4b74      	ldr	r3, [pc, #464]	@ (8005304 <HAL_RCC_OscConfig+0x474>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a73      	ldr	r2, [pc, #460]	@ (8005304 <HAL_RCC_OscConfig+0x474>)
 8005138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800513c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513e:	f7fd fe09 	bl	8002d54 <HAL_GetTick>
 8005142:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005144:	e008      	b.n	8005158 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005146:	f7fd fe05 	bl	8002d54 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e10c      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005158:	4b6a      	ldr	r3, [pc, #424]	@ (8005304 <HAL_RCC_OscConfig+0x474>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0f0      	beq.n	8005146 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d106      	bne.n	800517a <HAL_RCC_OscConfig+0x2ea>
 800516c:	4b64      	ldr	r3, [pc, #400]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005170:	4a63      	ldr	r2, [pc, #396]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005172:	f043 0301 	orr.w	r3, r3, #1
 8005176:	6713      	str	r3, [r2, #112]	@ 0x70
 8005178:	e01c      	b.n	80051b4 <HAL_RCC_OscConfig+0x324>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b05      	cmp	r3, #5
 8005180:	d10c      	bne.n	800519c <HAL_RCC_OscConfig+0x30c>
 8005182:	4b5f      	ldr	r3, [pc, #380]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005186:	4a5e      	ldr	r2, [pc, #376]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005188:	f043 0304 	orr.w	r3, r3, #4
 800518c:	6713      	str	r3, [r2, #112]	@ 0x70
 800518e:	4b5c      	ldr	r3, [pc, #368]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005190:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005192:	4a5b      	ldr	r2, [pc, #364]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005194:	f043 0301 	orr.w	r3, r3, #1
 8005198:	6713      	str	r3, [r2, #112]	@ 0x70
 800519a:	e00b      	b.n	80051b4 <HAL_RCC_OscConfig+0x324>
 800519c:	4b58      	ldr	r3, [pc, #352]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a0:	4a57      	ldr	r2, [pc, #348]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a8:	4b55      	ldr	r3, [pc, #340]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ac:	4a54      	ldr	r2, [pc, #336]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80051ae:	f023 0304 	bic.w	r3, r3, #4
 80051b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d015      	beq.n	80051e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051bc:	f7fd fdca 	bl	8002d54 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c2:	e00a      	b.n	80051da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c4:	f7fd fdc6 	bl	8002d54 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e0cb      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051da:	4b49      	ldr	r3, [pc, #292]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0ee      	beq.n	80051c4 <HAL_RCC_OscConfig+0x334>
 80051e6:	e014      	b.n	8005212 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e8:	f7fd fdb4 	bl	8002d54 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051ee:	e00a      	b.n	8005206 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f0:	f7fd fdb0 	bl	8002d54 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e0b5      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005206:	4b3e      	ldr	r3, [pc, #248]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1ee      	bne.n	80051f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005212:	7dfb      	ldrb	r3, [r7, #23]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d105      	bne.n	8005224 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005218:	4b39      	ldr	r3, [pc, #228]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 800521a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521c:	4a38      	ldr	r2, [pc, #224]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 800521e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005222:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f000 80a1 	beq.w	8005370 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800522e:	4b34      	ldr	r3, [pc, #208]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b08      	cmp	r3, #8
 8005238:	d05c      	beq.n	80052f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d141      	bne.n	80052c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005242:	4b31      	ldr	r3, [pc, #196]	@ (8005308 <HAL_RCC_OscConfig+0x478>)
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005248:	f7fd fd84 	bl	8002d54 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005250:	f7fd fd80 	bl	8002d54 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e087      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005262:	4b27      	ldr	r3, [pc, #156]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f0      	bne.n	8005250 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69da      	ldr	r2, [r3, #28]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	431a      	orrs	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527c:	019b      	lsls	r3, r3, #6
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	3b01      	subs	r3, #1
 8005288:	041b      	lsls	r3, r3, #16
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	061b      	lsls	r3, r3, #24
 8005292:	491b      	ldr	r1, [pc, #108]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 8005294:	4313      	orrs	r3, r2
 8005296:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005298:	4b1b      	ldr	r3, [pc, #108]	@ (8005308 <HAL_RCC_OscConfig+0x478>)
 800529a:	2201      	movs	r2, #1
 800529c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529e:	f7fd fd59 	bl	8002d54 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a6:	f7fd fd55 	bl	8002d54 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e05c      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b8:	4b11      	ldr	r3, [pc, #68]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d0f0      	beq.n	80052a6 <HAL_RCC_OscConfig+0x416>
 80052c4:	e054      	b.n	8005370 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052c6:	4b10      	ldr	r3, [pc, #64]	@ (8005308 <HAL_RCC_OscConfig+0x478>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052cc:	f7fd fd42 	bl	8002d54 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d4:	f7fd fd3e 	bl	8002d54 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e045      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e6:	4b06      	ldr	r3, [pc, #24]	@ (8005300 <HAL_RCC_OscConfig+0x470>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x444>
 80052f2:	e03d      	b.n	8005370 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d107      	bne.n	800530c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e038      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
 8005300:	40023800 	.word	0x40023800
 8005304:	40007000 	.word	0x40007000
 8005308:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800530c:	4b1b      	ldr	r3, [pc, #108]	@ (800537c <HAL_RCC_OscConfig+0x4ec>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d028      	beq.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005324:	429a      	cmp	r2, r3
 8005326:	d121      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005332:	429a      	cmp	r2, r3
 8005334:	d11a      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800533c:	4013      	ands	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005342:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005344:	4293      	cmp	r3, r2
 8005346:	d111      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	3b01      	subs	r3, #1
 8005356:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005358:	429a      	cmp	r2, r3
 800535a:	d107      	bne.n	800536c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005366:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005368:	429a      	cmp	r2, r3
 800536a:	d001      	beq.n	8005370 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3718      	adds	r7, #24
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	40023800 	.word	0x40023800

08005380 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
 8005388:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d101      	bne.n	8005394 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e0cc      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005394:	4b68      	ldr	r3, [pc, #416]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d90c      	bls.n	80053bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053a2:	4b65      	ldr	r3, [pc, #404]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b63      	ldr	r3, [pc, #396]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e0b8      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d020      	beq.n	800540a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053d4:	4b59      	ldr	r3, [pc, #356]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	4a58      	ldr	r2, [pc, #352]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053ec:	4b53      	ldr	r3, [pc, #332]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a52      	ldr	r2, [pc, #328]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f8:	4b50      	ldr	r3, [pc, #320]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	494d      	ldr	r1, [pc, #308]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	4313      	orrs	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d044      	beq.n	80054a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d107      	bne.n	800542e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800541e:	4b47      	ldr	r3, [pc, #284]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d119      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e07f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b02      	cmp	r3, #2
 8005434:	d003      	beq.n	800543e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800543a:	2b03      	cmp	r3, #3
 800543c:	d107      	bne.n	800544e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800543e:	4b3f      	ldr	r3, [pc, #252]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e06f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800544e:	4b3b      	ldr	r3, [pc, #236]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e067      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800545e:	4b37      	ldr	r3, [pc, #220]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f023 0203 	bic.w	r2, r3, #3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	4934      	ldr	r1, [pc, #208]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 800546c:	4313      	orrs	r3, r2
 800546e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005470:	f7fd fc70 	bl	8002d54 <HAL_GetTick>
 8005474:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005476:	e00a      	b.n	800548e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005478:	f7fd fc6c 	bl	8002d54 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005486:	4293      	cmp	r3, r2
 8005488:	d901      	bls.n	800548e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e04f      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	4b2b      	ldr	r3, [pc, #172]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 020c 	and.w	r2, r3, #12
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	429a      	cmp	r2, r3
 800549e:	d1eb      	bne.n	8005478 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054a0:	4b25      	ldr	r3, [pc, #148]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d20c      	bcs.n	80054c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ae:	4b22      	ldr	r3, [pc, #136]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b20      	ldr	r3, [pc, #128]	@ (8005538 <HAL_RCC_ClockConfig+0x1b8>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0307 	and.w	r3, r3, #7
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e032      	b.n	800552e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d008      	beq.n	80054e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054d4:	4b19      	ldr	r3, [pc, #100]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	4916      	ldr	r1, [pc, #88]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0308 	and.w	r3, r3, #8
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054f2:	4b12      	ldr	r3, [pc, #72]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	490e      	ldr	r1, [pc, #56]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	4313      	orrs	r3, r2
 8005504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005506:	f000 f821 	bl	800554c <HAL_RCC_GetSysClockFreq>
 800550a:	4602      	mov	r2, r0
 800550c:	4b0b      	ldr	r3, [pc, #44]	@ (800553c <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	091b      	lsrs	r3, r3, #4
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	490a      	ldr	r1, [pc, #40]	@ (8005540 <HAL_RCC_ClockConfig+0x1c0>)
 8005518:	5ccb      	ldrb	r3, [r1, r3]
 800551a:	fa22 f303 	lsr.w	r3, r2, r3
 800551e:	4a09      	ldr	r2, [pc, #36]	@ (8005544 <HAL_RCC_ClockConfig+0x1c4>)
 8005520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005522:	4b09      	ldr	r3, [pc, #36]	@ (8005548 <HAL_RCC_ClockConfig+0x1c8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4618      	mov	r0, r3
 8005528:	f7fd fbd0 	bl	8002ccc <HAL_InitTick>

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40023c00 	.word	0x40023c00
 800553c:	40023800 	.word	0x40023800
 8005540:	08006e9c 	.word	0x08006e9c
 8005544:	20000000 	.word	0x20000000
 8005548:	20000004 	.word	0x20000004

0800554c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800554c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005550:	b090      	sub	sp, #64	@ 0x40
 8005552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005564:	4b59      	ldr	r3, [pc, #356]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x180>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 030c 	and.w	r3, r3, #12
 800556c:	2b08      	cmp	r3, #8
 800556e:	d00d      	beq.n	800558c <HAL_RCC_GetSysClockFreq+0x40>
 8005570:	2b08      	cmp	r3, #8
 8005572:	f200 80a1 	bhi.w	80056b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x34>
 800557a:	2b04      	cmp	r3, #4
 800557c:	d003      	beq.n	8005586 <HAL_RCC_GetSysClockFreq+0x3a>
 800557e:	e09b      	b.n	80056b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005580:	4b53      	ldr	r3, [pc, #332]	@ (80056d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005582:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005584:	e09b      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005586:	4b53      	ldr	r3, [pc, #332]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005588:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800558a:	e098      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800558c:	4b4f      	ldr	r3, [pc, #316]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x180>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005594:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005596:	4b4d      	ldr	r3, [pc, #308]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x180>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d028      	beq.n	80055f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a2:	4b4a      	ldr	r3, [pc, #296]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x180>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	2200      	movs	r2, #0
 80055aa:	623b      	str	r3, [r7, #32]
 80055ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055b4:	2100      	movs	r1, #0
 80055b6:	4b47      	ldr	r3, [pc, #284]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80055b8:	fb03 f201 	mul.w	r2, r3, r1
 80055bc:	2300      	movs	r3, #0
 80055be:	fb00 f303 	mul.w	r3, r0, r3
 80055c2:	4413      	add	r3, r2
 80055c4:	4a43      	ldr	r2, [pc, #268]	@ (80056d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80055c6:	fba0 1202 	umull	r1, r2, r0, r2
 80055ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055cc:	460a      	mov	r2, r1
 80055ce:	62ba      	str	r2, [r7, #40]	@ 0x28
 80055d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055d2:	4413      	add	r3, r2
 80055d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d8:	2200      	movs	r2, #0
 80055da:	61bb      	str	r3, [r7, #24]
 80055dc:	61fa      	str	r2, [r7, #28]
 80055de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80055e6:	f7fb fad1 	bl	8000b8c <__aeabi_uldivmod>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4613      	mov	r3, r2
 80055f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055f2:	e053      	b.n	800569c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055f4:	4b35      	ldr	r3, [pc, #212]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x180>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	099b      	lsrs	r3, r3, #6
 80055fa:	2200      	movs	r2, #0
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	617a      	str	r2, [r7, #20]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005606:	f04f 0b00 	mov.w	fp, #0
 800560a:	4652      	mov	r2, sl
 800560c:	465b      	mov	r3, fp
 800560e:	f04f 0000 	mov.w	r0, #0
 8005612:	f04f 0100 	mov.w	r1, #0
 8005616:	0159      	lsls	r1, r3, #5
 8005618:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800561c:	0150      	lsls	r0, r2, #5
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	ebb2 080a 	subs.w	r8, r2, sl
 8005626:	eb63 090b 	sbc.w	r9, r3, fp
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	f04f 0300 	mov.w	r3, #0
 8005632:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005636:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800563a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800563e:	ebb2 0408 	subs.w	r4, r2, r8
 8005642:	eb63 0509 	sbc.w	r5, r3, r9
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	00eb      	lsls	r3, r5, #3
 8005650:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005654:	00e2      	lsls	r2, r4, #3
 8005656:	4614      	mov	r4, r2
 8005658:	461d      	mov	r5, r3
 800565a:	eb14 030a 	adds.w	r3, r4, sl
 800565e:	603b      	str	r3, [r7, #0]
 8005660:	eb45 030b 	adc.w	r3, r5, fp
 8005664:	607b      	str	r3, [r7, #4]
 8005666:	f04f 0200 	mov.w	r2, #0
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005672:	4629      	mov	r1, r5
 8005674:	028b      	lsls	r3, r1, #10
 8005676:	4621      	mov	r1, r4
 8005678:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800567c:	4621      	mov	r1, r4
 800567e:	028a      	lsls	r2, r1, #10
 8005680:	4610      	mov	r0, r2
 8005682:	4619      	mov	r1, r3
 8005684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005686:	2200      	movs	r2, #0
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	60fa      	str	r2, [r7, #12]
 800568c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005690:	f7fb fa7c 	bl	8000b8c <__aeabi_uldivmod>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	4613      	mov	r3, r2
 800569a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800569c:	4b0b      	ldr	r3, [pc, #44]	@ (80056cc <HAL_RCC_GetSysClockFreq+0x180>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	0c1b      	lsrs	r3, r3, #16
 80056a2:	f003 0303 	and.w	r3, r3, #3
 80056a6:	3301      	adds	r3, #1
 80056a8:	005b      	lsls	r3, r3, #1
 80056aa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80056ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056b6:	e002      	b.n	80056be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056b8:	4b05      	ldr	r3, [pc, #20]	@ (80056d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80056ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3740      	adds	r7, #64	@ 0x40
 80056c4:	46bd      	mov	sp, r7
 80056c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056ca:	bf00      	nop
 80056cc:	40023800 	.word	0x40023800
 80056d0:	00f42400 	.word	0x00f42400
 80056d4:	017d7840 	.word	0x017d7840

080056d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056dc:	4b03      	ldr	r3, [pc, #12]	@ (80056ec <HAL_RCC_GetHCLKFreq+0x14>)
 80056de:	681b      	ldr	r3, [r3, #0]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	20000000 	.word	0x20000000

080056f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056f4:	f7ff fff0 	bl	80056d8 <HAL_RCC_GetHCLKFreq>
 80056f8:	4602      	mov	r2, r0
 80056fa:	4b05      	ldr	r3, [pc, #20]	@ (8005710 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	0a9b      	lsrs	r3, r3, #10
 8005700:	f003 0307 	and.w	r3, r3, #7
 8005704:	4903      	ldr	r1, [pc, #12]	@ (8005714 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005706:	5ccb      	ldrb	r3, [r1, r3]
 8005708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800570c:	4618      	mov	r0, r3
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40023800 	.word	0x40023800
 8005714:	08006eac 	.word	0x08006eac

08005718 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e07b      	b.n	8005822 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572e:	2b00      	cmp	r3, #0
 8005730:	d108      	bne.n	8005744 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800573a:	d009      	beq.n	8005750 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	61da      	str	r2, [r3, #28]
 8005742:	e005      	b.n	8005750 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fd f972 	bl	8002a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005786:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005798:	431a      	orrs	r2, r3
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057c0:	431a      	orrs	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057d4:	ea42 0103 	orr.w	r1, r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057dc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	0c1b      	lsrs	r3, r3, #16
 80057ee:	f003 0104 	and.w	r1, r3, #4
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	f003 0210 	and.w	r2, r3, #16
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005810:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b088      	sub	sp, #32
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	603b      	str	r3, [r7, #0]
 8005836:	4613      	mov	r3, r2
 8005838:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800583a:	f7fd fa8b 	bl	8002d54 <HAL_GetTick>
 800583e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005840:	88fb      	ldrh	r3, [r7, #6]
 8005842:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	d001      	beq.n	8005854 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005850:	2302      	movs	r3, #2
 8005852:	e12a      	b.n	8005aaa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <HAL_SPI_Transmit+0x36>
 800585a:	88fb      	ldrh	r3, [r7, #6]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e122      	b.n	8005aaa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800586a:	2b01      	cmp	r3, #1
 800586c:	d101      	bne.n	8005872 <HAL_SPI_Transmit+0x48>
 800586e:	2302      	movs	r3, #2
 8005870:	e11b      	b.n	8005aaa <HAL_SPI_Transmit+0x280>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2203      	movs	r2, #3
 800587e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	88fa      	ldrh	r2, [r7, #6]
 8005892:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	88fa      	ldrh	r2, [r7, #6]
 8005898:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058c0:	d10f      	bne.n	80058e2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ec:	2b40      	cmp	r3, #64	@ 0x40
 80058ee:	d007      	beq.n	8005900 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005908:	d152      	bne.n	80059b0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <HAL_SPI_Transmit+0xee>
 8005912:	8b7b      	ldrh	r3, [r7, #26]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d145      	bne.n	80059a4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800591c:	881a      	ldrh	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005928:	1c9a      	adds	r2, r3, #2
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005932:	b29b      	uxth	r3, r3
 8005934:	3b01      	subs	r3, #1
 8005936:	b29a      	uxth	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800593c:	e032      	b.n	80059a4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b02      	cmp	r3, #2
 800594a:	d112      	bne.n	8005972 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005950:	881a      	ldrh	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595c:	1c9a      	adds	r2, r3, #2
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005970:	e018      	b.n	80059a4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005972:	f7fd f9ef 	bl	8002d54 <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	429a      	cmp	r2, r3
 8005980:	d803      	bhi.n	800598a <HAL_SPI_Transmit+0x160>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005988:	d102      	bne.n	8005990 <HAL_SPI_Transmit+0x166>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d109      	bne.n	80059a4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e082      	b.n	8005aaa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1c7      	bne.n	800593e <HAL_SPI_Transmit+0x114>
 80059ae:	e053      	b.n	8005a58 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_SPI_Transmit+0x194>
 80059b8:	8b7b      	ldrh	r3, [r7, #26]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d147      	bne.n	8005a4e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	330c      	adds	r3, #12
 80059c8:	7812      	ldrb	r2, [r2, #0]
 80059ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80059e4:	e033      	b.n	8005a4e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d113      	bne.n	8005a1c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	330c      	adds	r3, #12
 80059fe:	7812      	ldrb	r2, [r2, #0]
 8005a00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a1a:	e018      	b.n	8005a4e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a1c:	f7fd f99a 	bl	8002d54 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d803      	bhi.n	8005a34 <HAL_SPI_Transmit+0x20a>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a32:	d102      	bne.n	8005a3a <HAL_SPI_Transmit+0x210>
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d109      	bne.n	8005a4e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e02d      	b.n	8005aaa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1c6      	bne.n	80059e6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a58:	69fa      	ldr	r2, [r7, #28]
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fbd9 	bl	8006214 <SPI_EndRxTxTransaction>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d10a      	bne.n	8005a8c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a76:	2300      	movs	r3, #0
 8005a78:	617b      	str	r3, [r7, #20]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
  }
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3720      	adds	r7, #32
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b088      	sub	sp, #32
 8005ab6:	af02      	add	r7, sp, #8
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	603b      	str	r3, [r7, #0]
 8005abe:	4613      	mov	r3, r2
 8005ac0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d001      	beq.n	8005ad2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e104      	b.n	8005cdc <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ada:	d112      	bne.n	8005b02 <HAL_SPI_Receive+0x50>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10e      	bne.n	8005b02 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2204      	movs	r2, #4
 8005ae8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005aec:	88fa      	ldrh	r2, [r7, #6]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	4613      	mov	r3, r2
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 f8f3 	bl	8005ce4 <HAL_SPI_TransmitReceive>
 8005afe:	4603      	mov	r3, r0
 8005b00:	e0ec      	b.n	8005cdc <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b02:	f7fd f927 	bl	8002d54 <HAL_GetTick>
 8005b06:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <HAL_SPI_Receive+0x62>
 8005b0e:	88fb      	ldrh	r3, [r7, #6]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e0e1      	b.n	8005cdc <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d101      	bne.n	8005b26 <HAL_SPI_Receive+0x74>
 8005b22:	2302      	movs	r3, #2
 8005b24:	e0da      	b.n	8005cdc <HAL_SPI_Receive+0x22a>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2204      	movs	r2, #4
 8005b32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	88fa      	ldrh	r2, [r7, #6]
 8005b46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	88fa      	ldrh	r2, [r7, #6]
 8005b4c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b74:	d10f      	bne.n	8005b96 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005b94:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ba0:	2b40      	cmp	r3, #64	@ 0x40
 8005ba2:	d007      	beq.n	8005bb4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bb2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d170      	bne.n	8005c9e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005bbc:	e035      	b.n	8005c2a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d115      	bne.n	8005bf8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f103 020c 	add.w	r2, r3, #12
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd8:	7812      	ldrb	r2, [r2, #0]
 8005bda:	b2d2      	uxtb	r2, r2
 8005bdc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be2:	1c5a      	adds	r2, r3, #1
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005bf6:	e018      	b.n	8005c2a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bf8:	f7fd f8ac 	bl	8002d54 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d803      	bhi.n	8005c10 <HAL_SPI_Receive+0x15e>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0e:	d102      	bne.n	8005c16 <HAL_SPI_Receive+0x164>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e058      	b.n	8005cdc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d1c4      	bne.n	8005bbe <HAL_SPI_Receive+0x10c>
 8005c34:	e038      	b.n	8005ca8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d113      	bne.n	8005c6c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4e:	b292      	uxth	r2, r2
 8005c50:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c56:	1c9a      	adds	r2, r3, #2
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c6a:	e018      	b.n	8005c9e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c6c:	f7fd f872 	bl	8002d54 <HAL_GetTick>
 8005c70:	4602      	mov	r2, r0
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	1ad3      	subs	r3, r2, r3
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d803      	bhi.n	8005c84 <HAL_SPI_Receive+0x1d2>
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c82:	d102      	bne.n	8005c8a <HAL_SPI_Receive+0x1d8>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d109      	bne.n	8005c9e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e01e      	b.n	8005cdc <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1c6      	bne.n	8005c36 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 fa4b 	bl	8006148 <SPI_EndRxTransaction>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d001      	beq.n	8005cda <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005cda:	2300      	movs	r3, #0
  }
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08a      	sub	sp, #40	@ 0x28
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
 8005cf0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cf6:	f7fd f82d 	bl	8002d54 <HAL_GetTick>
 8005cfa:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d02:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005d0a:	887b      	ldrh	r3, [r7, #2]
 8005d0c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d0e:	7ffb      	ldrb	r3, [r7, #31]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d00c      	beq.n	8005d2e <HAL_SPI_TransmitReceive+0x4a>
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d1a:	d106      	bne.n	8005d2a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d102      	bne.n	8005d2a <HAL_SPI_TransmitReceive+0x46>
 8005d24:	7ffb      	ldrb	r3, [r7, #31]
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d001      	beq.n	8005d2e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e17f      	b.n	800602e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <HAL_SPI_TransmitReceive+0x5c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <HAL_SPI_TransmitReceive+0x5c>
 8005d3a:	887b      	ldrh	r3, [r7, #2]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e174      	b.n	800602e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d101      	bne.n	8005d52 <HAL_SPI_TransmitReceive+0x6e>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e16d      	b.n	800602e <HAL_SPI_TransmitReceive+0x34a>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b04      	cmp	r3, #4
 8005d64:	d003      	beq.n	8005d6e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2205      	movs	r2, #5
 8005d6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	887a      	ldrh	r2, [r7, #2]
 8005d7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	887a      	ldrh	r2, [r7, #2]
 8005d84:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	887a      	ldrh	r2, [r7, #2]
 8005d90:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	887a      	ldrh	r2, [r7, #2]
 8005d96:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dae:	2b40      	cmp	r3, #64	@ 0x40
 8005db0:	d007      	beq.n	8005dc2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dca:	d17e      	bne.n	8005eca <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <HAL_SPI_TransmitReceive+0xf6>
 8005dd4:	8afb      	ldrh	r3, [r7, #22]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d16c      	bne.n	8005eb4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dde:	881a      	ldrh	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dea:	1c9a      	adds	r2, r3, #2
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005dfe:	e059      	b.n	8005eb4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d11b      	bne.n	8005e46 <HAL_SPI_TransmitReceive+0x162>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d016      	beq.n	8005e46 <HAL_SPI_TransmitReceive+0x162>
 8005e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d113      	bne.n	8005e46 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e22:	881a      	ldrh	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2e:	1c9a      	adds	r2, r3, #2
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0301 	and.w	r3, r3, #1
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d119      	bne.n	8005e88 <HAL_SPI_TransmitReceive+0x1a4>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d014      	beq.n	8005e88 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68da      	ldr	r2, [r3, #12]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e68:	b292      	uxth	r2, r2
 8005e6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e70:	1c9a      	adds	r2, r3, #2
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005e84:	2301      	movs	r3, #1
 8005e86:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e88:	f7fc ff64 	bl	8002d54 <HAL_GetTick>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	6a3b      	ldr	r3, [r7, #32]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d80d      	bhi.n	8005eb4 <HAL_SPI_TransmitReceive+0x1d0>
 8005e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e9e:	d009      	beq.n	8005eb4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e0bc      	b.n	800602e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1a0      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x11c>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d19b      	bne.n	8005e00 <HAL_SPI_TransmitReceive+0x11c>
 8005ec8:	e082      	b.n	8005fd0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_SPI_TransmitReceive+0x1f4>
 8005ed2:	8afb      	ldrh	r3, [r7, #22]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d171      	bne.n	8005fbc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	330c      	adds	r3, #12
 8005ee2:	7812      	ldrb	r2, [r2, #0]
 8005ee4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005efe:	e05d      	b.n	8005fbc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d11c      	bne.n	8005f48 <HAL_SPI_TransmitReceive+0x264>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d017      	beq.n	8005f48 <HAL_SPI_TransmitReceive+0x264>
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d114      	bne.n	8005f48 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	330c      	adds	r3, #12
 8005f28:	7812      	ldrb	r2, [r2, #0]
 8005f2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f30:	1c5a      	adds	r2, r3, #1
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d119      	bne.n	8005f8a <HAL_SPI_TransmitReceive+0x2a6>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d014      	beq.n	8005f8a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68da      	ldr	r2, [r3, #12]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f86:	2301      	movs	r3, #1
 8005f88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f8a:	f7fc fee3 	bl	8002d54 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	6a3b      	ldr	r3, [r7, #32]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d803      	bhi.n	8005fa2 <HAL_SPI_TransmitReceive+0x2be>
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d102      	bne.n	8005fa8 <HAL_SPI_TransmitReceive+0x2c4>
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d109      	bne.n	8005fbc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	e038      	b.n	800602e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d19c      	bne.n	8005f00 <HAL_SPI_TransmitReceive+0x21c>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d197      	bne.n	8005f00 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fd0:	6a3a      	ldr	r2, [r7, #32]
 8005fd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f000 f91d 	bl	8006214 <SPI_EndRxTxTransaction>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d008      	beq.n	8005ff2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2220      	movs	r2, #32
 8005fe4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e01d      	b.n	800602e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	613b      	str	r3, [r7, #16]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e000      	b.n	800602e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800602c:	2300      	movs	r3, #0
  }
}
 800602e:	4618      	mov	r0, r3
 8006030:	3728      	adds	r7, #40	@ 0x28
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
	...

08006038 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b088      	sub	sp, #32
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	603b      	str	r3, [r7, #0]
 8006044:	4613      	mov	r3, r2
 8006046:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006048:	f7fc fe84 	bl	8002d54 <HAL_GetTick>
 800604c:	4602      	mov	r2, r0
 800604e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006050:	1a9b      	subs	r3, r3, r2
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	4413      	add	r3, r2
 8006056:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006058:	f7fc fe7c 	bl	8002d54 <HAL_GetTick>
 800605c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800605e:	4b39      	ldr	r3, [pc, #228]	@ (8006144 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	015b      	lsls	r3, r3, #5
 8006064:	0d1b      	lsrs	r3, r3, #20
 8006066:	69fa      	ldr	r2, [r7, #28]
 8006068:	fb02 f303 	mul.w	r3, r2, r3
 800606c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800606e:	e054      	b.n	800611a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006076:	d050      	beq.n	800611a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006078:	f7fc fe6c 	bl	8002d54 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	429a      	cmp	r2, r3
 8006086:	d902      	bls.n	800608e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d13d      	bne.n	800610a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800609c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060a6:	d111      	bne.n	80060cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060b0:	d004      	beq.n	80060bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ba:	d107      	bne.n	80060cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060d4:	d10f      	bne.n	80060f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060e4:	601a      	str	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e017      	b.n	800613a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	3b01      	subs	r3, #1
 8006118:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	689a      	ldr	r2, [r3, #8]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4013      	ands	r3, r2
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	429a      	cmp	r2, r3
 8006128:	bf0c      	ite	eq
 800612a:	2301      	moveq	r3, #1
 800612c:	2300      	movne	r3, #0
 800612e:	b2db      	uxtb	r3, r3
 8006130:	461a      	mov	r2, r3
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	429a      	cmp	r2, r3
 8006136:	d19b      	bne.n	8006070 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3720      	adds	r7, #32
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000000 	.word	0x20000000

08006148 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af02      	add	r7, sp, #8
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800615c:	d111      	bne.n	8006182 <SPI_EndRxTransaction+0x3a>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006166:	d004      	beq.n	8006172 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006170:	d107      	bne.n	8006182 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006180:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800618a:	d12a      	bne.n	80061e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006194:	d012      	beq.n	80061bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2200      	movs	r2, #0
 800619e:	2180      	movs	r1, #128	@ 0x80
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f7ff ff49 	bl	8006038 <SPI_WaitFlagStateUntilTimeout>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d02d      	beq.n	8006208 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b0:	f043 0220 	orr.w	r2, r3, #32
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e026      	b.n	800620a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	2200      	movs	r2, #0
 80061c4:	2101      	movs	r1, #1
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f7ff ff36 	bl	8006038 <SPI_WaitFlagStateUntilTimeout>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d01a      	beq.n	8006208 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061d6:	f043 0220 	orr.w	r2, r3, #32
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e013      	b.n	800620a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	2200      	movs	r2, #0
 80061ea:	2101      	movs	r1, #1
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff ff23 	bl	8006038 <SPI_WaitFlagStateUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d007      	beq.n	8006208 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061fc:	f043 0220 	orr.w	r2, r3, #32
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e000      	b.n	800620a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
	...

08006214 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af02      	add	r7, sp, #8
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2201      	movs	r2, #1
 8006228:	2102      	movs	r1, #2
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f7ff ff04 	bl	8006038 <SPI_WaitFlagStateUntilTimeout>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d007      	beq.n	8006246 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623a:	f043 0220 	orr.w	r2, r3, #32
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e032      	b.n	80062ac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006246:	4b1b      	ldr	r3, [pc, #108]	@ (80062b4 <SPI_EndRxTxTransaction+0xa0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a1b      	ldr	r2, [pc, #108]	@ (80062b8 <SPI_EndRxTxTransaction+0xa4>)
 800624c:	fba2 2303 	umull	r2, r3, r2, r3
 8006250:	0d5b      	lsrs	r3, r3, #21
 8006252:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006256:	fb02 f303 	mul.w	r3, r2, r3
 800625a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006264:	d112      	bne.n	800628c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2200      	movs	r2, #0
 800626e:	2180      	movs	r1, #128	@ 0x80
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7ff fee1 	bl	8006038 <SPI_WaitFlagStateUntilTimeout>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d016      	beq.n	80062aa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006280:	f043 0220 	orr.w	r2, r3, #32
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e00f      	b.n	80062ac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	3b01      	subs	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a2:	2b80      	cmp	r3, #128	@ 0x80
 80062a4:	d0f2      	beq.n	800628c <SPI_EndRxTxTransaction+0x78>
 80062a6:	e000      	b.n	80062aa <SPI_EndRxTxTransaction+0x96>
        break;
 80062a8:	bf00      	nop
  }

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20000000 	.word	0x20000000
 80062b8:	165e9f81 	.word	0x165e9f81

080062bc <siprintf>:
 80062bc:	b40e      	push	{r1, r2, r3}
 80062be:	b510      	push	{r4, lr}
 80062c0:	b09d      	sub	sp, #116	@ 0x74
 80062c2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80062c4:	9002      	str	r0, [sp, #8]
 80062c6:	9006      	str	r0, [sp, #24]
 80062c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80062cc:	480a      	ldr	r0, [pc, #40]	@ (80062f8 <siprintf+0x3c>)
 80062ce:	9107      	str	r1, [sp, #28]
 80062d0:	9104      	str	r1, [sp, #16]
 80062d2:	490a      	ldr	r1, [pc, #40]	@ (80062fc <siprintf+0x40>)
 80062d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80062d8:	9105      	str	r1, [sp, #20]
 80062da:	2400      	movs	r4, #0
 80062dc:	a902      	add	r1, sp, #8
 80062de:	6800      	ldr	r0, [r0, #0]
 80062e0:	9301      	str	r3, [sp, #4]
 80062e2:	941b      	str	r4, [sp, #108]	@ 0x6c
 80062e4:	f000 f99c 	bl	8006620 <_svfiprintf_r>
 80062e8:	9b02      	ldr	r3, [sp, #8]
 80062ea:	701c      	strb	r4, [r3, #0]
 80062ec:	b01d      	add	sp, #116	@ 0x74
 80062ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f2:	b003      	add	sp, #12
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	2000000c 	.word	0x2000000c
 80062fc:	ffff0208 	.word	0xffff0208

08006300 <memset>:
 8006300:	4402      	add	r2, r0
 8006302:	4603      	mov	r3, r0
 8006304:	4293      	cmp	r3, r2
 8006306:	d100      	bne.n	800630a <memset+0xa>
 8006308:	4770      	bx	lr
 800630a:	f803 1b01 	strb.w	r1, [r3], #1
 800630e:	e7f9      	b.n	8006304 <memset+0x4>

08006310 <__errno>:
 8006310:	4b01      	ldr	r3, [pc, #4]	@ (8006318 <__errno+0x8>)
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	2000000c 	.word	0x2000000c

0800631c <__libc_init_array>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	4d0d      	ldr	r5, [pc, #52]	@ (8006354 <__libc_init_array+0x38>)
 8006320:	4c0d      	ldr	r4, [pc, #52]	@ (8006358 <__libc_init_array+0x3c>)
 8006322:	1b64      	subs	r4, r4, r5
 8006324:	10a4      	asrs	r4, r4, #2
 8006326:	2600      	movs	r6, #0
 8006328:	42a6      	cmp	r6, r4
 800632a:	d109      	bne.n	8006340 <__libc_init_array+0x24>
 800632c:	4d0b      	ldr	r5, [pc, #44]	@ (800635c <__libc_init_array+0x40>)
 800632e:	4c0c      	ldr	r4, [pc, #48]	@ (8006360 <__libc_init_array+0x44>)
 8006330:	f000 fc6c 	bl	8006c0c <_init>
 8006334:	1b64      	subs	r4, r4, r5
 8006336:	10a4      	asrs	r4, r4, #2
 8006338:	2600      	movs	r6, #0
 800633a:	42a6      	cmp	r6, r4
 800633c:	d105      	bne.n	800634a <__libc_init_array+0x2e>
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	f855 3b04 	ldr.w	r3, [r5], #4
 8006344:	4798      	blx	r3
 8006346:	3601      	adds	r6, #1
 8006348:	e7ee      	b.n	8006328 <__libc_init_array+0xc>
 800634a:	f855 3b04 	ldr.w	r3, [r5], #4
 800634e:	4798      	blx	r3
 8006350:	3601      	adds	r6, #1
 8006352:	e7f2      	b.n	800633a <__libc_init_array+0x1e>
 8006354:	08006ef0 	.word	0x08006ef0
 8006358:	08006ef0 	.word	0x08006ef0
 800635c:	08006ef0 	.word	0x08006ef0
 8006360:	08006ef4 	.word	0x08006ef4

08006364 <__retarget_lock_acquire_recursive>:
 8006364:	4770      	bx	lr

08006366 <__retarget_lock_release_recursive>:
 8006366:	4770      	bx	lr

08006368 <strcpy>:
 8006368:	4603      	mov	r3, r0
 800636a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800636e:	f803 2b01 	strb.w	r2, [r3], #1
 8006372:	2a00      	cmp	r2, #0
 8006374:	d1f9      	bne.n	800636a <strcpy+0x2>
 8006376:	4770      	bx	lr

08006378 <_free_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4605      	mov	r5, r0
 800637c:	2900      	cmp	r1, #0
 800637e:	d041      	beq.n	8006404 <_free_r+0x8c>
 8006380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006384:	1f0c      	subs	r4, r1, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	bfb8      	it	lt
 800638a:	18e4      	addlt	r4, r4, r3
 800638c:	f000 f8e0 	bl	8006550 <__malloc_lock>
 8006390:	4a1d      	ldr	r2, [pc, #116]	@ (8006408 <_free_r+0x90>)
 8006392:	6813      	ldr	r3, [r2, #0]
 8006394:	b933      	cbnz	r3, 80063a4 <_free_r+0x2c>
 8006396:	6063      	str	r3, [r4, #4]
 8006398:	6014      	str	r4, [r2, #0]
 800639a:	4628      	mov	r0, r5
 800639c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063a0:	f000 b8dc 	b.w	800655c <__malloc_unlock>
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	d908      	bls.n	80063ba <_free_r+0x42>
 80063a8:	6820      	ldr	r0, [r4, #0]
 80063aa:	1821      	adds	r1, r4, r0
 80063ac:	428b      	cmp	r3, r1
 80063ae:	bf01      	itttt	eq
 80063b0:	6819      	ldreq	r1, [r3, #0]
 80063b2:	685b      	ldreq	r3, [r3, #4]
 80063b4:	1809      	addeq	r1, r1, r0
 80063b6:	6021      	streq	r1, [r4, #0]
 80063b8:	e7ed      	b.n	8006396 <_free_r+0x1e>
 80063ba:	461a      	mov	r2, r3
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	b10b      	cbz	r3, 80063c4 <_free_r+0x4c>
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	d9fa      	bls.n	80063ba <_free_r+0x42>
 80063c4:	6811      	ldr	r1, [r2, #0]
 80063c6:	1850      	adds	r0, r2, r1
 80063c8:	42a0      	cmp	r0, r4
 80063ca:	d10b      	bne.n	80063e4 <_free_r+0x6c>
 80063cc:	6820      	ldr	r0, [r4, #0]
 80063ce:	4401      	add	r1, r0
 80063d0:	1850      	adds	r0, r2, r1
 80063d2:	4283      	cmp	r3, r0
 80063d4:	6011      	str	r1, [r2, #0]
 80063d6:	d1e0      	bne.n	800639a <_free_r+0x22>
 80063d8:	6818      	ldr	r0, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	6053      	str	r3, [r2, #4]
 80063de:	4408      	add	r0, r1
 80063e0:	6010      	str	r0, [r2, #0]
 80063e2:	e7da      	b.n	800639a <_free_r+0x22>
 80063e4:	d902      	bls.n	80063ec <_free_r+0x74>
 80063e6:	230c      	movs	r3, #12
 80063e8:	602b      	str	r3, [r5, #0]
 80063ea:	e7d6      	b.n	800639a <_free_r+0x22>
 80063ec:	6820      	ldr	r0, [r4, #0]
 80063ee:	1821      	adds	r1, r4, r0
 80063f0:	428b      	cmp	r3, r1
 80063f2:	bf04      	itt	eq
 80063f4:	6819      	ldreq	r1, [r3, #0]
 80063f6:	685b      	ldreq	r3, [r3, #4]
 80063f8:	6063      	str	r3, [r4, #4]
 80063fa:	bf04      	itt	eq
 80063fc:	1809      	addeq	r1, r1, r0
 80063fe:	6021      	streq	r1, [r4, #0]
 8006400:	6054      	str	r4, [r2, #4]
 8006402:	e7ca      	b.n	800639a <_free_r+0x22>
 8006404:	bd38      	pop	{r3, r4, r5, pc}
 8006406:	bf00      	nop
 8006408:	200002b4 	.word	0x200002b4

0800640c <sbrk_aligned>:
 800640c:	b570      	push	{r4, r5, r6, lr}
 800640e:	4e0f      	ldr	r6, [pc, #60]	@ (800644c <sbrk_aligned+0x40>)
 8006410:	460c      	mov	r4, r1
 8006412:	6831      	ldr	r1, [r6, #0]
 8006414:	4605      	mov	r5, r0
 8006416:	b911      	cbnz	r1, 800641e <sbrk_aligned+0x12>
 8006418:	f000 fba4 	bl	8006b64 <_sbrk_r>
 800641c:	6030      	str	r0, [r6, #0]
 800641e:	4621      	mov	r1, r4
 8006420:	4628      	mov	r0, r5
 8006422:	f000 fb9f 	bl	8006b64 <_sbrk_r>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	d103      	bne.n	8006432 <sbrk_aligned+0x26>
 800642a:	f04f 34ff 	mov.w	r4, #4294967295
 800642e:	4620      	mov	r0, r4
 8006430:	bd70      	pop	{r4, r5, r6, pc}
 8006432:	1cc4      	adds	r4, r0, #3
 8006434:	f024 0403 	bic.w	r4, r4, #3
 8006438:	42a0      	cmp	r0, r4
 800643a:	d0f8      	beq.n	800642e <sbrk_aligned+0x22>
 800643c:	1a21      	subs	r1, r4, r0
 800643e:	4628      	mov	r0, r5
 8006440:	f000 fb90 	bl	8006b64 <_sbrk_r>
 8006444:	3001      	adds	r0, #1
 8006446:	d1f2      	bne.n	800642e <sbrk_aligned+0x22>
 8006448:	e7ef      	b.n	800642a <sbrk_aligned+0x1e>
 800644a:	bf00      	nop
 800644c:	200002b0 	.word	0x200002b0

08006450 <_malloc_r>:
 8006450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006454:	1ccd      	adds	r5, r1, #3
 8006456:	f025 0503 	bic.w	r5, r5, #3
 800645a:	3508      	adds	r5, #8
 800645c:	2d0c      	cmp	r5, #12
 800645e:	bf38      	it	cc
 8006460:	250c      	movcc	r5, #12
 8006462:	2d00      	cmp	r5, #0
 8006464:	4606      	mov	r6, r0
 8006466:	db01      	blt.n	800646c <_malloc_r+0x1c>
 8006468:	42a9      	cmp	r1, r5
 800646a:	d904      	bls.n	8006476 <_malloc_r+0x26>
 800646c:	230c      	movs	r3, #12
 800646e:	6033      	str	r3, [r6, #0]
 8006470:	2000      	movs	r0, #0
 8006472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006476:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800654c <_malloc_r+0xfc>
 800647a:	f000 f869 	bl	8006550 <__malloc_lock>
 800647e:	f8d8 3000 	ldr.w	r3, [r8]
 8006482:	461c      	mov	r4, r3
 8006484:	bb44      	cbnz	r4, 80064d8 <_malloc_r+0x88>
 8006486:	4629      	mov	r1, r5
 8006488:	4630      	mov	r0, r6
 800648a:	f7ff ffbf 	bl	800640c <sbrk_aligned>
 800648e:	1c43      	adds	r3, r0, #1
 8006490:	4604      	mov	r4, r0
 8006492:	d158      	bne.n	8006546 <_malloc_r+0xf6>
 8006494:	f8d8 4000 	ldr.w	r4, [r8]
 8006498:	4627      	mov	r7, r4
 800649a:	2f00      	cmp	r7, #0
 800649c:	d143      	bne.n	8006526 <_malloc_r+0xd6>
 800649e:	2c00      	cmp	r4, #0
 80064a0:	d04b      	beq.n	800653a <_malloc_r+0xea>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	4639      	mov	r1, r7
 80064a6:	4630      	mov	r0, r6
 80064a8:	eb04 0903 	add.w	r9, r4, r3
 80064ac:	f000 fb5a 	bl	8006b64 <_sbrk_r>
 80064b0:	4581      	cmp	r9, r0
 80064b2:	d142      	bne.n	800653a <_malloc_r+0xea>
 80064b4:	6821      	ldr	r1, [r4, #0]
 80064b6:	1a6d      	subs	r5, r5, r1
 80064b8:	4629      	mov	r1, r5
 80064ba:	4630      	mov	r0, r6
 80064bc:	f7ff ffa6 	bl	800640c <sbrk_aligned>
 80064c0:	3001      	adds	r0, #1
 80064c2:	d03a      	beq.n	800653a <_malloc_r+0xea>
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	442b      	add	r3, r5
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	f8d8 3000 	ldr.w	r3, [r8]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	bb62      	cbnz	r2, 800652c <_malloc_r+0xdc>
 80064d2:	f8c8 7000 	str.w	r7, [r8]
 80064d6:	e00f      	b.n	80064f8 <_malloc_r+0xa8>
 80064d8:	6822      	ldr	r2, [r4, #0]
 80064da:	1b52      	subs	r2, r2, r5
 80064dc:	d420      	bmi.n	8006520 <_malloc_r+0xd0>
 80064de:	2a0b      	cmp	r2, #11
 80064e0:	d917      	bls.n	8006512 <_malloc_r+0xc2>
 80064e2:	1961      	adds	r1, r4, r5
 80064e4:	42a3      	cmp	r3, r4
 80064e6:	6025      	str	r5, [r4, #0]
 80064e8:	bf18      	it	ne
 80064ea:	6059      	strne	r1, [r3, #4]
 80064ec:	6863      	ldr	r3, [r4, #4]
 80064ee:	bf08      	it	eq
 80064f0:	f8c8 1000 	streq.w	r1, [r8]
 80064f4:	5162      	str	r2, [r4, r5]
 80064f6:	604b      	str	r3, [r1, #4]
 80064f8:	4630      	mov	r0, r6
 80064fa:	f000 f82f 	bl	800655c <__malloc_unlock>
 80064fe:	f104 000b 	add.w	r0, r4, #11
 8006502:	1d23      	adds	r3, r4, #4
 8006504:	f020 0007 	bic.w	r0, r0, #7
 8006508:	1ac2      	subs	r2, r0, r3
 800650a:	bf1c      	itt	ne
 800650c:	1a1b      	subne	r3, r3, r0
 800650e:	50a3      	strne	r3, [r4, r2]
 8006510:	e7af      	b.n	8006472 <_malloc_r+0x22>
 8006512:	6862      	ldr	r2, [r4, #4]
 8006514:	42a3      	cmp	r3, r4
 8006516:	bf0c      	ite	eq
 8006518:	f8c8 2000 	streq.w	r2, [r8]
 800651c:	605a      	strne	r2, [r3, #4]
 800651e:	e7eb      	b.n	80064f8 <_malloc_r+0xa8>
 8006520:	4623      	mov	r3, r4
 8006522:	6864      	ldr	r4, [r4, #4]
 8006524:	e7ae      	b.n	8006484 <_malloc_r+0x34>
 8006526:	463c      	mov	r4, r7
 8006528:	687f      	ldr	r7, [r7, #4]
 800652a:	e7b6      	b.n	800649a <_malloc_r+0x4a>
 800652c:	461a      	mov	r2, r3
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	42a3      	cmp	r3, r4
 8006532:	d1fb      	bne.n	800652c <_malloc_r+0xdc>
 8006534:	2300      	movs	r3, #0
 8006536:	6053      	str	r3, [r2, #4]
 8006538:	e7de      	b.n	80064f8 <_malloc_r+0xa8>
 800653a:	230c      	movs	r3, #12
 800653c:	6033      	str	r3, [r6, #0]
 800653e:	4630      	mov	r0, r6
 8006540:	f000 f80c 	bl	800655c <__malloc_unlock>
 8006544:	e794      	b.n	8006470 <_malloc_r+0x20>
 8006546:	6005      	str	r5, [r0, #0]
 8006548:	e7d6      	b.n	80064f8 <_malloc_r+0xa8>
 800654a:	bf00      	nop
 800654c:	200002b4 	.word	0x200002b4

08006550 <__malloc_lock>:
 8006550:	4801      	ldr	r0, [pc, #4]	@ (8006558 <__malloc_lock+0x8>)
 8006552:	f7ff bf07 	b.w	8006364 <__retarget_lock_acquire_recursive>
 8006556:	bf00      	nop
 8006558:	200002ac 	.word	0x200002ac

0800655c <__malloc_unlock>:
 800655c:	4801      	ldr	r0, [pc, #4]	@ (8006564 <__malloc_unlock+0x8>)
 800655e:	f7ff bf02 	b.w	8006366 <__retarget_lock_release_recursive>
 8006562:	bf00      	nop
 8006564:	200002ac 	.word	0x200002ac

08006568 <__ssputs_r>:
 8006568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800656c:	688e      	ldr	r6, [r1, #8]
 800656e:	461f      	mov	r7, r3
 8006570:	42be      	cmp	r6, r7
 8006572:	680b      	ldr	r3, [r1, #0]
 8006574:	4682      	mov	sl, r0
 8006576:	460c      	mov	r4, r1
 8006578:	4690      	mov	r8, r2
 800657a:	d82d      	bhi.n	80065d8 <__ssputs_r+0x70>
 800657c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006580:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006584:	d026      	beq.n	80065d4 <__ssputs_r+0x6c>
 8006586:	6965      	ldr	r5, [r4, #20]
 8006588:	6909      	ldr	r1, [r1, #16]
 800658a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800658e:	eba3 0901 	sub.w	r9, r3, r1
 8006592:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006596:	1c7b      	adds	r3, r7, #1
 8006598:	444b      	add	r3, r9
 800659a:	106d      	asrs	r5, r5, #1
 800659c:	429d      	cmp	r5, r3
 800659e:	bf38      	it	cc
 80065a0:	461d      	movcc	r5, r3
 80065a2:	0553      	lsls	r3, r2, #21
 80065a4:	d527      	bpl.n	80065f6 <__ssputs_r+0x8e>
 80065a6:	4629      	mov	r1, r5
 80065a8:	f7ff ff52 	bl	8006450 <_malloc_r>
 80065ac:	4606      	mov	r6, r0
 80065ae:	b360      	cbz	r0, 800660a <__ssputs_r+0xa2>
 80065b0:	6921      	ldr	r1, [r4, #16]
 80065b2:	464a      	mov	r2, r9
 80065b4:	f000 fae6 	bl	8006b84 <memcpy>
 80065b8:	89a3      	ldrh	r3, [r4, #12]
 80065ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80065be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065c2:	81a3      	strh	r3, [r4, #12]
 80065c4:	6126      	str	r6, [r4, #16]
 80065c6:	6165      	str	r5, [r4, #20]
 80065c8:	444e      	add	r6, r9
 80065ca:	eba5 0509 	sub.w	r5, r5, r9
 80065ce:	6026      	str	r6, [r4, #0]
 80065d0:	60a5      	str	r5, [r4, #8]
 80065d2:	463e      	mov	r6, r7
 80065d4:	42be      	cmp	r6, r7
 80065d6:	d900      	bls.n	80065da <__ssputs_r+0x72>
 80065d8:	463e      	mov	r6, r7
 80065da:	6820      	ldr	r0, [r4, #0]
 80065dc:	4632      	mov	r2, r6
 80065de:	4641      	mov	r1, r8
 80065e0:	f000 faa6 	bl	8006b30 <memmove>
 80065e4:	68a3      	ldr	r3, [r4, #8]
 80065e6:	1b9b      	subs	r3, r3, r6
 80065e8:	60a3      	str	r3, [r4, #8]
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	4433      	add	r3, r6
 80065ee:	6023      	str	r3, [r4, #0]
 80065f0:	2000      	movs	r0, #0
 80065f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f6:	462a      	mov	r2, r5
 80065f8:	f000 fad2 	bl	8006ba0 <_realloc_r>
 80065fc:	4606      	mov	r6, r0
 80065fe:	2800      	cmp	r0, #0
 8006600:	d1e0      	bne.n	80065c4 <__ssputs_r+0x5c>
 8006602:	6921      	ldr	r1, [r4, #16]
 8006604:	4650      	mov	r0, sl
 8006606:	f7ff feb7 	bl	8006378 <_free_r>
 800660a:	230c      	movs	r3, #12
 800660c:	f8ca 3000 	str.w	r3, [sl]
 8006610:	89a3      	ldrh	r3, [r4, #12]
 8006612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006616:	81a3      	strh	r3, [r4, #12]
 8006618:	f04f 30ff 	mov.w	r0, #4294967295
 800661c:	e7e9      	b.n	80065f2 <__ssputs_r+0x8a>
	...

08006620 <_svfiprintf_r>:
 8006620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	4698      	mov	r8, r3
 8006626:	898b      	ldrh	r3, [r1, #12]
 8006628:	061b      	lsls	r3, r3, #24
 800662a:	b09d      	sub	sp, #116	@ 0x74
 800662c:	4607      	mov	r7, r0
 800662e:	460d      	mov	r5, r1
 8006630:	4614      	mov	r4, r2
 8006632:	d510      	bpl.n	8006656 <_svfiprintf_r+0x36>
 8006634:	690b      	ldr	r3, [r1, #16]
 8006636:	b973      	cbnz	r3, 8006656 <_svfiprintf_r+0x36>
 8006638:	2140      	movs	r1, #64	@ 0x40
 800663a:	f7ff ff09 	bl	8006450 <_malloc_r>
 800663e:	6028      	str	r0, [r5, #0]
 8006640:	6128      	str	r0, [r5, #16]
 8006642:	b930      	cbnz	r0, 8006652 <_svfiprintf_r+0x32>
 8006644:	230c      	movs	r3, #12
 8006646:	603b      	str	r3, [r7, #0]
 8006648:	f04f 30ff 	mov.w	r0, #4294967295
 800664c:	b01d      	add	sp, #116	@ 0x74
 800664e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006652:	2340      	movs	r3, #64	@ 0x40
 8006654:	616b      	str	r3, [r5, #20]
 8006656:	2300      	movs	r3, #0
 8006658:	9309      	str	r3, [sp, #36]	@ 0x24
 800665a:	2320      	movs	r3, #32
 800665c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006660:	f8cd 800c 	str.w	r8, [sp, #12]
 8006664:	2330      	movs	r3, #48	@ 0x30
 8006666:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006804 <_svfiprintf_r+0x1e4>
 800666a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800666e:	f04f 0901 	mov.w	r9, #1
 8006672:	4623      	mov	r3, r4
 8006674:	469a      	mov	sl, r3
 8006676:	f813 2b01 	ldrb.w	r2, [r3], #1
 800667a:	b10a      	cbz	r2, 8006680 <_svfiprintf_r+0x60>
 800667c:	2a25      	cmp	r2, #37	@ 0x25
 800667e:	d1f9      	bne.n	8006674 <_svfiprintf_r+0x54>
 8006680:	ebba 0b04 	subs.w	fp, sl, r4
 8006684:	d00b      	beq.n	800669e <_svfiprintf_r+0x7e>
 8006686:	465b      	mov	r3, fp
 8006688:	4622      	mov	r2, r4
 800668a:	4629      	mov	r1, r5
 800668c:	4638      	mov	r0, r7
 800668e:	f7ff ff6b 	bl	8006568 <__ssputs_r>
 8006692:	3001      	adds	r0, #1
 8006694:	f000 80a7 	beq.w	80067e6 <_svfiprintf_r+0x1c6>
 8006698:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800669a:	445a      	add	r2, fp
 800669c:	9209      	str	r2, [sp, #36]	@ 0x24
 800669e:	f89a 3000 	ldrb.w	r3, [sl]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 809f 	beq.w	80067e6 <_svfiprintf_r+0x1c6>
 80066a8:	2300      	movs	r3, #0
 80066aa:	f04f 32ff 	mov.w	r2, #4294967295
 80066ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066b2:	f10a 0a01 	add.w	sl, sl, #1
 80066b6:	9304      	str	r3, [sp, #16]
 80066b8:	9307      	str	r3, [sp, #28]
 80066ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066be:	931a      	str	r3, [sp, #104]	@ 0x68
 80066c0:	4654      	mov	r4, sl
 80066c2:	2205      	movs	r2, #5
 80066c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066c8:	484e      	ldr	r0, [pc, #312]	@ (8006804 <_svfiprintf_r+0x1e4>)
 80066ca:	f7f9 fd99 	bl	8000200 <memchr>
 80066ce:	9a04      	ldr	r2, [sp, #16]
 80066d0:	b9d8      	cbnz	r0, 800670a <_svfiprintf_r+0xea>
 80066d2:	06d0      	lsls	r0, r2, #27
 80066d4:	bf44      	itt	mi
 80066d6:	2320      	movmi	r3, #32
 80066d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066dc:	0711      	lsls	r1, r2, #28
 80066de:	bf44      	itt	mi
 80066e0:	232b      	movmi	r3, #43	@ 0x2b
 80066e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066e6:	f89a 3000 	ldrb.w	r3, [sl]
 80066ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80066ec:	d015      	beq.n	800671a <_svfiprintf_r+0xfa>
 80066ee:	9a07      	ldr	r2, [sp, #28]
 80066f0:	4654      	mov	r4, sl
 80066f2:	2000      	movs	r0, #0
 80066f4:	f04f 0c0a 	mov.w	ip, #10
 80066f8:	4621      	mov	r1, r4
 80066fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066fe:	3b30      	subs	r3, #48	@ 0x30
 8006700:	2b09      	cmp	r3, #9
 8006702:	d94b      	bls.n	800679c <_svfiprintf_r+0x17c>
 8006704:	b1b0      	cbz	r0, 8006734 <_svfiprintf_r+0x114>
 8006706:	9207      	str	r2, [sp, #28]
 8006708:	e014      	b.n	8006734 <_svfiprintf_r+0x114>
 800670a:	eba0 0308 	sub.w	r3, r0, r8
 800670e:	fa09 f303 	lsl.w	r3, r9, r3
 8006712:	4313      	orrs	r3, r2
 8006714:	9304      	str	r3, [sp, #16]
 8006716:	46a2      	mov	sl, r4
 8006718:	e7d2      	b.n	80066c0 <_svfiprintf_r+0xa0>
 800671a:	9b03      	ldr	r3, [sp, #12]
 800671c:	1d19      	adds	r1, r3, #4
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	9103      	str	r1, [sp, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	bfbb      	ittet	lt
 8006726:	425b      	neglt	r3, r3
 8006728:	f042 0202 	orrlt.w	r2, r2, #2
 800672c:	9307      	strge	r3, [sp, #28]
 800672e:	9307      	strlt	r3, [sp, #28]
 8006730:	bfb8      	it	lt
 8006732:	9204      	strlt	r2, [sp, #16]
 8006734:	7823      	ldrb	r3, [r4, #0]
 8006736:	2b2e      	cmp	r3, #46	@ 0x2e
 8006738:	d10a      	bne.n	8006750 <_svfiprintf_r+0x130>
 800673a:	7863      	ldrb	r3, [r4, #1]
 800673c:	2b2a      	cmp	r3, #42	@ 0x2a
 800673e:	d132      	bne.n	80067a6 <_svfiprintf_r+0x186>
 8006740:	9b03      	ldr	r3, [sp, #12]
 8006742:	1d1a      	adds	r2, r3, #4
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	9203      	str	r2, [sp, #12]
 8006748:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800674c:	3402      	adds	r4, #2
 800674e:	9305      	str	r3, [sp, #20]
 8006750:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006814 <_svfiprintf_r+0x1f4>
 8006754:	7821      	ldrb	r1, [r4, #0]
 8006756:	2203      	movs	r2, #3
 8006758:	4650      	mov	r0, sl
 800675a:	f7f9 fd51 	bl	8000200 <memchr>
 800675e:	b138      	cbz	r0, 8006770 <_svfiprintf_r+0x150>
 8006760:	9b04      	ldr	r3, [sp, #16]
 8006762:	eba0 000a 	sub.w	r0, r0, sl
 8006766:	2240      	movs	r2, #64	@ 0x40
 8006768:	4082      	lsls	r2, r0
 800676a:	4313      	orrs	r3, r2
 800676c:	3401      	adds	r4, #1
 800676e:	9304      	str	r3, [sp, #16]
 8006770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006774:	4824      	ldr	r0, [pc, #144]	@ (8006808 <_svfiprintf_r+0x1e8>)
 8006776:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800677a:	2206      	movs	r2, #6
 800677c:	f7f9 fd40 	bl	8000200 <memchr>
 8006780:	2800      	cmp	r0, #0
 8006782:	d036      	beq.n	80067f2 <_svfiprintf_r+0x1d2>
 8006784:	4b21      	ldr	r3, [pc, #132]	@ (800680c <_svfiprintf_r+0x1ec>)
 8006786:	bb1b      	cbnz	r3, 80067d0 <_svfiprintf_r+0x1b0>
 8006788:	9b03      	ldr	r3, [sp, #12]
 800678a:	3307      	adds	r3, #7
 800678c:	f023 0307 	bic.w	r3, r3, #7
 8006790:	3308      	adds	r3, #8
 8006792:	9303      	str	r3, [sp, #12]
 8006794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006796:	4433      	add	r3, r6
 8006798:	9309      	str	r3, [sp, #36]	@ 0x24
 800679a:	e76a      	b.n	8006672 <_svfiprintf_r+0x52>
 800679c:	fb0c 3202 	mla	r2, ip, r2, r3
 80067a0:	460c      	mov	r4, r1
 80067a2:	2001      	movs	r0, #1
 80067a4:	e7a8      	b.n	80066f8 <_svfiprintf_r+0xd8>
 80067a6:	2300      	movs	r3, #0
 80067a8:	3401      	adds	r4, #1
 80067aa:	9305      	str	r3, [sp, #20]
 80067ac:	4619      	mov	r1, r3
 80067ae:	f04f 0c0a 	mov.w	ip, #10
 80067b2:	4620      	mov	r0, r4
 80067b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067b8:	3a30      	subs	r2, #48	@ 0x30
 80067ba:	2a09      	cmp	r2, #9
 80067bc:	d903      	bls.n	80067c6 <_svfiprintf_r+0x1a6>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0c6      	beq.n	8006750 <_svfiprintf_r+0x130>
 80067c2:	9105      	str	r1, [sp, #20]
 80067c4:	e7c4      	b.n	8006750 <_svfiprintf_r+0x130>
 80067c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80067ca:	4604      	mov	r4, r0
 80067cc:	2301      	movs	r3, #1
 80067ce:	e7f0      	b.n	80067b2 <_svfiprintf_r+0x192>
 80067d0:	ab03      	add	r3, sp, #12
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	462a      	mov	r2, r5
 80067d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006810 <_svfiprintf_r+0x1f0>)
 80067d8:	a904      	add	r1, sp, #16
 80067da:	4638      	mov	r0, r7
 80067dc:	f3af 8000 	nop.w
 80067e0:	1c42      	adds	r2, r0, #1
 80067e2:	4606      	mov	r6, r0
 80067e4:	d1d6      	bne.n	8006794 <_svfiprintf_r+0x174>
 80067e6:	89ab      	ldrh	r3, [r5, #12]
 80067e8:	065b      	lsls	r3, r3, #25
 80067ea:	f53f af2d 	bmi.w	8006648 <_svfiprintf_r+0x28>
 80067ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067f0:	e72c      	b.n	800664c <_svfiprintf_r+0x2c>
 80067f2:	ab03      	add	r3, sp, #12
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	462a      	mov	r2, r5
 80067f8:	4b05      	ldr	r3, [pc, #20]	@ (8006810 <_svfiprintf_r+0x1f0>)
 80067fa:	a904      	add	r1, sp, #16
 80067fc:	4638      	mov	r0, r7
 80067fe:	f000 f879 	bl	80068f4 <_printf_i>
 8006802:	e7ed      	b.n	80067e0 <_svfiprintf_r+0x1c0>
 8006804:	08006eb4 	.word	0x08006eb4
 8006808:	08006ebe 	.word	0x08006ebe
 800680c:	00000000 	.word	0x00000000
 8006810:	08006569 	.word	0x08006569
 8006814:	08006eba 	.word	0x08006eba

08006818 <_printf_common>:
 8006818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800681c:	4616      	mov	r6, r2
 800681e:	4698      	mov	r8, r3
 8006820:	688a      	ldr	r2, [r1, #8]
 8006822:	690b      	ldr	r3, [r1, #16]
 8006824:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006828:	4293      	cmp	r3, r2
 800682a:	bfb8      	it	lt
 800682c:	4613      	movlt	r3, r2
 800682e:	6033      	str	r3, [r6, #0]
 8006830:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006834:	4607      	mov	r7, r0
 8006836:	460c      	mov	r4, r1
 8006838:	b10a      	cbz	r2, 800683e <_printf_common+0x26>
 800683a:	3301      	adds	r3, #1
 800683c:	6033      	str	r3, [r6, #0]
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	0699      	lsls	r1, r3, #26
 8006842:	bf42      	ittt	mi
 8006844:	6833      	ldrmi	r3, [r6, #0]
 8006846:	3302      	addmi	r3, #2
 8006848:	6033      	strmi	r3, [r6, #0]
 800684a:	6825      	ldr	r5, [r4, #0]
 800684c:	f015 0506 	ands.w	r5, r5, #6
 8006850:	d106      	bne.n	8006860 <_printf_common+0x48>
 8006852:	f104 0a19 	add.w	sl, r4, #25
 8006856:	68e3      	ldr	r3, [r4, #12]
 8006858:	6832      	ldr	r2, [r6, #0]
 800685a:	1a9b      	subs	r3, r3, r2
 800685c:	42ab      	cmp	r3, r5
 800685e:	dc26      	bgt.n	80068ae <_printf_common+0x96>
 8006860:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006864:	6822      	ldr	r2, [r4, #0]
 8006866:	3b00      	subs	r3, #0
 8006868:	bf18      	it	ne
 800686a:	2301      	movne	r3, #1
 800686c:	0692      	lsls	r2, r2, #26
 800686e:	d42b      	bmi.n	80068c8 <_printf_common+0xb0>
 8006870:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006874:	4641      	mov	r1, r8
 8006876:	4638      	mov	r0, r7
 8006878:	47c8      	blx	r9
 800687a:	3001      	adds	r0, #1
 800687c:	d01e      	beq.n	80068bc <_printf_common+0xa4>
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	6922      	ldr	r2, [r4, #16]
 8006882:	f003 0306 	and.w	r3, r3, #6
 8006886:	2b04      	cmp	r3, #4
 8006888:	bf02      	ittt	eq
 800688a:	68e5      	ldreq	r5, [r4, #12]
 800688c:	6833      	ldreq	r3, [r6, #0]
 800688e:	1aed      	subeq	r5, r5, r3
 8006890:	68a3      	ldr	r3, [r4, #8]
 8006892:	bf0c      	ite	eq
 8006894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006898:	2500      	movne	r5, #0
 800689a:	4293      	cmp	r3, r2
 800689c:	bfc4      	itt	gt
 800689e:	1a9b      	subgt	r3, r3, r2
 80068a0:	18ed      	addgt	r5, r5, r3
 80068a2:	2600      	movs	r6, #0
 80068a4:	341a      	adds	r4, #26
 80068a6:	42b5      	cmp	r5, r6
 80068a8:	d11a      	bne.n	80068e0 <_printf_common+0xc8>
 80068aa:	2000      	movs	r0, #0
 80068ac:	e008      	b.n	80068c0 <_printf_common+0xa8>
 80068ae:	2301      	movs	r3, #1
 80068b0:	4652      	mov	r2, sl
 80068b2:	4641      	mov	r1, r8
 80068b4:	4638      	mov	r0, r7
 80068b6:	47c8      	blx	r9
 80068b8:	3001      	adds	r0, #1
 80068ba:	d103      	bne.n	80068c4 <_printf_common+0xac>
 80068bc:	f04f 30ff 	mov.w	r0, #4294967295
 80068c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068c4:	3501      	adds	r5, #1
 80068c6:	e7c6      	b.n	8006856 <_printf_common+0x3e>
 80068c8:	18e1      	adds	r1, r4, r3
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	2030      	movs	r0, #48	@ 0x30
 80068ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068d2:	4422      	add	r2, r4
 80068d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068dc:	3302      	adds	r3, #2
 80068de:	e7c7      	b.n	8006870 <_printf_common+0x58>
 80068e0:	2301      	movs	r3, #1
 80068e2:	4622      	mov	r2, r4
 80068e4:	4641      	mov	r1, r8
 80068e6:	4638      	mov	r0, r7
 80068e8:	47c8      	blx	r9
 80068ea:	3001      	adds	r0, #1
 80068ec:	d0e6      	beq.n	80068bc <_printf_common+0xa4>
 80068ee:	3601      	adds	r6, #1
 80068f0:	e7d9      	b.n	80068a6 <_printf_common+0x8e>
	...

080068f4 <_printf_i>:
 80068f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068f8:	7e0f      	ldrb	r7, [r1, #24]
 80068fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068fc:	2f78      	cmp	r7, #120	@ 0x78
 80068fe:	4691      	mov	r9, r2
 8006900:	4680      	mov	r8, r0
 8006902:	460c      	mov	r4, r1
 8006904:	469a      	mov	sl, r3
 8006906:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800690a:	d807      	bhi.n	800691c <_printf_i+0x28>
 800690c:	2f62      	cmp	r7, #98	@ 0x62
 800690e:	d80a      	bhi.n	8006926 <_printf_i+0x32>
 8006910:	2f00      	cmp	r7, #0
 8006912:	f000 80d1 	beq.w	8006ab8 <_printf_i+0x1c4>
 8006916:	2f58      	cmp	r7, #88	@ 0x58
 8006918:	f000 80b8 	beq.w	8006a8c <_printf_i+0x198>
 800691c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006920:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006924:	e03a      	b.n	800699c <_printf_i+0xa8>
 8006926:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800692a:	2b15      	cmp	r3, #21
 800692c:	d8f6      	bhi.n	800691c <_printf_i+0x28>
 800692e:	a101      	add	r1, pc, #4	@ (adr r1, 8006934 <_printf_i+0x40>)
 8006930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006934:	0800698d 	.word	0x0800698d
 8006938:	080069a1 	.word	0x080069a1
 800693c:	0800691d 	.word	0x0800691d
 8006940:	0800691d 	.word	0x0800691d
 8006944:	0800691d 	.word	0x0800691d
 8006948:	0800691d 	.word	0x0800691d
 800694c:	080069a1 	.word	0x080069a1
 8006950:	0800691d 	.word	0x0800691d
 8006954:	0800691d 	.word	0x0800691d
 8006958:	0800691d 	.word	0x0800691d
 800695c:	0800691d 	.word	0x0800691d
 8006960:	08006a9f 	.word	0x08006a9f
 8006964:	080069cb 	.word	0x080069cb
 8006968:	08006a59 	.word	0x08006a59
 800696c:	0800691d 	.word	0x0800691d
 8006970:	0800691d 	.word	0x0800691d
 8006974:	08006ac1 	.word	0x08006ac1
 8006978:	0800691d 	.word	0x0800691d
 800697c:	080069cb 	.word	0x080069cb
 8006980:	0800691d 	.word	0x0800691d
 8006984:	0800691d 	.word	0x0800691d
 8006988:	08006a61 	.word	0x08006a61
 800698c:	6833      	ldr	r3, [r6, #0]
 800698e:	1d1a      	adds	r2, r3, #4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6032      	str	r2, [r6, #0]
 8006994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006998:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800699c:	2301      	movs	r3, #1
 800699e:	e09c      	b.n	8006ada <_printf_i+0x1e6>
 80069a0:	6833      	ldr	r3, [r6, #0]
 80069a2:	6820      	ldr	r0, [r4, #0]
 80069a4:	1d19      	adds	r1, r3, #4
 80069a6:	6031      	str	r1, [r6, #0]
 80069a8:	0606      	lsls	r6, r0, #24
 80069aa:	d501      	bpl.n	80069b0 <_printf_i+0xbc>
 80069ac:	681d      	ldr	r5, [r3, #0]
 80069ae:	e003      	b.n	80069b8 <_printf_i+0xc4>
 80069b0:	0645      	lsls	r5, r0, #25
 80069b2:	d5fb      	bpl.n	80069ac <_printf_i+0xb8>
 80069b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069b8:	2d00      	cmp	r5, #0
 80069ba:	da03      	bge.n	80069c4 <_printf_i+0xd0>
 80069bc:	232d      	movs	r3, #45	@ 0x2d
 80069be:	426d      	negs	r5, r5
 80069c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069c4:	4858      	ldr	r0, [pc, #352]	@ (8006b28 <_printf_i+0x234>)
 80069c6:	230a      	movs	r3, #10
 80069c8:	e011      	b.n	80069ee <_printf_i+0xfa>
 80069ca:	6821      	ldr	r1, [r4, #0]
 80069cc:	6833      	ldr	r3, [r6, #0]
 80069ce:	0608      	lsls	r0, r1, #24
 80069d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80069d4:	d402      	bmi.n	80069dc <_printf_i+0xe8>
 80069d6:	0649      	lsls	r1, r1, #25
 80069d8:	bf48      	it	mi
 80069da:	b2ad      	uxthmi	r5, r5
 80069dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80069de:	4852      	ldr	r0, [pc, #328]	@ (8006b28 <_printf_i+0x234>)
 80069e0:	6033      	str	r3, [r6, #0]
 80069e2:	bf14      	ite	ne
 80069e4:	230a      	movne	r3, #10
 80069e6:	2308      	moveq	r3, #8
 80069e8:	2100      	movs	r1, #0
 80069ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069ee:	6866      	ldr	r6, [r4, #4]
 80069f0:	60a6      	str	r6, [r4, #8]
 80069f2:	2e00      	cmp	r6, #0
 80069f4:	db05      	blt.n	8006a02 <_printf_i+0x10e>
 80069f6:	6821      	ldr	r1, [r4, #0]
 80069f8:	432e      	orrs	r6, r5
 80069fa:	f021 0104 	bic.w	r1, r1, #4
 80069fe:	6021      	str	r1, [r4, #0]
 8006a00:	d04b      	beq.n	8006a9a <_printf_i+0x1a6>
 8006a02:	4616      	mov	r6, r2
 8006a04:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a08:	fb03 5711 	mls	r7, r3, r1, r5
 8006a0c:	5dc7      	ldrb	r7, [r0, r7]
 8006a0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a12:	462f      	mov	r7, r5
 8006a14:	42bb      	cmp	r3, r7
 8006a16:	460d      	mov	r5, r1
 8006a18:	d9f4      	bls.n	8006a04 <_printf_i+0x110>
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d10b      	bne.n	8006a36 <_printf_i+0x142>
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	07df      	lsls	r7, r3, #31
 8006a22:	d508      	bpl.n	8006a36 <_printf_i+0x142>
 8006a24:	6923      	ldr	r3, [r4, #16]
 8006a26:	6861      	ldr	r1, [r4, #4]
 8006a28:	4299      	cmp	r1, r3
 8006a2a:	bfde      	ittt	le
 8006a2c:	2330      	movle	r3, #48	@ 0x30
 8006a2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a32:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a36:	1b92      	subs	r2, r2, r6
 8006a38:	6122      	str	r2, [r4, #16]
 8006a3a:	f8cd a000 	str.w	sl, [sp]
 8006a3e:	464b      	mov	r3, r9
 8006a40:	aa03      	add	r2, sp, #12
 8006a42:	4621      	mov	r1, r4
 8006a44:	4640      	mov	r0, r8
 8006a46:	f7ff fee7 	bl	8006818 <_printf_common>
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	d14a      	bne.n	8006ae4 <_printf_i+0x1f0>
 8006a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a52:	b004      	add	sp, #16
 8006a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	f043 0320 	orr.w	r3, r3, #32
 8006a5e:	6023      	str	r3, [r4, #0]
 8006a60:	4832      	ldr	r0, [pc, #200]	@ (8006b2c <_printf_i+0x238>)
 8006a62:	2778      	movs	r7, #120	@ 0x78
 8006a64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a68:	6823      	ldr	r3, [r4, #0]
 8006a6a:	6831      	ldr	r1, [r6, #0]
 8006a6c:	061f      	lsls	r7, r3, #24
 8006a6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a72:	d402      	bmi.n	8006a7a <_printf_i+0x186>
 8006a74:	065f      	lsls	r7, r3, #25
 8006a76:	bf48      	it	mi
 8006a78:	b2ad      	uxthmi	r5, r5
 8006a7a:	6031      	str	r1, [r6, #0]
 8006a7c:	07d9      	lsls	r1, r3, #31
 8006a7e:	bf44      	itt	mi
 8006a80:	f043 0320 	orrmi.w	r3, r3, #32
 8006a84:	6023      	strmi	r3, [r4, #0]
 8006a86:	b11d      	cbz	r5, 8006a90 <_printf_i+0x19c>
 8006a88:	2310      	movs	r3, #16
 8006a8a:	e7ad      	b.n	80069e8 <_printf_i+0xf4>
 8006a8c:	4826      	ldr	r0, [pc, #152]	@ (8006b28 <_printf_i+0x234>)
 8006a8e:	e7e9      	b.n	8006a64 <_printf_i+0x170>
 8006a90:	6823      	ldr	r3, [r4, #0]
 8006a92:	f023 0320 	bic.w	r3, r3, #32
 8006a96:	6023      	str	r3, [r4, #0]
 8006a98:	e7f6      	b.n	8006a88 <_printf_i+0x194>
 8006a9a:	4616      	mov	r6, r2
 8006a9c:	e7bd      	b.n	8006a1a <_printf_i+0x126>
 8006a9e:	6833      	ldr	r3, [r6, #0]
 8006aa0:	6825      	ldr	r5, [r4, #0]
 8006aa2:	6961      	ldr	r1, [r4, #20]
 8006aa4:	1d18      	adds	r0, r3, #4
 8006aa6:	6030      	str	r0, [r6, #0]
 8006aa8:	062e      	lsls	r6, r5, #24
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	d501      	bpl.n	8006ab2 <_printf_i+0x1be>
 8006aae:	6019      	str	r1, [r3, #0]
 8006ab0:	e002      	b.n	8006ab8 <_printf_i+0x1c4>
 8006ab2:	0668      	lsls	r0, r5, #25
 8006ab4:	d5fb      	bpl.n	8006aae <_printf_i+0x1ba>
 8006ab6:	8019      	strh	r1, [r3, #0]
 8006ab8:	2300      	movs	r3, #0
 8006aba:	6123      	str	r3, [r4, #16]
 8006abc:	4616      	mov	r6, r2
 8006abe:	e7bc      	b.n	8006a3a <_printf_i+0x146>
 8006ac0:	6833      	ldr	r3, [r6, #0]
 8006ac2:	1d1a      	adds	r2, r3, #4
 8006ac4:	6032      	str	r2, [r6, #0]
 8006ac6:	681e      	ldr	r6, [r3, #0]
 8006ac8:	6862      	ldr	r2, [r4, #4]
 8006aca:	2100      	movs	r1, #0
 8006acc:	4630      	mov	r0, r6
 8006ace:	f7f9 fb97 	bl	8000200 <memchr>
 8006ad2:	b108      	cbz	r0, 8006ad8 <_printf_i+0x1e4>
 8006ad4:	1b80      	subs	r0, r0, r6
 8006ad6:	6060      	str	r0, [r4, #4]
 8006ad8:	6863      	ldr	r3, [r4, #4]
 8006ada:	6123      	str	r3, [r4, #16]
 8006adc:	2300      	movs	r3, #0
 8006ade:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ae2:	e7aa      	b.n	8006a3a <_printf_i+0x146>
 8006ae4:	6923      	ldr	r3, [r4, #16]
 8006ae6:	4632      	mov	r2, r6
 8006ae8:	4649      	mov	r1, r9
 8006aea:	4640      	mov	r0, r8
 8006aec:	47d0      	blx	sl
 8006aee:	3001      	adds	r0, #1
 8006af0:	d0ad      	beq.n	8006a4e <_printf_i+0x15a>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	079b      	lsls	r3, r3, #30
 8006af6:	d413      	bmi.n	8006b20 <_printf_i+0x22c>
 8006af8:	68e0      	ldr	r0, [r4, #12]
 8006afa:	9b03      	ldr	r3, [sp, #12]
 8006afc:	4298      	cmp	r0, r3
 8006afe:	bfb8      	it	lt
 8006b00:	4618      	movlt	r0, r3
 8006b02:	e7a6      	b.n	8006a52 <_printf_i+0x15e>
 8006b04:	2301      	movs	r3, #1
 8006b06:	4632      	mov	r2, r6
 8006b08:	4649      	mov	r1, r9
 8006b0a:	4640      	mov	r0, r8
 8006b0c:	47d0      	blx	sl
 8006b0e:	3001      	adds	r0, #1
 8006b10:	d09d      	beq.n	8006a4e <_printf_i+0x15a>
 8006b12:	3501      	adds	r5, #1
 8006b14:	68e3      	ldr	r3, [r4, #12]
 8006b16:	9903      	ldr	r1, [sp, #12]
 8006b18:	1a5b      	subs	r3, r3, r1
 8006b1a:	42ab      	cmp	r3, r5
 8006b1c:	dcf2      	bgt.n	8006b04 <_printf_i+0x210>
 8006b1e:	e7eb      	b.n	8006af8 <_printf_i+0x204>
 8006b20:	2500      	movs	r5, #0
 8006b22:	f104 0619 	add.w	r6, r4, #25
 8006b26:	e7f5      	b.n	8006b14 <_printf_i+0x220>
 8006b28:	08006ec5 	.word	0x08006ec5
 8006b2c:	08006ed6 	.word	0x08006ed6

08006b30 <memmove>:
 8006b30:	4288      	cmp	r0, r1
 8006b32:	b510      	push	{r4, lr}
 8006b34:	eb01 0402 	add.w	r4, r1, r2
 8006b38:	d902      	bls.n	8006b40 <memmove+0x10>
 8006b3a:	4284      	cmp	r4, r0
 8006b3c:	4623      	mov	r3, r4
 8006b3e:	d807      	bhi.n	8006b50 <memmove+0x20>
 8006b40:	1e43      	subs	r3, r0, #1
 8006b42:	42a1      	cmp	r1, r4
 8006b44:	d008      	beq.n	8006b58 <memmove+0x28>
 8006b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b4e:	e7f8      	b.n	8006b42 <memmove+0x12>
 8006b50:	4402      	add	r2, r0
 8006b52:	4601      	mov	r1, r0
 8006b54:	428a      	cmp	r2, r1
 8006b56:	d100      	bne.n	8006b5a <memmove+0x2a>
 8006b58:	bd10      	pop	{r4, pc}
 8006b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b62:	e7f7      	b.n	8006b54 <memmove+0x24>

08006b64 <_sbrk_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4d06      	ldr	r5, [pc, #24]	@ (8006b80 <_sbrk_r+0x1c>)
 8006b68:	2300      	movs	r3, #0
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	4608      	mov	r0, r1
 8006b6e:	602b      	str	r3, [r5, #0]
 8006b70:	f7fc f818 	bl	8002ba4 <_sbrk>
 8006b74:	1c43      	adds	r3, r0, #1
 8006b76:	d102      	bne.n	8006b7e <_sbrk_r+0x1a>
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	b103      	cbz	r3, 8006b7e <_sbrk_r+0x1a>
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	200002a8 	.word	0x200002a8

08006b84 <memcpy>:
 8006b84:	440a      	add	r2, r1
 8006b86:	4291      	cmp	r1, r2
 8006b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b8c:	d100      	bne.n	8006b90 <memcpy+0xc>
 8006b8e:	4770      	bx	lr
 8006b90:	b510      	push	{r4, lr}
 8006b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b9a:	4291      	cmp	r1, r2
 8006b9c:	d1f9      	bne.n	8006b92 <memcpy+0xe>
 8006b9e:	bd10      	pop	{r4, pc}

08006ba0 <_realloc_r>:
 8006ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba4:	4607      	mov	r7, r0
 8006ba6:	4614      	mov	r4, r2
 8006ba8:	460d      	mov	r5, r1
 8006baa:	b921      	cbnz	r1, 8006bb6 <_realloc_r+0x16>
 8006bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	f7ff bc4d 	b.w	8006450 <_malloc_r>
 8006bb6:	b92a      	cbnz	r2, 8006bc4 <_realloc_r+0x24>
 8006bb8:	f7ff fbde 	bl	8006378 <_free_r>
 8006bbc:	4625      	mov	r5, r4
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bc4:	f000 f81a 	bl	8006bfc <_malloc_usable_size_r>
 8006bc8:	4284      	cmp	r4, r0
 8006bca:	4606      	mov	r6, r0
 8006bcc:	d802      	bhi.n	8006bd4 <_realloc_r+0x34>
 8006bce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006bd2:	d8f4      	bhi.n	8006bbe <_realloc_r+0x1e>
 8006bd4:	4621      	mov	r1, r4
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	f7ff fc3a 	bl	8006450 <_malloc_r>
 8006bdc:	4680      	mov	r8, r0
 8006bde:	b908      	cbnz	r0, 8006be4 <_realloc_r+0x44>
 8006be0:	4645      	mov	r5, r8
 8006be2:	e7ec      	b.n	8006bbe <_realloc_r+0x1e>
 8006be4:	42b4      	cmp	r4, r6
 8006be6:	4622      	mov	r2, r4
 8006be8:	4629      	mov	r1, r5
 8006bea:	bf28      	it	cs
 8006bec:	4632      	movcs	r2, r6
 8006bee:	f7ff ffc9 	bl	8006b84 <memcpy>
 8006bf2:	4629      	mov	r1, r5
 8006bf4:	4638      	mov	r0, r7
 8006bf6:	f7ff fbbf 	bl	8006378 <_free_r>
 8006bfa:	e7f1      	b.n	8006be0 <_realloc_r+0x40>

08006bfc <_malloc_usable_size_r>:
 8006bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c00:	1f18      	subs	r0, r3, #4
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	bfbc      	itt	lt
 8006c06:	580b      	ldrlt	r3, [r1, r0]
 8006c08:	18c0      	addlt	r0, r0, r3
 8006c0a:	4770      	bx	lr

08006c0c <_init>:
 8006c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0e:	bf00      	nop
 8006c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c12:	bc08      	pop	{r3}
 8006c14:	469e      	mov	lr, r3
 8006c16:	4770      	bx	lr

08006c18 <_fini>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	bf00      	nop
 8006c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1e:	bc08      	pop	{r3}
 8006c20:	469e      	mov	lr, r3
 8006c22:	4770      	bx	lr
