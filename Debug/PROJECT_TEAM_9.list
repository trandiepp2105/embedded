
PROJECT_TEAM_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ce0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  08006e70  08006e70  00007e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800714c  0800714c  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800714c  0800714c  0000814c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007154  08007154  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007154  08007154  00008154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007158  08007158  00008158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800715c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000905c  2**0
                  CONTENTS
 10 .bss          00000258  20000060  20000060  00009060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  00009060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b3e6  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ee7  00000000  00000000  00014472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  00016360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e89  00000000  00000000  00016de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6ac  00000000  00000000  00019c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba692  00000000  00000000  0002831d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e29af  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 0000080a  00000000  00000000  000e29f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000321c  00000000  00000000  000e31fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000e6418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e58 	.word	0x08006e58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006e58 	.word	0x08006e58

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b988 	b.w	8000eb4 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	468e      	mov	lr, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	4688      	mov	r8, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4617      	mov	r7, r2
 8000bd0:	d962      	bls.n	8000c98 <__udivmoddi4+0xdc>
 8000bd2:	fab2 f682 	clz	r6, r2
 8000bd6:	b14e      	cbz	r6, 8000bec <__udivmoddi4+0x30>
 8000bd8:	f1c6 0320 	rsb	r3, r6, #32
 8000bdc:	fa01 f806 	lsl.w	r8, r1, r6
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	40b7      	lsls	r7, r6
 8000be6:	ea43 0808 	orr.w	r8, r3, r8
 8000bea:	40b4      	lsls	r4, r6
 8000bec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf0:	fa1f fc87 	uxth.w	ip, r7
 8000bf4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bf8:	0c23      	lsrs	r3, r4, #16
 8000bfa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fb01 f20c 	mul.w	r2, r1, ip
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c10:	f080 80ea 	bcs.w	8000de8 <__udivmoddi4+0x22c>
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f240 80e7 	bls.w	8000de8 <__udivmoddi4+0x22c>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	443b      	add	r3, r7
 8000c1e:	1a9a      	subs	r2, r3, r2
 8000c20:	b2a3      	uxth	r3, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c2e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c32:	459c      	cmp	ip, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x8e>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3c:	f080 80d6 	bcs.w	8000dec <__udivmoddi4+0x230>
 8000c40:	459c      	cmp	ip, r3
 8000c42:	f240 80d3 	bls.w	8000dec <__udivmoddi4+0x230>
 8000c46:	443b      	add	r3, r7
 8000c48:	3802      	subs	r0, #2
 8000c4a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c4e:	eba3 030c 	sub.w	r3, r3, ip
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11d      	cbz	r5, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40f3      	lsrs	r3, r6
 8000c58:	2200      	movs	r2, #0
 8000c5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d905      	bls.n	8000c72 <__udivmoddi4+0xb6>
 8000c66:	b10d      	cbz	r5, 8000c6c <__udivmoddi4+0xb0>
 8000c68:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e7f5      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c72:	fab3 f183 	clz	r1, r3
 8000c76:	2900      	cmp	r1, #0
 8000c78:	d146      	bne.n	8000d08 <__udivmoddi4+0x14c>
 8000c7a:	4573      	cmp	r3, lr
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xc8>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 8105 	bhi.w	8000e8e <__udivmoddi4+0x2d2>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	4690      	mov	r8, r2
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e5      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c92:	e9c5 4800 	strd	r4, r8, [r5]
 8000c96:	e7e2      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f000 8090 	beq.w	8000dbe <__udivmoddi4+0x202>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f040 80a4 	bne.w	8000df0 <__udivmoddi4+0x234>
 8000ca8:	1a8a      	subs	r2, r1, r2
 8000caa:	0c03      	lsrs	r3, r0, #16
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	b280      	uxth	r0, r0
 8000cb2:	b2bc      	uxth	r4, r7
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cba:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cc2:	fb04 f20c 	mul.w	r2, r4, ip
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x11e>
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x11c>
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	f200 80e0 	bhi.w	8000e98 <__udivmoddi4+0x2dc>
 8000cd8:	46c4      	mov	ip, r8
 8000cda:	1a9b      	subs	r3, r3, r2
 8000cdc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ce0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ce4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ce8:	fb02 f404 	mul.w	r4, r2, r4
 8000cec:	429c      	cmp	r4, r3
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x144>
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x142>
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	f200 80ca 	bhi.w	8000e92 <__udivmoddi4+0x2d6>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	1b1b      	subs	r3, r3, r4
 8000d02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d06:	e7a5      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d08:	f1c1 0620 	rsb	r6, r1, #32
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d12:	431f      	orrs	r7, r3
 8000d14:	fa0e f401 	lsl.w	r4, lr, r1
 8000d18:	fa20 f306 	lsr.w	r3, r0, r6
 8000d1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d24:	4323      	orrs	r3, r4
 8000d26:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2a:	fa1f fc87 	uxth.w	ip, r7
 8000d2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d32:	0c1c      	lsrs	r4, r3, #16
 8000d34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	fa02 f201 	lsl.w	r2, r2, r1
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x1a0>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d4e:	f080 809c 	bcs.w	8000e8a <__udivmoddi4+0x2ce>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f240 8099 	bls.w	8000e8a <__udivmoddi4+0x2ce>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	443c      	add	r4, r7
 8000d5c:	eba4 040e 	sub.w	r4, r4, lr
 8000d60:	fa1f fe83 	uxth.w	lr, r3
 8000d64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d68:	fb09 4413 	mls	r4, r9, r3, r4
 8000d6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d74:	45a4      	cmp	ip, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1ce>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d7e:	f080 8082 	bcs.w	8000e86 <__udivmoddi4+0x2ca>
 8000d82:	45a4      	cmp	ip, r4
 8000d84:	d97f      	bls.n	8000e86 <__udivmoddi4+0x2ca>
 8000d86:	3b02      	subs	r3, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d8e:	eba4 040c 	sub.w	r4, r4, ip
 8000d92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d96:	4564      	cmp	r4, ip
 8000d98:	4673      	mov	r3, lr
 8000d9a:	46e1      	mov	r9, ip
 8000d9c:	d362      	bcc.n	8000e64 <__udivmoddi4+0x2a8>
 8000d9e:	d05f      	beq.n	8000e60 <__udivmoddi4+0x2a4>
 8000da0:	b15d      	cbz	r5, 8000dba <__udivmoddi4+0x1fe>
 8000da2:	ebb8 0203 	subs.w	r2, r8, r3
 8000da6:	eb64 0409 	sbc.w	r4, r4, r9
 8000daa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dae:	fa22 f301 	lsr.w	r3, r2, r1
 8000db2:	431e      	orrs	r6, r3
 8000db4:	40cc      	lsrs	r4, r1
 8000db6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dba:	2100      	movs	r1, #0
 8000dbc:	e74f      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000dbe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dc2:	0c01      	lsrs	r1, r0, #16
 8000dc4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dc8:	b280      	uxth	r0, r0
 8000dca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	463c      	mov	r4, r7
 8000dd4:	46b8      	mov	r8, r7
 8000dd6:	46be      	mov	lr, r7
 8000dd8:	2620      	movs	r6, #32
 8000dda:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dde:	eba2 0208 	sub.w	r2, r2, r8
 8000de2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000de6:	e766      	b.n	8000cb6 <__udivmoddi4+0xfa>
 8000de8:	4601      	mov	r1, r0
 8000dea:	e718      	b.n	8000c1e <__udivmoddi4+0x62>
 8000dec:	4610      	mov	r0, r2
 8000dee:	e72c      	b.n	8000c4a <__udivmoddi4+0x8e>
 8000df0:	f1c6 0220 	rsb	r2, r6, #32
 8000df4:	fa2e f302 	lsr.w	r3, lr, r2
 8000df8:	40b7      	lsls	r7, r6
 8000dfa:	40b1      	lsls	r1, r6
 8000dfc:	fa20 f202 	lsr.w	r2, r0, r2
 8000e00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e04:	430a      	orrs	r2, r1
 8000e06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e0a:	b2bc      	uxth	r4, r7
 8000e0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb08 f904 	mul.w	r9, r8, r4
 8000e1a:	40b0      	lsls	r0, r6
 8000e1c:	4589      	cmp	r9, r1
 8000e1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e22:	b280      	uxth	r0, r0
 8000e24:	d93e      	bls.n	8000ea4 <__udivmoddi4+0x2e8>
 8000e26:	1879      	adds	r1, r7, r1
 8000e28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e2c:	d201      	bcs.n	8000e32 <__udivmoddi4+0x276>
 8000e2e:	4589      	cmp	r9, r1
 8000e30:	d81f      	bhi.n	8000e72 <__udivmoddi4+0x2b6>
 8000e32:	eba1 0109 	sub.w	r1, r1, r9
 8000e36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3a:	fb09 f804 	mul.w	r8, r9, r4
 8000e3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e42:	b292      	uxth	r2, r2
 8000e44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e48:	4542      	cmp	r2, r8
 8000e4a:	d229      	bcs.n	8000ea0 <__udivmoddi4+0x2e4>
 8000e4c:	18ba      	adds	r2, r7, r2
 8000e4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e52:	d2c4      	bcs.n	8000dde <__udivmoddi4+0x222>
 8000e54:	4542      	cmp	r2, r8
 8000e56:	d2c2      	bcs.n	8000dde <__udivmoddi4+0x222>
 8000e58:	f1a9 0102 	sub.w	r1, r9, #2
 8000e5c:	443a      	add	r2, r7
 8000e5e:	e7be      	b.n	8000dde <__udivmoddi4+0x222>
 8000e60:	45f0      	cmp	r8, lr
 8000e62:	d29d      	bcs.n	8000da0 <__udivmoddi4+0x1e4>
 8000e64:	ebbe 0302 	subs.w	r3, lr, r2
 8000e68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	46e1      	mov	r9, ip
 8000e70:	e796      	b.n	8000da0 <__udivmoddi4+0x1e4>
 8000e72:	eba7 0909 	sub.w	r9, r7, r9
 8000e76:	4449      	add	r1, r9
 8000e78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e80:	fb09 f804 	mul.w	r8, r9, r4
 8000e84:	e7db      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e86:	4673      	mov	r3, lr
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1ce>
 8000e8a:	4650      	mov	r0, sl
 8000e8c:	e766      	b.n	8000d5c <__udivmoddi4+0x1a0>
 8000e8e:	4608      	mov	r0, r1
 8000e90:	e6fd      	b.n	8000c8e <__udivmoddi4+0xd2>
 8000e92:	443b      	add	r3, r7
 8000e94:	3a02      	subs	r2, #2
 8000e96:	e733      	b.n	8000d00 <__udivmoddi4+0x144>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	443b      	add	r3, r7
 8000e9e:	e71c      	b.n	8000cda <__udivmoddi4+0x11e>
 8000ea0:	4649      	mov	r1, r9
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x222>
 8000ea4:	eba1 0109 	sub.w	r1, r1, r9
 8000ea8:	46c4      	mov	ip, r8
 8000eaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eae:	fb09 f804 	mul.w	r8, r9, r4
 8000eb2:	e7c4      	b.n	8000e3e <__udivmoddi4+0x282>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0ac      	sub	sp, #176	@ 0xb0
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // Task Box Definitions
  uint16_t margin = 10;
 8000ebe:	230a      	movs	r3, #10
 8000ec0:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
  uint16_t spacing_between_boxes = 10;
 8000ec4:	230a      	movs	r3, #10
 8000ec6:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
  // Assuming LCD_WIDTH is 240 and LCD_HEIGHT is 320 from manual_lcd.h
  // If LCD_WIDTH is not 240, task_box_w calculation will be incorrect.
  uint16_t task_box_w = (LCD_WIDTH - 2 * margin - spacing_between_boxes) / 2;
 8000eca:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8000ece:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8000ed2:	005a      	lsls	r2, r3, #1
 8000ed4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	0fda      	lsrs	r2, r3, #31
 8000edc:	4413      	add	r3, r2
 8000ede:	105b      	asrs	r3, r3, #1
 8000ee0:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
  uint16_t task_box_h = 70;
 8000ee4:	2346      	movs	r3, #70	@ 0x46
 8000ee6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
  uint16_t info_box_y = 10;
 8000eea:	230a      	movs	r3, #10
 8000eec:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
  uint16_t info_box_h = 30;
 8000ef0:	231e      	movs	r3, #30
 8000ef2:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t start_y_tasks_row1 = info_box_y + info_box_h + 20;
 8000ef6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 8000efa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8000efe:	4413      	add	r3, r2
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	3314      	adds	r3, #20
 8000f04:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  uint16_t start_y_tasks_row2 = start_y_tasks_row1 + task_box_h + spacing_between_boxes;
 8000f08:	f8b7 2098 	ldrh.w	r2, [r7, #152]	@ 0x98
 8000f0c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000f10:	4413      	add	r3, r2
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8000f18:	4413      	add	r3, r2
 8000f1a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

  TaskBox_t task_boxes[] = {
 8000f1e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8000f22:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8000f26:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8000f2a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8000f2e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8000f32:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8000f36:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000f3a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8000f3e:	4bcf      	ldr	r3, [pc, #828]	@ (800127c <main+0x3c4>)
 8000f40:	667b      	str	r3, [r7, #100]	@ 0x64
      {margin, start_y_tasks_row1, task_box_w, task_box_h, "Task 02-1"},
      {(uint16_t)(margin + task_box_w + spacing_between_boxes), start_y_tasks_row1, task_box_w, task_box_h, "Task 02-2"},
 8000f42:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8000f46:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8000f52:	4413      	add	r3, r2
 8000f54:	b29b      	uxth	r3, r3
  TaskBox_t task_boxes[] = {
 8000f56:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8000f5a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8000f5e:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8000f62:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8000f66:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8000f6a:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000f6e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8000f72:	4bc3      	ldr	r3, [pc, #780]	@ (8001280 <main+0x3c8>)
 8000f74:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f76:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	@ 0xa4
 8000f7a:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8000f7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000f82:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8000f86:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8000f8a:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8000f8e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000f92:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8000f96:	4bbb      	ldr	r3, [pc, #748]	@ (8001284 <main+0x3cc>)
 8000f98:	67fb      	str	r3, [r7, #124]	@ 0x7c
      {margin, start_y_tasks_row2, task_box_w, task_box_h, "Task 02-3"},
      {(uint16_t)(margin + task_box_w + spacing_between_boxes), start_y_tasks_row2, task_box_w, task_box_h, "Task 02-4"}};
 8000f9a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8000f9e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8000fa2:	4413      	add	r3, r2
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8000faa:	4413      	add	r3, r2
 8000fac:	b29b      	uxth	r3, r3
  TaskBox_t task_boxes[] = {
 8000fae:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
 8000fb2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8000fb6:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8000fba:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8000fbe:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8000fc2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8000fc6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8000fca:	4baf      	ldr	r3, [pc, #700]	@ (8001288 <main+0x3d0>)
 8000fcc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  const int num_tasks = sizeof(task_boxes) / sizeof(task_boxes[0]);
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  char info_text_buffer[50];
  char current_task_text[20];
  Coordinate rawPoint, displayPoint;

  // Define the Back Button Box (ADJUST x, y, w, h AS PER YOUR Manual_LCD_DrawLayout)
  uint16_t back_button_h = 45;
 8000fd6:	232d      	movs	r3, #45	@ 0x2d
 8000fd8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  uint16_t back_button_w = 90; // Example height for back button
 8000fdc:	235a      	movs	r3, #90	@ 0x5a
 8000fde:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  TaskBox_t back_button_box = {
      (uint16_t)(margin + task_box_w + spacing_between_boxes), // x: same margin as tasks
 8000fe2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8000fe6:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8000fea:	4413      	add	r3, r2
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	b29b      	uxth	r3, r3
  TaskBox_t back_button_box = {
 8000ff6:	803b      	strh	r3, [r7, #0]
      (uint16_t)(start_y_tasks_row2 + task_box_h + 20),        // y: towards the bottom
 8000ff8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	@ 0x96
 8000ffc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8001000:	4413      	add	r3, r2
 8001002:	b29b      	uxth	r3, r3
 8001004:	3314      	adds	r3, #20
 8001006:	b29b      	uxth	r3, r3
  TaskBox_t back_button_box = {
 8001008:	807b      	strh	r3, [r7, #2]
 800100a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800100e:	80bb      	strh	r3, [r7, #4]
 8001010:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8001014:	80fb      	strh	r3, [r7, #6]
 8001016:	4b9d      	ldr	r3, [pc, #628]	@ (800128c <main+0x3d4>)
 8001018:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101a:	f001 ff5b 	bl	8002ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101e:	f000 f949 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001022:	f000 fa13 	bl	800144c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001026:	f000 f9db 	bl	80013e0 <MX_SPI1_Init>
  MX_I2C2_Init();
 800102a:	f000 f9ab 	bl	8001384 <MX_I2C2_Init>
  Manual_LCD_Init();
 800102e:	f000 fb55 	bl	80016dc <Manual_LCD_Init>
  Manual_Touch_Init(&hspi1);
 8001032:	4897      	ldr	r0, [pc, #604]	@ (8001290 <main+0x3d8>)
 8001034:	f001 face 	bl	80025d4 <Manual_Touch_Init>

  Manual_LCD_Clear(COLOR_BLACK);
 8001038:	2000      	movs	r0, #0
 800103a:	f000 fc69 	bl	8001910 <Manual_LCD_Clear>
  Manual_LCD_DrawLayout(); // This function should draw the tasks and the back button
 800103e:	f000 ff77 	bl	8001f30 <Manual_LCD_DrawLayout>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (Manual_Touch_Pressed())
 8001042:	f001 fadd 	bl	8002600 <Manual_Touch_Pressed>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	f000 812f 	beq.w	80012ac <main+0x3f4>
    {
      if (Manual_Touch_GetRawPoint(&rawPoint))
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fae4 	bl	8002620 <Manual_Touch_GetRawPoint>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 8101 	beq.w	8001262 <main+0x3aa>
      {
        Manual_Touch_ApplyCalibration(&displayPoint, &rawPoint);
 8001060:	f107 0210 	add.w	r2, r7, #16
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f001 fcba 	bl	80029e4 <Manual_Touch_ApplyCalibration>

        int task_hit_index = -1;
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
 8001074:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        for (int i = 0; i < num_tasks; i++)
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800107e:	e057      	b.n	8001130 <main+0x278>
        {
          if (displayPoint.x >= task_boxes[i].x && displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 8001080:	89b9      	ldrh	r1, [r7, #12]
 8001082:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	33b0      	adds	r3, #176	@ 0xb0
 8001090:	443b      	add	r3, r7
 8001092:	3b54      	subs	r3, #84	@ 0x54
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	4299      	cmp	r1, r3
 8001098:	d345      	bcc.n	8001126 <main+0x26e>
 800109a:	89bb      	ldrh	r3, [r7, #12]
 800109c:	4619      	mov	r1, r3
 800109e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	33b0      	adds	r3, #176	@ 0xb0
 80010ac:	443b      	add	r3, r7
 80010ae:	3b54      	subs	r3, #84	@ 0x54
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80010b8:	4613      	mov	r3, r2
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	4413      	add	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	33b0      	adds	r3, #176	@ 0xb0
 80010c2:	443b      	add	r3, r7
 80010c4:	3b50      	subs	r3, #80	@ 0x50
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	4403      	add	r3, r0
 80010ca:	4299      	cmp	r1, r3
 80010cc:	da2b      	bge.n	8001126 <main+0x26e>
              displayPoint.y >= task_boxes[i].y && displayPoint.y < (task_boxes[i].y + task_boxes[i].h))
 80010ce:	89f9      	ldrh	r1, [r7, #14]
 80010d0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80010d4:	4613      	mov	r3, r2
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	4413      	add	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	33b0      	adds	r3, #176	@ 0xb0
 80010de:	443b      	add	r3, r7
 80010e0:	3b52      	subs	r3, #82	@ 0x52
 80010e2:	881b      	ldrh	r3, [r3, #0]
          if (displayPoint.x >= task_boxes[i].x && displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 80010e4:	4299      	cmp	r1, r3
 80010e6:	d31e      	bcc.n	8001126 <main+0x26e>
              displayPoint.y >= task_boxes[i].y && displayPoint.y < (task_boxes[i].y + task_boxes[i].h))
 80010e8:	89fb      	ldrh	r3, [r7, #14]
 80010ea:	4619      	mov	r1, r3
 80010ec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80010f0:	4613      	mov	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	33b0      	adds	r3, #176	@ 0xb0
 80010fa:	443b      	add	r3, r7
 80010fc:	3b52      	subs	r3, #82	@ 0x52
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001106:	4613      	mov	r3, r2
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	4413      	add	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	33b0      	adds	r3, #176	@ 0xb0
 8001110:	443b      	add	r3, r7
 8001112:	3b4e      	subs	r3, #78	@ 0x4e
 8001114:	881b      	ldrh	r3, [r3, #0]
 8001116:	4403      	add	r3, r0
 8001118:	4299      	cmp	r1, r3
 800111a:	da04      	bge.n	8001126 <main+0x26e>
          {
            task_hit_index = i;
 800111c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001120:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            break;
 8001124:	e00a      	b.n	800113c <main+0x284>
        for (int i = 0; i < num_tasks; i++)
 8001126:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800112a:	3301      	adds	r3, #1
 800112c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001130:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001134:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001138:	429a      	cmp	r2, r3
 800113a:	dba1      	blt.n	8001080 <main+0x1c8>
          }
        }

        bool back_button_pressed = false;
 800113c:	2300      	movs	r3, #0
 800113e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        if (displayPoint.x >= back_button_box.x && displayPoint.x < (back_button_box.x + back_button_box.w) &&
 8001142:	89ba      	ldrh	r2, [r7, #12]
 8001144:	883b      	ldrh	r3, [r7, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d316      	bcc.n	8001178 <main+0x2c0>
 800114a:	89bb      	ldrh	r3, [r7, #12]
 800114c:	461a      	mov	r2, r3
 800114e:	883b      	ldrh	r3, [r7, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	88bb      	ldrh	r3, [r7, #4]
 8001154:	440b      	add	r3, r1
 8001156:	429a      	cmp	r2, r3
 8001158:	da0e      	bge.n	8001178 <main+0x2c0>
            displayPoint.y >= back_button_box.y && displayPoint.y < (back_button_box.y + back_button_box.h))
 800115a:	89fa      	ldrh	r2, [r7, #14]
 800115c:	887b      	ldrh	r3, [r7, #2]
        if (displayPoint.x >= back_button_box.x && displayPoint.x < (back_button_box.x + back_button_box.w) &&
 800115e:	429a      	cmp	r2, r3
 8001160:	d30a      	bcc.n	8001178 <main+0x2c0>
            displayPoint.y >= back_button_box.y && displayPoint.y < (back_button_box.y + back_button_box.h))
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	461a      	mov	r2, r3
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	4619      	mov	r1, r3
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	440b      	add	r3, r1
 800116e:	429a      	cmp	r2, r3
 8001170:	da02      	bge.n	8001178 <main+0x2c0>
        {
          back_button_pressed = true;
 8001172:	2301      	movs	r3, #1
 8001174:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        }

        if (task_hit_index != -1)
 8001178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800117c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001180:	d04d      	beq.n	800121e <main+0x366>
        {
          // reset fill color of previous task box(using current_task_text)
          if (strlen(current_task_text) > 0)
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d028      	beq.n	80011de <main+0x326>
          {
            if (strcmp(current_task_text, task_boxes[task_hit_index].name) != 0)
 800118c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	33b0      	adds	r3, #176	@ 0xb0
 800119a:	443b      	add	r3, r7
 800119c:	3b4c      	subs	r3, #76	@ 0x4c
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4611      	mov	r1, r2
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f812 	bl	80001d0 <strcmp>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d024      	beq.n	80011fc <main+0x344>
            {
              Manual_LCD_RefillTaskBox(current_task_text, COLOR_BLACK);                 // Refill the task box with red color
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f001 f909 	bl	80023d0 <Manual_LCD_RefillTaskBox>
              Manual_LCD_RefillTaskBox(task_boxes[task_hit_index].name, COLOR_MAGENTA); // Refill the task box with red color
 80011be:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80011c2:	4613      	mov	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4413      	add	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	33b0      	adds	r3, #176	@ 0xb0
 80011cc:	443b      	add	r3, r7
 80011ce:	3b4c      	subs	r3, #76	@ 0x4c
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 f8fa 	bl	80023d0 <Manual_LCD_RefillTaskBox>
 80011dc:	e00e      	b.n	80011fc <main+0x344>
            }
          }
          else
          {
            Manual_LCD_RefillTaskBox(task_boxes[task_hit_index].name, COLOR_MAGENTA); // Refill the task box with red color
 80011de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80011e2:	4613      	mov	r3, r2
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	4413      	add	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	33b0      	adds	r3, #176	@ 0xb0
 80011ec:	443b      	add	r3, r7
 80011ee:	3b4c      	subs	r3, #76	@ 0x4c
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 f8ea 	bl	80023d0 <Manual_LCD_RefillTaskBox>
          }
          strcpy(current_task_text, task_boxes[task_hit_index].name); // Update current task text
 80011fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001200:	4613      	mov	r3, r2
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	33b0      	adds	r3, #176	@ 0xb0
 800120a:	443b      	add	r3, r7
 800120c:	3b4c      	subs	r3, #76	@ 0x4c
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f005 f9cc 	bl	80065b4 <strcpy>
 800121c:	e012      	b.n	8001244 <main+0x38c>

          // sprintf(info_text_buffer, "Task: %s", task_boxes[task_hit_index].name);
        }
        else if (back_button_pressed)
 800121e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8001222:	2b00      	cmp	r3, #0
 8001224:	d006      	beq.n	8001234 <main+0x37c>
        {
          sprintf(info_text_buffer, "Back"); // Display "Back" when back button is touched
 8001226:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800122a:	4918      	ldr	r1, [pc, #96]	@ (800128c <main+0x3d4>)
 800122c:	4618      	mov	r0, r3
 800122e:	f005 f96b 	bl	8006508 <siprintf>
 8001232:	e007      	b.n	8001244 <main+0x38c>
        }
        else
        {
          sprintf(info_text_buffer, "Touch: X=%03u Y=%03u", displayPoint.x, displayPoint.y);
 8001234:	89bb      	ldrh	r3, [r7, #12]
 8001236:	461a      	mov	r2, r3
 8001238:	89fb      	ldrh	r3, [r7, #14]
 800123a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800123e:	4915      	ldr	r1, [pc, #84]	@ (8001294 <main+0x3dc>)
 8001240:	f005 f962 	bl	8006508 <siprintf>
        }
        Manual_LCD_UpdateInfoText(info_text_buffer);
 8001244:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001248:	4618      	mov	r0, r3
 800124a:	f001 f87b 	bl	8002344 <Manual_LCD_UpdateInfoText>

        while (Manual_Touch_Pressed())
 800124e:	e002      	b.n	8001256 <main+0x39e>
        {
          HAL_Delay(20);
 8001250:	2014      	movs	r0, #20
 8001252:	f001 feb1 	bl	8002fb8 <HAL_Delay>
        while (Manual_Touch_Pressed())
 8001256:	f001 f9d3 	bl	8002600 <Manual_Touch_Pressed>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f7      	bne.n	8001250 <main+0x398>
 8001260:	e024      	b.n	80012ac <main+0x3f4>
        }
      }
      else
      {
        sprintf(info_text_buffer, "Pressed, GetPoint Fail");
 8001262:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001266:	490c      	ldr	r1, [pc, #48]	@ (8001298 <main+0x3e0>)
 8001268:	4618      	mov	r0, r3
 800126a:	f005 f94d 	bl	8006508 <siprintf>
        Manual_LCD_UpdateInfoText(info_text_buffer);
 800126e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001272:	4618      	mov	r0, r3
 8001274:	f001 f866 	bl	8002344 <Manual_LCD_UpdateInfoText>
        while (Manual_Touch_Pressed())
 8001278:	e013      	b.n	80012a2 <main+0x3ea>
 800127a:	bf00      	nop
 800127c:	08006e70 	.word	0x08006e70
 8001280:	08006e7c 	.word	0x08006e7c
 8001284:	08006e88 	.word	0x08006e88
 8001288:	08006e94 	.word	0x08006e94
 800128c:	08006ea0 	.word	0x08006ea0
 8001290:	200000d0 	.word	0x200000d0
 8001294:	08006ea8 	.word	0x08006ea8
 8001298:	08006ec0 	.word	0x08006ec0
        {
          HAL_Delay(20);
 800129c:	2014      	movs	r0, #20
 800129e:	f001 fe8b 	bl	8002fb8 <HAL_Delay>
        while (Manual_Touch_Pressed())
 80012a2:	f001 f9ad 	bl	8002600 <Manual_Touch_Pressed>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f7      	bne.n	800129c <main+0x3e4>
        }
      }
    }
    HAL_Delay(50);
 80012ac:	2032      	movs	r0, #50	@ 0x32
 80012ae:	f001 fe83 	bl	8002fb8 <HAL_Delay>
    if (Manual_Touch_Pressed())
 80012b2:	e6c6      	b.n	8001042 <main+0x18a>

080012b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	@ 0x50
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 0320 	add.w	r3, r7, #32
 80012be:	2230      	movs	r2, #48	@ 0x30
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f005 f942 	bl	800654c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	4b27      	ldr	r3, [pc, #156]	@ (800137c <SystemClock_Config+0xc8>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	4a26      	ldr	r2, [pc, #152]	@ (800137c <SystemClock_Config+0xc8>)
 80012e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e8:	4b24      	ldr	r3, [pc, #144]	@ (800137c <SystemClock_Config+0xc8>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <SystemClock_Config+0xcc>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a20      	ldr	r2, [pc, #128]	@ (8001380 <SystemClock_Config+0xcc>)
 80012fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001302:	6013      	str	r3, [r2, #0]
 8001304:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <SystemClock_Config+0xcc>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001310:	2302      	movs	r3, #2
 8001312:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001314:	2301      	movs	r3, #1
 8001316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001318:	2310      	movs	r3, #16
 800131a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800131c:	2302      	movs	r3, #2
 800131e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001320:	2300      	movs	r3, #0
 8001322:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001324:	2308      	movs	r3, #8
 8001326:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001328:	2354      	movs	r3, #84	@ 0x54
 800132a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800132c:	2302      	movs	r3, #2
 800132e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001330:	2304      	movs	r3, #4
 8001332:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001334:	f107 0320 	add.w	r3, r7, #32
 8001338:	4618      	mov	r0, r3
 800133a:	f003 fecf 	bl	80050dc <HAL_RCC_OscConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001344:	f000 f8f8 	bl	8001538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001348:	230f      	movs	r3, #15
 800134a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134c:	2302      	movs	r3, #2
 800134e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001354:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001358:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2102      	movs	r1, #2
 8001364:	4618      	mov	r0, r3
 8001366:	f004 f931 	bl	80055cc <HAL_RCC_ClockConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001370:	f000 f8e2 	bl	8001538 <Error_Handler>
  }
}
 8001374:	bf00      	nop
 8001376:	3750      	adds	r7, #80	@ 0x50
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800
 8001380:	40007000 	.word	0x40007000

08001384 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */
  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001388:	4b12      	ldr	r3, [pc, #72]	@ (80013d4 <MX_I2C2_Init+0x50>)
 800138a:	4a13      	ldr	r2, [pc, #76]	@ (80013d8 <MX_I2C2_Init+0x54>)
 800138c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <MX_I2C2_Init+0x50>)
 8001390:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <MX_I2C2_Init+0x58>)
 8001392:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001394:	4b0f      	ldr	r3, [pc, #60]	@ (80013d4 <MX_I2C2_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <MX_I2C2_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <MX_I2C2_Init+0x50>)
 80013a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <MX_I2C2_Init+0x50>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <MX_I2C2_Init+0x50>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b4:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <MX_I2C2_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <MX_I2C2_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013c0:	4804      	ldr	r0, [pc, #16]	@ (80013d4 <MX_I2C2_Init+0x50>)
 80013c2:	f002 f951 	bl	8003668 <HAL_I2C_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013cc:	f000 f8b4 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000007c 	.word	0x2000007c
 80013d8:	40005800 	.word	0x40005800
 80013dc:	000186a0 	.word	0x000186a0

080013e0 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_Init 0 */
  /* USER CODE END SPI1_Init 0 */
  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013e4:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <MX_SPI1_Init+0x64>)
 80013e6:	4a18      	ldr	r2, [pc, #96]	@ (8001448 <MX_SPI1_Init+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ea:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <MX_SPI1_Init+0x64>)
 80013ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <MX_SPI1_Init+0x64>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <MX_SPI1_Init+0x64>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013fe:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <MX_SPI1_Init+0x64>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001404:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <MX_SPI1_Init+0x64>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800140a:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <MX_SPI1_Init+0x64>)
 800140c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001410:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001412:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <MX_SPI1_Init+0x64>)
 8001414:	2230      	movs	r2, #48	@ 0x30
 8001416:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001418:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <MX_SPI1_Init+0x64>)
 800141a:	2200      	movs	r2, #0
 800141c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <MX_SPI1_Init+0x64>)
 8001420:	2200      	movs	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001424:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <MX_SPI1_Init+0x64>)
 8001426:	2200      	movs	r2, #0
 8001428:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <MX_SPI1_Init+0x64>)
 800142c:	220a      	movs	r2, #10
 800142e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	@ (8001444 <MX_SPI1_Init+0x64>)
 8001432:	f004 fa97 	bl	8005964 <HAL_SPI_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800143c:	f000 f87c 	bl	8001538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200000d0 	.word	0x200000d0
 8001448:	40013000 	.word	0x40013000

0800144c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 030c 	add.w	r3, r7, #12
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b31      	ldr	r3, [pc, #196]	@ (800152c <MX_GPIO_Init+0xe0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a30      	ldr	r2, [pc, #192]	@ (800152c <MX_GPIO_Init+0xe0>)
 800146c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b2e      	ldr	r3, [pc, #184]	@ (800152c <MX_GPIO_Init+0xe0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <MX_GPIO_Init+0xe0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a29      	ldr	r2, [pc, #164]	@ (800152c <MX_GPIO_Init+0xe0>)
 8001488:	f043 0301 	orr.w	r3, r3, #1
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b27      	ldr	r3, [pc, #156]	@ (800152c <MX_GPIO_Init+0xe0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	4b23      	ldr	r3, [pc, #140]	@ (800152c <MX_GPIO_Init+0xe0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a22      	ldr	r2, [pc, #136]	@ (800152c <MX_GPIO_Init+0xe0>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b20      	ldr	r3, [pc, #128]	@ (800152c <MX_GPIO_Init+0xe0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 80014bc:	481c      	ldr	r0, [pc, #112]	@ (8001530 <MX_GPIO_Init+0xe4>)
 80014be:	f002 f895 	bl	80035ec <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level for TP_CS to be deselected initially */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 80014c2:	2201      	movs	r2, #1
 80014c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014c8:	481a      	ldr	r0, [pc, #104]	@ (8001534 <MX_GPIO_Init+0xe8>)
 80014ca:	f002 f88f 	bl	80035ec <HAL_GPIO_WritePin>
  // GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  // GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  // HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_RST_Pin LCD_BL_Pin LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin;
 80014ce:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 80014d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	4619      	mov	r1, r3
 80014e6:	4812      	ldr	r0, [pc, #72]	@ (8001530 <MX_GPIO_Init+0xe4>)
 80014e8:	f001 fecc 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 80014ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f2:	2301      	movs	r3, #1
 80014f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014fa:	2302      	movs	r3, #2
 80014fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	4619      	mov	r1, r3
 8001504:	480b      	ldr	r0, [pc, #44]	@ (8001534 <MX_GPIO_Init+0xe8>)
 8001506:	f001 febd 	bl	8003284 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin (Configured for polling) */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 800150a:	2310      	movs	r3, #16
 800150c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001512:	2301      	movs	r3, #1
 8001514:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	4619      	mov	r1, r3
 800151c:	4804      	ldr	r0, [pc, #16]	@ (8001530 <MX_GPIO_Init+0xe4>)
 800151e:	f001 feb1 	bl	8003284 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001522:	bf00      	nop
 8001524:	3720      	adds	r7, #32
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40020400 	.word	0x40020400
 8001534:	40020000 	.word	0x40020000

08001538 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800153c:	b672      	cpsid	i
}
 800153e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <Error_Handler+0x8>

08001544 <LCD_SPI_Send>:
// External SPI handle defined in main.c
extern SPI_HandleTypeDef hspi1;

// Low-level SPI communication functions
static void LCD_SPI_Send(uint8_t data)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 800154e:	1df9      	adds	r1, r7, #7
 8001550:	f04f 33ff 	mov.w	r3, #4294967295
 8001554:	2201      	movs	r2, #1
 8001556:	4803      	ldr	r0, [pc, #12]	@ (8001564 <LCD_SPI_Send+0x20>)
 8001558:	f004 fa8d 	bl	8005a76 <HAL_SPI_Transmit>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	200000d0 	.word	0x200000d0

08001568 <LCD_Write_Cmd>:

static void LCD_Write_Cmd(uint8_t cmd)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // DC low for command
 8001572:	2200      	movs	r2, #0
 8001574:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001578:	480a      	ldr	r0, [pc, #40]	@ (80015a4 <LCD_Write_Cmd+0x3c>)
 800157a:	f002 f837 	bl	80035ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 800157e:	2200      	movs	r2, #0
 8001580:	2180      	movs	r1, #128	@ 0x80
 8001582:	4808      	ldr	r0, [pc, #32]	@ (80015a4 <LCD_Write_Cmd+0x3c>)
 8001584:	f002 f832 	bl	80035ec <HAL_GPIO_WritePin>
    LCD_SPI_Send(cmd);
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff ffda 	bl	8001544 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001590:	2201      	movs	r2, #1
 8001592:	2180      	movs	r1, #128	@ 0x80
 8001594:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <LCD_Write_Cmd+0x3c>)
 8001596:	f002 f829 	bl	80035ec <HAL_GPIO_WritePin>
}
 800159a:	bf00      	nop
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020400 	.word	0x40020400

080015a8 <LCD_Write_Data>:

static void LCD_Write_Data(uint8_t data)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 80015b2:	2201      	movs	r2, #1
 80015b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015b8:	480a      	ldr	r0, [pc, #40]	@ (80015e4 <LCD_Write_Data+0x3c>)
 80015ba:	f002 f817 	bl	80035ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 80015be:	2200      	movs	r2, #0
 80015c0:	2180      	movs	r1, #128	@ 0x80
 80015c2:	4808      	ldr	r0, [pc, #32]	@ (80015e4 <LCD_Write_Data+0x3c>)
 80015c4:	f002 f812 	bl	80035ec <HAL_GPIO_WritePin>
    LCD_SPI_Send(data);
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ffba 	bl	8001544 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 80015d0:	2201      	movs	r2, #1
 80015d2:	2180      	movs	r1, #128	@ 0x80
 80015d4:	4803      	ldr	r0, [pc, #12]	@ (80015e4 <LCD_Write_Data+0x3c>)
 80015d6:	f002 f809 	bl	80035ec <HAL_GPIO_WritePin>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40020400 	.word	0x40020400

080015e8 <LCD_Write_Data16>:

static void LCD_Write_Data16(uint16_t data)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80015f8:	4810      	ldr	r0, [pc, #64]	@ (800163c <LCD_Write_Data16+0x54>)
 80015fa:	f001 fff7 	bl	80035ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 80015fe:	2200      	movs	r2, #0
 8001600:	2180      	movs	r1, #128	@ 0x80
 8001602:	480e      	ldr	r0, [pc, #56]	@ (800163c <LCD_Write_Data16+0x54>)
 8001604:	f001 fff2 	bl	80035ec <HAL_GPIO_WritePin>
    uint8_t bytes[2];
    bytes[0] = (data >> 8) & 0xFF;
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	b2db      	uxtb	r3, r3
 8001610:	733b      	strb	r3, [r7, #12]
    bytes[1] = data & 0xFF;
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, bytes, 2, HAL_MAX_DELAY);
 8001618:	f107 010c 	add.w	r1, r7, #12
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
 8001620:	2202      	movs	r2, #2
 8001622:	4807      	ldr	r0, [pc, #28]	@ (8001640 <LCD_Write_Data16+0x58>)
 8001624:	f004 fa27 	bl	8005a76 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001628:	2201      	movs	r2, #1
 800162a:	2180      	movs	r1, #128	@ 0x80
 800162c:	4803      	ldr	r0, [pc, #12]	@ (800163c <LCD_Write_Data16+0x54>)
 800162e:	f001 ffdd 	bl	80035ec <HAL_GPIO_WritePin>
}
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40020400 	.word	0x40020400
 8001640:	200000d0 	.word	0x200000d0

08001644 <LCD_Set_Address_Window>:

// Set drawing window
static void LCD_Set_Address_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4604      	mov	r4, r0
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4623      	mov	r3, r4
 8001654:	80fb      	strh	r3, [r7, #6]
 8001656:	4603      	mov	r3, r0
 8001658:	80bb      	strh	r3, [r7, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	807b      	strh	r3, [r7, #2]
 800165e:	4613      	mov	r3, r2
 8001660:	803b      	strh	r3, [r7, #0]
    LCD_Write_Cmd(0x2A); // Column Address Set
 8001662:	202a      	movs	r0, #42	@ 0x2a
 8001664:	f7ff ff80 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(x1 >> 8);
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b29b      	uxth	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff99 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(x1 & 0xFF);
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff94 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(x2 >> 8);
 8001680:	887b      	ldrh	r3, [r7, #2]
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	b29b      	uxth	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff8d 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(x2 & 0xFF);
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff88 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0x2B); // Page Address Set
 8001698:	202b      	movs	r0, #43	@ 0x2b
 800169a:	f7ff ff65 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(y1 >> 8);
 800169e:	88bb      	ldrh	r3, [r7, #4]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff7e 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(y1 & 0xFF);
 80016ac:	88bb      	ldrh	r3, [r7, #4]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff79 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(y2 >> 8);
 80016b6:	883b      	ldrh	r3, [r7, #0]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff72 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(y2 & 0xFF);
 80016c4:	883b      	ldrh	r3, [r7, #0]
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff ff6d 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0x2C); // Memory Write
 80016ce:	202c      	movs	r0, #44	@ 0x2c
 80016d0:	f7ff ff4a 	bl	8001568 <LCD_Write_Cmd>
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd90      	pop	{r4, r7, pc}

080016dc <Manual_LCD_Init>:
        }
    }
}

void Manual_LCD_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
    // Hardware Reset
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2104      	movs	r1, #4
 80016e4:	4889      	ldr	r0, [pc, #548]	@ (800190c <Manual_LCD_Init+0x230>)
 80016e6:	f001 ff81 	bl	80035ec <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80016ea:	2064      	movs	r0, #100	@ 0x64
 80016ec:	f001 fc64 	bl	8002fb8 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80016f0:	2201      	movs	r2, #1
 80016f2:	2104      	movs	r1, #4
 80016f4:	4885      	ldr	r0, [pc, #532]	@ (800190c <Manual_LCD_Init+0x230>)
 80016f6:	f001 ff79 	bl	80035ec <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80016fa:	2064      	movs	r0, #100	@ 0x64
 80016fc:	f001 fc5c 	bl	8002fb8 <HAL_Delay>

    // Backlight ON
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	2140      	movs	r1, #64	@ 0x40
 8001704:	4881      	ldr	r0, [pc, #516]	@ (800190c <Manual_LCD_Init+0x230>)
 8001706:	f001 ff71 	bl	80035ec <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800170a:	200a      	movs	r0, #10
 800170c:	f001 fc54 	bl	8002fb8 <HAL_Delay>

    // Initialization sequence (Example for ILI9341 - ADJUST FOR YOUR LCD)
    LCD_Write_Cmd(0xCF); // Power Control B
 8001710:	20cf      	movs	r0, #207	@ 0xcf
 8001712:	f7ff ff29 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001716:	2000      	movs	r0, #0
 8001718:	f7ff ff46 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 800171c:	20c1      	movs	r0, #193	@ 0xc1
 800171e:	f7ff ff43 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x30);
 8001722:	2030      	movs	r0, #48	@ 0x30
 8001724:	f7ff ff40 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0xED); // Power on sequence control
 8001728:	20ed      	movs	r0, #237	@ 0xed
 800172a:	f7ff ff1d 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x64);
 800172e:	2064      	movs	r0, #100	@ 0x64
 8001730:	f7ff ff3a 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001734:	2003      	movs	r0, #3
 8001736:	f7ff ff37 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x12);
 800173a:	2012      	movs	r0, #18
 800173c:	f7ff ff34 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x81);
 8001740:	2081      	movs	r0, #129	@ 0x81
 8001742:	f7ff ff31 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0xE8); // Driver timing control A
 8001746:	20e8      	movs	r0, #232	@ 0xe8
 8001748:	f7ff ff0e 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x85);
 800174c:	2085      	movs	r0, #133	@ 0x85
 800174e:	f7ff ff2b 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff ff28 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x78);
 8001758:	2078      	movs	r0, #120	@ 0x78
 800175a:	f7ff ff25 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0xCB); // Power control A
 800175e:	20cb      	movs	r0, #203	@ 0xcb
 8001760:	f7ff ff02 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x39);
 8001764:	2039      	movs	r0, #57	@ 0x39
 8001766:	f7ff ff1f 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x2C);
 800176a:	202c      	movs	r0, #44	@ 0x2c
 800176c:	f7ff ff1c 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff ff19 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x34);
 8001776:	2034      	movs	r0, #52	@ 0x34
 8001778:	f7ff ff16 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x02);
 800177c:	2002      	movs	r0, #2
 800177e:	f7ff ff13 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0xF7); // Pump ratio control
 8001782:	20f7      	movs	r0, #247	@ 0xf7
 8001784:	f7ff fef0 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x20);
 8001788:	2020      	movs	r0, #32
 800178a:	f7ff ff0d 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0xEA); // Driver timing control B
 800178e:	20ea      	movs	r0, #234	@ 0xea
 8001790:	f7ff feea 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff ff07 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff ff04 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0xC0);  // Power Control 1
 80017a0:	20c0      	movs	r0, #192	@ 0xc0
 80017a2:	f7ff fee1 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x23); // VRH[5:0]
 80017a6:	2023      	movs	r0, #35	@ 0x23
 80017a8:	f7ff fefe 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0xC1);  // Power Control 2
 80017ac:	20c1      	movs	r0, #193	@ 0xc1
 80017ae:	f7ff fedb 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x10); // SAP[2:0];BT[3:0]
 80017b2:	2010      	movs	r0, #16
 80017b4:	f7ff fef8 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0xC5);  // VCOM Control 1
 80017b8:	20c5      	movs	r0, #197	@ 0xc5
 80017ba:	f7ff fed5 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x3E); // Contrast
 80017be:	203e      	movs	r0, #62	@ 0x3e
 80017c0:	f7ff fef2 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x28);
 80017c4:	2028      	movs	r0, #40	@ 0x28
 80017c6:	f7ff feef 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0xC7);  // VCOM Control 2
 80017ca:	20c7      	movs	r0, #199	@ 0xc7
 80017cc:	f7ff fecc 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x86); // --
 80017d0:	2086      	movs	r0, #134	@ 0x86
 80017d2:	f7ff fee9 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0x36); // Memory Access Control
 80017d6:	2036      	movs	r0, #54	@ 0x36
 80017d8:	f7ff fec6 	bl	8001568 <LCD_Write_Cmd>
    // LCD_Write_Data(0x08); // Previous value
    LCD_Write_Data(0x28); // Try this: MV=1, MY=0, MX=0, BGR=1 (Landscape, X:T-B, Y:L-R)
 80017dc:	2028      	movs	r0, #40	@ 0x28
 80017de:	f7ff fee3 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0x3A);  // Pixel Format Set
 80017e2:	203a      	movs	r0, #58	@ 0x3a
 80017e4:	f7ff fec0 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x55); // 16 bits/pixel
 80017e8:	2055      	movs	r0, #85	@ 0x55
 80017ea:	f7ff fedd 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0xB1); // Frame Rate Control (In Normal Mode/Full Colors)
 80017ee:	20b1      	movs	r0, #177	@ 0xb1
 80017f0:	f7ff feba 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f7ff fed7 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x18);
 80017fa:	2018      	movs	r0, #24
 80017fc:	f7ff fed4 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0xB6); // Display Function Control
 8001800:	20b6      	movs	r0, #182	@ 0xb6
 8001802:	f7ff feb1 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x08);
 8001806:	2008      	movs	r0, #8
 8001808:	f7ff fece 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x82);
 800180c:	2082      	movs	r0, #130	@ 0x82
 800180e:	f7ff fecb 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x27);
 8001812:	2027      	movs	r0, #39	@ 0x27
 8001814:	f7ff fec8 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0xF2);  // Enable 3G
 8001818:	20f2      	movs	r0, #242	@ 0xf2
 800181a:	f7ff fea5 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x00); // 3Gamma Function Disable
 800181e:	2000      	movs	r0, #0
 8001820:	f7ff fec2 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0x26);  // Gamma Set
 8001824:	2026      	movs	r0, #38	@ 0x26
 8001826:	f7ff fe9f 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x01); // Gamma curve selected
 800182a:	2001      	movs	r0, #1
 800182c:	f7ff febc 	bl	80015a8 <LCD_Write_Data>

    // ... (Positive and Negative Gamma Correction remain the same) ...
    LCD_Write_Cmd(0xE0); // Positive Gamma Correction
 8001830:	20e0      	movs	r0, #224	@ 0xe0
 8001832:	f7ff fe99 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x0F);
 8001836:	200f      	movs	r0, #15
 8001838:	f7ff feb6 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 800183c:	2031      	movs	r0, #49	@ 0x31
 800183e:	f7ff feb3 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x2B);
 8001842:	202b      	movs	r0, #43	@ 0x2b
 8001844:	f7ff feb0 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8001848:	200c      	movs	r0, #12
 800184a:	f7ff fead 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 800184e:	200e      	movs	r0, #14
 8001850:	f7ff feaa 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8001854:	2008      	movs	r0, #8
 8001856:	f7ff fea7 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x4E);
 800185a:	204e      	movs	r0, #78	@ 0x4e
 800185c:	f7ff fea4 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0xF1);
 8001860:	20f1      	movs	r0, #241	@ 0xf1
 8001862:	f7ff fea1 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x37);
 8001866:	2037      	movs	r0, #55	@ 0x37
 8001868:	f7ff fe9e 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 800186c:	2007      	movs	r0, #7
 800186e:	f7ff fe9b 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x10);
 8001872:	2010      	movs	r0, #16
 8001874:	f7ff fe98 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001878:	2003      	movs	r0, #3
 800187a:	f7ff fe95 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 800187e:	200e      	movs	r0, #14
 8001880:	f7ff fe92 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x09);
 8001884:	2009      	movs	r0, #9
 8001886:	f7ff fe8f 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fe8c 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0xE1); // Negative Gamma Correction
 8001890:	20e1      	movs	r0, #225	@ 0xe1
 8001892:	f7ff fe69 	bl	8001568 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001896:	2000      	movs	r0, #0
 8001898:	f7ff fe86 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 800189c:	200e      	movs	r0, #14
 800189e:	f7ff fe83 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x14);
 80018a2:	2014      	movs	r0, #20
 80018a4:	f7ff fe80 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f7ff fe7d 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x11);
 80018ae:	2011      	movs	r0, #17
 80018b0:	f7ff fe7a 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 80018b4:	2007      	movs	r0, #7
 80018b6:	f7ff fe77 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 80018ba:	2031      	movs	r0, #49	@ 0x31
 80018bc:	f7ff fe74 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 80018c0:	20c1      	movs	r0, #193	@ 0xc1
 80018c2:	f7ff fe71 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x48);
 80018c6:	2048      	movs	r0, #72	@ 0x48
 80018c8:	f7ff fe6e 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x08);
 80018cc:	2008      	movs	r0, #8
 80018ce:	f7ff fe6b 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 80018d2:	200f      	movs	r0, #15
 80018d4:	f7ff fe68 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 80018d8:	200c      	movs	r0, #12
 80018da:	f7ff fe65 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 80018de:	2031      	movs	r0, #49	@ 0x31
 80018e0:	f7ff fe62 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x36);
 80018e4:	2036      	movs	r0, #54	@ 0x36
 80018e6:	f7ff fe5f 	bl	80015a8 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f7ff fe5c 	bl	80015a8 <LCD_Write_Data>

    LCD_Write_Cmd(0x11); // Exit Sleep
 80018f0:	2011      	movs	r0, #17
 80018f2:	f7ff fe39 	bl	8001568 <LCD_Write_Cmd>
    HAL_Delay(120);
 80018f6:	2078      	movs	r0, #120	@ 0x78
 80018f8:	f001 fb5e 	bl	8002fb8 <HAL_Delay>
    LCD_Write_Cmd(0x29); // Display ON
 80018fc:	2029      	movs	r0, #41	@ 0x29
 80018fe:	f7ff fe33 	bl	8001568 <LCD_Write_Cmd>

    Manual_LCD_Clear(COLOR_BLACK);
 8001902:	2000      	movs	r0, #0
 8001904:	f000 f804 	bl	8001910 <Manual_LCD_Clear>
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40020400 	.word	0x40020400

08001910 <Manual_LCD_Clear>:

void Manual_LCD_Clear(uint16_t color)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	80fb      	strh	r3, [r7, #6]
    LCD_Set_Address_Window(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 800191a:	f240 133f 	movw	r3, #319	@ 0x13f
 800191e:	22ef      	movs	r2, #239	@ 0xef
 8001920:	2100      	movs	r1, #0
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff fe8e 	bl	8001644 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001928:	2201      	movs	r2, #1
 800192a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800192e:	4815      	ldr	r0, [pc, #84]	@ (8001984 <Manual_LCD_Clear+0x74>)
 8001930:	f001 fe5c 	bl	80035ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001934:	2200      	movs	r2, #0
 8001936:	2180      	movs	r1, #128	@ 0x80
 8001938:	4812      	ldr	r0, [pc, #72]	@ (8001984 <Manual_LCD_Clear+0x74>)
 800193a:	f001 fe57 	bl	80035ec <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	0a1b      	lsrs	r3, r3, #8
 8001942:	b29b      	uxth	r3, r3
 8001944:	b2db      	uxtb	r3, r3
 8001946:	723b      	strb	r3, [r7, #8]
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	b2db      	uxtb	r3, r3
 800194c:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	e00a      	b.n	800196a <Manual_LCD_Clear+0x5a>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8001954:	f107 0108 	add.w	r1, r7, #8
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
 800195c:	2202      	movs	r2, #2
 800195e:	480a      	ldr	r0, [pc, #40]	@ (8001988 <Manual_LCD_Clear+0x78>)
 8001960:	f004 f889 	bl	8005a76 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	3301      	adds	r3, #1
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001970:	d3f0      	bcc.n	8001954 <Manual_LCD_Clear+0x44>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001972:	2201      	movs	r2, #1
 8001974:	2180      	movs	r1, #128	@ 0x80
 8001976:	4803      	ldr	r0, [pc, #12]	@ (8001984 <Manual_LCD_Clear+0x74>)
 8001978:	f001 fe38 	bl	80035ec <HAL_GPIO_WritePin>
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40020400 	.word	0x40020400
 8001988:	200000d0 	.word	0x200000d0

0800198c <Manual_LCD_DrawPixel>:

void Manual_LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	80fb      	strh	r3, [r7, #6]
 8001996:	460b      	mov	r3, r1
 8001998:	80bb      	strh	r3, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	807b      	strh	r3, [r7, #2]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	2bef      	cmp	r3, #239	@ 0xef
 80019a2:	d80e      	bhi.n	80019c2 <Manual_LCD_DrawPixel+0x36>
 80019a4:	88bb      	ldrh	r3, [r7, #4]
 80019a6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80019aa:	d20a      	bcs.n	80019c2 <Manual_LCD_DrawPixel+0x36>
        return;
    LCD_Set_Address_Window(x, y, x, y);
 80019ac:	88bb      	ldrh	r3, [r7, #4]
 80019ae:	88fa      	ldrh	r2, [r7, #6]
 80019b0:	88b9      	ldrh	r1, [r7, #4]
 80019b2:	88f8      	ldrh	r0, [r7, #6]
 80019b4:	f7ff fe46 	bl	8001644 <LCD_Set_Address_Window>
    LCD_Write_Data16(color);
 80019b8:	887b      	ldrh	r3, [r7, #2]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fe14 	bl	80015e8 <LCD_Write_Data16>
 80019c0:	e000      	b.n	80019c4 <Manual_LCD_DrawPixel+0x38>
        return;
 80019c2:	bf00      	nop
}
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <Manual_LCD_DrawLine>:

void Manual_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 80019ca:	b590      	push	{r4, r7, lr}
 80019cc:	b087      	sub	sp, #28
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4604      	mov	r4, r0
 80019d2:	4608      	mov	r0, r1
 80019d4:	4611      	mov	r1, r2
 80019d6:	461a      	mov	r2, r3
 80019d8:	4623      	mov	r3, r4
 80019da:	80fb      	strh	r3, [r7, #6]
 80019dc:	4603      	mov	r3, r0
 80019de:	80bb      	strh	r3, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	807b      	strh	r3, [r7, #2]
 80019e4:	4613      	mov	r3, r2
 80019e6:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 80019e8:	883a      	ldrh	r2, [r7, #0]
 80019ea:	88bb      	ldrh	r3, [r7, #4]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80019f2:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80019f6:	8879      	ldrh	r1, [r7, #2]
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	1acb      	subs	r3, r1, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bfb8      	it	lt
 8001a00:	425b      	neglt	r3, r3
 8001a02:	429a      	cmp	r2, r3
 8001a04:	bfcc      	ite	gt
 8001a06:	2301      	movgt	r3, #1
 8001a08:	2300      	movle	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	827b      	strh	r3, [r7, #18]
    if (steep)
 8001a0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00b      	beq.n	8001a2e <Manual_LCD_DrawLine+0x64>
    {
        uint16_t temp;
        temp = x1;
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	823b      	strh	r3, [r7, #16]
        x1 = y1;
 8001a1a:	88bb      	ldrh	r3, [r7, #4]
 8001a1c:	80fb      	strh	r3, [r7, #6]
        y1 = temp;
 8001a1e:	8a3b      	ldrh	r3, [r7, #16]
 8001a20:	80bb      	strh	r3, [r7, #4]
        temp = x2;
 8001a22:	887b      	ldrh	r3, [r7, #2]
 8001a24:	823b      	strh	r3, [r7, #16]
        x2 = y2;
 8001a26:	883b      	ldrh	r3, [r7, #0]
 8001a28:	807b      	strh	r3, [r7, #2]
        y2 = temp;
 8001a2a:	8a3b      	ldrh	r3, [r7, #16]
 8001a2c:	803b      	strh	r3, [r7, #0]
    }
    if (x1 > x2)
 8001a2e:	88fa      	ldrh	r2, [r7, #6]
 8001a30:	887b      	ldrh	r3, [r7, #2]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d90b      	bls.n	8001a4e <Manual_LCD_DrawLine+0x84>
    {
        uint16_t temp;
        temp = x1;
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	81fb      	strh	r3, [r7, #14]
        x1 = x2;
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	80fb      	strh	r3, [r7, #6]
        x2 = temp;
 8001a3e:	89fb      	ldrh	r3, [r7, #14]
 8001a40:	807b      	strh	r3, [r7, #2]
        temp = y1;
 8001a42:	88bb      	ldrh	r3, [r7, #4]
 8001a44:	81fb      	strh	r3, [r7, #14]
        y1 = y2;
 8001a46:	883b      	ldrh	r3, [r7, #0]
 8001a48:	80bb      	strh	r3, [r7, #4]
        y2 = temp;
 8001a4a:	89fb      	ldrh	r3, [r7, #14]
 8001a4c:	803b      	strh	r3, [r7, #0]
    }
    int16_t dx = x2 - x1;
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	81bb      	strh	r3, [r7, #12]
    int16_t dy = abs(y2 - y1);
 8001a58:	883a      	ldrh	r2, [r7, #0]
 8001a5a:	88bb      	ldrh	r3, [r7, #4]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	bfb8      	it	lt
 8001a62:	425b      	neglt	r3, r3
 8001a64:	817b      	strh	r3, [r7, #10]
    int16_t err = dx / 2;
 8001a66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a6a:	0fda      	lsrs	r2, r3, #31
 8001a6c:	4413      	add	r3, r2
 8001a6e:	105b      	asrs	r3, r3, #1
 8001a70:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;
    if (y1 < y2)
 8001a72:	88ba      	ldrh	r2, [r7, #4]
 8001a74:	883b      	ldrh	r3, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d202      	bcs.n	8001a80 <Manual_LCD_DrawLine+0xb6>
        ystep = 1;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	82bb      	strh	r3, [r7, #20]
 8001a7e:	e029      	b.n	8001ad4 <Manual_LCD_DrawLine+0x10a>
    else
        ystep = -1;
 8001a80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a84:	82bb      	strh	r3, [r7, #20]

    for (; x1 <= x2; x1++)
 8001a86:	e025      	b.n	8001ad4 <Manual_LCD_DrawLine+0x10a>
    {
        if (steep)
 8001a88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d006      	beq.n	8001a9e <Manual_LCD_DrawLine+0xd4>
            Manual_LCD_DrawPixel(y1, x1, color);
 8001a90:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001a92:	88f9      	ldrh	r1, [r7, #6]
 8001a94:	88bb      	ldrh	r3, [r7, #4]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff ff78 	bl	800198c <Manual_LCD_DrawPixel>
 8001a9c:	e005      	b.n	8001aaa <Manual_LCD_DrawLine+0xe0>
        else
            Manual_LCD_DrawPixel(x1, y1, color);
 8001a9e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001aa0:	88b9      	ldrh	r1, [r7, #4]
 8001aa2:	88fb      	ldrh	r3, [r7, #6]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff71 	bl	800198c <Manual_LCD_DrawPixel>
        err -= dy;
 8001aaa:	8afa      	ldrh	r2, [r7, #22]
 8001aac:	897b      	ldrh	r3, [r7, #10]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	82fb      	strh	r3, [r7, #22]
        if (err < 0)
 8001ab4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	da08      	bge.n	8001ace <Manual_LCD_DrawLine+0x104>
        {
            y1 += ystep;
 8001abc:	8aba      	ldrh	r2, [r7, #20]
 8001abe:	88bb      	ldrh	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8001ac4:	8afa      	ldrh	r2, [r7, #22]
 8001ac6:	89bb      	ldrh	r3, [r7, #12]
 8001ac8:	4413      	add	r3, r2
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	82fb      	strh	r3, [r7, #22]
    for (; x1 <= x2; x1++)
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	80fb      	strh	r3, [r7, #6]
 8001ad4:	88fa      	ldrh	r2, [r7, #6]
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d9d5      	bls.n	8001a88 <Manual_LCD_DrawLine+0xbe>
        }
    }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	371c      	adds	r7, #28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd90      	pop	{r4, r7, pc}

08001ae6 <Manual_LCD_DrawRectangle>:

void Manual_LCD_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001ae6:	b590      	push	{r4, r7, lr}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af02      	add	r7, sp, #8
 8001aec:	4604      	mov	r4, r0
 8001aee:	4608      	mov	r0, r1
 8001af0:	4611      	mov	r1, r2
 8001af2:	461a      	mov	r2, r3
 8001af4:	4623      	mov	r3, r4
 8001af6:	80fb      	strh	r3, [r7, #6]
 8001af8:	4603      	mov	r3, r0
 8001afa:	80bb      	strh	r3, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
 8001b00:	4613      	mov	r3, r2
 8001b02:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	2bef      	cmp	r3, #239	@ 0xef
 8001b08:	d865      	bhi.n	8001bd6 <Manual_LCD_DrawRectangle+0xf0>
 8001b0a:	88bb      	ldrh	r3, [r7, #4]
 8001b0c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001b10:	d261      	bcs.n	8001bd6 <Manual_LCD_DrawRectangle+0xf0>
        return;
    if ((x + width - 1) >= LCD_WIDTH)
 8001b12:	88fa      	ldrh	r2, [r7, #6]
 8001b14:	887b      	ldrh	r3, [r7, #2]
 8001b16:	4413      	add	r3, r2
 8001b18:	2bf0      	cmp	r3, #240	@ 0xf0
 8001b1a:	dd03      	ble.n	8001b24 <Manual_LCD_DrawRectangle+0x3e>
        width = LCD_WIDTH - x;
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001b22:	807b      	strh	r3, [r7, #2]
    if ((y + height - 1) >= LCD_HEIGHT)
 8001b24:	88ba      	ldrh	r2, [r7, #4]
 8001b26:	883b      	ldrh	r3, [r7, #0]
 8001b28:	4413      	add	r3, r2
 8001b2a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001b2e:	dd03      	ble.n	8001b38 <Manual_LCD_DrawRectangle+0x52>
        height = LCD_HEIGHT - y;
 8001b30:	88bb      	ldrh	r3, [r7, #4]
 8001b32:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001b36:	803b      	strh	r3, [r7, #0]

    Manual_LCD_DrawLine(x, y, x + width - 1, y, color);
 8001b38:	88fa      	ldrh	r2, [r7, #6]
 8001b3a:	887b      	ldrh	r3, [r7, #2]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	3b01      	subs	r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	88bc      	ldrh	r4, [r7, #4]
 8001b46:	88b9      	ldrh	r1, [r7, #4]
 8001b48:	88f8      	ldrh	r0, [r7, #6]
 8001b4a:	8b3b      	ldrh	r3, [r7, #24]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	4623      	mov	r3, r4
 8001b50:	f7ff ff3b 	bl	80019ca <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y + height - 1, x + width - 1, y + height - 1, color);
 8001b54:	88ba      	ldrh	r2, [r7, #4]
 8001b56:	883b      	ldrh	r3, [r7, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b299      	uxth	r1, r3
 8001b60:	88fa      	ldrh	r2, [r7, #6]
 8001b62:	887b      	ldrh	r3, [r7, #2]
 8001b64:	4413      	add	r3, r2
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29c      	uxth	r4, r3
 8001b6c:	88ba      	ldrh	r2, [r7, #4]
 8001b6e:	883b      	ldrh	r3, [r7, #0]
 8001b70:	4413      	add	r3, r2
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	88f8      	ldrh	r0, [r7, #6]
 8001b7a:	8b3b      	ldrh	r3, [r7, #24]
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	4622      	mov	r2, r4
 8001b82:	f7ff ff22 	bl	80019ca <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y, x, y + height - 1, color);
 8001b86:	88ba      	ldrh	r2, [r7, #4]
 8001b88:	883b      	ldrh	r3, [r7, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	b29c      	uxth	r4, r3
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	88b9      	ldrh	r1, [r7, #4]
 8001b96:	88f8      	ldrh	r0, [r7, #6]
 8001b98:	8b3b      	ldrh	r3, [r7, #24]
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	4623      	mov	r3, r4
 8001b9e:	f7ff ff14 	bl	80019ca <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x + width - 1, y, x + width - 1, y + height - 1, color);
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	3b01      	subs	r3, #1
 8001bac:	b298      	uxth	r0, r3
 8001bae:	88fa      	ldrh	r2, [r7, #6]
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	b29c      	uxth	r4, r3
 8001bba:	88ba      	ldrh	r2, [r7, #4]
 8001bbc:	883b      	ldrh	r3, [r7, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	88b9      	ldrh	r1, [r7, #4]
 8001bc8:	8b3b      	ldrh	r3, [r7, #24]
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	4622      	mov	r2, r4
 8001bd0:	f7ff fefb 	bl	80019ca <Manual_LCD_DrawLine>
 8001bd4:	e000      	b.n	8001bd8 <Manual_LCD_DrawRectangle+0xf2>
        return;
 8001bd6:	bf00      	nop
}
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd90      	pop	{r4, r7, pc}
	...

08001be0 <Manual_LCD_FillRectangle>:

void Manual_LCD_FillRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001be0:	b590      	push	{r4, r7, lr}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4604      	mov	r4, r0
 8001be8:	4608      	mov	r0, r1
 8001bea:	4611      	mov	r1, r2
 8001bec:	461a      	mov	r2, r3
 8001bee:	4623      	mov	r3, r4
 8001bf0:	80fb      	strh	r3, [r7, #6]
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	80bb      	strh	r3, [r7, #4]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	807b      	strh	r3, [r7, #2]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	2bef      	cmp	r3, #239	@ 0xef
 8001c02:	d855      	bhi.n	8001cb0 <Manual_LCD_FillRectangle+0xd0>
 8001c04:	88bb      	ldrh	r3, [r7, #4]
 8001c06:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001c0a:	d251      	bcs.n	8001cb0 <Manual_LCD_FillRectangle+0xd0>
        return;
    if ((x + width) > LCD_WIDTH)
 8001c0c:	88fa      	ldrh	r2, [r7, #6]
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	4413      	add	r3, r2
 8001c12:	2bf0      	cmp	r3, #240	@ 0xf0
 8001c14:	dd03      	ble.n	8001c1e <Manual_LCD_FillRectangle+0x3e>
        width = LCD_WIDTH - x;
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001c1c:	807b      	strh	r3, [r7, #2]
    if ((y + height) > LCD_HEIGHT)
 8001c1e:	88ba      	ldrh	r2, [r7, #4]
 8001c20:	883b      	ldrh	r3, [r7, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001c28:	dd03      	ble.n	8001c32 <Manual_LCD_FillRectangle+0x52>
        height = LCD_HEIGHT - y;
 8001c2a:	88bb      	ldrh	r3, [r7, #4]
 8001c2c:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001c30:	803b      	strh	r3, [r7, #0]

    LCD_Set_Address_Window(x, y, x + width - 1, y + height - 1);
 8001c32:	88fa      	ldrh	r2, [r7, #6]
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	4413      	add	r3, r2
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b29c      	uxth	r4, r3
 8001c3e:	88ba      	ldrh	r2, [r7, #4]
 8001c40:	883b      	ldrh	r3, [r7, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	88b9      	ldrh	r1, [r7, #4]
 8001c4c:	88f8      	ldrh	r0, [r7, #6]
 8001c4e:	4622      	mov	r2, r4
 8001c50:	f7ff fcf8 	bl	8001644 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001c54:	2201      	movs	r2, #1
 8001c56:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c5a:	4817      	ldr	r0, [pc, #92]	@ (8001cb8 <Manual_LCD_FillRectangle+0xd8>)
 8001c5c:	f001 fcc6 	bl	80035ec <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001c60:	2200      	movs	r2, #0
 8001c62:	2180      	movs	r1, #128	@ 0x80
 8001c64:	4814      	ldr	r0, [pc, #80]	@ (8001cb8 <Manual_LCD_FillRectangle+0xd8>)
 8001c66:	f001 fcc1 	bl	80035ec <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 8001c6a:	8c3b      	ldrh	r3, [r7, #32]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	723b      	strb	r3, [r7, #8]
 8001c74:	8c3b      	ldrh	r3, [r7, #32]
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	e00a      	b.n	8001c96 <Manual_LCD_FillRectangle+0xb6>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8001c80:	f107 0108 	add.w	r1, r7, #8
 8001c84:	f04f 33ff 	mov.w	r3, #4294967295
 8001c88:	2202      	movs	r2, #2
 8001c8a:	480c      	ldr	r0, [pc, #48]	@ (8001cbc <Manual_LCD_FillRectangle+0xdc>)
 8001c8c:	f003 fef3 	bl	8005a76 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3301      	adds	r3, #1
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	887b      	ldrh	r3, [r7, #2]
 8001c98:	883a      	ldrh	r2, [r7, #0]
 8001c9a:	fb02 f303 	mul.w	r3, r2, r3
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d3ed      	bcc.n	8001c80 <Manual_LCD_FillRectangle+0xa0>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2180      	movs	r1, #128	@ 0x80
 8001ca8:	4803      	ldr	r0, [pc, #12]	@ (8001cb8 <Manual_LCD_FillRectangle+0xd8>)
 8001caa:	f001 fc9f 	bl	80035ec <HAL_GPIO_WritePin>
 8001cae:	e000      	b.n	8001cb2 <Manual_LCD_FillRectangle+0xd2>
        return;
 8001cb0:	bf00      	nop
}
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd90      	pop	{r4, r7, pc}
 8001cb8:	40020400 	.word	0x40020400
 8001cbc:	200000d0 	.word	0x200000d0

08001cc0 <Manual_LCD_DrawChar>:
// A proper implementation would look up character data in a font table.
// Placeholder for font data - you need to define this
extern const unsigned char Font5x7[][5]; // Example: needs to be defined in font.c

void Manual_LCD_DrawChar(uint16_t x, uint16_t y, char c, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	4608      	mov	r0, r1
 8001cca:	4611      	mov	r1, r2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4623      	mov	r3, r4
 8001cd0:	80fb      	strh	r3, [r7, #6]
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80bb      	strh	r3, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	70fb      	strb	r3, [r7, #3]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	803b      	strh	r3, [r7, #0]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT || (x + 5 * size) > LCD_WIDTH || (y + 7 * size) > LCD_HEIGHT)
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	2bef      	cmp	r3, #239	@ 0xef
 8001ce2:	f200 80d1 	bhi.w	8001e88 <Manual_LCD_DrawChar+0x1c8>
 8001ce6:	88bb      	ldrh	r3, [r7, #4]
 8001ce8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001cec:	f080 80cc 	bcs.w	8001e88 <Manual_LCD_DrawChar+0x1c8>
 8001cf0:	88f9      	ldrh	r1, [r7, #6]
 8001cf2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	2bf0      	cmp	r3, #240	@ 0xf0
 8001d00:	f300 80c2 	bgt.w	8001e88 <Manual_LCD_DrawChar+0x1c8>
 8001d04:	88b9      	ldrh	r1, [r7, #4]
 8001d06:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	00db      	lsls	r3, r3, #3
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	440b      	add	r3, r1
 8001d12:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001d16:	f300 80b7 	bgt.w	8001e88 <Manual_LCD_DrawChar+0x1c8>
    {
        return; // Character won't fit
    }

    if (c < ' ' || c > '~')
 8001d1a:	78fb      	ldrb	r3, [r7, #3]
 8001d1c:	2b1f      	cmp	r3, #31
 8001d1e:	d902      	bls.n	8001d26 <Manual_LCD_DrawChar+0x66>
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	2b7e      	cmp	r3, #126	@ 0x7e
 8001d24:	d901      	bls.n	8001d2a <Manual_LCD_DrawChar+0x6a>
        c = '?'; // Handle non-printable characters
 8001d26:	233f      	movs	r3, #63	@ 0x3f
 8001d28:	70fb      	strb	r3, [r7, #3]

    for (uint8_t i = 0; i < 5; i++)
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
 8001d2e:	e088      	b.n	8001e42 <Manual_LCD_DrawChar+0x182>
    { // Width of char
        uint8_t line = Font5x7[c - ' '][i];
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	f1a3 0220 	sub.w	r2, r3, #32
 8001d36:	7bf9      	ldrb	r1, [r7, #15]
 8001d38:	4855      	ldr	r0, [pc, #340]	@ (8001e90 <Manual_LCD_DrawChar+0x1d0>)
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	4403      	add	r3, r0
 8001d42:	440b      	add	r3, r1
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	737b      	strb	r3, [r7, #13]
 8001d4c:	e073      	b.n	8001e36 <Manual_LCD_DrawChar+0x176>
        { // Height of char
            if (line & 0x01)
 8001d4e:	7bbb      	ldrb	r3, [r7, #14]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d034      	beq.n	8001dc2 <Manual_LCD_DrawChar+0x102>
            { // Check bit
                if (size == 1)
 8001d58:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d10e      	bne.n	8001d7e <Manual_LCD_DrawChar+0xbe>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, charColor);
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	4413      	add	r3, r2
 8001d68:	b298      	uxth	r0, r3
 8001d6a:	7b7b      	ldrb	r3, [r7, #13]
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	88bb      	ldrh	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	883a      	ldrh	r2, [r7, #0]
 8001d76:	4619      	mov	r1, r3
 8001d78:	f7ff fe08 	bl	800198c <Manual_LCD_DrawPixel>
 8001d7c:	e055      	b.n	8001e2a <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, charColor);
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	fb12 f303 	smulbb	r3, r2, r3
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	4413      	add	r3, r2
 8001d92:	b298      	uxth	r0, r3
 8001d94:	7b7b      	ldrb	r3, [r7, #13]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	fb12 f303 	smulbb	r3, r2, r3
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	88bb      	ldrh	r3, [r7, #4]
 8001da6:	4413      	add	r3, r2
 8001da8:	b299      	uxth	r1, r3
 8001daa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001db4:	b29c      	uxth	r4, r3
 8001db6:	883b      	ldrh	r3, [r7, #0]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	4623      	mov	r3, r4
 8001dbc:	f7ff ff10 	bl	8001be0 <Manual_LCD_FillRectangle>
 8001dc0:	e033      	b.n	8001e2a <Manual_LCD_DrawChar+0x16a>
                }
            }
            else
            {
                if (size == 1)
 8001dc2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001dc6:	2b01      	cmp	r3, #1
 8001dc8:	d10e      	bne.n	8001de8 <Manual_LCD_DrawChar+0x128>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, bgColor);
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	88fb      	ldrh	r3, [r7, #6]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	b298      	uxth	r0, r3
 8001dd4:	7b7b      	ldrb	r3, [r7, #13]
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	88bb      	ldrh	r3, [r7, #4]
 8001dda:	4413      	add	r3, r2
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	8c3a      	ldrh	r2, [r7, #32]
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7ff fdd3 	bl	800198c <Manual_LCD_DrawPixel>
 8001de6:	e020      	b.n	8001e2a <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, bgColor);
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	fb12 f303 	smulbb	r3, r2, r3
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	b298      	uxth	r0, r3
 8001dfe:	7b7b      	ldrb	r3, [r7, #13]
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	fb12 f303 	smulbb	r3, r2, r3
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	88bb      	ldrh	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	b299      	uxth	r1, r3
 8001e14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e1e:	b29c      	uxth	r4, r3
 8001e20:	8c3b      	ldrh	r3, [r7, #32]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	4623      	mov	r3, r4
 8001e26:	f7ff fedb 	bl	8001be0 <Manual_LCD_FillRectangle>
                }
            }
            line >>= 1;
 8001e2a:	7bbb      	ldrb	r3, [r7, #14]
 8001e2c:	085b      	lsrs	r3, r3, #1
 8001e2e:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 8001e30:	7b7b      	ldrb	r3, [r7, #13]
 8001e32:	3301      	adds	r3, #1
 8001e34:	737b      	strb	r3, [r7, #13]
 8001e36:	7b7b      	ldrb	r3, [r7, #13]
 8001e38:	2b06      	cmp	r3, #6
 8001e3a:	d988      	bls.n	8001d4e <Manual_LCD_DrawChar+0x8e>
    for (uint8_t i = 0; i < 5; i++)
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	f67f af73 	bls.w	8001d30 <Manual_LCD_DrawChar+0x70>
        }
    }
    // Draw a small gap for characters if size > 1 or if you want background fill for the gap
    if (size > 0)
 8001e4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d01b      	beq.n	8001e8a <Manual_LCD_DrawChar+0x1ca>
    { // Fill the column after the character (for spacing)
        Manual_LCD_FillRectangle(x + 5 * size, y, size, 7 * size, bgColor);
 8001e52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	461a      	mov	r2, r3
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	88fb      	ldrh	r3, [r7, #6]
 8001e62:	4413      	add	r3, r2
 8001e64:	b298      	uxth	r0, r3
 8001e66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	4619      	mov	r1, r3
 8001e74:	00c9      	lsls	r1, r1, #3
 8001e76:	1acb      	subs	r3, r1, r3
 8001e78:	b29c      	uxth	r4, r3
 8001e7a:	88b9      	ldrh	r1, [r7, #4]
 8001e7c:	8c3b      	ldrh	r3, [r7, #32]
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	4623      	mov	r3, r4
 8001e82:	f7ff fead 	bl	8001be0 <Manual_LCD_FillRectangle>
 8001e86:	e000      	b.n	8001e8a <Manual_LCD_DrawChar+0x1ca>
        return; // Character won't fit
 8001e88:	bf00      	nop
    }
}
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd90      	pop	{r4, r7, pc}
 8001e90:	08006f24 	.word	0x08006f24

08001e94 <Manual_LCD_DrawString>:

void Manual_LCD_DrawString(uint16_t x, uint16_t y, const char *str, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	60ba      	str	r2, [r7, #8]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	81fb      	strh	r3, [r7, #14]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	81bb      	strh	r3, [r7, #12]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	80fb      	strh	r3, [r7, #6]
    while (*str)
 8001eaa:	e037      	b.n	8001f1c <Manual_LCD_DrawString+0x88>
    {
        Manual_LCD_DrawChar(x, y, *str, charColor, bgColor, size);
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	781a      	ldrb	r2, [r3, #0]
 8001eb0:	88fc      	ldrh	r4, [r7, #6]
 8001eb2:	89b9      	ldrh	r1, [r7, #12]
 8001eb4:	89f8      	ldrh	r0, [r7, #14]
 8001eb6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	8c3b      	ldrh	r3, [r7, #32]
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	4623      	mov	r3, r4
 8001ec2:	f7ff fefd 	bl	8001cc0 <Manual_LCD_DrawChar>
        x += 6 * size; // Advance X position (5 for char + 1 for spacing)
 8001ec6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	461a      	mov	r2, r3
 8001ece:	0052      	lsls	r2, r2, #1
 8001ed0:	4413      	add	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	89fb      	ldrh	r3, [r7, #14]
 8001ed8:	4413      	add	r3, r2
 8001eda:	81fb      	strh	r3, [r7, #14]
        if (x + 5 * size >= LCD_WIDTH)
 8001edc:	89f9      	ldrh	r1, [r7, #14]
 8001ede:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	440b      	add	r3, r1
 8001eea:	2bef      	cmp	r3, #239	@ 0xef
 8001eec:	dd09      	ble.n	8001f02 <Manual_LCD_DrawString+0x6e>
        { // Simple wrap
            x = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	81fb      	strh	r3, [r7, #14]
            y += 8 * size; // Advance Y position
 8001ef2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	89bb      	ldrh	r3, [r7, #12]
 8001efe:	4413      	add	r3, r2
 8001f00:	81bb      	strh	r3, [r7, #12]
        }
        if (y + 7 * size >= LCD_HEIGHT)
 8001f02:	89b9      	ldrh	r1, [r7, #12]
 8001f04:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001f14:	da07      	bge.n	8001f26 <Manual_LCD_DrawString+0x92>
            break; // Out of screen
        str++;
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
    while (*str)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1c3      	bne.n	8001eac <Manual_LCD_DrawString+0x18>
    }
}
 8001f24:	e000      	b.n	8001f28 <Manual_LCD_DrawString+0x94>
            break; // Out of screen
 8001f26:	bf00      	nop
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd90      	pop	{r4, r7, pc}

08001f30 <Manual_LCD_DrawLayout>:

void Manual_LCD_DrawLayout(void)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b09f      	sub	sp, #124	@ 0x7c
 8001f34:	af02      	add	r7, sp, #8
    // Clear screen with blue background
    Manual_LCD_Clear(COLOR_BLUE);
 8001f36:	201f      	movs	r0, #31
 8001f38:	f7ff fcea 	bl	8001910 <Manual_LCD_Clear>

    uint16_t text_color = COLOR_WHITE;
 8001f3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f40:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    uint16_t box_fill_color = COLOR_BLACK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    uint16_t box_border_color = COLOR_WHITE;
 8001f4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f4e:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    uint8_t font_size = 1;
 8001f52:	2301      	movs	r3, #1
 8001f54:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
    uint8_t char_height = 7; // For 5x7 font at size 1
 8001f58:	2307      	movs	r3, #7
 8001f5a:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
    // uint8_t char_width_with_spacing = 6; // For 5x7 font at size 1

    // 1. Top Info Box: "Nhom: [nhom 01]"
    uint16_t info_box_x = 10;
 8001f5e:	230a      	movs	r3, #10
 8001f60:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    uint16_t info_box_y = 10;
 8001f64:	230a      	movs	r3, #10
 8001f66:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    uint16_t info_box_w = 150;
 8001f6a:	2396      	movs	r3, #150	@ 0x96
 8001f6c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
    uint16_t info_box_h = 30;
 8001f70:	231e      	movs	r3, #30
 8001f72:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
    const char *info_text = "Nhom: [nhom 01]";
 8001f76:	4bcd      	ldr	r3, [pc, #820]	@ (80022ac <Manual_LCD_DrawLayout+0x37c>)
 8001f78:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint16_t info_text_x = info_box_x + 5;
 8001f7a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001f7e:	3305      	adds	r3, #5
 8001f80:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    uint16_t info_text_y = info_box_y + (info_box_h - char_height * font_size) / 2;
 8001f84:	f8b7 2060 	ldrh.w	r2, [r7, #96]	@ 0x60
 8001f88:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001f8c:	f897 1069 	ldrb.w	r1, [r7, #105]	@ 0x69
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	0fda      	lsrs	r2, r3, #31
 8001f98:	4413      	add	r3, r2
 8001f9a:	105b      	asrs	r3, r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8001fa2:	4413      	add	r3, r2
 8001fa4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

    Manual_LCD_FillRectangle(info_box_x, info_box_y, info_box_w, info_box_h, box_fill_color);
 8001fa8:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 8001fac:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8001fb0:	f8b7 1064 	ldrh.w	r1, [r7, #100]	@ 0x64
 8001fb4:	f8b7 0066 	ldrh.w	r0, [r7, #102]	@ 0x66
 8001fb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	4623      	mov	r3, r4
 8001fc0:	f7ff fe0e 	bl	8001be0 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(info_box_x, info_box_y, info_box_w, info_box_h, box_border_color);
 8001fc4:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 8001fc8:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8001fcc:	f8b7 1064 	ldrh.w	r1, [r7, #100]	@ 0x64
 8001fd0:	f8b7 0066 	ldrh.w	r0, [r7, #102]	@ 0x66
 8001fd4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	4623      	mov	r3, r4
 8001fdc:	f7ff fd83 	bl	8001ae6 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(info_text_x, info_text_y, info_text, text_color, box_fill_color, font_size);
 8001fe0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001fe4:	f8b7 1058 	ldrh.w	r1, [r7, #88]	@ 0x58
 8001fe8:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 8001fec:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001ffc:	f7ff ff4a 	bl	8001e94 <Manual_LCD_DrawString>

    // 2. Task Boxes Grid
    uint16_t margin = 10;
 8002000:	230a      	movs	r3, #10
 8002002:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    uint16_t spacing_between_boxes = 10;
 8002006:	230a      	movs	r3, #10
 8002008:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    uint16_t task_box_w = (LCD_WIDTH - 2 * margin - spacing_between_boxes) / 2;
 800200c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002010:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8002014:	005a      	lsls	r2, r3, #1
 8002016:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	0fda      	lsrs	r2, r3, #31
 800201e:	4413      	add	r3, r2
 8002020:	105b      	asrs	r3, r3, #1
 8002022:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t task_box_h = 70;
 8002026:	2346      	movs	r3, #70	@ 0x46
 8002028:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    uint16_t start_y_tasks_row1 = info_box_y + info_box_h + 20;
 800202c:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8002030:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8002034:	4413      	add	r3, r2
 8002036:	b29b      	uxth	r3, r3
 8002038:	3314      	adds	r3, #20
 800203a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint16_t text_task_x_padding = 10; // Left padding for text inside task boxes
 800203e:	230a      	movs	r3, #10
 8002040:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    uint16_t text_task_y_offset = (task_box_h - char_height * font_size) / 2;
 8002044:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002048:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 800204c:	f897 1069 	ldrb.w	r1, [r7, #105]	@ 0x69
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	0fda      	lsrs	r2, r3, #31
 8002058:	4413      	add	r3, r2
 800205a:	105b      	asrs	r3, r3, #1
 800205c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

    // Task 02-1 (Top-Left)
    uint16_t task1_x = margin;
 8002060:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002064:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    uint16_t task1_y = start_y_tasks_row1;
 8002068:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800206c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    const char *task1_text = "Task 02-1";
 8002070:	4b8f      	ldr	r3, [pc, #572]	@ (80022b0 <Manual_LCD_DrawLayout+0x380>)
 8002072:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t text_task1_x = task1_x + text_task_x_padding;
 8002074:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002078:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800207c:	4413      	add	r3, r2
 800207e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint16_t text_task1_y = task1_y + text_task_y_offset;
 8002080:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002084:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002088:	4413      	add	r3, r2
 800208a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    Manual_LCD_FillRectangle(task1_x, task1_y, task_box_w, task_box_h, box_fill_color);
 800208c:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 8002090:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8002094:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8002098:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 800209c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	4623      	mov	r3, r4
 80020a4:	f7ff fd9c 	bl	8001be0 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task1_x, task1_y, task_box_w, task_box_h, box_border_color);
 80020a8:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 80020ac:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 80020b0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80020b4:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 80020b8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	4623      	mov	r3, r4
 80020c0:	f7ff fd11 	bl	8001ae6 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task1_x, text_task1_y, task1_text, text_color, box_fill_color, font_size);
 80020c4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80020c8:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 80020ca:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 80020cc:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80020d6:	9300      	str	r3, [sp, #0]
 80020d8:	4613      	mov	r3, r2
 80020da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80020dc:	f7ff feda 	bl	8001e94 <Manual_LCD_DrawString>

    // Task 02-2 (Top-Right)
    uint16_t task2_x = task1_x + task_box_w + spacing_between_boxes;
 80020e0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80020e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80020e8:	4413      	add	r3, r2
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80020f0:	4413      	add	r3, r2
 80020f2:	877b      	strh	r3, [r7, #58]	@ 0x3a
    uint16_t task2_y = start_y_tasks_row1;
 80020f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80020f8:	873b      	strh	r3, [r7, #56]	@ 0x38
    const char *task2_text = "Task 02-2";
 80020fa:	4b6e      	ldr	r3, [pc, #440]	@ (80022b4 <Manual_LCD_DrawLayout+0x384>)
 80020fc:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t text_task2_x = task2_x + text_task_x_padding;
 80020fe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8002100:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002104:	4413      	add	r3, r2
 8002106:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t text_task2_y = task2_y + text_task_y_offset;
 8002108:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800210a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800210e:	4413      	add	r3, r2
 8002110:	863b      	strh	r3, [r7, #48]	@ 0x30
    Manual_LCD_FillRectangle(task2_x, task2_y, task_box_w, task_box_h, box_fill_color);
 8002112:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 8002116:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 800211a:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800211c:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 800211e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	4623      	mov	r3, r4
 8002126:	f7ff fd5b 	bl	8001be0 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task2_x, task2_y, task_box_w, task_box_h, box_border_color);
 800212a:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 800212e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8002132:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002134:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 8002136:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	4623      	mov	r3, r4
 800213e:	f7ff fcd2 	bl	8001ae6 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task2_x, text_task2_y, task2_text, text_color, box_fill_color, font_size);
 8002142:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8002146:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8002148:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 800214a:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 800214e:	9301      	str	r3, [sp, #4]
 8002150:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	4613      	mov	r3, r2
 8002158:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800215a:	f7ff fe9b 	bl	8001e94 <Manual_LCD_DrawString>

    // Second row of task boxes
    uint16_t start_y_tasks_row2 = start_y_tasks_row1 + task_box_h + spacing_between_boxes;
 800215e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8002162:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002166:	4413      	add	r3, r2
 8002168:	b29a      	uxth	r2, r3
 800216a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800216e:	4413      	add	r3, r2
 8002170:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Task 02-3 (Bottom-Left)
    uint16_t task3_x = margin;
 8002172:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8002176:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t task3_y = start_y_tasks_row2;
 8002178:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800217a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    const char *task3_text = "Task 02-3";
 800217c:	4b4e      	ldr	r3, [pc, #312]	@ (80022b8 <Manual_LCD_DrawLayout+0x388>)
 800217e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t text_task3_x = task3_x + text_task_x_padding;
 8002180:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002182:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002186:	4413      	add	r3, r2
 8002188:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t text_task3_y = task3_y + text_task_y_offset;
 800218a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800218c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002190:	4413      	add	r3, r2
 8002192:	843b      	strh	r3, [r7, #32]
    Manual_LCD_FillRectangle(task3_x, task3_y, task_box_w, task_box_h, box_fill_color);
 8002194:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 8002198:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 800219c:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800219e:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 80021a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4623      	mov	r3, r4
 80021a8:	f7ff fd1a 	bl	8001be0 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task3_x, task3_y, task_box_w, task_box_h, box_border_color);
 80021ac:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 80021b0:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 80021b4:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80021b6:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 80021b8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80021bc:	9300      	str	r3, [sp, #0]
 80021be:	4623      	mov	r3, r4
 80021c0:	f7ff fc91 	bl	8001ae6 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task3_x, text_task3_y, task3_text, text_color, box_fill_color, font_size);
 80021c4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80021c8:	8c39      	ldrh	r1, [r7, #32]
 80021ca:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80021cc:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021dc:	f7ff fe5a 	bl	8001e94 <Manual_LCD_DrawString>

    // Task 02-4 (Bottom-Right)
    uint16_t task4_x = task1_x + task_box_w + spacing_between_boxes;
 80021e0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80021e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80021e8:	4413      	add	r3, r2
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80021f0:	4413      	add	r3, r2
 80021f2:	83fb      	strh	r3, [r7, #30]
    uint16_t task4_y = start_y_tasks_row2;
 80021f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80021f6:	83bb      	strh	r3, [r7, #28]
    const char *task4_text = "Task 02-4";
 80021f8:	4b30      	ldr	r3, [pc, #192]	@ (80022bc <Manual_LCD_DrawLayout+0x38c>)
 80021fa:	61bb      	str	r3, [r7, #24]
    uint16_t text_task4_x = task4_x + text_task_x_padding;
 80021fc:	8bfa      	ldrh	r2, [r7, #30]
 80021fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002202:	4413      	add	r3, r2
 8002204:	82fb      	strh	r3, [r7, #22]
    uint16_t text_task4_y = task4_y + text_task_y_offset;
 8002206:	8bba      	ldrh	r2, [r7, #28]
 8002208:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800220c:	4413      	add	r3, r2
 800220e:	82bb      	strh	r3, [r7, #20]
    Manual_LCD_FillRectangle(task4_x, task4_y, task_box_w, task_box_h, box_fill_color);
 8002210:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 8002214:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8002218:	8bb9      	ldrh	r1, [r7, #28]
 800221a:	8bf8      	ldrh	r0, [r7, #30]
 800221c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	4623      	mov	r3, r4
 8002224:	f7ff fcdc 	bl	8001be0 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task4_x, task4_y, task_box_w, task_box_h, box_border_color);
 8002228:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 800222c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8002230:	8bb9      	ldrh	r1, [r7, #28]
 8002232:	8bf8      	ldrh	r0, [r7, #30]
 8002234:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	4623      	mov	r3, r4
 800223c:	f7ff fc53 	bl	8001ae6 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task4_x, text_task4_y, task4_text, text_color, box_fill_color, font_size);
 8002240:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8002244:	8ab9      	ldrh	r1, [r7, #20]
 8002246:	8af8      	ldrh	r0, [r7, #22]
 8002248:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	f7ff fe1c 	bl	8001e94 <Manual_LCD_DrawString>

    // 3. Back Button
    uint16_t back_button_h = 45;
 800225c:	232d      	movs	r3, #45	@ 0x2d
 800225e:	827b      	strh	r3, [r7, #18]
    uint16_t back_button_w = task_box_w;
 8002260:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002264:	823b      	strh	r3, [r7, #16]
    const char *back_button_text = "<<Back";
 8002266:	4b16      	ldr	r3, [pc, #88]	@ (80022c0 <Manual_LCD_DrawLayout+0x390>)
 8002268:	60fb      	str	r3, [r7, #12]
    uint16_t back_button_text_len = strlen(back_button_text);
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f7fd ffba 	bl	80001e4 <strlen>
 8002270:	4603      	mov	r3, r0
 8002272:	817b      	strh	r3, [r7, #10]
    uint16_t back_button_text_pixel_width = back_button_text_len * 6 * font_size; // 6 is char width with spacing for 5x7 font
 8002274:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8002278:	b29b      	uxth	r3, r3
 800227a:	897a      	ldrh	r2, [r7, #10]
 800227c:	fb12 f303 	smulbb	r3, r2, r3
 8002280:	b29b      	uxth	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	0052      	lsls	r2, r2, #1
 8002286:	4413      	add	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	813b      	strh	r3, [r7, #8]

    uint16_t back_button_y = start_y_tasks_row2 + task_box_h + 20;
 800228c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800228e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002292:	4413      	add	r3, r2
 8002294:	b29b      	uxth	r3, r3
 8002296:	3314      	adds	r3, #20
 8002298:	80fb      	strh	r3, [r7, #6]
    uint16_t back_button_x = LCD_WIDTH - margin - back_button_w;
 800229a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 800229e:	8a3b      	ldrh	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80022a8:	e00c      	b.n	80022c4 <Manual_LCD_DrawLayout+0x394>
 80022aa:	bf00      	nop
 80022ac:	08006ed8 	.word	0x08006ed8
 80022b0:	08006ee8 	.word	0x08006ee8
 80022b4:	08006ef4 	.word	0x08006ef4
 80022b8:	08006f00 	.word	0x08006f00
 80022bc:	08006f0c 	.word	0x08006f0c
 80022c0:	08006f18 	.word	0x08006f18
 80022c4:	80bb      	strh	r3, [r7, #4]

    uint16_t text_button_x = back_button_x + (back_button_w - back_button_text_pixel_width) / 2;
 80022c6:	8a3a      	ldrh	r2, [r7, #16]
 80022c8:	893b      	ldrh	r3, [r7, #8]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	0fda      	lsrs	r2, r3, #31
 80022ce:	4413      	add	r3, r2
 80022d0:	105b      	asrs	r3, r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	88bb      	ldrh	r3, [r7, #4]
 80022d6:	4413      	add	r3, r2
 80022d8:	807b      	strh	r3, [r7, #2]
    uint16_t text_button_y = back_button_y + (back_button_h - char_height * font_size) / 2;
 80022da:	8a7a      	ldrh	r2, [r7, #18]
 80022dc:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 80022e0:	f897 1069 	ldrb.w	r1, [r7, #105]	@ 0x69
 80022e4:	fb01 f303 	mul.w	r3, r1, r3
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	0fda      	lsrs	r2, r3, #31
 80022ec:	4413      	add	r3, r2
 80022ee:	105b      	asrs	r3, r3, #1
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	4413      	add	r3, r2
 80022f6:	803b      	strh	r3, [r7, #0]

    Manual_LCD_FillRectangle(back_button_x, back_button_y, back_button_w, back_button_h, box_fill_color);
 80022f8:	8a7c      	ldrh	r4, [r7, #18]
 80022fa:	8a3a      	ldrh	r2, [r7, #16]
 80022fc:	88f9      	ldrh	r1, [r7, #6]
 80022fe:	88b8      	ldrh	r0, [r7, #4]
 8002300:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	4623      	mov	r3, r4
 8002308:	f7ff fc6a 	bl	8001be0 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(back_button_x, back_button_y, back_button_w, back_button_h, box_border_color);
 800230c:	8a7c      	ldrh	r4, [r7, #18]
 800230e:	8a3a      	ldrh	r2, [r7, #16]
 8002310:	88f9      	ldrh	r1, [r7, #6]
 8002312:	88b8      	ldrh	r0, [r7, #4]
 8002314:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	4623      	mov	r3, r4
 800231c:	f7ff fbe3 	bl	8001ae6 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_button_x, text_button_y, back_button_text, text_color, box_fill_color, font_size);
 8002320:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8002324:	8839      	ldrh	r1, [r7, #0]
 8002326:	8878      	ldrh	r0, [r7, #2]
 8002328:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	f7ff fdac 	bl	8001e94 <Manual_LCD_DrawString>
}
 800233c:	bf00      	nop
 800233e:	3774      	adds	r7, #116	@ 0x74
 8002340:	46bd      	mov	sp, r7
 8002342:	bd90      	pop	{r4, r7, pc}

08002344 <Manual_LCD_UpdateInfoText>:

// New function to update the info text
void Manual_LCD_UpdateInfoText(const char *new_text)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b08b      	sub	sp, #44	@ 0x2c
 8002348:	af02      	add	r7, sp, #8
 800234a:	6078      	str	r0, [r7, #4]
    // Parameters from Manual_LCD_DrawLayout for the Top Info Box
    uint16_t info_box_x = 10;
 800234c:	230a      	movs	r3, #10
 800234e:	83fb      	strh	r3, [r7, #30]
    uint16_t info_box_y = 10;
 8002350:	230a      	movs	r3, #10
 8002352:	83bb      	strh	r3, [r7, #28]
    uint16_t info_box_w = 150;
 8002354:	2396      	movs	r3, #150	@ 0x96
 8002356:	837b      	strh	r3, [r7, #26]
    uint16_t info_box_h = 30;
 8002358:	231e      	movs	r3, #30
 800235a:	833b      	strh	r3, [r7, #24]
    uint8_t font_size = 1;
 800235c:	2301      	movs	r3, #1
 800235e:	75fb      	strb	r3, [r7, #23]
    uint8_t char_height = 7; // For 5x7 font at size 1
 8002360:	2307      	movs	r3, #7
 8002362:	75bb      	strb	r3, [r7, #22]

    uint16_t text_color = COLOR_WHITE;     // Original text color from DrawLayout
 8002364:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002368:	82bb      	strh	r3, [r7, #20]
    uint16_t box_fill_color = COLOR_BLACK; // Original box fill color from DrawLayout
 800236a:	2300      	movs	r3, #0
 800236c:	827b      	strh	r3, [r7, #18]

    uint16_t info_text_x = info_box_x + 5;
 800236e:	8bfb      	ldrh	r3, [r7, #30]
 8002370:	3305      	adds	r3, #5
 8002372:	823b      	strh	r3, [r7, #16]
    uint16_t info_text_y = info_box_y + (info_box_h - char_height * font_size) / 2;
 8002374:	8b3a      	ldrh	r2, [r7, #24]
 8002376:	7dbb      	ldrb	r3, [r7, #22]
 8002378:	7df9      	ldrb	r1, [r7, #23]
 800237a:	fb01 f303 	mul.w	r3, r1, r3
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	0fda      	lsrs	r2, r3, #31
 8002382:	4413      	add	r3, r2
 8002384:	105b      	asrs	r3, r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	8bbb      	ldrh	r3, [r7, #28]
 800238a:	4413      	add	r3, r2
 800238c:	81fb      	strh	r3, [r7, #14]

    // Clear the inner part of the info box where text resides
    // The border is 1px, so we fill from x+1, y+1 with width-2, height-2
    Manual_LCD_FillRectangle(info_box_x + 1, info_box_y + 1, info_box_w - 2, info_box_h - 2, box_fill_color);
 800238e:	8bfb      	ldrh	r3, [r7, #30]
 8002390:	3301      	adds	r3, #1
 8002392:	b298      	uxth	r0, r3
 8002394:	8bbb      	ldrh	r3, [r7, #28]
 8002396:	3301      	adds	r3, #1
 8002398:	b299      	uxth	r1, r3
 800239a:	8b7b      	ldrh	r3, [r7, #26]
 800239c:	3b02      	subs	r3, #2
 800239e:	b29a      	uxth	r2, r3
 80023a0:	8b3b      	ldrh	r3, [r7, #24]
 80023a2:	3b02      	subs	r3, #2
 80023a4:	b29c      	uxth	r4, r3
 80023a6:	8a7b      	ldrh	r3, [r7, #18]
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	4623      	mov	r3, r4
 80023ac:	f7ff fc18 	bl	8001be0 <Manual_LCD_FillRectangle>

    // Draw the new string with original text color and original box fill as background
    Manual_LCD_DrawString(info_text_x, info_text_y, new_text, text_color, box_fill_color, font_size);
 80023b0:	8aba      	ldrh	r2, [r7, #20]
 80023b2:	89f9      	ldrh	r1, [r7, #14]
 80023b4:	8a38      	ldrh	r0, [r7, #16]
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
 80023b8:	9301      	str	r3, [sp, #4]
 80023ba:	8a7b      	ldrh	r3, [r7, #18]
 80023bc:	9300      	str	r3, [sp, #0]
 80023be:	4613      	mov	r3, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	f7ff fd67 	bl	8001e94 <Manual_LCD_DrawString>
}
 80023c6:	bf00      	nop
 80023c8:	3724      	adds	r7, #36	@ 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd90      	pop	{r4, r7, pc}
	...

080023d0 <Manual_LCD_RefillTaskBox>:

// New function to refill a task box and redraw its text
void Manual_LCD_RefillTaskBox(const char *task_name, uint16_t new_fill_color)
{
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b08f      	sub	sp, #60	@ 0x3c
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	807b      	strh	r3, [r7, #2]
    // Layout parameters from Manual_LCD_DrawLayout
    uint16_t original_text_color = COLOR_WHITE;
 80023dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t original_box_border_color = COLOR_WHITE;
 80023e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80023e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint8_t font_size = 1;
 80023e8:	2301      	movs	r3, #1
 80023ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    uint8_t char_height = 7; // For 5x7 font at size 1
 80023ee:	2307      	movs	r3, #7
 80023f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

    uint16_t margin = 10;
 80023f4:	230a      	movs	r3, #10
 80023f6:	843b      	strh	r3, [r7, #32]
    uint16_t spacing_between_boxes = 10;
 80023f8:	230a      	movs	r3, #10
 80023fa:	83fb      	strh	r3, [r7, #30]
    uint16_t task_box_w = (LCD_WIDTH - 2 * margin - spacing_between_boxes) / 2;
 80023fc:	8c3b      	ldrh	r3, [r7, #32]
 80023fe:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8002402:	005a      	lsls	r2, r3, #1
 8002404:	8bfb      	ldrh	r3, [r7, #30]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	0fda      	lsrs	r2, r3, #31
 800240a:	4413      	add	r3, r2
 800240c:	105b      	asrs	r3, r3, #1
 800240e:	83bb      	strh	r3, [r7, #28]
    uint16_t task_box_h = 70;
 8002410:	2346      	movs	r3, #70	@ 0x46
 8002412:	837b      	strh	r3, [r7, #26]

    // Info box dimensions needed to calculate task box starting Y
    uint16_t info_box_y_val = 10;
 8002414:	230a      	movs	r3, #10
 8002416:	833b      	strh	r3, [r7, #24]
    uint16_t info_box_h_val = 30;
 8002418:	231e      	movs	r3, #30
 800241a:	82fb      	strh	r3, [r7, #22]
    uint16_t start_y_tasks_row1 = info_box_y_val + info_box_h_val + 20; // 10 + 30 + 20 = 60
 800241c:	8b3a      	ldrh	r2, [r7, #24]
 800241e:	8afb      	ldrh	r3, [r7, #22]
 8002420:	4413      	add	r3, r2
 8002422:	b29b      	uxth	r3, r3
 8002424:	3314      	adds	r3, #20
 8002426:	82bb      	strh	r3, [r7, #20]

    uint16_t text_task_x_padding = 10;
 8002428:	230a      	movs	r3, #10
 800242a:	827b      	strh	r3, [r7, #18]
    uint16_t text_task_y_offset = (task_box_h - char_height * font_size) / 2; // (70 - 7)/2 = 31
 800242c:	8b7a      	ldrh	r2, [r7, #26]
 800242e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002432:	f897 1023 	ldrb.w	r1, [r7, #35]	@ 0x23
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	0fda      	lsrs	r2, r3, #31
 800243e:	4413      	add	r3, r2
 8002440:	105b      	asrs	r3, r3, #1
 8002442:	823b      	strh	r3, [r7, #16]

    uint16_t current_task_x = 0, current_task_y = 0;
 8002444:	2300      	movs	r3, #0
 8002446:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8002448:	2300      	movs	r3, #0
 800244a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t text_draw_x = 0, text_draw_y = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	81fb      	strh	r3, [r7, #14]
 8002450:	2300      	movs	r3, #0
 8002452:	81bb      	strh	r3, [r7, #12]
    const char *original_task_text_content = "";
 8002454:	4b3b      	ldr	r3, [pc, #236]	@ (8002544 <Manual_LCD_RefillTaskBox+0x174>)
 8002456:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (strcmp(task_name, "Task 02-1") == 0)
 8002458:	493b      	ldr	r1, [pc, #236]	@ (8002548 <Manual_LCD_RefillTaskBox+0x178>)
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f7fd feb8 	bl	80001d0 <strcmp>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <Manual_LCD_RefillTaskBox+0xa4>
    {
        current_task_x = margin;
 8002466:	8c3b      	ldrh	r3, [r7, #32]
 8002468:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        current_task_y = start_y_tasks_row1;
 800246a:	8abb      	ldrh	r3, [r7, #20]
 800246c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        original_task_text_content = "Task 02-1";
 800246e:	4b36      	ldr	r3, [pc, #216]	@ (8002548 <Manual_LCD_RefillTaskBox+0x178>)
 8002470:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002472:	e03c      	b.n	80024ee <Manual_LCD_RefillTaskBox+0x11e>
    }
    else if (strcmp(task_name, "Task 02-2") == 0)
 8002474:	4935      	ldr	r1, [pc, #212]	@ (800254c <Manual_LCD_RefillTaskBox+0x17c>)
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7fd feaa 	bl	80001d0 <strcmp>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10b      	bne.n	800249a <Manual_LCD_RefillTaskBox+0xca>
    {
        current_task_x = margin + task_box_w + spacing_between_boxes;
 8002482:	8c3a      	ldrh	r2, [r7, #32]
 8002484:	8bbb      	ldrh	r3, [r7, #28]
 8002486:	4413      	add	r3, r2
 8002488:	b29a      	uxth	r2, r3
 800248a:	8bfb      	ldrh	r3, [r7, #30]
 800248c:	4413      	add	r3, r2
 800248e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        current_task_y = start_y_tasks_row1;
 8002490:	8abb      	ldrh	r3, [r7, #20]
 8002492:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        original_task_text_content = "Task 02-2";
 8002494:	4b2d      	ldr	r3, [pc, #180]	@ (800254c <Manual_LCD_RefillTaskBox+0x17c>)
 8002496:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002498:	e029      	b.n	80024ee <Manual_LCD_RefillTaskBox+0x11e>
    }
    else if (strcmp(task_name, "Task 02-3") == 0)
 800249a:	492d      	ldr	r1, [pc, #180]	@ (8002550 <Manual_LCD_RefillTaskBox+0x180>)
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7fd fe97 	bl	80001d0 <strcmp>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10b      	bne.n	80024c0 <Manual_LCD_RefillTaskBox+0xf0>
    {
        current_task_x = margin;
 80024a8:	8c3b      	ldrh	r3, [r7, #32]
 80024aa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        current_task_y = start_y_tasks_row1 + task_box_h + spacing_between_boxes;
 80024ac:	8aba      	ldrh	r2, [r7, #20]
 80024ae:	8b7b      	ldrh	r3, [r7, #26]
 80024b0:	4413      	add	r3, r2
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	8bfb      	ldrh	r3, [r7, #30]
 80024b6:	4413      	add	r3, r2
 80024b8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        original_task_text_content = "Task 02-3";
 80024ba:	4b25      	ldr	r3, [pc, #148]	@ (8002550 <Manual_LCD_RefillTaskBox+0x180>)
 80024bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024be:	e016      	b.n	80024ee <Manual_LCD_RefillTaskBox+0x11e>
    }
    else if (strcmp(task_name, "Task 02-4") == 0)
 80024c0:	4924      	ldr	r1, [pc, #144]	@ (8002554 <Manual_LCD_RefillTaskBox+0x184>)
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fd fe84 	bl	80001d0 <strcmp>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d136      	bne.n	800253c <Manual_LCD_RefillTaskBox+0x16c>
    {
        current_task_x = margin + task_box_w + spacing_between_boxes;
 80024ce:	8c3a      	ldrh	r2, [r7, #32]
 80024d0:	8bbb      	ldrh	r3, [r7, #28]
 80024d2:	4413      	add	r3, r2
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	8bfb      	ldrh	r3, [r7, #30]
 80024d8:	4413      	add	r3, r2
 80024da:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        current_task_y = start_y_tasks_row1 + task_box_h + spacing_between_boxes;
 80024dc:	8aba      	ldrh	r2, [r7, #20]
 80024de:	8b7b      	ldrh	r3, [r7, #26]
 80024e0:	4413      	add	r3, r2
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	8bfb      	ldrh	r3, [r7, #30]
 80024e6:	4413      	add	r3, r2
 80024e8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        original_task_text_content = "Task 02-4";
 80024ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002554 <Manual_LCD_RefillTaskBox+0x184>)
 80024ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        return; // Unknown task name, do nothing
    }

    text_draw_x = current_task_x + text_task_x_padding;
 80024ee:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80024f0:	8a7b      	ldrh	r3, [r7, #18]
 80024f2:	4413      	add	r3, r2
 80024f4:	81fb      	strh	r3, [r7, #14]
    text_draw_y = current_task_y + text_task_y_offset;
 80024f6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80024f8:	8a3b      	ldrh	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	81bb      	strh	r3, [r7, #12]

    // 1. Refill the entire task box with the new color
    Manual_LCD_FillRectangle(current_task_x, current_task_y, task_box_w, task_box_h, new_fill_color);
 80024fe:	8b7c      	ldrh	r4, [r7, #26]
 8002500:	8bba      	ldrh	r2, [r7, #28]
 8002502:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8002504:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	4623      	mov	r3, r4
 800250c:	f7ff fb68 	bl	8001be0 <Manual_LCD_FillRectangle>

    // 2. Redraw the border
    Manual_LCD_DrawRectangle(current_task_x, current_task_y, task_box_w, task_box_h, original_box_border_color);
 8002510:	8b7c      	ldrh	r4, [r7, #26]
 8002512:	8bba      	ldrh	r2, [r7, #28]
 8002514:	8db9      	ldrh	r1, [r7, #44]	@ 0x2c
 8002516:	8df8      	ldrh	r0, [r7, #46]	@ 0x2e
 8002518:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	4623      	mov	r3, r4
 800251e:	f7ff fae2 	bl	8001ae6 <Manual_LCD_DrawRectangle>

    // 3. Redraw the original text using the original text color and the new_fill_color as background
    Manual_LCD_DrawString(text_draw_x, text_draw_y, original_task_text_content, original_text_color, new_fill_color, font_size);
 8002522:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002524:	89b9      	ldrh	r1, [r7, #12]
 8002526:	89f8      	ldrh	r0, [r7, #14]
 8002528:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	887b      	ldrh	r3, [r7, #2]
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	4613      	mov	r3, r2
 8002534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002536:	f7ff fcad 	bl	8001e94 <Manual_LCD_DrawString>
 800253a:	e000      	b.n	800253e <Manual_LCD_RefillTaskBox+0x16e>
        return; // Unknown task name, do nothing
 800253c:	bf00      	nop
 800253e:	3734      	adds	r7, #52	@ 0x34
 8002540:	46bd      	mov	sp, r7
 8002542:	bd90      	pop	{r4, r7, pc}
 8002544:	08006f20 	.word	0x08006f20
 8002548:	08006ee8 	.word	0x08006ee8
 800254c:	08006ef4 	.word	0x08006ef4
 8002550:	08006f00 	.word	0x08006f00
 8002554:	08006f0c 	.word	0x08006f0c

08002558 <TP_Read_ADC_Raw>:
Coordinate CalScreenSample[3]; // Raw ADC values from touch panel for calibration points

// Low-level SPI communication for touch
// Sends 1 byte command, receives 2 bytes data (12-bit ADC value)
static uint16_t TP_Read_ADC_Raw(uint8_t cmd)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_byte = cmd;
 8002562:	79fb      	ldrb	r3, [r7, #7]
 8002564:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buffer[2] = {0, 0};
 8002566:	2300      	movs	r3, #0
 8002568:	813b      	strh	r3, [r7, #8]
    uint16_t adc_val = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	81fb      	strh	r3, [r7, #14]

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET); // Select touch controller
 800256e:	2200      	movs	r2, #0
 8002570:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002574:	4815      	ldr	r0, [pc, #84]	@ (80025cc <TP_Read_ADC_Raw+0x74>)
 8002576:	f001 f839 	bl	80035ec <HAL_GPIO_WritePin>

    // Send command byte
    HAL_SPI_Transmit(g_hspi_touch_ptr, &tx_byte, 1, HAL_MAX_DELAY);
 800257a:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <TP_Read_ADC_Raw+0x78>)
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	f107 010d 	add.w	r1, r7, #13
 8002582:	f04f 33ff 	mov.w	r3, #4294967295
 8002586:	2201      	movs	r2, #1
 8002588:	f003 fa75 	bl	8005a76 <HAL_SPI_Transmit>

    // Receive 2 data bytes. Some controllers might need dummy clocks before data is valid.
    // For XPT2046/ADS7846, data usually follows directly.
    HAL_SPI_Receive(g_hspi_touch_ptr, rx_buffer, 2, HAL_MAX_DELAY);
 800258c:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <TP_Read_ADC_Raw+0x78>)
 800258e:	6818      	ldr	r0, [r3, #0]
 8002590:	f107 0108 	add.w	r1, r7, #8
 8002594:	f04f 33ff 	mov.w	r3, #4294967295
 8002598:	2202      	movs	r2, #2
 800259a:	f003 fbb0 	bl	8005cfe <HAL_SPI_Receive>

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect
 800259e:	2201      	movs	r2, #1
 80025a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025a4:	4809      	ldr	r0, [pc, #36]	@ (80025cc <TP_Read_ADC_Raw+0x74>)
 80025a6:	f001 f821 	bl	80035ec <HAL_GPIO_WritePin>

    adc_val = (rx_buffer[0] << 8) | rx_buffer[1];
 80025aa:	7a3b      	ldrb	r3, [r7, #8]
 80025ac:	b21b      	sxth	r3, r3
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	b21a      	sxth	r2, r3
 80025b2:	7a7b      	ldrb	r3, [r7, #9]
 80025b4:	b21b      	sxth	r3, r3
 80025b6:	4313      	orrs	r3, r2
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	81fb      	strh	r3, [r7, #14]
    adc_val >>= 3; // Keep the most significant 12 bits (XPT2046 specific, D0 is at bit 3 of second byte)
 80025bc:	89fb      	ldrh	r3, [r7, #14]
 80025be:	08db      	lsrs	r3, r3, #3
 80025c0:	81fb      	strh	r3, [r7, #14]
                   // Original code used >>4, which might be for a different ADC alignment or resolution.
                   // If raw values are consistently too low or high, this shift might need adjustment.
    return adc_val;
 80025c2:	89fb      	ldrh	r3, [r7, #14]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40020000 	.word	0x40020000
 80025d0:	20000128 	.word	0x20000128

080025d4 <Manual_Touch_Init>:

void Manual_Touch_Init(SPI_HandleTypeDef *hspi_touch)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
    g_hspi_touch_ptr = hspi_touch;
 80025dc:	4a06      	ldr	r2, [pc, #24]	@ (80025f8 <Manual_Touch_Init+0x24>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6013      	str	r3, [r2, #0]
    // GPIOs for TP_CS (PA9) and TP_IRQ (PB4) are assumed to be initialized
    // in main.c's MX_GPIO_Init() as Output PP and Input Pull-up respectively.
    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect touch controller initially
 80025e2:	2201      	movs	r2, #1
 80025e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80025e8:	4804      	ldr	r0, [pc, #16]	@ (80025fc <Manual_Touch_Init+0x28>)
 80025ea:	f000 ffff 	bl	80035ec <HAL_GPIO_WritePin>
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000128 	.word	0x20000128
 80025fc:	40020000 	.word	0x40020000

08002600 <Manual_Touch_Pressed>:

uint8_t Manual_Touch_Pressed(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
    // TP_IRQ_Pin is low when pressed (assuming pull-up resistor is enabled)
    return (HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == GPIO_PIN_RESET);
 8002604:	2110      	movs	r1, #16
 8002606:	4805      	ldr	r0, [pc, #20]	@ (800261c <Manual_Touch_Pressed+0x1c>)
 8002608:	f000 ffd8 	bl	80035bc <HAL_GPIO_ReadPin>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40020400 	.word	0x40020400

08002620 <Manual_Touch_GetRawPoint>:

uint8_t Manual_Touch_GetRawPoint(Coordinate *rawPoint)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b095      	sub	sp, #84	@ 0x54
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
    if (!Manual_Touch_Pressed())
 8002628:	f7ff ffea 	bl	8002600 <Manual_Touch_Pressed>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <Manual_Touch_GetRawPoint+0x16>
    {
        return 0; // Not pressed
 8002632:	2300      	movs	r3, #0
 8002634:	e1d0      	b.n	80029d8 <Manual_Touch_GetRawPoint+0x3b8>
    uint16_t x_samples[TOUCH_AVG_SAMPLES];
    uint16_t y_samples[TOUCH_AVG_SAMPLES];
    uint8_t i;

    // Read all X samples first
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 8002636:	2300      	movs	r3, #0
 8002638:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800263c:	e03e      	b.n	80026bc <Manual_Touch_GetRawPoint+0x9c>
    {
        if (!Manual_Touch_Pressed() && i >= 1)
 800263e:	f7ff ffdf 	bl	8002600 <Manual_Touch_Pressed>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d128      	bne.n	800269a <Manual_Touch_GetRawPoint+0x7a>
 8002648:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800264c:	2b00      	cmp	r3, #0
 800264e:	d024      	beq.n	800269a <Manual_Touch_GetRawPoint+0x7a>
        { // Check if pen lifted after at least one sample
            // If pen lifted early, try to use what we have if enough samples, or fail
            if (i < 3)
 8002650:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002654:	2b02      	cmp	r3, #2
 8002656:	d801      	bhi.n	800265c <Manual_Touch_GetRawPoint+0x3c>
                return 0; // Not enough samples for even one average
 8002658:	2300      	movs	r3, #0
 800265a:	e1bd      	b.n	80029d8 <Manual_Touch_GetRawPoint+0x3b8>
            // Fill remaining samples with the last good one to avoid distorting average too much
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 800265c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002660:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002664:	e014      	b.n	8002690 <Manual_Touch_GetRawPoint+0x70>
            {
                x_samples[j] = x_samples[i - 1];
 8002666:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800266a:	3b01      	subs	r3, #1
 800266c:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	3350      	adds	r3, #80	@ 0x50
 8002674:	443b      	add	r3, r7
 8002676:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800267a:	0053      	lsls	r3, r2, #1
 800267c:	3350      	adds	r3, #80	@ 0x50
 800267e:	443b      	add	r3, r7
 8002680:	460a      	mov	r2, r1
 8002682:	f823 2c24 	strh.w	r2, [r3, #-36]
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 8002686:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800268a:	3301      	adds	r3, #1
 800268c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002690:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002694:	2b08      	cmp	r3, #8
 8002696:	d9e6      	bls.n	8002666 <Manual_Touch_GetRawPoint+0x46>
            }
            break; // Exit X sampling loop
 8002698:	e014      	b.n	80026c4 <Manual_Touch_GetRawPoint+0xa4>
        }
        x_samples[i] = TP_Read_ADC_Raw(TP_CMD_READ_X);
 800269a:	f897 404f 	ldrb.w	r4, [r7, #79]	@ 0x4f
 800269e:	20d0      	movs	r0, #208	@ 0xd0
 80026a0:	f7ff ff5a 	bl	8002558 <TP_Read_ADC_Raw>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461a      	mov	r2, r3
 80026a8:	0063      	lsls	r3, r4, #1
 80026aa:	3350      	adds	r3, #80	@ 0x50
 80026ac:	443b      	add	r3, r7
 80026ae:	f823 2c24 	strh.w	r2, [r3, #-36]
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 80026b2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80026b6:	3301      	adds	r3, #1
 80026b8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80026bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d9bc      	bls.n	800263e <Manual_Touch_GetRawPoint+0x1e>
        // HAL_Delay(1); // Increased delay slightly
    }

    // Read all Y samples
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80026ca:	e03e      	b.n	800274a <Manual_Touch_GetRawPoint+0x12a>
    {
        if (!Manual_Touch_Pressed() && i >= 1)
 80026cc:	f7ff ff98 	bl	8002600 <Manual_Touch_Pressed>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d128      	bne.n	8002728 <Manual_Touch_GetRawPoint+0x108>
 80026d6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d024      	beq.n	8002728 <Manual_Touch_GetRawPoint+0x108>
        {
            if (i < 3)
 80026de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d801      	bhi.n	80026ea <Manual_Touch_GetRawPoint+0xca>
                return 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	e176      	b.n	80029d8 <Manual_Touch_GetRawPoint+0x3b8>
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 80026ea:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80026ee:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80026f2:	e014      	b.n	800271e <Manual_Touch_GetRawPoint+0xfe>
            {
                y_samples[j] = y_samples[i - 1];
 80026f4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80026f8:	3b01      	subs	r3, #1
 80026fa:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	3350      	adds	r3, #80	@ 0x50
 8002702:	443b      	add	r3, r7
 8002704:	f833 1c38 	ldrh.w	r1, [r3, #-56]
 8002708:	0053      	lsls	r3, r2, #1
 800270a:	3350      	adds	r3, #80	@ 0x50
 800270c:	443b      	add	r3, r7
 800270e:	460a      	mov	r2, r1
 8002710:	f823 2c38 	strh.w	r2, [r3, #-56]
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 8002714:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002718:	3301      	adds	r3, #1
 800271a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800271e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002722:	2b08      	cmp	r3, #8
 8002724:	d9e6      	bls.n	80026f4 <Manual_Touch_GetRawPoint+0xd4>
            }
            break; // Exit Y sampling loop
 8002726:	e014      	b.n	8002752 <Manual_Touch_GetRawPoint+0x132>
        }
        y_samples[i] = TP_Read_ADC_Raw(TP_CMD_READ_Y);
 8002728:	f897 404f 	ldrb.w	r4, [r7, #79]	@ 0x4f
 800272c:	2090      	movs	r0, #144	@ 0x90
 800272e:	f7ff ff13 	bl	8002558 <TP_Read_ADC_Raw>
 8002732:	4603      	mov	r3, r0
 8002734:	461a      	mov	r2, r3
 8002736:	0063      	lsls	r3, r4, #1
 8002738:	3350      	adds	r3, #80	@ 0x50
 800273a:	443b      	add	r3, r7
 800273c:	f823 2c38 	strh.w	r2, [r3, #-56]
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 8002740:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002744:	3301      	adds	r3, #1
 8002746:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800274a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800274e:	2b08      	cmp	r3, #8
 8002750:	d9bc      	bls.n	80026cc <Manual_Touch_GetRawPoint+0xac>
        // HAL_Delay(2); // Increased delay slightly
    }

    // Averaging and filtering logic from original code
    uint16_t avg_x[3], avg_y[3];
    avg_x[0] = (x_samples[0] + x_samples[1] + x_samples[2]) / 3;
 8002752:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002754:	461a      	mov	r2, r3
 8002756:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002758:	4413      	add	r3, r2
 800275a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800275c:	4413      	add	r3, r2
 800275e:	4aa0      	ldr	r2, [pc, #640]	@ (80029e0 <Manual_Touch_GetRawPoint+0x3c0>)
 8002760:	fb82 1203 	smull	r1, r2, r2, r3
 8002764:	17db      	asrs	r3, r3, #31
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	b29b      	uxth	r3, r3
 800276a:	823b      	strh	r3, [r7, #16]
    avg_x[1] = (x_samples[3] + x_samples[4] + x_samples[5]) / 3;
 800276c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800276e:	461a      	mov	r2, r3
 8002770:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002772:	4413      	add	r3, r2
 8002774:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002776:	4413      	add	r3, r2
 8002778:	4a99      	ldr	r2, [pc, #612]	@ (80029e0 <Manual_Touch_GetRawPoint+0x3c0>)
 800277a:	fb82 1203 	smull	r1, r2, r2, r3
 800277e:	17db      	asrs	r3, r3, #31
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	b29b      	uxth	r3, r3
 8002784:	827b      	strh	r3, [r7, #18]
    avg_x[2] = (x_samples[6] + x_samples[7] + x_samples[8]) / 3;
 8002786:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002788:	461a      	mov	r2, r3
 800278a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800278c:	4413      	add	r3, r2
 800278e:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002790:	4413      	add	r3, r2
 8002792:	4a93      	ldr	r2, [pc, #588]	@ (80029e0 <Manual_Touch_GetRawPoint+0x3c0>)
 8002794:	fb82 1203 	smull	r1, r2, r2, r3
 8002798:	17db      	asrs	r3, r3, #31
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	b29b      	uxth	r3, r3
 800279e:	82bb      	strh	r3, [r7, #20]

    avg_y[0] = (y_samples[0] + y_samples[1] + y_samples[2]) / 3;
 80027a0:	8b3b      	ldrh	r3, [r7, #24]
 80027a2:	461a      	mov	r2, r3
 80027a4:	8b7b      	ldrh	r3, [r7, #26]
 80027a6:	4413      	add	r3, r2
 80027a8:	8bba      	ldrh	r2, [r7, #28]
 80027aa:	4413      	add	r3, r2
 80027ac:	4a8c      	ldr	r2, [pc, #560]	@ (80029e0 <Manual_Touch_GetRawPoint+0x3c0>)
 80027ae:	fb82 1203 	smull	r1, r2, r2, r3
 80027b2:	17db      	asrs	r3, r3, #31
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	813b      	strh	r3, [r7, #8]
    avg_y[1] = (y_samples[3] + y_samples[4] + y_samples[5]) / 3;
 80027ba:	8bfb      	ldrh	r3, [r7, #30]
 80027bc:	461a      	mov	r2, r3
 80027be:	8c3b      	ldrh	r3, [r7, #32]
 80027c0:	4413      	add	r3, r2
 80027c2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80027c4:	4413      	add	r3, r2
 80027c6:	4a86      	ldr	r2, [pc, #536]	@ (80029e0 <Manual_Touch_GetRawPoint+0x3c0>)
 80027c8:	fb82 1203 	smull	r1, r2, r2, r3
 80027cc:	17db      	asrs	r3, r3, #31
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	817b      	strh	r3, [r7, #10]
    avg_y[2] = (y_samples[6] + y_samples[7] + y_samples[8]) / 3;
 80027d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80027d6:	461a      	mov	r2, r3
 80027d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80027da:	4413      	add	r3, r2
 80027dc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80027de:	4413      	add	r3, r2
 80027e0:	4a7f      	ldr	r2, [pc, #508]	@ (80029e0 <Manual_Touch_GetRawPoint+0x3c0>)
 80027e2:	fb82 1203 	smull	r1, r2, r2, r3
 80027e6:	17db      	asrs	r3, r3, #31
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	81bb      	strh	r3, [r7, #12]

    int16_t m0x = avg_x[0] > avg_x[1] ? avg_x[0] - avg_x[1] : avg_x[1] - avg_x[0];
 80027ee:	8a3a      	ldrh	r2, [r7, #16]
 80027f0:	8a7b      	ldrh	r3, [r7, #18]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d905      	bls.n	8002802 <Manual_Touch_GetRawPoint+0x1e2>
 80027f6:	8a3a      	ldrh	r2, [r7, #16]
 80027f8:	8a7b      	ldrh	r3, [r7, #18]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	b21b      	sxth	r3, r3
 8002800:	e004      	b.n	800280c <Manual_Touch_GetRawPoint+0x1ec>
 8002802:	8a7a      	ldrh	r2, [r7, #18]
 8002804:	8a3b      	ldrh	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	b29b      	uxth	r3, r3
 800280a:	b21b      	sxth	r3, r3
 800280c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    int16_t m1x = avg_x[1] > avg_x[2] ? avg_x[1] - avg_x[2] : avg_x[2] - avg_x[1];
 8002810:	8a7a      	ldrh	r2, [r7, #18]
 8002812:	8abb      	ldrh	r3, [r7, #20]
 8002814:	429a      	cmp	r2, r3
 8002816:	d905      	bls.n	8002824 <Manual_Touch_GetRawPoint+0x204>
 8002818:	8a7a      	ldrh	r2, [r7, #18]
 800281a:	8abb      	ldrh	r3, [r7, #20]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	b29b      	uxth	r3, r3
 8002820:	b21b      	sxth	r3, r3
 8002822:	e004      	b.n	800282e <Manual_Touch_GetRawPoint+0x20e>
 8002824:	8aba      	ldrh	r2, [r7, #20]
 8002826:	8a7b      	ldrh	r3, [r7, #18]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	b29b      	uxth	r3, r3
 800282c:	b21b      	sxth	r3, r3
 800282e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    int16_t m2x = avg_x[2] > avg_x[0] ? avg_x[2] - avg_x[0] : avg_x[0] - avg_x[2];
 8002832:	8aba      	ldrh	r2, [r7, #20]
 8002834:	8a3b      	ldrh	r3, [r7, #16]
 8002836:	429a      	cmp	r2, r3
 8002838:	d905      	bls.n	8002846 <Manual_Touch_GetRawPoint+0x226>
 800283a:	8aba      	ldrh	r2, [r7, #20]
 800283c:	8a3b      	ldrh	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	b29b      	uxth	r3, r3
 8002842:	b21b      	sxth	r3, r3
 8002844:	e004      	b.n	8002850 <Manual_Touch_GetRawPoint+0x230>
 8002846:	8a3a      	ldrh	r2, [r7, #16]
 8002848:	8abb      	ldrh	r3, [r7, #20]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	b29b      	uxth	r3, r3
 800284e:	b21b      	sxth	r3, r3
 8002850:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    if (m0x > TOUCH_RAW_THRESHOLD && m1x > TOUCH_RAW_THRESHOLD && m2x > TOUCH_RAW_THRESHOLD)
 8002854:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002858:	2b23      	cmp	r3, #35	@ 0x23
 800285a:	dd09      	ble.n	8002870 <Manual_Touch_GetRawPoint+0x250>
 800285c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8002860:	2b23      	cmp	r3, #35	@ 0x23
 8002862:	dd05      	ble.n	8002870 <Manual_Touch_GetRawPoint+0x250>
 8002864:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002868:	2b23      	cmp	r3, #35	@ 0x23
 800286a:	dd01      	ble.n	8002870 <Manual_Touch_GetRawPoint+0x250>
        return 0; // Unstable X
 800286c:	2300      	movs	r3, #0
 800286e:	e0b3      	b.n	80029d8 <Manual_Touch_GetRawPoint+0x3b8>

    if (m0x < m1x)
 8002870:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8002874:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8002878:	429a      	cmp	r2, r3
 800287a:	da19      	bge.n	80028b0 <Manual_Touch_GetRawPoint+0x290>
        rawPoint->x = (m2x < m0x) ? (avg_x[0] + avg_x[2]) / 2 : (avg_x[0] + avg_x[1]) / 2;
 800287c:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8002880:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002884:	429a      	cmp	r2, r3
 8002886:	da08      	bge.n	800289a <Manual_Touch_GetRawPoint+0x27a>
 8002888:	8a3b      	ldrh	r3, [r7, #16]
 800288a:	461a      	mov	r2, r3
 800288c:	8abb      	ldrh	r3, [r7, #20]
 800288e:	4413      	add	r3, r2
 8002890:	0fda      	lsrs	r2, r3, #31
 8002892:	4413      	add	r3, r2
 8002894:	105b      	asrs	r3, r3, #1
 8002896:	b29b      	uxth	r3, r3
 8002898:	e007      	b.n	80028aa <Manual_Touch_GetRawPoint+0x28a>
 800289a:	8a3b      	ldrh	r3, [r7, #16]
 800289c:	461a      	mov	r2, r3
 800289e:	8a7b      	ldrh	r3, [r7, #18]
 80028a0:	4413      	add	r3, r2
 80028a2:	0fda      	lsrs	r2, r3, #31
 80028a4:	4413      	add	r3, r2
 80028a6:	105b      	asrs	r3, r3, #1
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	8013      	strh	r3, [r2, #0]
 80028ae:	e018      	b.n	80028e2 <Manual_Touch_GetRawPoint+0x2c2>
    else
        rawPoint->x = (m2x < m1x) ? (avg_x[0] + avg_x[2]) / 2 : (avg_x[1] + avg_x[2]) / 2;
 80028b0:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 80028b4:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 80028b8:	429a      	cmp	r2, r3
 80028ba:	da08      	bge.n	80028ce <Manual_Touch_GetRawPoint+0x2ae>
 80028bc:	8a3b      	ldrh	r3, [r7, #16]
 80028be:	461a      	mov	r2, r3
 80028c0:	8abb      	ldrh	r3, [r7, #20]
 80028c2:	4413      	add	r3, r2
 80028c4:	0fda      	lsrs	r2, r3, #31
 80028c6:	4413      	add	r3, r2
 80028c8:	105b      	asrs	r3, r3, #1
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	e007      	b.n	80028de <Manual_Touch_GetRawPoint+0x2be>
 80028ce:	8a7b      	ldrh	r3, [r7, #18]
 80028d0:	461a      	mov	r2, r3
 80028d2:	8abb      	ldrh	r3, [r7, #20]
 80028d4:	4413      	add	r3, r2
 80028d6:	0fda      	lsrs	r2, r3, #31
 80028d8:	4413      	add	r3, r2
 80028da:	105b      	asrs	r3, r3, #1
 80028dc:	b29b      	uxth	r3, r3
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	8013      	strh	r3, [r2, #0]

    int16_t m0y = avg_y[0] > avg_y[1] ? avg_y[0] - avg_y[1] : avg_y[1] - avg_y[0];
 80028e2:	893a      	ldrh	r2, [r7, #8]
 80028e4:	897b      	ldrh	r3, [r7, #10]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d905      	bls.n	80028f6 <Manual_Touch_GetRawPoint+0x2d6>
 80028ea:	893a      	ldrh	r2, [r7, #8]
 80028ec:	897b      	ldrh	r3, [r7, #10]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	b21b      	sxth	r3, r3
 80028f4:	e004      	b.n	8002900 <Manual_Touch_GetRawPoint+0x2e0>
 80028f6:	897a      	ldrh	r2, [r7, #10]
 80028f8:	893b      	ldrh	r3, [r7, #8]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	b21b      	sxth	r3, r3
 8002900:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    int16_t m1y = avg_y[1] > avg_y[2] ? avg_y[1] - avg_y[2] : avg_y[2] - avg_y[1];
 8002904:	897a      	ldrh	r2, [r7, #10]
 8002906:	89bb      	ldrh	r3, [r7, #12]
 8002908:	429a      	cmp	r2, r3
 800290a:	d905      	bls.n	8002918 <Manual_Touch_GetRawPoint+0x2f8>
 800290c:	897a      	ldrh	r2, [r7, #10]
 800290e:	89bb      	ldrh	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	b29b      	uxth	r3, r3
 8002914:	b21b      	sxth	r3, r3
 8002916:	e004      	b.n	8002922 <Manual_Touch_GetRawPoint+0x302>
 8002918:	89ba      	ldrh	r2, [r7, #12]
 800291a:	897b      	ldrh	r3, [r7, #10]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	b29b      	uxth	r3, r3
 8002920:	b21b      	sxth	r3, r3
 8002922:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t m2y = avg_y[2] > avg_y[0] ? avg_y[2] - avg_y[0] : avg_y[0] - avg_y[2];
 8002926:	89ba      	ldrh	r2, [r7, #12]
 8002928:	893b      	ldrh	r3, [r7, #8]
 800292a:	429a      	cmp	r2, r3
 800292c:	d905      	bls.n	800293a <Manual_Touch_GetRawPoint+0x31a>
 800292e:	89ba      	ldrh	r2, [r7, #12]
 8002930:	893b      	ldrh	r3, [r7, #8]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	b29b      	uxth	r3, r3
 8002936:	b21b      	sxth	r3, r3
 8002938:	e004      	b.n	8002944 <Manual_Touch_GetRawPoint+0x324>
 800293a:	893a      	ldrh	r2, [r7, #8]
 800293c:	89bb      	ldrh	r3, [r7, #12]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	b29b      	uxth	r3, r3
 8002942:	b21b      	sxth	r3, r3
 8002944:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    if (m0y > TOUCH_RAW_THRESHOLD && m1y > TOUCH_RAW_THRESHOLD && m2y > TOUCH_RAW_THRESHOLD)
 8002948:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800294c:	2b23      	cmp	r3, #35	@ 0x23
 800294e:	dd09      	ble.n	8002964 <Manual_Touch_GetRawPoint+0x344>
 8002950:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8002954:	2b23      	cmp	r3, #35	@ 0x23
 8002956:	dd05      	ble.n	8002964 <Manual_Touch_GetRawPoint+0x344>
 8002958:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800295c:	2b23      	cmp	r3, #35	@ 0x23
 800295e:	dd01      	ble.n	8002964 <Manual_Touch_GetRawPoint+0x344>
        return 0; // Unstable Y
 8002960:	2300      	movs	r3, #0
 8002962:	e039      	b.n	80029d8 <Manual_Touch_GetRawPoint+0x3b8>

    if (m0y < m1y)
 8002964:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 8002968:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800296c:	429a      	cmp	r2, r3
 800296e:	da19      	bge.n	80029a4 <Manual_Touch_GetRawPoint+0x384>
        rawPoint->y = (m2y < m0y) ? (avg_y[0] + avg_y[2]) / 2 : (avg_y[0] + avg_y[1]) / 2;
 8002970:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8002974:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8002978:	429a      	cmp	r2, r3
 800297a:	da08      	bge.n	800298e <Manual_Touch_GetRawPoint+0x36e>
 800297c:	893b      	ldrh	r3, [r7, #8]
 800297e:	461a      	mov	r2, r3
 8002980:	89bb      	ldrh	r3, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	0fda      	lsrs	r2, r3, #31
 8002986:	4413      	add	r3, r2
 8002988:	105b      	asrs	r3, r3, #1
 800298a:	b29b      	uxth	r3, r3
 800298c:	e007      	b.n	800299e <Manual_Touch_GetRawPoint+0x37e>
 800298e:	893b      	ldrh	r3, [r7, #8]
 8002990:	461a      	mov	r2, r3
 8002992:	897b      	ldrh	r3, [r7, #10]
 8002994:	4413      	add	r3, r2
 8002996:	0fda      	lsrs	r2, r3, #31
 8002998:	4413      	add	r3, r2
 800299a:	105b      	asrs	r3, r3, #1
 800299c:	b29b      	uxth	r3, r3
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	8053      	strh	r3, [r2, #2]
 80029a2:	e018      	b.n	80029d6 <Manual_Touch_GetRawPoint+0x3b6>
    else
        rawPoint->y = (m2y < m1y) ? (avg_y[0] + avg_y[2]) / 2 : (avg_y[1] + avg_y[2]) / 2;
 80029a4:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 80029a8:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 80029ac:	429a      	cmp	r2, r3
 80029ae:	da08      	bge.n	80029c2 <Manual_Touch_GetRawPoint+0x3a2>
 80029b0:	893b      	ldrh	r3, [r7, #8]
 80029b2:	461a      	mov	r2, r3
 80029b4:	89bb      	ldrh	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	0fda      	lsrs	r2, r3, #31
 80029ba:	4413      	add	r3, r2
 80029bc:	105b      	asrs	r3, r3, #1
 80029be:	b29b      	uxth	r3, r3
 80029c0:	e007      	b.n	80029d2 <Manual_Touch_GetRawPoint+0x3b2>
 80029c2:	897b      	ldrh	r3, [r7, #10]
 80029c4:	461a      	mov	r2, r3
 80029c6:	89bb      	ldrh	r3, [r7, #12]
 80029c8:	4413      	add	r3, r2
 80029ca:	0fda      	lsrs	r2, r3, #31
 80029cc:	4413      	add	r3, r2
 80029ce:	105b      	asrs	r3, r3, #1
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	8053      	strh	r3, [r2, #2]

    return 1; // Valid point obtained
 80029d6:	2301      	movs	r3, #1
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3754      	adds	r7, #84	@ 0x54
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd90      	pop	{r4, r7, pc}
 80029e0:	55555556 	.word	0x55555556

080029e4 <Manual_Touch_ApplyCalibration>:
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    return 1; // Success
}

uint8_t Manual_Touch_ApplyCalibration(Coordinate *displayPoint, const Coordinate *screenPoint)
{
 80029e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
    if (touchMatrix.Divider == 0)
 80029f0:	4b64      	ldr	r3, [pc, #400]	@ (8002b84 <Manual_Touch_ApplyCalibration+0x1a0>)
 80029f2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80029f6:	f04f 0200 	mov.w	r2, #0
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	f7fe f873 	bl	8000ae8 <__aeabi_dcmpeq>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d023      	beq.n	8002a50 <Manual_Touch_ApplyCalibration+0x6c>
    { // Not calibrated or calibration failed
        // Fallback: direct scaling (highly inaccurate without calibration)
        displayPoint->x = (uint16_t)(((long)screenPoint->x * LCD_WIDTH) / 4095);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	881b      	ldrh	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	4a5c      	ldr	r2, [pc, #368]	@ (8002b88 <Manual_Touch_ApplyCalibration+0x1a4>)
 8002a18:	fb82 1203 	smull	r1, r2, r2, r3
 8002a1c:	441a      	add	r2, r3
 8002a1e:	12d2      	asrs	r2, r2, #11
 8002a20:	17db      	asrs	r3, r3, #31
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	801a      	strh	r2, [r3, #0]
        displayPoint->y = (uint16_t)(((long)screenPoint->y * LCD_HEIGHT) / 4095);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	885b      	ldrh	r3, [r3, #2]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	019b      	lsls	r3, r3, #6
 8002a38:	4a53      	ldr	r2, [pc, #332]	@ (8002b88 <Manual_Touch_ApplyCalibration+0x1a4>)
 8002a3a:	fb82 1203 	smull	r1, r2, r2, r3
 8002a3e:	441a      	add	r2, r3
 8002a40:	12d2      	asrs	r2, r2, #11
 8002a42:	17db      	asrs	r3, r3, #31
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	805a      	strh	r2, [r3, #2]
        return 0; // Indicated that calibration matrix was not used
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e094      	b.n	8002b7a <Manual_Touch_ApplyCalibration+0x196>
    }

    // Apply calibration matrix
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002a50:	4b4c      	ldr	r3, [pc, #304]	@ (8002b84 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002a52:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fd fd72 	bl	8000544 <__aeabi_i2d>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4620      	mov	r0, r4
 8002a66:	4629      	mov	r1, r5
 8002a68:	f7fd fdd6 	bl	8000618 <__aeabi_dmul>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4690      	mov	r8, r2
 8002a72:	4699      	mov	r9, r3
                                  (touchMatrix.Bn * screenPoint->y) +
 8002a74:	4b43      	ldr	r3, [pc, #268]	@ (8002b84 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002a76:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	885b      	ldrh	r3, [r3, #2]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7fd fd60 	bl	8000544 <__aeabi_i2d>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4620      	mov	r0, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	f7fd fdc4 	bl	8000618 <__aeabi_dmul>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002a94:	4640      	mov	r0, r8
 8002a96:	4649      	mov	r1, r9
 8002a98:	f7fd fc08 	bl	80002ac <__adddf3>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
                                  touchMatrix.Cn) /
 8002aa4:	4b37      	ldr	r3, [pc, #220]	@ (8002b84 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002aa6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
                                  (touchMatrix.Bn * screenPoint->y) +
 8002aaa:	f7fd fbff 	bl	80002ac <__adddf3>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 8002ab6:	4b33      	ldr	r3, [pc, #204]	@ (8002b84 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002ab8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Cn) /
 8002abc:	f7fd fed6 	bl	800086c <__aeabi_ddiv>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f7fe f840 	bl	8000b4c <__aeabi_d2uiz>
 8002acc:	4603      	mov	r3, r0
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	801a      	strh	r2, [r3, #0]
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b84 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002ad6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd fd30 	bl	8000544 <__aeabi_i2d>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4620      	mov	r0, r4
 8002aea:	4629      	mov	r1, r5
 8002aec:	f7fd fd94 	bl	8000618 <__aeabi_dmul>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4690      	mov	r8, r2
 8002af6:	4699      	mov	r9, r3
                                  (touchMatrix.En * screenPoint->y) +
 8002af8:	4b22      	ldr	r3, [pc, #136]	@ (8002b84 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002afa:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	885b      	ldrh	r3, [r3, #2]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fd fd1e 	bl	8000544 <__aeabi_i2d>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	4629      	mov	r1, r5
 8002b10:	f7fd fd82 	bl	8000618 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002b18:	4640      	mov	r0, r8
 8002b1a:	4649      	mov	r1, r9
 8002b1c:	f7fd fbc6 	bl	80002ac <__adddf3>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
                                  touchMatrix.Fn) /
 8002b28:	4b16      	ldr	r3, [pc, #88]	@ (8002b84 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b2a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
                                  (touchMatrix.En * screenPoint->y) +
 8002b2e:	f7fd fbbd 	bl	80002ac <__adddf3>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4610      	mov	r0, r2
 8002b38:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 8002b3a:	4b12      	ldr	r3, [pc, #72]	@ (8002b84 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b3c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Fn) /
 8002b40:	f7fd fe94 	bl	800086c <__aeabi_ddiv>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002b48:	4610      	mov	r0, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f7fd fffe 	bl	8000b4c <__aeabi_d2uiz>
 8002b50:	4603      	mov	r3, r0
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	805a      	strh	r2, [r3, #2]

    // Constrain to LCD boundaries
    if (displayPoint->x >= LCD_WIDTH)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	2bef      	cmp	r3, #239	@ 0xef
 8002b5e:	d902      	bls.n	8002b66 <Manual_Touch_ApplyCalibration+0x182>
        displayPoint->x = LCD_WIDTH - 1;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	22ef      	movs	r2, #239	@ 0xef
 8002b64:	801a      	strh	r2, [r3, #0]
    if (displayPoint->y >= LCD_HEIGHT)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	885b      	ldrh	r3, [r3, #2]
 8002b6a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002b6e:	d303      	bcc.n	8002b78 <Manual_Touch_ApplyCalibration+0x194>
        displayPoint->y = LCD_HEIGHT - 1;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f240 123f 	movw	r2, #319	@ 0x13f
 8002b76:	805a      	strh	r2, [r3, #2]
    // Note: long double might produce negative intermediate results if raw values are way off.
    // Casting to uint16_t will wrap. Consider clamping if signed intermediates are possible.
    // For typical touch values, this should be fine.

    return 1; // Calibration matrix used
 8002b78:	2301      	movs	r3, #1
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b84:	20000130 	.word	0x20000130
 8002b88:	80080081 	.word	0x80080081

08002b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	4b10      	ldr	r3, [pc, #64]	@ (8002bd8 <HAL_MspInit+0x4c>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8002bd8 <HAL_MspInit+0x4c>)
 8002b9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ba0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <HAL_MspInit+0x4c>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	603b      	str	r3, [r7, #0]
 8002bb2:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <HAL_MspInit+0x4c>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	4a08      	ldr	r2, [pc, #32]	@ (8002bd8 <HAL_MspInit+0x4c>)
 8002bb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bbe:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <HAL_MspInit+0x4c>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800

08002bdc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	@ 0x28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be4:	f107 0314 	add.w	r3, r7, #20
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	605a      	str	r2, [r3, #4]
 8002bee:	609a      	str	r2, [r3, #8]
 8002bf0:	60da      	str	r2, [r3, #12]
 8002bf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a26      	ldr	r2, [pc, #152]	@ (8002c94 <HAL_I2C_MspInit+0xb8>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d145      	bne.n	8002c8a <HAL_I2C_MspInit+0xae>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	4b25      	ldr	r3, [pc, #148]	@ (8002c98 <HAL_I2C_MspInit+0xbc>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	4a24      	ldr	r2, [pc, #144]	@ (8002c98 <HAL_I2C_MspInit+0xbc>)
 8002c08:	f043 0302 	orr.w	r3, r3, #2
 8002c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0e:	4b22      	ldr	r3, [pc, #136]	@ (8002c98 <HAL_I2C_MspInit+0xbc>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	613b      	str	r3, [r7, #16]
 8002c18:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin;
 8002c1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c20:	2312      	movs	r3, #18
 8002c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c24:	2301      	movs	r3, #1
 8002c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	4619      	mov	r1, r3
 8002c36:	4819      	ldr	r0, [pc, #100]	@ (8002c9c <HAL_I2C_MspInit+0xc0>)
 8002c38:	f000 fb24 	bl	8003284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDA_Pin;
 8002c3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c42:	2312      	movs	r3, #18
 8002c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c4e:	2304      	movs	r3, #4
 8002c50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8002c52:	f107 0314 	add.w	r3, r7, #20
 8002c56:	4619      	mov	r1, r3
 8002c58:	4810      	ldr	r0, [pc, #64]	@ (8002c9c <HAL_I2C_MspInit+0xc0>)
 8002c5a:	f000 fb13 	bl	8003284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	4b0d      	ldr	r3, [pc, #52]	@ (8002c98 <HAL_I2C_MspInit+0xbc>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c66:	4a0c      	ldr	r2, [pc, #48]	@ (8002c98 <HAL_I2C_MspInit+0xbc>)
 8002c68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <HAL_I2C_MspInit+0xbc>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2021      	movs	r0, #33	@ 0x21
 8002c80:	f000 fa99 	bl	80031b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002c84:	2021      	movs	r0, #33	@ 0x21
 8002c86:	f000 fab2 	bl	80031ee <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002c8a:	bf00      	nop
 8002c8c:	3728      	adds	r7, #40	@ 0x28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40005800 	.word	0x40005800
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40020400 	.word	0x40020400

08002ca0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	@ 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a28      	ldr	r2, [pc, #160]	@ (8002d60 <HAL_SPI_MspInit+0xc0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d149      	bne.n	8002d56 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	4b27      	ldr	r3, [pc, #156]	@ (8002d64 <HAL_SPI_MspInit+0xc4>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cca:	4a26      	ldr	r2, [pc, #152]	@ (8002d64 <HAL_SPI_MspInit+0xc4>)
 8002ccc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cd2:	4b24      	ldr	r3, [pc, #144]	@ (8002d64 <HAL_SPI_MspInit+0xc4>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	4b20      	ldr	r3, [pc, #128]	@ (8002d64 <HAL_SPI_MspInit+0xc4>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8002d64 <HAL_SPI_MspInit+0xc4>)
 8002ce8:	f043 0301 	orr.w	r3, r3, #1
 8002cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cee:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <HAL_SPI_MspInit+0xc4>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	4b19      	ldr	r3, [pc, #100]	@ (8002d64 <HAL_SPI_MspInit+0xc4>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	4a18      	ldr	r2, [pc, #96]	@ (8002d64 <HAL_SPI_MspInit+0xc4>)
 8002d04:	f043 0302 	orr.w	r3, r3, #2
 8002d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d0a:	4b16      	ldr	r3, [pc, #88]	@ (8002d64 <HAL_SPI_MspInit+0xc4>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	60bb      	str	r3, [r7, #8]
 8002d14:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin|MOSI_Pin;
 8002d16:	23c0      	movs	r3, #192	@ 0xc0
 8002d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d22:	2303      	movs	r3, #3
 8002d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d26:	2305      	movs	r3, #5
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	4619      	mov	r1, r3
 8002d30:	480d      	ldr	r0, [pc, #52]	@ (8002d68 <HAL_SPI_MspInit+0xc8>)
 8002d32:	f000 faa7 	bl	8003284 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCLK_Pin;
 8002d36:	2308      	movs	r3, #8
 8002d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d42:	2303      	movs	r3, #3
 8002d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d46:	2305      	movs	r3, #5
 8002d48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCLK_GPIO_Port, &GPIO_InitStruct);
 8002d4a:	f107 0314 	add.w	r3, r7, #20
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4806      	ldr	r0, [pc, #24]	@ (8002d6c <HAL_SPI_MspInit+0xcc>)
 8002d52:	f000 fa97 	bl	8003284 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002d56:	bf00      	nop
 8002d58:	3728      	adds	r7, #40	@ 0x28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40013000 	.word	0x40013000
 8002d64:	40023800 	.word	0x40023800
 8002d68:	40020000 	.word	0x40020000
 8002d6c:	40020400 	.word	0x40020400

08002d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <NMI_Handler+0x4>

08002d78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <HardFault_Handler+0x4>

08002d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d84:	bf00      	nop
 8002d86:	e7fd      	b.n	8002d84 <MemManage_Handler+0x4>

08002d88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d8c:	bf00      	nop
 8002d8e:	e7fd      	b.n	8002d8c <BusFault_Handler+0x4>

08002d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d94:	bf00      	nop
 8002d96:	e7fd      	b.n	8002d94 <UsageFault_Handler+0x4>

08002d98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002db8:	bf00      	nop
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dc6:	f000 f8d7 	bl	8002f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dca:	bf00      	nop
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8002dd2:	2010      	movs	r0, #16
 8002dd4:	f000 fc24 	bl	8003620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002dd8:	bf00      	nop
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002de0:	4802      	ldr	r0, [pc, #8]	@ (8002dec <I2C2_EV_IRQHandler+0x10>)
 8002de2:	f000 fd9a 	bl	800391a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	2000007c 	.word	0x2000007c

08002df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df8:	4a14      	ldr	r2, [pc, #80]	@ (8002e4c <_sbrk+0x5c>)
 8002dfa:	4b15      	ldr	r3, [pc, #84]	@ (8002e50 <_sbrk+0x60>)
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e04:	4b13      	ldr	r3, [pc, #76]	@ (8002e54 <_sbrk+0x64>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <_sbrk+0x64>)
 8002e0e:	4a12      	ldr	r2, [pc, #72]	@ (8002e58 <_sbrk+0x68>)
 8002e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e12:	4b10      	ldr	r3, [pc, #64]	@ (8002e54 <_sbrk+0x64>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d207      	bcs.n	8002e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e20:	f003 fb9c 	bl	800655c <__errno>
 8002e24:	4603      	mov	r3, r0
 8002e26:	220c      	movs	r2, #12
 8002e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2e:	e009      	b.n	8002e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e30:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <_sbrk+0x64>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e36:	4b07      	ldr	r3, [pc, #28]	@ (8002e54 <_sbrk+0x64>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4a05      	ldr	r2, [pc, #20]	@ (8002e54 <_sbrk+0x64>)
 8002e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e42:	68fb      	ldr	r3, [r7, #12]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20020000 	.word	0x20020000
 8002e50:	00000400 	.word	0x00000400
 8002e54:	20000168 	.word	0x20000168
 8002e58:	200002b8 	.word	0x200002b8

08002e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e60:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <SystemInit+0x20>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e66:	4a05      	ldr	r2, [pc, #20]	@ (8002e7c <SystemInit+0x20>)
 8002e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002eb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e84:	f7ff ffea 	bl	8002e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e88:	480c      	ldr	r0, [pc, #48]	@ (8002ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e8a:	490d      	ldr	r1, [pc, #52]	@ (8002ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e90:	e002      	b.n	8002e98 <LoopCopyDataInit>

08002e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e96:	3304      	adds	r3, #4

08002e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e9c:	d3f9      	bcc.n	8002e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8002ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea4:	e001      	b.n	8002eaa <LoopFillZerobss>

08002ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea8:	3204      	adds	r2, #4

08002eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eac:	d3fb      	bcc.n	8002ea6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002eae:	f003 fb5b 	bl	8006568 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eb2:	f7fe f801 	bl	8000eb8 <main>
  bx  lr    
 8002eb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002eb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ec0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002ec4:	0800715c 	.word	0x0800715c
  ldr r2, =_sbss
 8002ec8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002ecc:	200002b8 	.word	0x200002b8

08002ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ed0:	e7fe      	b.n	8002ed0 <ADC_IRQHandler>
	...

08002ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <HAL_Init+0x40>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <HAL_Init+0x40>)
 8002ede:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <HAL_Init+0x40>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f14 <HAL_Init+0x40>)
 8002eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef0:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <HAL_Init+0x40>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a07      	ldr	r2, [pc, #28]	@ (8002f14 <HAL_Init+0x40>)
 8002ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002efc:	2003      	movs	r0, #3
 8002efe:	f000 f94f 	bl	80031a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f02:	200f      	movs	r0, #15
 8002f04:	f000 f808 	bl	8002f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f08:	f7ff fe40 	bl	8002b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023c00 	.word	0x40023c00

08002f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f20:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <HAL_InitTick+0x54>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b12      	ldr	r3, [pc, #72]	@ (8002f70 <HAL_InitTick+0x58>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f967 	bl	800320a <HAL_SYSTICK_Config>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e00e      	b.n	8002f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b0f      	cmp	r3, #15
 8002f4a:	d80a      	bhi.n	8002f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	f04f 30ff 	mov.w	r0, #4294967295
 8002f54:	f000 f92f 	bl	80031b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f58:	4a06      	ldr	r2, [pc, #24]	@ (8002f74 <HAL_InitTick+0x5c>)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e000      	b.n	8002f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000000 	.word	0x20000000
 8002f70:	20000008 	.word	0x20000008
 8002f74:	20000004 	.word	0x20000004

08002f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <HAL_IncTick+0x20>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <HAL_IncTick+0x24>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4413      	add	r3, r2
 8002f88:	4a04      	ldr	r2, [pc, #16]	@ (8002f9c <HAL_IncTick+0x24>)
 8002f8a:	6013      	str	r3, [r2, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	20000008 	.word	0x20000008
 8002f9c:	2000016c 	.word	0x2000016c

08002fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa4:	4b03      	ldr	r3, [pc, #12]	@ (8002fb4 <HAL_GetTick+0x14>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	2000016c 	.word	0x2000016c

08002fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fc0:	f7ff ffee 	bl	8002fa0 <HAL_GetTick>
 8002fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d005      	beq.n	8002fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <HAL_Delay+0x44>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4413      	add	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fde:	bf00      	nop
 8002fe0:	f7ff ffde 	bl	8002fa0 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d8f7      	bhi.n	8002fe0 <HAL_Delay+0x28>
  {
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000008 	.word	0x20000008

08003000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003010:	4b0c      	ldr	r3, [pc, #48]	@ (8003044 <__NVIC_SetPriorityGrouping+0x44>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800301c:	4013      	ands	r3, r2
 800301e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800302c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003032:	4a04      	ldr	r2, [pc, #16]	@ (8003044 <__NVIC_SetPriorityGrouping+0x44>)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	60d3      	str	r3, [r2, #12]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	e000ed00 	.word	0xe000ed00

08003048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800304c:	4b04      	ldr	r3, [pc, #16]	@ (8003060 <__NVIC_GetPriorityGrouping+0x18>)
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	0a1b      	lsrs	r3, r3, #8
 8003052:	f003 0307 	and.w	r3, r3, #7
}
 8003056:	4618      	mov	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	4603      	mov	r3, r0
 800306c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800306e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003072:	2b00      	cmp	r3, #0
 8003074:	db0b      	blt.n	800308e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003076:	79fb      	ldrb	r3, [r7, #7]
 8003078:	f003 021f 	and.w	r2, r3, #31
 800307c:	4907      	ldr	r1, [pc, #28]	@ (800309c <__NVIC_EnableIRQ+0x38>)
 800307e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003082:	095b      	lsrs	r3, r3, #5
 8003084:	2001      	movs	r0, #1
 8003086:	fa00 f202 	lsl.w	r2, r0, r2
 800308a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	e000e100 	.word	0xe000e100

080030a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	4603      	mov	r3, r0
 80030a8:	6039      	str	r1, [r7, #0]
 80030aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	db0a      	blt.n	80030ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	490c      	ldr	r1, [pc, #48]	@ (80030ec <__NVIC_SetPriority+0x4c>)
 80030ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030be:	0112      	lsls	r2, r2, #4
 80030c0:	b2d2      	uxtb	r2, r2
 80030c2:	440b      	add	r3, r1
 80030c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030c8:	e00a      	b.n	80030e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	4908      	ldr	r1, [pc, #32]	@ (80030f0 <__NVIC_SetPriority+0x50>)
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	3b04      	subs	r3, #4
 80030d8:	0112      	lsls	r2, r2, #4
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	440b      	add	r3, r1
 80030de:	761a      	strb	r2, [r3, #24]
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	e000e100 	.word	0xe000e100
 80030f0:	e000ed00 	.word	0xe000ed00

080030f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b089      	sub	sp, #36	@ 0x24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f1c3 0307 	rsb	r3, r3, #7
 800310e:	2b04      	cmp	r3, #4
 8003110:	bf28      	it	cs
 8003112:	2304      	movcs	r3, #4
 8003114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3304      	adds	r3, #4
 800311a:	2b06      	cmp	r3, #6
 800311c:	d902      	bls.n	8003124 <NVIC_EncodePriority+0x30>
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3b03      	subs	r3, #3
 8003122:	e000      	b.n	8003126 <NVIC_EncodePriority+0x32>
 8003124:	2300      	movs	r3, #0
 8003126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003128:	f04f 32ff 	mov.w	r2, #4294967295
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	fa02 f303 	lsl.w	r3, r2, r3
 8003132:	43da      	mvns	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	401a      	ands	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800313c:	f04f 31ff 	mov.w	r1, #4294967295
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	fa01 f303 	lsl.w	r3, r1, r3
 8003146:	43d9      	mvns	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800314c:	4313      	orrs	r3, r2
         );
}
 800314e:	4618      	mov	r0, r3
 8003150:	3724      	adds	r7, #36	@ 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
	...

0800315c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3b01      	subs	r3, #1
 8003168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800316c:	d301      	bcc.n	8003172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800316e:	2301      	movs	r3, #1
 8003170:	e00f      	b.n	8003192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003172:	4a0a      	ldr	r2, [pc, #40]	@ (800319c <SysTick_Config+0x40>)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3b01      	subs	r3, #1
 8003178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800317a:	210f      	movs	r1, #15
 800317c:	f04f 30ff 	mov.w	r0, #4294967295
 8003180:	f7ff ff8e 	bl	80030a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003184:	4b05      	ldr	r3, [pc, #20]	@ (800319c <SysTick_Config+0x40>)
 8003186:	2200      	movs	r2, #0
 8003188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800318a:	4b04      	ldr	r3, [pc, #16]	@ (800319c <SysTick_Config+0x40>)
 800318c:	2207      	movs	r2, #7
 800318e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	e000e010 	.word	0xe000e010

080031a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ff29 	bl	8003000 <__NVIC_SetPriorityGrouping>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	4603      	mov	r3, r0
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031c8:	f7ff ff3e 	bl	8003048 <__NVIC_GetPriorityGrouping>
 80031cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	6978      	ldr	r0, [r7, #20]
 80031d4:	f7ff ff8e 	bl	80030f4 <NVIC_EncodePriority>
 80031d8:	4602      	mov	r2, r0
 80031da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff ff5d 	bl	80030a0 <__NVIC_SetPriority>
}
 80031e6:	bf00      	nop
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff31 	bl	8003064 <__NVIC_EnableIRQ>
}
 8003202:	bf00      	nop
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff ffa2 	bl	800315c <SysTick_Config>
 8003218:	4603      	mov	r3, r0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003230:	b2db      	uxtb	r3, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d004      	beq.n	8003240 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2280      	movs	r2, #128	@ 0x80
 800323a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e00c      	b.n	800325a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2205      	movs	r2, #5
 8003244:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0201 	bic.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003274:	b2db      	uxtb	r3, r3
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003284:	b480      	push	{r7}
 8003286:	b089      	sub	sp, #36	@ 0x24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003296:	2300      	movs	r3, #0
 8003298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	e16b      	b.n	8003578 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032a0:	2201      	movs	r2, #1
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	f040 815a 	bne.w	8003572 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d005      	beq.n	80032d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d130      	bne.n	8003338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	2203      	movs	r2, #3
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800330c:	2201      	movs	r2, #1
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 0201 	and.w	r2, r3, #1
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	2b03      	cmp	r3, #3
 8003342:	d017      	beq.n	8003374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	2203      	movs	r2, #3
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d123      	bne.n	80033c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	08da      	lsrs	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3208      	adds	r2, #8
 8003388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	220f      	movs	r2, #15
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	08da      	lsrs	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3208      	adds	r2, #8
 80033c2:	69b9      	ldr	r1, [r7, #24]
 80033c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	2203      	movs	r2, #3
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0203 	and.w	r2, r3, #3
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80b4 	beq.w	8003572 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	4b60      	ldr	r3, [pc, #384]	@ (8003590 <HAL_GPIO_Init+0x30c>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003412:	4a5f      	ldr	r2, [pc, #380]	@ (8003590 <HAL_GPIO_Init+0x30c>)
 8003414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003418:	6453      	str	r3, [r2, #68]	@ 0x44
 800341a:	4b5d      	ldr	r3, [pc, #372]	@ (8003590 <HAL_GPIO_Init+0x30c>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003426:	4a5b      	ldr	r2, [pc, #364]	@ (8003594 <HAL_GPIO_Init+0x310>)
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	089b      	lsrs	r3, r3, #2
 800342c:	3302      	adds	r3, #2
 800342e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	220f      	movs	r2, #15
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a52      	ldr	r2, [pc, #328]	@ (8003598 <HAL_GPIO_Init+0x314>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d02b      	beq.n	80034aa <HAL_GPIO_Init+0x226>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a51      	ldr	r2, [pc, #324]	@ (800359c <HAL_GPIO_Init+0x318>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d025      	beq.n	80034a6 <HAL_GPIO_Init+0x222>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a50      	ldr	r2, [pc, #320]	@ (80035a0 <HAL_GPIO_Init+0x31c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d01f      	beq.n	80034a2 <HAL_GPIO_Init+0x21e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a4f      	ldr	r2, [pc, #316]	@ (80035a4 <HAL_GPIO_Init+0x320>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d019      	beq.n	800349e <HAL_GPIO_Init+0x21a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a4e      	ldr	r2, [pc, #312]	@ (80035a8 <HAL_GPIO_Init+0x324>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <HAL_GPIO_Init+0x216>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a4d      	ldr	r2, [pc, #308]	@ (80035ac <HAL_GPIO_Init+0x328>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00d      	beq.n	8003496 <HAL_GPIO_Init+0x212>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a4c      	ldr	r2, [pc, #304]	@ (80035b0 <HAL_GPIO_Init+0x32c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <HAL_GPIO_Init+0x20e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a4b      	ldr	r2, [pc, #300]	@ (80035b4 <HAL_GPIO_Init+0x330>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_GPIO_Init+0x20a>
 800348a:	2307      	movs	r3, #7
 800348c:	e00e      	b.n	80034ac <HAL_GPIO_Init+0x228>
 800348e:	2308      	movs	r3, #8
 8003490:	e00c      	b.n	80034ac <HAL_GPIO_Init+0x228>
 8003492:	2306      	movs	r3, #6
 8003494:	e00a      	b.n	80034ac <HAL_GPIO_Init+0x228>
 8003496:	2305      	movs	r3, #5
 8003498:	e008      	b.n	80034ac <HAL_GPIO_Init+0x228>
 800349a:	2304      	movs	r3, #4
 800349c:	e006      	b.n	80034ac <HAL_GPIO_Init+0x228>
 800349e:	2303      	movs	r3, #3
 80034a0:	e004      	b.n	80034ac <HAL_GPIO_Init+0x228>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e002      	b.n	80034ac <HAL_GPIO_Init+0x228>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_GPIO_Init+0x228>
 80034aa:	2300      	movs	r3, #0
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	f002 0203 	and.w	r2, r2, #3
 80034b2:	0092      	lsls	r2, r2, #2
 80034b4:	4093      	lsls	r3, r2
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034bc:	4935      	ldr	r1, [pc, #212]	@ (8003594 <HAL_GPIO_Init+0x310>)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	089b      	lsrs	r3, r3, #2
 80034c2:	3302      	adds	r3, #2
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ca:	4b3b      	ldr	r3, [pc, #236]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ee:	4a32      	ldr	r2, [pc, #200]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034f4:	4b30      	ldr	r3, [pc, #192]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003518:	4a27      	ldr	r2, [pc, #156]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800351e:	4b26      	ldr	r3, [pc, #152]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003542:	4a1d      	ldr	r2, [pc, #116]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003548:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	43db      	mvns	r3, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800356c:	4a12      	ldr	r2, [pc, #72]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3301      	adds	r3, #1
 8003576:	61fb      	str	r3, [r7, #28]
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b0f      	cmp	r3, #15
 800357c:	f67f ae90 	bls.w	80032a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	3724      	adds	r7, #36	@ 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800
 8003594:	40013800 	.word	0x40013800
 8003598:	40020000 	.word	0x40020000
 800359c:	40020400 	.word	0x40020400
 80035a0:	40020800 	.word	0x40020800
 80035a4:	40020c00 	.word	0x40020c00
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40021400 	.word	0x40021400
 80035b0:	40021800 	.word	0x40021800
 80035b4:	40021c00 	.word	0x40021c00
 80035b8:	40013c00 	.word	0x40013c00

080035bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	460b      	mov	r3, r1
 80035c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	887b      	ldrh	r3, [r7, #2]
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
 80035d8:	e001      	b.n	80035de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035de:	7bfb      	ldrb	r3, [r7, #15]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
 80035f8:	4613      	mov	r3, r2
 80035fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035fc:	787b      	ldrb	r3, [r7, #1]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003602:	887a      	ldrh	r2, [r7, #2]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003608:	e003      	b.n	8003612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800360a:	887b      	ldrh	r3, [r7, #2]
 800360c:	041a      	lsls	r2, r3, #16
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	619a      	str	r2, [r3, #24]
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800362a:	4b08      	ldr	r3, [pc, #32]	@ (800364c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	4013      	ands	r3, r2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d006      	beq.n	8003644 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003636:	4a05      	ldr	r2, [pc, #20]	@ (800364c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	4618      	mov	r0, r3
 8003640:	f000 f806 	bl	8003650 <HAL_GPIO_EXTI_Callback>
  }
}
 8003644:	bf00      	nop
 8003646:	3708      	adds	r7, #8
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40013c00 	.word	0x40013c00

08003650 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	4603      	mov	r3, r0
 8003658:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
	...

08003668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e12b      	b.n	80038d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d106      	bne.n	8003694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f7ff faa4 	bl	8002bdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2224      	movs	r2, #36	@ 0x24
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0201 	bic.w	r2, r2, #1
 80036aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036cc:	f002 f936 	bl	800593c <HAL_RCC_GetPCLK1Freq>
 80036d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	4a81      	ldr	r2, [pc, #516]	@ (80038dc <HAL_I2C_Init+0x274>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d807      	bhi.n	80036ec <HAL_I2C_Init+0x84>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	4a80      	ldr	r2, [pc, #512]	@ (80038e0 <HAL_I2C_Init+0x278>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	bf94      	ite	ls
 80036e4:	2301      	movls	r3, #1
 80036e6:	2300      	movhi	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e006      	b.n	80036fa <HAL_I2C_Init+0x92>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4a7d      	ldr	r2, [pc, #500]	@ (80038e4 <HAL_I2C_Init+0x27c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	bf94      	ite	ls
 80036f4:	2301      	movls	r3, #1
 80036f6:	2300      	movhi	r3, #0
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e0e7      	b.n	80038d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	4a78      	ldr	r2, [pc, #480]	@ (80038e8 <HAL_I2C_Init+0x280>)
 8003706:	fba2 2303 	umull	r2, r3, r2, r3
 800370a:	0c9b      	lsrs	r3, r3, #18
 800370c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68ba      	ldr	r2, [r7, #8]
 800371e:	430a      	orrs	r2, r1
 8003720:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	4a6a      	ldr	r2, [pc, #424]	@ (80038dc <HAL_I2C_Init+0x274>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d802      	bhi.n	800373c <HAL_I2C_Init+0xd4>
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	3301      	adds	r3, #1
 800373a:	e009      	b.n	8003750 <HAL_I2C_Init+0xe8>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003742:	fb02 f303 	mul.w	r3, r2, r3
 8003746:	4a69      	ldr	r2, [pc, #420]	@ (80038ec <HAL_I2C_Init+0x284>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	099b      	lsrs	r3, r3, #6
 800374e:	3301      	adds	r3, #1
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6812      	ldr	r2, [r2, #0]
 8003754:	430b      	orrs	r3, r1
 8003756:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003762:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	495c      	ldr	r1, [pc, #368]	@ (80038dc <HAL_I2C_Init+0x274>)
 800376c:	428b      	cmp	r3, r1
 800376e:	d819      	bhi.n	80037a4 <HAL_I2C_Init+0x13c>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1e59      	subs	r1, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	fbb1 f3f3 	udiv	r3, r1, r3
 800377e:	1c59      	adds	r1, r3, #1
 8003780:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003784:	400b      	ands	r3, r1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <HAL_I2C_Init+0x138>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1e59      	subs	r1, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fbb1 f3f3 	udiv	r3, r1, r3
 8003798:	3301      	adds	r3, #1
 800379a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379e:	e051      	b.n	8003844 <HAL_I2C_Init+0x1dc>
 80037a0:	2304      	movs	r3, #4
 80037a2:	e04f      	b.n	8003844 <HAL_I2C_Init+0x1dc>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d111      	bne.n	80037d0 <HAL_I2C_Init+0x168>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1e58      	subs	r0, r3, #1
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6859      	ldr	r1, [r3, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	440b      	add	r3, r1
 80037ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80037be:	3301      	adds	r3, #1
 80037c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	bf0c      	ite	eq
 80037c8:	2301      	moveq	r3, #1
 80037ca:	2300      	movne	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e012      	b.n	80037f6 <HAL_I2C_Init+0x18e>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1e58      	subs	r0, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	0099      	lsls	r1, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e6:	3301      	adds	r3, #1
 80037e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Init+0x196>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e022      	b.n	8003844 <HAL_I2C_Init+0x1dc>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10e      	bne.n	8003824 <HAL_I2C_Init+0x1bc>
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1e58      	subs	r0, r3, #1
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	460b      	mov	r3, r1
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	440b      	add	r3, r1
 8003814:	fbb0 f3f3 	udiv	r3, r0, r3
 8003818:	3301      	adds	r3, #1
 800381a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003822:	e00f      	b.n	8003844 <HAL_I2C_Init+0x1dc>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1e58      	subs	r0, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	0099      	lsls	r1, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	fbb0 f3f3 	udiv	r3, r0, r3
 800383a:	3301      	adds	r3, #1
 800383c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003840:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	6809      	ldr	r1, [r1, #0]
 8003848:	4313      	orrs	r3, r2
 800384a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	430a      	orrs	r2, r1
 8003866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003872:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6911      	ldr	r1, [r2, #16]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68d2      	ldr	r2, [r2, #12]
 800387e:	4311      	orrs	r1, r2
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	430b      	orrs	r3, r1
 8003886:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695a      	ldr	r2, [r3, #20]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0201 	orr.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	000186a0 	.word	0x000186a0
 80038e0:	001e847f 	.word	0x001e847f
 80038e4:	003d08ff 	.word	0x003d08ff
 80038e8:	431bde83 	.word	0x431bde83
 80038ec:	10624dd3 	.word	0x10624dd3

080038f0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003902:	2b80      	cmp	r3, #128	@ 0x80
 8003904:	d103      	bne.n	800390e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2200      	movs	r2, #0
 800390c:	611a      	str	r2, [r3, #16]
  }
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b088      	sub	sp, #32
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003932:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800393a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003942:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003944:	7bfb      	ldrb	r3, [r7, #15]
 8003946:	2b10      	cmp	r3, #16
 8003948:	d003      	beq.n	8003952 <HAL_I2C_EV_IRQHandler+0x38>
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	2b40      	cmp	r3, #64	@ 0x40
 800394e:	f040 80c1 	bne.w	8003ad4 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10d      	bne.n	8003988 <HAL_I2C_EV_IRQHandler+0x6e>
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003972:	d003      	beq.n	800397c <HAL_I2C_EV_IRQHandler+0x62>
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800397a:	d101      	bne.n	8003980 <HAL_I2C_EV_IRQHandler+0x66>
 800397c:	2301      	movs	r3, #1
 800397e:	e000      	b.n	8003982 <HAL_I2C_EV_IRQHandler+0x68>
 8003980:	2300      	movs	r3, #0
 8003982:	2b01      	cmp	r3, #1
 8003984:	f000 8132 	beq.w	8003bec <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00c      	beq.n	80039ac <HAL_I2C_EV_IRQHandler+0x92>
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	0a5b      	lsrs	r3, r3, #9
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d006      	beq.n	80039ac <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f001 fb80 	bl	80050a4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 fcf8 	bl	800439a <I2C_Master_SB>
 80039aa:	e092      	b.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	08db      	lsrs	r3, r3, #3
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d009      	beq.n	80039cc <HAL_I2C_EV_IRQHandler+0xb2>
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	0a5b      	lsrs	r3, r3, #9
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fd6e 	bl	80044a6 <I2C_Master_ADD10>
 80039ca:	e082      	b.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d009      	beq.n	80039ec <HAL_I2C_EV_IRQHandler+0xd2>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	0a5b      	lsrs	r3, r3, #9
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fd88 	bl	80044fa <I2C_Master_ADDR>
 80039ea:	e072      	b.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	089b      	lsrs	r3, r3, #2
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d03b      	beq.n	8003a70 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a06:	f000 80f3 	beq.w	8003bf0 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	09db      	lsrs	r3, r3, #7
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d00f      	beq.n	8003a36 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	0a9b      	lsrs	r3, r3, #10
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d009      	beq.n	8003a36 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d103      	bne.n	8003a36 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f94c 	bl	8003ccc <I2C_MasterTransmit_TXE>
 8003a34:	e04d      	b.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	089b      	lsrs	r3, r3, #2
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 80d6 	beq.w	8003bf0 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	0a5b      	lsrs	r3, r3, #9
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 80cf 	beq.w	8003bf0 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a52:	7bbb      	ldrb	r3, [r7, #14]
 8003a54:	2b21      	cmp	r3, #33	@ 0x21
 8003a56:	d103      	bne.n	8003a60 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f9d3 	bl	8003e04 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a5e:	e0c7      	b.n	8003bf0 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	2b40      	cmp	r3, #64	@ 0x40
 8003a64:	f040 80c4 	bne.w	8003bf0 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fa41 	bl	8003ef0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a6e:	e0bf      	b.n	8003bf0 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a7e:	f000 80b7 	beq.w	8003bf0 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	099b      	lsrs	r3, r3, #6
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00f      	beq.n	8003aae <HAL_I2C_EV_IRQHandler+0x194>
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	0a9b      	lsrs	r3, r3, #10
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <HAL_I2C_EV_IRQHandler+0x194>
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	089b      	lsrs	r3, r3, #2
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d103      	bne.n	8003aae <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 faba 	bl	8004020 <I2C_MasterReceive_RXNE>
 8003aac:	e011      	b.n	8003ad2 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	089b      	lsrs	r3, r3, #2
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 809a 	beq.w	8003bf0 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	0a5b      	lsrs	r3, r3, #9
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 8093 	beq.w	8003bf0 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 fb70 	bl	80041b0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ad0:	e08e      	b.n	8003bf0 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003ad2:	e08d      	b.n	8003bf0 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	61fb      	str	r3, [r7, #28]
 8003ae4:	e007      	b.n	8003af6 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	f003 0301 	and.w	r3, r3, #1
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d012      	beq.n	8003b28 <HAL_I2C_EV_IRQHandler+0x20e>
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	0a5b      	lsrs	r3, r3, #9
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00c      	beq.n	8003b28 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003b1e:	69b9      	ldr	r1, [r7, #24]
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 ff39 	bl	8004998 <I2C_Slave_ADDR>
 8003b26:	e066      	b.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	091b      	lsrs	r3, r3, #4
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d009      	beq.n	8003b48 <HAL_I2C_EV_IRQHandler+0x22e>
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	0a5b      	lsrs	r3, r3, #9
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 ff73 	bl	8004a2c <I2C_Slave_STOPF>
 8003b46:	e056      	b.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b48:	7bbb      	ldrb	r3, [r7, #14]
 8003b4a:	2b21      	cmp	r3, #33	@ 0x21
 8003b4c:	d002      	beq.n	8003b54 <HAL_I2C_EV_IRQHandler+0x23a>
 8003b4e:	7bbb      	ldrb	r3, [r7, #14]
 8003b50:	2b29      	cmp	r3, #41	@ 0x29
 8003b52:	d125      	bne.n	8003ba0 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	09db      	lsrs	r3, r3, #7
 8003b58:	f003 0301 	and.w	r3, r3, #1
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00f      	beq.n	8003b80 <HAL_I2C_EV_IRQHandler+0x266>
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	0a9b      	lsrs	r3, r3, #10
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d009      	beq.n	8003b80 <HAL_I2C_EV_IRQHandler+0x266>
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	089b      	lsrs	r3, r3, #2
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d103      	bne.n	8003b80 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 fe4f 	bl	800481c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b7e:	e039      	b.n	8003bf4 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	089b      	lsrs	r3, r3, #2
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d033      	beq.n	8003bf4 <HAL_I2C_EV_IRQHandler+0x2da>
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	0a5b      	lsrs	r3, r3, #9
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d02d      	beq.n	8003bf4 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fe7c 	bl	8004896 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b9e:	e029      	b.n	8003bf4 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	099b      	lsrs	r3, r3, #6
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00f      	beq.n	8003bcc <HAL_I2C_EV_IRQHandler+0x2b2>
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	0a9b      	lsrs	r3, r3, #10
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d009      	beq.n	8003bcc <HAL_I2C_EV_IRQHandler+0x2b2>
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	089b      	lsrs	r3, r3, #2
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d103      	bne.n	8003bcc <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fe87 	bl	80048d8 <I2C_SlaveReceive_RXNE>
 8003bca:	e014      	b.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	089b      	lsrs	r3, r3, #2
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00e      	beq.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	0a5b      	lsrs	r3, r3, #9
 8003bdc:	f003 0301 	and.w	r3, r3, #1
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 feb5 	bl	8004954 <I2C_SlaveReceive_BTF>
 8003bea:	e004      	b.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003bec:	bf00      	nop
 8003bee:	e002      	b.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bf0:	bf00      	nop
 8003bf2:	e000      	b.n	8003bf6 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bf4:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003bf6:	3720      	adds	r7, #32
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	460b      	mov	r3, r1
 8003c56:	70fb      	strb	r3, [r7, #3]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cda:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ce2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d150      	bne.n	8003d94 <I2C_MasterTransmit_TXE+0xc8>
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	2b21      	cmp	r3, #33	@ 0x21
 8003cf6:	d14d      	bne.n	8003d94 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d01d      	beq.n	8003d3a <I2C_MasterTransmit_TXE+0x6e>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d01a      	beq.n	8003d3a <I2C_MasterTransmit_TXE+0x6e>
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d0a:	d016      	beq.n	8003d3a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d1a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2211      	movs	r2, #17
 8003d20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7ff ff62 	bl	8003bfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d38:	e060      	b.n	8003dfc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d48:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d58:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b40      	cmp	r3, #64	@ 0x40
 8003d72:	d107      	bne.n	8003d84 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff ff7d 	bl	8003c7c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d82:	e03b      	b.n	8003dfc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ff35 	bl	8003bfc <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d92:	e033      	b.n	8003dfc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	2b21      	cmp	r3, #33	@ 0x21
 8003d98:	d005      	beq.n	8003da6 <I2C_MasterTransmit_TXE+0xda>
 8003d9a:	7bbb      	ldrb	r3, [r7, #14]
 8003d9c:	2b40      	cmp	r3, #64	@ 0x40
 8003d9e:	d12d      	bne.n	8003dfc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003da0:	7bfb      	ldrb	r3, [r7, #15]
 8003da2:	2b22      	cmp	r3, #34	@ 0x22
 8003da4:	d12a      	bne.n	8003dfc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d108      	bne.n	8003dc2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dbe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003dc0:	e01c      	b.n	8003dfc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b40      	cmp	r3, #64	@ 0x40
 8003dcc:	d103      	bne.n	8003dd6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f88e 	bl	8003ef0 <I2C_MemoryTransmit_TXE_BTF>
}
 8003dd4:	e012      	b.n	8003dfc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	781a      	ldrb	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003dfa:	e7ff      	b.n	8003dfc <I2C_MasterTransmit_TXE+0x130>
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b21      	cmp	r3, #33	@ 0x21
 8003e1c:	d164      	bne.n	8003ee8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d012      	beq.n	8003e4e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2c:	781a      	ldrb	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003e4c:	e04c      	b.n	8003ee8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d01d      	beq.n	8003e90 <I2C_MasterTransmit_BTF+0x8c>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d01a      	beq.n	8003e90 <I2C_MasterTransmit_BTF+0x8c>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e60:	d016      	beq.n	8003e90 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e70:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2211      	movs	r2, #17
 8003e76:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff feb7 	bl	8003bfc <HAL_I2C_MasterTxCpltCallback>
}
 8003e8e:	e02b      	b.n	8003ee8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003e9e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eae:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b40      	cmp	r3, #64	@ 0x40
 8003ec8:	d107      	bne.n	8003eda <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff fed2 	bl	8003c7c <HAL_I2C_MemTxCpltCallback>
}
 8003ed8:	e006      	b.n	8003ee8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff fe8a 	bl	8003bfc <HAL_I2C_MasterTxCpltCallback>
}
 8003ee8:	bf00      	nop
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003efe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d11d      	bne.n	8003f44 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d10b      	bne.n	8003f28 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f20:	1c9a      	adds	r2, r3, #2
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003f26:	e077      	b.n	8004018 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	121b      	asrs	r3, r3, #8
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f42:	e069      	b.n	8004018 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d10b      	bne.n	8003f64 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f62:	e059      	b.n	8004018 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d152      	bne.n	8004012 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	2b22      	cmp	r3, #34	@ 0x22
 8003f70:	d10d      	bne.n	8003f8e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f80:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f8c:	e044      	b.n	8004018 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d015      	beq.n	8003fc4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
 8003f9a:	2b21      	cmp	r3, #33	@ 0x21
 8003f9c:	d112      	bne.n	8003fc4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	781a      	ldrb	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003fc2:	e029      	b.n	8004018 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d124      	bne.n	8004018 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	2b21      	cmp	r3, #33	@ 0x21
 8003fd2:	d121      	bne.n	8004018 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685a      	ldr	r2, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003fe2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7ff fe36 	bl	8003c7c <HAL_I2C_MemTxCpltCallback>
}
 8004010:	e002      	b.n	8004018 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff fc6c 	bl	80038f0 <I2C_Flush_DR>
}
 8004018:	bf00      	nop
 800401a:	3710      	adds	r7, #16
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b22      	cmp	r3, #34	@ 0x22
 8004032:	f040 80b9 	bne.w	80041a8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800403a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b03      	cmp	r3, #3
 8004048:	d921      	bls.n	800408e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	b2d2      	uxtb	r2, r2
 8004056:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405c:	1c5a      	adds	r2, r3, #1
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b03      	cmp	r3, #3
 8004078:	f040 8096 	bne.w	80041a8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800408a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800408c:	e08c      	b.n	80041a8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004092:	2b02      	cmp	r3, #2
 8004094:	d07f      	beq.n	8004196 <I2C_MasterReceive_RXNE+0x176>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d002      	beq.n	80040a2 <I2C_MasterReceive_RXNE+0x82>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d179      	bne.n	8004196 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 ffcc 	bl	8005040 <I2C_WaitOnSTOPRequestThroughIT>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d14c      	bne.n	8004148 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040bc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80040cc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b40      	cmp	r3, #64	@ 0x40
 8004106:	d10a      	bne.n	800411e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff fdba 	bl	8003c90 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800411c:	e044      	b.n	80041a8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2b08      	cmp	r3, #8
 800412a:	d002      	beq.n	8004132 <I2C_MasterReceive_RXNE+0x112>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2b20      	cmp	r3, #32
 8004130:	d103      	bne.n	800413a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	631a      	str	r2, [r3, #48]	@ 0x30
 8004138:	e002      	b.n	8004140 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2212      	movs	r2, #18
 800413e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff fd65 	bl	8003c10 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004146:	e02f      	b.n	80041a8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004156:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7ff fd88 	bl	8003ca4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004194:	e008      	b.n	80041a8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041a4:	605a      	str	r2, [r3, #4]
}
 80041a6:	e7ff      	b.n	80041a8 <I2C_MasterReceive_RXNE+0x188>
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041bc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d11b      	bne.n	8004200 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041d6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691a      	ldr	r2, [r3, #16]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e2:	b2d2      	uxtb	r2, r2
 80041e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80041fe:	e0c8      	b.n	8004392 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b03      	cmp	r3, #3
 8004208:	d129      	bne.n	800425e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004218:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d00a      	beq.n	8004236 <I2C_MasterReceive_BTF+0x86>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d007      	beq.n	8004236 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004234:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	b2d2      	uxtb	r2, r2
 8004242:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004252:	b29b      	uxth	r3, r3
 8004254:	3b01      	subs	r3, #1
 8004256:	b29a      	uxth	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800425c:	e099      	b.n	8004392 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	f040 8081 	bne.w	800436c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d002      	beq.n	8004276 <I2C_MasterReceive_BTF+0xc6>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b10      	cmp	r3, #16
 8004274:	d108      	bne.n	8004288 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e019      	b.n	80042bc <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b04      	cmp	r3, #4
 800428c:	d002      	beq.n	8004294 <I2C_MasterReceive_BTF+0xe4>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b02      	cmp	r3, #2
 8004292:	d108      	bne.n	80042a6 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e00a      	b.n	80042bc <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d007      	beq.n	80042bc <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042d8:	b29b      	uxth	r3, r3
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004316:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b40      	cmp	r3, #64	@ 0x40
 800432a:	d10a      	bne.n	8004342 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff fca8 	bl	8003c90 <HAL_I2C_MemRxCpltCallback>
}
 8004340:	e027      	b.n	8004392 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b08      	cmp	r3, #8
 800434e:	d002      	beq.n	8004356 <I2C_MasterReceive_BTF+0x1a6>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b20      	cmp	r3, #32
 8004354:	d103      	bne.n	800435e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	@ 0x30
 800435c:	e002      	b.n	8004364 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2212      	movs	r2, #18
 8004362:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff fc53 	bl	8003c10 <HAL_I2C_MasterRxCpltCallback>
}
 800436a:	e012      	b.n	8004392 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	1c5a      	adds	r2, r3, #1
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004388:	b29b      	uxth	r3, r3
 800438a:	3b01      	subs	r3, #1
 800438c:	b29a      	uxth	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004392:	bf00      	nop
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b40      	cmp	r3, #64	@ 0x40
 80043ac:	d117      	bne.n	80043de <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043c6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80043c8:	e067      	b.n	800449a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	611a      	str	r2, [r3, #16]
}
 80043dc:	e05d      	b.n	800449a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043e6:	d133      	bne.n	8004450 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b21      	cmp	r3, #33	@ 0x21
 80043f2:	d109      	bne.n	8004408 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004404:	611a      	str	r2, [r3, #16]
 8004406:	e008      	b.n	800441a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	b2da      	uxtb	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800441e:	2b00      	cmp	r3, #0
 8004420:	d004      	beq.n	800442c <I2C_Master_SB+0x92>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d108      	bne.n	800443e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004430:	2b00      	cmp	r3, #0
 8004432:	d032      	beq.n	800449a <I2C_Master_SB+0x100>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d02d      	beq.n	800449a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	685a      	ldr	r2, [r3, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800444c:	605a      	str	r2, [r3, #4]
}
 800444e:	e024      	b.n	800449a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10e      	bne.n	8004476 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445c:	b29b      	uxth	r3, r3
 800445e:	11db      	asrs	r3, r3, #7
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 0306 	and.w	r3, r3, #6
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f063 030f 	orn	r3, r3, #15
 800446c:	b2da      	uxtb	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	611a      	str	r2, [r3, #16]
}
 8004474:	e011      	b.n	800449a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800447a:	2b01      	cmp	r3, #1
 800447c:	d10d      	bne.n	800449a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004482:	b29b      	uxth	r3, r3
 8004484:	11db      	asrs	r3, r3, #7
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f003 0306 	and.w	r3, r3, #6
 800448c:	b2db      	uxtb	r3, r3
 800448e:	f063 030e 	orn	r3, r3, #14
 8004492:	b2da      	uxtb	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	611a      	str	r2, [r3, #16]
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d004      	beq.n	80044cc <I2C_Master_ADD10+0x26>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d108      	bne.n	80044de <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00c      	beq.n	80044ee <I2C_Master_ADD10+0x48>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044ec:	605a      	str	r2, [r3, #4]
  }
}
 80044ee:	bf00      	nop
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b091      	sub	sp, #68	@ 0x44
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004508:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004510:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004516:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b22      	cmp	r3, #34	@ 0x22
 8004522:	f040 8169 	bne.w	80047f8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10f      	bne.n	800454e <I2C_Master_ADDR+0x54>
 800452e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004532:	2b40      	cmp	r3, #64	@ 0x40
 8004534:	d10b      	bne.n	800454e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004536:	2300      	movs	r3, #0
 8004538:	633b      	str	r3, [r7, #48]	@ 0x30
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	633b      	str	r3, [r7, #48]	@ 0x30
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	633b      	str	r3, [r7, #48]	@ 0x30
 800454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454c:	e160      	b.n	8004810 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004552:	2b00      	cmp	r3, #0
 8004554:	d11d      	bne.n	8004592 <I2C_Master_ADDR+0x98>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800455e:	d118      	bne.n	8004592 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004560:	2300      	movs	r3, #0
 8004562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004584:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004590:	e13e      	b.n	8004810 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d113      	bne.n	80045c4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459c:	2300      	movs	r3, #0
 800459e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	e115      	b.n	80047f0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	f040 808a 	bne.w	80046e4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80045d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80045d6:	d137      	bne.n	8004648 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045f6:	d113      	bne.n	8004620 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004606:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004608:	2300      	movs	r3, #0
 800460a:	627b      	str	r3, [r7, #36]	@ 0x24
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	627b      	str	r3, [r7, #36]	@ 0x24
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	627b      	str	r3, [r7, #36]	@ 0x24
 800461c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461e:	e0e7      	b.n	80047f0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004620:	2300      	movs	r3, #0
 8004622:	623b      	str	r3, [r7, #32]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	623b      	str	r3, [r7, #32]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	623b      	str	r3, [r7, #32]
 8004634:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	e0d3      	b.n	80047f0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464a:	2b08      	cmp	r3, #8
 800464c:	d02e      	beq.n	80046ac <I2C_Master_ADDR+0x1b2>
 800464e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004650:	2b20      	cmp	r3, #32
 8004652:	d02b      	beq.n	80046ac <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004656:	2b12      	cmp	r3, #18
 8004658:	d102      	bne.n	8004660 <I2C_Master_ADDR+0x166>
 800465a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800465c:	2b01      	cmp	r3, #1
 800465e:	d125      	bne.n	80046ac <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004662:	2b04      	cmp	r3, #4
 8004664:	d00e      	beq.n	8004684 <I2C_Master_ADDR+0x18a>
 8004666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004668:	2b02      	cmp	r3, #2
 800466a:	d00b      	beq.n	8004684 <I2C_Master_ADDR+0x18a>
 800466c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466e:	2b10      	cmp	r3, #16
 8004670:	d008      	beq.n	8004684 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	e007      	b.n	8004694 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004692:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004694:	2300      	movs	r3, #0
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	e0a1      	b.n	80047f0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046ba:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046bc:	2300      	movs	r3, #0
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046e0:	601a      	str	r2, [r3, #0]
 80046e2:	e085      	b.n	80047f0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d14d      	bne.n	800478a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d016      	beq.n	8004722 <I2C_Master_ADDR+0x228>
 80046f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d013      	beq.n	8004722 <I2C_Master_ADDR+0x228>
 80046fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fc:	2b10      	cmp	r3, #16
 80046fe:	d010      	beq.n	8004722 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800470e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	e007      	b.n	8004732 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004730:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800473c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004740:	d117      	bne.n	8004772 <I2C_Master_ADDR+0x278>
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004744:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004748:	d00b      	beq.n	8004762 <I2C_Master_ADDR+0x268>
 800474a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800474c:	2b01      	cmp	r3, #1
 800474e:	d008      	beq.n	8004762 <I2C_Master_ADDR+0x268>
 8004750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004752:	2b08      	cmp	r3, #8
 8004754:	d005      	beq.n	8004762 <I2C_Master_ADDR+0x268>
 8004756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004758:	2b10      	cmp	r3, #16
 800475a:	d002      	beq.n	8004762 <I2C_Master_ADDR+0x268>
 800475c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800475e:	2b20      	cmp	r3, #32
 8004760:	d107      	bne.n	8004772 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004770:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004772:	2300      	movs	r3, #0
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	e032      	b.n	80047f0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004798:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047a8:	d117      	bne.n	80047da <I2C_Master_ADDR+0x2e0>
 80047aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047b0:	d00b      	beq.n	80047ca <I2C_Master_ADDR+0x2d0>
 80047b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d008      	beq.n	80047ca <I2C_Master_ADDR+0x2d0>
 80047b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d005      	beq.n	80047ca <I2C_Master_ADDR+0x2d0>
 80047be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d002      	beq.n	80047ca <I2C_Master_ADDR+0x2d0>
 80047c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d107      	bne.n	80047da <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047da:	2300      	movs	r3, #0
 80047dc:	613b      	str	r3, [r7, #16]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	613b      	str	r3, [r7, #16]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80047f6:	e00b      	b.n	8004810 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f8:	2300      	movs	r3, #0
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
}
 800480e:	e7ff      	b.n	8004810 <I2C_Master_ADDR+0x316>
 8004810:	bf00      	nop
 8004812:	3744      	adds	r7, #68	@ 0x44
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800482a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d02b      	beq.n	800488e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483a:	781a      	ldrb	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d114      	bne.n	800488e <I2C_SlaveTransmit_TXE+0x72>
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	2b29      	cmp	r3, #41	@ 0x29
 8004868:	d111      	bne.n	800488e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004878:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2221      	movs	r2, #33	@ 0x21
 800487e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2228      	movs	r2, #40	@ 0x28
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff f9cb 	bl	8003c24 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800488e:	bf00      	nop
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d011      	beq.n	80048cc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	781a      	ldrb	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	3b01      	subs	r3, #1
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d02c      	beq.n	800494c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d114      	bne.n	800494c <I2C_SlaveReceive_RXNE+0x74>
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	2b2a      	cmp	r3, #42	@ 0x2a
 8004926:	d111      	bne.n	800494c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004936:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2222      	movs	r2, #34	@ 0x22
 800493c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2228      	movs	r2, #40	@ 0x28
 8004942:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f7ff f976 	bl	8003c38 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800494c:	bf00      	nop
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d012      	beq.n	800498c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b01      	subs	r3, #1
 8004986:	b29a      	uxth	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80049a2:	2300      	movs	r3, #0
 80049a4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049b2:	2b28      	cmp	r3, #40	@ 0x28
 80049b4:	d127      	bne.n	8004a06 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	685a      	ldr	r2, [r3, #4]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049c4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	089b      	lsrs	r3, r3, #2
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80049d2:	2301      	movs	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	09db      	lsrs	r3, r3, #7
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	81bb      	strh	r3, [r7, #12]
 80049e8:	e002      	b.n	80049f0 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80049f8:	89ba      	ldrh	r2, [r7, #12]
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	4619      	mov	r1, r3
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7ff f924 	bl	8003c4c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a04:	e00e      	b.n	8004a24 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a06:	2300      	movs	r3, #0
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004a24:	bf00      	nop
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a3a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a4a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60bb      	str	r3, [r7, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	60bb      	str	r3, [r7, #8]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0201 	orr.w	r2, r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
 8004a68:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a78:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a88:	d172      	bne.n	8004b70 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	2b22      	cmp	r3, #34	@ 0x22
 8004a8e:	d002      	beq.n	8004a96 <I2C_Slave_STOPF+0x6a>
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a94:	d135      	bne.n	8004b02 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d005      	beq.n	8004aba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	f043 0204 	orr.w	r2, r3, #4
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ac8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fe fbc9 	bl	8003266 <HAL_DMA_GetState>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d049      	beq.n	8004b6e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ade:	4a69      	ldr	r2, [pc, #420]	@ (8004c84 <I2C_Slave_STOPF+0x258>)
 8004ae0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe fb9b 	bl	8003222 <HAL_DMA_Abort_IT>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d03d      	beq.n	8004b6e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004afc:	4610      	mov	r0, r2
 8004afe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b00:	e035      	b.n	8004b6e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1e:	f043 0204 	orr.w	r2, r3, #4
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fb93 	bl	8003266 <HAL_DMA_GetState>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d014      	beq.n	8004b70 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b4a:	4a4e      	ldr	r2, [pc, #312]	@ (8004c84 <I2C_Slave_STOPF+0x258>)
 8004b4c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fe fb65 	bl	8003222 <HAL_DMA_Abort_IT>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d008      	beq.n	8004b70 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b68:	4610      	mov	r0, r2
 8004b6a:	4798      	blx	r3
 8004b6c:	e000      	b.n	8004b70 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b6e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d03e      	beq.n	8004bf8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d112      	bne.n	8004bae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691a      	ldr	r2, [r3, #16]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	b2d2      	uxtb	r2, r2
 8004b94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bb8:	2b40      	cmp	r3, #64	@ 0x40
 8004bba:	d112      	bne.n	8004be2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	691a      	ldr	r2, [r3, #16]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	b29a      	uxth	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d005      	beq.n	8004bf8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf0:	f043 0204 	orr.w	r2, r3, #4
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f843 	bl	8004c8c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004c06:	e039      	b.n	8004c7c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c08:	7bfb      	ldrb	r3, [r7, #15]
 8004c0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c0c:	d109      	bne.n	8004c22 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2228      	movs	r2, #40	@ 0x28
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff f80b 	bl	8003c38 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	2b28      	cmp	r3, #40	@ 0x28
 8004c2c:	d111      	bne.n	8004c52 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a15      	ldr	r2, [pc, #84]	@ (8004c88 <I2C_Slave_STOPF+0x25c>)
 8004c32:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff f80c 	bl	8003c68 <HAL_I2C_ListenCpltCallback>
}
 8004c50:	e014      	b.n	8004c7c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c56:	2b22      	cmp	r3, #34	@ 0x22
 8004c58:	d002      	beq.n	8004c60 <I2C_Slave_STOPF+0x234>
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	2b22      	cmp	r3, #34	@ 0x22
 8004c5e:	d10d      	bne.n	8004c7c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7fe ffde 	bl	8003c38 <HAL_I2C_SlaveRxCpltCallback>
}
 8004c7c:	bf00      	nop
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	08004ef1 	.word	0x08004ef1
 8004c88:	ffff0000 	.word	0xffff0000

08004c8c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c9a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ca2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ca4:	7bbb      	ldrb	r3, [r7, #14]
 8004ca6:	2b10      	cmp	r3, #16
 8004ca8:	d002      	beq.n	8004cb0 <I2C_ITError+0x24>
 8004caa:	7bbb      	ldrb	r3, [r7, #14]
 8004cac:	2b40      	cmp	r3, #64	@ 0x40
 8004cae:	d10a      	bne.n	8004cc6 <I2C_ITError+0x3a>
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
 8004cb2:	2b22      	cmp	r3, #34	@ 0x22
 8004cb4:	d107      	bne.n	8004cc6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cc4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ccc:	2b28      	cmp	r3, #40	@ 0x28
 8004cce:	d107      	bne.n	8004ce0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2228      	movs	r2, #40	@ 0x28
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004cde:	e015      	b.n	8004d0c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cee:	d00a      	beq.n	8004d06 <I2C_ITError+0x7a>
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	2b60      	cmp	r3, #96	@ 0x60
 8004cf4:	d007      	beq.n	8004d06 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d1a:	d162      	bne.n	8004de2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d2a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d30:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d020      	beq.n	8004d7c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3e:	4a6a      	ldr	r2, [pc, #424]	@ (8004ee8 <I2C_ITError+0x25c>)
 8004d40:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fe fa6b 	bl	8003222 <HAL_DMA_Abort_IT>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	f000 8089 	beq.w	8004e66 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0201 	bic.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004d76:	4610      	mov	r0, r2
 8004d78:	4798      	blx	r3
 8004d7a:	e074      	b.n	8004e66 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d80:	4a59      	ldr	r2, [pc, #356]	@ (8004ee8 <I2C_ITError+0x25c>)
 8004d82:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fe fa4a 	bl	8003222 <HAL_DMA_Abort_IT>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d068      	beq.n	8004e66 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d9e:	2b40      	cmp	r3, #64	@ 0x40
 8004da0:	d10b      	bne.n	8004dba <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	691a      	ldr	r2, [r3, #16]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004ddc:	4610      	mov	r0, r2
 8004dde:	4798      	blx	r3
 8004de0:	e041      	b.n	8004e66 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b60      	cmp	r3, #96	@ 0x60
 8004dec:	d125      	bne.n	8004e3a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e06:	2b40      	cmp	r3, #64	@ 0x40
 8004e08:	d10b      	bne.n	8004e22 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691a      	ldr	r2, [r3, #16]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f022 0201 	bic.w	r2, r2, #1
 8004e30:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fe ff40 	bl	8003cb8 <HAL_I2C_AbortCpltCallback>
 8004e38:	e015      	b.n	8004e66 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	695b      	ldr	r3, [r3, #20]
 8004e40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e44:	2b40      	cmp	r3, #64	@ 0x40
 8004e46:	d10b      	bne.n	8004e60 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5a:	1c5a      	adds	r2, r3, #1
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7fe ff1f 	bl	8003ca4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	f003 0301 	and.w	r3, r3, #1
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d10e      	bne.n	8004e94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d109      	bne.n	8004e94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d104      	bne.n	8004e94 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d007      	beq.n	8004ea4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ea2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eaa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb0:	f003 0304 	and.w	r3, r3, #4
 8004eb4:	2b04      	cmp	r3, #4
 8004eb6:	d113      	bne.n	8004ee0 <I2C_ITError+0x254>
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
 8004eba:	2b28      	cmp	r3, #40	@ 0x28
 8004ebc:	d110      	bne.n	8004ee0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8004eec <I2C_ITError+0x260>)
 8004ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fe fec4 	bl	8003c68 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	08004ef1 	.word	0x08004ef1
 8004eec:	ffff0000 	.word	0xffff0000

08004ef0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f00:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f08:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f0a:	4b4b      	ldr	r3, [pc, #300]	@ (8005038 <I2C_DMAAbort+0x148>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	08db      	lsrs	r3, r3, #3
 8004f10:	4a4a      	ldr	r2, [pc, #296]	@ (800503c <I2C_DMAAbort+0x14c>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	0a1a      	lsrs	r2, r3, #8
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	00da      	lsls	r2, r3, #3
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	f043 0220 	orr.w	r2, r3, #32
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004f36:	e00a      	b.n	8004f4e <I2C_DMAAbort+0x5e>
    }
    count--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f4c:	d0ea      	beq.n	8004f24 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f7c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2200      	movs	r2, #0
 8004f82:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f90:	2200      	movs	r2, #0
 8004f92:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f022 0201 	bic.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b60      	cmp	r3, #96	@ 0x60
 8004fbe:	d10e      	bne.n	8004fde <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004fd6:	6978      	ldr	r0, [r7, #20]
 8004fd8:	f7fe fe6e 	bl	8003cb8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004fdc:	e027      	b.n	800502e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fde:	7cfb      	ldrb	r3, [r7, #19]
 8004fe0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004fe4:	2b28      	cmp	r3, #40	@ 0x28
 8004fe6:	d117      	bne.n	8005018 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005006:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2200      	movs	r2, #0
 800500c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2228      	movs	r2, #40	@ 0x28
 8005012:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005016:	e007      	b.n	8005028 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005028:	6978      	ldr	r0, [r7, #20]
 800502a:	f7fe fe3b 	bl	8003ca4 <HAL_I2C_ErrorCallback>
}
 800502e:	bf00      	nop
 8005030:	3718      	adds	r7, #24
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000000 	.word	0x20000000
 800503c:	14f8b589 	.word	0x14f8b589

08005040 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800504c:	4b13      	ldr	r3, [pc, #76]	@ (800509c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	08db      	lsrs	r3, r3, #3
 8005052:	4a13      	ldr	r2, [pc, #76]	@ (80050a0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	0a1a      	lsrs	r2, r3, #8
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3b01      	subs	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d107      	bne.n	800507e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005072:	f043 0220 	orr.w	r2, r3, #32
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e008      	b.n	8005090 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800508c:	d0e9      	beq.n	8005062 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr
 800509c:	20000000 	.word	0x20000000
 80050a0:	14f8b589 	.word	0x14f8b589

080050a4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80050b4:	d103      	bne.n	80050be <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80050bc:	e007      	b.n	80050ce <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80050c6:	d102      	bne.n	80050ce <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2208      	movs	r2, #8
 80050cc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e267      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d075      	beq.n	80051e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80050fa:	4b88      	ldr	r3, [pc, #544]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	2b04      	cmp	r3, #4
 8005104:	d00c      	beq.n	8005120 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005106:	4b85      	ldr	r3, [pc, #532]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800510e:	2b08      	cmp	r3, #8
 8005110:	d112      	bne.n	8005138 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005112:	4b82      	ldr	r3, [pc, #520]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800511a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800511e:	d10b      	bne.n	8005138 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005120:	4b7e      	ldr	r3, [pc, #504]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d05b      	beq.n	80051e4 <HAL_RCC_OscConfig+0x108>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d157      	bne.n	80051e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e242      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005140:	d106      	bne.n	8005150 <HAL_RCC_OscConfig+0x74>
 8005142:	4b76      	ldr	r3, [pc, #472]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a75      	ldr	r2, [pc, #468]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800514c:	6013      	str	r3, [r2, #0]
 800514e:	e01d      	b.n	800518c <HAL_RCC_OscConfig+0xb0>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005158:	d10c      	bne.n	8005174 <HAL_RCC_OscConfig+0x98>
 800515a:	4b70      	ldr	r3, [pc, #448]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a6f      	ldr	r2, [pc, #444]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005164:	6013      	str	r3, [r2, #0]
 8005166:	4b6d      	ldr	r3, [pc, #436]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a6c      	ldr	r2, [pc, #432]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 800516c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	e00b      	b.n	800518c <HAL_RCC_OscConfig+0xb0>
 8005174:	4b69      	ldr	r3, [pc, #420]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a68      	ldr	r2, [pc, #416]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 800517a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	4b66      	ldr	r3, [pc, #408]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a65      	ldr	r2, [pc, #404]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005186:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800518a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d013      	beq.n	80051bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005194:	f7fd ff04 	bl	8002fa0 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800519c:	f7fd ff00 	bl	8002fa0 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b64      	cmp	r3, #100	@ 0x64
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e207      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ae:	4b5b      	ldr	r3, [pc, #364]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f0      	beq.n	800519c <HAL_RCC_OscConfig+0xc0>
 80051ba:	e014      	b.n	80051e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051bc:	f7fd fef0 	bl	8002fa0 <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c4:	f7fd feec 	bl	8002fa0 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b64      	cmp	r3, #100	@ 0x64
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e1f3      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051d6:	4b51      	ldr	r3, [pc, #324]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f0      	bne.n	80051c4 <HAL_RCC_OscConfig+0xe8>
 80051e2:	e000      	b.n	80051e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d063      	beq.n	80052ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80051f2:	4b4a      	ldr	r3, [pc, #296]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	f003 030c 	and.w	r3, r3, #12
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00b      	beq.n	8005216 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051fe:	4b47      	ldr	r3, [pc, #284]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005206:	2b08      	cmp	r3, #8
 8005208:	d11c      	bne.n	8005244 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800520a:	4b44      	ldr	r3, [pc, #272]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d116      	bne.n	8005244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005216:	4b41      	ldr	r3, [pc, #260]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <HAL_RCC_OscConfig+0x152>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d001      	beq.n	800522e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e1c7      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800522e:	4b3b      	ldr	r3, [pc, #236]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	4937      	ldr	r1, [pc, #220]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 800523e:	4313      	orrs	r3, r2
 8005240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005242:	e03a      	b.n	80052ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d020      	beq.n	800528e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800524c:	4b34      	ldr	r3, [pc, #208]	@ (8005320 <HAL_RCC_OscConfig+0x244>)
 800524e:	2201      	movs	r2, #1
 8005250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005252:	f7fd fea5 	bl	8002fa0 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800525a:	f7fd fea1 	bl	8002fa0 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e1a8      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800526c:	4b2b      	ldr	r3, [pc, #172]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0302 	and.w	r3, r3, #2
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005278:	4b28      	ldr	r3, [pc, #160]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	4925      	ldr	r1, [pc, #148]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 8005288:	4313      	orrs	r3, r2
 800528a:	600b      	str	r3, [r1, #0]
 800528c:	e015      	b.n	80052ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800528e:	4b24      	ldr	r3, [pc, #144]	@ (8005320 <HAL_RCC_OscConfig+0x244>)
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005294:	f7fd fe84 	bl	8002fa0 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800529c:	f7fd fe80 	bl	8002fa0 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e187      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052ae:	4b1b      	ldr	r3, [pc, #108]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1f0      	bne.n	800529c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d036      	beq.n	8005334 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d016      	beq.n	80052fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052ce:	4b15      	ldr	r3, [pc, #84]	@ (8005324 <HAL_RCC_OscConfig+0x248>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d4:	f7fd fe64 	bl	8002fa0 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052da:	e008      	b.n	80052ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052dc:	f7fd fe60 	bl	8002fa0 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e167      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ee:	4b0b      	ldr	r3, [pc, #44]	@ (800531c <HAL_RCC_OscConfig+0x240>)
 80052f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0f0      	beq.n	80052dc <HAL_RCC_OscConfig+0x200>
 80052fa:	e01b      	b.n	8005334 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052fc:	4b09      	ldr	r3, [pc, #36]	@ (8005324 <HAL_RCC_OscConfig+0x248>)
 80052fe:	2200      	movs	r2, #0
 8005300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005302:	f7fd fe4d 	bl	8002fa0 <HAL_GetTick>
 8005306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005308:	e00e      	b.n	8005328 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800530a:	f7fd fe49 	bl	8002fa0 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b02      	cmp	r3, #2
 8005316:	d907      	bls.n	8005328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e150      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
 800531c:	40023800 	.word	0x40023800
 8005320:	42470000 	.word	0x42470000
 8005324:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005328:	4b88      	ldr	r3, [pc, #544]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 800532a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ea      	bne.n	800530a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8097 	beq.w	8005470 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005342:	2300      	movs	r3, #0
 8005344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005346:	4b81      	ldr	r3, [pc, #516]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800534a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10f      	bne.n	8005372 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005352:	2300      	movs	r3, #0
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	4b7d      	ldr	r3, [pc, #500]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	4a7c      	ldr	r2, [pc, #496]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 800535c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005360:	6413      	str	r3, [r2, #64]	@ 0x40
 8005362:	4b7a      	ldr	r3, [pc, #488]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800536a:	60bb      	str	r3, [r7, #8]
 800536c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800536e:	2301      	movs	r3, #1
 8005370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005372:	4b77      	ldr	r3, [pc, #476]	@ (8005550 <HAL_RCC_OscConfig+0x474>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d118      	bne.n	80053b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800537e:	4b74      	ldr	r3, [pc, #464]	@ (8005550 <HAL_RCC_OscConfig+0x474>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a73      	ldr	r2, [pc, #460]	@ (8005550 <HAL_RCC_OscConfig+0x474>)
 8005384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800538a:	f7fd fe09 	bl	8002fa0 <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005392:	f7fd fe05 	bl	8002fa0 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e10c      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005550 <HAL_RCC_OscConfig+0x474>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f0      	beq.n	8005392 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d106      	bne.n	80053c6 <HAL_RCC_OscConfig+0x2ea>
 80053b8:	4b64      	ldr	r3, [pc, #400]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053bc:	4a63      	ldr	r2, [pc, #396]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053c4:	e01c      	b.n	8005400 <HAL_RCC_OscConfig+0x324>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b05      	cmp	r3, #5
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCC_OscConfig+0x30c>
 80053ce:	4b5f      	ldr	r3, [pc, #380]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d2:	4a5e      	ldr	r2, [pc, #376]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053d4:	f043 0304 	orr.w	r3, r3, #4
 80053d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80053da:	4b5c      	ldr	r3, [pc, #368]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053de:	4a5b      	ldr	r2, [pc, #364]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053e0:	f043 0301 	orr.w	r3, r3, #1
 80053e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80053e6:	e00b      	b.n	8005400 <HAL_RCC_OscConfig+0x324>
 80053e8:	4b58      	ldr	r3, [pc, #352]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ec:	4a57      	ldr	r2, [pc, #348]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053ee:	f023 0301 	bic.w	r3, r3, #1
 80053f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80053f4:	4b55      	ldr	r3, [pc, #340]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f8:	4a54      	ldr	r2, [pc, #336]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80053fa:	f023 0304 	bic.w	r3, r3, #4
 80053fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d015      	beq.n	8005434 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005408:	f7fd fdca 	bl	8002fa0 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540e:	e00a      	b.n	8005426 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005410:	f7fd fdc6 	bl	8002fa0 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e0cb      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005426:	4b49      	ldr	r3, [pc, #292]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0ee      	beq.n	8005410 <HAL_RCC_OscConfig+0x334>
 8005432:	e014      	b.n	800545e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005434:	f7fd fdb4 	bl	8002fa0 <HAL_GetTick>
 8005438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800543a:	e00a      	b.n	8005452 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543c:	f7fd fdb0 	bl	8002fa0 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e0b5      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005452:	4b3e      	ldr	r3, [pc, #248]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1ee      	bne.n	800543c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800545e:	7dfb      	ldrb	r3, [r7, #23]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d105      	bne.n	8005470 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005464:	4b39      	ldr	r3, [pc, #228]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005468:	4a38      	ldr	r2, [pc, #224]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 800546a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800546e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 80a1 	beq.w	80055bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800547a:	4b34      	ldr	r3, [pc, #208]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 030c 	and.w	r3, r3, #12
 8005482:	2b08      	cmp	r3, #8
 8005484:	d05c      	beq.n	8005540 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d141      	bne.n	8005512 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800548e:	4b31      	ldr	r3, [pc, #196]	@ (8005554 <HAL_RCC_OscConfig+0x478>)
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005494:	f7fd fd84 	bl	8002fa0 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549c:	f7fd fd80 	bl	8002fa0 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e087      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ae:	4b27      	ldr	r3, [pc, #156]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f0      	bne.n	800549c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	69da      	ldr	r2, [r3, #28]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c8:	019b      	lsls	r3, r3, #6
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d0:	085b      	lsrs	r3, r3, #1
 80054d2:	3b01      	subs	r3, #1
 80054d4:	041b      	lsls	r3, r3, #16
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054dc:	061b      	lsls	r3, r3, #24
 80054de:	491b      	ldr	r1, [pc, #108]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005554 <HAL_RCC_OscConfig+0x478>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ea:	f7fd fd59 	bl	8002fa0 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f2:	f7fd fd55 	bl	8002fa0 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e05c      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005504:	4b11      	ldr	r3, [pc, #68]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0f0      	beq.n	80054f2 <HAL_RCC_OscConfig+0x416>
 8005510:	e054      	b.n	80055bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005512:	4b10      	ldr	r3, [pc, #64]	@ (8005554 <HAL_RCC_OscConfig+0x478>)
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005518:	f7fd fd42 	bl	8002fa0 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800551e:	e008      	b.n	8005532 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005520:	f7fd fd3e 	bl	8002fa0 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	2b02      	cmp	r3, #2
 800552c:	d901      	bls.n	8005532 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e045      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005532:	4b06      	ldr	r3, [pc, #24]	@ (800554c <HAL_RCC_OscConfig+0x470>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d1f0      	bne.n	8005520 <HAL_RCC_OscConfig+0x444>
 800553e:	e03d      	b.n	80055bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d107      	bne.n	8005558 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e038      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
 800554c:	40023800 	.word	0x40023800
 8005550:	40007000 	.word	0x40007000
 8005554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005558:	4b1b      	ldr	r3, [pc, #108]	@ (80055c8 <HAL_RCC_OscConfig+0x4ec>)
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	2b01      	cmp	r3, #1
 8005564:	d028      	beq.n	80055b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005570:	429a      	cmp	r2, r3
 8005572:	d121      	bne.n	80055b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800557e:	429a      	cmp	r2, r3
 8005580:	d11a      	bne.n	80055b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005588:	4013      	ands	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800558e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005590:	4293      	cmp	r3, r2
 8005592:	d111      	bne.n	80055b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559e:	085b      	lsrs	r3, r3, #1
 80055a0:	3b01      	subs	r3, #1
 80055a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d107      	bne.n	80055b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055b4:	429a      	cmp	r2, r3
 80055b6:	d001      	beq.n	80055bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3718      	adds	r7, #24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40023800 	.word	0x40023800

080055cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e0cc      	b.n	800577a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80055e0:	4b68      	ldr	r3, [pc, #416]	@ (8005784 <HAL_RCC_ClockConfig+0x1b8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	683a      	ldr	r2, [r7, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d90c      	bls.n	8005608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ee:	4b65      	ldr	r3, [pc, #404]	@ (8005784 <HAL_RCC_ClockConfig+0x1b8>)
 80055f0:	683a      	ldr	r2, [r7, #0]
 80055f2:	b2d2      	uxtb	r2, r2
 80055f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055f6:	4b63      	ldr	r3, [pc, #396]	@ (8005784 <HAL_RCC_ClockConfig+0x1b8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d001      	beq.n	8005608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e0b8      	b.n	800577a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d020      	beq.n	8005656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0304 	and.w	r3, r3, #4
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005620:	4b59      	ldr	r3, [pc, #356]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	4a58      	ldr	r2, [pc, #352]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800562a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d005      	beq.n	8005644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005638:	4b53      	ldr	r3, [pc, #332]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	4a52      	ldr	r2, [pc, #328]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800563e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005644:	4b50      	ldr	r3, [pc, #320]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	494d      	ldr	r1, [pc, #308]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	4313      	orrs	r3, r2
 8005654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d044      	beq.n	80056ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d107      	bne.n	800567a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800566a:	4b47      	ldr	r3, [pc, #284]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d119      	bne.n	80056aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e07f      	b.n	800577a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b02      	cmp	r3, #2
 8005680:	d003      	beq.n	800568a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005686:	2b03      	cmp	r3, #3
 8005688:	d107      	bne.n	800569a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800568a:	4b3f      	ldr	r3, [pc, #252]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e06f      	b.n	800577a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800569a:	4b3b      	ldr	r3, [pc, #236]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e067      	b.n	800577a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056aa:	4b37      	ldr	r3, [pc, #220]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f023 0203 	bic.w	r2, r3, #3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	4934      	ldr	r1, [pc, #208]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056bc:	f7fd fc70 	bl	8002fa0 <HAL_GetTick>
 80056c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056c2:	e00a      	b.n	80056da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056c4:	f7fd fc6c 	bl	8002fa0 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d901      	bls.n	80056da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	e04f      	b.n	800577a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056da:	4b2b      	ldr	r3, [pc, #172]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 020c 	and.w	r2, r3, #12
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d1eb      	bne.n	80056c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056ec:	4b25      	ldr	r3, [pc, #148]	@ (8005784 <HAL_RCC_ClockConfig+0x1b8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d20c      	bcs.n	8005714 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fa:	4b22      	ldr	r3, [pc, #136]	@ (8005784 <HAL_RCC_ClockConfig+0x1b8>)
 80056fc:	683a      	ldr	r2, [r7, #0]
 80056fe:	b2d2      	uxtb	r2, r2
 8005700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005702:	4b20      	ldr	r3, [pc, #128]	@ (8005784 <HAL_RCC_ClockConfig+0x1b8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0307 	and.w	r3, r3, #7
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	429a      	cmp	r2, r3
 800570e:	d001      	beq.n	8005714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	e032      	b.n	800577a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0304 	and.w	r3, r3, #4
 800571c:	2b00      	cmp	r3, #0
 800571e:	d008      	beq.n	8005732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005720:	4b19      	ldr	r3, [pc, #100]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	4916      	ldr	r1, [pc, #88]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800572e:	4313      	orrs	r3, r2
 8005730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0308 	and.w	r3, r3, #8
 800573a:	2b00      	cmp	r3, #0
 800573c:	d009      	beq.n	8005752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800573e:	4b12      	ldr	r3, [pc, #72]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	490e      	ldr	r1, [pc, #56]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	4313      	orrs	r3, r2
 8005750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005752:	f000 f821 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8005756:	4602      	mov	r2, r0
 8005758:	4b0b      	ldr	r3, [pc, #44]	@ (8005788 <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	091b      	lsrs	r3, r3, #4
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	490a      	ldr	r1, [pc, #40]	@ (800578c <HAL_RCC_ClockConfig+0x1c0>)
 8005764:	5ccb      	ldrb	r3, [r1, r3]
 8005766:	fa22 f303 	lsr.w	r3, r2, r3
 800576a:	4a09      	ldr	r2, [pc, #36]	@ (8005790 <HAL_RCC_ClockConfig+0x1c4>)
 800576c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800576e:	4b09      	ldr	r3, [pc, #36]	@ (8005794 <HAL_RCC_ClockConfig+0x1c8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4618      	mov	r0, r3
 8005774:	f7fd fbd0 	bl	8002f18 <HAL_InitTick>

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	40023c00 	.word	0x40023c00
 8005788:	40023800 	.word	0x40023800
 800578c:	08007100 	.word	0x08007100
 8005790:	20000000 	.word	0x20000000
 8005794:	20000004 	.word	0x20000004

08005798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800579c:	b090      	sub	sp, #64	@ 0x40
 800579e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057b0:	4b59      	ldr	r3, [pc, #356]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x180>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f003 030c 	and.w	r3, r3, #12
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d00d      	beq.n	80057d8 <HAL_RCC_GetSysClockFreq+0x40>
 80057bc:	2b08      	cmp	r3, #8
 80057be:	f200 80a1 	bhi.w	8005904 <HAL_RCC_GetSysClockFreq+0x16c>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <HAL_RCC_GetSysClockFreq+0x34>
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d003      	beq.n	80057d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80057ca:	e09b      	b.n	8005904 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057cc:	4b53      	ldr	r3, [pc, #332]	@ (800591c <HAL_RCC_GetSysClockFreq+0x184>)
 80057ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057d0:	e09b      	b.n	800590a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057d2:	4b53      	ldr	r3, [pc, #332]	@ (8005920 <HAL_RCC_GetSysClockFreq+0x188>)
 80057d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057d6:	e098      	b.n	800590a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057d8:	4b4f      	ldr	r3, [pc, #316]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x180>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80057e0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057e2:	4b4d      	ldr	r3, [pc, #308]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x180>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d028      	beq.n	8005840 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057ee:	4b4a      	ldr	r3, [pc, #296]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x180>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	099b      	lsrs	r3, r3, #6
 80057f4:	2200      	movs	r2, #0
 80057f6:	623b      	str	r3, [r7, #32]
 80057f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80057fa:	6a3b      	ldr	r3, [r7, #32]
 80057fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005800:	2100      	movs	r1, #0
 8005802:	4b47      	ldr	r3, [pc, #284]	@ (8005920 <HAL_RCC_GetSysClockFreq+0x188>)
 8005804:	fb03 f201 	mul.w	r2, r3, r1
 8005808:	2300      	movs	r3, #0
 800580a:	fb00 f303 	mul.w	r3, r0, r3
 800580e:	4413      	add	r3, r2
 8005810:	4a43      	ldr	r2, [pc, #268]	@ (8005920 <HAL_RCC_GetSysClockFreq+0x188>)
 8005812:	fba0 1202 	umull	r1, r2, r0, r2
 8005816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005818:	460a      	mov	r2, r1
 800581a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800581c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800581e:	4413      	add	r3, r2
 8005820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005824:	2200      	movs	r2, #0
 8005826:	61bb      	str	r3, [r7, #24]
 8005828:	61fa      	str	r2, [r7, #28]
 800582a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800582e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005832:	f7fb f9ab 	bl	8000b8c <__aeabi_uldivmod>
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4613      	mov	r3, r2
 800583c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800583e:	e053      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005840:	4b35      	ldr	r3, [pc, #212]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x180>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	099b      	lsrs	r3, r3, #6
 8005846:	2200      	movs	r2, #0
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	617a      	str	r2, [r7, #20]
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005852:	f04f 0b00 	mov.w	fp, #0
 8005856:	4652      	mov	r2, sl
 8005858:	465b      	mov	r3, fp
 800585a:	f04f 0000 	mov.w	r0, #0
 800585e:	f04f 0100 	mov.w	r1, #0
 8005862:	0159      	lsls	r1, r3, #5
 8005864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005868:	0150      	lsls	r0, r2, #5
 800586a:	4602      	mov	r2, r0
 800586c:	460b      	mov	r3, r1
 800586e:	ebb2 080a 	subs.w	r8, r2, sl
 8005872:	eb63 090b 	sbc.w	r9, r3, fp
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005882:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005886:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800588a:	ebb2 0408 	subs.w	r4, r2, r8
 800588e:	eb63 0509 	sbc.w	r5, r3, r9
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	f04f 0300 	mov.w	r3, #0
 800589a:	00eb      	lsls	r3, r5, #3
 800589c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058a0:	00e2      	lsls	r2, r4, #3
 80058a2:	4614      	mov	r4, r2
 80058a4:	461d      	mov	r5, r3
 80058a6:	eb14 030a 	adds.w	r3, r4, sl
 80058aa:	603b      	str	r3, [r7, #0]
 80058ac:	eb45 030b 	adc.w	r3, r5, fp
 80058b0:	607b      	str	r3, [r7, #4]
 80058b2:	f04f 0200 	mov.w	r2, #0
 80058b6:	f04f 0300 	mov.w	r3, #0
 80058ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058be:	4629      	mov	r1, r5
 80058c0:	028b      	lsls	r3, r1, #10
 80058c2:	4621      	mov	r1, r4
 80058c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80058c8:	4621      	mov	r1, r4
 80058ca:	028a      	lsls	r2, r1, #10
 80058cc:	4610      	mov	r0, r2
 80058ce:	4619      	mov	r1, r3
 80058d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058d2:	2200      	movs	r2, #0
 80058d4:	60bb      	str	r3, [r7, #8]
 80058d6:	60fa      	str	r2, [r7, #12]
 80058d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058dc:	f7fb f956 	bl	8000b8c <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4613      	mov	r3, r2
 80058e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80058e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005918 <HAL_RCC_GetSysClockFreq+0x180>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	0c1b      	lsrs	r3, r3, #16
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	3301      	adds	r3, #1
 80058f4:	005b      	lsls	r3, r3, #1
 80058f6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80058f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005900:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005902:	e002      	b.n	800590a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005904:	4b05      	ldr	r3, [pc, #20]	@ (800591c <HAL_RCC_GetSysClockFreq+0x184>)
 8005906:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800590a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800590c:	4618      	mov	r0, r3
 800590e:	3740      	adds	r7, #64	@ 0x40
 8005910:	46bd      	mov	sp, r7
 8005912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005916:	bf00      	nop
 8005918:	40023800 	.word	0x40023800
 800591c:	00f42400 	.word	0x00f42400
 8005920:	017d7840 	.word	0x017d7840

08005924 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005924:	b480      	push	{r7}
 8005926:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005928:	4b03      	ldr	r3, [pc, #12]	@ (8005938 <HAL_RCC_GetHCLKFreq+0x14>)
 800592a:	681b      	ldr	r3, [r3, #0]
}
 800592c:	4618      	mov	r0, r3
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20000000 	.word	0x20000000

0800593c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005940:	f7ff fff0 	bl	8005924 <HAL_RCC_GetHCLKFreq>
 8005944:	4602      	mov	r2, r0
 8005946:	4b05      	ldr	r3, [pc, #20]	@ (800595c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	0a9b      	lsrs	r3, r3, #10
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	4903      	ldr	r1, [pc, #12]	@ (8005960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005952:	5ccb      	ldrb	r3, [r1, r3]
 8005954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005958:	4618      	mov	r0, r3
 800595a:	bd80      	pop	{r7, pc}
 800595c:	40023800 	.word	0x40023800
 8005960:	08007110 	.word	0x08007110

08005964 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e07b      	b.n	8005a6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597a:	2b00      	cmp	r3, #0
 800597c:	d108      	bne.n	8005990 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005986:	d009      	beq.n	800599c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	61da      	str	r2, [r3, #28]
 800598e:	e005      	b.n	800599c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fd f972 	bl	8002ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059ee:	431a      	orrs	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69db      	ldr	r3, [r3, #28]
 8005a12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a20:	ea42 0103 	orr.w	r1, r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	0c1b      	lsrs	r3, r3, #16
 8005a3a:	f003 0104 	and.w	r1, r3, #4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a42:	f003 0210 	and.w	r2, r3, #16
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	69da      	ldr	r2, [r3, #28]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b088      	sub	sp, #32
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	60f8      	str	r0, [r7, #12]
 8005a7e:	60b9      	str	r1, [r7, #8]
 8005a80:	603b      	str	r3, [r7, #0]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a86:	f7fd fa8b 	bl	8002fa0 <HAL_GetTick>
 8005a8a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005a8c:	88fb      	ldrh	r3, [r7, #6]
 8005a8e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d001      	beq.n	8005aa0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e12a      	b.n	8005cf6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <HAL_SPI_Transmit+0x36>
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e122      	b.n	8005cf6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d101      	bne.n	8005abe <HAL_SPI_Transmit+0x48>
 8005aba:	2302      	movs	r3, #2
 8005abc:	e11b      	b.n	8005cf6 <HAL_SPI_Transmit+0x280>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2203      	movs	r2, #3
 8005aca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	88fa      	ldrh	r2, [r7, #6]
 8005ade:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	88fa      	ldrh	r2, [r7, #6]
 8005ae4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b0c:	d10f      	bne.n	8005b2e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b38:	2b40      	cmp	r3, #64	@ 0x40
 8005b3a:	d007      	beq.n	8005b4c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b54:	d152      	bne.n	8005bfc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_SPI_Transmit+0xee>
 8005b5e:	8b7b      	ldrh	r3, [r7, #26]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d145      	bne.n	8005bf0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b68:	881a      	ldrh	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b74:	1c9a      	adds	r2, r3, #2
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b88:	e032      	b.n	8005bf0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d112      	bne.n	8005bbe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9c:	881a      	ldrh	r2, [r3, #0]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba8:	1c9a      	adds	r2, r3, #2
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005bbc:	e018      	b.n	8005bf0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005bbe:	f7fd f9ef 	bl	8002fa0 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	683a      	ldr	r2, [r7, #0]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d803      	bhi.n	8005bd6 <HAL_SPI_Transmit+0x160>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd4:	d102      	bne.n	8005bdc <HAL_SPI_Transmit+0x166>
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d109      	bne.n	8005bf0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e082      	b.n	8005cf6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1c7      	bne.n	8005b8a <HAL_SPI_Transmit+0x114>
 8005bfa:	e053      	b.n	8005ca4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_SPI_Transmit+0x194>
 8005c04:	8b7b      	ldrh	r3, [r7, #26]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d147      	bne.n	8005c9a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	330c      	adds	r3, #12
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c30:	e033      	b.n	8005c9a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 0302 	and.w	r3, r3, #2
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d113      	bne.n	8005c68 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	7812      	ldrb	r2, [r2, #0]
 8005c4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c52:	1c5a      	adds	r2, r3, #1
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005c66:	e018      	b.n	8005c9a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c68:	f7fd f99a 	bl	8002fa0 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d803      	bhi.n	8005c80 <HAL_SPI_Transmit+0x20a>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c7e:	d102      	bne.n	8005c86 <HAL_SPI_Transmit+0x210>
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d109      	bne.n	8005c9a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e02d      	b.n	8005cf6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1c6      	bne.n	8005c32 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	6839      	ldr	r1, [r7, #0]
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 fbd9 	bl	8006460 <SPI_EndRxTxTransaction>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d002      	beq.n	8005cba <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10a      	bne.n	8005cd8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e000      	b.n	8005cf6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
  }
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3720      	adds	r7, #32
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b088      	sub	sp, #32
 8005d02:	af02      	add	r7, sp, #8
 8005d04:	60f8      	str	r0, [r7, #12]
 8005d06:	60b9      	str	r1, [r7, #8]
 8005d08:	603b      	str	r3, [r7, #0]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d001      	beq.n	8005d1e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005d1a:	2302      	movs	r3, #2
 8005d1c:	e104      	b.n	8005f28 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d26:	d112      	bne.n	8005d4e <HAL_SPI_Receive+0x50>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10e      	bne.n	8005d4e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2204      	movs	r2, #4
 8005d34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005d38:	88fa      	ldrh	r2, [r7, #6]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	9300      	str	r3, [sp, #0]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f8f3 	bl	8005f30 <HAL_SPI_TransmitReceive>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	e0ec      	b.n	8005f28 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d4e:	f7fd f927 	bl	8002fa0 <HAL_GetTick>
 8005d52:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <HAL_SPI_Receive+0x62>
 8005d5a:	88fb      	ldrh	r3, [r7, #6]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d101      	bne.n	8005d64 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0e1      	b.n	8005f28 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_SPI_Receive+0x74>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e0da      	b.n	8005f28 <HAL_SPI_Receive+0x22a>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2204      	movs	r2, #4
 8005d7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	88fa      	ldrh	r2, [r7, #6]
 8005d92:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	88fa      	ldrh	r2, [r7, #6]
 8005d98:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2200      	movs	r2, #0
 8005da4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2200      	movs	r2, #0
 8005db0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dc0:	d10f      	bne.n	8005de2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005de0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dec:	2b40      	cmp	r3, #64	@ 0x40
 8005dee:	d007      	beq.n	8005e00 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005dfe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d170      	bne.n	8005eea <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005e08:	e035      	b.n	8005e76 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d115      	bne.n	8005e44 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f103 020c 	add.w	r2, r3, #12
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e24:	7812      	ldrb	r2, [r2, #0]
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e42:	e018      	b.n	8005e76 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e44:	f7fd f8ac 	bl	8002fa0 <HAL_GetTick>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d803      	bhi.n	8005e5c <HAL_SPI_Receive+0x15e>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5a:	d102      	bne.n	8005e62 <HAL_SPI_Receive+0x164>
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d109      	bne.n	8005e76 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e058      	b.n	8005f28 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1c4      	bne.n	8005e0a <HAL_SPI_Receive+0x10c>
 8005e80:	e038      	b.n	8005ef4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d113      	bne.n	8005eb8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9a:	b292      	uxth	r2, r2
 8005e9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea2:	1c9a      	adds	r2, r3, #2
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005eb6:	e018      	b.n	8005eea <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005eb8:	f7fd f872 	bl	8002fa0 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d803      	bhi.n	8005ed0 <HAL_SPI_Receive+0x1d2>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ece:	d102      	bne.n	8005ed6 <HAL_SPI_Receive+0x1d8>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d109      	bne.n	8005eea <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e01e      	b.n	8005f28 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1c6      	bne.n	8005e82 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 fa4b 	bl	8006394 <SPI_EndRxTransaction>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005f26:	2300      	movs	r3, #0
  }
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3718      	adds	r7, #24
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08a      	sub	sp, #40	@ 0x28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005f42:	f7fd f82d 	bl	8002fa0 <HAL_GetTick>
 8005f46:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f4e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005f56:	887b      	ldrh	r3, [r7, #2]
 8005f58:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f5a:	7ffb      	ldrb	r3, [r7, #31]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d00c      	beq.n	8005f7a <HAL_SPI_TransmitReceive+0x4a>
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f66:	d106      	bne.n	8005f76 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d102      	bne.n	8005f76 <HAL_SPI_TransmitReceive+0x46>
 8005f70:	7ffb      	ldrb	r3, [r7, #31]
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d001      	beq.n	8005f7a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005f76:	2302      	movs	r3, #2
 8005f78:	e17f      	b.n	800627a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d005      	beq.n	8005f8c <HAL_SPI_TransmitReceive+0x5c>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <HAL_SPI_TransmitReceive+0x5c>
 8005f86:	887b      	ldrh	r3, [r7, #2]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e174      	b.n	800627a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <HAL_SPI_TransmitReceive+0x6e>
 8005f9a:	2302      	movs	r3, #2
 8005f9c:	e16d      	b.n	800627a <HAL_SPI_TransmitReceive+0x34a>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b04      	cmp	r3, #4
 8005fb0:	d003      	beq.n	8005fba <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2205      	movs	r2, #5
 8005fb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	887a      	ldrh	r2, [r7, #2]
 8005fca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	887a      	ldrh	r2, [r7, #2]
 8005fd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	887a      	ldrh	r2, [r7, #2]
 8005fdc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	887a      	ldrh	r2, [r7, #2]
 8005fe2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ffa:	2b40      	cmp	r3, #64	@ 0x40
 8005ffc:	d007      	beq.n	800600e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800600c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006016:	d17e      	bne.n	8006116 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <HAL_SPI_TransmitReceive+0xf6>
 8006020:	8afb      	ldrh	r3, [r7, #22]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d16c      	bne.n	8006100 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602a:	881a      	ldrh	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006036:	1c9a      	adds	r2, r3, #2
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006040:	b29b      	uxth	r3, r3
 8006042:	3b01      	subs	r3, #1
 8006044:	b29a      	uxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800604a:	e059      	b.n	8006100 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	2b02      	cmp	r3, #2
 8006058:	d11b      	bne.n	8006092 <HAL_SPI_TransmitReceive+0x162>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800605e:	b29b      	uxth	r3, r3
 8006060:	2b00      	cmp	r3, #0
 8006062:	d016      	beq.n	8006092 <HAL_SPI_TransmitReceive+0x162>
 8006064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006066:	2b01      	cmp	r3, #1
 8006068:	d113      	bne.n	8006092 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606e:	881a      	ldrh	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800607a:	1c9a      	adds	r2, r3, #2
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006084:	b29b      	uxth	r3, r3
 8006086:	3b01      	subs	r3, #1
 8006088:	b29a      	uxth	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b01      	cmp	r3, #1
 800609e:	d119      	bne.n	80060d4 <HAL_SPI_TransmitReceive+0x1a4>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d014      	beq.n	80060d4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b4:	b292      	uxth	r2, r2
 80060b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	1c9a      	adds	r2, r3, #2
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060d0:	2301      	movs	r3, #1
 80060d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80060d4:	f7fc ff64 	bl	8002fa0 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d80d      	bhi.n	8006100 <HAL_SPI_TransmitReceive+0x1d0>
 80060e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ea:	d009      	beq.n	8006100 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80060fc:	2303      	movs	r3, #3
 80060fe:	e0bc      	b.n	800627a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d1a0      	bne.n	800604c <HAL_SPI_TransmitReceive+0x11c>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	d19b      	bne.n	800604c <HAL_SPI_TransmitReceive+0x11c>
 8006114:	e082      	b.n	800621c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <HAL_SPI_TransmitReceive+0x1f4>
 800611e:	8afb      	ldrh	r3, [r7, #22]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d171      	bne.n	8006208 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	330c      	adds	r3, #12
 800612e:	7812      	ldrb	r2, [r2, #0]
 8006130:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006140:	b29b      	uxth	r3, r3
 8006142:	3b01      	subs	r3, #1
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800614a:	e05d      	b.n	8006208 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 0302 	and.w	r3, r3, #2
 8006156:	2b02      	cmp	r3, #2
 8006158:	d11c      	bne.n	8006194 <HAL_SPI_TransmitReceive+0x264>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d017      	beq.n	8006194 <HAL_SPI_TransmitReceive+0x264>
 8006164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006166:	2b01      	cmp	r3, #1
 8006168:	d114      	bne.n	8006194 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	330c      	adds	r3, #12
 8006174:	7812      	ldrb	r2, [r2, #0]
 8006176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617c:	1c5a      	adds	r2, r3, #1
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006186:	b29b      	uxth	r3, r3
 8006188:	3b01      	subs	r3, #1
 800618a:	b29a      	uxth	r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d119      	bne.n	80061d6 <HAL_SPI_TransmitReceive+0x2a6>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d014      	beq.n	80061d6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68da      	ldr	r2, [r3, #12]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	3b01      	subs	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061d2:	2301      	movs	r3, #1
 80061d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061d6:	f7fc fee3 	bl	8002fa0 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d803      	bhi.n	80061ee <HAL_SPI_TransmitReceive+0x2be>
 80061e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ec:	d102      	bne.n	80061f4 <HAL_SPI_TransmitReceive+0x2c4>
 80061ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d109      	bne.n	8006208 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e038      	b.n	800627a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d19c      	bne.n	800614c <HAL_SPI_TransmitReceive+0x21c>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006216:	b29b      	uxth	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d197      	bne.n	800614c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800621c:	6a3a      	ldr	r2, [r7, #32]
 800621e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f91d 	bl	8006460 <SPI_EndRxTxTransaction>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2220      	movs	r2, #32
 8006230:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e01d      	b.n	800627a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d10a      	bne.n	800625c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006246:	2300      	movs	r3, #0
 8006248:	613b      	str	r3, [r7, #16]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	613b      	str	r3, [r7, #16]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006270:	2b00      	cmp	r3, #0
 8006272:	d001      	beq.n	8006278 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e000      	b.n	800627a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006278:	2300      	movs	r3, #0
  }
}
 800627a:	4618      	mov	r0, r3
 800627c:	3728      	adds	r7, #40	@ 0x28
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
	...

08006284 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	603b      	str	r3, [r7, #0]
 8006290:	4613      	mov	r3, r2
 8006292:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006294:	f7fc fe84 	bl	8002fa0 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629c:	1a9b      	subs	r3, r3, r2
 800629e:	683a      	ldr	r2, [r7, #0]
 80062a0:	4413      	add	r3, r2
 80062a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80062a4:	f7fc fe7c 	bl	8002fa0 <HAL_GetTick>
 80062a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80062aa:	4b39      	ldr	r3, [pc, #228]	@ (8006390 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	015b      	lsls	r3, r3, #5
 80062b0:	0d1b      	lsrs	r3, r3, #20
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	fb02 f303 	mul.w	r3, r2, r3
 80062b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80062ba:	e054      	b.n	8006366 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c2:	d050      	beq.n	8006366 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062c4:	f7fc fe6c 	bl	8002fa0 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d902      	bls.n	80062da <SPI_WaitFlagStateUntilTimeout+0x56>
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d13d      	bne.n	8006356 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80062e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062f2:	d111      	bne.n	8006318 <SPI_WaitFlagStateUntilTimeout+0x94>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062fc:	d004      	beq.n	8006308 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006306:	d107      	bne.n	8006318 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006316:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006320:	d10f      	bne.n	8006342 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006340:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2201      	movs	r2, #1
 8006346:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e017      	b.n	8006386 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	3b01      	subs	r3, #1
 8006364:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	4013      	ands	r3, r2
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	429a      	cmp	r2, r3
 8006374:	bf0c      	ite	eq
 8006376:	2301      	moveq	r3, #1
 8006378:	2300      	movne	r3, #0
 800637a:	b2db      	uxtb	r3, r3
 800637c:	461a      	mov	r2, r3
 800637e:	79fb      	ldrb	r3, [r7, #7]
 8006380:	429a      	cmp	r2, r3
 8006382:	d19b      	bne.n	80062bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3720      	adds	r7, #32
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000000 	.word	0x20000000

08006394 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063a8:	d111      	bne.n	80063ce <SPI_EndRxTransaction+0x3a>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063b2:	d004      	beq.n	80063be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063bc:	d107      	bne.n	80063ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063d6:	d12a      	bne.n	800642e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e0:	d012      	beq.n	8006408 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2200      	movs	r2, #0
 80063ea:	2180      	movs	r1, #128	@ 0x80
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f7ff ff49 	bl	8006284 <SPI_WaitFlagStateUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d02d      	beq.n	8006454 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063fc:	f043 0220 	orr.w	r2, r3, #32
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e026      	b.n	8006456 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	9300      	str	r3, [sp, #0]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	2200      	movs	r2, #0
 8006410:	2101      	movs	r1, #1
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f7ff ff36 	bl	8006284 <SPI_WaitFlagStateUntilTimeout>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01a      	beq.n	8006454 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006422:	f043 0220 	orr.w	r2, r3, #32
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e013      	b.n	8006456 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	9300      	str	r3, [sp, #0]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2200      	movs	r2, #0
 8006436:	2101      	movs	r1, #1
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7ff ff23 	bl	8006284 <SPI_WaitFlagStateUntilTimeout>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d007      	beq.n	8006454 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006448:	f043 0220 	orr.w	r2, r3, #32
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e000      	b.n	8006456 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b088      	sub	sp, #32
 8006464:	af02      	add	r7, sp, #8
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2201      	movs	r2, #1
 8006474:	2102      	movs	r1, #2
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f7ff ff04 	bl	8006284 <SPI_WaitFlagStateUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d007      	beq.n	8006492 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006486:	f043 0220 	orr.w	r2, r3, #32
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e032      	b.n	80064f8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006492:	4b1b      	ldr	r3, [pc, #108]	@ (8006500 <SPI_EndRxTxTransaction+0xa0>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a1b      	ldr	r2, [pc, #108]	@ (8006504 <SPI_EndRxTxTransaction+0xa4>)
 8006498:	fba2 2303 	umull	r2, r3, r2, r3
 800649c:	0d5b      	lsrs	r3, r3, #21
 800649e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064a2:	fb02 f303 	mul.w	r3, r2, r3
 80064a6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064b0:	d112      	bne.n	80064d8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2200      	movs	r2, #0
 80064ba:	2180      	movs	r1, #128	@ 0x80
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7ff fee1 	bl	8006284 <SPI_WaitFlagStateUntilTimeout>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d016      	beq.n	80064f6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064cc:	f043 0220 	orr.w	r2, r3, #32
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e00f      	b.n	80064f8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00a      	beq.n	80064f4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	3b01      	subs	r3, #1
 80064e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ee:	2b80      	cmp	r3, #128	@ 0x80
 80064f0:	d0f2      	beq.n	80064d8 <SPI_EndRxTxTransaction+0x78>
 80064f2:	e000      	b.n	80064f6 <SPI_EndRxTxTransaction+0x96>
        break;
 80064f4:	bf00      	nop
  }

  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	20000000 	.word	0x20000000
 8006504:	165e9f81 	.word	0x165e9f81

08006508 <siprintf>:
 8006508:	b40e      	push	{r1, r2, r3}
 800650a:	b510      	push	{r4, lr}
 800650c:	b09d      	sub	sp, #116	@ 0x74
 800650e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006510:	9002      	str	r0, [sp, #8]
 8006512:	9006      	str	r0, [sp, #24]
 8006514:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006518:	480a      	ldr	r0, [pc, #40]	@ (8006544 <siprintf+0x3c>)
 800651a:	9107      	str	r1, [sp, #28]
 800651c:	9104      	str	r1, [sp, #16]
 800651e:	490a      	ldr	r1, [pc, #40]	@ (8006548 <siprintf+0x40>)
 8006520:	f853 2b04 	ldr.w	r2, [r3], #4
 8006524:	9105      	str	r1, [sp, #20]
 8006526:	2400      	movs	r4, #0
 8006528:	a902      	add	r1, sp, #8
 800652a:	6800      	ldr	r0, [r0, #0]
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006530:	f000 f99c 	bl	800686c <_svfiprintf_r>
 8006534:	9b02      	ldr	r3, [sp, #8]
 8006536:	701c      	strb	r4, [r3, #0]
 8006538:	b01d      	add	sp, #116	@ 0x74
 800653a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800653e:	b003      	add	sp, #12
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	2000000c 	.word	0x2000000c
 8006548:	ffff0208 	.word	0xffff0208

0800654c <memset>:
 800654c:	4402      	add	r2, r0
 800654e:	4603      	mov	r3, r0
 8006550:	4293      	cmp	r3, r2
 8006552:	d100      	bne.n	8006556 <memset+0xa>
 8006554:	4770      	bx	lr
 8006556:	f803 1b01 	strb.w	r1, [r3], #1
 800655a:	e7f9      	b.n	8006550 <memset+0x4>

0800655c <__errno>:
 800655c:	4b01      	ldr	r3, [pc, #4]	@ (8006564 <__errno+0x8>)
 800655e:	6818      	ldr	r0, [r3, #0]
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	2000000c 	.word	0x2000000c

08006568 <__libc_init_array>:
 8006568:	b570      	push	{r4, r5, r6, lr}
 800656a:	4d0d      	ldr	r5, [pc, #52]	@ (80065a0 <__libc_init_array+0x38>)
 800656c:	4c0d      	ldr	r4, [pc, #52]	@ (80065a4 <__libc_init_array+0x3c>)
 800656e:	1b64      	subs	r4, r4, r5
 8006570:	10a4      	asrs	r4, r4, #2
 8006572:	2600      	movs	r6, #0
 8006574:	42a6      	cmp	r6, r4
 8006576:	d109      	bne.n	800658c <__libc_init_array+0x24>
 8006578:	4d0b      	ldr	r5, [pc, #44]	@ (80065a8 <__libc_init_array+0x40>)
 800657a:	4c0c      	ldr	r4, [pc, #48]	@ (80065ac <__libc_init_array+0x44>)
 800657c:	f000 fc6c 	bl	8006e58 <_init>
 8006580:	1b64      	subs	r4, r4, r5
 8006582:	10a4      	asrs	r4, r4, #2
 8006584:	2600      	movs	r6, #0
 8006586:	42a6      	cmp	r6, r4
 8006588:	d105      	bne.n	8006596 <__libc_init_array+0x2e>
 800658a:	bd70      	pop	{r4, r5, r6, pc}
 800658c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006590:	4798      	blx	r3
 8006592:	3601      	adds	r6, #1
 8006594:	e7ee      	b.n	8006574 <__libc_init_array+0xc>
 8006596:	f855 3b04 	ldr.w	r3, [r5], #4
 800659a:	4798      	blx	r3
 800659c:	3601      	adds	r6, #1
 800659e:	e7f2      	b.n	8006586 <__libc_init_array+0x1e>
 80065a0:	08007154 	.word	0x08007154
 80065a4:	08007154 	.word	0x08007154
 80065a8:	08007154 	.word	0x08007154
 80065ac:	08007158 	.word	0x08007158

080065b0 <__retarget_lock_acquire_recursive>:
 80065b0:	4770      	bx	lr

080065b2 <__retarget_lock_release_recursive>:
 80065b2:	4770      	bx	lr

080065b4 <strcpy>:
 80065b4:	4603      	mov	r3, r0
 80065b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065ba:	f803 2b01 	strb.w	r2, [r3], #1
 80065be:	2a00      	cmp	r2, #0
 80065c0:	d1f9      	bne.n	80065b6 <strcpy+0x2>
 80065c2:	4770      	bx	lr

080065c4 <_free_r>:
 80065c4:	b538      	push	{r3, r4, r5, lr}
 80065c6:	4605      	mov	r5, r0
 80065c8:	2900      	cmp	r1, #0
 80065ca:	d041      	beq.n	8006650 <_free_r+0x8c>
 80065cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065d0:	1f0c      	subs	r4, r1, #4
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	bfb8      	it	lt
 80065d6:	18e4      	addlt	r4, r4, r3
 80065d8:	f000 f8e0 	bl	800679c <__malloc_lock>
 80065dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006654 <_free_r+0x90>)
 80065de:	6813      	ldr	r3, [r2, #0]
 80065e0:	b933      	cbnz	r3, 80065f0 <_free_r+0x2c>
 80065e2:	6063      	str	r3, [r4, #4]
 80065e4:	6014      	str	r4, [r2, #0]
 80065e6:	4628      	mov	r0, r5
 80065e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065ec:	f000 b8dc 	b.w	80067a8 <__malloc_unlock>
 80065f0:	42a3      	cmp	r3, r4
 80065f2:	d908      	bls.n	8006606 <_free_r+0x42>
 80065f4:	6820      	ldr	r0, [r4, #0]
 80065f6:	1821      	adds	r1, r4, r0
 80065f8:	428b      	cmp	r3, r1
 80065fa:	bf01      	itttt	eq
 80065fc:	6819      	ldreq	r1, [r3, #0]
 80065fe:	685b      	ldreq	r3, [r3, #4]
 8006600:	1809      	addeq	r1, r1, r0
 8006602:	6021      	streq	r1, [r4, #0]
 8006604:	e7ed      	b.n	80065e2 <_free_r+0x1e>
 8006606:	461a      	mov	r2, r3
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	b10b      	cbz	r3, 8006610 <_free_r+0x4c>
 800660c:	42a3      	cmp	r3, r4
 800660e:	d9fa      	bls.n	8006606 <_free_r+0x42>
 8006610:	6811      	ldr	r1, [r2, #0]
 8006612:	1850      	adds	r0, r2, r1
 8006614:	42a0      	cmp	r0, r4
 8006616:	d10b      	bne.n	8006630 <_free_r+0x6c>
 8006618:	6820      	ldr	r0, [r4, #0]
 800661a:	4401      	add	r1, r0
 800661c:	1850      	adds	r0, r2, r1
 800661e:	4283      	cmp	r3, r0
 8006620:	6011      	str	r1, [r2, #0]
 8006622:	d1e0      	bne.n	80065e6 <_free_r+0x22>
 8006624:	6818      	ldr	r0, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	6053      	str	r3, [r2, #4]
 800662a:	4408      	add	r0, r1
 800662c:	6010      	str	r0, [r2, #0]
 800662e:	e7da      	b.n	80065e6 <_free_r+0x22>
 8006630:	d902      	bls.n	8006638 <_free_r+0x74>
 8006632:	230c      	movs	r3, #12
 8006634:	602b      	str	r3, [r5, #0]
 8006636:	e7d6      	b.n	80065e6 <_free_r+0x22>
 8006638:	6820      	ldr	r0, [r4, #0]
 800663a:	1821      	adds	r1, r4, r0
 800663c:	428b      	cmp	r3, r1
 800663e:	bf04      	itt	eq
 8006640:	6819      	ldreq	r1, [r3, #0]
 8006642:	685b      	ldreq	r3, [r3, #4]
 8006644:	6063      	str	r3, [r4, #4]
 8006646:	bf04      	itt	eq
 8006648:	1809      	addeq	r1, r1, r0
 800664a:	6021      	streq	r1, [r4, #0]
 800664c:	6054      	str	r4, [r2, #4]
 800664e:	e7ca      	b.n	80065e6 <_free_r+0x22>
 8006650:	bd38      	pop	{r3, r4, r5, pc}
 8006652:	bf00      	nop
 8006654:	200002b4 	.word	0x200002b4

08006658 <sbrk_aligned>:
 8006658:	b570      	push	{r4, r5, r6, lr}
 800665a:	4e0f      	ldr	r6, [pc, #60]	@ (8006698 <sbrk_aligned+0x40>)
 800665c:	460c      	mov	r4, r1
 800665e:	6831      	ldr	r1, [r6, #0]
 8006660:	4605      	mov	r5, r0
 8006662:	b911      	cbnz	r1, 800666a <sbrk_aligned+0x12>
 8006664:	f000 fba4 	bl	8006db0 <_sbrk_r>
 8006668:	6030      	str	r0, [r6, #0]
 800666a:	4621      	mov	r1, r4
 800666c:	4628      	mov	r0, r5
 800666e:	f000 fb9f 	bl	8006db0 <_sbrk_r>
 8006672:	1c43      	adds	r3, r0, #1
 8006674:	d103      	bne.n	800667e <sbrk_aligned+0x26>
 8006676:	f04f 34ff 	mov.w	r4, #4294967295
 800667a:	4620      	mov	r0, r4
 800667c:	bd70      	pop	{r4, r5, r6, pc}
 800667e:	1cc4      	adds	r4, r0, #3
 8006680:	f024 0403 	bic.w	r4, r4, #3
 8006684:	42a0      	cmp	r0, r4
 8006686:	d0f8      	beq.n	800667a <sbrk_aligned+0x22>
 8006688:	1a21      	subs	r1, r4, r0
 800668a:	4628      	mov	r0, r5
 800668c:	f000 fb90 	bl	8006db0 <_sbrk_r>
 8006690:	3001      	adds	r0, #1
 8006692:	d1f2      	bne.n	800667a <sbrk_aligned+0x22>
 8006694:	e7ef      	b.n	8006676 <sbrk_aligned+0x1e>
 8006696:	bf00      	nop
 8006698:	200002b0 	.word	0x200002b0

0800669c <_malloc_r>:
 800669c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066a0:	1ccd      	adds	r5, r1, #3
 80066a2:	f025 0503 	bic.w	r5, r5, #3
 80066a6:	3508      	adds	r5, #8
 80066a8:	2d0c      	cmp	r5, #12
 80066aa:	bf38      	it	cc
 80066ac:	250c      	movcc	r5, #12
 80066ae:	2d00      	cmp	r5, #0
 80066b0:	4606      	mov	r6, r0
 80066b2:	db01      	blt.n	80066b8 <_malloc_r+0x1c>
 80066b4:	42a9      	cmp	r1, r5
 80066b6:	d904      	bls.n	80066c2 <_malloc_r+0x26>
 80066b8:	230c      	movs	r3, #12
 80066ba:	6033      	str	r3, [r6, #0]
 80066bc:	2000      	movs	r0, #0
 80066be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006798 <_malloc_r+0xfc>
 80066c6:	f000 f869 	bl	800679c <__malloc_lock>
 80066ca:	f8d8 3000 	ldr.w	r3, [r8]
 80066ce:	461c      	mov	r4, r3
 80066d0:	bb44      	cbnz	r4, 8006724 <_malloc_r+0x88>
 80066d2:	4629      	mov	r1, r5
 80066d4:	4630      	mov	r0, r6
 80066d6:	f7ff ffbf 	bl	8006658 <sbrk_aligned>
 80066da:	1c43      	adds	r3, r0, #1
 80066dc:	4604      	mov	r4, r0
 80066de:	d158      	bne.n	8006792 <_malloc_r+0xf6>
 80066e0:	f8d8 4000 	ldr.w	r4, [r8]
 80066e4:	4627      	mov	r7, r4
 80066e6:	2f00      	cmp	r7, #0
 80066e8:	d143      	bne.n	8006772 <_malloc_r+0xd6>
 80066ea:	2c00      	cmp	r4, #0
 80066ec:	d04b      	beq.n	8006786 <_malloc_r+0xea>
 80066ee:	6823      	ldr	r3, [r4, #0]
 80066f0:	4639      	mov	r1, r7
 80066f2:	4630      	mov	r0, r6
 80066f4:	eb04 0903 	add.w	r9, r4, r3
 80066f8:	f000 fb5a 	bl	8006db0 <_sbrk_r>
 80066fc:	4581      	cmp	r9, r0
 80066fe:	d142      	bne.n	8006786 <_malloc_r+0xea>
 8006700:	6821      	ldr	r1, [r4, #0]
 8006702:	1a6d      	subs	r5, r5, r1
 8006704:	4629      	mov	r1, r5
 8006706:	4630      	mov	r0, r6
 8006708:	f7ff ffa6 	bl	8006658 <sbrk_aligned>
 800670c:	3001      	adds	r0, #1
 800670e:	d03a      	beq.n	8006786 <_malloc_r+0xea>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	442b      	add	r3, r5
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	f8d8 3000 	ldr.w	r3, [r8]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	bb62      	cbnz	r2, 8006778 <_malloc_r+0xdc>
 800671e:	f8c8 7000 	str.w	r7, [r8]
 8006722:	e00f      	b.n	8006744 <_malloc_r+0xa8>
 8006724:	6822      	ldr	r2, [r4, #0]
 8006726:	1b52      	subs	r2, r2, r5
 8006728:	d420      	bmi.n	800676c <_malloc_r+0xd0>
 800672a:	2a0b      	cmp	r2, #11
 800672c:	d917      	bls.n	800675e <_malloc_r+0xc2>
 800672e:	1961      	adds	r1, r4, r5
 8006730:	42a3      	cmp	r3, r4
 8006732:	6025      	str	r5, [r4, #0]
 8006734:	bf18      	it	ne
 8006736:	6059      	strne	r1, [r3, #4]
 8006738:	6863      	ldr	r3, [r4, #4]
 800673a:	bf08      	it	eq
 800673c:	f8c8 1000 	streq.w	r1, [r8]
 8006740:	5162      	str	r2, [r4, r5]
 8006742:	604b      	str	r3, [r1, #4]
 8006744:	4630      	mov	r0, r6
 8006746:	f000 f82f 	bl	80067a8 <__malloc_unlock>
 800674a:	f104 000b 	add.w	r0, r4, #11
 800674e:	1d23      	adds	r3, r4, #4
 8006750:	f020 0007 	bic.w	r0, r0, #7
 8006754:	1ac2      	subs	r2, r0, r3
 8006756:	bf1c      	itt	ne
 8006758:	1a1b      	subne	r3, r3, r0
 800675a:	50a3      	strne	r3, [r4, r2]
 800675c:	e7af      	b.n	80066be <_malloc_r+0x22>
 800675e:	6862      	ldr	r2, [r4, #4]
 8006760:	42a3      	cmp	r3, r4
 8006762:	bf0c      	ite	eq
 8006764:	f8c8 2000 	streq.w	r2, [r8]
 8006768:	605a      	strne	r2, [r3, #4]
 800676a:	e7eb      	b.n	8006744 <_malloc_r+0xa8>
 800676c:	4623      	mov	r3, r4
 800676e:	6864      	ldr	r4, [r4, #4]
 8006770:	e7ae      	b.n	80066d0 <_malloc_r+0x34>
 8006772:	463c      	mov	r4, r7
 8006774:	687f      	ldr	r7, [r7, #4]
 8006776:	e7b6      	b.n	80066e6 <_malloc_r+0x4a>
 8006778:	461a      	mov	r2, r3
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	42a3      	cmp	r3, r4
 800677e:	d1fb      	bne.n	8006778 <_malloc_r+0xdc>
 8006780:	2300      	movs	r3, #0
 8006782:	6053      	str	r3, [r2, #4]
 8006784:	e7de      	b.n	8006744 <_malloc_r+0xa8>
 8006786:	230c      	movs	r3, #12
 8006788:	6033      	str	r3, [r6, #0]
 800678a:	4630      	mov	r0, r6
 800678c:	f000 f80c 	bl	80067a8 <__malloc_unlock>
 8006790:	e794      	b.n	80066bc <_malloc_r+0x20>
 8006792:	6005      	str	r5, [r0, #0]
 8006794:	e7d6      	b.n	8006744 <_malloc_r+0xa8>
 8006796:	bf00      	nop
 8006798:	200002b4 	.word	0x200002b4

0800679c <__malloc_lock>:
 800679c:	4801      	ldr	r0, [pc, #4]	@ (80067a4 <__malloc_lock+0x8>)
 800679e:	f7ff bf07 	b.w	80065b0 <__retarget_lock_acquire_recursive>
 80067a2:	bf00      	nop
 80067a4:	200002ac 	.word	0x200002ac

080067a8 <__malloc_unlock>:
 80067a8:	4801      	ldr	r0, [pc, #4]	@ (80067b0 <__malloc_unlock+0x8>)
 80067aa:	f7ff bf02 	b.w	80065b2 <__retarget_lock_release_recursive>
 80067ae:	bf00      	nop
 80067b0:	200002ac 	.word	0x200002ac

080067b4 <__ssputs_r>:
 80067b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067b8:	688e      	ldr	r6, [r1, #8]
 80067ba:	461f      	mov	r7, r3
 80067bc:	42be      	cmp	r6, r7
 80067be:	680b      	ldr	r3, [r1, #0]
 80067c0:	4682      	mov	sl, r0
 80067c2:	460c      	mov	r4, r1
 80067c4:	4690      	mov	r8, r2
 80067c6:	d82d      	bhi.n	8006824 <__ssputs_r+0x70>
 80067c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80067cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80067d0:	d026      	beq.n	8006820 <__ssputs_r+0x6c>
 80067d2:	6965      	ldr	r5, [r4, #20]
 80067d4:	6909      	ldr	r1, [r1, #16]
 80067d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067da:	eba3 0901 	sub.w	r9, r3, r1
 80067de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067e2:	1c7b      	adds	r3, r7, #1
 80067e4:	444b      	add	r3, r9
 80067e6:	106d      	asrs	r5, r5, #1
 80067e8:	429d      	cmp	r5, r3
 80067ea:	bf38      	it	cc
 80067ec:	461d      	movcc	r5, r3
 80067ee:	0553      	lsls	r3, r2, #21
 80067f0:	d527      	bpl.n	8006842 <__ssputs_r+0x8e>
 80067f2:	4629      	mov	r1, r5
 80067f4:	f7ff ff52 	bl	800669c <_malloc_r>
 80067f8:	4606      	mov	r6, r0
 80067fa:	b360      	cbz	r0, 8006856 <__ssputs_r+0xa2>
 80067fc:	6921      	ldr	r1, [r4, #16]
 80067fe:	464a      	mov	r2, r9
 8006800:	f000 fae6 	bl	8006dd0 <memcpy>
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800680a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800680e:	81a3      	strh	r3, [r4, #12]
 8006810:	6126      	str	r6, [r4, #16]
 8006812:	6165      	str	r5, [r4, #20]
 8006814:	444e      	add	r6, r9
 8006816:	eba5 0509 	sub.w	r5, r5, r9
 800681a:	6026      	str	r6, [r4, #0]
 800681c:	60a5      	str	r5, [r4, #8]
 800681e:	463e      	mov	r6, r7
 8006820:	42be      	cmp	r6, r7
 8006822:	d900      	bls.n	8006826 <__ssputs_r+0x72>
 8006824:	463e      	mov	r6, r7
 8006826:	6820      	ldr	r0, [r4, #0]
 8006828:	4632      	mov	r2, r6
 800682a:	4641      	mov	r1, r8
 800682c:	f000 faa6 	bl	8006d7c <memmove>
 8006830:	68a3      	ldr	r3, [r4, #8]
 8006832:	1b9b      	subs	r3, r3, r6
 8006834:	60a3      	str	r3, [r4, #8]
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	4433      	add	r3, r6
 800683a:	6023      	str	r3, [r4, #0]
 800683c:	2000      	movs	r0, #0
 800683e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006842:	462a      	mov	r2, r5
 8006844:	f000 fad2 	bl	8006dec <_realloc_r>
 8006848:	4606      	mov	r6, r0
 800684a:	2800      	cmp	r0, #0
 800684c:	d1e0      	bne.n	8006810 <__ssputs_r+0x5c>
 800684e:	6921      	ldr	r1, [r4, #16]
 8006850:	4650      	mov	r0, sl
 8006852:	f7ff feb7 	bl	80065c4 <_free_r>
 8006856:	230c      	movs	r3, #12
 8006858:	f8ca 3000 	str.w	r3, [sl]
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006862:	81a3      	strh	r3, [r4, #12]
 8006864:	f04f 30ff 	mov.w	r0, #4294967295
 8006868:	e7e9      	b.n	800683e <__ssputs_r+0x8a>
	...

0800686c <_svfiprintf_r>:
 800686c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006870:	4698      	mov	r8, r3
 8006872:	898b      	ldrh	r3, [r1, #12]
 8006874:	061b      	lsls	r3, r3, #24
 8006876:	b09d      	sub	sp, #116	@ 0x74
 8006878:	4607      	mov	r7, r0
 800687a:	460d      	mov	r5, r1
 800687c:	4614      	mov	r4, r2
 800687e:	d510      	bpl.n	80068a2 <_svfiprintf_r+0x36>
 8006880:	690b      	ldr	r3, [r1, #16]
 8006882:	b973      	cbnz	r3, 80068a2 <_svfiprintf_r+0x36>
 8006884:	2140      	movs	r1, #64	@ 0x40
 8006886:	f7ff ff09 	bl	800669c <_malloc_r>
 800688a:	6028      	str	r0, [r5, #0]
 800688c:	6128      	str	r0, [r5, #16]
 800688e:	b930      	cbnz	r0, 800689e <_svfiprintf_r+0x32>
 8006890:	230c      	movs	r3, #12
 8006892:	603b      	str	r3, [r7, #0]
 8006894:	f04f 30ff 	mov.w	r0, #4294967295
 8006898:	b01d      	add	sp, #116	@ 0x74
 800689a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689e:	2340      	movs	r3, #64	@ 0x40
 80068a0:	616b      	str	r3, [r5, #20]
 80068a2:	2300      	movs	r3, #0
 80068a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80068a6:	2320      	movs	r3, #32
 80068a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80068ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80068b0:	2330      	movs	r3, #48	@ 0x30
 80068b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006a50 <_svfiprintf_r+0x1e4>
 80068b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80068ba:	f04f 0901 	mov.w	r9, #1
 80068be:	4623      	mov	r3, r4
 80068c0:	469a      	mov	sl, r3
 80068c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068c6:	b10a      	cbz	r2, 80068cc <_svfiprintf_r+0x60>
 80068c8:	2a25      	cmp	r2, #37	@ 0x25
 80068ca:	d1f9      	bne.n	80068c0 <_svfiprintf_r+0x54>
 80068cc:	ebba 0b04 	subs.w	fp, sl, r4
 80068d0:	d00b      	beq.n	80068ea <_svfiprintf_r+0x7e>
 80068d2:	465b      	mov	r3, fp
 80068d4:	4622      	mov	r2, r4
 80068d6:	4629      	mov	r1, r5
 80068d8:	4638      	mov	r0, r7
 80068da:	f7ff ff6b 	bl	80067b4 <__ssputs_r>
 80068de:	3001      	adds	r0, #1
 80068e0:	f000 80a7 	beq.w	8006a32 <_svfiprintf_r+0x1c6>
 80068e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068e6:	445a      	add	r2, fp
 80068e8:	9209      	str	r2, [sp, #36]	@ 0x24
 80068ea:	f89a 3000 	ldrb.w	r3, [sl]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f000 809f 	beq.w	8006a32 <_svfiprintf_r+0x1c6>
 80068f4:	2300      	movs	r3, #0
 80068f6:	f04f 32ff 	mov.w	r2, #4294967295
 80068fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068fe:	f10a 0a01 	add.w	sl, sl, #1
 8006902:	9304      	str	r3, [sp, #16]
 8006904:	9307      	str	r3, [sp, #28]
 8006906:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800690a:	931a      	str	r3, [sp, #104]	@ 0x68
 800690c:	4654      	mov	r4, sl
 800690e:	2205      	movs	r2, #5
 8006910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006914:	484e      	ldr	r0, [pc, #312]	@ (8006a50 <_svfiprintf_r+0x1e4>)
 8006916:	f7f9 fc73 	bl	8000200 <memchr>
 800691a:	9a04      	ldr	r2, [sp, #16]
 800691c:	b9d8      	cbnz	r0, 8006956 <_svfiprintf_r+0xea>
 800691e:	06d0      	lsls	r0, r2, #27
 8006920:	bf44      	itt	mi
 8006922:	2320      	movmi	r3, #32
 8006924:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006928:	0711      	lsls	r1, r2, #28
 800692a:	bf44      	itt	mi
 800692c:	232b      	movmi	r3, #43	@ 0x2b
 800692e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006932:	f89a 3000 	ldrb.w	r3, [sl]
 8006936:	2b2a      	cmp	r3, #42	@ 0x2a
 8006938:	d015      	beq.n	8006966 <_svfiprintf_r+0xfa>
 800693a:	9a07      	ldr	r2, [sp, #28]
 800693c:	4654      	mov	r4, sl
 800693e:	2000      	movs	r0, #0
 8006940:	f04f 0c0a 	mov.w	ip, #10
 8006944:	4621      	mov	r1, r4
 8006946:	f811 3b01 	ldrb.w	r3, [r1], #1
 800694a:	3b30      	subs	r3, #48	@ 0x30
 800694c:	2b09      	cmp	r3, #9
 800694e:	d94b      	bls.n	80069e8 <_svfiprintf_r+0x17c>
 8006950:	b1b0      	cbz	r0, 8006980 <_svfiprintf_r+0x114>
 8006952:	9207      	str	r2, [sp, #28]
 8006954:	e014      	b.n	8006980 <_svfiprintf_r+0x114>
 8006956:	eba0 0308 	sub.w	r3, r0, r8
 800695a:	fa09 f303 	lsl.w	r3, r9, r3
 800695e:	4313      	orrs	r3, r2
 8006960:	9304      	str	r3, [sp, #16]
 8006962:	46a2      	mov	sl, r4
 8006964:	e7d2      	b.n	800690c <_svfiprintf_r+0xa0>
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	1d19      	adds	r1, r3, #4
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	9103      	str	r1, [sp, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	bfbb      	ittet	lt
 8006972:	425b      	neglt	r3, r3
 8006974:	f042 0202 	orrlt.w	r2, r2, #2
 8006978:	9307      	strge	r3, [sp, #28]
 800697a:	9307      	strlt	r3, [sp, #28]
 800697c:	bfb8      	it	lt
 800697e:	9204      	strlt	r2, [sp, #16]
 8006980:	7823      	ldrb	r3, [r4, #0]
 8006982:	2b2e      	cmp	r3, #46	@ 0x2e
 8006984:	d10a      	bne.n	800699c <_svfiprintf_r+0x130>
 8006986:	7863      	ldrb	r3, [r4, #1]
 8006988:	2b2a      	cmp	r3, #42	@ 0x2a
 800698a:	d132      	bne.n	80069f2 <_svfiprintf_r+0x186>
 800698c:	9b03      	ldr	r3, [sp, #12]
 800698e:	1d1a      	adds	r2, r3, #4
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	9203      	str	r2, [sp, #12]
 8006994:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006998:	3402      	adds	r4, #2
 800699a:	9305      	str	r3, [sp, #20]
 800699c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006a60 <_svfiprintf_r+0x1f4>
 80069a0:	7821      	ldrb	r1, [r4, #0]
 80069a2:	2203      	movs	r2, #3
 80069a4:	4650      	mov	r0, sl
 80069a6:	f7f9 fc2b 	bl	8000200 <memchr>
 80069aa:	b138      	cbz	r0, 80069bc <_svfiprintf_r+0x150>
 80069ac:	9b04      	ldr	r3, [sp, #16]
 80069ae:	eba0 000a 	sub.w	r0, r0, sl
 80069b2:	2240      	movs	r2, #64	@ 0x40
 80069b4:	4082      	lsls	r2, r0
 80069b6:	4313      	orrs	r3, r2
 80069b8:	3401      	adds	r4, #1
 80069ba:	9304      	str	r3, [sp, #16]
 80069bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069c0:	4824      	ldr	r0, [pc, #144]	@ (8006a54 <_svfiprintf_r+0x1e8>)
 80069c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80069c6:	2206      	movs	r2, #6
 80069c8:	f7f9 fc1a 	bl	8000200 <memchr>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d036      	beq.n	8006a3e <_svfiprintf_r+0x1d2>
 80069d0:	4b21      	ldr	r3, [pc, #132]	@ (8006a58 <_svfiprintf_r+0x1ec>)
 80069d2:	bb1b      	cbnz	r3, 8006a1c <_svfiprintf_r+0x1b0>
 80069d4:	9b03      	ldr	r3, [sp, #12]
 80069d6:	3307      	adds	r3, #7
 80069d8:	f023 0307 	bic.w	r3, r3, #7
 80069dc:	3308      	adds	r3, #8
 80069de:	9303      	str	r3, [sp, #12]
 80069e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e2:	4433      	add	r3, r6
 80069e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069e6:	e76a      	b.n	80068be <_svfiprintf_r+0x52>
 80069e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80069ec:	460c      	mov	r4, r1
 80069ee:	2001      	movs	r0, #1
 80069f0:	e7a8      	b.n	8006944 <_svfiprintf_r+0xd8>
 80069f2:	2300      	movs	r3, #0
 80069f4:	3401      	adds	r4, #1
 80069f6:	9305      	str	r3, [sp, #20]
 80069f8:	4619      	mov	r1, r3
 80069fa:	f04f 0c0a 	mov.w	ip, #10
 80069fe:	4620      	mov	r0, r4
 8006a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a04:	3a30      	subs	r2, #48	@ 0x30
 8006a06:	2a09      	cmp	r2, #9
 8006a08:	d903      	bls.n	8006a12 <_svfiprintf_r+0x1a6>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d0c6      	beq.n	800699c <_svfiprintf_r+0x130>
 8006a0e:	9105      	str	r1, [sp, #20]
 8006a10:	e7c4      	b.n	800699c <_svfiprintf_r+0x130>
 8006a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a16:	4604      	mov	r4, r0
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e7f0      	b.n	80069fe <_svfiprintf_r+0x192>
 8006a1c:	ab03      	add	r3, sp, #12
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	462a      	mov	r2, r5
 8006a22:	4b0e      	ldr	r3, [pc, #56]	@ (8006a5c <_svfiprintf_r+0x1f0>)
 8006a24:	a904      	add	r1, sp, #16
 8006a26:	4638      	mov	r0, r7
 8006a28:	f3af 8000 	nop.w
 8006a2c:	1c42      	adds	r2, r0, #1
 8006a2e:	4606      	mov	r6, r0
 8006a30:	d1d6      	bne.n	80069e0 <_svfiprintf_r+0x174>
 8006a32:	89ab      	ldrh	r3, [r5, #12]
 8006a34:	065b      	lsls	r3, r3, #25
 8006a36:	f53f af2d 	bmi.w	8006894 <_svfiprintf_r+0x28>
 8006a3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a3c:	e72c      	b.n	8006898 <_svfiprintf_r+0x2c>
 8006a3e:	ab03      	add	r3, sp, #12
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	462a      	mov	r2, r5
 8006a44:	4b05      	ldr	r3, [pc, #20]	@ (8006a5c <_svfiprintf_r+0x1f0>)
 8006a46:	a904      	add	r1, sp, #16
 8006a48:	4638      	mov	r0, r7
 8006a4a:	f000 f879 	bl	8006b40 <_printf_i>
 8006a4e:	e7ed      	b.n	8006a2c <_svfiprintf_r+0x1c0>
 8006a50:	08007118 	.word	0x08007118
 8006a54:	08007122 	.word	0x08007122
 8006a58:	00000000 	.word	0x00000000
 8006a5c:	080067b5 	.word	0x080067b5
 8006a60:	0800711e 	.word	0x0800711e

08006a64 <_printf_common>:
 8006a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a68:	4616      	mov	r6, r2
 8006a6a:	4698      	mov	r8, r3
 8006a6c:	688a      	ldr	r2, [r1, #8]
 8006a6e:	690b      	ldr	r3, [r1, #16]
 8006a70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a74:	4293      	cmp	r3, r2
 8006a76:	bfb8      	it	lt
 8006a78:	4613      	movlt	r3, r2
 8006a7a:	6033      	str	r3, [r6, #0]
 8006a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a80:	4607      	mov	r7, r0
 8006a82:	460c      	mov	r4, r1
 8006a84:	b10a      	cbz	r2, 8006a8a <_printf_common+0x26>
 8006a86:	3301      	adds	r3, #1
 8006a88:	6033      	str	r3, [r6, #0]
 8006a8a:	6823      	ldr	r3, [r4, #0]
 8006a8c:	0699      	lsls	r1, r3, #26
 8006a8e:	bf42      	ittt	mi
 8006a90:	6833      	ldrmi	r3, [r6, #0]
 8006a92:	3302      	addmi	r3, #2
 8006a94:	6033      	strmi	r3, [r6, #0]
 8006a96:	6825      	ldr	r5, [r4, #0]
 8006a98:	f015 0506 	ands.w	r5, r5, #6
 8006a9c:	d106      	bne.n	8006aac <_printf_common+0x48>
 8006a9e:	f104 0a19 	add.w	sl, r4, #25
 8006aa2:	68e3      	ldr	r3, [r4, #12]
 8006aa4:	6832      	ldr	r2, [r6, #0]
 8006aa6:	1a9b      	subs	r3, r3, r2
 8006aa8:	42ab      	cmp	r3, r5
 8006aaa:	dc26      	bgt.n	8006afa <_printf_common+0x96>
 8006aac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ab0:	6822      	ldr	r2, [r4, #0]
 8006ab2:	3b00      	subs	r3, #0
 8006ab4:	bf18      	it	ne
 8006ab6:	2301      	movne	r3, #1
 8006ab8:	0692      	lsls	r2, r2, #26
 8006aba:	d42b      	bmi.n	8006b14 <_printf_common+0xb0>
 8006abc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ac0:	4641      	mov	r1, r8
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	47c8      	blx	r9
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d01e      	beq.n	8006b08 <_printf_common+0xa4>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	6922      	ldr	r2, [r4, #16]
 8006ace:	f003 0306 	and.w	r3, r3, #6
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	bf02      	ittt	eq
 8006ad6:	68e5      	ldreq	r5, [r4, #12]
 8006ad8:	6833      	ldreq	r3, [r6, #0]
 8006ada:	1aed      	subeq	r5, r5, r3
 8006adc:	68a3      	ldr	r3, [r4, #8]
 8006ade:	bf0c      	ite	eq
 8006ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ae4:	2500      	movne	r5, #0
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	bfc4      	itt	gt
 8006aea:	1a9b      	subgt	r3, r3, r2
 8006aec:	18ed      	addgt	r5, r5, r3
 8006aee:	2600      	movs	r6, #0
 8006af0:	341a      	adds	r4, #26
 8006af2:	42b5      	cmp	r5, r6
 8006af4:	d11a      	bne.n	8006b2c <_printf_common+0xc8>
 8006af6:	2000      	movs	r0, #0
 8006af8:	e008      	b.n	8006b0c <_printf_common+0xa8>
 8006afa:	2301      	movs	r3, #1
 8006afc:	4652      	mov	r2, sl
 8006afe:	4641      	mov	r1, r8
 8006b00:	4638      	mov	r0, r7
 8006b02:	47c8      	blx	r9
 8006b04:	3001      	adds	r0, #1
 8006b06:	d103      	bne.n	8006b10 <_printf_common+0xac>
 8006b08:	f04f 30ff 	mov.w	r0, #4294967295
 8006b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b10:	3501      	adds	r5, #1
 8006b12:	e7c6      	b.n	8006aa2 <_printf_common+0x3e>
 8006b14:	18e1      	adds	r1, r4, r3
 8006b16:	1c5a      	adds	r2, r3, #1
 8006b18:	2030      	movs	r0, #48	@ 0x30
 8006b1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b1e:	4422      	add	r2, r4
 8006b20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b28:	3302      	adds	r3, #2
 8006b2a:	e7c7      	b.n	8006abc <_printf_common+0x58>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	4622      	mov	r2, r4
 8006b30:	4641      	mov	r1, r8
 8006b32:	4638      	mov	r0, r7
 8006b34:	47c8      	blx	r9
 8006b36:	3001      	adds	r0, #1
 8006b38:	d0e6      	beq.n	8006b08 <_printf_common+0xa4>
 8006b3a:	3601      	adds	r6, #1
 8006b3c:	e7d9      	b.n	8006af2 <_printf_common+0x8e>
	...

08006b40 <_printf_i>:
 8006b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b44:	7e0f      	ldrb	r7, [r1, #24]
 8006b46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006b48:	2f78      	cmp	r7, #120	@ 0x78
 8006b4a:	4691      	mov	r9, r2
 8006b4c:	4680      	mov	r8, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	469a      	mov	sl, r3
 8006b52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b56:	d807      	bhi.n	8006b68 <_printf_i+0x28>
 8006b58:	2f62      	cmp	r7, #98	@ 0x62
 8006b5a:	d80a      	bhi.n	8006b72 <_printf_i+0x32>
 8006b5c:	2f00      	cmp	r7, #0
 8006b5e:	f000 80d1 	beq.w	8006d04 <_printf_i+0x1c4>
 8006b62:	2f58      	cmp	r7, #88	@ 0x58
 8006b64:	f000 80b8 	beq.w	8006cd8 <_printf_i+0x198>
 8006b68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b70:	e03a      	b.n	8006be8 <_printf_i+0xa8>
 8006b72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b76:	2b15      	cmp	r3, #21
 8006b78:	d8f6      	bhi.n	8006b68 <_printf_i+0x28>
 8006b7a:	a101      	add	r1, pc, #4	@ (adr r1, 8006b80 <_printf_i+0x40>)
 8006b7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b80:	08006bd9 	.word	0x08006bd9
 8006b84:	08006bed 	.word	0x08006bed
 8006b88:	08006b69 	.word	0x08006b69
 8006b8c:	08006b69 	.word	0x08006b69
 8006b90:	08006b69 	.word	0x08006b69
 8006b94:	08006b69 	.word	0x08006b69
 8006b98:	08006bed 	.word	0x08006bed
 8006b9c:	08006b69 	.word	0x08006b69
 8006ba0:	08006b69 	.word	0x08006b69
 8006ba4:	08006b69 	.word	0x08006b69
 8006ba8:	08006b69 	.word	0x08006b69
 8006bac:	08006ceb 	.word	0x08006ceb
 8006bb0:	08006c17 	.word	0x08006c17
 8006bb4:	08006ca5 	.word	0x08006ca5
 8006bb8:	08006b69 	.word	0x08006b69
 8006bbc:	08006b69 	.word	0x08006b69
 8006bc0:	08006d0d 	.word	0x08006d0d
 8006bc4:	08006b69 	.word	0x08006b69
 8006bc8:	08006c17 	.word	0x08006c17
 8006bcc:	08006b69 	.word	0x08006b69
 8006bd0:	08006b69 	.word	0x08006b69
 8006bd4:	08006cad 	.word	0x08006cad
 8006bd8:	6833      	ldr	r3, [r6, #0]
 8006bda:	1d1a      	adds	r2, r3, #4
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	6032      	str	r2, [r6, #0]
 8006be0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006be4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006be8:	2301      	movs	r3, #1
 8006bea:	e09c      	b.n	8006d26 <_printf_i+0x1e6>
 8006bec:	6833      	ldr	r3, [r6, #0]
 8006bee:	6820      	ldr	r0, [r4, #0]
 8006bf0:	1d19      	adds	r1, r3, #4
 8006bf2:	6031      	str	r1, [r6, #0]
 8006bf4:	0606      	lsls	r6, r0, #24
 8006bf6:	d501      	bpl.n	8006bfc <_printf_i+0xbc>
 8006bf8:	681d      	ldr	r5, [r3, #0]
 8006bfa:	e003      	b.n	8006c04 <_printf_i+0xc4>
 8006bfc:	0645      	lsls	r5, r0, #25
 8006bfe:	d5fb      	bpl.n	8006bf8 <_printf_i+0xb8>
 8006c00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c04:	2d00      	cmp	r5, #0
 8006c06:	da03      	bge.n	8006c10 <_printf_i+0xd0>
 8006c08:	232d      	movs	r3, #45	@ 0x2d
 8006c0a:	426d      	negs	r5, r5
 8006c0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c10:	4858      	ldr	r0, [pc, #352]	@ (8006d74 <_printf_i+0x234>)
 8006c12:	230a      	movs	r3, #10
 8006c14:	e011      	b.n	8006c3a <_printf_i+0xfa>
 8006c16:	6821      	ldr	r1, [r4, #0]
 8006c18:	6833      	ldr	r3, [r6, #0]
 8006c1a:	0608      	lsls	r0, r1, #24
 8006c1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c20:	d402      	bmi.n	8006c28 <_printf_i+0xe8>
 8006c22:	0649      	lsls	r1, r1, #25
 8006c24:	bf48      	it	mi
 8006c26:	b2ad      	uxthmi	r5, r5
 8006c28:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c2a:	4852      	ldr	r0, [pc, #328]	@ (8006d74 <_printf_i+0x234>)
 8006c2c:	6033      	str	r3, [r6, #0]
 8006c2e:	bf14      	ite	ne
 8006c30:	230a      	movne	r3, #10
 8006c32:	2308      	moveq	r3, #8
 8006c34:	2100      	movs	r1, #0
 8006c36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006c3a:	6866      	ldr	r6, [r4, #4]
 8006c3c:	60a6      	str	r6, [r4, #8]
 8006c3e:	2e00      	cmp	r6, #0
 8006c40:	db05      	blt.n	8006c4e <_printf_i+0x10e>
 8006c42:	6821      	ldr	r1, [r4, #0]
 8006c44:	432e      	orrs	r6, r5
 8006c46:	f021 0104 	bic.w	r1, r1, #4
 8006c4a:	6021      	str	r1, [r4, #0]
 8006c4c:	d04b      	beq.n	8006ce6 <_printf_i+0x1a6>
 8006c4e:	4616      	mov	r6, r2
 8006c50:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c54:	fb03 5711 	mls	r7, r3, r1, r5
 8006c58:	5dc7      	ldrb	r7, [r0, r7]
 8006c5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c5e:	462f      	mov	r7, r5
 8006c60:	42bb      	cmp	r3, r7
 8006c62:	460d      	mov	r5, r1
 8006c64:	d9f4      	bls.n	8006c50 <_printf_i+0x110>
 8006c66:	2b08      	cmp	r3, #8
 8006c68:	d10b      	bne.n	8006c82 <_printf_i+0x142>
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	07df      	lsls	r7, r3, #31
 8006c6e:	d508      	bpl.n	8006c82 <_printf_i+0x142>
 8006c70:	6923      	ldr	r3, [r4, #16]
 8006c72:	6861      	ldr	r1, [r4, #4]
 8006c74:	4299      	cmp	r1, r3
 8006c76:	bfde      	ittt	le
 8006c78:	2330      	movle	r3, #48	@ 0x30
 8006c7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c82:	1b92      	subs	r2, r2, r6
 8006c84:	6122      	str	r2, [r4, #16]
 8006c86:	f8cd a000 	str.w	sl, [sp]
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	aa03      	add	r2, sp, #12
 8006c8e:	4621      	mov	r1, r4
 8006c90:	4640      	mov	r0, r8
 8006c92:	f7ff fee7 	bl	8006a64 <_printf_common>
 8006c96:	3001      	adds	r0, #1
 8006c98:	d14a      	bne.n	8006d30 <_printf_i+0x1f0>
 8006c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c9e:	b004      	add	sp, #16
 8006ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	f043 0320 	orr.w	r3, r3, #32
 8006caa:	6023      	str	r3, [r4, #0]
 8006cac:	4832      	ldr	r0, [pc, #200]	@ (8006d78 <_printf_i+0x238>)
 8006cae:	2778      	movs	r7, #120	@ 0x78
 8006cb0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	6831      	ldr	r1, [r6, #0]
 8006cb8:	061f      	lsls	r7, r3, #24
 8006cba:	f851 5b04 	ldr.w	r5, [r1], #4
 8006cbe:	d402      	bmi.n	8006cc6 <_printf_i+0x186>
 8006cc0:	065f      	lsls	r7, r3, #25
 8006cc2:	bf48      	it	mi
 8006cc4:	b2ad      	uxthmi	r5, r5
 8006cc6:	6031      	str	r1, [r6, #0]
 8006cc8:	07d9      	lsls	r1, r3, #31
 8006cca:	bf44      	itt	mi
 8006ccc:	f043 0320 	orrmi.w	r3, r3, #32
 8006cd0:	6023      	strmi	r3, [r4, #0]
 8006cd2:	b11d      	cbz	r5, 8006cdc <_printf_i+0x19c>
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	e7ad      	b.n	8006c34 <_printf_i+0xf4>
 8006cd8:	4826      	ldr	r0, [pc, #152]	@ (8006d74 <_printf_i+0x234>)
 8006cda:	e7e9      	b.n	8006cb0 <_printf_i+0x170>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	f023 0320 	bic.w	r3, r3, #32
 8006ce2:	6023      	str	r3, [r4, #0]
 8006ce4:	e7f6      	b.n	8006cd4 <_printf_i+0x194>
 8006ce6:	4616      	mov	r6, r2
 8006ce8:	e7bd      	b.n	8006c66 <_printf_i+0x126>
 8006cea:	6833      	ldr	r3, [r6, #0]
 8006cec:	6825      	ldr	r5, [r4, #0]
 8006cee:	6961      	ldr	r1, [r4, #20]
 8006cf0:	1d18      	adds	r0, r3, #4
 8006cf2:	6030      	str	r0, [r6, #0]
 8006cf4:	062e      	lsls	r6, r5, #24
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	d501      	bpl.n	8006cfe <_printf_i+0x1be>
 8006cfa:	6019      	str	r1, [r3, #0]
 8006cfc:	e002      	b.n	8006d04 <_printf_i+0x1c4>
 8006cfe:	0668      	lsls	r0, r5, #25
 8006d00:	d5fb      	bpl.n	8006cfa <_printf_i+0x1ba>
 8006d02:	8019      	strh	r1, [r3, #0]
 8006d04:	2300      	movs	r3, #0
 8006d06:	6123      	str	r3, [r4, #16]
 8006d08:	4616      	mov	r6, r2
 8006d0a:	e7bc      	b.n	8006c86 <_printf_i+0x146>
 8006d0c:	6833      	ldr	r3, [r6, #0]
 8006d0e:	1d1a      	adds	r2, r3, #4
 8006d10:	6032      	str	r2, [r6, #0]
 8006d12:	681e      	ldr	r6, [r3, #0]
 8006d14:	6862      	ldr	r2, [r4, #4]
 8006d16:	2100      	movs	r1, #0
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f7f9 fa71 	bl	8000200 <memchr>
 8006d1e:	b108      	cbz	r0, 8006d24 <_printf_i+0x1e4>
 8006d20:	1b80      	subs	r0, r0, r6
 8006d22:	6060      	str	r0, [r4, #4]
 8006d24:	6863      	ldr	r3, [r4, #4]
 8006d26:	6123      	str	r3, [r4, #16]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d2e:	e7aa      	b.n	8006c86 <_printf_i+0x146>
 8006d30:	6923      	ldr	r3, [r4, #16]
 8006d32:	4632      	mov	r2, r6
 8006d34:	4649      	mov	r1, r9
 8006d36:	4640      	mov	r0, r8
 8006d38:	47d0      	blx	sl
 8006d3a:	3001      	adds	r0, #1
 8006d3c:	d0ad      	beq.n	8006c9a <_printf_i+0x15a>
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	079b      	lsls	r3, r3, #30
 8006d42:	d413      	bmi.n	8006d6c <_printf_i+0x22c>
 8006d44:	68e0      	ldr	r0, [r4, #12]
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	4298      	cmp	r0, r3
 8006d4a:	bfb8      	it	lt
 8006d4c:	4618      	movlt	r0, r3
 8006d4e:	e7a6      	b.n	8006c9e <_printf_i+0x15e>
 8006d50:	2301      	movs	r3, #1
 8006d52:	4632      	mov	r2, r6
 8006d54:	4649      	mov	r1, r9
 8006d56:	4640      	mov	r0, r8
 8006d58:	47d0      	blx	sl
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	d09d      	beq.n	8006c9a <_printf_i+0x15a>
 8006d5e:	3501      	adds	r5, #1
 8006d60:	68e3      	ldr	r3, [r4, #12]
 8006d62:	9903      	ldr	r1, [sp, #12]
 8006d64:	1a5b      	subs	r3, r3, r1
 8006d66:	42ab      	cmp	r3, r5
 8006d68:	dcf2      	bgt.n	8006d50 <_printf_i+0x210>
 8006d6a:	e7eb      	b.n	8006d44 <_printf_i+0x204>
 8006d6c:	2500      	movs	r5, #0
 8006d6e:	f104 0619 	add.w	r6, r4, #25
 8006d72:	e7f5      	b.n	8006d60 <_printf_i+0x220>
 8006d74:	08007129 	.word	0x08007129
 8006d78:	0800713a 	.word	0x0800713a

08006d7c <memmove>:
 8006d7c:	4288      	cmp	r0, r1
 8006d7e:	b510      	push	{r4, lr}
 8006d80:	eb01 0402 	add.w	r4, r1, r2
 8006d84:	d902      	bls.n	8006d8c <memmove+0x10>
 8006d86:	4284      	cmp	r4, r0
 8006d88:	4623      	mov	r3, r4
 8006d8a:	d807      	bhi.n	8006d9c <memmove+0x20>
 8006d8c:	1e43      	subs	r3, r0, #1
 8006d8e:	42a1      	cmp	r1, r4
 8006d90:	d008      	beq.n	8006da4 <memmove+0x28>
 8006d92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d9a:	e7f8      	b.n	8006d8e <memmove+0x12>
 8006d9c:	4402      	add	r2, r0
 8006d9e:	4601      	mov	r1, r0
 8006da0:	428a      	cmp	r2, r1
 8006da2:	d100      	bne.n	8006da6 <memmove+0x2a>
 8006da4:	bd10      	pop	{r4, pc}
 8006da6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006daa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dae:	e7f7      	b.n	8006da0 <memmove+0x24>

08006db0 <_sbrk_r>:
 8006db0:	b538      	push	{r3, r4, r5, lr}
 8006db2:	4d06      	ldr	r5, [pc, #24]	@ (8006dcc <_sbrk_r+0x1c>)
 8006db4:	2300      	movs	r3, #0
 8006db6:	4604      	mov	r4, r0
 8006db8:	4608      	mov	r0, r1
 8006dba:	602b      	str	r3, [r5, #0]
 8006dbc:	f7fc f818 	bl	8002df0 <_sbrk>
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	d102      	bne.n	8006dca <_sbrk_r+0x1a>
 8006dc4:	682b      	ldr	r3, [r5, #0]
 8006dc6:	b103      	cbz	r3, 8006dca <_sbrk_r+0x1a>
 8006dc8:	6023      	str	r3, [r4, #0]
 8006dca:	bd38      	pop	{r3, r4, r5, pc}
 8006dcc:	200002a8 	.word	0x200002a8

08006dd0 <memcpy>:
 8006dd0:	440a      	add	r2, r1
 8006dd2:	4291      	cmp	r1, r2
 8006dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dd8:	d100      	bne.n	8006ddc <memcpy+0xc>
 8006dda:	4770      	bx	lr
 8006ddc:	b510      	push	{r4, lr}
 8006dde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006de2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006de6:	4291      	cmp	r1, r2
 8006de8:	d1f9      	bne.n	8006dde <memcpy+0xe>
 8006dea:	bd10      	pop	{r4, pc}

08006dec <_realloc_r>:
 8006dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df0:	4607      	mov	r7, r0
 8006df2:	4614      	mov	r4, r2
 8006df4:	460d      	mov	r5, r1
 8006df6:	b921      	cbnz	r1, 8006e02 <_realloc_r+0x16>
 8006df8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dfc:	4611      	mov	r1, r2
 8006dfe:	f7ff bc4d 	b.w	800669c <_malloc_r>
 8006e02:	b92a      	cbnz	r2, 8006e10 <_realloc_r+0x24>
 8006e04:	f7ff fbde 	bl	80065c4 <_free_r>
 8006e08:	4625      	mov	r5, r4
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e10:	f000 f81a 	bl	8006e48 <_malloc_usable_size_r>
 8006e14:	4284      	cmp	r4, r0
 8006e16:	4606      	mov	r6, r0
 8006e18:	d802      	bhi.n	8006e20 <_realloc_r+0x34>
 8006e1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e1e:	d8f4      	bhi.n	8006e0a <_realloc_r+0x1e>
 8006e20:	4621      	mov	r1, r4
 8006e22:	4638      	mov	r0, r7
 8006e24:	f7ff fc3a 	bl	800669c <_malloc_r>
 8006e28:	4680      	mov	r8, r0
 8006e2a:	b908      	cbnz	r0, 8006e30 <_realloc_r+0x44>
 8006e2c:	4645      	mov	r5, r8
 8006e2e:	e7ec      	b.n	8006e0a <_realloc_r+0x1e>
 8006e30:	42b4      	cmp	r4, r6
 8006e32:	4622      	mov	r2, r4
 8006e34:	4629      	mov	r1, r5
 8006e36:	bf28      	it	cs
 8006e38:	4632      	movcs	r2, r6
 8006e3a:	f7ff ffc9 	bl	8006dd0 <memcpy>
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4638      	mov	r0, r7
 8006e42:	f7ff fbbf 	bl	80065c4 <_free_r>
 8006e46:	e7f1      	b.n	8006e2c <_realloc_r+0x40>

08006e48 <_malloc_usable_size_r>:
 8006e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e4c:	1f18      	subs	r0, r3, #4
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	bfbc      	itt	lt
 8006e52:	580b      	ldrlt	r3, [r1, r0]
 8006e54:	18c0      	addlt	r0, r0, r3
 8006e56:	4770      	bx	lr

08006e58 <_init>:
 8006e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e5a:	bf00      	nop
 8006e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e5e:	bc08      	pop	{r3}
 8006e60:	469e      	mov	lr, r3
 8006e62:	4770      	bx	lr

08006e64 <_fini>:
 8006e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e66:	bf00      	nop
 8006e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e6a:	bc08      	pop	{r3}
 8006e6c:	469e      	mov	lr, r3
 8006e6e:	4770      	bx	lr
