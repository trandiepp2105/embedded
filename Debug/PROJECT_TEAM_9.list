
PROJECT_TEAM_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000daa8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800dc38  0800dc38  0000ec38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0f8  0800e0f8  00010060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e0f8  0800e0f8  0000f0f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e100  0800e100  00010060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e100  0800e100  0000f100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e104  0800e104  0000f104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800e108  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010060  2**0
                  CONTENTS
 10 .bss          00000b58  20000060  20000060  00010060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000bb8  20000bb8  00010060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017779  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b16  00000000  00000000  00027809  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  0002b320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b7d  00000000  00000000  0002c798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d076  00000000  00000000  00050315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d128e  00000000  00000000  0006d38b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e619  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000f92  00000000  00000000  0013e65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b6c  00000000  00000000  0013f5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0014515c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dc20 	.word	0x0800dc20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800dc20 	.word	0x0800dc20

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b988 	b.w	8000eb4 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	468e      	mov	lr, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	4688      	mov	r8, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4617      	mov	r7, r2
 8000bd0:	d962      	bls.n	8000c98 <__udivmoddi4+0xdc>
 8000bd2:	fab2 f682 	clz	r6, r2
 8000bd6:	b14e      	cbz	r6, 8000bec <__udivmoddi4+0x30>
 8000bd8:	f1c6 0320 	rsb	r3, r6, #32
 8000bdc:	fa01 f806 	lsl.w	r8, r1, r6
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	40b7      	lsls	r7, r6
 8000be6:	ea43 0808 	orr.w	r8, r3, r8
 8000bea:	40b4      	lsls	r4, r6
 8000bec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf0:	fa1f fc87 	uxth.w	ip, r7
 8000bf4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bf8:	0c23      	lsrs	r3, r4, #16
 8000bfa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fb01 f20c 	mul.w	r2, r1, ip
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c10:	f080 80ea 	bcs.w	8000de8 <__udivmoddi4+0x22c>
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f240 80e7 	bls.w	8000de8 <__udivmoddi4+0x22c>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	443b      	add	r3, r7
 8000c1e:	1a9a      	subs	r2, r3, r2
 8000c20:	b2a3      	uxth	r3, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c2e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c32:	459c      	cmp	ip, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x8e>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3c:	f080 80d6 	bcs.w	8000dec <__udivmoddi4+0x230>
 8000c40:	459c      	cmp	ip, r3
 8000c42:	f240 80d3 	bls.w	8000dec <__udivmoddi4+0x230>
 8000c46:	443b      	add	r3, r7
 8000c48:	3802      	subs	r0, #2
 8000c4a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c4e:	eba3 030c 	sub.w	r3, r3, ip
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11d      	cbz	r5, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40f3      	lsrs	r3, r6
 8000c58:	2200      	movs	r2, #0
 8000c5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d905      	bls.n	8000c72 <__udivmoddi4+0xb6>
 8000c66:	b10d      	cbz	r5, 8000c6c <__udivmoddi4+0xb0>
 8000c68:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e7f5      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c72:	fab3 f183 	clz	r1, r3
 8000c76:	2900      	cmp	r1, #0
 8000c78:	d146      	bne.n	8000d08 <__udivmoddi4+0x14c>
 8000c7a:	4573      	cmp	r3, lr
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xc8>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 8105 	bhi.w	8000e8e <__udivmoddi4+0x2d2>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	4690      	mov	r8, r2
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e5      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c92:	e9c5 4800 	strd	r4, r8, [r5]
 8000c96:	e7e2      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f000 8090 	beq.w	8000dbe <__udivmoddi4+0x202>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f040 80a4 	bne.w	8000df0 <__udivmoddi4+0x234>
 8000ca8:	1a8a      	subs	r2, r1, r2
 8000caa:	0c03      	lsrs	r3, r0, #16
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	b280      	uxth	r0, r0
 8000cb2:	b2bc      	uxth	r4, r7
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cba:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cc2:	fb04 f20c 	mul.w	r2, r4, ip
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x11e>
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x11c>
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	f200 80e0 	bhi.w	8000e98 <__udivmoddi4+0x2dc>
 8000cd8:	46c4      	mov	ip, r8
 8000cda:	1a9b      	subs	r3, r3, r2
 8000cdc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ce0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ce4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ce8:	fb02 f404 	mul.w	r4, r2, r4
 8000cec:	429c      	cmp	r4, r3
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x144>
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x142>
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	f200 80ca 	bhi.w	8000e92 <__udivmoddi4+0x2d6>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	1b1b      	subs	r3, r3, r4
 8000d02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d06:	e7a5      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d08:	f1c1 0620 	rsb	r6, r1, #32
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d12:	431f      	orrs	r7, r3
 8000d14:	fa0e f401 	lsl.w	r4, lr, r1
 8000d18:	fa20 f306 	lsr.w	r3, r0, r6
 8000d1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d24:	4323      	orrs	r3, r4
 8000d26:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2a:	fa1f fc87 	uxth.w	ip, r7
 8000d2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d32:	0c1c      	lsrs	r4, r3, #16
 8000d34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	fa02 f201 	lsl.w	r2, r2, r1
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x1a0>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d4e:	f080 809c 	bcs.w	8000e8a <__udivmoddi4+0x2ce>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f240 8099 	bls.w	8000e8a <__udivmoddi4+0x2ce>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	443c      	add	r4, r7
 8000d5c:	eba4 040e 	sub.w	r4, r4, lr
 8000d60:	fa1f fe83 	uxth.w	lr, r3
 8000d64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d68:	fb09 4413 	mls	r4, r9, r3, r4
 8000d6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d74:	45a4      	cmp	ip, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1ce>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d7e:	f080 8082 	bcs.w	8000e86 <__udivmoddi4+0x2ca>
 8000d82:	45a4      	cmp	ip, r4
 8000d84:	d97f      	bls.n	8000e86 <__udivmoddi4+0x2ca>
 8000d86:	3b02      	subs	r3, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d8e:	eba4 040c 	sub.w	r4, r4, ip
 8000d92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d96:	4564      	cmp	r4, ip
 8000d98:	4673      	mov	r3, lr
 8000d9a:	46e1      	mov	r9, ip
 8000d9c:	d362      	bcc.n	8000e64 <__udivmoddi4+0x2a8>
 8000d9e:	d05f      	beq.n	8000e60 <__udivmoddi4+0x2a4>
 8000da0:	b15d      	cbz	r5, 8000dba <__udivmoddi4+0x1fe>
 8000da2:	ebb8 0203 	subs.w	r2, r8, r3
 8000da6:	eb64 0409 	sbc.w	r4, r4, r9
 8000daa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dae:	fa22 f301 	lsr.w	r3, r2, r1
 8000db2:	431e      	orrs	r6, r3
 8000db4:	40cc      	lsrs	r4, r1
 8000db6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dba:	2100      	movs	r1, #0
 8000dbc:	e74f      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000dbe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dc2:	0c01      	lsrs	r1, r0, #16
 8000dc4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dc8:	b280      	uxth	r0, r0
 8000dca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	463c      	mov	r4, r7
 8000dd4:	46b8      	mov	r8, r7
 8000dd6:	46be      	mov	lr, r7
 8000dd8:	2620      	movs	r6, #32
 8000dda:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dde:	eba2 0208 	sub.w	r2, r2, r8
 8000de2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000de6:	e766      	b.n	8000cb6 <__udivmoddi4+0xfa>
 8000de8:	4601      	mov	r1, r0
 8000dea:	e718      	b.n	8000c1e <__udivmoddi4+0x62>
 8000dec:	4610      	mov	r0, r2
 8000dee:	e72c      	b.n	8000c4a <__udivmoddi4+0x8e>
 8000df0:	f1c6 0220 	rsb	r2, r6, #32
 8000df4:	fa2e f302 	lsr.w	r3, lr, r2
 8000df8:	40b7      	lsls	r7, r6
 8000dfa:	40b1      	lsls	r1, r6
 8000dfc:	fa20 f202 	lsr.w	r2, r0, r2
 8000e00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e04:	430a      	orrs	r2, r1
 8000e06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e0a:	b2bc      	uxth	r4, r7
 8000e0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb08 f904 	mul.w	r9, r8, r4
 8000e1a:	40b0      	lsls	r0, r6
 8000e1c:	4589      	cmp	r9, r1
 8000e1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e22:	b280      	uxth	r0, r0
 8000e24:	d93e      	bls.n	8000ea4 <__udivmoddi4+0x2e8>
 8000e26:	1879      	adds	r1, r7, r1
 8000e28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e2c:	d201      	bcs.n	8000e32 <__udivmoddi4+0x276>
 8000e2e:	4589      	cmp	r9, r1
 8000e30:	d81f      	bhi.n	8000e72 <__udivmoddi4+0x2b6>
 8000e32:	eba1 0109 	sub.w	r1, r1, r9
 8000e36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3a:	fb09 f804 	mul.w	r8, r9, r4
 8000e3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e42:	b292      	uxth	r2, r2
 8000e44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e48:	4542      	cmp	r2, r8
 8000e4a:	d229      	bcs.n	8000ea0 <__udivmoddi4+0x2e4>
 8000e4c:	18ba      	adds	r2, r7, r2
 8000e4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e52:	d2c4      	bcs.n	8000dde <__udivmoddi4+0x222>
 8000e54:	4542      	cmp	r2, r8
 8000e56:	d2c2      	bcs.n	8000dde <__udivmoddi4+0x222>
 8000e58:	f1a9 0102 	sub.w	r1, r9, #2
 8000e5c:	443a      	add	r2, r7
 8000e5e:	e7be      	b.n	8000dde <__udivmoddi4+0x222>
 8000e60:	45f0      	cmp	r8, lr
 8000e62:	d29d      	bcs.n	8000da0 <__udivmoddi4+0x1e4>
 8000e64:	ebbe 0302 	subs.w	r3, lr, r2
 8000e68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	46e1      	mov	r9, ip
 8000e70:	e796      	b.n	8000da0 <__udivmoddi4+0x1e4>
 8000e72:	eba7 0909 	sub.w	r9, r7, r9
 8000e76:	4449      	add	r1, r9
 8000e78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e80:	fb09 f804 	mul.w	r8, r9, r4
 8000e84:	e7db      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e86:	4673      	mov	r3, lr
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1ce>
 8000e8a:	4650      	mov	r0, sl
 8000e8c:	e766      	b.n	8000d5c <__udivmoddi4+0x1a0>
 8000e8e:	4608      	mov	r0, r1
 8000e90:	e6fd      	b.n	8000c8e <__udivmoddi4+0xd2>
 8000e92:	443b      	add	r3, r7
 8000e94:	3a02      	subs	r2, #2
 8000e96:	e733      	b.n	8000d00 <__udivmoddi4+0x144>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	443b      	add	r3, r7
 8000e9e:	e71c      	b.n	8000cda <__udivmoddi4+0x11e>
 8000ea0:	4649      	mov	r1, r9
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x222>
 8000ea4:	eba1 0109 	sub.w	r1, r1, r9
 8000ea8:	46c4      	mov	ip, r8
 8000eaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eae:	fb09 f804 	mul.w	r8, r9, r4
 8000eb2:	e7c4      	b.n	8000e3e <__udivmoddi4+0x282>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <FRAM_WriteBytes>:

/**
  * @brief Ghi một mảng byte vào FRAM từ một địa chỉ.
  */
HAL_StatusTypeDef FRAM_WriteBytes(I2C_HandleTypeDef *hi2c, uint16_t memAddress, uint8_t *pData, uint16_t size)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af04      	add	r7, sp, #16
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	817b      	strh	r3, [r7, #10]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	813b      	strh	r3, [r7, #8]
  if ((memAddress + size - 1) > FRAM_MAX_MEMORY_ADDRESS) {
 8000ecc:	897a      	ldrh	r2, [r7, #10]
 8000ece:	893b      	ldrh	r3, [r7, #8]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ed6:	dd01      	ble.n	8000edc <FRAM_WriteBytes+0x24>
      return HAL_ERROR; // Ghi vượt quá giới hạn bộ nhớ
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e00c      	b.n	8000ef6 <FRAM_WriteBytes+0x3e>
  }
  return HAL_I2C_Mem_Write(hi2c, FRAM_I2C_DEVICE_ADDRESS, memAddress, I2C_MEMADD_SIZE_16BIT, pData, size, FRAM_DEFAULT_TIMEOUT);
 8000edc:	897a      	ldrh	r2, [r7, #10]
 8000ede:	2364      	movs	r3, #100	@ 0x64
 8000ee0:	9302      	str	r3, [sp, #8]
 8000ee2:	893b      	ldrh	r3, [r7, #8]
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2310      	movs	r3, #16
 8000eec:	21a0      	movs	r1, #160	@ 0xa0
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f004 fa66 	bl	80053c0 <HAL_I2C_Mem_Write>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <FRAM_ReadBytes>:

/**
  * @brief Đọc một mảng byte từ FRAM bắt đầu từ một địa chỉ.
  */
HAL_StatusTypeDef FRAM_ReadBytes(I2C_HandleTypeDef *hi2c, uint16_t memAddress, uint8_t *pData, uint16_t size)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b088      	sub	sp, #32
 8000f02:	af04      	add	r7, sp, #16
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	817b      	strh	r3, [r7, #10]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	813b      	strh	r3, [r7, #8]
  if ((memAddress + size - 1) > FRAM_MAX_MEMORY_ADDRESS) {
 8000f12:	897a      	ldrh	r2, [r7, #10]
 8000f14:	893b      	ldrh	r3, [r7, #8]
 8000f16:	4413      	add	r3, r2
 8000f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f1c:	dd01      	ble.n	8000f22 <FRAM_ReadBytes+0x24>
      return HAL_ERROR; // Đọc vượt quá giới hạn bộ nhớ
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00c      	b.n	8000f3c <FRAM_ReadBytes+0x3e>
  }
  return HAL_I2C_Mem_Read(hi2c, FRAM_I2C_DEVICE_ADDRESS, memAddress, I2C_MEMADD_SIZE_16BIT, pData, size, FRAM_DEFAULT_TIMEOUT);
 8000f22:	897a      	ldrh	r2, [r7, #10]
 8000f24:	2364      	movs	r3, #100	@ 0x64
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	893b      	ldrh	r3, [r7, #8]
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2310      	movs	r3, #16
 8000f32:	21a0      	movs	r1, #160	@ 0xa0
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f004 fb3d 	bl	80055b4 <HAL_I2C_Mem_Read>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0b0      	sub	sp, #192	@ 0xc0
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  // Task Box Definitions
  uint16_t start_y_tasks_row1 = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 8000f4a:	233c      	movs	r3, #60	@ 0x3c
 8000f4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
  uint16_t start_y_tasks_row2 = start_y_tasks_row1 + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8000f50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8000f54:	3350      	adds	r3, #80	@ 0x50
 8000f56:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
  // task_boxes[0] = (TaskBox_t){MARGIN, start_y_tasks_row1, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-1"};
  // task_boxes[1] = (TaskBox_t){(uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES), start_y_tasks_row1, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-2"};
  // task_boxes[2] = (TaskBox_t){MARGIN, start_y_tasks_row2, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-3"};
  // task_boxes[3] = (TaskBox_t){(uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES), start_y_tasks_row2, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-4"};

  task_boxes[0] = (TaskBox_t){25, 80, 90, 60, "Task 02-1"};
 8000f5a:	4ba1      	ldr	r3, [pc, #644]	@ (80011e0 <main+0x29c>)
 8000f5c:	4aa1      	ldr	r2, [pc, #644]	@ (80011e4 <main+0x2a0>)
 8000f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  task_boxes[1] = (TaskBox_t){125, 80, 90, 60, "Task 02-2"};
 8000f64:	4b9e      	ldr	r3, [pc, #632]	@ (80011e0 <main+0x29c>)
 8000f66:	4aa0      	ldr	r2, [pc, #640]	@ (80011e8 <main+0x2a4>)
 8000f68:	330c      	adds	r3, #12
 8000f6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  task_boxes[2] = (TaskBox_t){25, 150, 90, 60, "Task 02-3"};
 8000f70:	4b9b      	ldr	r3, [pc, #620]	@ (80011e0 <main+0x29c>)
 8000f72:	4a9e      	ldr	r2, [pc, #632]	@ (80011ec <main+0x2a8>)
 8000f74:	3318      	adds	r3, #24
 8000f76:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  task_boxes[3] = (TaskBox_t){125, 150, 90, 60, "Task 02-4"};
 8000f7c:	4b98      	ldr	r3, [pc, #608]	@ (80011e0 <main+0x29c>)
 8000f7e:	4a9c      	ldr	r2, [pc, #624]	@ (80011f0 <main+0x2ac>)
 8000f80:	3324      	adds	r3, #36	@ 0x24
 8000f82:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f84:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  num_tasks = 4; // Set global count
 8000f88:	4b9a      	ldr	r3, [pc, #616]	@ (80011f4 <main+0x2b0>)
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	601a      	str	r2, [r3, #0]
  //     BACK_BUTTON_W,                                                             // w: span most of the width
  //     BACK_BUTTON_H,                                                             // h: defined height
  //     "Back"                                                                     // name (used for internal logic if needed, not displayed by default)
  // };

  back_button_box = (TaskBox_t){
 8000f8e:	4b9a      	ldr	r3, [pc, #616]	@ (80011f8 <main+0x2b4>)
 8000f90:	4a9a      	ldr	r2, [pc, #616]	@ (80011fc <main+0x2b8>)
 8000f92:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f98:	f002 fa48 	bl	800342c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9c:	f000 f9a6 	bl	80012ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa0:	f000 fb56 	bl	8001650 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fa4:	f000 fb1e 	bl	80015e4 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000fa8:	f000 face 	bl	8001548 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8000fac:	f000 fafa 	bl	80015a4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000fb0:	f009 fe40 	bl	800ac34 <MX_FATFS_Init>
  MX_ADC1_Init();
 8000fb4:	f000 fa02 	bl	80013bc <MX_ADC1_Init>
  MX_CAN1_Init();
 8000fb8:	f000 fa52 	bl	8001460 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000fbc:	f000 fa86 	bl	80014cc <MX_CAN2_Init>
  //   Error_Handler();
  // }

  // Cấu hình filter cho CAN2
  CAN_FilterTypeDef sFilterConfig2;
  sFilterConfig2.FilterBank = 14; // CAN2 sử dụng từ bank 14-27
 8000fc0:	230e      	movs	r3, #14
 8000fc2:	653b      	str	r3, [r7, #80]	@ 0x50
  sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	657b      	str	r3, [r7, #84]	@ 0x54
  sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	65bb      	str	r3, [r7, #88]	@ 0x58
  sFilterConfig2.FilterIdHigh = 0x0000;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sFilterConfig2.FilterIdLow = 0x0000;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	643b      	str	r3, [r7, #64]	@ 0x40
  sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	647b      	str	r3, [r7, #68]	@ 0x44
  sFilterConfig2.FilterMaskIdLow = 0x0000;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	64bb      	str	r3, [r7, #72]	@ 0x48
  sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sFilterConfig2.FilterActivation = ENABLE;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  // Không cần đặt SlaveStartFilterBank ở đây

  if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 8000fe4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4885      	ldr	r0, [pc, #532]	@ (8001200 <main+0x2bc>)
 8000fec:	f002 ffb0 	bl	8003f50 <HAL_CAN_ConfigFilter>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <main+0xb6>
  {
    Error_Handler();
 8000ff6:	f000 fd31 	bl	8001a5c <Error_Handler>
  }

  // Khởi động CAN1 và CAN2
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8000ffa:	4882      	ldr	r0, [pc, #520]	@ (8001204 <main+0x2c0>)
 8000ffc:	f003 f886 	bl	800410c <HAL_CAN_Start>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <main+0xc6>
  {
    Error_Handler();
 8001006:	f000 fd29 	bl	8001a5c <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan2) != HAL_OK)
 800100a:	487d      	ldr	r0, [pc, #500]	@ (8001200 <main+0x2bc>)
 800100c:	f003 f87e 	bl	800410c <HAL_CAN_Start>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <main+0xd6>
  {
    Error_Handler();
 8001016:	f000 fd21 	bl	8001a5c <Error_Handler>
  }

  // Kích hoạt thông báo ngắt cho CAN2 RX FIFO0
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800101a:	2102      	movs	r1, #2
 800101c:	4878      	ldr	r0, [pc, #480]	@ (8001200 <main+0x2bc>)
 800101e:	f003 faab 	bl	8004578 <HAL_CAN_ActivateNotification>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <main+0xe8>
  {
    Error_Handler();
 8001028:	f000 fd18 	bl	8001a5c <Error_Handler>
  }

  // Cấu hình thông điệp gửi từ CAN1
  TxHeader1.StdId = 0x124;
 800102c:	4b76      	ldr	r3, [pc, #472]	@ (8001208 <main+0x2c4>)
 800102e:	f44f 7292 	mov.w	r2, #292	@ 0x124
 8001032:	601a      	str	r2, [r3, #0]
  TxHeader1.ExtId = 0x00;
 8001034:	4b74      	ldr	r3, [pc, #464]	@ (8001208 <main+0x2c4>)
 8001036:	2200      	movs	r2, #0
 8001038:	605a      	str	r2, [r3, #4]
  TxHeader1.RTR = CAN_RTR_DATA;
 800103a:	4b73      	ldr	r3, [pc, #460]	@ (8001208 <main+0x2c4>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  TxHeader1.IDE = CAN_ID_STD;
 8001040:	4b71      	ldr	r3, [pc, #452]	@ (8001208 <main+0x2c4>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  TxHeader1.DLC = 2;
 8001046:	4b70      	ldr	r3, [pc, #448]	@ (8001208 <main+0x2c4>)
 8001048:	2202      	movs	r2, #2
 800104a:	611a      	str	r2, [r3, #16]
  TxHeader1.TransmitGlobalTime = DISABLE;
 800104c:	4b6e      	ldr	r3, [pc, #440]	@ (8001208 <main+0x2c4>)
 800104e:	2200      	movs	r2, #0
 8001050:	751a      	strb	r2, [r3, #20]

  // Khởi tạo LCD và Touch
  // disable touch interrupt
  // HAL_NVIC_DisableIRQ(EXTI4_IRQn); // Tắt ngắt trước khi khởi tạo

  Manual_LCD_Init();
 8001052:	f000 fdd5 	bl	8001c00 <Manual_LCD_Init>
  Manual_Touch_Init(&hspi1);
 8001056:	486d      	ldr	r0, [pc, #436]	@ (800120c <main+0x2c8>)
 8001058:	f001 fc90 	bl	800297c <Manual_Touch_Init>
  Manual_LCD_DrawLayout(); // This function should draw the tasks and the back button
 800105c:	f001 f9fa 	bl	8002454 <Manual_LCD_DrawLayout>

  // __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);

  // HAL_NVIC_EnableIRQ(EXTI4_IRQn); // Enable touch interrupt
  SD_Init();
 8001060:	f001 fd8e 	bl	8002b80 <SD_Init>
  /* USER CODE BEGIN WHILE */
  int can2_received_temperature_int;

  while (1)
  {
    if (current_task == 0)
 8001064:	4b6a      	ldr	r3, [pc, #424]	@ (8001210 <main+0x2cc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d105      	bne.n	8001078 <main+0x134>
    {
      Task2_LedBlink(GPIOB, GPIO_PIN_1, BLINK_SPEED_200_MS);
 800106c:	22c8      	movs	r2, #200	@ 0xc8
 800106e:	2102      	movs	r1, #2
 8001070:	4868      	ldr	r0, [pc, #416]	@ (8001214 <main+0x2d0>)
 8001072:	f002 f923 	bl	80032bc <Task2_LedBlink>
 8001076:	e7f5      	b.n	8001064 <main+0x120>
    }
    else if (current_task == 1)
 8001078:	4b65      	ldr	r3, [pc, #404]	@ (8001210 <main+0x2cc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d14e      	bne.n	800111e <main+0x1da>
    {
      char temp_display_str[50];
      uint8_t current_temp_c = (uint8_t)Read_Internal_Temperature();
 8001080:	f002 f930 	bl	80032e4 <Read_Internal_Temperature>
 8001084:	eef0 7a40 	vmov.f32	s15, s0
 8001088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800108c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001090:	793b      	ldrb	r3, [r7, #4]
 8001092:	f887 30ba 	strb.w	r3, [r7, #186]	@ 0xba
      uint8_t temp_to_send = current_temp_c;
 8001096:	f897 30ba 	ldrb.w	r3, [r7, #186]	@ 0xba
 800109a:	f887 30b9 	strb.w	r3, [r7, #185]	@ 0xb9
      TxData1[0] = GROUP_NUMBER;
 800109e:	4b5e      	ldr	r3, [pc, #376]	@ (8001218 <main+0x2d4>)
 80010a0:	2209      	movs	r2, #9
 80010a2:	701a      	strb	r2, [r3, #0]
      TxData1[1] = temp_to_send;
 80010a4:	4a5c      	ldr	r2, [pc, #368]	@ (8001218 <main+0x2d4>)
 80010a6:	f897 30b9 	ldrb.w	r3, [r7, #185]	@ 0xb9
 80010aa:	7053      	strb	r3, [r2, #1]
      HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox1);
 80010ac:	4b5b      	ldr	r3, [pc, #364]	@ (800121c <main+0x2d8>)
 80010ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001218 <main+0x2d4>)
 80010b0:	4955      	ldr	r1, [pc, #340]	@ (8001208 <main+0x2c4>)
 80010b2:	4854      	ldr	r0, [pc, #336]	@ (8001204 <main+0x2c0>)
 80010b4:	f003 f86e 	bl	8004194 <HAL_CAN_AddTxMessage>
      while (!can2_received_data_flag)
 80010b8:	e002      	b.n	80010c0 <main+0x17c>
      {
        HAL_Delay(10);
 80010ba:	200a      	movs	r0, #10
 80010bc:	f002 fa28 	bl	8003510 <HAL_Delay>
      while (!can2_received_data_flag)
 80010c0:	4b57      	ldr	r3, [pc, #348]	@ (8001220 <main+0x2dc>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f7      	beq.n	80010ba <main+0x176>
      }
      can2_received_data_flag = 0; // Reset the flag for the next message
 80010ca:	4b55      	ldr	r3, [pc, #340]	@ (8001220 <main+0x2dc>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
      can2_received_temperature_int = (int)can2_received_temperature;
 80010d0:	4b54      	ldr	r3, [pc, #336]	@ (8001224 <main+0x2e0>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      sprintf(temp_display_str, "Group: %d, temp: %d *C", can2_received_group, can2_received_temperature_int);
 80010da:	4b53      	ldr	r3, [pc, #332]	@ (8001228 <main+0x2e4>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	f107 0008 	add.w	r0, r7, #8
 80010e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80010ea:	4950      	ldr	r1, [pc, #320]	@ (800122c <main+0x2e8>)
 80010ec:	f00c f8f0 	bl	800d2d0 <siprintf>
      // sprintf(temp_display_str, "Group: %d, temp: %d *C", GROUP_NUMBER, temp_to_send);
      strcpy(info_text_buffer, temp_display_str);
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	4619      	mov	r1, r3
 80010f6:	484e      	ldr	r0, [pc, #312]	@ (8001230 <main+0x2ec>)
 80010f8:	f00c f940 	bl	800d37c <strcpy>
      HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f003 fdba 	bl	8004c76 <HAL_NVIC_DisableIRQ>

      Manual_LCD_UpdateInfoText(info_text_buffer);
 8001102:	484b      	ldr	r0, [pc, #300]	@ (8001230 <main+0x2ec>)
 8001104:	f001 fb3a 	bl	800277c <Manual_LCD_UpdateInfoText>
      __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
 8001108:	4b4a      	ldr	r3, [pc, #296]	@ (8001234 <main+0x2f0>)
 800110a:	2210      	movs	r2, #16
 800110c:	615a      	str	r2, [r3, #20]
      HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800110e:	200a      	movs	r0, #10
 8001110:	f003 fda3 	bl	8004c5a <HAL_NVIC_EnableIRQ>
      HAL_Delay(500); // Delay to avoid flooding the CAN bus
 8001114:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001118:	f002 f9fa 	bl	8003510 <HAL_Delay>
 800111c:	e7a2      	b.n	8001064 <main+0x120>
    }
    else if (current_task == 2)
 800111e:	4b3c      	ldr	r3, [pc, #240]	@ (8001210 <main+0x2cc>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b02      	cmp	r3, #2
 8001124:	f040 8096 	bne.w	8001254 <main+0x310>
    {
      HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8001128:	200a      	movs	r0, #10
 800112a:	f003 fda4 	bl	8004c76 <HAL_NVIC_DisableIRQ>

      byte_read = SD_ReadTeamFile(read_data, sizeof(read_data));
 800112e:	2132      	movs	r1, #50	@ 0x32
 8001130:	4841      	ldr	r0, [pc, #260]	@ (8001238 <main+0x2f4>)
 8001132:	f001 fdd5 	bl	8002ce0 <SD_ReadTeamFile>
 8001136:	4603      	mov	r3, r0
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b40      	ldr	r3, [pc, #256]	@ (800123c <main+0x2f8>)
 800113c:	701a      	strb	r2, [r3, #0]

      if (byte_read > 0)
 800113e:	4b3f      	ldr	r3, [pc, #252]	@ (800123c <main+0x2f8>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d008      	beq.n	8001158 <main+0x214>
      {
        // Đọc thành công, hiển thị nội dung
        sprintf(info_text_buffer, "SD content: %s", read_data);
 8001146:	4a3c      	ldr	r2, [pc, #240]	@ (8001238 <main+0x2f4>)
 8001148:	493d      	ldr	r1, [pc, #244]	@ (8001240 <main+0x2fc>)
 800114a:	4839      	ldr	r0, [pc, #228]	@ (8001230 <main+0x2ec>)
 800114c:	f00c f8c0 	bl	800d2d0 <siprintf>
        Manual_LCD_UpdateInfoText(info_text_buffer);
 8001150:	4837      	ldr	r0, [pc, #220]	@ (8001230 <main+0x2ec>)
 8001152:	f001 fb13 	bl	800277c <Manual_LCD_UpdateInfoText>
 8001156:	e038      	b.n	80011ca <main+0x286>
      }
      else
      {
        // Đọc thất bại
        sprintf(info_text_buffer, "Read error (%d)", byte_read);
 8001158:	4b38      	ldr	r3, [pc, #224]	@ (800123c <main+0x2f8>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4939      	ldr	r1, [pc, #228]	@ (8001244 <main+0x300>)
 8001160:	4833      	ldr	r0, [pc, #204]	@ (8001230 <main+0x2ec>)
 8001162:	f00c f8b5 	bl	800d2d0 <siprintf>
        Manual_LCD_UpdateInfoText(info_text_buffer);
 8001166:	4832      	ldr	r0, [pc, #200]	@ (8001230 <main+0x2ec>)
 8001168:	f001 fb08 	bl	800277c <Manual_LCD_UpdateInfoText>

        // Thử khởi tạo lại SD trong trường hợp bị ngắt kết nối
        if (SD_Init())
 800116c:	f001 fd08 	bl	8002b80 <SD_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d029      	beq.n	80011ca <main+0x286>
        {
          sprintf(info_text_buffer, "SD reinitialized");
 8001176:	4934      	ldr	r1, [pc, #208]	@ (8001248 <main+0x304>)
 8001178:	482d      	ldr	r0, [pc, #180]	@ (8001230 <main+0x2ec>)
 800117a:	f00c f8a9 	bl	800d2d0 <siprintf>
          Manual_LCD_UpdateInfoText(info_text_buffer);
 800117e:	482c      	ldr	r0, [pc, #176]	@ (8001230 <main+0x2ec>)
 8001180:	f001 fafc 	bl	800277c <Manual_LCD_UpdateInfoText>
          HAL_Delay(1000);
 8001184:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001188:	f002 f9c2 	bl	8003510 <HAL_Delay>

          // Thử đọc lại
          byte_read = SD_ReadTeamFile(read_data, sizeof(read_data));
 800118c:	2132      	movs	r1, #50	@ 0x32
 800118e:	482a      	ldr	r0, [pc, #168]	@ (8001238 <main+0x2f4>)
 8001190:	f001 fda6 	bl	8002ce0 <SD_ReadTeamFile>
 8001194:	4603      	mov	r3, r0
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b28      	ldr	r3, [pc, #160]	@ (800123c <main+0x2f8>)
 800119a:	701a      	strb	r2, [r3, #0]
          if (byte_read > 0)
 800119c:	4b27      	ldr	r3, [pc, #156]	@ (800123c <main+0x2f8>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <main+0x272>
          {
            sprintf(info_text_buffer, "Content: %s", read_data);
 80011a4:	4a24      	ldr	r2, [pc, #144]	@ (8001238 <main+0x2f4>)
 80011a6:	4929      	ldr	r1, [pc, #164]	@ (800124c <main+0x308>)
 80011a8:	4821      	ldr	r0, [pc, #132]	@ (8001230 <main+0x2ec>)
 80011aa:	f00c f891 	bl	800d2d0 <siprintf>
            Manual_LCD_UpdateInfoText(info_text_buffer);
 80011ae:	4820      	ldr	r0, [pc, #128]	@ (8001230 <main+0x2ec>)
 80011b0:	f001 fae4 	bl	800277c <Manual_LCD_UpdateInfoText>
 80011b4:	e009      	b.n	80011ca <main+0x286>
          }
          else
          {
            sprintf(info_text_buffer, "Still error (%d)", byte_read);
 80011b6:	4b21      	ldr	r3, [pc, #132]	@ (800123c <main+0x2f8>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	4924      	ldr	r1, [pc, #144]	@ (8001250 <main+0x30c>)
 80011be:	481c      	ldr	r0, [pc, #112]	@ (8001230 <main+0x2ec>)
 80011c0:	f00c f886 	bl	800d2d0 <siprintf>
            Manual_LCD_UpdateInfoText(info_text_buffer);
 80011c4:	481a      	ldr	r0, [pc, #104]	@ (8001230 <main+0x2ec>)
 80011c6:	f001 fad9 	bl	800277c <Manual_LCD_UpdateInfoText>
          }
        }
      }
      __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
 80011ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <main+0x2f0>)
 80011cc:	2210      	movs	r2, #16
 80011ce:	615a      	str	r2, [r3, #20]
      HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011d0:	200a      	movs	r0, #10
 80011d2:	f003 fd42 	bl	8004c5a <HAL_NVIC_EnableIRQ>
      HAL_Delay(500); // Delay to avoid flooding the LCD
 80011d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011da:	f002 f999 	bl	8003510 <HAL_Delay>
 80011de:	e741      	b.n	8001064 <main+0x120>
 80011e0:	2000047c 	.word	0x2000047c
 80011e4:	0800dcd4 	.word	0x0800dcd4
 80011e8:	0800dcec 	.word	0x0800dcec
 80011ec:	0800dd04 	.word	0x0800dd04
 80011f0:	0800dd1c 	.word	0x0800dd1c
 80011f4:	20000518 	.word	0x20000518
 80011f8:	20000740 	.word	0x20000740
 80011fc:	0800dd30 	.word	0x0800dd30
 8001200:	200005a4 	.word	0x200005a4
 8001204:	20000718 	.word	0x20000718
 8001208:	20000500 	.word	0x20000500
 800120c:	20000688 	.word	0x20000688
 8001210:	20000000 	.word	0x20000000
 8001214:	40020400 	.word	0x40020400
 8001218:	2000051c 	.word	0x2000051c
 800121c:	20000714 	.word	0x20000714
 8001220:	2000007c 	.word	0x2000007c
 8001224:	20000685 	.word	0x20000685
 8001228:	200005fe 	.word	0x200005fe
 800122c:	0800dc38 	.word	0x0800dc38
 8001230:	200006e0 	.word	0x200006e0
 8001234:	40013c00 	.word	0x40013c00
 8001238:	200005cc 	.word	0x200005cc
 800123c:	20000684 	.word	0x20000684
 8001240:	0800dc50 	.word	0x0800dc50
 8001244:	0800dc60 	.word	0x0800dc60
 8001248:	0800dc70 	.word	0x0800dc70
 800124c:	0800dc84 	.word	0x0800dc84
 8001250:	0800dc90 	.word	0x0800dc90
    }
    else if (current_task == 3)
 8001254:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <main+0x38c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b03      	cmp	r3, #3
 800125a:	f47f af03 	bne.w	8001064 <main+0x120>
    {
      HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 800125e:	200a      	movs	r0, #10
 8001260:	f003 fd09 	bl	8004c76 <HAL_NVIC_DisableIRQ>

      // Task 02-4: Read temperature from FRAM
      uint8_t read_value = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      // Đọc nhiệt độ từ FRAM
      GPIO_PinState prev_btn_state = current_button_state;
 800126a:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <main+0x390>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb

      CheckUserButtonAndSaveTemp(&current_button_state);
 8001272:	4818      	ldr	r0, [pc, #96]	@ (80012d4 <main+0x390>)
 8001274:	f002 f87e 	bl	8003374 <CheckUserButtonAndSaveTemp>
      if (current_button_state == GPIO_PIN_SET && prev_btn_state == GPIO_PIN_RESET)
 8001278:	4b16      	ldr	r3, [pc, #88]	@ (80012d4 <main+0x390>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d11d      	bne.n	80012bc <main+0x378>
 8001280:	f897 30bb 	ldrb.w	r3, [r7, #187]	@ 0xbb
 8001284:	2b00      	cmp	r3, #0
 8001286:	d119      	bne.n	80012bc <main+0x378>
      {
        // Nút vừa được nhấn xuống
        if (FRAM_ReadBytes(&hi2c2, USER_TEMP_ADDR, &read_value, 1) == HAL_OK)
 8001288:	f107 023b 	add.w	r2, r7, #59	@ 0x3b
 800128c:	2301      	movs	r3, #1
 800128e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001292:	4811      	ldr	r0, [pc, #68]	@ (80012d8 <main+0x394>)
 8001294:	f7ff fe33 	bl	8000efe <FRAM_ReadBytes>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d107      	bne.n	80012ae <main+0x36a>
        {
          sprintf(info_text_buffer, "FRAM Read OK: %d", read_value);
 800129e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80012a2:	461a      	mov	r2, r3
 80012a4:	490d      	ldr	r1, [pc, #52]	@ (80012dc <main+0x398>)
 80012a6:	480e      	ldr	r0, [pc, #56]	@ (80012e0 <main+0x39c>)
 80012a8:	f00c f812 	bl	800d2d0 <siprintf>
 80012ac:	e003      	b.n	80012b6 <main+0x372>
        }
        else
        {
          sprintf(info_text_buffer, "FRAM Read ERROR");
 80012ae:	490d      	ldr	r1, [pc, #52]	@ (80012e4 <main+0x3a0>)
 80012b0:	480b      	ldr	r0, [pc, #44]	@ (80012e0 <main+0x39c>)
 80012b2:	f00c f80d 	bl	800d2d0 <siprintf>
        }
        Manual_LCD_UpdateInfoText(info_text_buffer);
 80012b6:	480a      	ldr	r0, [pc, #40]	@ (80012e0 <main+0x39c>)
 80012b8:	f001 fa60 	bl	800277c <Manual_LCD_UpdateInfoText>
      }
      __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <main+0x3a4>)
 80012be:	2210      	movs	r2, #16
 80012c0:	615a      	str	r2, [r3, #20]
      HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80012c2:	200a      	movs	r0, #10
 80012c4:	f003 fcc9 	bl	8004c5a <HAL_NVIC_EnableIRQ>
      HAL_Delay(10); // Delay to avoid flooding the LCD
 80012c8:	200a      	movs	r0, #10
 80012ca:	f002 f921 	bl	8003510 <HAL_Delay>
    if (current_task == 0)
 80012ce:	e6c9      	b.n	8001064 <main+0x120>
 80012d0:	20000000 	.word	0x20000000
 80012d4:	2000007d 	.word	0x2000007d
 80012d8:	200004ac 	.word	0x200004ac
 80012dc:	0800dca4 	.word	0x0800dca4
 80012e0:	200006e0 	.word	0x200006e0
 80012e4:	0800dcb8 	.word	0x0800dcb8
 80012e8:	40013c00 	.word	0x40013c00

080012ec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b094      	sub	sp, #80	@ 0x50
 80012f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	2230      	movs	r2, #48	@ 0x30
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f00c f80a 	bl	800d314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	4b27      	ldr	r3, [pc, #156]	@ (80013b4 <SystemClock_Config+0xc8>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	4a26      	ldr	r2, [pc, #152]	@ (80013b4 <SystemClock_Config+0xc8>)
 800131a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001320:	4b24      	ldr	r3, [pc, #144]	@ (80013b4 <SystemClock_Config+0xc8>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <SystemClock_Config+0xcc>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a20      	ldr	r2, [pc, #128]	@ (80013b8 <SystemClock_Config+0xcc>)
 8001336:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b1e      	ldr	r3, [pc, #120]	@ (80013b8 <SystemClock_Config+0xcc>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001348:	2301      	movs	r3, #1
 800134a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800134c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001352:	2302      	movs	r3, #2
 8001354:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001356:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800135a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800135c:	2319      	movs	r3, #25
 800135e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001360:	2390      	movs	r3, #144	@ 0x90
 8001362:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001364:	2302      	movs	r3, #2
 8001366:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001368:	2304      	movs	r3, #4
 800136a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f107 0320 	add.w	r3, r7, #32
 8001370:	4618      	mov	r0, r3
 8001372:	f006 fae3 	bl	800793c <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800137c:	f000 fb6e 	bl	8001a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001380:	230f      	movs	r3, #15
 8001382:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001384:	2302      	movs	r3, #2
 8001386:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001390:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2102      	movs	r1, #2
 800139c:	4618      	mov	r0, r3
 800139e:	f006 fd45 	bl	8007e2c <HAL_RCC_ClockConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80013a8:	f000 fb58 	bl	8001a5c <Error_Handler>
  }
}
 80013ac:	bf00      	nop
 80013ae:	3750      	adds	r7, #80	@ 0x50
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40007000 	.word	0x40007000

080013bc <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c2:	463b      	mov	r3, r7
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 80013ce:	4b21      	ldr	r3, [pc, #132]	@ (8001454 <MX_ADC1_Init+0x98>)
 80013d0:	4a21      	ldr	r2, [pc, #132]	@ (8001458 <MX_ADC1_Init+0x9c>)
 80013d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <MX_ADC1_Init+0x98>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013da:	4b1e      	ldr	r3, [pc, #120]	@ (8001454 <MX_ADC1_Init+0x98>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <MX_ADC1_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_ADC1_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ec:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <MX_ADC1_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f4:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <MX_ADC1_Init+0x98>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <MX_ADC1_Init+0x98>)
 80013fc:	4a17      	ldr	r2, [pc, #92]	@ (800145c <MX_ADC1_Init+0xa0>)
 80013fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001400:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <MX_ADC1_Init+0x98>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001406:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <MX_ADC1_Init+0x98>)
 8001408:	2201      	movs	r2, #1
 800140a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <MX_ADC1_Init+0x98>)
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <MX_ADC1_Init+0x98>)
 8001416:	2201      	movs	r2, #1
 8001418:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800141a:	480e      	ldr	r0, [pc, #56]	@ (8001454 <MX_ADC1_Init+0x98>)
 800141c:	f002 f89c 	bl	8003558 <HAL_ADC_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001426:	f000 fb19 	bl	8001a5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800142a:	2310      	movs	r3, #16
 800142c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800142e:	2301      	movs	r3, #1
 8001430:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001436:	463b      	mov	r3, r7
 8001438:	4619      	mov	r1, r3
 800143a:	4806      	ldr	r0, [pc, #24]	@ (8001454 <MX_ADC1_Init+0x98>)
 800143c:	f002 fa6e 	bl	800391c <HAL_ADC_ConfigChannel>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001446:	f000 fb09 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000055c 	.word	0x2000055c
 8001458:	40012000 	.word	0x40012000
 800145c:	0f000001 	.word	0x0f000001

08001460 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001464:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <MX_CAN1_Init+0x64>)
 8001466:	4a18      	ldr	r2, [pc, #96]	@ (80014c8 <MX_CAN1_Init+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 72;
 800146a:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <MX_CAN1_Init+0x64>)
 800146c:	2248      	movs	r2, #72	@ 0x48
 800146e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001470:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <MX_CAN1_Init+0x64>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <MX_CAN1_Init+0x64>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_CAN1_Init+0x64>)
 800147e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001482:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <MX_CAN1_Init+0x64>)
 8001486:	2200      	movs	r2, #0
 8001488:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_CAN1_Init+0x64>)
 800148c:	2200      	movs	r2, #0
 800148e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_CAN1_Init+0x64>)
 8001492:	2200      	movs	r2, #0
 8001494:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <MX_CAN1_Init+0x64>)
 8001498:	2200      	movs	r2, #0
 800149a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_CAN1_Init+0x64>)
 800149e:	2200      	movs	r2, #0
 80014a0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <MX_CAN1_Init+0x64>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MX_CAN1_Init+0x64>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_CAN1_Init+0x64>)
 80014b0:	f002 fc52 	bl	8003d58 <HAL_CAN_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80014ba:	f000 facf 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000718 	.word	0x20000718
 80014c8:	40006400 	.word	0x40006400

080014cc <MX_CAN2_Init>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <MX_CAN2_Init+0x74>)
 80014d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001544 <MX_CAN2_Init+0x78>)
 80014d4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 72;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <MX_CAN2_Init+0x74>)
 80014d8:	2248      	movs	r2, #72	@ 0x48
 80014da:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80014dc:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <MX_CAN2_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <MX_CAN2_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <MX_CAN2_Init+0x74>)
 80014ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014ee:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80014f0:	4b13      	ldr	r3, [pc, #76]	@ (8001540 <MX_CAN2_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80014f6:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_CAN2_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80014fc:	4b10      	ldr	r3, [pc, #64]	@ (8001540 <MX_CAN2_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001502:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_CAN2_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001508:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <MX_CAN2_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800150e:	4b0c      	ldr	r3, [pc, #48]	@ (8001540 <MX_CAN2_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <MX_CAN2_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800151a:	4809      	ldr	r0, [pc, #36]	@ (8001540 <MX_CAN2_Init+0x74>)
 800151c:	f002 fc1c 	bl	8003d58 <HAL_CAN_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8001526:	f000 fa99 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2100      	movs	r1, #0
 800152e:	2040      	movs	r0, #64	@ 0x40
 8001530:	f003 fb77 	bl	8004c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001534:	2040      	movs	r0, #64	@ 0x40
 8001536:	f003 fb90 	bl	8004c5a <HAL_NVIC_EnableIRQ>
  /* USER CODE END CAN2_Init 2 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200005a4 	.word	0x200005a4
 8001544:	40006800 	.word	0x40006800

08001548 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <MX_I2C2_Init+0x50>)
 800154e:	4a13      	ldr	r2, [pc, #76]	@ (800159c <MX_I2C2_Init+0x54>)
 8001550:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <MX_I2C2_Init+0x50>)
 8001554:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <MX_I2C2_Init+0x58>)
 8001556:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001558:	4b0f      	ldr	r3, [pc, #60]	@ (8001598 <MX_I2C2_Init+0x50>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <MX_I2C2_Init+0x50>)
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001564:	4b0c      	ldr	r3, [pc, #48]	@ (8001598 <MX_I2C2_Init+0x50>)
 8001566:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800156a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800156c:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <MX_I2C2_Init+0x50>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001572:	4b09      	ldr	r3, [pc, #36]	@ (8001598 <MX_I2C2_Init+0x50>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001578:	4b07      	ldr	r3, [pc, #28]	@ (8001598 <MX_I2C2_Init+0x50>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <MX_I2C2_Init+0x50>)
 8001580:	2200      	movs	r2, #0
 8001582:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001584:	4804      	ldr	r0, [pc, #16]	@ (8001598 <MX_I2C2_Init+0x50>)
 8001586:	f003 fdc1 	bl	800510c <HAL_I2C_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001590:	f000 fa64 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */
}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	200004ac 	.word	0x200004ac
 800159c:	40005800 	.word	0x40005800
 80015a0:	000186a0 	.word	0x000186a0

080015a4 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <MX_SDIO_SD_Init+0x38>)
 80015aa:	4a0d      	ldr	r2, [pc, #52]	@ (80015e0 <MX_SDIO_SD_Init+0x3c>)
 80015ac:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <MX_SDIO_SD_Init+0x38>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80015b4:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <MX_SDIO_SD_Init+0x38>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <MX_SDIO_SD_Init+0x38>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_SDIO_SD_Init+0x38>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80015c6:	4b05      	ldr	r3, [pc, #20]	@ (80015dc <MX_SDIO_SD_Init+0x38>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <MX_SDIO_SD_Init+0x38>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	20000600 	.word	0x20000600
 80015e0:	40012c00 	.word	0x40012c00

080015e4 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015e8:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <MX_SPI1_Init+0x64>)
 80015ea:	4a18      	ldr	r2, [pc, #96]	@ (800164c <MX_SPI1_Init+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ee:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <MX_SPI1_Init+0x64>)
 80015f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015f6:	4b14      	ldr	r3, [pc, #80]	@ (8001648 <MX_SPI1_Init+0x64>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015fc:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <MX_SPI1_Init+0x64>)
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001602:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <MX_SPI1_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001608:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <MX_SPI1_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <MX_SPI1_Init+0x64>)
 8001610:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001614:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001616:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <MX_SPI1_Init+0x64>)
 8001618:	2220      	movs	r2, #32
 800161a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161c:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <MX_SPI1_Init+0x64>)
 800161e:	2200      	movs	r2, #0
 8001620:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <MX_SPI1_Init+0x64>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001628:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <MX_SPI1_Init+0x64>)
 800162a:	2200      	movs	r2, #0
 800162c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800162e:	4b06      	ldr	r3, [pc, #24]	@ (8001648 <MX_SPI1_Init+0x64>)
 8001630:	220a      	movs	r2, #10
 8001632:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001634:	4804      	ldr	r0, [pc, #16]	@ (8001648 <MX_SPI1_Init+0x64>)
 8001636:	f007 fff9 	bl	800962c <HAL_SPI_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001640:	f000 fa0c 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20000688 	.word	0x20000688
 800164c:	40013000 	.word	0x40013000

08001650 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08a      	sub	sp, #40	@ 0x28
 8001654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
 800166a:	4b50      	ldr	r3, [pc, #320]	@ (80017ac <MX_GPIO_Init+0x15c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	4a4f      	ldr	r2, [pc, #316]	@ (80017ac <MX_GPIO_Init+0x15c>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	6313      	str	r3, [r2, #48]	@ 0x30
 8001676:	4b4d      	ldr	r3, [pc, #308]	@ (80017ac <MX_GPIO_Init+0x15c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
 8001686:	4b49      	ldr	r3, [pc, #292]	@ (80017ac <MX_GPIO_Init+0x15c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	4a48      	ldr	r2, [pc, #288]	@ (80017ac <MX_GPIO_Init+0x15c>)
 800168c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001690:	6313      	str	r3, [r2, #48]	@ 0x30
 8001692:	4b46      	ldr	r3, [pc, #280]	@ (80017ac <MX_GPIO_Init+0x15c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b42      	ldr	r3, [pc, #264]	@ (80017ac <MX_GPIO_Init+0x15c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a41      	ldr	r2, [pc, #260]	@ (80017ac <MX_GPIO_Init+0x15c>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b3f      	ldr	r3, [pc, #252]	@ (80017ac <MX_GPIO_Init+0x15c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b3b      	ldr	r3, [pc, #236]	@ (80017ac <MX_GPIO_Init+0x15c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a3a      	ldr	r2, [pc, #232]	@ (80017ac <MX_GPIO_Init+0x15c>)
 80016c4:	f043 0302 	orr.w	r3, r3, #2
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b38      	ldr	r3, [pc, #224]	@ (80017ac <MX_GPIO_Init+0x15c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b34      	ldr	r3, [pc, #208]	@ (80017ac <MX_GPIO_Init+0x15c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a33      	ldr	r2, [pc, #204]	@ (80017ac <MX_GPIO_Init+0x15c>)
 80016e0:	f043 0308 	orr.w	r3, r3, #8
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b31      	ldr	r3, [pc, #196]	@ (80017ac <MX_GPIO_Init+0x15c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
 80016f8:	482d      	ldr	r0, [pc, #180]	@ (80017b0 <MX_GPIO_Init+0x160>)
 80016fa:	f003 fcbb 	bl	8005074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001704:	482b      	ldr	r0, [pc, #172]	@ (80017b4 <MX_GPIO_Init+0x164>)
 8001706:	f003 fcb5 	bl	8005074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800170a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800170e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001714:	2302      	movs	r3, #2
 8001716:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	4826      	ldr	r0, [pc, #152]	@ (80017b8 <MX_GPIO_Init+0x168>)
 8001720:	f003 faf4 	bl	8004d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001724:	2302      	movs	r3, #2
 8001726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800172c:	2301      	movs	r3, #1
 800172e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	481f      	ldr	r0, [pc, #124]	@ (80017b4 <MX_GPIO_Init+0x164>)
 8001738:	f003 fae8 	bl	8004d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 LCD_RST_Pin LCD_BL_Pin LCD_CS_Pin
                           LCD_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_0 | LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin;
 800173c:	f240 13c7 	movw	r3, #455	@ 0x1c7
 8001740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4619      	mov	r1, r3
 8001754:	4816      	ldr	r0, [pc, #88]	@ (80017b0 <MX_GPIO_Init+0x160>)
 8001756:	f003 fad9 	bl	8004d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 800175a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4810      	ldr	r0, [pc, #64]	@ (80017b4 <MX_GPIO_Init+0x164>)
 8001774:	f003 faca 	bl	8004d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001778:	2310      	movs	r3, #16
 800177a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001782:	2301      	movs	r3, #1
 8001784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	4808      	ldr	r0, [pc, #32]	@ (80017b0 <MX_GPIO_Init+0x160>)
 800178e:	f003 fabd 	bl	8004d0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	200a      	movs	r0, #10
 8001798:	f003 fa43 	bl	8004c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800179c:	200a      	movs	r0, #10
 800179e:	f003 fa5c 	bl	8004c5a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	@ 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020400 	.word	0x40020400
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40020800 	.word	0x40020800

080017bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017bc:	b590      	push	{r4, r7, lr}
 80017be:	b087      	sub	sp, #28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TP_IRQ_Pin)
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	2b10      	cmp	r3, #16
 80017ca:	f040 80fc 	bne.w	80019c6 <HAL_GPIO_EXTI_Callback+0x20a>
  {
    if (HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == GPIO_PIN_RESET)
 80017ce:	2110      	movs	r1, #16
 80017d0:	487e      	ldr	r0, [pc, #504]	@ (80019cc <HAL_GPIO_EXTI_Callback+0x210>)
 80017d2:	f003 fc37 	bl	8005044 <HAL_GPIO_ReadPin>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f040 80f4 	bne.w	80019c6 <HAL_GPIO_EXTI_Callback+0x20a>
    {
      Coordinate rawPoint, displayPoint;
      int old_task = current_task; // Lưu task cũ
 80017de:	4b7c      	ldr	r3, [pc, #496]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x214>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	613b      	str	r3, [r7, #16]
      if (Manual_Touch_GetRawPoint(&rawPoint))
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4618      	mov	r0, r3
 80017ea:	f001 f8dd 	bl	80029a8 <Manual_Touch_GetRawPoint>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 80e8 	beq.w	80019c6 <HAL_GPIO_EXTI_Callback+0x20a>
      {
        Manual_Touch_ApplyCalibration(&displayPoint, &rawPoint);
 80017f6:	f107 020c 	add.w	r2, r7, #12
 80017fa:	f107 0308 	add.w	r3, r7, #8
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f001 f8e9 	bl	80029d8 <Manual_Touch_ApplyCalibration>

        // Kiểm tra xem có chạm vào task box nào không
        for (int i = 0; i < num_tasks; i++)
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	e096      	b.n	800193a <HAL_GPIO_EXTI_Callback+0x17e>
        {
          if (displayPoint.x >= task_boxes[i].x &&
 800180c:	8939      	ldrh	r1, [r7, #8]
 800180e:	4871      	ldr	r0, [pc, #452]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x218>)
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4403      	add	r3, r0
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	4299      	cmp	r1, r3
 8001820:	f0c0 8088 	bcc.w	8001934 <HAL_GPIO_EXTI_Callback+0x178>
              displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 8001824:	893b      	ldrh	r3, [r7, #8]
 8001826:	4618      	mov	r0, r3
 8001828:	496a      	ldr	r1, [pc, #424]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x218>)
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	4613      	mov	r3, r2
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	4413      	add	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	461c      	mov	r4, r3
 800183a:	4966      	ldr	r1, [pc, #408]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x218>)
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	440b      	add	r3, r1
 8001848:	3304      	adds	r3, #4
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	4423      	add	r3, r4
          if (displayPoint.x >= task_boxes[i].x &&
 800184e:	4298      	cmp	r0, r3
 8001850:	da70      	bge.n	8001934 <HAL_GPIO_EXTI_Callback+0x178>
              displayPoint.y >= task_boxes[i].y &&
 8001852:	8979      	ldrh	r1, [r7, #10]
 8001854:	485f      	ldr	r0, [pc, #380]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x218>)
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4403      	add	r3, r0
 8001862:	3302      	adds	r3, #2
 8001864:	881b      	ldrh	r3, [r3, #0]
              displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 8001866:	4299      	cmp	r1, r3
 8001868:	d364      	bcc.n	8001934 <HAL_GPIO_EXTI_Callback+0x178>
              displayPoint.y < (task_boxes[i].y + task_boxes[i].h))
 800186a:	897b      	ldrh	r3, [r7, #10]
 800186c:	4618      	mov	r0, r3
 800186e:	4959      	ldr	r1, [pc, #356]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x218>)
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	3302      	adds	r3, #2
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	461c      	mov	r4, r3
 8001882:	4954      	ldr	r1, [pc, #336]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x218>)
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	3306      	adds	r3, #6
 8001892:	881b      	ldrh	r3, [r3, #0]
 8001894:	4423      	add	r3, r4
              displayPoint.y >= task_boxes[i].y &&
 8001896:	4298      	cmp	r0, r3
 8001898:	da4c      	bge.n	8001934 <HAL_GPIO_EXTI_Callback+0x178>
          {
            current_task = i; // Đặt current_task thành index của task box
 800189a:	4a4d      	ldr	r2, [pc, #308]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x214>)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	6013      	str	r3, [r2, #0]

            // Khôi phục màu của task cũ nếu có
            if (old_task != i)
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d022      	beq.n	80018ee <HAL_GPIO_EXTI_Callback+0x132>
            {

              if (old_task >= 0 && old_task < num_tasks)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db11      	blt.n	80018d2 <HAL_GPIO_EXTI_Callback+0x116>
 80018ae:	4b4a      	ldr	r3, [pc, #296]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x21c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	da0c      	bge.n	80018d2 <HAL_GPIO_EXTI_Callback+0x116>
              {
                Manual_LCD_RefillTaskBox(task_boxes[old_task].name, COLOR_BLACK); // Khôi phục màu của task cũ
 80018b8:	4946      	ldr	r1, [pc, #280]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x218>)
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	3308      	adds	r3, #8
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f000 ff87 	bl	80027e0 <Manual_LCD_RefillTaskBox>
              }
              Manual_LCD_RefillTaskBox(task_boxes[i].name, COLOR_MAGENTA); // Đổi màu task box được chọn
 80018d2:	4940      	ldr	r1, [pc, #256]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x218>)
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	3308      	adds	r3, #8
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 ff79 	bl	80027e0 <Manual_LCD_RefillTaskBox>
            }

            if (i == 0)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d104      	bne.n	80018fe <HAL_GPIO_EXTI_Callback+0x142>
            {
              sprintf(info_text_buffer, "Task 02-1: BLINK LED");
 80018f4:	4939      	ldr	r1, [pc, #228]	@ (80019dc <HAL_GPIO_EXTI_Callback+0x220>)
 80018f6:	483a      	ldr	r0, [pc, #232]	@ (80019e0 <HAL_GPIO_EXTI_Callback+0x224>)
 80018f8:	f00b fcea 	bl	800d2d0 <siprintf>
 80018fc:	e016      	b.n	800192c <HAL_GPIO_EXTI_Callback+0x170>
            }
            else if (i == 1)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d104      	bne.n	800190e <HAL_GPIO_EXTI_Callback+0x152>
            {
              sprintf(info_text_buffer, "Task 02-2: CAN");
 8001904:	4937      	ldr	r1, [pc, #220]	@ (80019e4 <HAL_GPIO_EXTI_Callback+0x228>)
 8001906:	4836      	ldr	r0, [pc, #216]	@ (80019e0 <HAL_GPIO_EXTI_Callback+0x224>)
 8001908:	f00b fce2 	bl	800d2d0 <siprintf>
 800190c:	e00e      	b.n	800192c <HAL_GPIO_EXTI_Callback+0x170>
            }
            else if (i == 2)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d104      	bne.n	800191e <HAL_GPIO_EXTI_Callback+0x162>
            {
              sprintf(info_text_buffer, "Task 02-3: SD CARD");
 8001914:	4934      	ldr	r1, [pc, #208]	@ (80019e8 <HAL_GPIO_EXTI_Callback+0x22c>)
 8001916:	4832      	ldr	r0, [pc, #200]	@ (80019e0 <HAL_GPIO_EXTI_Callback+0x224>)
 8001918:	f00b fcda 	bl	800d2d0 <siprintf>
 800191c:	e006      	b.n	800192c <HAL_GPIO_EXTI_Callback+0x170>
            }
            else if (i == 3)
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2b03      	cmp	r3, #3
 8001922:	d103      	bne.n	800192c <HAL_GPIO_EXTI_Callback+0x170>
            {
              sprintf(info_text_buffer, "Task 02-4: FRAM");
 8001924:	4931      	ldr	r1, [pc, #196]	@ (80019ec <HAL_GPIO_EXTI_Callback+0x230>)
 8001926:	482e      	ldr	r0, [pc, #184]	@ (80019e0 <HAL_GPIO_EXTI_Callback+0x224>)
 8001928:	f00b fcd2 	bl	800d2d0 <siprintf>
            }
            Manual_LCD_UpdateInfoText(info_text_buffer);
 800192c:	482c      	ldr	r0, [pc, #176]	@ (80019e0 <HAL_GPIO_EXTI_Callback+0x224>)
 800192e:	f000 ff25 	bl	800277c <Manual_LCD_UpdateInfoText>

            return;
 8001932:	e048      	b.n	80019c6 <HAL_GPIO_EXTI_Callback+0x20a>
        for (int i = 0; i < num_tasks; i++)
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	3301      	adds	r3, #1
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	4b27      	ldr	r3, [pc, #156]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x21c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	429a      	cmp	r2, r3
 8001942:	f6ff af63 	blt.w	800180c <HAL_GPIO_EXTI_Callback+0x50>
          }
        }

        // Kiểm tra xem có chạm vào nút Back không
        if (displayPoint.x >= back_button_box.x &&
 8001946:	893a      	ldrh	r2, [r7, #8]
 8001948:	4b29      	ldr	r3, [pc, #164]	@ (80019f0 <HAL_GPIO_EXTI_Callback+0x234>)
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d33a      	bcc.n	80019c6 <HAL_GPIO_EXTI_Callback+0x20a>
            displayPoint.x < (back_button_box.x + back_button_box.w) &&
 8001950:	893b      	ldrh	r3, [r7, #8]
 8001952:	461a      	mov	r2, r3
 8001954:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <HAL_GPIO_EXTI_Callback+0x234>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	4b25      	ldr	r3, [pc, #148]	@ (80019f0 <HAL_GPIO_EXTI_Callback+0x234>)
 800195c:	889b      	ldrh	r3, [r3, #4]
 800195e:	440b      	add	r3, r1
        if (displayPoint.x >= back_button_box.x &&
 8001960:	429a      	cmp	r2, r3
 8001962:	da30      	bge.n	80019c6 <HAL_GPIO_EXTI_Callback+0x20a>
            displayPoint.y >= back_button_box.y &&
 8001964:	897a      	ldrh	r2, [r7, #10]
 8001966:	4b22      	ldr	r3, [pc, #136]	@ (80019f0 <HAL_GPIO_EXTI_Callback+0x234>)
 8001968:	885b      	ldrh	r3, [r3, #2]
            displayPoint.x < (back_button_box.x + back_button_box.w) &&
 800196a:	429a      	cmp	r2, r3
 800196c:	d32b      	bcc.n	80019c6 <HAL_GPIO_EXTI_Callback+0x20a>
            displayPoint.y < (back_button_box.y + back_button_box.h))
 800196e:	897b      	ldrh	r3, [r7, #10]
 8001970:	461a      	mov	r2, r3
 8001972:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <HAL_GPIO_EXTI_Callback+0x234>)
 8001974:	885b      	ldrh	r3, [r3, #2]
 8001976:	4619      	mov	r1, r3
 8001978:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <HAL_GPIO_EXTI_Callback+0x234>)
 800197a:	88db      	ldrh	r3, [r3, #6]
 800197c:	440b      	add	r3, r1
            displayPoint.y >= back_button_box.y &&
 800197e:	429a      	cmp	r2, r3
 8001980:	da21      	bge.n	80019c6 <HAL_GPIO_EXTI_Callback+0x20a>
        {
          current_task = -1; // Nút Back
 8001982:	4b13      	ldr	r3, [pc, #76]	@ (80019d0 <HAL_GPIO_EXTI_Callback+0x214>)
 8001984:	f04f 32ff 	mov.w	r2, #4294967295
 8001988:	601a      	str	r2, [r3, #0]
          if (old_task >= 0 && old_task < num_tasks)
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	2b00      	cmp	r3, #0
 800198e:	db19      	blt.n	80019c4 <HAL_GPIO_EXTI_Callback+0x208>
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <HAL_GPIO_EXTI_Callback+0x21c>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	429a      	cmp	r2, r3
 8001998:	da14      	bge.n	80019c4 <HAL_GPIO_EXTI_Callback+0x208>
          {
            Manual_LCD_RefillTaskBox(task_boxes[old_task].name, COLOR_BLACK); // Khôi phục màu của task cũ
 800199a:	490e      	ldr	r1, [pc, #56]	@ (80019d4 <HAL_GPIO_EXTI_Callback+0x218>)
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4613      	mov	r3, r2
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	4413      	add	r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	3308      	adds	r3, #8
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2100      	movs	r1, #0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 ff16 	bl	80027e0 <Manual_LCD_RefillTaskBox>
            sprintf(info_text_buffer, "Nhom %02d", GROUP_NUMBER);
 80019b4:	2209      	movs	r2, #9
 80019b6:	490f      	ldr	r1, [pc, #60]	@ (80019f4 <HAL_GPIO_EXTI_Callback+0x238>)
 80019b8:	4809      	ldr	r0, [pc, #36]	@ (80019e0 <HAL_GPIO_EXTI_Callback+0x224>)
 80019ba:	f00b fc89 	bl	800d2d0 <siprintf>
            Manual_LCD_UpdateInfoText(info_text_buffer); // Cập nhật lại thông tin
 80019be:	4808      	ldr	r0, [pc, #32]	@ (80019e0 <HAL_GPIO_EXTI_Callback+0x224>)
 80019c0:	f000 fedc 	bl	800277c <Manual_LCD_UpdateInfoText>
          }
          return;
 80019c4:	bf00      	nop
        }
      }
    }
  }
}
 80019c6:	371c      	adds	r7, #28
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd90      	pop	{r4, r7, pc}
 80019cc:	40020400 	.word	0x40020400
 80019d0:	20000000 	.word	0x20000000
 80019d4:	2000047c 	.word	0x2000047c
 80019d8:	20000518 	.word	0x20000518
 80019dc:	0800dd3c 	.word	0x0800dd3c
 80019e0:	200006e0 	.word	0x200006e0
 80019e4:	0800dd54 	.word	0x0800dd54
 80019e8:	0800dd64 	.word	0x0800dd64
 80019ec:	0800dd78 	.word	0x0800dd78
 80019f0:	20000740 	.word	0x20000740
 80019f4:	0800dd88 	.word	0x0800dd88

080019f8 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if (hcan->Instance == CAN2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0f      	ldr	r2, [pc, #60]	@ (8001a44 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d117      	bne.n	8001a3a <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
  {
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader2, RxData2) == HAL_OK)
 8001a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a48 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a4c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001a0e:	2100      	movs	r1, #0
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f002 fc8f 	bl	8004334 <HAL_CAN_GetRxMessage>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10e      	bne.n	8001a3a <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
    {
      // Giải mã dữ liệu nhận được (Tùy chọn, để debug)
      if (RxHeader2.DLC >= 2) // Đảm bảo có đủ dữ liệu
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d90a      	bls.n	8001a3a <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
      {
        can2_received_group = RxData2[0];
 8001a24:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8001a2a:	701a      	strb	r2, [r3, #0]
        can2_received_temperature = RxData2[1];
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001a2e:	785a      	ldrb	r2, [r3, #1]
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8001a32:	701a      	strb	r2, [r3, #0]
        can2_received_data_flag = 1; // Đánh dấu đã nhận dữ liệu
 8001a34:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
      }
    }
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40006800 	.word	0x40006800
 8001a48:	20000478 	.word	0x20000478
 8001a4c:	20000540 	.word	0x20000540
 8001a50:	200005fe 	.word	0x200005fe
 8001a54:	20000685 	.word	0x20000685
 8001a58:	2000007c 	.word	0x2000007c

08001a5c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a60:	b672      	cpsid	i
}
 8001a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <Error_Handler+0x8>

08001a68 <LCD_SPI_Send>:
// External SPI handle defined in main.c
extern SPI_HandleTypeDef hspi1;

// Low-level SPI communication functions
static void LCD_SPI_Send(uint8_t data)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8001a72:	1df9      	adds	r1, r7, #7
 8001a74:	f04f 33ff 	mov.w	r3, #4294967295
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4803      	ldr	r0, [pc, #12]	@ (8001a88 <LCD_SPI_Send+0x20>)
 8001a7c:	f007 fe5f 	bl	800973e <HAL_SPI_Transmit>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000688 	.word	0x20000688

08001a8c <LCD_Write_Cmd>:

static void LCD_Write_Cmd(uint8_t cmd)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // DC low for command
 8001a96:	2200      	movs	r2, #0
 8001a98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a9c:	480a      	ldr	r0, [pc, #40]	@ (8001ac8 <LCD_Write_Cmd+0x3c>)
 8001a9e:	f003 fae9 	bl	8005074 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2180      	movs	r1, #128	@ 0x80
 8001aa6:	4808      	ldr	r0, [pc, #32]	@ (8001ac8 <LCD_Write_Cmd+0x3c>)
 8001aa8:	f003 fae4 	bl	8005074 <HAL_GPIO_WritePin>
    LCD_SPI_Send(cmd);
 8001aac:	79fb      	ldrb	r3, [r7, #7]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ffda 	bl	8001a68 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	2180      	movs	r1, #128	@ 0x80
 8001ab8:	4803      	ldr	r0, [pc, #12]	@ (8001ac8 <LCD_Write_Cmd+0x3c>)
 8001aba:	f003 fadb 	bl	8005074 <HAL_GPIO_WritePin>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40020400 	.word	0x40020400

08001acc <LCD_Write_Data>:

static void LCD_Write_Data(uint8_t data)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001adc:	480a      	ldr	r0, [pc, #40]	@ (8001b08 <LCD_Write_Data+0x3c>)
 8001ade:	f003 fac9 	bl	8005074 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2180      	movs	r1, #128	@ 0x80
 8001ae6:	4808      	ldr	r0, [pc, #32]	@ (8001b08 <LCD_Write_Data+0x3c>)
 8001ae8:	f003 fac4 	bl	8005074 <HAL_GPIO_WritePin>
    LCD_SPI_Send(data);
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ffba 	bl	8001a68 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001af4:	2201      	movs	r2, #1
 8001af6:	2180      	movs	r1, #128	@ 0x80
 8001af8:	4803      	ldr	r0, [pc, #12]	@ (8001b08 <LCD_Write_Data+0x3c>)
 8001afa:	f003 fabb 	bl	8005074 <HAL_GPIO_WritePin>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40020400 	.word	0x40020400

08001b0c <LCD_Write_Data16>:

static void LCD_Write_Data16(uint16_t data)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b1c:	4810      	ldr	r0, [pc, #64]	@ (8001b60 <LCD_Write_Data16+0x54>)
 8001b1e:	f003 faa9 	bl	8005074 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001b22:	2200      	movs	r2, #0
 8001b24:	2180      	movs	r1, #128	@ 0x80
 8001b26:	480e      	ldr	r0, [pc, #56]	@ (8001b60 <LCD_Write_Data16+0x54>)
 8001b28:	f003 faa4 	bl	8005074 <HAL_GPIO_WritePin>
    uint8_t bytes[2];
    bytes[0] = (data >> 8) & 0xFF;
 8001b2c:	88fb      	ldrh	r3, [r7, #6]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	733b      	strb	r3, [r7, #12]
    bytes[1] = data & 0xFF;
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, bytes, 2, HAL_MAX_DELAY);
 8001b3c:	f107 010c 	add.w	r1, r7, #12
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
 8001b44:	2202      	movs	r2, #2
 8001b46:	4807      	ldr	r0, [pc, #28]	@ (8001b64 <LCD_Write_Data16+0x58>)
 8001b48:	f007 fdf9 	bl	800973e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2180      	movs	r1, #128	@ 0x80
 8001b50:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <LCD_Write_Data16+0x54>)
 8001b52:	f003 fa8f 	bl	8005074 <HAL_GPIO_WritePin>
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40020400 	.word	0x40020400
 8001b64:	20000688 	.word	0x20000688

08001b68 <LCD_Set_Address_Window>:

// Set drawing window
static void LCD_Set_Address_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4604      	mov	r4, r0
 8001b70:	4608      	mov	r0, r1
 8001b72:	4611      	mov	r1, r2
 8001b74:	461a      	mov	r2, r3
 8001b76:	4623      	mov	r3, r4
 8001b78:	80fb      	strh	r3, [r7, #6]
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80bb      	strh	r3, [r7, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	807b      	strh	r3, [r7, #2]
 8001b82:	4613      	mov	r3, r2
 8001b84:	803b      	strh	r3, [r7, #0]
    LCD_Write_Cmd(0x2A); // Column Address Set
 8001b86:	202a      	movs	r0, #42	@ 0x2a
 8001b88:	f7ff ff80 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(x1 >> 8);
 8001b8c:	88fb      	ldrh	r3, [r7, #6]
 8001b8e:	0a1b      	lsrs	r3, r3, #8
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff ff99 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(x1 & 0xFF);
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff ff94 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(x2 >> 8);
 8001ba4:	887b      	ldrh	r3, [r7, #2]
 8001ba6:	0a1b      	lsrs	r3, r3, #8
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff8d 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(x2 & 0xFF);
 8001bb2:	887b      	ldrh	r3, [r7, #2]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff88 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0x2B); // Page Address Set
 8001bbc:	202b      	movs	r0, #43	@ 0x2b
 8001bbe:	f7ff ff65 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(y1 >> 8);
 8001bc2:	88bb      	ldrh	r3, [r7, #4]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff7e 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(y1 & 0xFF);
 8001bd0:	88bb      	ldrh	r3, [r7, #4]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff79 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(y2 >> 8);
 8001bda:	883b      	ldrh	r3, [r7, #0]
 8001bdc:	0a1b      	lsrs	r3, r3, #8
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff ff72 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(y2 & 0xFF);
 8001be8:	883b      	ldrh	r3, [r7, #0]
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff6d 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0x2C); // Memory Write
 8001bf2:	202c      	movs	r0, #44	@ 0x2c
 8001bf4:	f7ff ff4a 	bl	8001a8c <LCD_Write_Cmd>
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd90      	pop	{r4, r7, pc}

08001c00 <Manual_LCD_Init>:
        }
    }
}

void Manual_LCD_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0

    // Hardware Reset
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2104      	movs	r1, #4
 8001c08:	4889      	ldr	r0, [pc, #548]	@ (8001e30 <Manual_LCD_Init+0x230>)
 8001c0a:	f003 fa33 	bl	8005074 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001c0e:	2064      	movs	r0, #100	@ 0x64
 8001c10:	f001 fc7e 	bl	8003510 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001c14:	2201      	movs	r2, #1
 8001c16:	2104      	movs	r1, #4
 8001c18:	4885      	ldr	r0, [pc, #532]	@ (8001e30 <Manual_LCD_Init+0x230>)
 8001c1a:	f003 fa2b 	bl	8005074 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001c1e:	2064      	movs	r0, #100	@ 0x64
 8001c20:	f001 fc76 	bl	8003510 <HAL_Delay>

    // Backlight ON
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8001c24:	2201      	movs	r2, #1
 8001c26:	2140      	movs	r1, #64	@ 0x40
 8001c28:	4881      	ldr	r0, [pc, #516]	@ (8001e30 <Manual_LCD_Init+0x230>)
 8001c2a:	f003 fa23 	bl	8005074 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001c2e:	200a      	movs	r0, #10
 8001c30:	f001 fc6e 	bl	8003510 <HAL_Delay>

    // Initialization sequence (Example for ILI9341 - ADJUST FOR YOUR LCD)
    LCD_Write_Cmd(0xCF); // Power Control B
 8001c34:	20cf      	movs	r0, #207	@ 0xcf
 8001c36:	f7ff ff29 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f7ff ff46 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 8001c40:	20c1      	movs	r0, #193	@ 0xc1
 8001c42:	f7ff ff43 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x30);
 8001c46:	2030      	movs	r0, #48	@ 0x30
 8001c48:	f7ff ff40 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0xED); // Power on sequence control
 8001c4c:	20ed      	movs	r0, #237	@ 0xed
 8001c4e:	f7ff ff1d 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x64);
 8001c52:	2064      	movs	r0, #100	@ 0x64
 8001c54:	f7ff ff3a 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001c58:	2003      	movs	r0, #3
 8001c5a:	f7ff ff37 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x12);
 8001c5e:	2012      	movs	r0, #18
 8001c60:	f7ff ff34 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x81);
 8001c64:	2081      	movs	r0, #129	@ 0x81
 8001c66:	f7ff ff31 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0xE8); // Driver timing control A
 8001c6a:	20e8      	movs	r0, #232	@ 0xe8
 8001c6c:	f7ff ff0e 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x85);
 8001c70:	2085      	movs	r0, #133	@ 0x85
 8001c72:	f7ff ff2b 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff ff28 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x78);
 8001c7c:	2078      	movs	r0, #120	@ 0x78
 8001c7e:	f7ff ff25 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0xCB); // Power control A
 8001c82:	20cb      	movs	r0, #203	@ 0xcb
 8001c84:	f7ff ff02 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x39);
 8001c88:	2039      	movs	r0, #57	@ 0x39
 8001c8a:	f7ff ff1f 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x2C);
 8001c8e:	202c      	movs	r0, #44	@ 0x2c
 8001c90:	f7ff ff1c 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001c94:	2000      	movs	r0, #0
 8001c96:	f7ff ff19 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x34);
 8001c9a:	2034      	movs	r0, #52	@ 0x34
 8001c9c:	f7ff ff16 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x02);
 8001ca0:	2002      	movs	r0, #2
 8001ca2:	f7ff ff13 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0xF7); // Pump ratio control
 8001ca6:	20f7      	movs	r0, #247	@ 0xf7
 8001ca8:	f7ff fef0 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x20);
 8001cac:	2020      	movs	r0, #32
 8001cae:	f7ff ff0d 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0xEA); // Driver timing control B
 8001cb2:	20ea      	movs	r0, #234	@ 0xea
 8001cb4:	f7ff feea 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff ff07 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001cbe:	2000      	movs	r0, #0
 8001cc0:	f7ff ff04 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0xC0);  // Power Control 1
 8001cc4:	20c0      	movs	r0, #192	@ 0xc0
 8001cc6:	f7ff fee1 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x23); // VRH[5:0]
 8001cca:	2023      	movs	r0, #35	@ 0x23
 8001ccc:	f7ff fefe 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0xC1);  // Power Control 2
 8001cd0:	20c1      	movs	r0, #193	@ 0xc1
 8001cd2:	f7ff fedb 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x10); // SAP[2:0];BT[3:0]
 8001cd6:	2010      	movs	r0, #16
 8001cd8:	f7ff fef8 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0xC5);  // VCOM Control 1
 8001cdc:	20c5      	movs	r0, #197	@ 0xc5
 8001cde:	f7ff fed5 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x3E); // Contrast
 8001ce2:	203e      	movs	r0, #62	@ 0x3e
 8001ce4:	f7ff fef2 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x28);
 8001ce8:	2028      	movs	r0, #40	@ 0x28
 8001cea:	f7ff feef 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0xC7);  // VCOM Control 2
 8001cee:	20c7      	movs	r0, #199	@ 0xc7
 8001cf0:	f7ff fecc 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x86); // --
 8001cf4:	2086      	movs	r0, #134	@ 0x86
 8001cf6:	f7ff fee9 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0x36); // Memory Access Control
 8001cfa:	2036      	movs	r0, #54	@ 0x36
 8001cfc:	f7ff fec6 	bl	8001a8c <LCD_Write_Cmd>
    // LCD_Write_Data(0x08); // Previous value
    LCD_Write_Data(0x28); // Try this: MV=1, MY=0, MX=0, BGR=1 (Landscape, X:T-B, Y:L-R)
 8001d00:	2028      	movs	r0, #40	@ 0x28
 8001d02:	f7ff fee3 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0x3A);  // Pixel Format Set
 8001d06:	203a      	movs	r0, #58	@ 0x3a
 8001d08:	f7ff fec0 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x55); // 16 bits/pixel
 8001d0c:	2055      	movs	r0, #85	@ 0x55
 8001d0e:	f7ff fedd 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0xB1); // Frame Rate Control (In Normal Mode/Full Colors)
 8001d12:	20b1      	movs	r0, #177	@ 0xb1
 8001d14:	f7ff feba 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f7ff fed7 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x18);
 8001d1e:	2018      	movs	r0, #24
 8001d20:	f7ff fed4 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0xB6); // Display Function Control
 8001d24:	20b6      	movs	r0, #182	@ 0xb6
 8001d26:	f7ff feb1 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x08);
 8001d2a:	2008      	movs	r0, #8
 8001d2c:	f7ff fece 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x82);
 8001d30:	2082      	movs	r0, #130	@ 0x82
 8001d32:	f7ff fecb 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x27);
 8001d36:	2027      	movs	r0, #39	@ 0x27
 8001d38:	f7ff fec8 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0xF2);  // Enable 3G
 8001d3c:	20f2      	movs	r0, #242	@ 0xf2
 8001d3e:	f7ff fea5 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x00); // 3Gamma Function Disable
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7ff fec2 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0x26);  // Gamma Set
 8001d48:	2026      	movs	r0, #38	@ 0x26
 8001d4a:	f7ff fe9f 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x01); // Gamma curve selected
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f7ff febc 	bl	8001acc <LCD_Write_Data>

    // ... (Positive and Negative Gamma Correction remain the same) ...
    LCD_Write_Cmd(0xE0); // Positive Gamma Correction
 8001d54:	20e0      	movs	r0, #224	@ 0xe0
 8001d56:	f7ff fe99 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x0F);
 8001d5a:	200f      	movs	r0, #15
 8001d5c:	f7ff feb6 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001d60:	2031      	movs	r0, #49	@ 0x31
 8001d62:	f7ff feb3 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x2B);
 8001d66:	202b      	movs	r0, #43	@ 0x2b
 8001d68:	f7ff feb0 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8001d6c:	200c      	movs	r0, #12
 8001d6e:	f7ff fead 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001d72:	200e      	movs	r0, #14
 8001d74:	f7ff feaa 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8001d78:	2008      	movs	r0, #8
 8001d7a:	f7ff fea7 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x4E);
 8001d7e:	204e      	movs	r0, #78	@ 0x4e
 8001d80:	f7ff fea4 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0xF1);
 8001d84:	20f1      	movs	r0, #241	@ 0xf1
 8001d86:	f7ff fea1 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x37);
 8001d8a:	2037      	movs	r0, #55	@ 0x37
 8001d8c:	f7ff fe9e 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x07);
 8001d90:	2007      	movs	r0, #7
 8001d92:	f7ff fe9b 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x10);
 8001d96:	2010      	movs	r0, #16
 8001d98:	f7ff fe98 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f7ff fe95 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001da2:	200e      	movs	r0, #14
 8001da4:	f7ff fe92 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x09);
 8001da8:	2009      	movs	r0, #9
 8001daa:	f7ff fe8f 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f7ff fe8c 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0xE1); // Negative Gamma Correction
 8001db4:	20e1      	movs	r0, #225	@ 0xe1
 8001db6:	f7ff fe69 	bl	8001a8c <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff fe86 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001dc0:	200e      	movs	r0, #14
 8001dc2:	f7ff fe83 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x14);
 8001dc6:	2014      	movs	r0, #20
 8001dc8:	f7ff fe80 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001dcc:	2003      	movs	r0, #3
 8001dce:	f7ff fe7d 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x11);
 8001dd2:	2011      	movs	r0, #17
 8001dd4:	f7ff fe7a 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x07);
 8001dd8:	2007      	movs	r0, #7
 8001dda:	f7ff fe77 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001dde:	2031      	movs	r0, #49	@ 0x31
 8001de0:	f7ff fe74 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 8001de4:	20c1      	movs	r0, #193	@ 0xc1
 8001de6:	f7ff fe71 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x48);
 8001dea:	2048      	movs	r0, #72	@ 0x48
 8001dec:	f7ff fe6e 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8001df0:	2008      	movs	r0, #8
 8001df2:	f7ff fe6b 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8001df6:	200f      	movs	r0, #15
 8001df8:	f7ff fe68 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8001dfc:	200c      	movs	r0, #12
 8001dfe:	f7ff fe65 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001e02:	2031      	movs	r0, #49	@ 0x31
 8001e04:	f7ff fe62 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x36);
 8001e08:	2036      	movs	r0, #54	@ 0x36
 8001e0a:	f7ff fe5f 	bl	8001acc <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8001e0e:	200f      	movs	r0, #15
 8001e10:	f7ff fe5c 	bl	8001acc <LCD_Write_Data>

    LCD_Write_Cmd(0x11); // Exit Sleep
 8001e14:	2011      	movs	r0, #17
 8001e16:	f7ff fe39 	bl	8001a8c <LCD_Write_Cmd>
    HAL_Delay(120);
 8001e1a:	2078      	movs	r0, #120	@ 0x78
 8001e1c:	f001 fb78 	bl	8003510 <HAL_Delay>
    LCD_Write_Cmd(0x29); // Display ON
 8001e20:	2029      	movs	r0, #41	@ 0x29
 8001e22:	f7ff fe33 	bl	8001a8c <LCD_Write_Cmd>

    Manual_LCD_Clear(COLOR_BLACK);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f000 f804 	bl	8001e34 <Manual_LCD_Clear>

    // Enable touch interrupt
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40020400 	.word	0x40020400

08001e34 <Manual_LCD_Clear>:

void Manual_LCD_Clear(uint16_t color)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	80fb      	strh	r3, [r7, #6]
    LCD_Set_Address_Window(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 8001e3e:	f240 133f 	movw	r3, #319	@ 0x13f
 8001e42:	22ef      	movs	r2, #239	@ 0xef
 8001e44:	2100      	movs	r1, #0
 8001e46:	2000      	movs	r0, #0
 8001e48:	f7ff fe8e 	bl	8001b68 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e52:	4815      	ldr	r0, [pc, #84]	@ (8001ea8 <Manual_LCD_Clear+0x74>)
 8001e54:	f003 f90e 	bl	8005074 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001e58:	2200      	movs	r2, #0
 8001e5a:	2180      	movs	r1, #128	@ 0x80
 8001e5c:	4812      	ldr	r0, [pc, #72]	@ (8001ea8 <Manual_LCD_Clear+0x74>)
 8001e5e:	f003 f909 	bl	8005074 <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	723b      	strb	r3, [r7, #8]
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	e00a      	b.n	8001e8e <Manual_LCD_Clear+0x5a>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8001e78:	f107 0108 	add.w	r1, r7, #8
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e80:	2202      	movs	r2, #2
 8001e82:	480a      	ldr	r0, [pc, #40]	@ (8001eac <Manual_LCD_Clear+0x78>)
 8001e84:	f007 fc5b 	bl	800973e <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001e94:	d3f0      	bcc.n	8001e78 <Manual_LCD_Clear+0x44>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001e96:	2201      	movs	r2, #1
 8001e98:	2180      	movs	r1, #128	@ 0x80
 8001e9a:	4803      	ldr	r0, [pc, #12]	@ (8001ea8 <Manual_LCD_Clear+0x74>)
 8001e9c:	f003 f8ea 	bl	8005074 <HAL_GPIO_WritePin>
}
 8001ea0:	bf00      	nop
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	20000688 	.word	0x20000688

08001eb0 <Manual_LCD_DrawPixel>:

void Manual_LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	80fb      	strh	r3, [r7, #6]
 8001eba:	460b      	mov	r3, r1
 8001ebc:	80bb      	strh	r3, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	807b      	strh	r3, [r7, #2]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	2bef      	cmp	r3, #239	@ 0xef
 8001ec6:	d80e      	bhi.n	8001ee6 <Manual_LCD_DrawPixel+0x36>
 8001ec8:	88bb      	ldrh	r3, [r7, #4]
 8001eca:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001ece:	d20a      	bcs.n	8001ee6 <Manual_LCD_DrawPixel+0x36>
        return;
    LCD_Set_Address_Window(x, y, x, y);
 8001ed0:	88bb      	ldrh	r3, [r7, #4]
 8001ed2:	88fa      	ldrh	r2, [r7, #6]
 8001ed4:	88b9      	ldrh	r1, [r7, #4]
 8001ed6:	88f8      	ldrh	r0, [r7, #6]
 8001ed8:	f7ff fe46 	bl	8001b68 <LCD_Set_Address_Window>
    LCD_Write_Data16(color);
 8001edc:	887b      	ldrh	r3, [r7, #2]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fe14 	bl	8001b0c <LCD_Write_Data16>
 8001ee4:	e000      	b.n	8001ee8 <Manual_LCD_DrawPixel+0x38>
        return;
 8001ee6:	bf00      	nop
}
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <Manual_LCD_DrawLine>:

void Manual_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8001eee:	b590      	push	{r4, r7, lr}
 8001ef0:	b087      	sub	sp, #28
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4604      	mov	r4, r0
 8001ef6:	4608      	mov	r0, r1
 8001ef8:	4611      	mov	r1, r2
 8001efa:	461a      	mov	r2, r3
 8001efc:	4623      	mov	r3, r4
 8001efe:	80fb      	strh	r3, [r7, #6]
 8001f00:	4603      	mov	r3, r0
 8001f02:	80bb      	strh	r3, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	807b      	strh	r3, [r7, #2]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001f0c:	883a      	ldrh	r2, [r7, #0]
 8001f0e:	88bb      	ldrh	r3, [r7, #4]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001f16:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001f1a:	8879      	ldrh	r1, [r7, #2]
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	1acb      	subs	r3, r1, r3
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bfb8      	it	lt
 8001f24:	425b      	neglt	r3, r3
 8001f26:	429a      	cmp	r2, r3
 8001f28:	bfcc      	ite	gt
 8001f2a:	2301      	movgt	r3, #1
 8001f2c:	2300      	movle	r3, #0
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	827b      	strh	r3, [r7, #18]
    if (steep)
 8001f32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00b      	beq.n	8001f52 <Manual_LCD_DrawLine+0x64>
    {
        uint16_t temp;
        temp = x1;
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	823b      	strh	r3, [r7, #16]
        x1 = y1;
 8001f3e:	88bb      	ldrh	r3, [r7, #4]
 8001f40:	80fb      	strh	r3, [r7, #6]
        y1 = temp;
 8001f42:	8a3b      	ldrh	r3, [r7, #16]
 8001f44:	80bb      	strh	r3, [r7, #4]
        temp = x2;
 8001f46:	887b      	ldrh	r3, [r7, #2]
 8001f48:	823b      	strh	r3, [r7, #16]
        x2 = y2;
 8001f4a:	883b      	ldrh	r3, [r7, #0]
 8001f4c:	807b      	strh	r3, [r7, #2]
        y2 = temp;
 8001f4e:	8a3b      	ldrh	r3, [r7, #16]
 8001f50:	803b      	strh	r3, [r7, #0]
    }
    if (x1 > x2)
 8001f52:	88fa      	ldrh	r2, [r7, #6]
 8001f54:	887b      	ldrh	r3, [r7, #2]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d90b      	bls.n	8001f72 <Manual_LCD_DrawLine+0x84>
    {
        uint16_t temp;
        temp = x1;
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	81fb      	strh	r3, [r7, #14]
        x1 = x2;
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	80fb      	strh	r3, [r7, #6]
        x2 = temp;
 8001f62:	89fb      	ldrh	r3, [r7, #14]
 8001f64:	807b      	strh	r3, [r7, #2]
        temp = y1;
 8001f66:	88bb      	ldrh	r3, [r7, #4]
 8001f68:	81fb      	strh	r3, [r7, #14]
        y1 = y2;
 8001f6a:	883b      	ldrh	r3, [r7, #0]
 8001f6c:	80bb      	strh	r3, [r7, #4]
        y2 = temp;
 8001f6e:	89fb      	ldrh	r3, [r7, #14]
 8001f70:	803b      	strh	r3, [r7, #0]
    }
    int16_t dx = x2 - x1;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	81bb      	strh	r3, [r7, #12]
    int16_t dy = abs(y2 - y1);
 8001f7c:	883a      	ldrh	r2, [r7, #0]
 8001f7e:	88bb      	ldrh	r3, [r7, #4]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	bfb8      	it	lt
 8001f86:	425b      	neglt	r3, r3
 8001f88:	817b      	strh	r3, [r7, #10]
    int16_t err = dx / 2;
 8001f8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001f8e:	0fda      	lsrs	r2, r3, #31
 8001f90:	4413      	add	r3, r2
 8001f92:	105b      	asrs	r3, r3, #1
 8001f94:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;
    if (y1 < y2)
 8001f96:	88ba      	ldrh	r2, [r7, #4]
 8001f98:	883b      	ldrh	r3, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d202      	bcs.n	8001fa4 <Manual_LCD_DrawLine+0xb6>
        ystep = 1;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	82bb      	strh	r3, [r7, #20]
 8001fa2:	e029      	b.n	8001ff8 <Manual_LCD_DrawLine+0x10a>
    else
        ystep = -1;
 8001fa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fa8:	82bb      	strh	r3, [r7, #20]

    for (; x1 <= x2; x1++)
 8001faa:	e025      	b.n	8001ff8 <Manual_LCD_DrawLine+0x10a>
    {
        if (steep)
 8001fac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d006      	beq.n	8001fc2 <Manual_LCD_DrawLine+0xd4>
            Manual_LCD_DrawPixel(y1, x1, color);
 8001fb4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001fb6:	88f9      	ldrh	r1, [r7, #6]
 8001fb8:	88bb      	ldrh	r3, [r7, #4]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff ff78 	bl	8001eb0 <Manual_LCD_DrawPixel>
 8001fc0:	e005      	b.n	8001fce <Manual_LCD_DrawLine+0xe0>
        else
            Manual_LCD_DrawPixel(x1, y1, color);
 8001fc2:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001fc4:	88b9      	ldrh	r1, [r7, #4]
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff71 	bl	8001eb0 <Manual_LCD_DrawPixel>
        err -= dy;
 8001fce:	8afa      	ldrh	r2, [r7, #22]
 8001fd0:	897b      	ldrh	r3, [r7, #10]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	82fb      	strh	r3, [r7, #22]
        if (err < 0)
 8001fd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	da08      	bge.n	8001ff2 <Manual_LCD_DrawLine+0x104>
        {
            y1 += ystep;
 8001fe0:	8aba      	ldrh	r2, [r7, #20]
 8001fe2:	88bb      	ldrh	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8001fe8:	8afa      	ldrh	r2, [r7, #22]
 8001fea:	89bb      	ldrh	r3, [r7, #12]
 8001fec:	4413      	add	r3, r2
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	82fb      	strh	r3, [r7, #22]
    for (; x1 <= x2; x1++)
 8001ff2:	88fb      	ldrh	r3, [r7, #6]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	80fb      	strh	r3, [r7, #6]
 8001ff8:	88fa      	ldrh	r2, [r7, #6]
 8001ffa:	887b      	ldrh	r3, [r7, #2]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d9d5      	bls.n	8001fac <Manual_LCD_DrawLine+0xbe>
        }
    }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	371c      	adds	r7, #28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd90      	pop	{r4, r7, pc}

0800200a <Manual_LCD_DrawRectangle>:

void Manual_LCD_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 800200a:	b590      	push	{r4, r7, lr}
 800200c:	b085      	sub	sp, #20
 800200e:	af02      	add	r7, sp, #8
 8002010:	4604      	mov	r4, r0
 8002012:	4608      	mov	r0, r1
 8002014:	4611      	mov	r1, r2
 8002016:	461a      	mov	r2, r3
 8002018:	4623      	mov	r3, r4
 800201a:	80fb      	strh	r3, [r7, #6]
 800201c:	4603      	mov	r3, r0
 800201e:	80bb      	strh	r3, [r7, #4]
 8002020:	460b      	mov	r3, r1
 8002022:	807b      	strh	r3, [r7, #2]
 8002024:	4613      	mov	r3, r2
 8002026:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	2bef      	cmp	r3, #239	@ 0xef
 800202c:	d865      	bhi.n	80020fa <Manual_LCD_DrawRectangle+0xf0>
 800202e:	88bb      	ldrh	r3, [r7, #4]
 8002030:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002034:	d261      	bcs.n	80020fa <Manual_LCD_DrawRectangle+0xf0>
        return;
    if ((x + width - 1) >= LCD_WIDTH)
 8002036:	88fa      	ldrh	r2, [r7, #6]
 8002038:	887b      	ldrh	r3, [r7, #2]
 800203a:	4413      	add	r3, r2
 800203c:	2bf0      	cmp	r3, #240	@ 0xf0
 800203e:	dd03      	ble.n	8002048 <Manual_LCD_DrawRectangle+0x3e>
        width = LCD_WIDTH - x;
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8002046:	807b      	strh	r3, [r7, #2]
    if ((y + height - 1) >= LCD_HEIGHT)
 8002048:	88ba      	ldrh	r2, [r7, #4]
 800204a:	883b      	ldrh	r3, [r7, #0]
 800204c:	4413      	add	r3, r2
 800204e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002052:	dd03      	ble.n	800205c <Manual_LCD_DrawRectangle+0x52>
        height = LCD_HEIGHT - y;
 8002054:	88bb      	ldrh	r3, [r7, #4]
 8002056:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800205a:	803b      	strh	r3, [r7, #0]

    Manual_LCD_DrawLine(x, y, x + width - 1, y, color);
 800205c:	88fa      	ldrh	r2, [r7, #6]
 800205e:	887b      	ldrh	r3, [r7, #2]
 8002060:	4413      	add	r3, r2
 8002062:	b29b      	uxth	r3, r3
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	88bc      	ldrh	r4, [r7, #4]
 800206a:	88b9      	ldrh	r1, [r7, #4]
 800206c:	88f8      	ldrh	r0, [r7, #6]
 800206e:	8b3b      	ldrh	r3, [r7, #24]
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	4623      	mov	r3, r4
 8002074:	f7ff ff3b 	bl	8001eee <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y + height - 1, x + width - 1, y + height - 1, color);
 8002078:	88ba      	ldrh	r2, [r7, #4]
 800207a:	883b      	ldrh	r3, [r7, #0]
 800207c:	4413      	add	r3, r2
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b299      	uxth	r1, r3
 8002084:	88fa      	ldrh	r2, [r7, #6]
 8002086:	887b      	ldrh	r3, [r7, #2]
 8002088:	4413      	add	r3, r2
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	b29c      	uxth	r4, r3
 8002090:	88ba      	ldrh	r2, [r7, #4]
 8002092:	883b      	ldrh	r3, [r7, #0]
 8002094:	4413      	add	r3, r2
 8002096:	b29b      	uxth	r3, r3
 8002098:	3b01      	subs	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	88f8      	ldrh	r0, [r7, #6]
 800209e:	8b3b      	ldrh	r3, [r7, #24]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	4613      	mov	r3, r2
 80020a4:	4622      	mov	r2, r4
 80020a6:	f7ff ff22 	bl	8001eee <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y, x, y + height - 1, color);
 80020aa:	88ba      	ldrh	r2, [r7, #4]
 80020ac:	883b      	ldrh	r3, [r7, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29c      	uxth	r4, r3
 80020b6:	88fa      	ldrh	r2, [r7, #6]
 80020b8:	88b9      	ldrh	r1, [r7, #4]
 80020ba:	88f8      	ldrh	r0, [r7, #6]
 80020bc:	8b3b      	ldrh	r3, [r7, #24]
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	4623      	mov	r3, r4
 80020c2:	f7ff ff14 	bl	8001eee <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x + width - 1, y, x + width - 1, y + height - 1, color);
 80020c6:	88fa      	ldrh	r2, [r7, #6]
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	4413      	add	r3, r2
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b298      	uxth	r0, r3
 80020d2:	88fa      	ldrh	r2, [r7, #6]
 80020d4:	887b      	ldrh	r3, [r7, #2]
 80020d6:	4413      	add	r3, r2
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29c      	uxth	r4, r3
 80020de:	88ba      	ldrh	r2, [r7, #4]
 80020e0:	883b      	ldrh	r3, [r7, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	88b9      	ldrh	r1, [r7, #4]
 80020ec:	8b3b      	ldrh	r3, [r7, #24]
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	4613      	mov	r3, r2
 80020f2:	4622      	mov	r2, r4
 80020f4:	f7ff fefb 	bl	8001eee <Manual_LCD_DrawLine>
 80020f8:	e000      	b.n	80020fc <Manual_LCD_DrawRectangle+0xf2>
        return;
 80020fa:	bf00      	nop
}
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd90      	pop	{r4, r7, pc}
	...

08002104 <Manual_LCD_FillRectangle>:

void Manual_LCD_FillRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8002104:	b590      	push	{r4, r7, lr}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	4604      	mov	r4, r0
 800210c:	4608      	mov	r0, r1
 800210e:	4611      	mov	r1, r2
 8002110:	461a      	mov	r2, r3
 8002112:	4623      	mov	r3, r4
 8002114:	80fb      	strh	r3, [r7, #6]
 8002116:	4603      	mov	r3, r0
 8002118:	80bb      	strh	r3, [r7, #4]
 800211a:	460b      	mov	r3, r1
 800211c:	807b      	strh	r3, [r7, #2]
 800211e:	4613      	mov	r3, r2
 8002120:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	2bef      	cmp	r3, #239	@ 0xef
 8002126:	d855      	bhi.n	80021d4 <Manual_LCD_FillRectangle+0xd0>
 8002128:	88bb      	ldrh	r3, [r7, #4]
 800212a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800212e:	d251      	bcs.n	80021d4 <Manual_LCD_FillRectangle+0xd0>
        return;
    if ((x + width) > LCD_WIDTH)
 8002130:	88fa      	ldrh	r2, [r7, #6]
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	4413      	add	r3, r2
 8002136:	2bf0      	cmp	r3, #240	@ 0xf0
 8002138:	dd03      	ble.n	8002142 <Manual_LCD_FillRectangle+0x3e>
        width = LCD_WIDTH - x;
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8002140:	807b      	strh	r3, [r7, #2]
    if ((y + height) > LCD_HEIGHT)
 8002142:	88ba      	ldrh	r2, [r7, #4]
 8002144:	883b      	ldrh	r3, [r7, #0]
 8002146:	4413      	add	r3, r2
 8002148:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800214c:	dd03      	ble.n	8002156 <Manual_LCD_FillRectangle+0x52>
        height = LCD_HEIGHT - y;
 800214e:	88bb      	ldrh	r3, [r7, #4]
 8002150:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002154:	803b      	strh	r3, [r7, #0]

    LCD_Set_Address_Window(x, y, x + width - 1, y + height - 1);
 8002156:	88fa      	ldrh	r2, [r7, #6]
 8002158:	887b      	ldrh	r3, [r7, #2]
 800215a:	4413      	add	r3, r2
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29c      	uxth	r4, r3
 8002162:	88ba      	ldrh	r2, [r7, #4]
 8002164:	883b      	ldrh	r3, [r7, #0]
 8002166:	4413      	add	r3, r2
 8002168:	b29b      	uxth	r3, r3
 800216a:	3b01      	subs	r3, #1
 800216c:	b29b      	uxth	r3, r3
 800216e:	88b9      	ldrh	r1, [r7, #4]
 8002170:	88f8      	ldrh	r0, [r7, #6]
 8002172:	4622      	mov	r2, r4
 8002174:	f7ff fcf8 	bl	8001b68 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8002178:	2201      	movs	r2, #1
 800217a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800217e:	4817      	ldr	r0, [pc, #92]	@ (80021dc <Manual_LCD_FillRectangle+0xd8>)
 8002180:	f002 ff78 	bl	8005074 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8002184:	2200      	movs	r2, #0
 8002186:	2180      	movs	r1, #128	@ 0x80
 8002188:	4814      	ldr	r0, [pc, #80]	@ (80021dc <Manual_LCD_FillRectangle+0xd8>)
 800218a:	f002 ff73 	bl	8005074 <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 800218e:	8c3b      	ldrh	r3, [r7, #32]
 8002190:	0a1b      	lsrs	r3, r3, #8
 8002192:	b29b      	uxth	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	723b      	strb	r3, [r7, #8]
 8002198:	8c3b      	ldrh	r3, [r7, #32]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	e00a      	b.n	80021ba <Manual_LCD_FillRectangle+0xb6>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 80021a4:	f107 0108 	add.w	r1, r7, #8
 80021a8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ac:	2202      	movs	r2, #2
 80021ae:	480c      	ldr	r0, [pc, #48]	@ (80021e0 <Manual_LCD_FillRectangle+0xdc>)
 80021b0:	f007 fac5 	bl	800973e <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3301      	adds	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	883a      	ldrh	r2, [r7, #0]
 80021be:	fb02 f303 	mul.w	r3, r2, r3
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d3ed      	bcc.n	80021a4 <Manual_LCD_FillRectangle+0xa0>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 80021c8:	2201      	movs	r2, #1
 80021ca:	2180      	movs	r1, #128	@ 0x80
 80021cc:	4803      	ldr	r0, [pc, #12]	@ (80021dc <Manual_LCD_FillRectangle+0xd8>)
 80021ce:	f002 ff51 	bl	8005074 <HAL_GPIO_WritePin>
 80021d2:	e000      	b.n	80021d6 <Manual_LCD_FillRectangle+0xd2>
        return;
 80021d4:	bf00      	nop
}
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd90      	pop	{r4, r7, pc}
 80021dc:	40020400 	.word	0x40020400
 80021e0:	20000688 	.word	0x20000688

080021e4 <Manual_LCD_DrawChar>:
// A proper implementation would look up character data in a font table.
// Placeholder for font data - you need to define this
extern const unsigned char Font5x7[][5]; // Example: needs to be defined in font.c

void Manual_LCD_DrawChar(uint16_t x, uint16_t y, char c, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	4604      	mov	r4, r0
 80021ec:	4608      	mov	r0, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	461a      	mov	r2, r3
 80021f2:	4623      	mov	r3, r4
 80021f4:	80fb      	strh	r3, [r7, #6]
 80021f6:	4603      	mov	r3, r0
 80021f8:	80bb      	strh	r3, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	70fb      	strb	r3, [r7, #3]
 80021fe:	4613      	mov	r3, r2
 8002200:	803b      	strh	r3, [r7, #0]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT || (x + 5 * size) > LCD_WIDTH || (y + 7 * size) > LCD_HEIGHT)
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	2bef      	cmp	r3, #239	@ 0xef
 8002206:	f200 80d1 	bhi.w	80023ac <Manual_LCD_DrawChar+0x1c8>
 800220a:	88bb      	ldrh	r3, [r7, #4]
 800220c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002210:	f080 80cc 	bcs.w	80023ac <Manual_LCD_DrawChar+0x1c8>
 8002214:	88f9      	ldrh	r1, [r7, #6]
 8002216:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800221a:	4613      	mov	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	440b      	add	r3, r1
 8002222:	2bf0      	cmp	r3, #240	@ 0xf0
 8002224:	f300 80c2 	bgt.w	80023ac <Manual_LCD_DrawChar+0x1c8>
 8002228:	88b9      	ldrh	r1, [r7, #4]
 800222a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800222e:	4613      	mov	r3, r2
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	440b      	add	r3, r1
 8002236:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800223a:	f300 80b7 	bgt.w	80023ac <Manual_LCD_DrawChar+0x1c8>
    {
        return; // Character won't fit
    }

    if (c < ' ' || c > '~')
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	2b1f      	cmp	r3, #31
 8002242:	d902      	bls.n	800224a <Manual_LCD_DrawChar+0x66>
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	2b7e      	cmp	r3, #126	@ 0x7e
 8002248:	d901      	bls.n	800224e <Manual_LCD_DrawChar+0x6a>
        c = '?'; // Handle non-printable characters
 800224a:	233f      	movs	r3, #63	@ 0x3f
 800224c:	70fb      	strb	r3, [r7, #3]

    for (uint8_t i = 0; i < 5; i++)
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	e088      	b.n	8002366 <Manual_LCD_DrawChar+0x182>
    { // Width of char
        uint8_t line = Font5x7[c - ' '][i];
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	f1a3 0220 	sub.w	r2, r3, #32
 800225a:	7bf9      	ldrb	r1, [r7, #15]
 800225c:	4855      	ldr	r0, [pc, #340]	@ (80023b4 <Manual_LCD_DrawChar+0x1d0>)
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	4403      	add	r3, r0
 8002266:	440b      	add	r3, r1
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 800226c:	2300      	movs	r3, #0
 800226e:	737b      	strb	r3, [r7, #13]
 8002270:	e073      	b.n	800235a <Manual_LCD_DrawChar+0x176>
        { // Height of char
            if (line & 0x01)
 8002272:	7bbb      	ldrb	r3, [r7, #14]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d034      	beq.n	80022e6 <Manual_LCD_DrawChar+0x102>
            { // Check bit
                if (size == 1)
 800227c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002280:	2b01      	cmp	r3, #1
 8002282:	d10e      	bne.n	80022a2 <Manual_LCD_DrawChar+0xbe>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, charColor);
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	b29a      	uxth	r2, r3
 8002288:	88fb      	ldrh	r3, [r7, #6]
 800228a:	4413      	add	r3, r2
 800228c:	b298      	uxth	r0, r3
 800228e:	7b7b      	ldrb	r3, [r7, #13]
 8002290:	b29a      	uxth	r2, r3
 8002292:	88bb      	ldrh	r3, [r7, #4]
 8002294:	4413      	add	r3, r2
 8002296:	b29b      	uxth	r3, r3
 8002298:	883a      	ldrh	r2, [r7, #0]
 800229a:	4619      	mov	r1, r3
 800229c:	f7ff fe08 	bl	8001eb0 <Manual_LCD_DrawPixel>
 80022a0:	e055      	b.n	800234e <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, charColor);
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	fb12 f303 	smulbb	r3, r2, r3
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	88fb      	ldrh	r3, [r7, #6]
 80022b4:	4413      	add	r3, r2
 80022b6:	b298      	uxth	r0, r3
 80022b8:	7b7b      	ldrb	r3, [r7, #13]
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	fb12 f303 	smulbb	r3, r2, r3
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	88bb      	ldrh	r3, [r7, #4]
 80022ca:	4413      	add	r3, r2
 80022cc:	b299      	uxth	r1, r3
 80022ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022d8:	b29c      	uxth	r4, r3
 80022da:	883b      	ldrh	r3, [r7, #0]
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	4623      	mov	r3, r4
 80022e0:	f7ff ff10 	bl	8002104 <Manual_LCD_FillRectangle>
 80022e4:	e033      	b.n	800234e <Manual_LCD_DrawChar+0x16a>
                }
            }
            else
            {
                if (size == 1)
 80022e6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d10e      	bne.n	800230c <Manual_LCD_DrawChar+0x128>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, bgColor);
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	88fb      	ldrh	r3, [r7, #6]
 80022f4:	4413      	add	r3, r2
 80022f6:	b298      	uxth	r0, r3
 80022f8:	7b7b      	ldrb	r3, [r7, #13]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	88bb      	ldrh	r3, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	b29b      	uxth	r3, r3
 8002302:	8c3a      	ldrh	r2, [r7, #32]
 8002304:	4619      	mov	r1, r3
 8002306:	f7ff fdd3 	bl	8001eb0 <Manual_LCD_DrawPixel>
 800230a:	e020      	b.n	800234e <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, bgColor);
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	b29a      	uxth	r2, r3
 8002310:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002314:	b29b      	uxth	r3, r3
 8002316:	fb12 f303 	smulbb	r3, r2, r3
 800231a:	b29a      	uxth	r2, r3
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	4413      	add	r3, r2
 8002320:	b298      	uxth	r0, r3
 8002322:	7b7b      	ldrb	r3, [r7, #13]
 8002324:	b29a      	uxth	r2, r3
 8002326:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800232a:	b29b      	uxth	r3, r3
 800232c:	fb12 f303 	smulbb	r3, r2, r3
 8002330:	b29a      	uxth	r2, r3
 8002332:	88bb      	ldrh	r3, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	b299      	uxth	r1, r3
 8002338:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800233c:	b29a      	uxth	r2, r3
 800233e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002342:	b29c      	uxth	r4, r3
 8002344:	8c3b      	ldrh	r3, [r7, #32]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4623      	mov	r3, r4
 800234a:	f7ff fedb 	bl	8002104 <Manual_LCD_FillRectangle>
                }
            }
            line >>= 1;
 800234e:	7bbb      	ldrb	r3, [r7, #14]
 8002350:	085b      	lsrs	r3, r3, #1
 8002352:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 8002354:	7b7b      	ldrb	r3, [r7, #13]
 8002356:	3301      	adds	r3, #1
 8002358:	737b      	strb	r3, [r7, #13]
 800235a:	7b7b      	ldrb	r3, [r7, #13]
 800235c:	2b06      	cmp	r3, #6
 800235e:	d988      	bls.n	8002272 <Manual_LCD_DrawChar+0x8e>
    for (uint8_t i = 0; i < 5; i++)
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	3301      	adds	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	2b04      	cmp	r3, #4
 800236a:	f67f af73 	bls.w	8002254 <Manual_LCD_DrawChar+0x70>
        }
    }
    // Draw a small gap for characters if size > 1 or if you want background fill for the gap
    if (size > 0)
 800236e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01b      	beq.n	80023ae <Manual_LCD_DrawChar+0x1ca>
    { // Fill the column after the character (for spacing)
        Manual_LCD_FillRectangle(x + 5 * size, y, size, 7 * size, bgColor);
 8002376:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800237a:	b29b      	uxth	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	0092      	lsls	r2, r2, #2
 8002380:	4413      	add	r3, r2
 8002382:	b29a      	uxth	r2, r3
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	4413      	add	r3, r2
 8002388:	b298      	uxth	r0, r3
 800238a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800238e:	b29a      	uxth	r2, r3
 8002390:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002394:	b29b      	uxth	r3, r3
 8002396:	4619      	mov	r1, r3
 8002398:	00c9      	lsls	r1, r1, #3
 800239a:	1acb      	subs	r3, r1, r3
 800239c:	b29c      	uxth	r4, r3
 800239e:	88b9      	ldrh	r1, [r7, #4]
 80023a0:	8c3b      	ldrh	r3, [r7, #32]
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	4623      	mov	r3, r4
 80023a6:	f7ff fead 	bl	8002104 <Manual_LCD_FillRectangle>
 80023aa:	e000      	b.n	80023ae <Manual_LCD_DrawChar+0x1ca>
        return; // Character won't fit
 80023ac:	bf00      	nop
    }
}
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd90      	pop	{r4, r7, pc}
 80023b4:	0800de3c 	.word	0x0800de3c

080023b8 <Manual_LCD_DrawString>:

void Manual_LCD_DrawString(uint16_t x, uint16_t y, const char *str, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 80023b8:	b590      	push	{r4, r7, lr}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af02      	add	r7, sp, #8
 80023be:	60ba      	str	r2, [r7, #8]
 80023c0:	461a      	mov	r2, r3
 80023c2:	4603      	mov	r3, r0
 80023c4:	81fb      	strh	r3, [r7, #14]
 80023c6:	460b      	mov	r3, r1
 80023c8:	81bb      	strh	r3, [r7, #12]
 80023ca:	4613      	mov	r3, r2
 80023cc:	80fb      	strh	r3, [r7, #6]
    while (*str)
 80023ce:	e037      	b.n	8002440 <Manual_LCD_DrawString+0x88>
    {
        Manual_LCD_DrawChar(x, y, *str, charColor, bgColor, size);
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781a      	ldrb	r2, [r3, #0]
 80023d4:	88fc      	ldrh	r4, [r7, #6]
 80023d6:	89b9      	ldrh	r1, [r7, #12]
 80023d8:	89f8      	ldrh	r0, [r7, #14]
 80023da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	8c3b      	ldrh	r3, [r7, #32]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	4623      	mov	r3, r4
 80023e6:	f7ff fefd 	bl	80021e4 <Manual_LCD_DrawChar>
        x += 6 * size; // Advance X position (5 for char + 1 for spacing)
 80023ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	0052      	lsls	r2, r2, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	89fb      	ldrh	r3, [r7, #14]
 80023fc:	4413      	add	r3, r2
 80023fe:	81fb      	strh	r3, [r7, #14]
        if (x + 5 * size >= LCD_WIDTH)
 8002400:	89f9      	ldrh	r1, [r7, #14]
 8002402:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	440b      	add	r3, r1
 800240e:	2bef      	cmp	r3, #239	@ 0xef
 8002410:	dd09      	ble.n	8002426 <Manual_LCD_DrawString+0x6e>
        { // Simple wrap
            x = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	81fb      	strh	r3, [r7, #14]
            y += 8 * size; // Advance Y position
 8002416:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800241a:	b29b      	uxth	r3, r3
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	b29a      	uxth	r2, r3
 8002420:	89bb      	ldrh	r3, [r7, #12]
 8002422:	4413      	add	r3, r2
 8002424:	81bb      	strh	r3, [r7, #12]
        }
        if (y + 7 * size >= LCD_HEIGHT)
 8002426:	89b9      	ldrh	r1, [r7, #12]
 8002428:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800242c:	4613      	mov	r3, r2
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	440b      	add	r3, r1
 8002434:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002438:	da07      	bge.n	800244a <Manual_LCD_DrawString+0x92>
            break; // Out of screen
        str++;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	3301      	adds	r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
    while (*str)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1c3      	bne.n	80023d0 <Manual_LCD_DrawString+0x18>
    }
}
 8002448:	e000      	b.n	800244c <Manual_LCD_DrawString+0x94>
            break; // Out of screen
 800244a:	bf00      	nop
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	bd90      	pop	{r4, r7, pc}

08002454 <Manual_LCD_DrawLayout>:

void Manual_LCD_DrawLayout(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b09a      	sub	sp, #104	@ 0x68
 8002458:	af02      	add	r7, sp, #8
    // Clear screen with blue background
    Manual_LCD_Clear(COLOR_BLUE);
 800245a:	201f      	movs	r0, #31
 800245c:	f7ff fcea 	bl	8001e34 <Manual_LCD_Clear>

    uint16_t text_color = COLOR_WHITE;
 8002460:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002464:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint16_t box_fill_color = COLOR_BLACK;
 8002468:	2300      	movs	r3, #0
 800246a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    uint16_t box_border_color = COLOR_WHITE;
 800246e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002472:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    uint8_t font_size = 1;
 8002476:	2301      	movs	r3, #1
 8002478:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
    uint8_t char_height = 7; // For 5x7 font at size 1
 800247c:	2307      	movs	r3, #7
 800247e:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
    // uint8_t char_width_with_spacing = 6; // For 5x7 font at size 1

    // 1. Top Info Box: "Nhom: [nhom 01]"
    const char *info_text = "Nhom: 09";
 8002482:	4bb8      	ldr	r3, [pc, #736]	@ (8002764 <Manual_LCD_DrawLayout+0x310>)
 8002484:	657b      	str	r3, [r7, #84]	@ 0x54
    uint16_t info_text_x = MARGIN + 5;
 8002486:	230f      	movs	r3, #15
 8002488:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t info_text_y = INFO_BOX_Y + (INFO_BOX_H - char_height * font_size) / 2;
 800248c:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002490:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	f1c3 031e 	rsb	r3, r3, #30
 800249c:	0fda      	lsrs	r2, r3, #31
 800249e:	4413      	add	r3, r2
 80024a0:	105b      	asrs	r3, r3, #1
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	330a      	adds	r3, #10
 80024a6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

    Manual_LCD_FillRectangle(MARGIN, INFO_BOX_Y, INFO_BOX_W, INFO_BOX_H, box_fill_color);
 80024aa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	231e      	movs	r3, #30
 80024b2:	2296      	movs	r2, #150	@ 0x96
 80024b4:	210a      	movs	r1, #10
 80024b6:	200a      	movs	r0, #10
 80024b8:	f7ff fe24 	bl	8002104 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(MARGIN, INFO_BOX_Y, INFO_BOX_W, INFO_BOX_H, box_border_color);
 80024bc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	231e      	movs	r3, #30
 80024c4:	2296      	movs	r2, #150	@ 0x96
 80024c6:	210a      	movs	r1, #10
 80024c8:	200a      	movs	r0, #10
 80024ca:	f7ff fd9e 	bl	800200a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(info_text_x, info_text_y, info_text, text_color, box_fill_color, font_size);
 80024ce:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80024d2:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 80024d6:	f8b7 0052 	ldrh.w	r0, [r7, #82]	@ 0x52
 80024da:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	4613      	mov	r3, r2
 80024e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80024ea:	f7ff ff65 	bl	80023b8 <Manual_LCD_DrawString>

    // 2. Task Boxes Grid
    uint16_t start_y_tasks_row1 = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 80024ee:	233c      	movs	r3, #60	@ 0x3c
 80024f0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint16_t text_task_x_padding = 10; // Left padding for text inside task boxes
 80024f4:	230a      	movs	r3, #10
 80024f6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    uint16_t text_task_y_offset = (TASK_BOX_H - char_height * font_size) / 2;
 80024fa:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80024fe:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8002502:	fb02 f303 	mul.w	r3, r2, r3
 8002506:	f1c3 0346 	rsb	r3, r3, #70	@ 0x46
 800250a:	0fda      	lsrs	r2, r3, #31
 800250c:	4413      	add	r3, r2
 800250e:	105b      	asrs	r3, r3, #1
 8002510:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

    // Task 02-1 (Top-Left)
    uint16_t task1_x = MARGIN;
 8002514:	230a      	movs	r3, #10
 8002516:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    uint16_t task1_y = start_y_tasks_row1;
 800251a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800251e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    const char *task1_text = "Task 02-1";
 8002522:	4b91      	ldr	r3, [pc, #580]	@ (8002768 <Manual_LCD_DrawLayout+0x314>)
 8002524:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t text_task1_x = task1_x + text_task_x_padding;
 8002526:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800252a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800252e:	4413      	add	r3, r2
 8002530:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint16_t text_task1_y = task1_y + text_task_y_offset;
 8002532:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8002536:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800253a:	4413      	add	r3, r2
 800253c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    Manual_LCD_FillRectangle(task1_x, task1_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 800253e:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8002542:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8002546:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2346      	movs	r3, #70	@ 0x46
 800254e:	2269      	movs	r2, #105	@ 0x69
 8002550:	f7ff fdd8 	bl	8002104 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task1_x, task1_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 8002554:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8002558:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 800255c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	2346      	movs	r3, #70	@ 0x46
 8002564:	2269      	movs	r2, #105	@ 0x69
 8002566:	f7ff fd50 	bl	800200a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task1_x, text_task1_y, task1_text, text_color, box_fill_color, font_size);
 800256a:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800256e:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8002570:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 8002572:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	4613      	mov	r3, r2
 8002580:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002582:	f7ff ff19 	bl	80023b8 <Manual_LCD_DrawString>

    // Task 02-2 (Top-Right)
    uint16_t task2_x = task1_x + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 8002586:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800258a:	3373      	adds	r3, #115	@ 0x73
 800258c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    uint16_t task2_y = start_y_tasks_row1;
 800258e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002592:	873b      	strh	r3, [r7, #56]	@ 0x38
    const char *task2_text = "Task 02-2";
 8002594:	4b75      	ldr	r3, [pc, #468]	@ (800276c <Manual_LCD_DrawLayout+0x318>)
 8002596:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t text_task2_x = task2_x + text_task_x_padding;
 8002598:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800259a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800259e:	4413      	add	r3, r2
 80025a0:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t text_task2_y = task2_y + text_task_y_offset;
 80025a2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80025a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025a8:	4413      	add	r3, r2
 80025aa:	863b      	strh	r3, [r7, #48]	@ 0x30
    Manual_LCD_FillRectangle(task2_x, task2_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 80025ac:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80025ae:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 80025b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	2346      	movs	r3, #70	@ 0x46
 80025b8:	2269      	movs	r2, #105	@ 0x69
 80025ba:	f7ff fda3 	bl	8002104 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task2_x, task2_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 80025be:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80025c0:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 80025c2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2346      	movs	r3, #70	@ 0x46
 80025ca:	2269      	movs	r2, #105	@ 0x69
 80025cc:	f7ff fd1d 	bl	800200a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task2_x, text_task2_y, task2_text, text_color, box_fill_color, font_size);
 80025d0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80025d4:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80025d6:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 80025d8:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	4613      	mov	r3, r2
 80025e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025e8:	f7ff fee6 	bl	80023b8 <Manual_LCD_DrawString>

    // Second row of task boxes
    uint16_t start_y_tasks_row2 = start_y_tasks_row1 + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 80025ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80025f0:	3350      	adds	r3, #80	@ 0x50
 80025f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Task 02-3 (Bottom-Left)
    uint16_t task3_x = MARGIN;
 80025f4:	230a      	movs	r3, #10
 80025f6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t task3_y = start_y_tasks_row2;
 80025f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80025fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
    const char *task3_text = "Task 02-3";
 80025fc:	4b5c      	ldr	r3, [pc, #368]	@ (8002770 <Manual_LCD_DrawLayout+0x31c>)
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t text_task3_x = task3_x + text_task_x_padding;
 8002600:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002602:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002606:	4413      	add	r3, r2
 8002608:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t text_task3_y = task3_y + text_task_y_offset;
 800260a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800260c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002610:	4413      	add	r3, r2
 8002612:	843b      	strh	r3, [r7, #32]
    Manual_LCD_FillRectangle(task3_x, task3_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 8002614:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8002616:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 8002618:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	2346      	movs	r3, #70	@ 0x46
 8002620:	2269      	movs	r2, #105	@ 0x69
 8002622:	f7ff fd6f 	bl	8002104 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task3_x, task3_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 8002626:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8002628:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 800262a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2346      	movs	r3, #70	@ 0x46
 8002632:	2269      	movs	r2, #105	@ 0x69
 8002634:	f7ff fce9 	bl	800200a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task3_x, text_task3_y, task3_text, text_color, box_fill_color, font_size);
 8002638:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800263c:	8c39      	ldrh	r1, [r7, #32]
 800263e:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8002640:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800264a:	9300      	str	r3, [sp, #0]
 800264c:	4613      	mov	r3, r2
 800264e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002650:	f7ff feb2 	bl	80023b8 <Manual_LCD_DrawString>

    // Task 02-4 (Bottom-Right)
    uint16_t task4_x = task1_x + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 8002654:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002658:	3373      	adds	r3, #115	@ 0x73
 800265a:	83fb      	strh	r3, [r7, #30]
    uint16_t task4_y = start_y_tasks_row2;
 800265c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800265e:	83bb      	strh	r3, [r7, #28]
    const char *task4_text = "Task 02-4";
 8002660:	4b44      	ldr	r3, [pc, #272]	@ (8002774 <Manual_LCD_DrawLayout+0x320>)
 8002662:	61bb      	str	r3, [r7, #24]
    uint16_t text_task4_x = task4_x + text_task_x_padding;
 8002664:	8bfa      	ldrh	r2, [r7, #30]
 8002666:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800266a:	4413      	add	r3, r2
 800266c:	82fb      	strh	r3, [r7, #22]
    uint16_t text_task4_y = task4_y + text_task_y_offset;
 800266e:	8bba      	ldrh	r2, [r7, #28]
 8002670:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002674:	4413      	add	r3, r2
 8002676:	82bb      	strh	r3, [r7, #20]
    Manual_LCD_FillRectangle(task4_x, task4_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 8002678:	8bb9      	ldrh	r1, [r7, #28]
 800267a:	8bf8      	ldrh	r0, [r7, #30]
 800267c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	2346      	movs	r3, #70	@ 0x46
 8002684:	2269      	movs	r2, #105	@ 0x69
 8002686:	f7ff fd3d 	bl	8002104 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task4_x, task4_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 800268a:	8bb9      	ldrh	r1, [r7, #28]
 800268c:	8bf8      	ldrh	r0, [r7, #30]
 800268e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	2346      	movs	r3, #70	@ 0x46
 8002696:	2269      	movs	r2, #105	@ 0x69
 8002698:	f7ff fcb7 	bl	800200a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task4_x, text_task4_y, task4_text, text_color, box_fill_color, font_size);
 800269c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80026a0:	8ab9      	ldrh	r1, [r7, #20]
 80026a2:	8af8      	ldrh	r0, [r7, #22]
 80026a4:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	4613      	mov	r3, r2
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	f7ff fe80 	bl	80023b8 <Manual_LCD_DrawString>

    // 3. Back Button
    const char *back_button_text = "<<Back";
 80026b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002778 <Manual_LCD_DrawLayout+0x324>)
 80026ba:	613b      	str	r3, [r7, #16]
    uint16_t back_button_text_len = strlen(back_button_text);
 80026bc:	6938      	ldr	r0, [r7, #16]
 80026be:	f7fd fd91 	bl	80001e4 <strlen>
 80026c2:	4603      	mov	r3, r0
 80026c4:	81fb      	strh	r3, [r7, #14]
    uint16_t back_button_text_pixel_width = back_button_text_len * 6 * font_size; // 6 is char width with spacing for 5x7 font
 80026c6:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	89fa      	ldrh	r2, [r7, #14]
 80026ce:	fb12 f303 	smulbb	r3, r2, r3
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	0052      	lsls	r2, r2, #1
 80026d8:	4413      	add	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	81bb      	strh	r3, [r7, #12]

    uint16_t back_button_y = start_y_tasks_row2 + TASK_BOX_H + TASK_TO_BACK_BUTTON_SPACING;
 80026de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80026e0:	335a      	adds	r3, #90	@ 0x5a
 80026e2:	817b      	strh	r3, [r7, #10]
    uint16_t back_button_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 80026e4:	237d      	movs	r3, #125	@ 0x7d
 80026e6:	813b      	strh	r3, [r7, #8]
    uint16_t text_button_x = back_button_x + (BACK_BUTTON_W - back_button_text_pixel_width) / 2;
 80026e8:	89bb      	ldrh	r3, [r7, #12]
 80026ea:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 80026ee:	0fda      	lsrs	r2, r3, #31
 80026f0:	4413      	add	r3, r2
 80026f2:	105b      	asrs	r3, r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	893b      	ldrh	r3, [r7, #8]
 80026f8:	4413      	add	r3, r2
 80026fa:	80fb      	strh	r3, [r7, #6]
    uint16_t text_button_y = back_button_y + (BACK_BUTTON_H - char_height * font_size) / 2;
 80026fc:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002700:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8002704:	fb02 f303 	mul.w	r3, r2, r3
 8002708:	f1c3 032d 	rsb	r3, r3, #45	@ 0x2d
 800270c:	0fda      	lsrs	r2, r3, #31
 800270e:	4413      	add	r3, r2
 8002710:	105b      	asrs	r3, r3, #1
 8002712:	b29a      	uxth	r2, r3
 8002714:	897b      	ldrh	r3, [r7, #10]
 8002716:	4413      	add	r3, r2
 8002718:	80bb      	strh	r3, [r7, #4]

    Manual_LCD_FillRectangle(back_button_x, back_button_y, BACK_BUTTON_W, BACK_BUTTON_H, box_fill_color);
 800271a:	8979      	ldrh	r1, [r7, #10]
 800271c:	8938      	ldrh	r0, [r7, #8]
 800271e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	232d      	movs	r3, #45	@ 0x2d
 8002726:	225a      	movs	r2, #90	@ 0x5a
 8002728:	f7ff fcec 	bl	8002104 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(back_button_x, back_button_y, BACK_BUTTON_W, BACK_BUTTON_H, box_border_color);
 800272c:	8979      	ldrh	r1, [r7, #10]
 800272e:	8938      	ldrh	r0, [r7, #8]
 8002730:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	232d      	movs	r3, #45	@ 0x2d
 8002738:	225a      	movs	r2, #90	@ 0x5a
 800273a:	f7ff fc66 	bl	800200a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_button_x, text_button_y, back_button_text, text_color, box_fill_color, font_size);
 800273e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002742:	88b9      	ldrh	r1, [r7, #4]
 8002744:	88f8      	ldrh	r0, [r7, #6]
 8002746:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	4613      	mov	r3, r2
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	f7ff fe2f 	bl	80023b8 <Manual_LCD_DrawString>
}
 800275a:	bf00      	nop
 800275c:	3760      	adds	r7, #96	@ 0x60
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	0800dd94 	.word	0x0800dd94
 8002768:	0800dda0 	.word	0x0800dda0
 800276c:	0800ddac 	.word	0x0800ddac
 8002770:	0800ddb8 	.word	0x0800ddb8
 8002774:	0800ddc4 	.word	0x0800ddc4
 8002778:	0800ddd0 	.word	0x0800ddd0

0800277c <Manual_LCD_UpdateInfoText>:

// New function to update the info text
void Manual_LCD_UpdateInfoText(const char *new_text)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b088      	sub	sp, #32
 8002780:	af02      	add	r7, sp, #8
 8002782:	6078      	str	r0, [r7, #4]
    uint8_t font_size = 1;
 8002784:	2301      	movs	r3, #1
 8002786:	75fb      	strb	r3, [r7, #23]
    uint8_t char_height = 7; // For 5x7 font at size 1
 8002788:	2307      	movs	r3, #7
 800278a:	75bb      	strb	r3, [r7, #22]

    uint16_t text_color = COLOR_WHITE;     // Original text color from DrawLayout
 800278c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002790:	82bb      	strh	r3, [r7, #20]
    uint16_t box_fill_color = COLOR_BLACK; // Original box fill color from DrawLayout
 8002792:	2300      	movs	r3, #0
 8002794:	827b      	strh	r3, [r7, #18]

    uint16_t info_text_x = MARGIN + 5;
 8002796:	230f      	movs	r3, #15
 8002798:	823b      	strh	r3, [r7, #16]
    uint16_t info_text_y = INFO_BOX_Y + (INFO_BOX_H - char_height * font_size) / 2;
 800279a:	7dbb      	ldrb	r3, [r7, #22]
 800279c:	7dfa      	ldrb	r2, [r7, #23]
 800279e:	fb02 f303 	mul.w	r3, r2, r3
 80027a2:	f1c3 031e 	rsb	r3, r3, #30
 80027a6:	0fda      	lsrs	r2, r3, #31
 80027a8:	4413      	add	r3, r2
 80027aa:	105b      	asrs	r3, r3, #1
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	330a      	adds	r3, #10
 80027b0:	81fb      	strh	r3, [r7, #14]

    // Clear the inner part of the info box where text resides
    // The border is 1px, so we fill from x+1, y+1 with width-2, height-2
    Manual_LCD_FillRectangle(MARGIN + 1, INFO_BOX_Y + 1, INFO_BOX_W - 2, INFO_BOX_H - 2, box_fill_color);
 80027b2:	8a7b      	ldrh	r3, [r7, #18]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	231c      	movs	r3, #28
 80027b8:	2294      	movs	r2, #148	@ 0x94
 80027ba:	210b      	movs	r1, #11
 80027bc:	200b      	movs	r0, #11
 80027be:	f7ff fca1 	bl	8002104 <Manual_LCD_FillRectangle>

    // Draw the new string with original text color and original box fill as background
    Manual_LCD_DrawString(info_text_x, info_text_y, new_text, text_color, box_fill_color, font_size);
 80027c2:	8aba      	ldrh	r2, [r7, #20]
 80027c4:	89f9      	ldrh	r1, [r7, #14]
 80027c6:	8a38      	ldrh	r0, [r7, #16]
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	8a7b      	ldrh	r3, [r7, #18]
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	4613      	mov	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	f7ff fdf0 	bl	80023b8 <Manual_LCD_DrawString>
}
 80027d8:	bf00      	nop
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}

080027e0 <Manual_LCD_RefillTaskBox>:

// New function to refill a task box and redraw its text
void Manual_LCD_RefillTaskBox(const char *task_name, uint16_t new_fill_color)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	@ 0x28
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
    uint16_t original_text_color = COLOR_WHITE;
 80027ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027f0:	82fb      	strh	r3, [r7, #22]
    uint16_t original_box_border_color = COLOR_WHITE;
 80027f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027f6:	82bb      	strh	r3, [r7, #20]
    uint8_t font_size = 1;
 80027f8:	2301      	movs	r3, #1
 80027fa:	74fb      	strb	r3, [r7, #19]
    uint8_t char_height = 7; // For 5x7 font at size 1
 80027fc:	2307      	movs	r3, #7
 80027fe:	74bb      	strb	r3, [r7, #18]

    uint16_t text_task_x_padding = 10;
 8002800:	230a      	movs	r3, #10
 8002802:	823b      	strh	r3, [r7, #16]
    uint16_t text_task_y_offset = (TASK_BOX_H - char_height * font_size) / 2;
 8002804:	7cbb      	ldrb	r3, [r7, #18]
 8002806:	7cfa      	ldrb	r2, [r7, #19]
 8002808:	fb02 f303 	mul.w	r3, r2, r3
 800280c:	f1c3 0346 	rsb	r3, r3, #70	@ 0x46
 8002810:	0fda      	lsrs	r2, r3, #31
 8002812:	4413      	add	r3, r2
 8002814:	105b      	asrs	r3, r3, #1
 8002816:	81fb      	strh	r3, [r7, #14]

    uint16_t current_task_x = 0, current_task_y = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	83fb      	strh	r3, [r7, #30]
 800281c:	2300      	movs	r3, #0
 800281e:	83bb      	strh	r3, [r7, #28]
    uint16_t text_draw_x = 0, text_draw_y = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	81bb      	strh	r3, [r7, #12]
 8002824:	2300      	movs	r3, #0
 8002826:	817b      	strh	r3, [r7, #10]
    const char *original_task_text_content = "";
 8002828:	4b30      	ldr	r3, [pc, #192]	@ (80028ec <Manual_LCD_RefillTaskBox+0x10c>)
 800282a:	61bb      	str	r3, [r7, #24]

    if (strcmp(task_name, "Task 02-1") == 0)
 800282c:	4930      	ldr	r1, [pc, #192]	@ (80028f0 <Manual_LCD_RefillTaskBox+0x110>)
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fd fcce 	bl	80001d0 <strcmp>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <Manual_LCD_RefillTaskBox+0x68>
    {
        current_task_x = MARGIN;
 800283a:	230a      	movs	r3, #10
 800283c:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 800283e:	233c      	movs	r3, #60	@ 0x3c
 8002840:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-1";
 8002842:	4b2b      	ldr	r3, [pc, #172]	@ (80028f0 <Manual_LCD_RefillTaskBox+0x110>)
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	e028      	b.n	800289a <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-2") == 0)
 8002848:	492a      	ldr	r1, [pc, #168]	@ (80028f4 <Manual_LCD_RefillTaskBox+0x114>)
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fd fcc0 	bl	80001d0 <strcmp>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <Manual_LCD_RefillTaskBox+0x84>
    {
        current_task_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 8002856:	237d      	movs	r3, #125	@ 0x7d
 8002858:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 800285a:	233c      	movs	r3, #60	@ 0x3c
 800285c:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-2";
 800285e:	4b25      	ldr	r3, [pc, #148]	@ (80028f4 <Manual_LCD_RefillTaskBox+0x114>)
 8002860:	61bb      	str	r3, [r7, #24]
 8002862:	e01a      	b.n	800289a <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-3") == 0)
 8002864:	4924      	ldr	r1, [pc, #144]	@ (80028f8 <Manual_LCD_RefillTaskBox+0x118>)
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fd fcb2 	bl	80001d0 <strcmp>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <Manual_LCD_RefillTaskBox+0xa0>
    {
        current_task_x = MARGIN;
 8002872:	230a      	movs	r3, #10
 8002874:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8002876:	238c      	movs	r3, #140	@ 0x8c
 8002878:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-3";
 800287a:	4b1f      	ldr	r3, [pc, #124]	@ (80028f8 <Manual_LCD_RefillTaskBox+0x118>)
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	e00c      	b.n	800289a <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-4") == 0)
 8002880:	491e      	ldr	r1, [pc, #120]	@ (80028fc <Manual_LCD_RefillTaskBox+0x11c>)
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fd fca4 	bl	80001d0 <strcmp>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d129      	bne.n	80028e2 <Manual_LCD_RefillTaskBox+0x102>
    {
        current_task_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 800288e:	237d      	movs	r3, #125	@ 0x7d
 8002890:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8002892:	238c      	movs	r3, #140	@ 0x8c
 8002894:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-4";
 8002896:	4b19      	ldr	r3, [pc, #100]	@ (80028fc <Manual_LCD_RefillTaskBox+0x11c>)
 8002898:	61bb      	str	r3, [r7, #24]
    else
    {
        return; // Unknown task name, do nothing
    }

    text_draw_x = current_task_x + text_task_x_padding;
 800289a:	8bfa      	ldrh	r2, [r7, #30]
 800289c:	8a3b      	ldrh	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	81bb      	strh	r3, [r7, #12]
    text_draw_y = current_task_y + text_task_y_offset;
 80028a2:	8bba      	ldrh	r2, [r7, #28]
 80028a4:	89fb      	ldrh	r3, [r7, #14]
 80028a6:	4413      	add	r3, r2
 80028a8:	817b      	strh	r3, [r7, #10]

    // 1. Refill the entire task box with the new color
    Manual_LCD_FillRectangle(current_task_x, current_task_y, TASK_BOX_W_CALC, TASK_BOX_H, new_fill_color);
 80028aa:	8bb9      	ldrh	r1, [r7, #28]
 80028ac:	8bf8      	ldrh	r0, [r7, #30]
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	2346      	movs	r3, #70	@ 0x46
 80028b4:	2269      	movs	r2, #105	@ 0x69
 80028b6:	f7ff fc25 	bl	8002104 <Manual_LCD_FillRectangle>

    // 2. Redraw the border
    Manual_LCD_DrawRectangle(current_task_x, current_task_y, TASK_BOX_W_CALC, TASK_BOX_H, original_box_border_color);
 80028ba:	8bb9      	ldrh	r1, [r7, #28]
 80028bc:	8bf8      	ldrh	r0, [r7, #30]
 80028be:	8abb      	ldrh	r3, [r7, #20]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	2346      	movs	r3, #70	@ 0x46
 80028c4:	2269      	movs	r2, #105	@ 0x69
 80028c6:	f7ff fba0 	bl	800200a <Manual_LCD_DrawRectangle>

    // 3. Redraw the original text using the original text color and the new_fill_color as background
    Manual_LCD_DrawString(text_draw_x, text_draw_y, original_task_text_content, original_text_color, new_fill_color, font_size);
 80028ca:	8afa      	ldrh	r2, [r7, #22]
 80028cc:	8979      	ldrh	r1, [r7, #10]
 80028ce:	89b8      	ldrh	r0, [r7, #12]
 80028d0:	7cfb      	ldrb	r3, [r7, #19]
 80028d2:	9301      	str	r3, [sp, #4]
 80028d4:	887b      	ldrh	r3, [r7, #2]
 80028d6:	9300      	str	r3, [sp, #0]
 80028d8:	4613      	mov	r3, r2
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	f7ff fd6c 	bl	80023b8 <Manual_LCD_DrawString>
 80028e0:	e000      	b.n	80028e4 <Manual_LCD_RefillTaskBox+0x104>
        return; // Unknown task name, do nothing
 80028e2:	bf00      	nop
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	0800ddd8 	.word	0x0800ddd8
 80028f0:	0800dda0 	.word	0x0800dda0
 80028f4:	0800ddac 	.word	0x0800ddac
 80028f8:	0800ddb8 	.word	0x0800ddb8
 80028fc:	0800ddc4 	.word	0x0800ddc4

08002900 <TP_Read_ADC_Raw>:
Coordinate CalScreenSample[3]; // Raw ADC values from touch panel for calibration points

// Low-level SPI communication for touch
// Sends 1 byte command, receives 2 bytes data (12-bit ADC value)
static uint16_t TP_Read_ADC_Raw(uint8_t cmd)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_byte = cmd;
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buffer[2] = {0, 0};
 800290e:	2300      	movs	r3, #0
 8002910:	813b      	strh	r3, [r7, #8]
    uint16_t adc_val = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	81fb      	strh	r3, [r7, #14]

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET); // Select touch controller
 8002916:	2200      	movs	r2, #0
 8002918:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800291c:	4815      	ldr	r0, [pc, #84]	@ (8002974 <TP_Read_ADC_Raw+0x74>)
 800291e:	f002 fba9 	bl	8005074 <HAL_GPIO_WritePin>

    // Send command byte
    HAL_SPI_Transmit(g_hspi_touch_ptr, &tx_byte, 1, HAL_MAX_DELAY);
 8002922:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <TP_Read_ADC_Raw+0x78>)
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	f107 010d 	add.w	r1, r7, #13
 800292a:	f04f 33ff 	mov.w	r3, #4294967295
 800292e:	2201      	movs	r2, #1
 8002930:	f006 ff05 	bl	800973e <HAL_SPI_Transmit>

    // Receive 2 data bytes. Some controllers might need dummy clocks before data is valid.
    // For XPT2046/ADS7846, data usually follows directly.
    HAL_SPI_Receive(g_hspi_touch_ptr, rx_buffer, 2, HAL_MAX_DELAY);
 8002934:	4b10      	ldr	r3, [pc, #64]	@ (8002978 <TP_Read_ADC_Raw+0x78>)
 8002936:	6818      	ldr	r0, [r3, #0]
 8002938:	f107 0108 	add.w	r1, r7, #8
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
 8002940:	2202      	movs	r2, #2
 8002942:	f007 f840 	bl	80099c6 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect
 8002946:	2201      	movs	r2, #1
 8002948:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800294c:	4809      	ldr	r0, [pc, #36]	@ (8002974 <TP_Read_ADC_Raw+0x74>)
 800294e:	f002 fb91 	bl	8005074 <HAL_GPIO_WritePin>

    adc_val = (rx_buffer[0] << 8) | rx_buffer[1];
 8002952:	7a3b      	ldrb	r3, [r7, #8]
 8002954:	b21b      	sxth	r3, r3
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	b21a      	sxth	r2, r3
 800295a:	7a7b      	ldrb	r3, [r7, #9]
 800295c:	b21b      	sxth	r3, r3
 800295e:	4313      	orrs	r3, r2
 8002960:	b21b      	sxth	r3, r3
 8002962:	81fb      	strh	r3, [r7, #14]
    adc_val >>= 3; // Keep the most significant 12 bits (XPT2046 specific, D0 is at bit 3 of second byte)
 8002964:	89fb      	ldrh	r3, [r7, #14]
 8002966:	08db      	lsrs	r3, r3, #3
 8002968:	81fb      	strh	r3, [r7, #14]
                   // Original code used >>4, which might be for a different ADC alignment or resolution.
                   // If raw values are consistently too low or high, this shift might need adjustment.
    return adc_val;
 800296a:	89fb      	ldrh	r3, [r7, #14]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40020000 	.word	0x40020000
 8002978:	20000080 	.word	0x20000080

0800297c <Manual_Touch_Init>:

void Manual_Touch_Init(SPI_HandleTypeDef *hspi_touch)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
    g_hspi_touch_ptr = hspi_touch;
 8002984:	4a06      	ldr	r2, [pc, #24]	@ (80029a0 <Manual_Touch_Init+0x24>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6013      	str	r3, [r2, #0]
    // GPIOs for TP_CS (PA9) and TP_IRQ (PB4) are assumed to be initialized
    // in main.c's MX_GPIO_Init() as Output PP and Input Pull-up respectively.
    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect touch controller initially
 800298a:	2201      	movs	r2, #1
 800298c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002990:	4804      	ldr	r0, [pc, #16]	@ (80029a4 <Manual_Touch_Init+0x28>)
 8002992:	f002 fb6f 	bl	8005074 <HAL_GPIO_WritePin>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	20000080 	.word	0x20000080
 80029a4:	40020000 	.word	0x40020000

080029a8 <Manual_Touch_GetRawPoint>:
    // TP_IRQ_Pin is low when pressed (assuming pull-up resistor is enabled)
    return (HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == GPIO_PIN_RESET);
}

uint8_t Manual_Touch_GetRawPoint(Coordinate *rawPoint)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
    // Đọc một mẫu đơn giản để debug
    rawPoint->x = TP_Read_ADC_Raw(TP_CMD_READ_X);
 80029b0:	20d0      	movs	r0, #208	@ 0xd0
 80029b2:	f7ff ffa5 	bl	8002900 <TP_Read_ADC_Raw>
 80029b6:	4603      	mov	r3, r0
 80029b8:	461a      	mov	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	801a      	strh	r2, [r3, #0]
    rawPoint->y = TP_Read_ADC_Raw(TP_CMD_READ_Y);
 80029be:	2090      	movs	r0, #144	@ 0x90
 80029c0:	f7ff ff9e 	bl	8002900 <TP_Read_ADC_Raw>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	805a      	strh	r2, [r3, #2]

    // Trả về thành công mà không kiểm tra
    return 1;
 80029cc:	2301      	movs	r3, #1
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <Manual_Touch_ApplyCalibration>:
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    return 1; // Success
}

uint8_t Manual_Touch_ApplyCalibration(Coordinate *displayPoint, const Coordinate *screenPoint)
{
 80029d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
    if (touchMatrix.Divider == 0)
 80029e4:	4b64      	ldr	r3, [pc, #400]	@ (8002b78 <Manual_Touch_ApplyCalibration+0x1a0>)
 80029e6:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	f04f 0300 	mov.w	r3, #0
 80029f2:	f7fe f879 	bl	8000ae8 <__aeabi_dcmpeq>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d023      	beq.n	8002a44 <Manual_Touch_ApplyCalibration+0x6c>
    { // Not calibrated or calibration failed
        // Fallback: direct scaling (highly inaccurate without calibration)
        displayPoint->x = (uint16_t)(((long)screenPoint->x * LCD_WIDTH) / 4095);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	461a      	mov	r2, r3
 8002a02:	4613      	mov	r3, r2
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	4a5c      	ldr	r2, [pc, #368]	@ (8002b7c <Manual_Touch_ApplyCalibration+0x1a4>)
 8002a0c:	fb82 1203 	smull	r1, r2, r2, r3
 8002a10:	441a      	add	r2, r3
 8002a12:	12d2      	asrs	r2, r2, #11
 8002a14:	17db      	asrs	r3, r3, #31
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	801a      	strh	r2, [r3, #0]
        displayPoint->y = (uint16_t)(((long)screenPoint->y * LCD_HEIGHT) / 4095);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	885b      	ldrh	r3, [r3, #2]
 8002a22:	461a      	mov	r2, r3
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	019b      	lsls	r3, r3, #6
 8002a2c:	4a53      	ldr	r2, [pc, #332]	@ (8002b7c <Manual_Touch_ApplyCalibration+0x1a4>)
 8002a2e:	fb82 1203 	smull	r1, r2, r2, r3
 8002a32:	441a      	add	r2, r3
 8002a34:	12d2      	asrs	r2, r2, #11
 8002a36:	17db      	asrs	r3, r3, #31
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	805a      	strh	r2, [r3, #2]
        return 0; // Indicated that calibration matrix was not used
 8002a40:	2300      	movs	r3, #0
 8002a42:	e094      	b.n	8002b6e <Manual_Touch_ApplyCalibration+0x196>
    }

    // Apply calibration matrix
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002a44:	4b4c      	ldr	r3, [pc, #304]	@ (8002b78 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002a46:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fd78 	bl	8000544 <__aeabi_i2d>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4620      	mov	r0, r4
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	f7fd fddc 	bl	8000618 <__aeabi_dmul>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4690      	mov	r8, r2
 8002a66:	4699      	mov	r9, r3
                                  (touchMatrix.Bn * screenPoint->y) +
 8002a68:	4b43      	ldr	r3, [pc, #268]	@ (8002b78 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002a6a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	885b      	ldrh	r3, [r3, #2]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fd66 	bl	8000544 <__aeabi_i2d>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7fd fdca 	bl	8000618 <__aeabi_dmul>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002a88:	4640      	mov	r0, r8
 8002a8a:	4649      	mov	r1, r9
 8002a8c:	f7fd fc0e 	bl	80002ac <__adddf3>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
                                  touchMatrix.Cn) /
 8002a98:	4b37      	ldr	r3, [pc, #220]	@ (8002b78 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002a9a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
                                  (touchMatrix.Bn * screenPoint->y) +
 8002a9e:	f7fd fc05 	bl	80002ac <__adddf3>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 8002aaa:	4b33      	ldr	r3, [pc, #204]	@ (8002b78 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002aac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Cn) /
 8002ab0:	f7fd fedc 	bl	800086c <__aeabi_ddiv>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002ab8:	4610      	mov	r0, r2
 8002aba:	4619      	mov	r1, r3
 8002abc:	f7fe f846 	bl	8000b4c <__aeabi_d2uiz>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	801a      	strh	r2, [r3, #0]
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b78 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002aca:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	881b      	ldrh	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fd36 	bl	8000544 <__aeabi_i2d>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4620      	mov	r0, r4
 8002ade:	4629      	mov	r1, r5
 8002ae0:	f7fd fd9a 	bl	8000618 <__aeabi_dmul>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4690      	mov	r8, r2
 8002aea:	4699      	mov	r9, r3
                                  (touchMatrix.En * screenPoint->y) +
 8002aec:	4b22      	ldr	r3, [pc, #136]	@ (8002b78 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002aee:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	885b      	ldrh	r3, [r3, #2]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fd24 	bl	8000544 <__aeabi_i2d>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4620      	mov	r0, r4
 8002b02:	4629      	mov	r1, r5
 8002b04:	f7fd fd88 	bl	8000618 <__aeabi_dmul>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002b0c:	4640      	mov	r0, r8
 8002b0e:	4649      	mov	r1, r9
 8002b10:	f7fd fbcc 	bl	80002ac <__adddf3>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
                                  touchMatrix.Fn) /
 8002b1c:	4b16      	ldr	r3, [pc, #88]	@ (8002b78 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b1e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
                                  (touchMatrix.En * screenPoint->y) +
 8002b22:	f7fd fbc3 	bl	80002ac <__adddf3>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 8002b2e:	4b12      	ldr	r3, [pc, #72]	@ (8002b78 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b30:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Fn) /
 8002b34:	f7fd fe9a 	bl	800086c <__aeabi_ddiv>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f7fe f804 	bl	8000b4c <__aeabi_d2uiz>
 8002b44:	4603      	mov	r3, r0
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	805a      	strh	r2, [r3, #2]

    // Constrain to LCD boundaries
    if (displayPoint->x >= LCD_WIDTH)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	2bef      	cmp	r3, #239	@ 0xef
 8002b52:	d902      	bls.n	8002b5a <Manual_Touch_ApplyCalibration+0x182>
        displayPoint->x = LCD_WIDTH - 1;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	22ef      	movs	r2, #239	@ 0xef
 8002b58:	801a      	strh	r2, [r3, #0]
    if (displayPoint->y >= LCD_HEIGHT)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	885b      	ldrh	r3, [r3, #2]
 8002b5e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002b62:	d303      	bcc.n	8002b6c <Manual_Touch_ApplyCalibration+0x194>
        displayPoint->y = LCD_HEIGHT - 1;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f240 123f 	movw	r2, #319	@ 0x13f
 8002b6a:	805a      	strh	r2, [r3, #2]
    // Note: long double might produce negative intermediate results if raw values are way off.
    // Casting to uint16_t will wrap. Consider clamping if signed intermediates are possible.
    // For typical touch values, this should be fine.

    return 1; // Calibration matrix used
 8002b6c:	2301      	movs	r3, #1
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b78:	20000088 	.word	0x20000088
 8002b7c:	80080081 	.word	0x80080081

08002b80 <SD_Init>:
/**
 * @brief  Khởi tạo SD Card và file system
 * @retval uint8_t: 1 nếu thành công, 0 nếu thất bại
 */
uint8_t SD_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
    FRESULT fresult;

    // Nếu đã khởi tạo rồi thì không khởi tạo lại
    if (sd_initialized)
 8002b86:	4b10      	ldr	r3, [pc, #64]	@ (8002bc8 <SD_Init+0x48>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <SD_Init+0x12>
    {
        return 1;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e016      	b.n	8002bc0 <SD_Init+0x40>
    }

    // Khởi tạo SD Card qua giao diện SDIO
    if (BSP_SD_Init() != MSD_OK)
 8002b92:	f008 f869 	bl	800ac68 <BSP_SD_Init>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <SD_Init+0x20>
    {
        return 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e00f      	b.n	8002bc0 <SD_Init+0x40>
    }

    // Mount file system
    fresult = f_mount(&sdFatFs, "", 1);
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	490a      	ldr	r1, [pc, #40]	@ (8002bcc <SD_Init+0x4c>)
 8002ba4:	480a      	ldr	r0, [pc, #40]	@ (8002bd0 <SD_Init+0x50>)
 8002ba6:	f009 ff4f 	bl	800ca48 <f_mount>
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
    if (fresult != FR_OK)
 8002bae:	79fb      	ldrb	r3, [r7, #7]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <SD_Init+0x38>
    {
        return 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e003      	b.n	8002bc0 <SD_Init+0x40>
    }

    sd_initialized = 1;
 8002bb8:	4b03      	ldr	r3, [pc, #12]	@ (8002bc8 <SD_Init+0x48>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	701a      	strb	r2, [r3, #0]
    return 1;
 8002bbe:	2301      	movs	r3, #1
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	200002f0 	.word	0x200002f0
 8002bcc:	0800dddc 	.word	0x0800dddc
 8002bd0:	200000c0 	.word	0x200000c0

08002bd4 <SD_ReadFile>:
 * @param  buffer: Buffer để lưu dữ liệu đọc được
 * @param  buffer_size: Kích thước của buffer
 * @retval int: Số byte đọc được, -1 nếu có lỗi
 */
int SD_ReadFile(const char *filename, char *buffer, uint32_t buffer_size)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002be0:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002be4:	6018      	str	r0, [r3, #0]
 8002be6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002bea:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002bee:	6019      	str	r1, [r3, #0]
 8002bf0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002bf4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002bf8:	601a      	str	r2, [r3, #0]
    FIL file;
    FRESULT fresult;
    UINT bytesRead = 0;
 8002bfa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002bfe:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]

    // Kiểm tra SD đã khởi tạo chưa
    if (!sd_initialized)
 8002c06:	4b35      	ldr	r3, [pc, #212]	@ (8002cdc <SD_ReadFile+0x108>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d107      	bne.n	8002c1e <SD_ReadFile+0x4a>
    {
        if (!SD_Init())
 8002c0e:	f7ff ffb7 	bl	8002b80 <SD_Init>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <SD_ReadFile+0x4a>
        {
            return -1;
 8002c18:	f04f 33ff 	mov.w	r3, #4294967295
 8002c1c:	e059      	b.n	8002cd2 <SD_ReadFile+0xfe>
        }
    }

    // Mở file để đọc
    fresult = f_open(&file, filename, FA_READ);
 8002c1e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002c22:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002c26:	f107 0018 	add.w	r0, r7, #24
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	f009 ff51 	bl	800cad4 <f_open>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
    if (fresult != FR_OK)
 8002c38:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <SD_ReadFile+0x72>
    {
        return -1;
 8002c40:	f04f 33ff 	mov.w	r3, #4294967295
 8002c44:	e045      	b.n	8002cd2 <SD_ReadFile+0xfe>
    }

    // Xác định kích thước cần đọc
    UINT size_to_read = f_size(&file);
 8002c46:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002c4a:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    if (size_to_read >= buffer_size)
 8002c54:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002c58:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002c5c:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d307      	bcc.n	8002c76 <SD_ReadFile+0xa2>
    {
        size_to_read = buffer_size - 1;
 8002c66:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002c6a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    }

    // Đọc dữ liệu từ file
    fresult = f_read(&file, buffer, size_to_read, &bytesRead);
 8002c76:	f107 0314 	add.w	r3, r7, #20
 8002c7a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8002c7e:	f5a2 7112 	sub.w	r1, r2, #584	@ 0x248
 8002c82:	f107 0018 	add.w	r0, r7, #24
 8002c86:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8002c8a:	6809      	ldr	r1, [r1, #0]
 8002c8c:	f00a f8dc 	bl	800ce48 <f_read>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b

    // Đóng file
    f_close(&file);
 8002c96:	f107 0318 	add.w	r3, r7, #24
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f00a fa91 	bl	800d1c2 <f_close>

    if (fresult != FR_OK)
 8002ca0:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <SD_ReadFile+0xda>
    {
        return -1;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cac:	e011      	b.n	8002cd2 <SD_ReadFile+0xfe>
    }

    // Thêm null terminator nếu đọc chuỗi
    buffer[bytesRead] = '\0';
 8002cae:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002cb2:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8002cbc:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]

    return bytesRead;
 8002cc8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002ccc:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002cd0:	681b      	ldr	r3, [r3, #0]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	200002f0 	.word	0x200002f0

08002ce0 <SD_ReadTeamFile>:
 * @param  buffer: Buffer để lưu dữ liệu đọc được
 * @param  buffer_size: Kích thước buffer
 * @retval int: Số byte đọc được, -1 nếu có lỗi
 */
int SD_ReadTeamFile(char *buffer, uint32_t buffer_size)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
    return SD_ReadFile(FILE_NAME, buffer, buffer_size);
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4804      	ldr	r0, [pc, #16]	@ (8002d00 <SD_ReadTeamFile+0x20>)
 8002cf0:	f7ff ff70 	bl	8002bd4 <SD_ReadFile>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	0800ddec 	.word	0x0800ddec

08002d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	4b10      	ldr	r3, [pc, #64]	@ (8002d50 <HAL_MspInit+0x4c>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d12:	4a0f      	ldr	r2, [pc, #60]	@ (8002d50 <HAL_MspInit+0x4c>)
 8002d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d50 <HAL_MspInit+0x4c>)
 8002d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	4b09      	ldr	r3, [pc, #36]	@ (8002d50 <HAL_MspInit+0x4c>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	4a08      	ldr	r2, [pc, #32]	@ (8002d50 <HAL_MspInit+0x4c>)
 8002d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d36:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <HAL_MspInit+0x4c>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800

08002d54 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0b      	ldr	r2, [pc, #44]	@ (8002d90 <HAL_ADC_MspInit+0x3c>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d10d      	bne.n	8002d82 <HAL_ADC_MspInit+0x2e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <HAL_ADC_MspInit+0x40>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6e:	4a09      	ldr	r2, [pc, #36]	@ (8002d94 <HAL_ADC_MspInit+0x40>)
 8002d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d76:	4b07      	ldr	r3, [pc, #28]	@ (8002d94 <HAL_ADC_MspInit+0x40>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40012000 	.word	0x40012000
 8002d94:	40023800 	.word	0x40023800

08002d98 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08c      	sub	sp, #48	@ 0x30
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da0:	f107 031c 	add.w	r3, r7, #28
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
 8002daa:	609a      	str	r2, [r3, #8]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a4b      	ldr	r2, [pc, #300]	@ (8002ee4 <HAL_CAN_MspInit+0x14c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d13e      	bne.n	8002e38 <HAL_CAN_MspInit+0xa0>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002dba:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee8 <HAL_CAN_MspInit+0x150>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	4a49      	ldr	r2, [pc, #292]	@ (8002ee8 <HAL_CAN_MspInit+0x150>)
 8002dc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002dc4:	4b48      	ldr	r3, [pc, #288]	@ (8002ee8 <HAL_CAN_MspInit+0x150>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d10d      	bne.n	8002de8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	4b46      	ldr	r3, [pc, #280]	@ (8002eec <HAL_CAN_MspInit+0x154>)
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	4a45      	ldr	r2, [pc, #276]	@ (8002eec <HAL_CAN_MspInit+0x154>)
 8002dd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dda:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ddc:	4b43      	ldr	r3, [pc, #268]	@ (8002eec <HAL_CAN_MspInit+0x154>)
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de4:	61bb      	str	r3, [r7, #24]
 8002de6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	4b3f      	ldr	r3, [pc, #252]	@ (8002eec <HAL_CAN_MspInit+0x154>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df0:	4a3e      	ldr	r2, [pc, #248]	@ (8002eec <HAL_CAN_MspInit+0x154>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df8:	4b3c      	ldr	r3, [pc, #240]	@ (8002eec <HAL_CAN_MspInit+0x154>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e04:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e12:	2303      	movs	r3, #3
 8002e14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002e16:	2309      	movs	r3, #9
 8002e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1a:	f107 031c 	add.w	r3, r7, #28
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4833      	ldr	r0, [pc, #204]	@ (8002ef0 <HAL_CAN_MspInit+0x158>)
 8002e22:	f001 ff73 	bl	8004d0c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002e26:	2200      	movs	r2, #0
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2013      	movs	r0, #19
 8002e2c:	f001 fef9 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002e30:	2013      	movs	r0, #19
 8002e32:	f001 ff12 	bl	8004c5a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002e36:	e050      	b.n	8002eda <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8002ef4 <HAL_CAN_MspInit+0x15c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d14b      	bne.n	8002eda <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	4b29      	ldr	r3, [pc, #164]	@ (8002eec <HAL_CAN_MspInit+0x154>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	4a28      	ldr	r2, [pc, #160]	@ (8002eec <HAL_CAN_MspInit+0x154>)
 8002e4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e52:	4b26      	ldr	r3, [pc, #152]	@ (8002eec <HAL_CAN_MspInit+0x154>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002e5e:	4b22      	ldr	r3, [pc, #136]	@ (8002ee8 <HAL_CAN_MspInit+0x150>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	3301      	adds	r3, #1
 8002e64:	4a20      	ldr	r2, [pc, #128]	@ (8002ee8 <HAL_CAN_MspInit+0x150>)
 8002e66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002e68:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee8 <HAL_CAN_MspInit+0x150>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d10d      	bne.n	8002e8c <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	4b1d      	ldr	r3, [pc, #116]	@ (8002eec <HAL_CAN_MspInit+0x154>)
 8002e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e78:	4a1c      	ldr	r2, [pc, #112]	@ (8002eec <HAL_CAN_MspInit+0x154>)
 8002e7a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e80:	4b1a      	ldr	r3, [pc, #104]	@ (8002eec <HAL_CAN_MspInit+0x154>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	4b16      	ldr	r3, [pc, #88]	@ (8002eec <HAL_CAN_MspInit+0x154>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	4a15      	ldr	r2, [pc, #84]	@ (8002eec <HAL_CAN_MspInit+0x154>)
 8002e96:	f043 0302 	orr.w	r3, r3, #2
 8002e9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9c:	4b13      	ldr	r3, [pc, #76]	@ (8002eec <HAL_CAN_MspInit+0x154>)
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002ea8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eae:	2302      	movs	r3, #2
 8002eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002eba:	2309      	movs	r3, #9
 8002ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ebe:	f107 031c 	add.w	r3, r7, #28
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	480c      	ldr	r0, [pc, #48]	@ (8002ef8 <HAL_CAN_MspInit+0x160>)
 8002ec6:	f001 ff21 	bl	8004d0c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2040      	movs	r0, #64	@ 0x40
 8002ed0:	f001 fea7 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002ed4:	2040      	movs	r0, #64	@ 0x40
 8002ed6:	f001 fec0 	bl	8004c5a <HAL_NVIC_EnableIRQ>
}
 8002eda:	bf00      	nop
 8002edc:	3730      	adds	r7, #48	@ 0x30
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	40006400 	.word	0x40006400
 8002ee8:	200002f4 	.word	0x200002f4
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40020000 	.word	0x40020000
 8002ef4:	40006800 	.word	0x40006800
 8002ef8:	40020400 	.word	0x40020400

08002efc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	@ 0x28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a26      	ldr	r2, [pc, #152]	@ (8002fb4 <HAL_I2C_MspInit+0xb8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d145      	bne.n	8002faa <HAL_I2C_MspInit+0xae>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f1e:	2300      	movs	r3, #0
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	4b25      	ldr	r3, [pc, #148]	@ (8002fb8 <HAL_I2C_MspInit+0xbc>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	4a24      	ldr	r2, [pc, #144]	@ (8002fb8 <HAL_I2C_MspInit+0xbc>)
 8002f28:	f043 0302 	orr.w	r3, r3, #2
 8002f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f2e:	4b22      	ldr	r3, [pc, #136]	@ (8002fb8 <HAL_I2C_MspInit+0xbc>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	613b      	str	r3, [r7, #16]
 8002f38:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin;
 8002f3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f40:	2312      	movs	r3, #18
 8002f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f44:	2301      	movs	r3, #1
 8002f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	4619      	mov	r1, r3
 8002f56:	4819      	ldr	r0, [pc, #100]	@ (8002fbc <HAL_I2C_MspInit+0xc0>)
 8002f58:	f001 fed8 	bl	8004d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDA_Pin;
 8002f5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f62:	2312      	movs	r3, #18
 8002f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002f6e:	2304      	movs	r3, #4
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8002f72:	f107 0314 	add.w	r3, r7, #20
 8002f76:	4619      	mov	r1, r3
 8002f78:	4810      	ldr	r0, [pc, #64]	@ (8002fbc <HAL_I2C_MspInit+0xc0>)
 8002f7a:	f001 fec7 	bl	8004d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb8 <HAL_I2C_MspInit+0xbc>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb8 <HAL_I2C_MspInit+0xbc>)
 8002f88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <HAL_I2C_MspInit+0xbc>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2021      	movs	r0, #33	@ 0x21
 8002fa0:	f001 fe3f 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002fa4:	2021      	movs	r0, #33	@ 0x21
 8002fa6:	f001 fe58 	bl	8004c5a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002faa:	bf00      	nop
 8002fac:	3728      	adds	r7, #40	@ 0x28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40005800 	.word	0x40005800
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	40020400 	.word	0x40020400

08002fc0 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	@ 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a2c      	ldr	r2, [pc, #176]	@ (8003090 <HAL_SD_MspInit+0xd0>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d152      	bne.n	8003088 <HAL_SD_MspInit+0xc8>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	4b2b      	ldr	r3, [pc, #172]	@ (8003094 <HAL_SD_MspInit+0xd4>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fea:	4a2a      	ldr	r2, [pc, #168]	@ (8003094 <HAL_SD_MspInit+0xd4>)
 8002fec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ff2:	4b28      	ldr	r3, [pc, #160]	@ (8003094 <HAL_SD_MspInit+0xd4>)
 8002ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	4b24      	ldr	r3, [pc, #144]	@ (8003094 <HAL_SD_MspInit+0xd4>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	4a23      	ldr	r2, [pc, #140]	@ (8003094 <HAL_SD_MspInit+0xd4>)
 8003008:	f043 0304 	orr.w	r3, r3, #4
 800300c:	6313      	str	r3, [r2, #48]	@ 0x30
 800300e:	4b21      	ldr	r3, [pc, #132]	@ (8003094 <HAL_SD_MspInit+0xd4>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	4b1d      	ldr	r3, [pc, #116]	@ (8003094 <HAL_SD_MspInit+0xd4>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	4a1c      	ldr	r2, [pc, #112]	@ (8003094 <HAL_SD_MspInit+0xd4>)
 8003024:	f043 0308 	orr.w	r3, r3, #8
 8003028:	6313      	str	r3, [r2, #48]	@ 0x30
 800302a:	4b1a      	ldr	r3, [pc, #104]	@ (8003094 <HAL_SD_MspInit+0xd4>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003036:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 800303a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303c:	2302      	movs	r3, #2
 800303e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003044:	2303      	movs	r3, #3
 8003046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003048:	230c      	movs	r3, #12
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800304c:	f107 0314 	add.w	r3, r7, #20
 8003050:	4619      	mov	r1, r3
 8003052:	4811      	ldr	r0, [pc, #68]	@ (8003098 <HAL_SD_MspInit+0xd8>)
 8003054:	f001 fe5a 	bl	8004d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003058:	2304      	movs	r3, #4
 800305a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003064:	2303      	movs	r3, #3
 8003066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003068:	230c      	movs	r3, #12
 800306a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	4619      	mov	r1, r3
 8003072:	480a      	ldr	r0, [pc, #40]	@ (800309c <HAL_SD_MspInit+0xdc>)
 8003074:	f001 fe4a 	bl	8004d0c <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8003078:	2200      	movs	r2, #0
 800307a:	2100      	movs	r1, #0
 800307c:	2031      	movs	r0, #49	@ 0x31
 800307e:	f001 fdd0 	bl	8004c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003082:	2031      	movs	r0, #49	@ 0x31
 8003084:	f001 fde9 	bl	8004c5a <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 8003088:	bf00      	nop
 800308a:	3728      	adds	r7, #40	@ 0x28
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}
 8003090:	40012c00 	.word	0x40012c00
 8003094:	40023800 	.word	0x40023800
 8003098:	40020800 	.word	0x40020800
 800309c:	40020c00 	.word	0x40020c00

080030a0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	@ 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a28      	ldr	r2, [pc, #160]	@ (8003160 <HAL_SPI_MspInit+0xc0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d149      	bne.n	8003156 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	4b27      	ldr	r3, [pc, #156]	@ (8003164 <HAL_SPI_MspInit+0xc4>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	4a26      	ldr	r2, [pc, #152]	@ (8003164 <HAL_SPI_MspInit+0xc4>)
 80030cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030d2:	4b24      	ldr	r3, [pc, #144]	@ (8003164 <HAL_SPI_MspInit+0xc4>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	4b20      	ldr	r3, [pc, #128]	@ (8003164 <HAL_SPI_MspInit+0xc4>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003164 <HAL_SPI_MspInit+0xc4>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003164 <HAL_SPI_MspInit+0xc4>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	4b19      	ldr	r3, [pc, #100]	@ (8003164 <HAL_SPI_MspInit+0xc4>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	4a18      	ldr	r2, [pc, #96]	@ (8003164 <HAL_SPI_MspInit+0xc4>)
 8003104:	f043 0302 	orr.w	r3, r3, #2
 8003108:	6313      	str	r3, [r2, #48]	@ 0x30
 800310a:	4b16      	ldr	r3, [pc, #88]	@ (8003164 <HAL_SPI_MspInit+0xc4>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	60bb      	str	r3, [r7, #8]
 8003114:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin|MOSI_Pin;
 8003116:	23c0      	movs	r3, #192	@ 0xc0
 8003118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311a:	2302      	movs	r3, #2
 800311c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003122:	2303      	movs	r3, #3
 8003124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003126:	2305      	movs	r3, #5
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312a:	f107 0314 	add.w	r3, r7, #20
 800312e:	4619      	mov	r1, r3
 8003130:	480d      	ldr	r0, [pc, #52]	@ (8003168 <HAL_SPI_MspInit+0xc8>)
 8003132:	f001 fdeb 	bl	8004d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCLK_Pin;
 8003136:	2308      	movs	r3, #8
 8003138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003142:	2303      	movs	r3, #3
 8003144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003146:	2305      	movs	r3, #5
 8003148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCLK_GPIO_Port, &GPIO_InitStruct);
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	4619      	mov	r1, r3
 8003150:	4806      	ldr	r0, [pc, #24]	@ (800316c <HAL_SPI_MspInit+0xcc>)
 8003152:	f001 fddb 	bl	8004d0c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8003156:	bf00      	nop
 8003158:	3728      	adds	r7, #40	@ 0x28
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40013000 	.word	0x40013000
 8003164:	40023800 	.word	0x40023800
 8003168:	40020000 	.word	0x40020000
 800316c:	40020400 	.word	0x40020400

08003170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003174:	bf00      	nop
 8003176:	e7fd      	b.n	8003174 <NMI_Handler+0x4>

08003178 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800317c:	bf00      	nop
 800317e:	e7fd      	b.n	800317c <HardFault_Handler+0x4>

08003180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003184:	bf00      	nop
 8003186:	e7fd      	b.n	8003184 <MemManage_Handler+0x4>

08003188 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800318c:	bf00      	nop
 800318e:	e7fd      	b.n	800318c <BusFault_Handler+0x4>

08003190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003194:	bf00      	nop
 8003196:	e7fd      	b.n	8003194 <UsageFault_Handler+0x4>

08003198 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800319c:	bf00      	nop
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031a6:	b480      	push	{r7}
 80031a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031aa:	bf00      	nop
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031b8:	bf00      	nop
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031c6:	f000 f983 	bl	80034d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	bd80      	pop	{r7, pc}

080031ce <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 80031d2:	2010      	movs	r0, #16
 80031d4:	f001 ff82 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}

080031dc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80031e0:	4802      	ldr	r0, [pc, #8]	@ (80031ec <CAN1_TX_IRQHandler+0x10>)
 80031e2:	f001 f9ef 	bl	80045c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	20000718 	.word	0x20000718

080031f0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80031f4:	4802      	ldr	r0, [pc, #8]	@ (8003200 <I2C2_EV_IRQHandler+0x10>)
 80031f6:	f002 fc0f 	bl	8005a18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200004ac 	.word	0x200004ac

08003204 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003208:	4802      	ldr	r0, [pc, #8]	@ (8003214 <SDIO_IRQHandler+0x10>)
 800320a:	f005 fbf7 	bl	80089fc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000600 	.word	0x20000600

08003218 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800321c:	4802      	ldr	r0, [pc, #8]	@ (8003228 <CAN2_RX0_IRQHandler+0x10>)
 800321e:	f001 f9d1 	bl	80045c4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200005a4 	.word	0x200005a4

0800322c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b086      	sub	sp, #24
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003234:	4a14      	ldr	r2, [pc, #80]	@ (8003288 <_sbrk+0x5c>)
 8003236:	4b15      	ldr	r3, [pc, #84]	@ (800328c <_sbrk+0x60>)
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003240:	4b13      	ldr	r3, [pc, #76]	@ (8003290 <_sbrk+0x64>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003248:	4b11      	ldr	r3, [pc, #68]	@ (8003290 <_sbrk+0x64>)
 800324a:	4a12      	ldr	r2, [pc, #72]	@ (8003294 <_sbrk+0x68>)
 800324c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800324e:	4b10      	ldr	r3, [pc, #64]	@ (8003290 <_sbrk+0x64>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	429a      	cmp	r2, r3
 800325a:	d207      	bcs.n	800326c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800325c:	f00a f862 	bl	800d324 <__errno>
 8003260:	4603      	mov	r3, r0
 8003262:	220c      	movs	r2, #12
 8003264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003266:	f04f 33ff 	mov.w	r3, #4294967295
 800326a:	e009      	b.n	8003280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800326c:	4b08      	ldr	r3, [pc, #32]	@ (8003290 <_sbrk+0x64>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003272:	4b07      	ldr	r3, [pc, #28]	@ (8003290 <_sbrk+0x64>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4413      	add	r3, r2
 800327a:	4a05      	ldr	r2, [pc, #20]	@ (8003290 <_sbrk+0x64>)
 800327c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800327e:	68fb      	ldr	r3, [r7, #12]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	20020000 	.word	0x20020000
 800328c:	00000400 	.word	0x00000400
 8003290:	200002f8 	.word	0x200002f8
 8003294:	20000bb8 	.word	0x20000bb8

08003298 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800329c:	4b06      	ldr	r3, [pc, #24]	@ (80032b8 <SystemInit+0x20>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a2:	4a05      	ldr	r2, [pc, #20]	@ (80032b8 <SystemInit+0x20>)
 80032a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80032a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <Task2_LedBlink>:

/**
 * @brief Thực hiện một lần nháy (toggle) LED và delay cho Task 2.
 */
void Task2_LedBlink(GPIO_TypeDef *ledPort, uint16_t ledPin, uint32_t blinkSpeed_ms) // Sử dụng tên hàm mới (nếu đổi)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	460b      	mov	r3, r1
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	817b      	strh	r3, [r7, #10]
  HAL_GPIO_TogglePin(ledPort, ledPin);
 80032ca:	897b      	ldrh	r3, [r7, #10]
 80032cc:	4619      	mov	r1, r3
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f001 fee9 	bl	80050a6 <HAL_GPIO_TogglePin>
  HAL_Delay(blinkSpeed_ms);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f91b 	bl	8003510 <HAL_Delay>
//	static uint32_t last_tick = 0;
//		    if (HAL_GetTick() - last_tick >= blinkSpeed_ms) {
//		        HAL_GPIO_TogglePin(ledPort, ledPin);
//		        last_tick = HAL_GetTick();
//		    }
}
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <Read_Internal_Temperature>:

float Read_Internal_Temperature(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
  uint32_t adc_value = 0;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
  float temperature_celsius = 0.0f;
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	60bb      	str	r3, [r7, #8]

  HAL_ADC_Start(&hadc1);                                // Khởi động ADC1
 80032f4:	481b      	ldr	r0, [pc, #108]	@ (8003364 <Read_Internal_Temperature+0x80>)
 80032f6:	f000 f973 	bl	80035e0 <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) // Chờ chuyển đổi, timeout 100ms
 80032fa:	2164      	movs	r1, #100	@ 0x64
 80032fc:	4819      	ldr	r0, [pc, #100]	@ (8003364 <Read_Internal_Temperature+0x80>)
 80032fe:	f000 fa74 	bl	80037ea <HAL_ADC_PollForConversion>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d103      	bne.n	8003310 <Read_Internal_Temperature+0x2c>
  {
    adc_value = HAL_ADC_GetValue(&hadc1); // Đọc giá trị ADC
 8003308:	4816      	ldr	r0, [pc, #88]	@ (8003364 <Read_Internal_Temperature+0x80>)
 800330a:	f000 faf9 	bl	8003900 <HAL_ADC_GetValue>
 800330e:	60f8      	str	r0, [r7, #12]
  }
  HAL_ADC_Stop(&hadc1); // Dừng ADC1
 8003310:	4814      	ldr	r0, [pc, #80]	@ (8003364 <Read_Internal_Temperature+0x80>)
 8003312:	f000 fa37 	bl	8003784 <HAL_ADC_Stop>

  // Công thức tính nhiệt độ từ datasheet (có thể cần điều chỉnh)
  // Temperature(in °C) = {(V SENSE – V 25 ) / Avg_Slope} + 25
  // V SENSE = adc_value * VREF_MV / ADC_MAX_VALUE
  float vsense_mv = ((float)adc_value * ADC_VREF_MV) / ADC_MAX_VALUE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	ee07 3a90 	vmov	s15, r3
 800331c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003320:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003368 <Read_Internal_Temperature+0x84>
 8003324:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003328:	eddf 6a10 	vldr	s13, [pc, #64]	@ 800336c <Read_Internal_Temperature+0x88>
 800332c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003330:	edc7 7a01 	vstr	s15, [r7, #4]
  temperature_celsius = (vsense_mv - TEMP_SENSOR_V25_MV) / TEMP_SENSOR_AVG_SLOPE_MV_PER_C + 25.0f;
 8003334:	edd7 7a01 	vldr	s15, [r7, #4]
 8003338:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003370 <Read_Internal_Temperature+0x8c>
 800333c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003340:	eef0 6a04 	vmov.f32	s13, #4	@ 0x40200000  2.5
 8003344:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003348:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800334c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003350:	edc7 7a02 	vstr	s15, [r7, #8]

  return temperature_celsius;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	ee07 3a90 	vmov	s15, r3
}
 800335a:	eeb0 0a67 	vmov.f32	s0, s15
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	2000055c 	.word	0x2000055c
 8003368:	454e4000 	.word	0x454e4000
 800336c:	457ff000 	.word	0x457ff000
 8003370:	443e0000 	.word	0x443e0000

08003374 <CheckUserButtonAndSaveTemp>:
 * @brief Kiểm tra nút User Button và ghi nhiệt độ vào FRAM ngay lập tức khi nút được nhấn
 * @param previous_state Con trỏ đến biến lưu trạng thái nút trước đó
 * @retval None
 */
void CheckUserButtonAndSaveTemp(GPIO_PinState *previous_state)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  // Đọc trạng thái hiện tại của nút
  GPIO_PinState current_button_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 800337c:	2102      	movs	r1, #2
 800337e:	4814      	ldr	r0, [pc, #80]	@ (80033d0 <CheckUserButtonAndSaveTemp+0x5c>)
 8003380:	f001 fe60 	bl	8005044 <HAL_GPIO_ReadPin>
 8003384:	4603      	mov	r3, r0
 8003386:	73fb      	strb	r3, [r7, #15]

  // Kiểm tra xem nút vừa được nhấn xuống (phát hiện cạnh xuống)
  if (current_button_state == GPIO_PIN_SET && *previous_state == GPIO_PIN_RESET)
 8003388:	7bfb      	ldrb	r3, [r7, #15]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d118      	bne.n	80033c0 <CheckUserButtonAndSaveTemp+0x4c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d114      	bne.n	80033c0 <CheckUserButtonAndSaveTemp+0x4c>
  {
    // Nút vừa được nhấn xuống
    // Đọc nhiệt độ từ cảm biến
    uint8_t current_temp = (uint8_t)Read_Internal_Temperature();
 8003396:	f7ff ffa5 	bl	80032e4 <Read_Internal_Temperature>
 800339a:	eef0 7a40 	vmov.f32	s15, s0
 800339e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033a2:	edc7 7a00 	vstr	s15, [r7]
 80033a6:	783b      	ldrb	r3, [r7, #0]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	737b      	strb	r3, [r7, #13]

    // Ghi nhiệt độ vào FRAM tại địa chỉ cố định, ghi đè lên giá trị cũ
    HAL_StatusTypeDef status = FRAM_WriteBytes(&hi2c2, USER_TEMP_ADDR, &current_temp, 1);
 80033ac:	f107 020d 	add.w	r2, r7, #13
 80033b0:	2301      	movs	r3, #1
 80033b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033b6:	4807      	ldr	r0, [pc, #28]	@ (80033d4 <CheckUserButtonAndSaveTemp+0x60>)
 80033b8:	f7fd fd7e 	bl	8000eb8 <FRAM_WriteBytes>
 80033bc:	4603      	mov	r3, r0
 80033be:	73bb      	strb	r3, [r7, #14]

  }

  // Cập nhật trạng thái nút trước đó
  *previous_state = current_button_state;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	7bfa      	ldrb	r2, [r7, #15]
 80033c4:	701a      	strb	r2, [r3, #0]
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40020000 	.word	0x40020000
 80033d4:	200004ac 	.word	0x200004ac

080033d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80033d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003410 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80033dc:	f7ff ff5c 	bl	8003298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033e0:	480c      	ldr	r0, [pc, #48]	@ (8003414 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033e2:	490d      	ldr	r1, [pc, #52]	@ (8003418 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033e4:	4a0d      	ldr	r2, [pc, #52]	@ (800341c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033e8:	e002      	b.n	80033f0 <LoopCopyDataInit>

080033ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ee:	3304      	adds	r3, #4

080033f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033f4:	d3f9      	bcc.n	80033ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003420 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80033f8:	4c0a      	ldr	r4, [pc, #40]	@ (8003424 <LoopFillZerobss+0x22>)
  movs r3, #0
 80033fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033fc:	e001      	b.n	8003402 <LoopFillZerobss>

080033fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003400:	3204      	adds	r2, #4

08003402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003404:	d3fb      	bcc.n	80033fe <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003406:	f009 ff93 	bl	800d330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800340a:	f7fd fd9b 	bl	8000f44 <main>
  bx  lr    
 800340e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003410:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003418:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800341c:	0800e108 	.word	0x0800e108
  ldr r2, =_sbss
 8003420:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003424:	20000bb8 	.word	0x20000bb8

08003428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003428:	e7fe      	b.n	8003428 <ADC_IRQHandler>
	...

0800342c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003430:	4b0e      	ldr	r3, [pc, #56]	@ (800346c <HAL_Init+0x40>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a0d      	ldr	r2, [pc, #52]	@ (800346c <HAL_Init+0x40>)
 8003436:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800343a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800343c:	4b0b      	ldr	r3, [pc, #44]	@ (800346c <HAL_Init+0x40>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a0a      	ldr	r2, [pc, #40]	@ (800346c <HAL_Init+0x40>)
 8003442:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003448:	4b08      	ldr	r3, [pc, #32]	@ (800346c <HAL_Init+0x40>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a07      	ldr	r2, [pc, #28]	@ (800346c <HAL_Init+0x40>)
 800344e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003454:	2003      	movs	r0, #3
 8003456:	f001 fbd9 	bl	8004c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800345a:	200f      	movs	r0, #15
 800345c:	f000 f808 	bl	8003470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003460:	f7ff fc50 	bl	8002d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023c00 	.word	0x40023c00

08003470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003478:	4b12      	ldr	r3, [pc, #72]	@ (80034c4 <HAL_InitTick+0x54>)
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4b12      	ldr	r3, [pc, #72]	@ (80034c8 <HAL_InitTick+0x58>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	4619      	mov	r1, r3
 8003482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003486:	fbb3 f3f1 	udiv	r3, r3, r1
 800348a:	fbb2 f3f3 	udiv	r3, r2, r3
 800348e:	4618      	mov	r0, r3
 8003490:	f001 fbff 	bl	8004c92 <HAL_SYSTICK_Config>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e00e      	b.n	80034bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b0f      	cmp	r3, #15
 80034a2:	d80a      	bhi.n	80034ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034a4:	2200      	movs	r2, #0
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ac:	f001 fbb9 	bl	8004c22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034b0:	4a06      	ldr	r2, [pc, #24]	@ (80034cc <HAL_InitTick+0x5c>)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
 80034b8:	e000      	b.n	80034bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20000004 	.word	0x20000004
 80034c8:	2000000c 	.word	0x2000000c
 80034cc:	20000008 	.word	0x20000008

080034d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034d4:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <HAL_IncTick+0x20>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	4b06      	ldr	r3, [pc, #24]	@ (80034f4 <HAL_IncTick+0x24>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4413      	add	r3, r2
 80034e0:	4a04      	ldr	r2, [pc, #16]	@ (80034f4 <HAL_IncTick+0x24>)
 80034e2:	6013      	str	r3, [r2, #0]
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	2000000c 	.word	0x2000000c
 80034f4:	2000074c 	.word	0x2000074c

080034f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
  return uwTick;
 80034fc:	4b03      	ldr	r3, [pc, #12]	@ (800350c <HAL_GetTick+0x14>)
 80034fe:	681b      	ldr	r3, [r3, #0]
}
 8003500:	4618      	mov	r0, r3
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	2000074c 	.word	0x2000074c

08003510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003518:	f7ff ffee 	bl	80034f8 <HAL_GetTick>
 800351c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d005      	beq.n	8003536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800352a:	4b0a      	ldr	r3, [pc, #40]	@ (8003554 <HAL_Delay+0x44>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003536:	bf00      	nop
 8003538:	f7ff ffde 	bl	80034f8 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	429a      	cmp	r2, r3
 8003546:	d8f7      	bhi.n	8003538 <HAL_Delay+0x28>
  {
  }
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	2000000c 	.word	0x2000000c

08003558 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e033      	b.n	80035d6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff fbec 	bl	8002d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	2b00      	cmp	r3, #0
 8003594:	d118      	bne.n	80035c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800359e:	f023 0302 	bic.w	r3, r3, #2
 80035a2:	f043 0202 	orr.w	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 fad8 	bl	8003b60 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	f043 0201 	orr.w	r2, r3, #1
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80035c6:	e001      	b.n	80035cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_ADC_Start+0x1a>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e0b2      	b.n	8003760 <HAL_ADC_Start+0x180>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b01      	cmp	r3, #1
 800360e:	d018      	beq.n	8003642 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003620:	4b52      	ldr	r3, [pc, #328]	@ (800376c <HAL_ADC_Start+0x18c>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a52      	ldr	r2, [pc, #328]	@ (8003770 <HAL_ADC_Start+0x190>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0c9a      	lsrs	r2, r3, #18
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003634:	e002      	b.n	800363c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3b01      	subs	r3, #1
 800363a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f9      	bne.n	8003636 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b01      	cmp	r3, #1
 800364e:	d17a      	bne.n	8003746 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003676:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800367a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800368a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800368e:	d106      	bne.n	800369e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003694:	f023 0206 	bic.w	r2, r3, #6
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	645a      	str	r2, [r3, #68]	@ 0x44
 800369c:	e002      	b.n	80036a4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036ac:	4b31      	ldr	r3, [pc, #196]	@ (8003774 <HAL_ADC_Start+0x194>)
 80036ae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80036b8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 031f 	and.w	r3, r3, #31
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d12a      	bne.n	800371c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a2b      	ldr	r2, [pc, #172]	@ (8003778 <HAL_ADC_Start+0x198>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d015      	beq.n	80036fc <HAL_ADC_Start+0x11c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a29      	ldr	r2, [pc, #164]	@ (800377c <HAL_ADC_Start+0x19c>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d105      	bne.n	80036e6 <HAL_ADC_Start+0x106>
 80036da:	4b26      	ldr	r3, [pc, #152]	@ (8003774 <HAL_ADC_Start+0x194>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f003 031f 	and.w	r3, r3, #31
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a25      	ldr	r2, [pc, #148]	@ (8003780 <HAL_ADC_Start+0x1a0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d136      	bne.n	800375e <HAL_ADC_Start+0x17e>
 80036f0:	4b20      	ldr	r3, [pc, #128]	@ (8003774 <HAL_ADC_Start+0x194>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0310 	and.w	r3, r3, #16
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d130      	bne.n	800375e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d129      	bne.n	800375e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003718:	609a      	str	r2, [r3, #8]
 800371a:	e020      	b.n	800375e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a15      	ldr	r2, [pc, #84]	@ (8003778 <HAL_ADC_Start+0x198>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d11b      	bne.n	800375e <HAL_ADC_Start+0x17e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d114      	bne.n	800375e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689a      	ldr	r2, [r3, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	e00b      	b.n	800375e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f043 0210 	orr.w	r2, r3, #16
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	f043 0201 	orr.w	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	20000004 	.word	0x20000004
 8003770:	431bde83 	.word	0x431bde83
 8003774:	40012300 	.word	0x40012300
 8003778:	40012000 	.word	0x40012000
 800377c:	40012100 	.word	0x40012100
 8003780:	40012200 	.word	0x40012200

08003784 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_ADC_Stop+0x16>
 8003796:	2302      	movs	r3, #2
 8003798:	e021      	b.n	80037de <HAL_ADC_Stop+0x5a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d109      	bne.n	80037d4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	f043 0201 	orr.w	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b084      	sub	sp, #16
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003802:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003806:	d113      	bne.n	8003830 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003812:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003816:	d10b      	bne.n	8003830 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381c:	f043 0220 	orr.w	r2, r3, #32
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e063      	b.n	80038f8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003830:	f7ff fe62 	bl	80034f8 <HAL_GetTick>
 8003834:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003836:	e021      	b.n	800387c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383e:	d01d      	beq.n	800387c <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d007      	beq.n	8003856 <HAL_ADC_PollForConversion+0x6c>
 8003846:	f7ff fe57 	bl	80034f8 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d212      	bcs.n	800387c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b02      	cmp	r3, #2
 8003862:	d00b      	beq.n	800387c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	f043 0204 	orr.w	r2, r3, #4
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003878:	2303      	movs	r3, #3
 800387a:	e03d      	b.n	80038f8 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	2b02      	cmp	r3, #2
 8003888:	d1d6      	bne.n	8003838 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f06f 0212 	mvn.w	r2, #18
 8003892:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d123      	bne.n	80038f6 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11f      	bne.n	80038f6 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038bc:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d006      	beq.n	80038d2 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d111      	bne.n	80038f6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d105      	bne.n	80038f6 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ee:	f043 0201 	orr.w	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}

08003900 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
	...

0800391c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x1c>
 8003934:	2302      	movs	r3, #2
 8003936:	e105      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x228>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b09      	cmp	r3, #9
 8003946:	d925      	bls.n	8003994 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68d9      	ldr	r1, [r3, #12]
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	4613      	mov	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4413      	add	r3, r2
 800395c:	3b1e      	subs	r3, #30
 800395e:	2207      	movs	r2, #7
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43da      	mvns	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	400a      	ands	r2, r1
 800396c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68d9      	ldr	r1, [r3, #12]
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	b29b      	uxth	r3, r3
 800397e:	4618      	mov	r0, r3
 8003980:	4603      	mov	r3, r0
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4403      	add	r3, r0
 8003986:	3b1e      	subs	r3, #30
 8003988:	409a      	lsls	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	430a      	orrs	r2, r1
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	e022      	b.n	80039da <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6919      	ldr	r1, [r3, #16]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	b29b      	uxth	r3, r3
 80039a0:	461a      	mov	r2, r3
 80039a2:	4613      	mov	r3, r2
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	4413      	add	r3, r2
 80039a8:	2207      	movs	r2, #7
 80039aa:	fa02 f303 	lsl.w	r3, r2, r3
 80039ae:	43da      	mvns	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	400a      	ands	r2, r1
 80039b6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6919      	ldr	r1, [r3, #16]
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	4618      	mov	r0, r3
 80039ca:	4603      	mov	r3, r0
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	4403      	add	r3, r0
 80039d0:	409a      	lsls	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b06      	cmp	r3, #6
 80039e0:	d824      	bhi.n	8003a2c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	4413      	add	r3, r2
 80039f2:	3b05      	subs	r3, #5
 80039f4:	221f      	movs	r2, #31
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	43da      	mvns	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	400a      	ands	r2, r1
 8003a02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	4618      	mov	r0, r3
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685a      	ldr	r2, [r3, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3b05      	subs	r3, #5
 8003a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a2a:	e04c      	b.n	8003ac6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b0c      	cmp	r3, #12
 8003a32:	d824      	bhi.n	8003a7e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	3b23      	subs	r3, #35	@ 0x23
 8003a46:	221f      	movs	r2, #31
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43da      	mvns	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	400a      	ands	r2, r1
 8003a54:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	4618      	mov	r0, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3b23      	subs	r3, #35	@ 0x23
 8003a70:	fa00 f203 	lsl.w	r2, r0, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a7c:	e023      	b.n	8003ac6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	3b41      	subs	r3, #65	@ 0x41
 8003a90:	221f      	movs	r2, #31
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43da      	mvns	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	4618      	mov	r0, r3
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3b41      	subs	r3, #65	@ 0x41
 8003aba:	fa00 f203 	lsl.w	r2, r0, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ac6:	4b22      	ldr	r3, [pc, #136]	@ (8003b50 <HAL_ADC_ConfigChannel+0x234>)
 8003ac8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a21      	ldr	r2, [pc, #132]	@ (8003b54 <HAL_ADC_ConfigChannel+0x238>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d109      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x1cc>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b12      	cmp	r3, #18
 8003ada:	d105      	bne.n	8003ae8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a19      	ldr	r2, [pc, #100]	@ (8003b54 <HAL_ADC_ConfigChannel+0x238>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d123      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x21e>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b10      	cmp	r3, #16
 8003af8:	d003      	beq.n	8003b02 <HAL_ADC_ConfigChannel+0x1e6>
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b11      	cmp	r3, #17
 8003b00:	d11b      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b10      	cmp	r3, #16
 8003b14:	d111      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b16:	4b10      	ldr	r3, [pc, #64]	@ (8003b58 <HAL_ADC_ConfigChannel+0x23c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a10      	ldr	r2, [pc, #64]	@ (8003b5c <HAL_ADC_ConfigChannel+0x240>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	0c9a      	lsrs	r2, r3, #18
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b2c:	e002      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1f9      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40012300 	.word	0x40012300
 8003b54:	40012000 	.word	0x40012000
 8003b58:	20000004 	.word	0x20000004
 8003b5c:	431bde83 	.word	0x431bde83

08003b60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b68:	4b79      	ldr	r3, [pc, #484]	@ (8003d50 <ADC_Init+0x1f0>)
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	431a      	orrs	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	021a      	lsls	r2, r3, #8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685a      	ldr	r2, [r3, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003bb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6899      	ldr	r1, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf2:	4a58      	ldr	r2, [pc, #352]	@ (8003d54 <ADC_Init+0x1f4>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d022      	beq.n	8003c3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6899      	ldr	r1, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6899      	ldr	r1, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	609a      	str	r2, [r3, #8]
 8003c3c:	e00f      	b.n	8003c5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c5c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0202 	bic.w	r2, r2, #2
 8003c6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6899      	ldr	r1, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	7e1b      	ldrb	r3, [r3, #24]
 8003c78:	005a      	lsls	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d01b      	beq.n	8003cc4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c9a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003caa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	6859      	ldr	r1, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	035a      	lsls	r2, r3, #13
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	e007      	b.n	8003cd4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cd2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	051a      	lsls	r2, r3, #20
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6899      	ldr	r1, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d16:	025a      	lsls	r2, r3, #9
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6899      	ldr	r1, [r3, #8]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	029a      	lsls	r2, r3, #10
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	609a      	str	r2, [r3, #8]
}
 8003d44:	bf00      	nop
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	40012300 	.word	0x40012300
 8003d54:	0f000001 	.word	0x0f000001

08003d58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e0ed      	b.n	8003f46 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d102      	bne.n	8003d7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7ff f80e 	bl	8002d98 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d8c:	f7ff fbb4 	bl	80034f8 <HAL_GetTick>
 8003d90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003d92:	e012      	b.n	8003dba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d94:	f7ff fbb0 	bl	80034f8 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b0a      	cmp	r3, #10
 8003da0:	d90b      	bls.n	8003dba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2205      	movs	r2, #5
 8003db2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e0c5      	b.n	8003f46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0e5      	beq.n	8003d94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0202 	bic.w	r2, r2, #2
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003dd8:	f7ff fb8e 	bl	80034f8 <HAL_GetTick>
 8003ddc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003dde:	e012      	b.n	8003e06 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003de0:	f7ff fb8a 	bl	80034f8 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b0a      	cmp	r3, #10
 8003dec:	d90b      	bls.n	8003e06 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2205      	movs	r2, #5
 8003dfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e09f      	b.n	8003f46 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e5      	bne.n	8003de0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	7e1b      	ldrb	r3, [r3, #24]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d108      	bne.n	8003e2e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	e007      	b.n	8003e3e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	7e5b      	ldrb	r3, [r3, #25]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d108      	bne.n	8003e58 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	e007      	b.n	8003e68 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	7e9b      	ldrb	r3, [r3, #26]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d108      	bne.n	8003e82 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0220 	orr.w	r2, r2, #32
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	e007      	b.n	8003e92 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0220 	bic.w	r2, r2, #32
 8003e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	7edb      	ldrb	r3, [r3, #27]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d108      	bne.n	8003eac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 0210 	bic.w	r2, r2, #16
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	e007      	b.n	8003ebc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0210 	orr.w	r2, r2, #16
 8003eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	7f1b      	ldrb	r3, [r3, #28]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d108      	bne.n	8003ed6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0208 	orr.w	r2, r2, #8
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	e007      	b.n	8003ee6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0208 	bic.w	r2, r2, #8
 8003ee4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	7f5b      	ldrb	r3, [r3, #29]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d108      	bne.n	8003f00 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0204 	orr.w	r2, r2, #4
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e007      	b.n	8003f10 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0204 	bic.w	r2, r2, #4
 8003f0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	ea42 0103 	orr.w	r1, r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	1e5a      	subs	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f60:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d003      	beq.n	8003f70 <HAL_CAN_ConfigFilter+0x20>
 8003f68:	7dfb      	ldrb	r3, [r7, #23]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	f040 80be 	bne.w	80040ec <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003f70:	4b65      	ldr	r3, [pc, #404]	@ (8004108 <HAL_CAN_ConfigFilter+0x1b8>)
 8003f72:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f7a:	f043 0201 	orr.w	r2, r3, #1
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003f8a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	f003 031f 	and.w	r3, r3, #31
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	401a      	ands	r2, r3
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d123      	bne.n	800401a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	401a      	ands	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003ff4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	3248      	adds	r2, #72	@ 0x48
 8003ffa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800400e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004010:	6939      	ldr	r1, [r7, #16]
 8004012:	3348      	adds	r3, #72	@ 0x48
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	440b      	add	r3, r1
 8004018:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d122      	bne.n	8004068 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	431a      	orrs	r2, r3
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004042:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	3248      	adds	r2, #72	@ 0x48
 8004048:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800405c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800405e:	6939      	ldr	r1, [r7, #16]
 8004060:	3348      	adds	r3, #72	@ 0x48
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	440b      	add	r3, r1
 8004066:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d109      	bne.n	8004084 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	43db      	mvns	r3, r3
 800407a:	401a      	ands	r2, r3
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004082:	e007      	b.n	8004094 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	431a      	orrs	r2, r3
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d109      	bne.n	80040b0 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	401a      	ands	r2, r3
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80040ae:	e007      	b.n	80040c0 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d107      	bne.n	80040d8 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	431a      	orrs	r2, r3
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80040de:	f023 0201 	bic.w	r2, r3, #1
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	e006      	b.n	80040fa <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
  }
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40006400 	.word	0x40006400

0800410c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b01      	cmp	r3, #1
 800411e:	d12e      	bne.n	800417e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0201 	bic.w	r2, r2, #1
 8004136:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004138:	f7ff f9de 	bl	80034f8 <HAL_GetTick>
 800413c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800413e:	e012      	b.n	8004166 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004140:	f7ff f9da 	bl	80034f8 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b0a      	cmp	r3, #10
 800414c:	d90b      	bls.n	8004166 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2205      	movs	r2, #5
 800415e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e012      	b.n	800418c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e5      	bne.n	8004140 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e006      	b.n	800418c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004182:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
  }
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004194:	b480      	push	{r7}
 8004196:	b089      	sub	sp, #36	@ 0x24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
 80041a0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80041b2:	7ffb      	ldrb	r3, [r7, #31]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d003      	beq.n	80041c0 <HAL_CAN_AddTxMessage+0x2c>
 80041b8:	7ffb      	ldrb	r3, [r7, #31]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	f040 80ad 	bne.w	800431a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 8095 	beq.w	800430a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	0e1b      	lsrs	r3, r3, #24
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80041ea:	2201      	movs	r2, #1
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	409a      	lsls	r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10d      	bne.n	8004218 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004206:	68f9      	ldr	r1, [r7, #12]
 8004208:	6809      	ldr	r1, [r1, #0]
 800420a:	431a      	orrs	r2, r3
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	3318      	adds	r3, #24
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	440b      	add	r3, r1
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e00f      	b.n	8004238 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004222:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004228:	68f9      	ldr	r1, [r7, #12]
 800422a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800422c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	3318      	adds	r3, #24
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	440b      	add	r3, r1
 8004236:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6819      	ldr	r1, [r3, #0]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	3318      	adds	r3, #24
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	440b      	add	r3, r1
 8004248:	3304      	adds	r3, #4
 800424a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	7d1b      	ldrb	r3, [r3, #20]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d111      	bne.n	8004278 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	3318      	adds	r3, #24
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	4413      	add	r3, r2
 8004260:	3304      	adds	r3, #4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	6811      	ldr	r1, [r2, #0]
 8004268:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	3318      	adds	r3, #24
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	440b      	add	r3, r1
 8004274:	3304      	adds	r3, #4
 8004276:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3307      	adds	r3, #7
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	061a      	lsls	r2, r3, #24
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3306      	adds	r3, #6
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	041b      	lsls	r3, r3, #16
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3305      	adds	r3, #5
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	4313      	orrs	r3, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	3204      	adds	r2, #4
 8004298:	7812      	ldrb	r2, [r2, #0]
 800429a:	4610      	mov	r0, r2
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	6811      	ldr	r1, [r2, #0]
 80042a0:	ea43 0200 	orr.w	r2, r3, r0
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	440b      	add	r3, r1
 80042aa:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80042ae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3303      	adds	r3, #3
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	061a      	lsls	r2, r3, #24
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3302      	adds	r3, #2
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	041b      	lsls	r3, r3, #16
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	3301      	adds	r3, #1
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	4313      	orrs	r3, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	7812      	ldrb	r2, [r2, #0]
 80042d0:	4610      	mov	r0, r2
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	6811      	ldr	r1, [r2, #0]
 80042d6:	ea43 0200 	orr.w	r2, r3, r0
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	440b      	add	r3, r1
 80042e0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80042e4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	3318      	adds	r3, #24
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	4413      	add	r3, r2
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	6811      	ldr	r1, [r2, #0]
 80042f8:	f043 0201 	orr.w	r2, r3, #1
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	3318      	adds	r3, #24
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	440b      	add	r3, r1
 8004304:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	e00e      	b.n	8004328 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e006      	b.n	8004328 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
  }
}
 8004328:	4618      	mov	r0, r3
 800432a:	3724      	adds	r7, #36	@ 0x24
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004348:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800434a:	7dfb      	ldrb	r3, [r7, #23]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d003      	beq.n	8004358 <HAL_CAN_GetRxMessage+0x24>
 8004350:	7dfb      	ldrb	r3, [r7, #23]
 8004352:	2b02      	cmp	r3, #2
 8004354:	f040 8103 	bne.w	800455e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10e      	bne.n	800437c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f003 0303 	and.w	r3, r3, #3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d116      	bne.n	800439a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0f7      	b.n	800456c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d107      	bne.n	800439a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e0e8      	b.n	800456c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	331b      	adds	r3, #27
 80043a2:	011b      	lsls	r3, r3, #4
 80043a4:	4413      	add	r3, r2
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0204 	and.w	r2, r3, #4
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10c      	bne.n	80043d2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	331b      	adds	r3, #27
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	4413      	add	r3, r2
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	0d5b      	lsrs	r3, r3, #21
 80043c8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	e00b      	b.n	80043ea <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	331b      	adds	r3, #27
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	4413      	add	r3, r2
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	08db      	lsrs	r3, r3, #3
 80043e2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	331b      	adds	r3, #27
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	4413      	add	r3, r2
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0202 	and.w	r2, r3, #2
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	331b      	adds	r3, #27
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	4413      	add	r3, r2
 800440c:	3304      	adds	r3, #4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2208      	movs	r2, #8
 800441c:	611a      	str	r2, [r3, #16]
 800441e:	e00b      	b.n	8004438 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	331b      	adds	r3, #27
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	4413      	add	r3, r2
 800442c:	3304      	adds	r3, #4
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 020f 	and.w	r2, r3, #15
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	331b      	adds	r3, #27
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	4413      	add	r3, r2
 8004444:	3304      	adds	r3, #4
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	0a1b      	lsrs	r3, r3, #8
 800444a:	b2da      	uxtb	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	331b      	adds	r3, #27
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	4413      	add	r3, r2
 800445c:	3304      	adds	r3, #4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	0c1b      	lsrs	r3, r3, #16
 8004462:	b29a      	uxth	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	4413      	add	r3, r2
 8004472:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	4413      	add	r3, r2
 8004488:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	0a1a      	lsrs	r2, r3, #8
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	3301      	adds	r3, #1
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	0c1a      	lsrs	r2, r3, #16
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	3302      	adds	r3, #2
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	0e1a      	lsrs	r2, r3, #24
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	3303      	adds	r3, #3
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	3304      	adds	r3, #4
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	0a1a      	lsrs	r2, r3, #8
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	3305      	adds	r3, #5
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	4413      	add	r3, r2
 8004508:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	0c1a      	lsrs	r2, r3, #16
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	3306      	adds	r3, #6
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	4413      	add	r3, r2
 8004522:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	0e1a      	lsrs	r2, r3, #24
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	3307      	adds	r3, #7
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d108      	bne.n	800454a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0220 	orr.w	r2, r2, #32
 8004546:	60da      	str	r2, [r3, #12]
 8004548:	e007      	b.n	800455a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691a      	ldr	r2, [r3, #16]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0220 	orr.w	r2, r2, #32
 8004558:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	e006      	b.n	800456c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004562:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
  }
}
 800456c:	4618      	mov	r0, r3
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004588:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d002      	beq.n	8004596 <HAL_CAN_ActivateNotification+0x1e>
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d109      	bne.n	80045aa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6959      	ldr	r1, [r3, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80045a6:	2300      	movs	r3, #0
 80045a8:	e006      	b.n	80045b8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
  }
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	@ 0x28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80045cc:	2300      	movs	r3, #0
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d07c      	beq.n	8004704 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d023      	beq.n	800465c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2201      	movs	r2, #1
 800461a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f983 	bl	8004932 <HAL_CAN_TxMailbox0CompleteCallback>
 800462c:	e016      	b.n	800465c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d004      	beq.n	8004642 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800463e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004640:	e00c      	b.n	800465c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800464c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800464e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004652:	627b      	str	r3, [r7, #36]	@ 0x24
 8004654:	e002      	b.n	800465c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f989 	bl	800496e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004662:	2b00      	cmp	r3, #0
 8004664:	d024      	beq.n	80046b0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800466e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f963 	bl	8004946 <HAL_CAN_TxMailbox1CompleteCallback>
 8004680:	e016      	b.n	80046b0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004688:	2b00      	cmp	r3, #0
 800468a:	d004      	beq.n	8004696 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800468c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
 8004694:	e00c      	b.n	80046b0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800469c:	2b00      	cmp	r3, #0
 800469e:	d004      	beq.n	80046aa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a8:	e002      	b.n	80046b0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f969 	bl	8004982 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d024      	beq.n	8004704 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80046c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f943 	bl	800495a <HAL_CAN_TxMailbox2CompleteCallback>
 80046d4:	e016      	b.n	8004704 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d004      	beq.n	80046ea <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80046e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e8:	e00c      	b.n	8004704 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d004      	beq.n	80046fe <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80046f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80046fc:	e002      	b.n	8004704 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f949 	bl	8004996 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00c      	beq.n	8004728 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f003 0310 	and.w	r3, r3, #16
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800471e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2210      	movs	r2, #16
 8004726:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b00      	cmp	r3, #0
 800473a:	d006      	beq.n	800474a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2208      	movs	r2, #8
 8004742:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f930 	bl	80049aa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800474a:	6a3b      	ldr	r3, [r7, #32]
 800474c:	f003 0302 	and.w	r3, r3, #2
 8004750:	2b00      	cmp	r3, #0
 8004752:	d009      	beq.n	8004768 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fd f948 	bl	80019f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00c      	beq.n	800478c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	f003 0310 	and.w	r3, r3, #16
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004782:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2210      	movs	r2, #16
 800478a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d006      	beq.n	80047ae <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2208      	movs	r2, #8
 80047a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f912 	bl	80049d2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d009      	beq.n	80047cc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f8f9 	bl	80049be <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00b      	beq.n	80047ee <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d006      	beq.n	80047ee <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2210      	movs	r2, #16
 80047e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f8fc 	bl	80049e6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00b      	beq.n	8004810 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d006      	beq.n	8004810 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2208      	movs	r2, #8
 8004808:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f8f5 	bl	80049fa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d07b      	beq.n	8004912 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f003 0304 	and.w	r3, r3, #4
 8004820:	2b00      	cmp	r3, #0
 8004822:	d072      	beq.n	800490a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800482a:	2b00      	cmp	r3, #0
 800482c:	d008      	beq.n	8004840 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	f043 0301 	orr.w	r3, r3, #1
 800483e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004856:	f043 0302 	orr.w	r3, r3, #2
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004872:	f043 0304 	orr.w	r3, r3, #4
 8004876:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004878:	6a3b      	ldr	r3, [r7, #32]
 800487a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800487e:	2b00      	cmp	r3, #0
 8004880:	d043      	beq.n	800490a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004888:	2b00      	cmp	r3, #0
 800488a:	d03e      	beq.n	800490a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004892:	2b60      	cmp	r3, #96	@ 0x60
 8004894:	d02b      	beq.n	80048ee <HAL_CAN_IRQHandler+0x32a>
 8004896:	2b60      	cmp	r3, #96	@ 0x60
 8004898:	d82e      	bhi.n	80048f8 <HAL_CAN_IRQHandler+0x334>
 800489a:	2b50      	cmp	r3, #80	@ 0x50
 800489c:	d022      	beq.n	80048e4 <HAL_CAN_IRQHandler+0x320>
 800489e:	2b50      	cmp	r3, #80	@ 0x50
 80048a0:	d82a      	bhi.n	80048f8 <HAL_CAN_IRQHandler+0x334>
 80048a2:	2b40      	cmp	r3, #64	@ 0x40
 80048a4:	d019      	beq.n	80048da <HAL_CAN_IRQHandler+0x316>
 80048a6:	2b40      	cmp	r3, #64	@ 0x40
 80048a8:	d826      	bhi.n	80048f8 <HAL_CAN_IRQHandler+0x334>
 80048aa:	2b30      	cmp	r3, #48	@ 0x30
 80048ac:	d010      	beq.n	80048d0 <HAL_CAN_IRQHandler+0x30c>
 80048ae:	2b30      	cmp	r3, #48	@ 0x30
 80048b0:	d822      	bhi.n	80048f8 <HAL_CAN_IRQHandler+0x334>
 80048b2:	2b10      	cmp	r3, #16
 80048b4:	d002      	beq.n	80048bc <HAL_CAN_IRQHandler+0x2f8>
 80048b6:	2b20      	cmp	r3, #32
 80048b8:	d005      	beq.n	80048c6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80048ba:	e01d      	b.n	80048f8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	f043 0308 	orr.w	r3, r3, #8
 80048c2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80048c4:	e019      	b.n	80048fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80048c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c8:	f043 0310 	orr.w	r3, r3, #16
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80048ce:	e014      	b.n	80048fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80048d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d2:	f043 0320 	orr.w	r3, r3, #32
 80048d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80048d8:	e00f      	b.n	80048fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80048da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80048e2:	e00a      	b.n	80048fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80048e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80048ec:	e005      	b.n	80048fa <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80048ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80048f6:	e000      	b.n	80048fa <HAL_CAN_IRQHandler+0x336>
            break;
 80048f8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	699a      	ldr	r2, [r3, #24]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004908:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2204      	movs	r2, #4
 8004910:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004914:	2b00      	cmp	r3, #0
 8004916:	d008      	beq.n	800492a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f872 	bl	8004a0e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800492a:	bf00      	nop
 800492c:	3728      	adds	r7, #40	@ 0x28
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800496e:	b480      	push	{r7}
 8004970:	b083      	sub	sp, #12
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004982:	b480      	push	{r7}
 8004984:	b083      	sub	sp, #12
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800499e:	bf00      	nop
 80049a0:	370c      	adds	r7, #12
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b083      	sub	sp, #12
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80049b2:	bf00      	nop
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004a02:	bf00      	nop
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a34:	4b0c      	ldr	r3, [pc, #48]	@ (8004a68 <__NVIC_SetPriorityGrouping+0x44>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a40:	4013      	ands	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a56:	4a04      	ldr	r2, [pc, #16]	@ (8004a68 <__NVIC_SetPriorityGrouping+0x44>)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	60d3      	str	r3, [r2, #12]
}
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	e000ed00 	.word	0xe000ed00

08004a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a70:	4b04      	ldr	r3, [pc, #16]	@ (8004a84 <__NVIC_GetPriorityGrouping+0x18>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	0a1b      	lsrs	r3, r3, #8
 8004a76:	f003 0307 	and.w	r3, r3, #7
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	e000ed00 	.word	0xe000ed00

08004a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	4603      	mov	r3, r0
 8004a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	db0b      	blt.n	8004ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a9a:	79fb      	ldrb	r3, [r7, #7]
 8004a9c:	f003 021f 	and.w	r2, r3, #31
 8004aa0:	4907      	ldr	r1, [pc, #28]	@ (8004ac0 <__NVIC_EnableIRQ+0x38>)
 8004aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aa6:	095b      	lsrs	r3, r3, #5
 8004aa8:	2001      	movs	r0, #1
 8004aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8004aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	e000e100 	.word	0xe000e100

08004ac4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	4603      	mov	r3, r0
 8004acc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	db12      	blt.n	8004afc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ad6:	79fb      	ldrb	r3, [r7, #7]
 8004ad8:	f003 021f 	and.w	r2, r3, #31
 8004adc:	490a      	ldr	r1, [pc, #40]	@ (8004b08 <__NVIC_DisableIRQ+0x44>)
 8004ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8004aea:	3320      	adds	r3, #32
 8004aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004af0:	f3bf 8f4f 	dsb	sy
}
 8004af4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004af6:	f3bf 8f6f 	isb	sy
}
 8004afa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	e000e100 	.word	0xe000e100

08004b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	4603      	mov	r3, r0
 8004b14:	6039      	str	r1, [r7, #0]
 8004b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	db0a      	blt.n	8004b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	490c      	ldr	r1, [pc, #48]	@ (8004b58 <__NVIC_SetPriority+0x4c>)
 8004b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2a:	0112      	lsls	r2, r2, #4
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	440b      	add	r3, r1
 8004b30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b34:	e00a      	b.n	8004b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	4908      	ldr	r1, [pc, #32]	@ (8004b5c <__NVIC_SetPriority+0x50>)
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	3b04      	subs	r3, #4
 8004b44:	0112      	lsls	r2, r2, #4
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	440b      	add	r3, r1
 8004b4a:	761a      	strb	r2, [r3, #24]
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	e000e100 	.word	0xe000e100
 8004b5c:	e000ed00 	.word	0xe000ed00

08004b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b089      	sub	sp, #36	@ 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f1c3 0307 	rsb	r3, r3, #7
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	bf28      	it	cs
 8004b7e:	2304      	movcs	r3, #4
 8004b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	3304      	adds	r3, #4
 8004b86:	2b06      	cmp	r3, #6
 8004b88:	d902      	bls.n	8004b90 <NVIC_EncodePriority+0x30>
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	3b03      	subs	r3, #3
 8004b8e:	e000      	b.n	8004b92 <NVIC_EncodePriority+0x32>
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b94:	f04f 32ff 	mov.w	r2, #4294967295
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9e:	43da      	mvns	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	401a      	ands	r2, r3
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb2:	43d9      	mvns	r1, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb8:	4313      	orrs	r3, r2
         );
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3724      	adds	r7, #36	@ 0x24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bd8:	d301      	bcc.n	8004bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e00f      	b.n	8004bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bde:	4a0a      	ldr	r2, [pc, #40]	@ (8004c08 <SysTick_Config+0x40>)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004be6:	210f      	movs	r1, #15
 8004be8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bec:	f7ff ff8e 	bl	8004b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bf0:	4b05      	ldr	r3, [pc, #20]	@ (8004c08 <SysTick_Config+0x40>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bf6:	4b04      	ldr	r3, [pc, #16]	@ (8004c08 <SysTick_Config+0x40>)
 8004bf8:	2207      	movs	r2, #7
 8004bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	e000e010 	.word	0xe000e010

08004c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7ff ff05 	bl	8004a24 <__NVIC_SetPriorityGrouping>
}
 8004c1a:	bf00      	nop
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b086      	sub	sp, #24
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	4603      	mov	r3, r0
 8004c2a:	60b9      	str	r1, [r7, #8]
 8004c2c:	607a      	str	r2, [r7, #4]
 8004c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c30:	2300      	movs	r3, #0
 8004c32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c34:	f7ff ff1a 	bl	8004a6c <__NVIC_GetPriorityGrouping>
 8004c38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	68b9      	ldr	r1, [r7, #8]
 8004c3e:	6978      	ldr	r0, [r7, #20]
 8004c40:	f7ff ff8e 	bl	8004b60 <NVIC_EncodePriority>
 8004c44:	4602      	mov	r2, r0
 8004c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff ff5d 	bl	8004b0c <__NVIC_SetPriority>
}
 8004c52:	bf00      	nop
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}

08004c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	4603      	mov	r3, r0
 8004c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff ff0d 	bl	8004a88 <__NVIC_EnableIRQ>
}
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b082      	sub	sp, #8
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff ff1d 	bl	8004ac4 <__NVIC_DisableIRQ>
}
 8004c8a:	bf00      	nop
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff ff94 	bl	8004bc8 <SysTick_Config>
 8004ca0:	4603      	mov	r3, r0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3708      	adds	r7, #8
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b083      	sub	sp, #12
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d004      	beq.n	8004cc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2280      	movs	r2, #128	@ 0x80
 8004cc2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e00c      	b.n	8004ce2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2205      	movs	r2, #5
 8004ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0201 	bic.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cfc:	b2db      	uxtb	r3, r3
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b089      	sub	sp, #36	@ 0x24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	e16b      	b.n	8005000 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d28:	2201      	movs	r2, #1
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	f040 815a 	bne.w	8004ffa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d005      	beq.n	8004d5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d130      	bne.n	8004dc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	2203      	movs	r2, #3
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d94:	2201      	movs	r2, #1
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	4013      	ands	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 0201 	and.w	r2, r3, #1
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d017      	beq.n	8004dfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4013      	ands	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d123      	bne.n	8004e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	08da      	lsrs	r2, r3, #3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3208      	adds	r2, #8
 8004e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	220f      	movs	r2, #15
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	43db      	mvns	r3, r3
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	08da      	lsrs	r2, r3, #3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3208      	adds	r2, #8
 8004e4a:	69b9      	ldr	r1, [r7, #24]
 8004e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 0203 	and.w	r2, r3, #3
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80b4 	beq.w	8004ffa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	4b60      	ldr	r3, [pc, #384]	@ (8005018 <HAL_GPIO_Init+0x30c>)
 8004e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9a:	4a5f      	ldr	r2, [pc, #380]	@ (8005018 <HAL_GPIO_Init+0x30c>)
 8004e9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ea0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8005018 <HAL_GPIO_Init+0x30c>)
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004eae:	4a5b      	ldr	r2, [pc, #364]	@ (800501c <HAL_GPIO_Init+0x310>)
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	089b      	lsrs	r3, r3, #2
 8004eb4:	3302      	adds	r3, #2
 8004eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	220f      	movs	r2, #15
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a52      	ldr	r2, [pc, #328]	@ (8005020 <HAL_GPIO_Init+0x314>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d02b      	beq.n	8004f32 <HAL_GPIO_Init+0x226>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a51      	ldr	r2, [pc, #324]	@ (8005024 <HAL_GPIO_Init+0x318>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d025      	beq.n	8004f2e <HAL_GPIO_Init+0x222>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a50      	ldr	r2, [pc, #320]	@ (8005028 <HAL_GPIO_Init+0x31c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d01f      	beq.n	8004f2a <HAL_GPIO_Init+0x21e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a4f      	ldr	r2, [pc, #316]	@ (800502c <HAL_GPIO_Init+0x320>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d019      	beq.n	8004f26 <HAL_GPIO_Init+0x21a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a4e      	ldr	r2, [pc, #312]	@ (8005030 <HAL_GPIO_Init+0x324>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d013      	beq.n	8004f22 <HAL_GPIO_Init+0x216>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a4d      	ldr	r2, [pc, #308]	@ (8005034 <HAL_GPIO_Init+0x328>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00d      	beq.n	8004f1e <HAL_GPIO_Init+0x212>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a4c      	ldr	r2, [pc, #304]	@ (8005038 <HAL_GPIO_Init+0x32c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d007      	beq.n	8004f1a <HAL_GPIO_Init+0x20e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a4b      	ldr	r2, [pc, #300]	@ (800503c <HAL_GPIO_Init+0x330>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d101      	bne.n	8004f16 <HAL_GPIO_Init+0x20a>
 8004f12:	2307      	movs	r3, #7
 8004f14:	e00e      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f16:	2308      	movs	r3, #8
 8004f18:	e00c      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f1a:	2306      	movs	r3, #6
 8004f1c:	e00a      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f1e:	2305      	movs	r3, #5
 8004f20:	e008      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f22:	2304      	movs	r3, #4
 8004f24:	e006      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f26:	2303      	movs	r3, #3
 8004f28:	e004      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e002      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f32:	2300      	movs	r3, #0
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	f002 0203 	and.w	r2, r2, #3
 8004f3a:	0092      	lsls	r2, r2, #2
 8004f3c:	4093      	lsls	r3, r2
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f44:	4935      	ldr	r1, [pc, #212]	@ (800501c <HAL_GPIO_Init+0x310>)
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	089b      	lsrs	r3, r3, #2
 8004f4a:	3302      	adds	r3, #2
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f52:	4b3b      	ldr	r3, [pc, #236]	@ (8005040 <HAL_GPIO_Init+0x334>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f76:	4a32      	ldr	r2, [pc, #200]	@ (8005040 <HAL_GPIO_Init+0x334>)
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f7c:	4b30      	ldr	r3, [pc, #192]	@ (8005040 <HAL_GPIO_Init+0x334>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fa0:	4a27      	ldr	r2, [pc, #156]	@ (8005040 <HAL_GPIO_Init+0x334>)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fa6:	4b26      	ldr	r3, [pc, #152]	@ (8005040 <HAL_GPIO_Init+0x334>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fca:	4a1d      	ldr	r2, [pc, #116]	@ (8005040 <HAL_GPIO_Init+0x334>)
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8005040 <HAL_GPIO_Init+0x334>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ff4:	4a12      	ldr	r2, [pc, #72]	@ (8005040 <HAL_GPIO_Init+0x334>)
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	2b0f      	cmp	r3, #15
 8005004:	f67f ae90 	bls.w	8004d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	3724      	adds	r7, #36	@ 0x24
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40023800 	.word	0x40023800
 800501c:	40013800 	.word	0x40013800
 8005020:	40020000 	.word	0x40020000
 8005024:	40020400 	.word	0x40020400
 8005028:	40020800 	.word	0x40020800
 800502c:	40020c00 	.word	0x40020c00
 8005030:	40021000 	.word	0x40021000
 8005034:	40021400 	.word	0x40021400
 8005038:	40021800 	.word	0x40021800
 800503c:	40021c00 	.word	0x40021c00
 8005040:	40013c00 	.word	0x40013c00

08005044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	887b      	ldrh	r3, [r7, #2]
 8005056:	4013      	ands	r3, r2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	e001      	b.n	8005066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005062:	2300      	movs	r3, #0
 8005064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005066:	7bfb      	ldrb	r3, [r7, #15]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	807b      	strh	r3, [r7, #2]
 8005080:	4613      	mov	r3, r2
 8005082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005084:	787b      	ldrb	r3, [r7, #1]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800508a:	887a      	ldrh	r2, [r7, #2]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005090:	e003      	b.n	800509a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005092:	887b      	ldrh	r3, [r7, #2]
 8005094:	041a      	lsls	r2, r3, #16
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	619a      	str	r2, [r3, #24]
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050b8:	887a      	ldrh	r2, [r7, #2]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4013      	ands	r3, r2
 80050be:	041a      	lsls	r2, r3, #16
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	43d9      	mvns	r1, r3
 80050c4:	887b      	ldrh	r3, [r7, #2]
 80050c6:	400b      	ands	r3, r1
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	619a      	str	r2, [r3, #24]
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050e6:	4b08      	ldr	r3, [pc, #32]	@ (8005108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050e8:	695a      	ldr	r2, [r3, #20]
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d006      	beq.n	8005100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050f2:	4a05      	ldr	r2, [pc, #20]	@ (8005108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050f8:	88fb      	ldrh	r3, [r7, #6]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fc fb5e 	bl	80017bc <HAL_GPIO_EXTI_Callback>
  }
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40013c00 	.word	0x40013c00

0800510c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e12b      	b.n	8005376 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d106      	bne.n	8005138 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7fd fee2 	bl	8002efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2224      	movs	r2, #36	@ 0x24
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800515e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800516e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005170:	f003 f814 	bl	800819c <HAL_RCC_GetPCLK1Freq>
 8005174:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	4a81      	ldr	r2, [pc, #516]	@ (8005380 <HAL_I2C_Init+0x274>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d807      	bhi.n	8005190 <HAL_I2C_Init+0x84>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	4a80      	ldr	r2, [pc, #512]	@ (8005384 <HAL_I2C_Init+0x278>)
 8005184:	4293      	cmp	r3, r2
 8005186:	bf94      	ite	ls
 8005188:	2301      	movls	r3, #1
 800518a:	2300      	movhi	r3, #0
 800518c:	b2db      	uxtb	r3, r3
 800518e:	e006      	b.n	800519e <HAL_I2C_Init+0x92>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4a7d      	ldr	r2, [pc, #500]	@ (8005388 <HAL_I2C_Init+0x27c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	bf94      	ite	ls
 8005198:	2301      	movls	r3, #1
 800519a:	2300      	movhi	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e0e7      	b.n	8005376 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	4a78      	ldr	r2, [pc, #480]	@ (800538c <HAL_I2C_Init+0x280>)
 80051aa:	fba2 2303 	umull	r2, r3, r2, r3
 80051ae:	0c9b      	lsrs	r3, r3, #18
 80051b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4a6a      	ldr	r2, [pc, #424]	@ (8005380 <HAL_I2C_Init+0x274>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d802      	bhi.n	80051e0 <HAL_I2C_Init+0xd4>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	3301      	adds	r3, #1
 80051de:	e009      	b.n	80051f4 <HAL_I2C_Init+0xe8>
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80051e6:	fb02 f303 	mul.w	r3, r2, r3
 80051ea:	4a69      	ldr	r2, [pc, #420]	@ (8005390 <HAL_I2C_Init+0x284>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	099b      	lsrs	r3, r3, #6
 80051f2:	3301      	adds	r3, #1
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	430b      	orrs	r3, r1
 80051fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005206:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	495c      	ldr	r1, [pc, #368]	@ (8005380 <HAL_I2C_Init+0x274>)
 8005210:	428b      	cmp	r3, r1
 8005212:	d819      	bhi.n	8005248 <HAL_I2C_Init+0x13c>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	1e59      	subs	r1, r3, #1
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005222:	1c59      	adds	r1, r3, #1
 8005224:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005228:	400b      	ands	r3, r1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00a      	beq.n	8005244 <HAL_I2C_Init+0x138>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1e59      	subs	r1, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	fbb1 f3f3 	udiv	r3, r1, r3
 800523c:	3301      	adds	r3, #1
 800523e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005242:	e051      	b.n	80052e8 <HAL_I2C_Init+0x1dc>
 8005244:	2304      	movs	r3, #4
 8005246:	e04f      	b.n	80052e8 <HAL_I2C_Init+0x1dc>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d111      	bne.n	8005274 <HAL_I2C_Init+0x168>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	1e58      	subs	r0, r3, #1
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6859      	ldr	r1, [r3, #4]
 8005258:	460b      	mov	r3, r1
 800525a:	005b      	lsls	r3, r3, #1
 800525c:	440b      	add	r3, r1
 800525e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005262:	3301      	adds	r3, #1
 8005264:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005268:	2b00      	cmp	r3, #0
 800526a:	bf0c      	ite	eq
 800526c:	2301      	moveq	r3, #1
 800526e:	2300      	movne	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	e012      	b.n	800529a <HAL_I2C_Init+0x18e>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	1e58      	subs	r0, r3, #1
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6859      	ldr	r1, [r3, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	0099      	lsls	r1, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	fbb0 f3f3 	udiv	r3, r0, r3
 800528a:	3301      	adds	r3, #1
 800528c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005290:	2b00      	cmp	r3, #0
 8005292:	bf0c      	ite	eq
 8005294:	2301      	moveq	r3, #1
 8005296:	2300      	movne	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <HAL_I2C_Init+0x196>
 800529e:	2301      	movs	r3, #1
 80052a0:	e022      	b.n	80052e8 <HAL_I2C_Init+0x1dc>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10e      	bne.n	80052c8 <HAL_I2C_Init+0x1bc>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	1e58      	subs	r0, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6859      	ldr	r1, [r3, #4]
 80052b2:	460b      	mov	r3, r1
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	440b      	add	r3, r1
 80052b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80052bc:	3301      	adds	r3, #1
 80052be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052c6:	e00f      	b.n	80052e8 <HAL_I2C_Init+0x1dc>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	1e58      	subs	r0, r3, #1
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6859      	ldr	r1, [r3, #4]
 80052d0:	460b      	mov	r3, r1
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	0099      	lsls	r1, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	fbb0 f3f3 	udiv	r3, r0, r3
 80052de:	3301      	adds	r3, #1
 80052e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052e8:	6879      	ldr	r1, [r7, #4]
 80052ea:	6809      	ldr	r1, [r1, #0]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69da      	ldr	r2, [r3, #28]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005316:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	6911      	ldr	r1, [r2, #16]
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	68d2      	ldr	r2, [r2, #12]
 8005322:	4311      	orrs	r1, r2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6812      	ldr	r2, [r2, #0]
 8005328:	430b      	orrs	r3, r1
 800532a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	695a      	ldr	r2, [r3, #20]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	431a      	orrs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	430a      	orrs	r2, r1
 8005346:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f042 0201 	orr.w	r2, r2, #1
 8005356:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2220      	movs	r2, #32
 8005362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	000186a0 	.word	0x000186a0
 8005384:	001e847f 	.word	0x001e847f
 8005388:	003d08ff 	.word	0x003d08ff
 800538c:	431bde83 	.word	0x431bde83
 8005390:	10624dd3 	.word	0x10624dd3

08005394 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a6:	2b80      	cmp	r3, #128	@ 0x80
 80053a8:	d103      	bne.n	80053b2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2200      	movs	r2, #0
 80053b0:	611a      	str	r2, [r3, #16]
  }
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	4608      	mov	r0, r1
 80053ca:	4611      	mov	r1, r2
 80053cc:	461a      	mov	r2, r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	817b      	strh	r3, [r7, #10]
 80053d2:	460b      	mov	r3, r1
 80053d4:	813b      	strh	r3, [r7, #8]
 80053d6:	4613      	mov	r3, r2
 80053d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053da:	f7fe f88d 	bl	80034f8 <HAL_GetTick>
 80053de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	f040 80d9 	bne.w	80055a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	2319      	movs	r3, #25
 80053f4:	2201      	movs	r2, #1
 80053f6:	496d      	ldr	r1, [pc, #436]	@ (80055ac <HAL_I2C_Mem_Write+0x1ec>)
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f002 f81b 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005404:	2302      	movs	r3, #2
 8005406:	e0cc      	b.n	80055a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800540e:	2b01      	cmp	r3, #1
 8005410:	d101      	bne.n	8005416 <HAL_I2C_Mem_Write+0x56>
 8005412:	2302      	movs	r3, #2
 8005414:	e0c5      	b.n	80055a2 <HAL_I2C_Mem_Write+0x1e2>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0301 	and.w	r3, r3, #1
 8005428:	2b01      	cmp	r3, #1
 800542a:	d007      	beq.n	800543c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800544a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2221      	movs	r2, #33	@ 0x21
 8005450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2240      	movs	r2, #64	@ 0x40
 8005458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a3a      	ldr	r2, [r7, #32]
 8005466:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800546c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005472:	b29a      	uxth	r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4a4d      	ldr	r2, [pc, #308]	@ (80055b0 <HAL_I2C_Mem_Write+0x1f0>)
 800547c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800547e:	88f8      	ldrh	r0, [r7, #6]
 8005480:	893a      	ldrh	r2, [r7, #8]
 8005482:	8979      	ldrh	r1, [r7, #10]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	9301      	str	r3, [sp, #4]
 8005488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	4603      	mov	r3, r0
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f001 fdaa 	bl	8006fe8 <I2C_RequestMemoryWrite>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d052      	beq.n	8005540 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e081      	b.n	80055a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	f002 f8e0 	bl	8007668 <I2C_WaitOnTXEFlagUntilTimeout>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00d      	beq.n	80054ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d107      	bne.n	80054c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e06b      	b.n	80055a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ce:	781a      	ldrb	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054da:	1c5a      	adds	r2, r3, #1
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e4:	3b01      	subs	r3, #1
 80054e6:	b29a      	uxth	r2, r3
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b04      	cmp	r3, #4
 8005506:	d11b      	bne.n	8005540 <HAL_I2C_Mem_Write+0x180>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800550c:	2b00      	cmp	r3, #0
 800550e:	d017      	beq.n	8005540 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005514:	781a      	ldrb	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800552a:	3b01      	subs	r3, #1
 800552c:	b29a      	uxth	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1aa      	bne.n	800549e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f002 f8d3 	bl	80076f8 <I2C_WaitOnBTFFlagUntilTimeout>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00d      	beq.n	8005574 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555c:	2b04      	cmp	r3, #4
 800555e:	d107      	bne.n	8005570 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800556e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e016      	b.n	80055a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	e000      	b.n	80055a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80055a0:	2302      	movs	r3, #2
  }
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3718      	adds	r7, #24
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	00100002 	.word	0x00100002
 80055b0:	ffff0000 	.word	0xffff0000

080055b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08c      	sub	sp, #48	@ 0x30
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	4608      	mov	r0, r1
 80055be:	4611      	mov	r1, r2
 80055c0:	461a      	mov	r2, r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	817b      	strh	r3, [r7, #10]
 80055c6:	460b      	mov	r3, r1
 80055c8:	813b      	strh	r3, [r7, #8]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055ce:	f7fd ff93 	bl	80034f8 <HAL_GetTick>
 80055d2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	2b20      	cmp	r3, #32
 80055de:	f040 8214 	bne.w	8005a0a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	2319      	movs	r3, #25
 80055e8:	2201      	movs	r2, #1
 80055ea:	497b      	ldr	r1, [pc, #492]	@ (80057d8 <HAL_I2C_Mem_Read+0x224>)
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f001 ff21 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80055f8:	2302      	movs	r3, #2
 80055fa:	e207      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005602:	2b01      	cmp	r3, #1
 8005604:	d101      	bne.n	800560a <HAL_I2C_Mem_Read+0x56>
 8005606:	2302      	movs	r3, #2
 8005608:	e200      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b01      	cmp	r3, #1
 800561e:	d007      	beq.n	8005630 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f042 0201 	orr.w	r2, r2, #1
 800562e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800563e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2222      	movs	r2, #34	@ 0x22
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2240      	movs	r2, #64	@ 0x40
 800564c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800565a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005660:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4a5b      	ldr	r2, [pc, #364]	@ (80057dc <HAL_I2C_Mem_Read+0x228>)
 8005670:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005672:	88f8      	ldrh	r0, [r7, #6]
 8005674:	893a      	ldrh	r2, [r7, #8]
 8005676:	8979      	ldrh	r1, [r7, #10]
 8005678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567a:	9301      	str	r3, [sp, #4]
 800567c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	4603      	mov	r3, r0
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f001 fd46 	bl	8007114 <I2C_RequestMemoryRead>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e1bc      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005696:	2b00      	cmp	r3, #0
 8005698:	d113      	bne.n	80056c2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800569a:	2300      	movs	r3, #0
 800569c:	623b      	str	r3, [r7, #32]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	623b      	str	r3, [r7, #32]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	699b      	ldr	r3, [r3, #24]
 80056ac:	623b      	str	r3, [r7, #32]
 80056ae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	e190      	b.n	80059e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c6:	2b01      	cmp	r3, #1
 80056c8:	d11b      	bne.n	8005702 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056da:	2300      	movs	r3, #0
 80056dc:	61fb      	str	r3, [r7, #28]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	61fb      	str	r3, [r7, #28]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	e170      	b.n	80059e4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005706:	2b02      	cmp	r3, #2
 8005708:	d11b      	bne.n	8005742 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005718:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005728:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572a:	2300      	movs	r3, #0
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	e150      	b.n	80059e4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005758:	e144      	b.n	80059e4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800575e:	2b03      	cmp	r3, #3
 8005760:	f200 80f1 	bhi.w	8005946 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005768:	2b01      	cmp	r3, #1
 800576a:	d123      	bne.n	80057b4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800576c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f002 f83b 	bl	80077ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e145      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579c:	3b01      	subs	r3, #1
 800579e:	b29a      	uxth	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	3b01      	subs	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057b2:	e117      	b.n	80059e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d14e      	bne.n	800585a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c2:	2200      	movs	r2, #0
 80057c4:	4906      	ldr	r1, [pc, #24]	@ (80057e0 <HAL_I2C_Mem_Read+0x22c>)
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	f001 fe34 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d008      	beq.n	80057e4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e11a      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
 80057d6:	bf00      	nop
 80057d8:	00100002 	.word	0x00100002
 80057dc:	ffff0000 	.word	0xffff0000
 80057e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	691a      	ldr	r2, [r3, #16]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fe:	b2d2      	uxtb	r2, r2
 8005800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	1c5a      	adds	r2, r3, #1
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005810:	3b01      	subs	r3, #1
 8005812:	b29a      	uxth	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005842:	3b01      	subs	r3, #1
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800584e:	b29b      	uxth	r3, r3
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005858:	e0c4      	b.n	80059e4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585c:	9300      	str	r3, [sp, #0]
 800585e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005860:	2200      	movs	r2, #0
 8005862:	496c      	ldr	r1, [pc, #432]	@ (8005a14 <HAL_I2C_Mem_Read+0x460>)
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f001 fde5 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e0cb      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691a      	ldr	r2, [r3, #16]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005896:	1c5a      	adds	r2, r3, #1
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058bc:	2200      	movs	r2, #0
 80058be:	4955      	ldr	r1, [pc, #340]	@ (8005a14 <HAL_I2C_Mem_Read+0x460>)
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	f001 fdb7 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e09d      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691a      	ldr	r2, [r3, #16]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	1c5a      	adds	r2, r3, #1
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	691a      	ldr	r2, [r3, #16]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005924:	1c5a      	adds	r2, r3, #1
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005944:	e04e      	b.n	80059e4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005946:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005948:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f001 ff4e 	bl	80077ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e058      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b04      	cmp	r3, #4
 8005998:	d124      	bne.n	80059e4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800599e:	2b03      	cmp	r3, #3
 80059a0:	d107      	bne.n	80059b2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059b0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	f47f aeb6 	bne.w	800575a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2220      	movs	r2, #32
 80059f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e000      	b.n	8005a0c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005a0a:	2302      	movs	r3, #2
  }
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3728      	adds	r7, #40	@ 0x28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	00010004 	.word	0x00010004

08005a18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a30:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a38:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a40:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a42:	7bfb      	ldrb	r3, [r7, #15]
 8005a44:	2b10      	cmp	r3, #16
 8005a46:	d003      	beq.n	8005a50 <HAL_I2C_EV_IRQHandler+0x38>
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	2b40      	cmp	r3, #64	@ 0x40
 8005a4c:	f040 80c1 	bne.w	8005bd2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10d      	bne.n	8005a86 <HAL_I2C_EV_IRQHandler+0x6e>
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005a70:	d003      	beq.n	8005a7a <HAL_I2C_EV_IRQHandler+0x62>
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005a78:	d101      	bne.n	8005a7e <HAL_I2C_EV_IRQHandler+0x66>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <HAL_I2C_EV_IRQHandler+0x68>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	f000 8132 	beq.w	8005cea <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00c      	beq.n	8005aaa <HAL_I2C_EV_IRQHandler+0x92>
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	0a5b      	lsrs	r3, r3, #9
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d006      	beq.n	8005aaa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f001 ff31 	bl	8007904 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fcf4 	bl	8006490 <I2C_Master_SB>
 8005aa8:	e092      	b.n	8005bd0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	08db      	lsrs	r3, r3, #3
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d009      	beq.n	8005aca <HAL_I2C_EV_IRQHandler+0xb2>
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	0a5b      	lsrs	r3, r3, #9
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fd6a 	bl	800659c <I2C_Master_ADD10>
 8005ac8:	e082      	b.n	8005bd0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	085b      	lsrs	r3, r3, #1
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d009      	beq.n	8005aea <HAL_I2C_EV_IRQHandler+0xd2>
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	0a5b      	lsrs	r3, r3, #9
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fd84 	bl	80065f0 <I2C_Master_ADDR>
 8005ae8:	e072      	b.n	8005bd0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	089b      	lsrs	r3, r3, #2
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d03b      	beq.n	8005b6e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b04:	f000 80f3 	beq.w	8005cee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	09db      	lsrs	r3, r3, #7
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00f      	beq.n	8005b34 <HAL_I2C_EV_IRQHandler+0x11c>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	0a9b      	lsrs	r3, r3, #10
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d009      	beq.n	8005b34 <HAL_I2C_EV_IRQHandler+0x11c>
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	089b      	lsrs	r3, r3, #2
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d103      	bne.n	8005b34 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f94c 	bl	8005dca <I2C_MasterTransmit_TXE>
 8005b32:	e04d      	b.n	8005bd0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	089b      	lsrs	r3, r3, #2
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 80d6 	beq.w	8005cee <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	0a5b      	lsrs	r3, r3, #9
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 80cf 	beq.w	8005cee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	2b21      	cmp	r3, #33	@ 0x21
 8005b54:	d103      	bne.n	8005b5e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f9d3 	bl	8005f02 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b5c:	e0c7      	b.n	8005cee <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
 8005b60:	2b40      	cmp	r3, #64	@ 0x40
 8005b62:	f040 80c4 	bne.w	8005cee <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fa41 	bl	8005fee <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b6c:	e0bf      	b.n	8005cee <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b7c:	f000 80b7 	beq.w	8005cee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	099b      	lsrs	r3, r3, #6
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00f      	beq.n	8005bac <HAL_I2C_EV_IRQHandler+0x194>
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	0a9b      	lsrs	r3, r3, #10
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d009      	beq.n	8005bac <HAL_I2C_EV_IRQHandler+0x194>
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	089b      	lsrs	r3, r3, #2
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d103      	bne.n	8005bac <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f000 faba 	bl	800611e <I2C_MasterReceive_RXNE>
 8005baa:	e011      	b.n	8005bd0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	089b      	lsrs	r3, r3, #2
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 809a 	beq.w	8005cee <HAL_I2C_EV_IRQHandler+0x2d6>
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	0a5b      	lsrs	r3, r3, #9
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 8093 	beq.w	8005cee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fb70 	bl	80062ae <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bce:	e08e      	b.n	8005cee <HAL_I2C_EV_IRQHandler+0x2d6>
 8005bd0:	e08d      	b.n	8005cee <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d004      	beq.n	8005be4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	61fb      	str	r3, [r7, #28]
 8005be2:	e007      	b.n	8005bf4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695b      	ldr	r3, [r3, #20]
 8005bf2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	085b      	lsrs	r3, r3, #1
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d012      	beq.n	8005c26 <HAL_I2C_EV_IRQHandler+0x20e>
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	0a5b      	lsrs	r3, r3, #9
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00c      	beq.n	8005c26 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005c1c:	69b9      	ldr	r1, [r7, #24]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 ff35 	bl	8006a8e <I2C_Slave_ADDR>
 8005c24:	e066      	b.n	8005cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	091b      	lsrs	r3, r3, #4
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <HAL_I2C_EV_IRQHandler+0x22e>
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	0a5b      	lsrs	r3, r3, #9
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 ff70 	bl	8006b24 <I2C_Slave_STOPF>
 8005c44:	e056      	b.n	8005cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c46:	7bbb      	ldrb	r3, [r7, #14]
 8005c48:	2b21      	cmp	r3, #33	@ 0x21
 8005c4a:	d002      	beq.n	8005c52 <HAL_I2C_EV_IRQHandler+0x23a>
 8005c4c:	7bbb      	ldrb	r3, [r7, #14]
 8005c4e:	2b29      	cmp	r3, #41	@ 0x29
 8005c50:	d125      	bne.n	8005c9e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	09db      	lsrs	r3, r3, #7
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00f      	beq.n	8005c7e <HAL_I2C_EV_IRQHandler+0x266>
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	0a9b      	lsrs	r3, r3, #10
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <HAL_I2C_EV_IRQHandler+0x266>
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	089b      	lsrs	r3, r3, #2
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d103      	bne.n	8005c7e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fe4b 	bl	8006912 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c7c:	e039      	b.n	8005cf2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	089b      	lsrs	r3, r3, #2
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d033      	beq.n	8005cf2 <HAL_I2C_EV_IRQHandler+0x2da>
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	0a5b      	lsrs	r3, r3, #9
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d02d      	beq.n	8005cf2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fe78 	bl	800698c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c9c:	e029      	b.n	8005cf2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	099b      	lsrs	r3, r3, #6
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00f      	beq.n	8005cca <HAL_I2C_EV_IRQHandler+0x2b2>
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	0a9b      	lsrs	r3, r3, #10
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d009      	beq.n	8005cca <HAL_I2C_EV_IRQHandler+0x2b2>
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	089b      	lsrs	r3, r3, #2
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d103      	bne.n	8005cca <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fe83 	bl	80069ce <I2C_SlaveReceive_RXNE>
 8005cc8:	e014      	b.n	8005cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	089b      	lsrs	r3, r3, #2
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00e      	beq.n	8005cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	0a5b      	lsrs	r3, r3, #9
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d008      	beq.n	8005cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 feb1 	bl	8006a4a <I2C_SlaveReceive_BTF>
 8005ce8:	e004      	b.n	8005cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005cea:	bf00      	nop
 8005cec:	e002      	b.n	8005cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cee:	bf00      	nop
 8005cf0:	e000      	b.n	8005cf4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cf2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005cf4:	3720      	adds	r7, #32
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b083      	sub	sp, #12
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005d2a:	bf00      	nop
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d36:	b480      	push	{r7}
 8005d38:	b083      	sub	sp, #12
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005d3e:	bf00      	nop
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b083      	sub	sp, #12
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	460b      	mov	r3, r1
 8005d54:	70fb      	strb	r3, [r7, #3]
 8005d56:	4613      	mov	r3, r2
 8005d58:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dd8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005de0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d150      	bne.n	8005e92 <I2C_MasterTransmit_TXE+0xc8>
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
 8005df2:	2b21      	cmp	r3, #33	@ 0x21
 8005df4:	d14d      	bne.n	8005e92 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2b08      	cmp	r3, #8
 8005dfa:	d01d      	beq.n	8005e38 <I2C_MasterTransmit_TXE+0x6e>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	d01a      	beq.n	8005e38 <I2C_MasterTransmit_TXE+0x6e>
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e08:	d016      	beq.n	8005e38 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e18:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2211      	movs	r2, #17
 8005e1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2220      	movs	r2, #32
 8005e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff ff62 	bl	8005cfa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e36:	e060      	b.n	8005efa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e46:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	681a      	ldr	r2, [r3, #0]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e56:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b40      	cmp	r3, #64	@ 0x40
 8005e70:	d107      	bne.n	8005e82 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff ff7d 	bl	8005d7a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e80:	e03b      	b.n	8005efa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff ff35 	bl	8005cfa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e90:	e033      	b.n	8005efa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	2b21      	cmp	r3, #33	@ 0x21
 8005e96:	d005      	beq.n	8005ea4 <I2C_MasterTransmit_TXE+0xda>
 8005e98:	7bbb      	ldrb	r3, [r7, #14]
 8005e9a:	2b40      	cmp	r3, #64	@ 0x40
 8005e9c:	d12d      	bne.n	8005efa <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	2b22      	cmp	r3, #34	@ 0x22
 8005ea2:	d12a      	bne.n	8005efa <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d108      	bne.n	8005ec0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ebc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005ebe:	e01c      	b.n	8005efa <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b40      	cmp	r3, #64	@ 0x40
 8005eca:	d103      	bne.n	8005ed4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f88e 	bl	8005fee <I2C_MemoryTransmit_TXE_BTF>
}
 8005ed2:	e012      	b.n	8005efa <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed8:	781a      	ldrb	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee4:	1c5a      	adds	r2, r3, #1
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	b29a      	uxth	r2, r3
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005ef8:	e7ff      	b.n	8005efa <I2C_MasterTransmit_TXE+0x130>
 8005efa:	bf00      	nop
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b084      	sub	sp, #16
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b21      	cmp	r3, #33	@ 0x21
 8005f1a:	d164      	bne.n	8005fe6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d012      	beq.n	8005f4c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f2a:	781a      	ldrb	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005f4a:	e04c      	b.n	8005fe6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b08      	cmp	r3, #8
 8005f50:	d01d      	beq.n	8005f8e <I2C_MasterTransmit_BTF+0x8c>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	d01a      	beq.n	8005f8e <I2C_MasterTransmit_BTF+0x8c>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f5e:	d016      	beq.n	8005f8e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f6e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2211      	movs	r2, #17
 8005f74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7ff feb7 	bl	8005cfa <HAL_I2C_MasterTxCpltCallback>
}
 8005f8c:	e02b      	b.n	8005fe6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f9c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fac:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2220      	movs	r2, #32
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	2b40      	cmp	r3, #64	@ 0x40
 8005fc6:	d107      	bne.n	8005fd8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff fed2 	bl	8005d7a <HAL_I2C_MemTxCpltCallback>
}
 8005fd6:	e006      	b.n	8005fe6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff fe8a 	bl	8005cfa <HAL_I2C_MasterTxCpltCallback>
}
 8005fe6:	bf00      	nop
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ffc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006002:	2b00      	cmp	r3, #0
 8006004:	d11d      	bne.n	8006042 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800600a:	2b01      	cmp	r3, #1
 800600c:	d10b      	bne.n	8006026 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006012:	b2da      	uxtb	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800601e:	1c9a      	adds	r2, r3, #2
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8006024:	e077      	b.n	8006116 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800602a:	b29b      	uxth	r3, r3
 800602c:	121b      	asrs	r3, r3, #8
 800602e:	b2da      	uxtb	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006040:	e069      	b.n	8006116 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006046:	2b01      	cmp	r3, #1
 8006048:	d10b      	bne.n	8006062 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800604e:	b2da      	uxtb	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006060:	e059      	b.n	8006116 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006066:	2b02      	cmp	r3, #2
 8006068:	d152      	bne.n	8006110 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800606a:	7bfb      	ldrb	r3, [r7, #15]
 800606c:	2b22      	cmp	r3, #34	@ 0x22
 800606e:	d10d      	bne.n	800608c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800607e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800608a:	e044      	b.n	8006116 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006090:	b29b      	uxth	r3, r3
 8006092:	2b00      	cmp	r3, #0
 8006094:	d015      	beq.n	80060c2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	2b21      	cmp	r3, #33	@ 0x21
 800609a:	d112      	bne.n	80060c2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a0:	781a      	ldrb	r2, [r3, #0]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	3b01      	subs	r3, #1
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80060c0:	e029      	b.n	8006116 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d124      	bne.n	8006116 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	2b21      	cmp	r3, #33	@ 0x21
 80060d0:	d121      	bne.n	8006116 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80060e0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060f0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff fe36 	bl	8005d7a <HAL_I2C_MemTxCpltCallback>
}
 800610e:	e002      	b.n	8006116 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff f93f 	bl	8005394 <I2C_Flush_DR>
}
 8006116:	bf00      	nop
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b22      	cmp	r3, #34	@ 0x22
 8006130:	f040 80b9 	bne.w	80062a6 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006138:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613e:	b29b      	uxth	r3, r3
 8006140:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2b03      	cmp	r3, #3
 8006146:	d921      	bls.n	800618c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	691a      	ldr	r2, [r3, #16]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006164:	b29b      	uxth	r3, r3
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006172:	b29b      	uxth	r3, r3
 8006174:	2b03      	cmp	r3, #3
 8006176:	f040 8096 	bne.w	80062a6 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006188:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800618a:	e08c      	b.n	80062a6 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006190:	2b02      	cmp	r3, #2
 8006192:	d07f      	beq.n	8006294 <I2C_MasterReceive_RXNE+0x176>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d002      	beq.n	80061a0 <I2C_MasterReceive_RXNE+0x82>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d179      	bne.n	8006294 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 faf1 	bl	8007788 <I2C_WaitOnSTOPRequestThroughIT>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d14c      	bne.n	8006246 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061ba:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80061ca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	b2d2      	uxtb	r2, r2
 80061d8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2220      	movs	r2, #32
 80061f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b40      	cmp	r3, #64	@ 0x40
 8006204:	d10a      	bne.n	800621c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff fdba 	bl	8005d8e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800621a:	e044      	b.n	80062a6 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b08      	cmp	r3, #8
 8006228:	d002      	beq.n	8006230 <I2C_MasterReceive_RXNE+0x112>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b20      	cmp	r3, #32
 800622e:	d103      	bne.n	8006238 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	631a      	str	r2, [r3, #48]	@ 0x30
 8006236:	e002      	b.n	800623e <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2212      	movs	r2, #18
 800623c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fd65 	bl	8005d0e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006244:	e02f      	b.n	80062a6 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006254:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006268:	1c5a      	adds	r2, r3, #1
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006272:	b29b      	uxth	r3, r3
 8006274:	3b01      	subs	r3, #1
 8006276:	b29a      	uxth	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2220      	movs	r2, #32
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff fd88 	bl	8005da2 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006292:	e008      	b.n	80062a6 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062a2:	605a      	str	r2, [r3, #4]
}
 80062a4:	e7ff      	b.n	80062a6 <I2C_MasterReceive_RXNE+0x188>
 80062a6:	bf00      	nop
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ba:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d11b      	bne.n	80062fe <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062d4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80062fc:	e0c4      	b.n	8006488 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006302:	b29b      	uxth	r3, r3
 8006304:	2b03      	cmp	r3, #3
 8006306:	d129      	bne.n	800635c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006316:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b04      	cmp	r3, #4
 800631c:	d00a      	beq.n	8006334 <I2C_MasterReceive_BTF+0x86>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d007      	beq.n	8006334 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006332:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691a      	ldr	r2, [r3, #16]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006350:	b29b      	uxth	r3, r3
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800635a:	e095      	b.n	8006488 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d17d      	bne.n	8006462 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d002      	beq.n	8006372 <I2C_MasterReceive_BTF+0xc4>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b10      	cmp	r3, #16
 8006370:	d108      	bne.n	8006384 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	e016      	b.n	80063b2 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b04      	cmp	r3, #4
 8006388:	d002      	beq.n	8006390 <I2C_MasterReceive_BTF+0xe2>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d108      	bne.n	80063a2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	e007      	b.n	80063b2 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	691a      	ldr	r2, [r3, #16]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c4:	1c5a      	adds	r2, r3, #1
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3b01      	subs	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	691a      	ldr	r2, [r3, #16]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e2:	b2d2      	uxtb	r2, r2
 80063e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	3b01      	subs	r3, #1
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800640c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2220      	movs	r2, #32
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b40      	cmp	r3, #64	@ 0x40
 8006420:	d10a      	bne.n	8006438 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff fcac 	bl	8005d8e <HAL_I2C_MemRxCpltCallback>
}
 8006436:	e027      	b.n	8006488 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b08      	cmp	r3, #8
 8006444:	d002      	beq.n	800644c <I2C_MasterReceive_BTF+0x19e>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b20      	cmp	r3, #32
 800644a:	d103      	bne.n	8006454 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	631a      	str	r2, [r3, #48]	@ 0x30
 8006452:	e002      	b.n	800645a <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2212      	movs	r2, #18
 8006458:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f7ff fc57 	bl	8005d0e <HAL_I2C_MasterRxCpltCallback>
}
 8006460:	e012      	b.n	8006488 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	691a      	ldr	r2, [r3, #16]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006474:	1c5a      	adds	r2, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006488:	bf00      	nop
 800648a:	3710      	adds	r7, #16
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b40      	cmp	r3, #64	@ 0x40
 80064a2:	d117      	bne.n	80064d4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d109      	bne.n	80064c0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80064bc:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80064be:	e067      	b.n	8006590 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	f043 0301 	orr.w	r3, r3, #1
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	611a      	str	r2, [r3, #16]
}
 80064d2:	e05d      	b.n	8006590 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064dc:	d133      	bne.n	8006546 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b21      	cmp	r3, #33	@ 0x21
 80064e8:	d109      	bne.n	80064fe <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	461a      	mov	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80064fa:	611a      	str	r2, [r3, #16]
 80064fc:	e008      	b.n	8006510 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006502:	b2db      	uxtb	r3, r3
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	b2da      	uxtb	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006514:	2b00      	cmp	r3, #0
 8006516:	d004      	beq.n	8006522 <I2C_Master_SB+0x92>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800651c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800651e:	2b00      	cmp	r3, #0
 8006520:	d108      	bne.n	8006534 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006526:	2b00      	cmp	r3, #0
 8006528:	d032      	beq.n	8006590 <I2C_Master_SB+0x100>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d02d      	beq.n	8006590 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006542:	605a      	str	r2, [r3, #4]
}
 8006544:	e024      	b.n	8006590 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10e      	bne.n	800656c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006552:	b29b      	uxth	r3, r3
 8006554:	11db      	asrs	r3, r3, #7
 8006556:	b2db      	uxtb	r3, r3
 8006558:	f003 0306 	and.w	r3, r3, #6
 800655c:	b2db      	uxtb	r3, r3
 800655e:	f063 030f 	orn	r3, r3, #15
 8006562:	b2da      	uxtb	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	611a      	str	r2, [r3, #16]
}
 800656a:	e011      	b.n	8006590 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006570:	2b01      	cmp	r3, #1
 8006572:	d10d      	bne.n	8006590 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006578:	b29b      	uxth	r3, r3
 800657a:	11db      	asrs	r3, r3, #7
 800657c:	b2db      	uxtb	r3, r3
 800657e:	f003 0306 	and.w	r3, r3, #6
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f063 030e 	orn	r3, r3, #14
 8006588:	b2da      	uxtb	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	611a      	str	r2, [r3, #16]
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d004      	beq.n	80065c2 <I2C_Master_ADD10+0x26>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d108      	bne.n	80065d4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00c      	beq.n	80065e4 <I2C_Master_ADD10+0x48>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d007      	beq.n	80065e4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065e2:	605a      	str	r2, [r3, #4]
  }
}
 80065e4:	bf00      	nop
 80065e6:	370c      	adds	r7, #12
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b091      	sub	sp, #68	@ 0x44
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80065fe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006606:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b22      	cmp	r3, #34	@ 0x22
 8006618:	f040 8169 	bne.w	80068ee <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10f      	bne.n	8006644 <I2C_Master_ADDR+0x54>
 8006624:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006628:	2b40      	cmp	r3, #64	@ 0x40
 800662a:	d10b      	bne.n	8006644 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800662c:	2300      	movs	r3, #0
 800662e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	633b      	str	r3, [r7, #48]	@ 0x30
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006642:	e160      	b.n	8006906 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006648:	2b00      	cmp	r3, #0
 800664a:	d11d      	bne.n	8006688 <I2C_Master_ADDR+0x98>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006654:	d118      	bne.n	8006688 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006656:	2300      	movs	r3, #0
 8006658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800666a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800667a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	651a      	str	r2, [r3, #80]	@ 0x50
 8006686:	e13e      	b.n	8006906 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d113      	bne.n	80066ba <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006692:	2300      	movs	r3, #0
 8006694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	e115      	b.n	80068e6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	f040 808a 	bne.w	80067da <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80066c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80066cc:	d137      	bne.n	800673e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066dc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80066ec:	d113      	bne.n	8006716 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066fc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066fe:	2300      	movs	r3, #0
 8006700:	627b      	str	r3, [r7, #36]	@ 0x24
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	627b      	str	r3, [r7, #36]	@ 0x24
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	699b      	ldr	r3, [r3, #24]
 8006710:	627b      	str	r3, [r7, #36]	@ 0x24
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	e0e7      	b.n	80068e6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006716:	2300      	movs	r3, #0
 8006718:	623b      	str	r3, [r7, #32]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	623b      	str	r3, [r7, #32]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	623b      	str	r3, [r7, #32]
 800672a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	e0d3      	b.n	80068e6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800673e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006740:	2b08      	cmp	r3, #8
 8006742:	d02e      	beq.n	80067a2 <I2C_Master_ADDR+0x1b2>
 8006744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006746:	2b20      	cmp	r3, #32
 8006748:	d02b      	beq.n	80067a2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800674a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800674c:	2b12      	cmp	r3, #18
 800674e:	d102      	bne.n	8006756 <I2C_Master_ADDR+0x166>
 8006750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006752:	2b01      	cmp	r3, #1
 8006754:	d125      	bne.n	80067a2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	2b04      	cmp	r3, #4
 800675a:	d00e      	beq.n	800677a <I2C_Master_ADDR+0x18a>
 800675c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800675e:	2b02      	cmp	r3, #2
 8006760:	d00b      	beq.n	800677a <I2C_Master_ADDR+0x18a>
 8006762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006764:	2b10      	cmp	r3, #16
 8006766:	d008      	beq.n	800677a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006776:	601a      	str	r2, [r3, #0]
 8006778:	e007      	b.n	800678a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006788:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800678a:	2300      	movs	r3, #0
 800678c:	61fb      	str	r3, [r7, #28]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	61fb      	str	r3, [r7, #28]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	e0a1      	b.n	80068e6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067b0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067b2:	2300      	movs	r3, #0
 80067b4:	61bb      	str	r3, [r7, #24]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	61bb      	str	r3, [r7, #24]
 80067c6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	e085      	b.n	80068e6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067de:	b29b      	uxth	r3, r3
 80067e0:	2b02      	cmp	r3, #2
 80067e2:	d14d      	bne.n	8006880 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80067e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d016      	beq.n	8006818 <I2C_Master_ADDR+0x228>
 80067ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d013      	beq.n	8006818 <I2C_Master_ADDR+0x228>
 80067f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f2:	2b10      	cmp	r3, #16
 80067f4:	d010      	beq.n	8006818 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006804:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006814:	601a      	str	r2, [r3, #0]
 8006816:	e007      	b.n	8006828 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006826:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006832:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006836:	d117      	bne.n	8006868 <I2C_Master_ADDR+0x278>
 8006838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800683e:	d00b      	beq.n	8006858 <I2C_Master_ADDR+0x268>
 8006840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006842:	2b01      	cmp	r3, #1
 8006844:	d008      	beq.n	8006858 <I2C_Master_ADDR+0x268>
 8006846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006848:	2b08      	cmp	r3, #8
 800684a:	d005      	beq.n	8006858 <I2C_Master_ADDR+0x268>
 800684c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684e:	2b10      	cmp	r3, #16
 8006850:	d002      	beq.n	8006858 <I2C_Master_ADDR+0x268>
 8006852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006854:	2b20      	cmp	r3, #32
 8006856:	d107      	bne.n	8006868 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006866:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	695b      	ldr	r3, [r3, #20]
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	617b      	str	r3, [r7, #20]
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	e032      	b.n	80068e6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800688e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800689a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800689e:	d117      	bne.n	80068d0 <I2C_Master_ADDR+0x2e0>
 80068a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068a6:	d00b      	beq.n	80068c0 <I2C_Master_ADDR+0x2d0>
 80068a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d008      	beq.n	80068c0 <I2C_Master_ADDR+0x2d0>
 80068ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	d005      	beq.n	80068c0 <I2C_Master_ADDR+0x2d0>
 80068b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b6:	2b10      	cmp	r3, #16
 80068b8:	d002      	beq.n	80068c0 <I2C_Master_ADDR+0x2d0>
 80068ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068bc:	2b20      	cmp	r3, #32
 80068be:	d107      	bne.n	80068d0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80068ce:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068d0:	2300      	movs	r3, #0
 80068d2:	613b      	str	r3, [r7, #16]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	613b      	str	r3, [r7, #16]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	613b      	str	r3, [r7, #16]
 80068e4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80068ec:	e00b      	b.n	8006906 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	695b      	ldr	r3, [r3, #20]
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	68fb      	ldr	r3, [r7, #12]
}
 8006904:	e7ff      	b.n	8006906 <I2C_Master_ADDR+0x316>
 8006906:	bf00      	nop
 8006908:	3744      	adds	r7, #68	@ 0x44
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006920:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006926:	b29b      	uxth	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d02b      	beq.n	8006984 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006930:	781a      	ldrb	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693c:	1c5a      	adds	r2, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006946:	b29b      	uxth	r3, r3
 8006948:	3b01      	subs	r3, #1
 800694a:	b29a      	uxth	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d114      	bne.n	8006984 <I2C_SlaveTransmit_TXE+0x72>
 800695a:	7bfb      	ldrb	r3, [r7, #15]
 800695c:	2b29      	cmp	r3, #41	@ 0x29
 800695e:	d111      	bne.n	8006984 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800696e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2221      	movs	r2, #33	@ 0x21
 8006974:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2228      	movs	r2, #40	@ 0x28
 800697a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff f9cf 	bl	8005d22 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006984:	bf00      	nop
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d011      	beq.n	80069c2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a2:	781a      	ldrb	r2, [r3, #0]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	3b01      	subs	r3, #1
 80069bc:	b29a      	uxth	r2, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80069c2:	bf00      	nop
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d02c      	beq.n	8006a42 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	691a      	ldr	r2, [r3, #16]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069f2:	b2d2      	uxtb	r2, r2
 80069f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d114      	bne.n	8006a42 <I2C_SlaveReceive_RXNE+0x74>
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a1c:	d111      	bne.n	8006a42 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a2c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2222      	movs	r2, #34	@ 0x22
 8006a32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2228      	movs	r2, #40	@ 0x28
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff f97a 	bl	8005d36 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006a42:	bf00      	nop
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d012      	beq.n	8006a82 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	691a      	ldr	r2, [r3, #16]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6e:	1c5a      	adds	r2, r3, #1
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
 8006a96:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006aa8:	2b28      	cmp	r3, #40	@ 0x28
 8006aaa:	d127      	bne.n	8006afc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aba:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	089b      	lsrs	r3, r3, #2
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d101      	bne.n	8006acc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	09db      	lsrs	r3, r3, #7
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d103      	bne.n	8006ae0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68db      	ldr	r3, [r3, #12]
 8006adc:	81bb      	strh	r3, [r7, #12]
 8006ade:	e002      	b.n	8006ae6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006aee:	89ba      	ldrh	r2, [r7, #12]
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	4619      	mov	r1, r3
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff f928 	bl	8005d4a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006afa:	e00e      	b.n	8006b1a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006afc:	2300      	movs	r3, #0
 8006afe:	60bb      	str	r3, [r7, #8]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	60bb      	str	r3, [r7, #8]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	60bb      	str	r3, [r7, #8]
 8006b10:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006b1a:	bf00      	nop
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b32:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b42:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006b44:	2300      	movs	r3, #0
 8006b46:	60bb      	str	r3, [r7, #8]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	60bb      	str	r3, [r7, #8]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]
 8006b60:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b70:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006b7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b80:	d172      	bne.n	8006c68 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
 8006b84:	2b22      	cmp	r3, #34	@ 0x22
 8006b86:	d002      	beq.n	8006b8e <I2C_Slave_STOPF+0x6a>
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b8c:	d135      	bne.n	8006bfa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d005      	beq.n	8006bb2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006baa:	f043 0204 	orr.w	r2, r3, #4
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bc0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe f891 	bl	8004cee <HAL_DMA_GetState>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d049      	beq.n	8006c66 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd6:	4a69      	ldr	r2, [pc, #420]	@ (8006d7c <I2C_Slave_STOPF+0x258>)
 8006bd8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fe f863 	bl	8004caa <HAL_DMA_Abort_IT>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d03d      	beq.n	8006c66 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006bf8:	e035      	b.n	8006c66 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d005      	beq.n	8006c1e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c16:	f043 0204 	orr.w	r2, r3, #4
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c2c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fe f85b 	bl	8004cee <HAL_DMA_GetState>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d014      	beq.n	8006c68 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c42:	4a4e      	ldr	r2, [pc, #312]	@ (8006d7c <I2C_Slave_STOPF+0x258>)
 8006c44:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fe f82d 	bl	8004caa <HAL_DMA_Abort_IT>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d008      	beq.n	8006c68 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006c60:	4610      	mov	r0, r2
 8006c62:	4798      	blx	r3
 8006c64:	e000      	b.n	8006c68 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c66:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d03e      	beq.n	8006cf0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	695b      	ldr	r3, [r3, #20]
 8006c78:	f003 0304 	and.w	r3, r3, #4
 8006c7c:	2b04      	cmp	r3, #4
 8006c7e:	d112      	bne.n	8006ca6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691a      	ldr	r2, [r3, #16]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c92:	1c5a      	adds	r2, r3, #1
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	3b01      	subs	r3, #1
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cb0:	2b40      	cmp	r3, #64	@ 0x40
 8006cb2:	d112      	bne.n	8006cda <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	691a      	ldr	r2, [r3, #16]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbe:	b2d2      	uxtb	r2, r2
 8006cc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d005      	beq.n	8006cf0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce8:	f043 0204 	orr.w	r2, r3, #4
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f843 	bl	8006d84 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006cfe:	e039      	b.n	8006d74 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
 8006d02:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d04:	d109      	bne.n	8006d1a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2228      	movs	r2, #40	@ 0x28
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f7ff f80e 	bl	8005d36 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b28      	cmp	r3, #40	@ 0x28
 8006d24:	d111      	bne.n	8006d4a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a15      	ldr	r2, [pc, #84]	@ (8006d80 <I2C_Slave_STOPF+0x25c>)
 8006d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2220      	movs	r2, #32
 8006d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff f80f 	bl	8005d66 <HAL_I2C_ListenCpltCallback>
}
 8006d48:	e014      	b.n	8006d74 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4e:	2b22      	cmp	r3, #34	@ 0x22
 8006d50:	d002      	beq.n	8006d58 <I2C_Slave_STOPF+0x234>
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	2b22      	cmp	r3, #34	@ 0x22
 8006d56:	d10d      	bne.n	8006d74 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2220      	movs	r2, #32
 8006d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fe ffe1 	bl	8005d36 <HAL_I2C_SlaveRxCpltCallback>
}
 8006d74:	bf00      	nop
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	080072e5 	.word	0x080072e5
 8006d80:	ffff0000 	.word	0xffff0000

08006d84 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d92:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d9a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	2b10      	cmp	r3, #16
 8006da0:	d002      	beq.n	8006da8 <I2C_ITError+0x24>
 8006da2:	7bbb      	ldrb	r3, [r7, #14]
 8006da4:	2b40      	cmp	r3, #64	@ 0x40
 8006da6:	d10a      	bne.n	8006dbe <I2C_ITError+0x3a>
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	2b22      	cmp	r3, #34	@ 0x22
 8006dac:	d107      	bne.n	8006dbe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dbc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006dc4:	2b28      	cmp	r3, #40	@ 0x28
 8006dc6:	d107      	bne.n	8006dd8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2228      	movs	r2, #40	@ 0x28
 8006dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006dd6:	e015      	b.n	8006e04 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006de2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006de6:	d00a      	beq.n	8006dfe <I2C_ITError+0x7a>
 8006de8:	7bfb      	ldrb	r3, [r7, #15]
 8006dea:	2b60      	cmp	r3, #96	@ 0x60
 8006dec:	d007      	beq.n	8006dfe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e12:	d162      	bne.n	8006eda <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e22:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d020      	beq.n	8006e74 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e36:	4a6a      	ldr	r2, [pc, #424]	@ (8006fe0 <I2C_ITError+0x25c>)
 8006e38:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fd ff33 	bl	8004caa <HAL_DMA_Abort_IT>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f000 8089 	beq.w	8006f5e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0201 	bic.w	r2, r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006e6e:	4610      	mov	r0, r2
 8006e70:	4798      	blx	r3
 8006e72:	e074      	b.n	8006f5e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e78:	4a59      	ldr	r2, [pc, #356]	@ (8006fe0 <I2C_ITError+0x25c>)
 8006e7a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fd ff12 	bl	8004caa <HAL_DMA_Abort_IT>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d068      	beq.n	8006f5e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e96:	2b40      	cmp	r3, #64	@ 0x40
 8006e98:	d10b      	bne.n	8006eb2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	691a      	ldr	r2, [r3, #16]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ea4:	b2d2      	uxtb	r2, r2
 8006ea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0201 	bic.w	r2, r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ece:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
 8006ed8:	e041      	b.n	8006f5e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b60      	cmp	r3, #96	@ 0x60
 8006ee4:	d125      	bne.n	8006f32 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006efe:	2b40      	cmp	r3, #64	@ 0x40
 8006f00:	d10b      	bne.n	8006f1a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	691a      	ldr	r2, [r3, #16]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f0c:	b2d2      	uxtb	r2, r2
 8006f0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 0201 	bic.w	r2, r2, #1
 8006f28:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7fe ff43 	bl	8005db6 <HAL_I2C_AbortCpltCallback>
 8006f30:	e015      	b.n	8006f5e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f3c:	2b40      	cmp	r3, #64	@ 0x40
 8006f3e:	d10b      	bne.n	8006f58 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691a      	ldr	r2, [r3, #16]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4a:	b2d2      	uxtb	r2, r2
 8006f4c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f52:	1c5a      	adds	r2, r3, #1
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7fe ff22 	bl	8005da2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f62:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d10e      	bne.n	8006f8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d109      	bne.n	8006f8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d104      	bne.n	8006f8c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d007      	beq.n	8006f9c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685a      	ldr	r2, [r3, #4]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006f9a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fa2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa8:	f003 0304 	and.w	r3, r3, #4
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d113      	bne.n	8006fd8 <I2C_ITError+0x254>
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	2b28      	cmp	r3, #40	@ 0x28
 8006fb4:	d110      	bne.n	8006fd8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8006fe4 <I2C_ITError+0x260>)
 8006fba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fe fec7 	bl	8005d66 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fd8:	bf00      	nop
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}
 8006fe0:	080072e5 	.word	0x080072e5
 8006fe4:	ffff0000 	.word	0xffff0000

08006fe8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	817b      	strh	r3, [r7, #10]
 8006ffa:	460b      	mov	r3, r1
 8006ffc:	813b      	strh	r3, [r7, #8]
 8006ffe:	4613      	mov	r3, r2
 8007000:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007010:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	2200      	movs	r2, #0
 800701a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f000 fa08 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 8007024:	4603      	mov	r3, r0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00d      	beq.n	8007046 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007038:	d103      	bne.n	8007042 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007040:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e05f      	b.n	8007106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007046:	897b      	ldrh	r3, [r7, #10]
 8007048:	b2db      	uxtb	r3, r3
 800704a:	461a      	mov	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007054:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007058:	6a3a      	ldr	r2, [r7, #32]
 800705a:	492d      	ldr	r1, [pc, #180]	@ (8007110 <I2C_RequestMemoryWrite+0x128>)
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 fa63 	bl	8007528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e04c      	b.n	8007106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800706c:	2300      	movs	r3, #0
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	617b      	str	r3, [r7, #20]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	617b      	str	r3, [r7, #20]
 8007080:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007084:	6a39      	ldr	r1, [r7, #32]
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 faee 	bl	8007668 <I2C_WaitOnTXEFlagUntilTimeout>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00d      	beq.n	80070ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007096:	2b04      	cmp	r3, #4
 8007098:	d107      	bne.n	80070aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e02b      	b.n	8007106 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070ae:	88fb      	ldrh	r3, [r7, #6]
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d105      	bne.n	80070c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070b4:	893b      	ldrh	r3, [r7, #8]
 80070b6:	b2da      	uxtb	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	611a      	str	r2, [r3, #16]
 80070be:	e021      	b.n	8007104 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80070c0:	893b      	ldrh	r3, [r7, #8]
 80070c2:	0a1b      	lsrs	r3, r3, #8
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070d0:	6a39      	ldr	r1, [r7, #32]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 fac8 	bl	8007668 <I2C_WaitOnTXEFlagUntilTimeout>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00d      	beq.n	80070fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d107      	bne.n	80070f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e005      	b.n	8007106 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070fa:	893b      	ldrh	r3, [r7, #8]
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	00010002 	.word	0x00010002

08007114 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af02      	add	r7, sp, #8
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	4608      	mov	r0, r1
 800711e:	4611      	mov	r1, r2
 8007120:	461a      	mov	r2, r3
 8007122:	4603      	mov	r3, r0
 8007124:	817b      	strh	r3, [r7, #10]
 8007126:	460b      	mov	r3, r1
 8007128:	813b      	strh	r3, [r7, #8]
 800712a:	4613      	mov	r3, r2
 800712c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800713c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800714c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	2200      	movs	r2, #0
 8007156:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 f96a 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00d      	beq.n	8007182 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007174:	d103      	bne.n	800717e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800717c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800717e:	2303      	movs	r3, #3
 8007180:	e0aa      	b.n	80072d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007182:	897b      	ldrh	r3, [r7, #10]
 8007184:	b2db      	uxtb	r3, r3
 8007186:	461a      	mov	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007190:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007194:	6a3a      	ldr	r2, [r7, #32]
 8007196:	4952      	ldr	r1, [pc, #328]	@ (80072e0 <I2C_RequestMemoryRead+0x1cc>)
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f9c5 	bl	8007528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e097      	b.n	80072d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80071a8:	2300      	movs	r3, #0
 80071aa:	617b      	str	r3, [r7, #20]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	617b      	str	r3, [r7, #20]
 80071bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071c0:	6a39      	ldr	r1, [r7, #32]
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fa50 	bl	8007668 <I2C_WaitOnTXEFlagUntilTimeout>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00d      	beq.n	80071ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d107      	bne.n	80071e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80071e6:	2301      	movs	r3, #1
 80071e8:	e076      	b.n	80072d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80071ea:	88fb      	ldrh	r3, [r7, #6]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d105      	bne.n	80071fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071f0:	893b      	ldrh	r3, [r7, #8]
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	611a      	str	r2, [r3, #16]
 80071fa:	e021      	b.n	8007240 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071fc:	893b      	ldrh	r3, [r7, #8]
 80071fe:	0a1b      	lsrs	r3, r3, #8
 8007200:	b29b      	uxth	r3, r3
 8007202:	b2da      	uxtb	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800720a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800720c:	6a39      	ldr	r1, [r7, #32]
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 fa2a 	bl	8007668 <I2C_WaitOnTXEFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00d      	beq.n	8007236 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721e:	2b04      	cmp	r3, #4
 8007220:	d107      	bne.n	8007232 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007230:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e050      	b.n	80072d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007236:	893b      	ldrh	r3, [r7, #8]
 8007238:	b2da      	uxtb	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007242:	6a39      	ldr	r1, [r7, #32]
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 fa0f 	bl	8007668 <I2C_WaitOnTXEFlagUntilTimeout>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00d      	beq.n	800726c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007254:	2b04      	cmp	r3, #4
 8007256:	d107      	bne.n	8007268 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007266:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	e035      	b.n	80072d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800727a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	2200      	movs	r2, #0
 8007284:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 f8d3 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 800728e:	4603      	mov	r3, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00d      	beq.n	80072b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800729e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072a2:	d103      	bne.n	80072ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80072aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e013      	b.n	80072d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80072b0:	897b      	ldrh	r3, [r7, #10]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f043 0301 	orr.w	r3, r3, #1
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c2:	6a3a      	ldr	r2, [r7, #32]
 80072c4:	4906      	ldr	r1, [pc, #24]	@ (80072e0 <I2C_RequestMemoryRead+0x1cc>)
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 f92e 	bl	8007528 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e000      	b.n	80072d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	00010002 	.word	0x00010002

080072e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072fc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80072fe:	4b4b      	ldr	r3, [pc, #300]	@ (800742c <I2C_DMAAbort+0x148>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	08db      	lsrs	r3, r3, #3
 8007304:	4a4a      	ldr	r2, [pc, #296]	@ (8007430 <I2C_DMAAbort+0x14c>)
 8007306:	fba2 2303 	umull	r2, r3, r2, r3
 800730a:	0a1a      	lsrs	r2, r3, #8
 800730c:	4613      	mov	r3, r2
 800730e:	009b      	lsls	r3, r3, #2
 8007310:	4413      	add	r3, r2
 8007312:	00da      	lsls	r2, r3, #3
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d106      	bne.n	800732c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007322:	f043 0220 	orr.w	r2, r3, #32
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800732a:	e00a      	b.n	8007342 <I2C_DMAAbort+0x5e>
    }
    count--;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3b01      	subs	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800733c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007340:	d0ea      	beq.n	8007318 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007346:	2b00      	cmp	r3, #0
 8007348:	d003      	beq.n	8007352 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800734e:	2200      	movs	r2, #0
 8007350:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735e:	2200      	movs	r2, #0
 8007360:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007370:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2200      	movs	r2, #0
 8007376:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800737c:	2b00      	cmp	r3, #0
 800737e:	d003      	beq.n	8007388 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007384:	2200      	movs	r2, #0
 8007386:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007394:	2200      	movs	r2, #0
 8007396:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0201 	bic.w	r2, r2, #1
 80073a6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b60      	cmp	r3, #96	@ 0x60
 80073b2:	d10e      	bne.n	80073d2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2200      	movs	r2, #0
 80073c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80073ca:	6978      	ldr	r0, [r7, #20]
 80073cc:	f7fe fcf3 	bl	8005db6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80073d0:	e027      	b.n	8007422 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80073d2:	7cfb      	ldrb	r3, [r7, #19]
 80073d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80073d8:	2b28      	cmp	r3, #40	@ 0x28
 80073da:	d117      	bne.n	800740c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f042 0201 	orr.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2200      	movs	r2, #0
 8007400:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2228      	movs	r2, #40	@ 0x28
 8007406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800740a:	e007      	b.n	800741c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2220      	movs	r2, #32
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800741c:	6978      	ldr	r0, [r7, #20]
 800741e:	f7fe fcc0 	bl	8005da2 <HAL_I2C_ErrorCallback>
}
 8007422:	bf00      	nop
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20000004 	.word	0x20000004
 8007430:	14f8b589 	.word	0x14f8b589

08007434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	4613      	mov	r3, r2
 8007442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007444:	e048      	b.n	80074d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744c:	d044      	beq.n	80074d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800744e:	f7fc f853 	bl	80034f8 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	69bb      	ldr	r3, [r7, #24]
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	683a      	ldr	r2, [r7, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d302      	bcc.n	8007464 <I2C_WaitOnFlagUntilTimeout+0x30>
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d139      	bne.n	80074d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	0c1b      	lsrs	r3, r3, #16
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b01      	cmp	r3, #1
 800746c:	d10d      	bne.n	800748a <I2C_WaitOnFlagUntilTimeout+0x56>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	43da      	mvns	r2, r3
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	4013      	ands	r3, r2
 800747a:	b29b      	uxth	r3, r3
 800747c:	2b00      	cmp	r3, #0
 800747e:	bf0c      	ite	eq
 8007480:	2301      	moveq	r3, #1
 8007482:	2300      	movne	r3, #0
 8007484:	b2db      	uxtb	r3, r3
 8007486:	461a      	mov	r2, r3
 8007488:	e00c      	b.n	80074a4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	43da      	mvns	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	4013      	ands	r3, r2
 8007496:	b29b      	uxth	r3, r3
 8007498:	2b00      	cmp	r3, #0
 800749a:	bf0c      	ite	eq
 800749c:	2301      	moveq	r3, #1
 800749e:	2300      	movne	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	79fb      	ldrb	r3, [r7, #7]
 80074a6:	429a      	cmp	r2, r3
 80074a8:	d116      	bne.n	80074d8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2220      	movs	r2, #32
 80074b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c4:	f043 0220 	orr.w	r2, r3, #32
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2200      	movs	r2, #0
 80074d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e023      	b.n	8007520 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	0c1b      	lsrs	r3, r3, #16
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d10d      	bne.n	80074fe <I2C_WaitOnFlagUntilTimeout+0xca>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	43da      	mvns	r2, r3
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	4013      	ands	r3, r2
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	bf0c      	ite	eq
 80074f4:	2301      	moveq	r3, #1
 80074f6:	2300      	movne	r3, #0
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	461a      	mov	r2, r3
 80074fc:	e00c      	b.n	8007518 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	43da      	mvns	r2, r3
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	4013      	ands	r3, r2
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	bf0c      	ite	eq
 8007510:	2301      	moveq	r3, #1
 8007512:	2300      	movne	r3, #0
 8007514:	b2db      	uxtb	r3, r3
 8007516:	461a      	mov	r2, r3
 8007518:	79fb      	ldrb	r3, [r7, #7]
 800751a:	429a      	cmp	r2, r3
 800751c:	d093      	beq.n	8007446 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
 8007534:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007536:	e071      	b.n	800761c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007542:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007546:	d123      	bne.n	8007590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007556:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007560:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2220      	movs	r2, #32
 800756c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800757c:	f043 0204 	orr.w	r2, r3, #4
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e067      	b.n	8007660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007596:	d041      	beq.n	800761c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007598:	f7fb ffae 	bl	80034f8 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d302      	bcc.n	80075ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d136      	bne.n	800761c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	0c1b      	lsrs	r3, r3, #16
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d10c      	bne.n	80075d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	43da      	mvns	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	4013      	ands	r3, r2
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	bf14      	ite	ne
 80075ca:	2301      	movne	r3, #1
 80075cc:	2300      	moveq	r3, #0
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	e00b      	b.n	80075ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	43da      	mvns	r2, r3
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	4013      	ands	r3, r2
 80075de:	b29b      	uxth	r3, r3
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	bf14      	ite	ne
 80075e4:	2301      	movne	r3, #1
 80075e6:	2300      	moveq	r3, #0
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d016      	beq.n	800761c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2220      	movs	r2, #32
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007608:	f043 0220 	orr.w	r2, r3, #32
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e021      	b.n	8007660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	0c1b      	lsrs	r3, r3, #16
 8007620:	b2db      	uxtb	r3, r3
 8007622:	2b01      	cmp	r3, #1
 8007624:	d10c      	bne.n	8007640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695b      	ldr	r3, [r3, #20]
 800762c:	43da      	mvns	r2, r3
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	4013      	ands	r3, r2
 8007632:	b29b      	uxth	r3, r3
 8007634:	2b00      	cmp	r3, #0
 8007636:	bf14      	ite	ne
 8007638:	2301      	movne	r3, #1
 800763a:	2300      	moveq	r3, #0
 800763c:	b2db      	uxtb	r3, r3
 800763e:	e00b      	b.n	8007658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	43da      	mvns	r2, r3
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	4013      	ands	r3, r2
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	bf14      	ite	ne
 8007652:	2301      	movne	r3, #1
 8007654:	2300      	moveq	r3, #0
 8007656:	b2db      	uxtb	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	f47f af6d 	bne.w	8007538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007674:	e034      	b.n	80076e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	f000 f915 	bl	80078a6 <I2C_IsAcknowledgeFailed>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	e034      	b.n	80076f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768c:	d028      	beq.n	80076e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800768e:	f7fb ff33 	bl	80034f8 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	429a      	cmp	r2, r3
 800769c:	d302      	bcc.n	80076a4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d11d      	bne.n	80076e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ae:	2b80      	cmp	r3, #128	@ 0x80
 80076b0:	d016      	beq.n	80076e0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2220      	movs	r2, #32
 80076bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2200      	movs	r2, #0
 80076c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076cc:	f043 0220 	orr.w	r2, r3, #32
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e007      	b.n	80076f0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ea:	2b80      	cmp	r3, #128	@ 0x80
 80076ec:	d1c3      	bne.n	8007676 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007704:	e034      	b.n	8007770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f000 f8cd 	bl	80078a6 <I2C_IsAcknowledgeFailed>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e034      	b.n	8007780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771c:	d028      	beq.n	8007770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800771e:	f7fb feeb 	bl	80034f8 <HAL_GetTick>
 8007722:	4602      	mov	r2, r0
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	1ad3      	subs	r3, r2, r3
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	429a      	cmp	r2, r3
 800772c:	d302      	bcc.n	8007734 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d11d      	bne.n	8007770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	f003 0304 	and.w	r3, r3, #4
 800773e:	2b04      	cmp	r3, #4
 8007740:	d016      	beq.n	8007770 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2200      	movs	r2, #0
 8007746:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2220      	movs	r2, #32
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800775c:	f043 0220 	orr.w	r2, r3, #32
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e007      	b.n	8007780 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	f003 0304 	and.w	r3, r3, #4
 800777a:	2b04      	cmp	r3, #4
 800777c:	d1c3      	bne.n	8007706 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007794:	4b13      	ldr	r3, [pc, #76]	@ (80077e4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	08db      	lsrs	r3, r3, #3
 800779a:	4a13      	ldr	r2, [pc, #76]	@ (80077e8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800779c:	fba2 2303 	umull	r2, r3, r2, r3
 80077a0:	0a1a      	lsrs	r2, r3, #8
 80077a2:	4613      	mov	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4413      	add	r3, r2
 80077a8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	3b01      	subs	r3, #1
 80077ae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d107      	bne.n	80077c6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ba:	f043 0220 	orr.w	r2, r3, #32
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e008      	b.n	80077d8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077d4:	d0e9      	beq.n	80077aa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr
 80077e4:	20000004 	.word	0x20000004
 80077e8:	14f8b589 	.word	0x14f8b589

080077ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80077f8:	e049      	b.n	800788e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	f003 0310 	and.w	r3, r3, #16
 8007804:	2b10      	cmp	r3, #16
 8007806:	d119      	bne.n	800783c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f06f 0210 	mvn.w	r2, #16
 8007810:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2220      	movs	r2, #32
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e030      	b.n	800789e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800783c:	f7fb fe5c 	bl	80034f8 <HAL_GetTick>
 8007840:	4602      	mov	r2, r0
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	429a      	cmp	r2, r3
 800784a:	d302      	bcc.n	8007852 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d11d      	bne.n	800788e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800785c:	2b40      	cmp	r3, #64	@ 0x40
 800785e:	d016      	beq.n	800788e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2220      	movs	r2, #32
 800786a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800787a:	f043 0220 	orr.w	r2, r3, #32
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e007      	b.n	800789e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007898:	2b40      	cmp	r3, #64	@ 0x40
 800789a:	d1ae      	bne.n	80077fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}

080078a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80078b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078bc:	d11b      	bne.n	80078f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80078c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2220      	movs	r2, #32
 80078d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e2:	f043 0204 	orr.w	r2, r3, #4
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e000      	b.n	80078f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007910:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007914:	d103      	bne.n	800791e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800791c:	e007      	b.n	800792e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007922:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007926:	d102      	bne.n	800792e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2208      	movs	r2, #8
 800792c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800792e:	bf00      	nop
 8007930:	370c      	adds	r7, #12
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr
	...

0800793c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e267      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d075      	beq.n	8007a46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800795a:	4b88      	ldr	r3, [pc, #544]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f003 030c 	and.w	r3, r3, #12
 8007962:	2b04      	cmp	r3, #4
 8007964:	d00c      	beq.n	8007980 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007966:	4b85      	ldr	r3, [pc, #532]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800796e:	2b08      	cmp	r3, #8
 8007970:	d112      	bne.n	8007998 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007972:	4b82      	ldr	r3, [pc, #520]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800797a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800797e:	d10b      	bne.n	8007998 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007980:	4b7e      	ldr	r3, [pc, #504]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d05b      	beq.n	8007a44 <HAL_RCC_OscConfig+0x108>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d157      	bne.n	8007a44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e242      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079a0:	d106      	bne.n	80079b0 <HAL_RCC_OscConfig+0x74>
 80079a2:	4b76      	ldr	r3, [pc, #472]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a75      	ldr	r2, [pc, #468]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 80079a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	e01d      	b.n	80079ec <HAL_RCC_OscConfig+0xb0>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079b8:	d10c      	bne.n	80079d4 <HAL_RCC_OscConfig+0x98>
 80079ba:	4b70      	ldr	r3, [pc, #448]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a6f      	ldr	r2, [pc, #444]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 80079c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	4b6d      	ldr	r3, [pc, #436]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a6c      	ldr	r2, [pc, #432]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 80079cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	e00b      	b.n	80079ec <HAL_RCC_OscConfig+0xb0>
 80079d4:	4b69      	ldr	r3, [pc, #420]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a68      	ldr	r2, [pc, #416]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 80079da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	4b66      	ldr	r3, [pc, #408]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a65      	ldr	r2, [pc, #404]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 80079e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d013      	beq.n	8007a1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079f4:	f7fb fd80 	bl	80034f8 <HAL_GetTick>
 80079f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079fa:	e008      	b.n	8007a0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079fc:	f7fb fd7c 	bl	80034f8 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b64      	cmp	r3, #100	@ 0x64
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e207      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a0e:	4b5b      	ldr	r3, [pc, #364]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d0f0      	beq.n	80079fc <HAL_RCC_OscConfig+0xc0>
 8007a1a:	e014      	b.n	8007a46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a1c:	f7fb fd6c 	bl	80034f8 <HAL_GetTick>
 8007a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a22:	e008      	b.n	8007a36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a24:	f7fb fd68 	bl	80034f8 <HAL_GetTick>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	2b64      	cmp	r3, #100	@ 0x64
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e1f3      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a36:	4b51      	ldr	r3, [pc, #324]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1f0      	bne.n	8007a24 <HAL_RCC_OscConfig+0xe8>
 8007a42:	e000      	b.n	8007a46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d063      	beq.n	8007b1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007a52:	4b4a      	ldr	r3, [pc, #296]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f003 030c 	and.w	r3, r3, #12
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00b      	beq.n	8007a76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a5e:	4b47      	ldr	r3, [pc, #284]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007a66:	2b08      	cmp	r3, #8
 8007a68:	d11c      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a6a:	4b44      	ldr	r3, [pc, #272]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d116      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a76:	4b41      	ldr	r3, [pc, #260]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0302 	and.w	r3, r3, #2
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d005      	beq.n	8007a8e <HAL_RCC_OscConfig+0x152>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d001      	beq.n	8007a8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e1c7      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a8e:	4b3b      	ldr	r3, [pc, #236]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	00db      	lsls	r3, r3, #3
 8007a9c:	4937      	ldr	r1, [pc, #220]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007aa2:	e03a      	b.n	8007b1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d020      	beq.n	8007aee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007aac:	4b34      	ldr	r3, [pc, #208]	@ (8007b80 <HAL_RCC_OscConfig+0x244>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab2:	f7fb fd21 	bl	80034f8 <HAL_GetTick>
 8007ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ab8:	e008      	b.n	8007acc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007aba:	f7fb fd1d 	bl	80034f8 <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d901      	bls.n	8007acc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e1a8      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007acc:	4b2b      	ldr	r3, [pc, #172]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f003 0302 	and.w	r3, r3, #2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d0f0      	beq.n	8007aba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ad8:	4b28      	ldr	r3, [pc, #160]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	691b      	ldr	r3, [r3, #16]
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	4925      	ldr	r1, [pc, #148]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	600b      	str	r3, [r1, #0]
 8007aec:	e015      	b.n	8007b1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007aee:	4b24      	ldr	r3, [pc, #144]	@ (8007b80 <HAL_RCC_OscConfig+0x244>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af4:	f7fb fd00 	bl	80034f8 <HAL_GetTick>
 8007af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007afa:	e008      	b.n	8007b0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007afc:	f7fb fcfc 	bl	80034f8 <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	2b02      	cmp	r3, #2
 8007b08:	d901      	bls.n	8007b0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e187      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1f0      	bne.n	8007afc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0308 	and.w	r3, r3, #8
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d036      	beq.n	8007b94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d016      	beq.n	8007b5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b2e:	4b15      	ldr	r3, [pc, #84]	@ (8007b84 <HAL_RCC_OscConfig+0x248>)
 8007b30:	2201      	movs	r2, #1
 8007b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b34:	f7fb fce0 	bl	80034f8 <HAL_GetTick>
 8007b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b3a:	e008      	b.n	8007b4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b3c:	f7fb fcdc 	bl	80034f8 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d901      	bls.n	8007b4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e167      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b7c <HAL_RCC_OscConfig+0x240>)
 8007b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0f0      	beq.n	8007b3c <HAL_RCC_OscConfig+0x200>
 8007b5a:	e01b      	b.n	8007b94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b5c:	4b09      	ldr	r3, [pc, #36]	@ (8007b84 <HAL_RCC_OscConfig+0x248>)
 8007b5e:	2200      	movs	r2, #0
 8007b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b62:	f7fb fcc9 	bl	80034f8 <HAL_GetTick>
 8007b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b68:	e00e      	b.n	8007b88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b6a:	f7fb fcc5 	bl	80034f8 <HAL_GetTick>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d907      	bls.n	8007b88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b78:	2303      	movs	r3, #3
 8007b7a:	e150      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
 8007b7c:	40023800 	.word	0x40023800
 8007b80:	42470000 	.word	0x42470000
 8007b84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b88:	4b88      	ldr	r3, [pc, #544]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1ea      	bne.n	8007b6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0304 	and.w	r3, r3, #4
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 8097 	beq.w	8007cd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ba6:	4b81      	ldr	r3, [pc, #516]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10f      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60bb      	str	r3, [r7, #8]
 8007bb6:	4b7d      	ldr	r3, [pc, #500]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bba:	4a7c      	ldr	r2, [pc, #496]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8007bc2:	4b7a      	ldr	r3, [pc, #488]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bca:	60bb      	str	r3, [r7, #8]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bd2:	4b77      	ldr	r3, [pc, #476]	@ (8007db0 <HAL_RCC_OscConfig+0x474>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d118      	bne.n	8007c10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bde:	4b74      	ldr	r3, [pc, #464]	@ (8007db0 <HAL_RCC_OscConfig+0x474>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a73      	ldr	r2, [pc, #460]	@ (8007db0 <HAL_RCC_OscConfig+0x474>)
 8007be4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bea:	f7fb fc85 	bl	80034f8 <HAL_GetTick>
 8007bee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bf0:	e008      	b.n	8007c04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bf2:	f7fb fc81 	bl	80034f8 <HAL_GetTick>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	1ad3      	subs	r3, r2, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d901      	bls.n	8007c04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e10c      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c04:	4b6a      	ldr	r3, [pc, #424]	@ (8007db0 <HAL_RCC_OscConfig+0x474>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0f0      	beq.n	8007bf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d106      	bne.n	8007c26 <HAL_RCC_OscConfig+0x2ea>
 8007c18:	4b64      	ldr	r3, [pc, #400]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c1c:	4a63      	ldr	r2, [pc, #396]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007c1e:	f043 0301 	orr.w	r3, r3, #1
 8007c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c24:	e01c      	b.n	8007c60 <HAL_RCC_OscConfig+0x324>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	2b05      	cmp	r3, #5
 8007c2c:	d10c      	bne.n	8007c48 <HAL_RCC_OscConfig+0x30c>
 8007c2e:	4b5f      	ldr	r3, [pc, #380]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c32:	4a5e      	ldr	r2, [pc, #376]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007c34:	f043 0304 	orr.w	r3, r3, #4
 8007c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c3a:	4b5c      	ldr	r3, [pc, #368]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c3e:	4a5b      	ldr	r2, [pc, #364]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007c40:	f043 0301 	orr.w	r3, r3, #1
 8007c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c46:	e00b      	b.n	8007c60 <HAL_RCC_OscConfig+0x324>
 8007c48:	4b58      	ldr	r3, [pc, #352]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c4c:	4a57      	ldr	r2, [pc, #348]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007c4e:	f023 0301 	bic.w	r3, r3, #1
 8007c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c54:	4b55      	ldr	r3, [pc, #340]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c58:	4a54      	ldr	r2, [pc, #336]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007c5a:	f023 0304 	bic.w	r3, r3, #4
 8007c5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d015      	beq.n	8007c94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c68:	f7fb fc46 	bl	80034f8 <HAL_GetTick>
 8007c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c6e:	e00a      	b.n	8007c86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c70:	f7fb fc42 	bl	80034f8 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d901      	bls.n	8007c86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e0cb      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c86:	4b49      	ldr	r3, [pc, #292]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c8a:	f003 0302 	and.w	r3, r3, #2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d0ee      	beq.n	8007c70 <HAL_RCC_OscConfig+0x334>
 8007c92:	e014      	b.n	8007cbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c94:	f7fb fc30 	bl	80034f8 <HAL_GetTick>
 8007c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c9a:	e00a      	b.n	8007cb2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c9c:	f7fb fc2c 	bl	80034f8 <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d901      	bls.n	8007cb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e0b5      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1ee      	bne.n	8007c9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007cbe:	7dfb      	ldrb	r3, [r7, #23]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d105      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cc4:	4b39      	ldr	r3, [pc, #228]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc8:	4a38      	ldr	r2, [pc, #224]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007cca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f000 80a1 	beq.w	8007e1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007cda:	4b34      	ldr	r3, [pc, #208]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f003 030c 	and.w	r3, r3, #12
 8007ce2:	2b08      	cmp	r3, #8
 8007ce4:	d05c      	beq.n	8007da0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	699b      	ldr	r3, [r3, #24]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d141      	bne.n	8007d72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cee:	4b31      	ldr	r3, [pc, #196]	@ (8007db4 <HAL_RCC_OscConfig+0x478>)
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cf4:	f7fb fc00 	bl	80034f8 <HAL_GetTick>
 8007cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cfa:	e008      	b.n	8007d0e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cfc:	f7fb fbfc 	bl	80034f8 <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d901      	bls.n	8007d0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e087      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d0e:	4b27      	ldr	r3, [pc, #156]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1f0      	bne.n	8007cfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	69da      	ldr	r2, [r3, #28]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a1b      	ldr	r3, [r3, #32]
 8007d22:	431a      	orrs	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d28:	019b      	lsls	r3, r3, #6
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d30:	085b      	lsrs	r3, r3, #1
 8007d32:	3b01      	subs	r3, #1
 8007d34:	041b      	lsls	r3, r3, #16
 8007d36:	431a      	orrs	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3c:	061b      	lsls	r3, r3, #24
 8007d3e:	491b      	ldr	r1, [pc, #108]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d44:	4b1b      	ldr	r3, [pc, #108]	@ (8007db4 <HAL_RCC_OscConfig+0x478>)
 8007d46:	2201      	movs	r2, #1
 8007d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d4a:	f7fb fbd5 	bl	80034f8 <HAL_GetTick>
 8007d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d50:	e008      	b.n	8007d64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d52:	f7fb fbd1 	bl	80034f8 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d901      	bls.n	8007d64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d60:	2303      	movs	r3, #3
 8007d62:	e05c      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d64:	4b11      	ldr	r3, [pc, #68]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d0f0      	beq.n	8007d52 <HAL_RCC_OscConfig+0x416>
 8007d70:	e054      	b.n	8007e1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d72:	4b10      	ldr	r3, [pc, #64]	@ (8007db4 <HAL_RCC_OscConfig+0x478>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d78:	f7fb fbbe 	bl	80034f8 <HAL_GetTick>
 8007d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d7e:	e008      	b.n	8007d92 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d80:	f7fb fbba 	bl	80034f8 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e045      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d92:	4b06      	ldr	r3, [pc, #24]	@ (8007dac <HAL_RCC_OscConfig+0x470>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1f0      	bne.n	8007d80 <HAL_RCC_OscConfig+0x444>
 8007d9e:	e03d      	b.n	8007e1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d107      	bne.n	8007db8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e038      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
 8007dac:	40023800 	.word	0x40023800
 8007db0:	40007000 	.word	0x40007000
 8007db4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007db8:	4b1b      	ldr	r3, [pc, #108]	@ (8007e28 <HAL_RCC_OscConfig+0x4ec>)
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d028      	beq.n	8007e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d121      	bne.n	8007e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d11a      	bne.n	8007e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007de8:	4013      	ands	r3, r2
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007dee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d111      	bne.n	8007e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dfe:	085b      	lsrs	r3, r3, #1
 8007e00:	3b01      	subs	r3, #1
 8007e02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d107      	bne.n	8007e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d001      	beq.n	8007e1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e000      	b.n	8007e1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3718      	adds	r7, #24
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	40023800 	.word	0x40023800

08007e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e0cc      	b.n	8007fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e40:	4b68      	ldr	r3, [pc, #416]	@ (8007fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0307 	and.w	r3, r3, #7
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d90c      	bls.n	8007e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e4e:	4b65      	ldr	r3, [pc, #404]	@ (8007fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	b2d2      	uxtb	r2, r2
 8007e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e56:	4b63      	ldr	r3, [pc, #396]	@ (8007fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0307 	and.w	r3, r3, #7
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d001      	beq.n	8007e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e0b8      	b.n	8007fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d020      	beq.n	8007eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d005      	beq.n	8007e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e80:	4b59      	ldr	r3, [pc, #356]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	4a58      	ldr	r2, [pc, #352]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007e8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f003 0308 	and.w	r3, r3, #8
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d005      	beq.n	8007ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e98:	4b53      	ldr	r3, [pc, #332]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	4a52      	ldr	r2, [pc, #328]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007e9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ea4:	4b50      	ldr	r3, [pc, #320]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	494d      	ldr	r1, [pc, #308]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f003 0301 	and.w	r3, r3, #1
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d044      	beq.n	8007f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d107      	bne.n	8007eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eca:	4b47      	ldr	r3, [pc, #284]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d119      	bne.n	8007f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e07f      	b.n	8007fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d003      	beq.n	8007eea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ee6:	2b03      	cmp	r3, #3
 8007ee8:	d107      	bne.n	8007efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eea:	4b3f      	ldr	r3, [pc, #252]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d109      	bne.n	8007f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e06f      	b.n	8007fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007efa:	4b3b      	ldr	r3, [pc, #236]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d101      	bne.n	8007f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e067      	b.n	8007fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f0a:	4b37      	ldr	r3, [pc, #220]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f023 0203 	bic.w	r2, r3, #3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	4934      	ldr	r1, [pc, #208]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f1c:	f7fb faec 	bl	80034f8 <HAL_GetTick>
 8007f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f22:	e00a      	b.n	8007f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f24:	f7fb fae8 	bl	80034f8 <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d901      	bls.n	8007f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f36:	2303      	movs	r3, #3
 8007f38:	e04f      	b.n	8007fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f003 020c 	and.w	r2, r3, #12
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d1eb      	bne.n	8007f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f4c:	4b25      	ldr	r3, [pc, #148]	@ (8007fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0307 	and.w	r3, r3, #7
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d20c      	bcs.n	8007f74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f5a:	4b22      	ldr	r3, [pc, #136]	@ (8007fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f5c:	683a      	ldr	r2, [r7, #0]
 8007f5e:	b2d2      	uxtb	r2, r2
 8007f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f62:	4b20      	ldr	r3, [pc, #128]	@ (8007fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0307 	and.w	r3, r3, #7
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	429a      	cmp	r2, r3
 8007f6e:	d001      	beq.n	8007f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e032      	b.n	8007fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0304 	and.w	r3, r3, #4
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d008      	beq.n	8007f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f80:	4b19      	ldr	r3, [pc, #100]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	68db      	ldr	r3, [r3, #12]
 8007f8c:	4916      	ldr	r1, [pc, #88]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0308 	and.w	r3, r3, #8
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d009      	beq.n	8007fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f9e:	4b12      	ldr	r3, [pc, #72]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	490e      	ldr	r1, [pc, #56]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007fb2:	f000 f821 	bl	8007ff8 <HAL_RCC_GetSysClockFreq>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	091b      	lsrs	r3, r3, #4
 8007fbe:	f003 030f 	and.w	r3, r3, #15
 8007fc2:	490a      	ldr	r1, [pc, #40]	@ (8007fec <HAL_RCC_ClockConfig+0x1c0>)
 8007fc4:	5ccb      	ldrb	r3, [r1, r3]
 8007fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007fca:	4a09      	ldr	r2, [pc, #36]	@ (8007ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8007fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007fce:	4b09      	ldr	r3, [pc, #36]	@ (8007ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fb fa4c 	bl	8003470 <HAL_InitTick>

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40023c00 	.word	0x40023c00
 8007fe8:	40023800 	.word	0x40023800
 8007fec:	0800e018 	.word	0x0800e018
 8007ff0:	20000004 	.word	0x20000004
 8007ff4:	20000008 	.word	0x20000008

08007ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ffc:	b090      	sub	sp, #64	@ 0x40
 8007ffe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008000:	2300      	movs	r3, #0
 8008002:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008004:	2300      	movs	r3, #0
 8008006:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008010:	4b59      	ldr	r3, [pc, #356]	@ (8008178 <HAL_RCC_GetSysClockFreq+0x180>)
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f003 030c 	and.w	r3, r3, #12
 8008018:	2b08      	cmp	r3, #8
 800801a:	d00d      	beq.n	8008038 <HAL_RCC_GetSysClockFreq+0x40>
 800801c:	2b08      	cmp	r3, #8
 800801e:	f200 80a1 	bhi.w	8008164 <HAL_RCC_GetSysClockFreq+0x16c>
 8008022:	2b00      	cmp	r3, #0
 8008024:	d002      	beq.n	800802c <HAL_RCC_GetSysClockFreq+0x34>
 8008026:	2b04      	cmp	r3, #4
 8008028:	d003      	beq.n	8008032 <HAL_RCC_GetSysClockFreq+0x3a>
 800802a:	e09b      	b.n	8008164 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800802c:	4b53      	ldr	r3, [pc, #332]	@ (800817c <HAL_RCC_GetSysClockFreq+0x184>)
 800802e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008030:	e09b      	b.n	800816a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008032:	4b53      	ldr	r3, [pc, #332]	@ (8008180 <HAL_RCC_GetSysClockFreq+0x188>)
 8008034:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008036:	e098      	b.n	800816a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008038:	4b4f      	ldr	r3, [pc, #316]	@ (8008178 <HAL_RCC_GetSysClockFreq+0x180>)
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008040:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008042:	4b4d      	ldr	r3, [pc, #308]	@ (8008178 <HAL_RCC_GetSysClockFreq+0x180>)
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d028      	beq.n	80080a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800804e:	4b4a      	ldr	r3, [pc, #296]	@ (8008178 <HAL_RCC_GetSysClockFreq+0x180>)
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	099b      	lsrs	r3, r3, #6
 8008054:	2200      	movs	r2, #0
 8008056:	623b      	str	r3, [r7, #32]
 8008058:	627a      	str	r2, [r7, #36]	@ 0x24
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008060:	2100      	movs	r1, #0
 8008062:	4b47      	ldr	r3, [pc, #284]	@ (8008180 <HAL_RCC_GetSysClockFreq+0x188>)
 8008064:	fb03 f201 	mul.w	r2, r3, r1
 8008068:	2300      	movs	r3, #0
 800806a:	fb00 f303 	mul.w	r3, r0, r3
 800806e:	4413      	add	r3, r2
 8008070:	4a43      	ldr	r2, [pc, #268]	@ (8008180 <HAL_RCC_GetSysClockFreq+0x188>)
 8008072:	fba0 1202 	umull	r1, r2, r0, r2
 8008076:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008078:	460a      	mov	r2, r1
 800807a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800807c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800807e:	4413      	add	r3, r2
 8008080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008084:	2200      	movs	r2, #0
 8008086:	61bb      	str	r3, [r7, #24]
 8008088:	61fa      	str	r2, [r7, #28]
 800808a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800808e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008092:	f7f8 fd7b 	bl	8000b8c <__aeabi_uldivmod>
 8008096:	4602      	mov	r2, r0
 8008098:	460b      	mov	r3, r1
 800809a:	4613      	mov	r3, r2
 800809c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800809e:	e053      	b.n	8008148 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080a0:	4b35      	ldr	r3, [pc, #212]	@ (8008178 <HAL_RCC_GetSysClockFreq+0x180>)
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	099b      	lsrs	r3, r3, #6
 80080a6:	2200      	movs	r2, #0
 80080a8:	613b      	str	r3, [r7, #16]
 80080aa:	617a      	str	r2, [r7, #20]
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80080b2:	f04f 0b00 	mov.w	fp, #0
 80080b6:	4652      	mov	r2, sl
 80080b8:	465b      	mov	r3, fp
 80080ba:	f04f 0000 	mov.w	r0, #0
 80080be:	f04f 0100 	mov.w	r1, #0
 80080c2:	0159      	lsls	r1, r3, #5
 80080c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080c8:	0150      	lsls	r0, r2, #5
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	ebb2 080a 	subs.w	r8, r2, sl
 80080d2:	eb63 090b 	sbc.w	r9, r3, fp
 80080d6:	f04f 0200 	mov.w	r2, #0
 80080da:	f04f 0300 	mov.w	r3, #0
 80080de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80080e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80080e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80080ea:	ebb2 0408 	subs.w	r4, r2, r8
 80080ee:	eb63 0509 	sbc.w	r5, r3, r9
 80080f2:	f04f 0200 	mov.w	r2, #0
 80080f6:	f04f 0300 	mov.w	r3, #0
 80080fa:	00eb      	lsls	r3, r5, #3
 80080fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008100:	00e2      	lsls	r2, r4, #3
 8008102:	4614      	mov	r4, r2
 8008104:	461d      	mov	r5, r3
 8008106:	eb14 030a 	adds.w	r3, r4, sl
 800810a:	603b      	str	r3, [r7, #0]
 800810c:	eb45 030b 	adc.w	r3, r5, fp
 8008110:	607b      	str	r3, [r7, #4]
 8008112:	f04f 0200 	mov.w	r2, #0
 8008116:	f04f 0300 	mov.w	r3, #0
 800811a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800811e:	4629      	mov	r1, r5
 8008120:	028b      	lsls	r3, r1, #10
 8008122:	4621      	mov	r1, r4
 8008124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008128:	4621      	mov	r1, r4
 800812a:	028a      	lsls	r2, r1, #10
 800812c:	4610      	mov	r0, r2
 800812e:	4619      	mov	r1, r3
 8008130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008132:	2200      	movs	r2, #0
 8008134:	60bb      	str	r3, [r7, #8]
 8008136:	60fa      	str	r2, [r7, #12]
 8008138:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800813c:	f7f8 fd26 	bl	8000b8c <__aeabi_uldivmod>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	4613      	mov	r3, r2
 8008146:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008148:	4b0b      	ldr	r3, [pc, #44]	@ (8008178 <HAL_RCC_GetSysClockFreq+0x180>)
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	0c1b      	lsrs	r3, r3, #16
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	3301      	adds	r3, #1
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008158:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008160:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008162:	e002      	b.n	800816a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008164:	4b05      	ldr	r3, [pc, #20]	@ (800817c <HAL_RCC_GetSysClockFreq+0x184>)
 8008166:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800816a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800816c:	4618      	mov	r0, r3
 800816e:	3740      	adds	r7, #64	@ 0x40
 8008170:	46bd      	mov	sp, r7
 8008172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008176:	bf00      	nop
 8008178:	40023800 	.word	0x40023800
 800817c:	00f42400 	.word	0x00f42400
 8008180:	017d7840 	.word	0x017d7840

08008184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008184:	b480      	push	{r7}
 8008186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008188:	4b03      	ldr	r3, [pc, #12]	@ (8008198 <HAL_RCC_GetHCLKFreq+0x14>)
 800818a:	681b      	ldr	r3, [r3, #0]
}
 800818c:	4618      	mov	r0, r3
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	20000004 	.word	0x20000004

0800819c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80081a0:	f7ff fff0 	bl	8008184 <HAL_RCC_GetHCLKFreq>
 80081a4:	4602      	mov	r2, r0
 80081a6:	4b05      	ldr	r3, [pc, #20]	@ (80081bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	0a9b      	lsrs	r3, r3, #10
 80081ac:	f003 0307 	and.w	r3, r3, #7
 80081b0:	4903      	ldr	r1, [pc, #12]	@ (80081c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081b2:	5ccb      	ldrb	r3, [r1, r3]
 80081b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	40023800 	.word	0x40023800
 80081c0:	0800e028 	.word	0x0800e028

080081c4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e022      	b.n	800821c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d105      	bne.n	80081ee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7fa fee9 	bl	8002fc0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2203      	movs	r2, #3
 80081f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f814 	bl	8008224 <HAL_SD_InitCard>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d001      	beq.n	8008206 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e00a      	b.n	800821c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008224:	b5b0      	push	{r4, r5, r7, lr}
 8008226:	b08e      	sub	sp, #56	@ 0x38
 8008228:	af04      	add	r7, sp, #16
 800822a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800822c:	2300      	movs	r3, #0
 800822e:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008230:	2300      	movs	r3, #0
 8008232:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008234:	2300      	movs	r3, #0
 8008236:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008238:	2300      	movs	r3, #0
 800823a:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800823c:	2300      	movs	r3, #0
 800823e:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008240:	2376      	movs	r3, #118	@ 0x76
 8008242:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681d      	ldr	r5, [r3, #0]
 8008248:	466c      	mov	r4, sp
 800824a:	f107 0318 	add.w	r3, r7, #24
 800824e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008252:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008256:	f107 030c 	add.w	r3, r7, #12
 800825a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800825c:	4628      	mov	r0, r5
 800825e:	f001 ffb7 	bl	800a1d0 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008262:	4b2a      	ldr	r3, [pc, #168]	@ (800830c <HAL_SD_InitCard+0xe8>)
 8008264:	2200      	movs	r2, #0
 8008266:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4618      	mov	r0, r3
 800826e:	f001 fff8 	bl	800a262 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008272:	4b26      	ldr	r3, [pc, #152]	@ (800830c <HAL_SD_InitCard+0xe8>)
 8008274:	2201      	movs	r2, #1
 8008276:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008278:	2002      	movs	r0, #2
 800827a:	f7fb f949 	bl	8003510 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f001 f878 	bl	8009374 <SD_PowerON>
 8008284:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00b      	beq.n	80082a4 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2201      	movs	r2, #1
 8008290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829a:	431a      	orrs	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e02e      	b.n	8008302 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 ff97 	bl	80091d8 <SD_InitCard>
 80082aa:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80082ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00b      	beq.n	80082ca <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c0:	431a      	orrs	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e01b      	b.n	8008302 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80082d2:	4618      	mov	r0, r3
 80082d4:	f002 f857 	bl	800a386 <SDMMC_CmdBlockLength>
 80082d8:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80082da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00f      	beq.n	8008300 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a0a      	ldr	r2, [pc, #40]	@ (8008310 <HAL_SD_InitCard+0xec>)
 80082e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ee:	431a      	orrs	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e000      	b.n	8008302 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3728      	adds	r7, #40	@ 0x28
 8008306:	46bd      	mov	sp, r7
 8008308:	bdb0      	pop	{r4, r5, r7, pc}
 800830a:	bf00      	nop
 800830c:	422580a0 	.word	0x422580a0
 8008310:	004005ff 	.word	0x004005ff

08008314 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b092      	sub	sp, #72	@ 0x48
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008322:	f7fb f8e9 	bl	80034f8 <HAL_GetTick>
 8008326:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d107      	bne.n	8008346 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800833a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e1c5      	b.n	80086d2 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b01      	cmp	r3, #1
 8008350:	f040 81b8 	bne.w	80086c4 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800835a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	441a      	add	r2, r3
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008364:	429a      	cmp	r2, r3
 8008366:	d907      	bls.n	8008378 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	e1ac      	b.n	80086d2 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2203      	movs	r2, #3
 800837c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2200      	movs	r2, #0
 8008386:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800838c:	2b01      	cmp	r3, #1
 800838e:	d002      	beq.n	8008396 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008392:	025b      	lsls	r3, r3, #9
 8008394:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008396:	f04f 33ff 	mov.w	r3, #4294967295
 800839a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	025b      	lsls	r3, r3, #9
 80083a0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80083a2:	2390      	movs	r3, #144	@ 0x90
 80083a4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80083a6:	2302      	movs	r3, #2
 80083a8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80083ae:	2301      	movs	r3, #1
 80083b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f107 0214 	add.w	r2, r7, #20
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f001 ffb6 	bl	800a32e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d90a      	bls.n	80083de <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2202      	movs	r2, #2
 80083cc:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80083d4:	4618      	mov	r0, r3
 80083d6:	f002 f81a 	bl	800a40e <SDMMC_CmdReadMultiBlock>
 80083da:	6478      	str	r0, [r7, #68]	@ 0x44
 80083dc:	e009      	b.n	80083f2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2201      	movs	r2, #1
 80083e2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80083ea:	4618      	mov	r0, r3
 80083ec:	f001 ffed 	bl	800a3ca <SDMMC_CmdReadSingleBlock>
 80083f0:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80083f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d012      	beq.n	800841e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a7e      	ldr	r2, [pc, #504]	@ (80085f8 <HAL_SD_ReadBlocks+0x2e4>)
 80083fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008404:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008406:	431a      	orrs	r2, r3
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2200      	movs	r2, #0
 8008418:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e159      	b.n	80086d2 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008422:	e061      	b.n	80084e8 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800842a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d03c      	beq.n	80084ac <HAL_SD_ReadBlocks+0x198>
 8008432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008434:	2b00      	cmp	r3, #0
 8008436:	d039      	beq.n	80084ac <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008438:	2300      	movs	r3, #0
 800843a:	643b      	str	r3, [r7, #64]	@ 0x40
 800843c:	e033      	b.n	80084a6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4618      	mov	r0, r3
 8008444:	f001 feef 	bl	800a226 <SDIO_ReadFIFO>
 8008448:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800844a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844c:	b2da      	uxtb	r2, r3
 800844e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008450:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008454:	3301      	adds	r3, #1
 8008456:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800845a:	3b01      	subs	r3, #1
 800845c:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800845e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008460:	0a1b      	lsrs	r3, r3, #8
 8008462:	b2da      	uxtb	r2, r3
 8008464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008466:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800846a:	3301      	adds	r3, #1
 800846c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800846e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008470:	3b01      	subs	r3, #1
 8008472:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008476:	0c1b      	lsrs	r3, r3, #16
 8008478:	b2da      	uxtb	r2, r3
 800847a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800847c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800847e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008480:	3301      	adds	r3, #1
 8008482:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008486:	3b01      	subs	r3, #1
 8008488:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800848a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800848c:	0e1b      	lsrs	r3, r3, #24
 800848e:	b2da      	uxtb	r2, r3
 8008490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008492:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008496:	3301      	adds	r3, #1
 8008498:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800849a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800849c:	3b01      	subs	r3, #1
 800849e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80084a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084a2:	3301      	adds	r3, #1
 80084a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80084a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084a8:	2b07      	cmp	r3, #7
 80084aa:	d9c8      	bls.n	800843e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80084ac:	f7fb f824 	bl	80034f8 <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d902      	bls.n	80084c2 <HAL_SD_ReadBlocks+0x1ae>
 80084bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d112      	bne.n	80084e8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a4c      	ldr	r2, [pc, #304]	@ (80085f8 <HAL_SD_ReadBlocks+0x2e4>)
 80084c8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e0f4      	b.n	80086d2 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084ee:	f240 332a 	movw	r3, #810	@ 0x32a
 80084f2:	4013      	ands	r3, r2
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d095      	beq.n	8008424 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008502:	2b00      	cmp	r3, #0
 8008504:	d022      	beq.n	800854c <HAL_SD_ReadBlocks+0x238>
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d91f      	bls.n	800854c <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008510:	2b03      	cmp	r3, #3
 8008512:	d01b      	beq.n	800854c <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4618      	mov	r0, r3
 800851a:	f001 ffdf 	bl	800a4dc <SDMMC_CmdStopTransfer>
 800851e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008522:	2b00      	cmp	r3, #0
 8008524:	d012      	beq.n	800854c <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a33      	ldr	r2, [pc, #204]	@ (80085f8 <HAL_SD_ReadBlocks+0x2e4>)
 800852c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008534:	431a      	orrs	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e0c2      	b.n	80086d2 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008552:	f003 0308 	and.w	r3, r3, #8
 8008556:	2b00      	cmp	r3, #0
 8008558:	d106      	bne.n	8008568 <HAL_SD_ReadBlocks+0x254>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008564:	2b00      	cmp	r3, #0
 8008566:	d012      	beq.n	800858e <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a22      	ldr	r2, [pc, #136]	@ (80085f8 <HAL_SD_ReadBlocks+0x2e4>)
 800856e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008574:	f043 0208 	orr.w	r2, r3, #8
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e0a1      	b.n	80086d2 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008594:	f003 0302 	and.w	r3, r3, #2
 8008598:	2b00      	cmp	r3, #0
 800859a:	d012      	beq.n	80085c2 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a15      	ldr	r2, [pc, #84]	@ (80085f8 <HAL_SD_ReadBlocks+0x2e4>)
 80085a2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a8:	f043 0202 	orr.w	r2, r3, #2
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e087      	b.n	80086d2 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085c8:	f003 0320 	and.w	r3, r3, #32
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d064      	beq.n	800869a <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a08      	ldr	r2, [pc, #32]	@ (80085f8 <HAL_SD_ReadBlocks+0x2e4>)
 80085d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085dc:	f043 0220 	orr.w	r2, r3, #32
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e06d      	b.n	80086d2 <HAL_SD_ReadBlocks+0x3be>
 80085f6:	bf00      	nop
 80085f8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4618      	mov	r0, r3
 8008602:	f001 fe10 	bl	800a226 <SDIO_ReadFIFO>
 8008606:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860a:	b2da      	uxtb	r2, r3
 800860c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008612:	3301      	adds	r3, #1
 8008614:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008618:	3b01      	subs	r3, #1
 800861a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800861c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861e:	0a1b      	lsrs	r3, r3, #8
 8008620:	b2da      	uxtb	r2, r3
 8008622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008624:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008628:	3301      	adds	r3, #1
 800862a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800862c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800862e:	3b01      	subs	r3, #1
 8008630:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008634:	0c1b      	lsrs	r3, r3, #16
 8008636:	b2da      	uxtb	r2, r3
 8008638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800863a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800863c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800863e:	3301      	adds	r3, #1
 8008640:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008644:	3b01      	subs	r3, #1
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864a:	0e1b      	lsrs	r3, r3, #24
 800864c:	b2da      	uxtb	r2, r3
 800864e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008650:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008654:	3301      	adds	r3, #1
 8008656:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800865a:	3b01      	subs	r3, #1
 800865c:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800865e:	f7fa ff4b 	bl	80034f8 <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800866a:	429a      	cmp	r2, r3
 800866c:	d902      	bls.n	8008674 <HAL_SD_ReadBlocks+0x360>
 800866e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008670:	2b00      	cmp	r3, #0
 8008672:	d112      	bne.n	800869a <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a18      	ldr	r2, [pc, #96]	@ (80086dc <HAL_SD_ReadBlocks+0x3c8>)
 800867a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008680:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e01b      	b.n	80086d2 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d002      	beq.n	80086ae <HAL_SD_ReadBlocks+0x39a>
 80086a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1a6      	bne.n	80085fc <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f240 523a 	movw	r2, #1338	@ 0x53a
 80086b6:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	e006      	b.n	80086d2 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
  }
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3748      	adds	r7, #72	@ 0x48
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	004005ff 	.word	0x004005ff

080086e0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b092      	sub	sp, #72	@ 0x48
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]
 80086ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80086ee:	f7fa ff03 	bl	80034f8 <HAL_GetTick>
 80086f2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d107      	bne.n	8008712 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008706:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e16d      	b.n	80089ee <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b01      	cmp	r3, #1
 800871c:	f040 8160 	bne.w	80089e0 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2200      	movs	r2, #0
 8008724:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008726:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	441a      	add	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008730:	429a      	cmp	r2, r3
 8008732:	d907      	bls.n	8008744 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008738:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	e154      	b.n	80089ee <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2203      	movs	r2, #3
 8008748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2200      	movs	r2, #0
 8008752:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008758:	2b01      	cmp	r3, #1
 800875a:	d002      	beq.n	8008762 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800875c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875e:	025b      	lsls	r3, r3, #9
 8008760:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008762:	f04f 33ff 	mov.w	r3, #4294967295
 8008766:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	025b      	lsls	r3, r3, #9
 800876c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800876e:	2390      	movs	r3, #144	@ 0x90
 8008770:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008772:	2300      	movs	r3, #0
 8008774:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008776:	2300      	movs	r3, #0
 8008778:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800877a:	2301      	movs	r3, #1
 800877c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f107 0218 	add.w	r2, r7, #24
 8008786:	4611      	mov	r1, r2
 8008788:	4618      	mov	r0, r3
 800878a:	f001 fdd0 	bl	800a32e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	2b01      	cmp	r3, #1
 8008792:	d90a      	bls.n	80087aa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2220      	movs	r2, #32
 8008798:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80087a0:	4618      	mov	r0, r3
 80087a2:	f001 fe78 	bl	800a496 <SDMMC_CmdWriteMultiBlock>
 80087a6:	6478      	str	r0, [r7, #68]	@ 0x44
 80087a8:	e009      	b.n	80087be <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2210      	movs	r2, #16
 80087ae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80087b6:	4618      	mov	r0, r3
 80087b8:	f001 fe4b 	bl	800a452 <SDMMC_CmdWriteSingleBlock>
 80087bc:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80087be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d012      	beq.n	80087ea <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a8b      	ldr	r2, [pc, #556]	@ (80089f8 <HAL_SD_WriteBlocks+0x318>)
 80087ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80087d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80087d2:	431a      	orrs	r2, r3
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e101      	b.n	80089ee <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80087ee:	e065      	b.n	80088bc <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d040      	beq.n	8008880 <HAL_SD_WriteBlocks+0x1a0>
 80087fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008800:	2b00      	cmp	r3, #0
 8008802:	d03d      	beq.n	8008880 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008804:	2300      	movs	r3, #0
 8008806:	643b      	str	r3, [r7, #64]	@ 0x40
 8008808:	e037      	b.n	800887a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800880a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008812:	3301      	adds	r3, #1
 8008814:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008818:	3b01      	subs	r3, #1
 800881a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800881c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	021a      	lsls	r2, r3, #8
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	4313      	orrs	r3, r2
 8008826:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800882a:	3301      	adds	r3, #1
 800882c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800882e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008830:	3b01      	subs	r3, #1
 8008832:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	041a      	lsls	r2, r3, #16
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	4313      	orrs	r3, r2
 800883e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008842:	3301      	adds	r3, #1
 8008844:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008848:	3b01      	subs	r3, #1
 800884a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800884c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	061a      	lsls	r2, r3, #24
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	4313      	orrs	r3, r2
 8008856:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800885a:	3301      	adds	r3, #1
 800885c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800885e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008860:	3b01      	subs	r3, #1
 8008862:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f107 0214 	add.w	r2, r7, #20
 800886c:	4611      	mov	r1, r2
 800886e:	4618      	mov	r0, r3
 8008870:	f001 fce6 	bl	800a240 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008876:	3301      	adds	r3, #1
 8008878:	643b      	str	r3, [r7, #64]	@ 0x40
 800887a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800887c:	2b07      	cmp	r3, #7
 800887e:	d9c4      	bls.n	800880a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008880:	f7fa fe3a 	bl	80034f8 <HAL_GetTick>
 8008884:	4602      	mov	r2, r0
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800888c:	429a      	cmp	r2, r3
 800888e:	d902      	bls.n	8008896 <HAL_SD_WriteBlocks+0x1b6>
 8008890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008892:	2b00      	cmp	r3, #0
 8008894:	d112      	bne.n	80088bc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a57      	ldr	r2, [pc, #348]	@ (80089f8 <HAL_SD_WriteBlocks+0x318>)
 800889c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088a4:	431a      	orrs	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2200      	movs	r2, #0
 80088b6:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e098      	b.n	80089ee <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088c2:	f240 331a 	movw	r3, #794	@ 0x31a
 80088c6:	4013      	ands	r3, r2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d091      	beq.n	80087f0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d022      	beq.n	8008920 <HAL_SD_WriteBlocks+0x240>
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d91f      	bls.n	8008920 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d01b      	beq.n	8008920 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f001 fdf5 	bl	800a4dc <SDMMC_CmdStopTransfer>
 80088f2:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80088f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d012      	beq.n	8008920 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a3e      	ldr	r2, [pc, #248]	@ (80089f8 <HAL_SD_WriteBlocks+0x318>)
 8008900:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008906:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008908:	431a      	orrs	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2201      	movs	r2, #1
 8008912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	e066      	b.n	80089ee <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008926:	f003 0308 	and.w	r3, r3, #8
 800892a:	2b00      	cmp	r3, #0
 800892c:	d106      	bne.n	800893c <HAL_SD_WriteBlocks+0x25c>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008934:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008938:	2b00      	cmp	r3, #0
 800893a:	d012      	beq.n	8008962 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a2d      	ldr	r2, [pc, #180]	@ (80089f8 <HAL_SD_WriteBlocks+0x318>)
 8008942:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008948:	f043 0208 	orr.w	r2, r3, #8
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e045      	b.n	80089ee <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d012      	beq.n	8008996 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a20      	ldr	r2, [pc, #128]	@ (80089f8 <HAL_SD_WriteBlocks+0x318>)
 8008976:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800897c:	f043 0202 	orr.w	r2, r3, #2
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e02b      	b.n	80089ee <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800899c:	f003 0310 	and.w	r3, r3, #16
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d012      	beq.n	80089ca <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a13      	ldr	r2, [pc, #76]	@ (80089f8 <HAL_SD_WriteBlocks+0x318>)
 80089aa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b0:	f043 0210 	orr.w	r2, r3, #16
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e011      	b.n	80089ee <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f240 523a 	movw	r2, #1338	@ 0x53a
 80089d2:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	e006      	b.n	80089ee <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
  }
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3748      	adds	r7, #72	@ 0x48
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	004005ff 	.word	0x004005ff

080089fc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a08:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d008      	beq.n	8008a2a <HAL_SD_IRQHandler+0x2e>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f003 0308 	and.w	r3, r3, #8
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fd5c 	bl	80094e0 <SD_Read_IT>
 8008a28:	e165      	b.n	8008cf6 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 808f 	beq.w	8008b58 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a42:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	6812      	ldr	r2, [r2, #0]
 8008a4e:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8008a52:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8008a56:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0201 	bic.w	r2, r2, #1
 8008a66:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f003 0308 	and.w	r3, r3, #8
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d039      	beq.n	8008ae6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f003 0302 	and.w	r3, r3, #2
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d104      	bne.n	8008a86 <HAL_SD_IRQHandler+0x8a>
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f003 0320 	and.w	r3, r3, #32
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d011      	beq.n	8008aaa <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f001 fd26 	bl	800a4dc <SDMMC_CmdStopTransfer>
 8008a90:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d008      	beq.n	8008aaa <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f92f 	bl	8008d08 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008ab2:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d104      	bne.n	8008ad6 <HAL_SD_IRQHandler+0xda>
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f003 0302 	and.w	r3, r3, #2
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d003      	beq.n	8008ade <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f002 f94c 	bl	800ad74 <HAL_SD_RxCpltCallback>
 8008adc:	e10b      	b.n	8008cf6 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f002 f93e 	bl	800ad60 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008ae4:	e107      	b.n	8008cf6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 8102 	beq.w	8008cf6 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f003 0320 	and.w	r3, r3, #32
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d011      	beq.n	8008b20 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f001 fceb 	bl	800a4dc <SDMMC_CmdStopTransfer>
 8008b06:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d008      	beq.n	8008b20 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	431a      	orrs	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f8f4 	bl	8008d08 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	f040 80e5 	bne.w	8008cf6 <HAL_SD_IRQHandler+0x2fa>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f003 0302 	and.w	r3, r3, #2
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f040 80df 	bne.w	8008cf6 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f022 0208 	bic.w	r2, r2, #8
 8008b46:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f002 f905 	bl	800ad60 <HAL_SD_TxCpltCallback>
}
 8008b56:	e0ce      	b.n	8008cf6 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d008      	beq.n	8008b78 <HAL_SD_IRQHandler+0x17c>
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f003 0308 	and.w	r3, r3, #8
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d003      	beq.n	8008b78 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fd06 	bl	8009582 <SD_Write_IT>
 8008b76:	e0be      	b.n	8008cf6 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b7e:	f240 233a 	movw	r3, #570	@ 0x23a
 8008b82:	4013      	ands	r3, r2
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 80b6 	beq.w	8008cf6 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b90:	f003 0302 	and.w	r3, r3, #2
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d005      	beq.n	8008ba4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b9c:	f043 0202 	orr.w	r2, r3, #2
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008baa:	f003 0308 	and.w	r3, r3, #8
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d005      	beq.n	8008bbe <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb6:	f043 0208 	orr.w	r2, r3, #8
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bc4:	f003 0320 	and.w	r3, r3, #32
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d005      	beq.n	8008bd8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bd0:	f043 0220 	orr.w	r2, r3, #32
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bde:	f003 0310 	and.w	r3, r3, #16
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d005      	beq.n	8008bf2 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bea:	f043 0210 	orr.w	r2, r3, #16
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d005      	beq.n	8008c0c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c04:	f043 0208 	orr.w	r2, r3, #8
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f240 723a 	movw	r2, #1850	@ 0x73a
 8008c14:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	6812      	ldr	r2, [r2, #0]
 8008c20:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8008c24:	f023 0302 	bic.w	r3, r3, #2
 8008c28:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f001 fc54 	bl	800a4dc <SDMMC_CmdStopTransfer>
 8008c34:	4602      	mov	r2, r0
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c3a:	431a      	orrs	r2, r3
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f003 0308 	and.w	r3, r3, #8
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00a      	beq.n	8008c60 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f855 	bl	8008d08 <HAL_SD_ErrorCallback>
}
 8008c5e:	e04a      	b.n	8008cf6 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d045      	beq.n	8008cf6 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f003 0310 	and.w	r3, r3, #16
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d104      	bne.n	8008c7e <HAL_SD_IRQHandler+0x282>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f003 0320 	and.w	r3, r3, #32
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d011      	beq.n	8008ca2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c82:	4a1f      	ldr	r2, [pc, #124]	@ (8008d00 <HAL_SD_IRQHandler+0x304>)
 8008c84:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fc f80d 	bl	8004caa <HAL_DMA_Abort_IT>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d02f      	beq.n	8008cf6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 fa2e 	bl	80090fc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008ca0:	e029      	b.n	8008cf6 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f003 0301 	and.w	r3, r3, #1
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d104      	bne.n	8008cb6 <HAL_SD_IRQHandler+0x2ba>
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f003 0302 	and.w	r3, r3, #2
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d011      	beq.n	8008cda <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cba:	4a12      	ldr	r2, [pc, #72]	@ (8008d04 <HAL_SD_IRQHandler+0x308>)
 8008cbc:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fb fff1 	bl	8004caa <HAL_DMA_Abort_IT>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d013      	beq.n	8008cf6 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f000 fa49 	bl	800916a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008cd8:	e00d      	b.n	8008cf6 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f002 f82c 	bl	800ad4c <HAL_SD_AbortCallback>
}
 8008cf4:	e7ff      	b.n	8008cf6 <HAL_SD_IRQHandler+0x2fa>
 8008cf6:	bf00      	nop
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	080090fd 	.word	0x080090fd
 8008d04:	0800916b 	.word	0x0800916b

08008d08 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b083      	sub	sp, #12
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d2a:	0f9b      	lsrs	r3, r3, #30
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d36:	0e9b      	lsrs	r3, r3, #26
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	f003 030f 	and.w	r3, r3, #15
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d48:	0e1b      	lsrs	r3, r3, #24
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	f003 0303 	and.w	r3, r3, #3
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d5a:	0c1b      	lsrs	r3, r3, #16
 8008d5c:	b2da      	uxtb	r2, r3
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d66:	0a1b      	lsrs	r3, r3, #8
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d7c:	0d1b      	lsrs	r3, r3, #20
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d88:	0c1b      	lsrs	r3, r3, #16
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	f003 030f 	and.w	r3, r3, #15
 8008d90:	b2da      	uxtb	r2, r3
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d9a:	0bdb      	lsrs	r3, r3, #15
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dac:	0b9b      	lsrs	r3, r3, #14
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dbe:	0b5b      	lsrs	r3, r3, #13
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	b2da      	uxtb	r2, r3
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dd0:	0b1b      	lsrs	r3, r3, #12
 8008dd2:	b2db      	uxtb	r3, r3
 8008dd4:	f003 0301 	and.w	r3, r3, #1
 8008dd8:	b2da      	uxtb	r2, r3
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2200      	movs	r2, #0
 8008de2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d163      	bne.n	8008eb4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008df0:	009a      	lsls	r2, r3, #2
 8008df2:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008df6:	4013      	ands	r3, r2
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008dfc:	0f92      	lsrs	r2, r2, #30
 8008dfe:	431a      	orrs	r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e08:	0edb      	lsrs	r3, r3, #27
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	f003 0307 	and.w	r3, r3, #7
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e1a:	0e1b      	lsrs	r3, r3, #24
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	f003 0307 	and.w	r3, r3, #7
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e2c:	0d5b      	lsrs	r3, r3, #21
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	f003 0307 	and.w	r3, r3, #7
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e3e:	0c9b      	lsrs	r3, r3, #18
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e50:	0bdb      	lsrs	r3, r3, #15
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	f003 0307 	and.w	r3, r3, #7
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	1c5a      	adds	r2, r3, #1
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	7e1b      	ldrb	r3, [r3, #24]
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	f003 0307 	and.w	r3, r3, #7
 8008e72:	3302      	adds	r3, #2
 8008e74:	2201      	movs	r2, #1
 8008e76:	fa02 f303 	lsl.w	r3, r2, r3
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008e7e:	fb03 f202 	mul.w	r2, r3, r2
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	7a1b      	ldrb	r3, [r3, #8]
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	f003 030f 	and.w	r3, r3, #15
 8008e90:	2201      	movs	r2, #1
 8008e92:	409a      	lsls	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008ea0:	0a52      	lsrs	r2, r2, #9
 8008ea2:	fb03 f202 	mul.w	r2, r3, r2
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008eb0:	661a      	str	r2, [r3, #96]	@ 0x60
 8008eb2:	e031      	b.n	8008f18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d11d      	bne.n	8008ef8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ec0:	041b      	lsls	r3, r3, #16
 8008ec2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eca:	0c1b      	lsrs	r3, r3, #16
 8008ecc:	431a      	orrs	r2, r3
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	029a      	lsls	r2, r3, #10
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008eec:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	661a      	str	r2, [r3, #96]	@ 0x60
 8008ef6:	e00f      	b.n	8008f18 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a58      	ldr	r2, [pc, #352]	@ (8009060 <HAL_SD_GetCardCSD+0x344>)
 8008efe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f04:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	e09d      	b.n	8009054 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f1c:	0b9b      	lsrs	r3, r3, #14
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	b2da      	uxtb	r2, r3
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f2e:	09db      	lsrs	r3, r3, #7
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f36:	b2da      	uxtb	r2, r3
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f46:	b2da      	uxtb	r2, r3
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f50:	0fdb      	lsrs	r3, r3, #31
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f5c:	0f5b      	lsrs	r3, r3, #29
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	f003 0303 	and.w	r3, r3, #3
 8008f64:	b2da      	uxtb	r2, r3
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f6e:	0e9b      	lsrs	r3, r3, #26
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	f003 0307 	and.w	r3, r3, #7
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f80:	0d9b      	lsrs	r3, r3, #22
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	f003 030f 	and.w	r3, r3, #15
 8008f88:	b2da      	uxtb	r2, r3
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f92:	0d5b      	lsrs	r3, r3, #21
 8008f94:	b2db      	uxtb	r3, r3
 8008f96:	f003 0301 	and.w	r3, r3, #1
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fae:	0c1b      	lsrs	r3, r3, #16
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	f003 0301 	and.w	r3, r3, #1
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fc2:	0bdb      	lsrs	r3, r3, #15
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fd6:	0b9b      	lsrs	r3, r3, #14
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	b2da      	uxtb	r2, r3
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fea:	0b5b      	lsrs	r3, r3, #13
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ffe:	0b1b      	lsrs	r3, r3, #12
 8009000:	b2db      	uxtb	r3, r3
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	b2da      	uxtb	r2, r3
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009012:	0a9b      	lsrs	r3, r3, #10
 8009014:	b2db      	uxtb	r3, r3
 8009016:	f003 0303 	and.w	r3, r3, #3
 800901a:	b2da      	uxtb	r2, r3
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009026:	0a1b      	lsrs	r3, r3, #8
 8009028:	b2db      	uxtb	r3, r3
 800902a:	f003 0303 	and.w	r3, r3, #3
 800902e:	b2da      	uxtb	r2, r3
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800903a:	085b      	lsrs	r3, r3, #1
 800903c:	b2db      	uxtb	r3, r3
 800903e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009042:	b2da      	uxtb	r2, r3
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009052:	2300      	movs	r3, #0
}
 8009054:	4618      	mov	r0, r3
 8009056:	370c      	adds	r7, #12
 8009058:	46bd      	mov	sp, r7
 800905a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905e:	4770      	bx	lr
 8009060:	004005ff 	.word	0x004005ff

08009064 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009064:	b480      	push	{r7}
 8009066:	b083      	sub	sp, #12
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80090ae:	2300      	movs	r3, #0
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80090c4:	2300      	movs	r3, #0
 80090c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80090c8:	f107 030c 	add.w	r3, r7, #12
 80090cc:	4619      	mov	r1, r3
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 f9de 	bl	8009490 <SD_SendStatus>
 80090d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d005      	beq.n	80090e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	431a      	orrs	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	0a5b      	lsrs	r3, r3, #9
 80090ec:	f003 030f 	and.w	r3, r3, #15
 80090f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80090f2:	693b      	ldr	r3, [r7, #16]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3718      	adds	r7, #24
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009108:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009112:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f7ff ffd1 	bl	80090bc <HAL_SD_GetCardState>
 800911a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2201      	movs	r2, #1
 8009120:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	2b06      	cmp	r3, #6
 800912e:	d002      	beq.n	8009136 <SD_DMATxAbort+0x3a>
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2b05      	cmp	r3, #5
 8009134:	d10a      	bne.n	800914c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4618      	mov	r0, r3
 800913c:	f001 f9ce 	bl	800a4dc <SDMMC_CmdStopTransfer>
 8009140:	4602      	mov	r2, r0
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009146:	431a      	orrs	r2, r3
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009150:	2b00      	cmp	r3, #0
 8009152:	d103      	bne.n	800915c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f001 fdf9 	bl	800ad4c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800915a:	e002      	b.n	8009162 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800915c:	68f8      	ldr	r0, [r7, #12]
 800915e:	f7ff fdd3 	bl	8008d08 <HAL_SD_ErrorCallback>
}
 8009162:	bf00      	nop
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b084      	sub	sp, #16
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009176:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009180:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f7ff ff9a 	bl	80090bc <HAL_SD_GetCardState>
 8009188:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2200      	movs	r2, #0
 8009196:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2b06      	cmp	r3, #6
 800919c:	d002      	beq.n	80091a4 <SD_DMARxAbort+0x3a>
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2b05      	cmp	r3, #5
 80091a2:	d10a      	bne.n	80091ba <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4618      	mov	r0, r3
 80091aa:	f001 f997 	bl	800a4dc <SDMMC_CmdStopTransfer>
 80091ae:	4602      	mov	r2, r0
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b4:	431a      	orrs	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d103      	bne.n	80091ca <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f001 fdc2 	bl	800ad4c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80091c8:	e002      	b.n	80091d0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f7ff fd9c 	bl	8008d08 <HAL_SD_ErrorCallback>
}
 80091d0:	bf00      	nop
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80091d8:	b5b0      	push	{r4, r5, r7, lr}
 80091da:	b094      	sub	sp, #80	@ 0x50
 80091dc:	af04      	add	r7, sp, #16
 80091de:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80091e0:	2301      	movs	r3, #1
 80091e2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f001 f848 	bl	800a27e <SDIO_GetPowerState>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d102      	bne.n	80091fa <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091f4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80091f8:	e0b8      	b.n	800936c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d02f      	beq.n	8009262 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4618      	mov	r0, r3
 8009208:	f001 fa2f 	bl	800a66a <SDMMC_CmdSendCID>
 800920c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800920e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <SD_InitCard+0x40>
    {
      return errorstate;
 8009214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009216:	e0a9      	b.n	800936c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2100      	movs	r1, #0
 800921e:	4618      	mov	r0, r3
 8009220:	f001 f872 	bl	800a308 <SDIO_GetResponse>
 8009224:	4602      	mov	r2, r0
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2104      	movs	r1, #4
 8009230:	4618      	mov	r0, r3
 8009232:	f001 f869 	bl	800a308 <SDIO_GetResponse>
 8009236:	4602      	mov	r2, r0
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2108      	movs	r1, #8
 8009242:	4618      	mov	r0, r3
 8009244:	f001 f860 	bl	800a308 <SDIO_GetResponse>
 8009248:	4602      	mov	r2, r0
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	210c      	movs	r1, #12
 8009254:	4618      	mov	r0, r3
 8009256:	f001 f857 	bl	800a308 <SDIO_GetResponse>
 800925a:	4602      	mov	r2, r0
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009266:	2b03      	cmp	r3, #3
 8009268:	d00d      	beq.n	8009286 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f107 020e 	add.w	r2, r7, #14
 8009272:	4611      	mov	r1, r2
 8009274:	4618      	mov	r0, r3
 8009276:	f001 fa35 	bl	800a6e4 <SDMMC_CmdSetRelAdd>
 800927a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800927c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <SD_InitCard+0xae>
    {
      return errorstate;
 8009282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009284:	e072      	b.n	800936c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800928a:	2b03      	cmp	r3, #3
 800928c:	d036      	beq.n	80092fc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800928e:	89fb      	ldrh	r3, [r7, #14]
 8009290:	461a      	mov	r2, r3
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800929e:	041b      	lsls	r3, r3, #16
 80092a0:	4619      	mov	r1, r3
 80092a2:	4610      	mov	r0, r2
 80092a4:	f001 f9ff 	bl	800a6a6 <SDMMC_CmdSendCSD>
 80092a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80092aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80092b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b2:	e05b      	b.n	800936c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2100      	movs	r1, #0
 80092ba:	4618      	mov	r0, r3
 80092bc:	f001 f824 	bl	800a308 <SDIO_GetResponse>
 80092c0:	4602      	mov	r2, r0
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2104      	movs	r1, #4
 80092cc:	4618      	mov	r0, r3
 80092ce:	f001 f81b 	bl	800a308 <SDIO_GetResponse>
 80092d2:	4602      	mov	r2, r0
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2108      	movs	r1, #8
 80092de:	4618      	mov	r0, r3
 80092e0:	f001 f812 	bl	800a308 <SDIO_GetResponse>
 80092e4:	4602      	mov	r2, r0
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	210c      	movs	r1, #12
 80092f0:	4618      	mov	r0, r3
 80092f2:	f001 f809 	bl	800a308 <SDIO_GetResponse>
 80092f6:	4602      	mov	r2, r0
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2104      	movs	r1, #4
 8009302:	4618      	mov	r0, r3
 8009304:	f001 f800 	bl	800a308 <SDIO_GetResponse>
 8009308:	4603      	mov	r3, r0
 800930a:	0d1a      	lsrs	r2, r3, #20
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009310:	f107 0310 	add.w	r3, r7, #16
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f7ff fd00 	bl	8008d1c <HAL_SD_GetCardCSD>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d002      	beq.n	8009328 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009322:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009326:	e021      	b.n	800936c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6819      	ldr	r1, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009330:	041b      	lsls	r3, r3, #16
 8009332:	2200      	movs	r2, #0
 8009334:	461c      	mov	r4, r3
 8009336:	4615      	mov	r5, r2
 8009338:	4622      	mov	r2, r4
 800933a:	462b      	mov	r3, r5
 800933c:	4608      	mov	r0, r1
 800933e:	f001 f8ef 	bl	800a520 <SDMMC_CmdSelDesel>
 8009342:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009344:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <SD_InitCard+0x176>
  {
    return errorstate;
 800934a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800934c:	e00e      	b.n	800936c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681d      	ldr	r5, [r3, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	466c      	mov	r4, sp
 8009356:	f103 0210 	add.w	r2, r3, #16
 800935a:	ca07      	ldmia	r2, {r0, r1, r2}
 800935c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009360:	3304      	adds	r3, #4
 8009362:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009364:	4628      	mov	r0, r5
 8009366:	f000 ff33 	bl	800a1d0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800936a:	2300      	movs	r3, #0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3740      	adds	r7, #64	@ 0x40
 8009370:	46bd      	mov	sp, r7
 8009372:	bdb0      	pop	{r4, r5, r7, pc}

08009374 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b086      	sub	sp, #24
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800937c:	2300      	movs	r3, #0
 800937e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009380:	2300      	movs	r3, #0
 8009382:	617b      	str	r3, [r7, #20]
 8009384:	2300      	movs	r3, #0
 8009386:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4618      	mov	r0, r3
 800938e:	f001 f8ea 	bl	800a566 <SDMMC_CmdGoIdleState>
 8009392:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <SD_PowerON+0x2a>
  {
    return errorstate;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	e072      	b.n	8009484 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4618      	mov	r0, r3
 80093a4:	f001 f8fd 	bl	800a5a2 <SDMMC_CmdOperCond>
 80093a8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00d      	beq.n	80093cc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f001 f8d3 	bl	800a566 <SDMMC_CmdGoIdleState>
 80093c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d004      	beq.n	80093d2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	e05b      	b.n	8009484 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d137      	bne.n	800944a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2100      	movs	r1, #0
 80093e0:	4618      	mov	r0, r3
 80093e2:	f001 f8fd 	bl	800a5e0 <SDMMC_CmdAppCommand>
 80093e6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d02d      	beq.n	800944a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093ee:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80093f2:	e047      	b.n	8009484 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2100      	movs	r1, #0
 80093fa:	4618      	mov	r0, r3
 80093fc:	f001 f8f0 	bl	800a5e0 <SDMMC_CmdAppCommand>
 8009400:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <SD_PowerON+0x98>
    {
      return errorstate;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	e03b      	b.n	8009484 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	491e      	ldr	r1, [pc, #120]	@ (800948c <SD_PowerON+0x118>)
 8009412:	4618      	mov	r0, r3
 8009414:	f001 f906 	bl	800a624 <SDMMC_CmdAppOperCommand>
 8009418:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d002      	beq.n	8009426 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009420:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009424:	e02e      	b.n	8009484 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2100      	movs	r1, #0
 800942c:	4618      	mov	r0, r3
 800942e:	f000 ff6b 	bl	800a308 <SDIO_GetResponse>
 8009432:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	0fdb      	lsrs	r3, r3, #31
 8009438:	2b01      	cmp	r3, #1
 800943a:	d101      	bne.n	8009440 <SD_PowerON+0xcc>
 800943c:	2301      	movs	r3, #1
 800943e:	e000      	b.n	8009442 <SD_PowerON+0xce>
 8009440:	2300      	movs	r3, #0
 8009442:	613b      	str	r3, [r7, #16]

    count++;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	3301      	adds	r3, #1
 8009448:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009450:	4293      	cmp	r3, r2
 8009452:	d802      	bhi.n	800945a <SD_PowerON+0xe6>
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d0cc      	beq.n	80093f4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009460:	4293      	cmp	r3, r2
 8009462:	d902      	bls.n	800946a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009464:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009468:	e00c      	b.n	8009484 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d003      	beq.n	800947c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	645a      	str	r2, [r3, #68]	@ 0x44
 800947a:	e002      	b.n	8009482 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2200      	movs	r2, #0
 8009480:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009482:	2300      	movs	r3, #0
}
 8009484:	4618      	mov	r0, r3
 8009486:	3718      	adds	r7, #24
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	c1100000 	.word	0xc1100000

08009490 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d102      	bne.n	80094a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80094a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80094a4:	e018      	b.n	80094d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094ae:	041b      	lsls	r3, r3, #16
 80094b0:	4619      	mov	r1, r3
 80094b2:	4610      	mov	r0, r2
 80094b4:	f001 f937 	bl	800a726 <SDMMC_CmdSendStatus>
 80094b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	e009      	b.n	80094d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	2100      	movs	r1, #0
 80094ca:	4618      	mov	r0, r3
 80094cc:	f000 ff1c 	bl	800a308 <SDIO_GetResponse>
 80094d0:	4602      	mov	r2, r0
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094ec:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d03f      	beq.n	800957a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80094fa:	2300      	movs	r3, #0
 80094fc:	617b      	str	r3, [r7, #20]
 80094fe:	e033      	b.n	8009568 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4618      	mov	r0, r3
 8009506:	f000 fe8e 	bl	800a226 <SDIO_ReadFIFO>
 800950a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	b2da      	uxtb	r2, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	3301      	adds	r3, #1
 8009518:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	3b01      	subs	r3, #1
 800951e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	0a1b      	lsrs	r3, r3, #8
 8009524:	b2da      	uxtb	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	701a      	strb	r2, [r3, #0]
      tmp++;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	3301      	adds	r3, #1
 800952e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	3b01      	subs	r3, #1
 8009534:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	0c1b      	lsrs	r3, r3, #16
 800953a:	b2da      	uxtb	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	3301      	adds	r3, #1
 8009544:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	3b01      	subs	r3, #1
 800954a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	0e1b      	lsrs	r3, r3, #24
 8009550:	b2da      	uxtb	r2, r3
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	3301      	adds	r3, #1
 800955a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	3b01      	subs	r3, #1
 8009560:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	3301      	adds	r3, #1
 8009566:	617b      	str	r3, [r7, #20]
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	2b07      	cmp	r3, #7
 800956c:	d9c8      	bls.n	8009500 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	693a      	ldr	r2, [r7, #16]
 8009578:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800957a:	bf00      	nop
 800957c:	3718      	adds	r7, #24
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b086      	sub	sp, #24
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a1b      	ldr	r3, [r3, #32]
 800958e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009594:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d043      	beq.n	8009624 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800959c:	2300      	movs	r3, #0
 800959e:	617b      	str	r3, [r7, #20]
 80095a0:	e037      	b.n	8009612 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	3301      	adds	r3, #1
 80095ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	021a      	lsls	r2, r3, #8
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	4313      	orrs	r3, r2
 80095be:	60bb      	str	r3, [r7, #8]
      tmp++;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	3301      	adds	r3, #1
 80095c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	3b01      	subs	r3, #1
 80095ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	041a      	lsls	r2, r3, #16
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	3301      	adds	r3, #1
 80095dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	3b01      	subs	r3, #1
 80095e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	061a      	lsls	r2, r3, #24
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	4313      	orrs	r3, r2
 80095ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3301      	adds	r3, #1
 80095f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	3b01      	subs	r3, #1
 80095fa:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f107 0208 	add.w	r2, r7, #8
 8009604:	4611      	mov	r1, r2
 8009606:	4618      	mov	r0, r3
 8009608:	f000 fe1a 	bl	800a240 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	3301      	adds	r3, #1
 8009610:	617b      	str	r3, [r7, #20]
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	2b07      	cmp	r3, #7
 8009616:	d9c4      	bls.n	80095a2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8009624:	bf00      	nop
 8009626:	3718      	adds	r7, #24
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b082      	sub	sp, #8
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d101      	bne.n	800963e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	e07b      	b.n	8009736 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009642:	2b00      	cmp	r3, #0
 8009644:	d108      	bne.n	8009658 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800964e:	d009      	beq.n	8009664 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	61da      	str	r2, [r3, #28]
 8009656:	e005      	b.n	8009664 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b00      	cmp	r3, #0
 8009674:	d106      	bne.n	8009684 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f7f9 fd0e 	bl	80030a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2202      	movs	r2, #2
 8009688:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800969a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80096ac:	431a      	orrs	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80096b6:	431a      	orrs	r2, r3
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	f003 0302 	and.w	r3, r3, #2
 80096c0:	431a      	orrs	r2, r3
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	f003 0301 	and.w	r3, r3, #1
 80096ca:	431a      	orrs	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096d4:	431a      	orrs	r2, r3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	69db      	ldr	r3, [r3, #28]
 80096da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096de:	431a      	orrs	r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a1b      	ldr	r3, [r3, #32]
 80096e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096e8:	ea42 0103 	orr.w	r1, r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096f0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	0c1b      	lsrs	r3, r3, #16
 8009702:	f003 0104 	and.w	r1, r3, #4
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800970a:	f003 0210 	and.w	r2, r3, #16
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	430a      	orrs	r2, r1
 8009714:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	69da      	ldr	r2, [r3, #28]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009724:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b088      	sub	sp, #32
 8009742:	af00      	add	r7, sp, #0
 8009744:	60f8      	str	r0, [r7, #12]
 8009746:	60b9      	str	r1, [r7, #8]
 8009748:	603b      	str	r3, [r7, #0]
 800974a:	4613      	mov	r3, r2
 800974c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800974e:	f7f9 fed3 	bl	80034f8 <HAL_GetTick>
 8009752:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009754:	88fb      	ldrh	r3, [r7, #6]
 8009756:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800975e:	b2db      	uxtb	r3, r3
 8009760:	2b01      	cmp	r3, #1
 8009762:	d001      	beq.n	8009768 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009764:	2302      	movs	r3, #2
 8009766:	e12a      	b.n	80099be <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d002      	beq.n	8009774 <HAL_SPI_Transmit+0x36>
 800976e:	88fb      	ldrh	r3, [r7, #6]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d101      	bne.n	8009778 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e122      	b.n	80099be <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800977e:	2b01      	cmp	r3, #1
 8009780:	d101      	bne.n	8009786 <HAL_SPI_Transmit+0x48>
 8009782:	2302      	movs	r3, #2
 8009784:	e11b      	b.n	80099be <HAL_SPI_Transmit+0x280>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2203      	movs	r2, #3
 8009792:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	68ba      	ldr	r2, [r7, #8]
 80097a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	88fa      	ldrh	r2, [r7, #6]
 80097a6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	88fa      	ldrh	r2, [r7, #6]
 80097ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2200      	movs	r2, #0
 80097b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2200      	movs	r2, #0
 80097be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097d4:	d10f      	bne.n	80097f6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80097f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009800:	2b40      	cmp	r3, #64	@ 0x40
 8009802:	d007      	beq.n	8009814 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009812:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800981c:	d152      	bne.n	80098c4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <HAL_SPI_Transmit+0xee>
 8009826:	8b7b      	ldrh	r3, [r7, #26]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d145      	bne.n	80098b8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009830:	881a      	ldrh	r2, [r3, #0]
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800983c:	1c9a      	adds	r2, r3, #2
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009846:	b29b      	uxth	r3, r3
 8009848:	3b01      	subs	r3, #1
 800984a:	b29a      	uxth	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009850:	e032      	b.n	80098b8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f003 0302 	and.w	r3, r3, #2
 800985c:	2b02      	cmp	r3, #2
 800985e:	d112      	bne.n	8009886 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009864:	881a      	ldrh	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009870:	1c9a      	adds	r2, r3, #2
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800987a:	b29b      	uxth	r3, r3
 800987c:	3b01      	subs	r3, #1
 800987e:	b29a      	uxth	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009884:	e018      	b.n	80098b8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009886:	f7f9 fe37 	bl	80034f8 <HAL_GetTick>
 800988a:	4602      	mov	r2, r0
 800988c:	69fb      	ldr	r3, [r7, #28]
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	429a      	cmp	r2, r3
 8009894:	d803      	bhi.n	800989e <HAL_SPI_Transmit+0x160>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989c:	d102      	bne.n	80098a4 <HAL_SPI_Transmit+0x166>
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d109      	bne.n	80098b8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e082      	b.n	80099be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80098bc:	b29b      	uxth	r3, r3
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1c7      	bne.n	8009852 <HAL_SPI_Transmit+0x114>
 80098c2:	e053      	b.n	800996c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d002      	beq.n	80098d2 <HAL_SPI_Transmit+0x194>
 80098cc:	8b7b      	ldrh	r3, [r7, #26]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d147      	bne.n	8009962 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	330c      	adds	r3, #12
 80098dc:	7812      	ldrb	r2, [r2, #0]
 80098de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098e4:	1c5a      	adds	r2, r3, #1
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	3b01      	subs	r3, #1
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80098f8:	e033      	b.n	8009962 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f003 0302 	and.w	r3, r3, #2
 8009904:	2b02      	cmp	r3, #2
 8009906:	d113      	bne.n	8009930 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	330c      	adds	r3, #12
 8009912:	7812      	ldrb	r2, [r2, #0]
 8009914:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800991a:	1c5a      	adds	r2, r3, #1
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009924:	b29b      	uxth	r3, r3
 8009926:	3b01      	subs	r3, #1
 8009928:	b29a      	uxth	r2, r3
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800992e:	e018      	b.n	8009962 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009930:	f7f9 fde2 	bl	80034f8 <HAL_GetTick>
 8009934:	4602      	mov	r2, r0
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	429a      	cmp	r2, r3
 800993e:	d803      	bhi.n	8009948 <HAL_SPI_Transmit+0x20a>
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009946:	d102      	bne.n	800994e <HAL_SPI_Transmit+0x210>
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d109      	bne.n	8009962 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800995e:	2303      	movs	r3, #3
 8009960:	e02d      	b.n	80099be <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009966:	b29b      	uxth	r3, r3
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1c6      	bne.n	80098fa <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800996c:	69fa      	ldr	r2, [r7, #28]
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f000 fbd9 	bl	800a128 <SPI_EndRxTxTransaction>
 8009976:	4603      	mov	r3, r0
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2220      	movs	r2, #32
 8009980:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10a      	bne.n	80099a0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800998a:	2300      	movs	r3, #0
 800998c:	617b      	str	r3, [r7, #20]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	617b      	str	r3, [r7, #20]
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	617b      	str	r3, [r7, #20]
 800999e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	2201      	movs	r2, #1
 80099a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e000      	b.n	80099be <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80099bc:	2300      	movs	r3, #0
  }
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3720      	adds	r7, #32
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b088      	sub	sp, #32
 80099ca:	af02      	add	r7, sp, #8
 80099cc:	60f8      	str	r0, [r7, #12]
 80099ce:	60b9      	str	r1, [r7, #8]
 80099d0:	603b      	str	r3, [r7, #0]
 80099d2:	4613      	mov	r3, r2
 80099d4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d001      	beq.n	80099e6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80099e2:	2302      	movs	r3, #2
 80099e4:	e104      	b.n	8009bf0 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d002      	beq.n	80099f2 <HAL_SPI_Receive+0x2c>
 80099ec:	88fb      	ldrh	r3, [r7, #6]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d101      	bne.n	80099f6 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e0fc      	b.n	8009bf0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099fe:	d112      	bne.n	8009a26 <HAL_SPI_Receive+0x60>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d10e      	bne.n	8009a26 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2204      	movs	r2, #4
 8009a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009a10:	88fa      	ldrh	r2, [r7, #6]
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	4613      	mov	r3, r2
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	68b9      	ldr	r1, [r7, #8]
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f000 f8eb 	bl	8009bf8 <HAL_SPI_TransmitReceive>
 8009a22:	4603      	mov	r3, r0
 8009a24:	e0e4      	b.n	8009bf0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a26:	f7f9 fd67 	bl	80034f8 <HAL_GetTick>
 8009a2a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d101      	bne.n	8009a3a <HAL_SPI_Receive+0x74>
 8009a36:	2302      	movs	r3, #2
 8009a38:	e0da      	b.n	8009bf0 <HAL_SPI_Receive+0x22a>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2204      	movs	r2, #4
 8009a46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	88fa      	ldrh	r2, [r7, #6]
 8009a5a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	88fa      	ldrh	r2, [r7, #6]
 8009a60:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2200      	movs	r2, #0
 8009a72:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2200      	movs	r2, #0
 8009a78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a88:	d10f      	bne.n	8009aaa <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009aa8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ab4:	2b40      	cmp	r3, #64	@ 0x40
 8009ab6:	d007      	beq.n	8009ac8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ac6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d170      	bne.n	8009bb2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009ad0:	e035      	b.n	8009b3e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d115      	bne.n	8009b0c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f103 020c 	add.w	r2, r3, #12
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aec:	7812      	ldrb	r2, [r2, #0]
 8009aee:	b2d2      	uxtb	r2, r2
 8009af0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af6:	1c5a      	adds	r2, r3, #1
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	3b01      	subs	r3, #1
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009b0a:	e018      	b.n	8009b3e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b0c:	f7f9 fcf4 	bl	80034f8 <HAL_GetTick>
 8009b10:	4602      	mov	r2, r0
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d803      	bhi.n	8009b24 <HAL_SPI_Receive+0x15e>
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b22:	d102      	bne.n	8009b2a <HAL_SPI_Receive+0x164>
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d109      	bne.n	8009b3e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009b3a:	2303      	movs	r3, #3
 8009b3c:	e058      	b.n	8009bf0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d1c4      	bne.n	8009ad2 <HAL_SPI_Receive+0x10c>
 8009b48:	e038      	b.n	8009bbc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	f003 0301 	and.w	r3, r3, #1
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d113      	bne.n	8009b80 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	68da      	ldr	r2, [r3, #12]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b62:	b292      	uxth	r2, r2
 8009b64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b6a:	1c9a      	adds	r2, r3, #2
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	3b01      	subs	r3, #1
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009b7e:	e018      	b.n	8009bb2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b80:	f7f9 fcba 	bl	80034f8 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	697b      	ldr	r3, [r7, #20]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	683a      	ldr	r2, [r7, #0]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d803      	bhi.n	8009b98 <HAL_SPI_Receive+0x1d2>
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b96:	d102      	bne.n	8009b9e <HAL_SPI_Receive+0x1d8>
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d109      	bne.n	8009bb2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e01e      	b.n	8009bf0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1c6      	bne.n	8009b4a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 fa4b 	bl	800a05c <SPI_EndRxTransaction>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d002      	beq.n	8009bd2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	e000      	b.n	8009bf0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8009bee:	2300      	movs	r3, #0
  }
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3718      	adds	r7, #24
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}

08009bf8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b08a      	sub	sp, #40	@ 0x28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
 8009c04:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c06:	2301      	movs	r3, #1
 8009c08:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c0a:	f7f9 fc75 	bl	80034f8 <HAL_GetTick>
 8009c0e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009c16:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009c1e:	887b      	ldrh	r3, [r7, #2]
 8009c20:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009c22:	7ffb      	ldrb	r3, [r7, #31]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d00c      	beq.n	8009c42 <HAL_SPI_TransmitReceive+0x4a>
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c2e:	d106      	bne.n	8009c3e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d102      	bne.n	8009c3e <HAL_SPI_TransmitReceive+0x46>
 8009c38:	7ffb      	ldrb	r3, [r7, #31]
 8009c3a:	2b04      	cmp	r3, #4
 8009c3c:	d001      	beq.n	8009c42 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009c3e:	2302      	movs	r3, #2
 8009c40:	e17f      	b.n	8009f42 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d005      	beq.n	8009c54 <HAL_SPI_TransmitReceive+0x5c>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d002      	beq.n	8009c54 <HAL_SPI_TransmitReceive+0x5c>
 8009c4e:	887b      	ldrh	r3, [r7, #2]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d101      	bne.n	8009c58 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e174      	b.n	8009f42 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009c5e:	2b01      	cmp	r3, #1
 8009c60:	d101      	bne.n	8009c66 <HAL_SPI_TransmitReceive+0x6e>
 8009c62:	2302      	movs	r3, #2
 8009c64:	e16d      	b.n	8009f42 <HAL_SPI_TransmitReceive+0x34a>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	2b04      	cmp	r3, #4
 8009c78:	d003      	beq.n	8009c82 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2205      	movs	r2, #5
 8009c7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	887a      	ldrh	r2, [r7, #2]
 8009c92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	887a      	ldrh	r2, [r7, #2]
 8009c98:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	887a      	ldrh	r2, [r7, #2]
 8009ca4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	887a      	ldrh	r2, [r7, #2]
 8009caa:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009cc2:	2b40      	cmp	r3, #64	@ 0x40
 8009cc4:	d007      	beq.n	8009cd6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	68db      	ldr	r3, [r3, #12]
 8009cda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009cde:	d17e      	bne.n	8009dde <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <HAL_SPI_TransmitReceive+0xf6>
 8009ce8:	8afb      	ldrh	r3, [r7, #22]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d16c      	bne.n	8009dc8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cf2:	881a      	ldrh	r2, [r3, #0]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cfe:	1c9a      	adds	r2, r3, #2
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d12:	e059      	b.n	8009dc8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f003 0302 	and.w	r3, r3, #2
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d11b      	bne.n	8009d5a <HAL_SPI_TransmitReceive+0x162>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d016      	beq.n	8009d5a <HAL_SPI_TransmitReceive+0x162>
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d113      	bne.n	8009d5a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d36:	881a      	ldrh	r2, [r3, #0]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d42:	1c9a      	adds	r2, r3, #2
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	b29a      	uxth	r2, r3
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d119      	bne.n	8009d9c <HAL_SPI_TransmitReceive+0x1a4>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d014      	beq.n	8009d9c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	68da      	ldr	r2, [r3, #12]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d7c:	b292      	uxth	r2, r2
 8009d7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d84:	1c9a      	adds	r2, r3, #2
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	3b01      	subs	r3, #1
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009d9c:	f7f9 fbac 	bl	80034f8 <HAL_GetTick>
 8009da0:	4602      	mov	r2, r0
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d80d      	bhi.n	8009dc8 <HAL_SPI_TransmitReceive+0x1d0>
 8009dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db2:	d009      	beq.n	8009dc8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	e0bc      	b.n	8009f42 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d1a0      	bne.n	8009d14 <HAL_SPI_TransmitReceive+0x11c>
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d19b      	bne.n	8009d14 <HAL_SPI_TransmitReceive+0x11c>
 8009ddc:	e082      	b.n	8009ee4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d002      	beq.n	8009dec <HAL_SPI_TransmitReceive+0x1f4>
 8009de6:	8afb      	ldrh	r3, [r7, #22]
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d171      	bne.n	8009ed0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	330c      	adds	r3, #12
 8009df6:	7812      	ldrb	r2, [r2, #0]
 8009df8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dfe:	1c5a      	adds	r2, r3, #1
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e12:	e05d      	b.n	8009ed0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	f003 0302 	and.w	r3, r3, #2
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d11c      	bne.n	8009e5c <HAL_SPI_TransmitReceive+0x264>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d017      	beq.n	8009e5c <HAL_SPI_TransmitReceive+0x264>
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d114      	bne.n	8009e5c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	330c      	adds	r3, #12
 8009e3c:	7812      	ldrb	r2, [r2, #0]
 8009e3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e44:	1c5a      	adds	r2, r3, #1
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	3b01      	subs	r3, #1
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d119      	bne.n	8009e9e <HAL_SPI_TransmitReceive+0x2a6>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d014      	beq.n	8009e9e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	68da      	ldr	r2, [r3, #12]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e7e:	b2d2      	uxtb	r2, r2
 8009e80:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e86:	1c5a      	adds	r2, r3, #1
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	3b01      	subs	r3, #1
 8009e94:	b29a      	uxth	r2, r3
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009e9e:	f7f9 fb2b 	bl	80034f8 <HAL_GetTick>
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	6a3b      	ldr	r3, [r7, #32]
 8009ea6:	1ad3      	subs	r3, r2, r3
 8009ea8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d803      	bhi.n	8009eb6 <HAL_SPI_TransmitReceive+0x2be>
 8009eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb4:	d102      	bne.n	8009ebc <HAL_SPI_TransmitReceive+0x2c4>
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d109      	bne.n	8009ed0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009ecc:	2303      	movs	r3, #3
 8009ece:	e038      	b.n	8009f42 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d19c      	bne.n	8009e14 <HAL_SPI_TransmitReceive+0x21c>
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d197      	bne.n	8009e14 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009ee4:	6a3a      	ldr	r2, [r7, #32]
 8009ee6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ee8:	68f8      	ldr	r0, [r7, #12]
 8009eea:	f000 f91d 	bl	800a128 <SPI_EndRxTxTransaction>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d008      	beq.n	8009f06 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2220      	movs	r2, #32
 8009ef8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e01d      	b.n	8009f42 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10a      	bne.n	8009f24 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f0e:	2300      	movs	r3, #0
 8009f10:	613b      	str	r3, [r7, #16]
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	613b      	str	r3, [r7, #16]
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	613b      	str	r3, [r7, #16]
 8009f22:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d001      	beq.n	8009f40 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e000      	b.n	8009f42 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8009f40:	2300      	movs	r3, #0
  }
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3728      	adds	r7, #40	@ 0x28
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
	...

08009f4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b088      	sub	sp, #32
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	603b      	str	r3, [r7, #0]
 8009f58:	4613      	mov	r3, r2
 8009f5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009f5c:	f7f9 facc 	bl	80034f8 <HAL_GetTick>
 8009f60:	4602      	mov	r2, r0
 8009f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f64:	1a9b      	subs	r3, r3, r2
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	4413      	add	r3, r2
 8009f6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009f6c:	f7f9 fac4 	bl	80034f8 <HAL_GetTick>
 8009f70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009f72:	4b39      	ldr	r3, [pc, #228]	@ (800a058 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	015b      	lsls	r3, r3, #5
 8009f78:	0d1b      	lsrs	r3, r3, #20
 8009f7a:	69fa      	ldr	r2, [r7, #28]
 8009f7c:	fb02 f303 	mul.w	r3, r2, r3
 8009f80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009f82:	e055      	b.n	800a030 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f8a:	d051      	beq.n	800a030 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f8c:	f7f9 fab4 	bl	80034f8 <HAL_GetTick>
 8009f90:	4602      	mov	r2, r0
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	69fa      	ldr	r2, [r7, #28]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d902      	bls.n	8009fa2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d13d      	bne.n	800a01e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009fb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009fba:	d111      	bne.n	8009fe0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fc4:	d004      	beq.n	8009fd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fce:	d107      	bne.n	8009fe0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009fde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009fe8:	d10f      	bne.n	800a00a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	681a      	ldr	r2, [r3, #0]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a008:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e018      	b.n	800a050 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d102      	bne.n	800a02a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800a024:	2300      	movs	r3, #0
 800a026:	61fb      	str	r3, [r7, #28]
 800a028:	e002      	b.n	800a030 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	689a      	ldr	r2, [r3, #8]
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	4013      	ands	r3, r2
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	bf0c      	ite	eq
 800a040:	2301      	moveq	r3, #1
 800a042:	2300      	movne	r3, #0
 800a044:	b2db      	uxtb	r3, r3
 800a046:	461a      	mov	r2, r3
 800a048:	79fb      	ldrb	r3, [r7, #7]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d19a      	bne.n	8009f84 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3720      	adds	r7, #32
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	20000004 	.word	0x20000004

0800a05c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af02      	add	r7, sp, #8
 800a062:	60f8      	str	r0, [r7, #12]
 800a064:	60b9      	str	r1, [r7, #8]
 800a066:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a070:	d111      	bne.n	800a096 <SPI_EndRxTransaction+0x3a>
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	689b      	ldr	r3, [r3, #8]
 800a076:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a07a:	d004      	beq.n	800a086 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	689b      	ldr	r3, [r3, #8]
 800a080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a084:	d107      	bne.n	800a096 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a094:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a09e:	d12a      	bne.n	800a0f6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0a8:	d012      	beq.n	800a0d0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	9300      	str	r3, [sp, #0]
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	2180      	movs	r1, #128	@ 0x80
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f7ff ff49 	bl	8009f4c <SPI_WaitFlagStateUntilTimeout>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d02d      	beq.n	800a11c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0c4:	f043 0220 	orr.w	r2, r3, #32
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800a0cc:	2303      	movs	r3, #3
 800a0ce:	e026      	b.n	800a11e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	9300      	str	r3, [sp, #0]
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	2101      	movs	r1, #1
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f7ff ff36 	bl	8009f4c <SPI_WaitFlagStateUntilTimeout>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d01a      	beq.n	800a11c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0ea:	f043 0220 	orr.w	r2, r3, #32
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	e013      	b.n	800a11e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	2101      	movs	r1, #1
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f7ff ff23 	bl	8009f4c <SPI_WaitFlagStateUntilTimeout>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d007      	beq.n	800a11c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a110:	f043 0220 	orr.w	r2, r3, #32
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	e000      	b.n	800a11e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b088      	sub	sp, #32
 800a12c:	af02      	add	r7, sp, #8
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	9300      	str	r3, [sp, #0]
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	2201      	movs	r2, #1
 800a13c:	2102      	movs	r1, #2
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f7ff ff04 	bl	8009f4c <SPI_WaitFlagStateUntilTimeout>
 800a144:	4603      	mov	r3, r0
 800a146:	2b00      	cmp	r3, #0
 800a148:	d007      	beq.n	800a15a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a14e:	f043 0220 	orr.w	r2, r3, #32
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800a156:	2303      	movs	r3, #3
 800a158:	e032      	b.n	800a1c0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a15a:	4b1b      	ldr	r3, [pc, #108]	@ (800a1c8 <SPI_EndRxTxTransaction+0xa0>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a1b      	ldr	r2, [pc, #108]	@ (800a1cc <SPI_EndRxTxTransaction+0xa4>)
 800a160:	fba2 2303 	umull	r2, r3, r2, r3
 800a164:	0d5b      	lsrs	r3, r3, #21
 800a166:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a16a:	fb02 f303 	mul.w	r3, r2, r3
 800a16e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a178:	d112      	bne.n	800a1a0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2200      	movs	r2, #0
 800a182:	2180      	movs	r1, #128	@ 0x80
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f7ff fee1 	bl	8009f4c <SPI_WaitFlagStateUntilTimeout>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d016      	beq.n	800a1be <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a194:	f043 0220 	orr.w	r2, r3, #32
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	e00f      	b.n	800a1c0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d00a      	beq.n	800a1bc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	3b01      	subs	r3, #1
 800a1aa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1b6:	2b80      	cmp	r3, #128	@ 0x80
 800a1b8:	d0f2      	beq.n	800a1a0 <SPI_EndRxTxTransaction+0x78>
 800a1ba:	e000      	b.n	800a1be <SPI_EndRxTxTransaction+0x96>
        break;
 800a1bc:	bf00      	nop
  }

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3718      	adds	r7, #24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}
 800a1c8:	20000004 	.word	0x20000004
 800a1cc:	165e9f81 	.word	0x165e9f81

0800a1d0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a1d0:	b084      	sub	sp, #16
 800a1d2:	b480      	push	{r7}
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	f107 001c 	add.w	r0, r7, #28
 800a1de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a1e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a1ea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a1ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a1f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a1f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a1f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a1fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a20a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	431a      	orrs	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	b004      	add	sp, #16
 800a224:	4770      	bx	lr

0800a226 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a226:	b480      	push	{r7}
 800a228:	b083      	sub	sp, #12
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a234:	4618      	mov	r0, r3
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr

0800a262 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a262:	b480      	push	{r7}
 800a264:	b083      	sub	sp, #12
 800a266:	af00      	add	r7, sp, #0
 800a268:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2203      	movs	r2, #3
 800a26e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	370c      	adds	r7, #12
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr

0800a27e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a27e:	b480      	push	{r7}
 800a280:	b083      	sub	sp, #12
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 0303 	and.w	r3, r3, #3
}
 800a28e:	4618      	mov	r0, r3
 800a290:	370c      	adds	r7, #12
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr

0800a29a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b085      	sub	sp, #20
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2b8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a2be:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a2c4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a2c6:	68fa      	ldr	r2, [r7, #12]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a2d4:	f023 030f 	bic.w	r3, r3, #15
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	431a      	orrs	r2, r3
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3714      	adds	r7, #20
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	b2db      	uxtb	r3, r3
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	3314      	adds	r3, #20
 800a316:	461a      	mov	r2, r3
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	4413      	add	r3, r2
 800a31c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
}  
 800a322:	4618      	mov	r0, r3
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr

0800a32e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a32e:	b480      	push	{r7}
 800a330:	b085      	sub	sp, #20
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a338:	2300      	movs	r3, #0
 800a33a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	685a      	ldr	r2, [r3, #4]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a354:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a35a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a360:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	4313      	orrs	r3, r2
 800a366:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a36c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	431a      	orrs	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a378:	2300      	movs	r3, #0

}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b088      	sub	sp, #32
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a394:	2310      	movs	r3, #16
 800a396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a398:	2340      	movs	r3, #64	@ 0x40
 800a39a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a39c:	2300      	movs	r3, #0
 800a39e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3a6:	f107 0308 	add.w	r3, r7, #8
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff ff74 	bl	800a29a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a3b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3b6:	2110      	movs	r1, #16
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f9d7 	bl	800a76c <SDMMC_GetCmdResp1>
 800a3be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3c0:	69fb      	ldr	r3, [r7, #28]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3720      	adds	r7, #32
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b088      	sub	sp, #32
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a3d8:	2311      	movs	r3, #17
 800a3da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3dc:	2340      	movs	r3, #64	@ 0x40
 800a3de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3ea:	f107 0308 	add.w	r3, r7, #8
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f7ff ff52 	bl	800a29a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a3f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3fa:	2111      	movs	r1, #17
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f9b5 	bl	800a76c <SDMMC_GetCmdResp1>
 800a402:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a404:	69fb      	ldr	r3, [r7, #28]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3720      	adds	r7, #32
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}

0800a40e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a40e:	b580      	push	{r7, lr}
 800a410:	b088      	sub	sp, #32
 800a412:	af00      	add	r7, sp, #0
 800a414:	6078      	str	r0, [r7, #4]
 800a416:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a41c:	2312      	movs	r3, #18
 800a41e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a420:	2340      	movs	r3, #64	@ 0x40
 800a422:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a424:	2300      	movs	r3, #0
 800a426:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a428:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a42c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a42e:	f107 0308 	add.w	r3, r7, #8
 800a432:	4619      	mov	r1, r3
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f7ff ff30 	bl	800a29a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a43a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a43e:	2112      	movs	r1, #18
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f993 	bl	800a76c <SDMMC_GetCmdResp1>
 800a446:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a448:	69fb      	ldr	r3, [r7, #28]
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3720      	adds	r7, #32
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b088      	sub	sp, #32
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
 800a45a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a460:	2318      	movs	r3, #24
 800a462:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a464:	2340      	movs	r3, #64	@ 0x40
 800a466:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a468:	2300      	movs	r3, #0
 800a46a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a46c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a470:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a472:	f107 0308 	add.w	r3, r7, #8
 800a476:	4619      	mov	r1, r3
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f7ff ff0e 	bl	800a29a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a47e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a482:	2118      	movs	r1, #24
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 f971 	bl	800a76c <SDMMC_GetCmdResp1>
 800a48a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a48c:	69fb      	ldr	r3, [r7, #28]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3720      	adds	r7, #32
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b088      	sub	sp, #32
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a4a4:	2319      	movs	r3, #25
 800a4a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4a8:	2340      	movs	r3, #64	@ 0x40
 800a4aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4b6:	f107 0308 	add.w	r3, r7, #8
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f7ff feec 	bl	800a29a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a4c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4c6:	2119      	movs	r1, #25
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f94f 	bl	800a76c <SDMMC_GetCmdResp1>
 800a4ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4d0:	69fb      	ldr	r3, [r7, #28]
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3720      	adds	r7, #32
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
	...

0800a4dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b088      	sub	sp, #32
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a4e8:	230c      	movs	r3, #12
 800a4ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4ec:	2340      	movs	r3, #64	@ 0x40
 800a4ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4fa:	f107 0308 	add.w	r3, r7, #8
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f7ff feca 	bl	800a29a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a506:	4a05      	ldr	r2, [pc, #20]	@ (800a51c <SDMMC_CmdStopTransfer+0x40>)
 800a508:	210c      	movs	r1, #12
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f000 f92e 	bl	800a76c <SDMMC_GetCmdResp1>
 800a510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a512:	69fb      	ldr	r3, [r7, #28]
}
 800a514:	4618      	mov	r0, r3
 800a516:	3720      	adds	r7, #32
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	05f5e100 	.word	0x05f5e100

0800a520 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b08a      	sub	sp, #40	@ 0x28
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a530:	2307      	movs	r3, #7
 800a532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a534:	2340      	movs	r3, #64	@ 0x40
 800a536:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a538:	2300      	movs	r3, #0
 800a53a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a53c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a540:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a542:	f107 0310 	add.w	r3, r7, #16
 800a546:	4619      	mov	r1, r3
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f7ff fea6 	bl	800a29a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a54e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a552:	2107      	movs	r1, #7
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 f909 	bl	800a76c <SDMMC_GetCmdResp1>
 800a55a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3728      	adds	r7, #40	@ 0x28
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b088      	sub	sp, #32
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a56e:	2300      	movs	r3, #0
 800a570:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a572:	2300      	movs	r3, #0
 800a574:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a576:	2300      	movs	r3, #0
 800a578:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a57a:	2300      	movs	r3, #0
 800a57c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a57e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a582:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a584:	f107 0308 	add.w	r3, r7, #8
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7ff fe85 	bl	800a29a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fb23 	bl	800abdc <SDMMC_GetCmdError>
 800a596:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a598:	69fb      	ldr	r3, [r7, #28]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3720      	adds	r7, #32
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b088      	sub	sp, #32
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a5aa:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a5ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a5b0:	2308      	movs	r3, #8
 800a5b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5b4:	2340      	movs	r3, #64	@ 0x40
 800a5b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5c2:	f107 0308 	add.w	r3, r7, #8
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff fe66 	bl	800a29a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fab6 	bl	800ab40 <SDMMC_GetCmdResp7>
 800a5d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5d6:	69fb      	ldr	r3, [r7, #28]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3720      	adds	r7, #32
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b088      	sub	sp, #32
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a5ee:	2337      	movs	r3, #55	@ 0x37
 800a5f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5f2:	2340      	movs	r3, #64	@ 0x40
 800a5f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a600:	f107 0308 	add.w	r3, r7, #8
 800a604:	4619      	mov	r1, r3
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f7ff fe47 	bl	800a29a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a60c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a610:	2137      	movs	r1, #55	@ 0x37
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f000 f8aa 	bl	800a76c <SDMMC_GetCmdResp1>
 800a618:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a61a:	69fb      	ldr	r3, [r7, #28]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3720      	adds	r7, #32
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b088      	sub	sp, #32
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a638:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a63a:	2329      	movs	r3, #41	@ 0x29
 800a63c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a63e:	2340      	movs	r3, #64	@ 0x40
 800a640:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a642:	2300      	movs	r3, #0
 800a644:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a64a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a64c:	f107 0308 	add.w	r3, r7, #8
 800a650:	4619      	mov	r1, r3
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7ff fe21 	bl	800a29a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 f9bd 	bl	800a9d8 <SDMMC_GetCmdResp3>
 800a65e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a660:	69fb      	ldr	r3, [r7, #28]
}
 800a662:	4618      	mov	r0, r3
 800a664:	3720      	adds	r7, #32
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b088      	sub	sp, #32
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a672:	2300      	movs	r3, #0
 800a674:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a676:	2302      	movs	r3, #2
 800a678:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a67a:	23c0      	movs	r3, #192	@ 0xc0
 800a67c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a67e:	2300      	movs	r3, #0
 800a680:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a682:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a686:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a688:	f107 0308 	add.w	r3, r7, #8
 800a68c:	4619      	mov	r1, r3
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f7ff fe03 	bl	800a29a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f957 	bl	800a948 <SDMMC_GetCmdResp2>
 800a69a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a69c:	69fb      	ldr	r3, [r7, #28]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3720      	adds	r7, #32
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}

0800a6a6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a6a6:	b580      	push	{r7, lr}
 800a6a8:	b088      	sub	sp, #32
 800a6aa:	af00      	add	r7, sp, #0
 800a6ac:	6078      	str	r0, [r7, #4]
 800a6ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a6b4:	2309      	movs	r3, #9
 800a6b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a6b8:	23c0      	movs	r3, #192	@ 0xc0
 800a6ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6c6:	f107 0308 	add.w	r3, r7, #8
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f7ff fde4 	bl	800a29a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f938 	bl	800a948 <SDMMC_GetCmdResp2>
 800a6d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6da:	69fb      	ldr	r3, [r7, #28]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3720      	adds	r7, #32
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b088      	sub	sp, #32
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a6f2:	2303      	movs	r3, #3
 800a6f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6f6:	2340      	movs	r3, #64	@ 0x40
 800a6f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a702:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a704:	f107 0308 	add.w	r3, r7, #8
 800a708:	4619      	mov	r1, r3
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	f7ff fdc5 	bl	800a29a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a710:	683a      	ldr	r2, [r7, #0]
 800a712:	2103      	movs	r1, #3
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f99d 	bl	800aa54 <SDMMC_GetCmdResp6>
 800a71a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a71c:	69fb      	ldr	r3, [r7, #28]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3720      	adds	r7, #32
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b088      	sub	sp, #32
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a734:	230d      	movs	r3, #13
 800a736:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a738:	2340      	movs	r3, #64	@ 0x40
 800a73a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a73c:	2300      	movs	r3, #0
 800a73e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a740:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a744:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a746:	f107 0308 	add.w	r3, r7, #8
 800a74a:	4619      	mov	r1, r3
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f7ff fda4 	bl	800a29a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a752:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a756:	210d      	movs	r1, #13
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f807 	bl	800a76c <SDMMC_GetCmdResp1>
 800a75e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a760:	69fb      	ldr	r3, [r7, #28]
}
 800a762:	4618      	mov	r0, r3
 800a764:	3720      	adds	r7, #32
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
	...

0800a76c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b088      	sub	sp, #32
 800a770:	af00      	add	r7, sp, #0
 800a772:	60f8      	str	r0, [r7, #12]
 800a774:	460b      	mov	r3, r1
 800a776:	607a      	str	r2, [r7, #4]
 800a778:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a77a:	4b70      	ldr	r3, [pc, #448]	@ (800a93c <SDMMC_GetCmdResp1+0x1d0>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a70      	ldr	r2, [pc, #448]	@ (800a940 <SDMMC_GetCmdResp1+0x1d4>)
 800a780:	fba2 2303 	umull	r2, r3, r2, r3
 800a784:	0a5a      	lsrs	r2, r3, #9
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	fb02 f303 	mul.w	r3, r2, r3
 800a78c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	1e5a      	subs	r2, r3, #1
 800a792:	61fa      	str	r2, [r7, #28]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d102      	bne.n	800a79e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a798:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a79c:	e0c9      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7a2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a7a4:	69bb      	ldr	r3, [r7, #24]
 800a7a6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d0ef      	beq.n	800a78e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d1ea      	bne.n	800a78e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7bc:	f003 0304 	and.w	r3, r3, #4
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d004      	beq.n	800a7ce <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2204      	movs	r2, #4
 800a7c8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7ca:	2304      	movs	r3, #4
 800a7cc:	e0b1      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7d2:	f003 0301 	and.w	r3, r3, #1
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d004      	beq.n	800a7e4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2201      	movs	r2, #1
 800a7de:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	e0a6      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	22c5      	movs	r2, #197	@ 0xc5
 800a7e8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a7ea:	68f8      	ldr	r0, [r7, #12]
 800a7ec:	f7ff fd7f 	bl	800a2ee <SDIO_GetCommandResponse>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	7afb      	ldrb	r3, [r7, #11]
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d001      	beq.n	800a7fe <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e099      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a7fe:	2100      	movs	r1, #0
 800a800:	68f8      	ldr	r0, [r7, #12]
 800a802:	f7ff fd81 	bl	800a308 <SDIO_GetResponse>
 800a806:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a808:	697a      	ldr	r2, [r7, #20]
 800a80a:	4b4e      	ldr	r3, [pc, #312]	@ (800a944 <SDMMC_GetCmdResp1+0x1d8>)
 800a80c:	4013      	ands	r3, r2
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d101      	bne.n	800a816 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a812:	2300      	movs	r3, #0
 800a814:	e08d      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	da02      	bge.n	800a822 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a81c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a820:	e087      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a82c:	2340      	movs	r3, #64	@ 0x40
 800a82e:	e080      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a836:	2b00      	cmp	r3, #0
 800a838:	d001      	beq.n	800a83e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a83a:	2380      	movs	r3, #128	@ 0x80
 800a83c:	e079      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a848:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a84c:	e071      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a854:	2b00      	cmp	r3, #0
 800a856:	d002      	beq.n	800a85e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a858:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a85c:	e069      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d002      	beq.n	800a86e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a868:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a86c:	e061      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a874:	2b00      	cmp	r3, #0
 800a876:	d002      	beq.n	800a87e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a878:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a87c:	e059      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d002      	beq.n	800a88e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a888:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a88c:	e051      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a88e:	697b      	ldr	r3, [r7, #20]
 800a890:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a894:	2b00      	cmp	r3, #0
 800a896:	d002      	beq.n	800a89e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a898:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a89c:	e049      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a8a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a8ac:	e041      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a8b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8bc:	e039      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d002      	beq.n	800a8ce <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a8c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a8cc:	e031      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a8d8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a8dc:	e029      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a8e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a8ec:	e021      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d002      	beq.n	800a8fe <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a8f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a8fc:	e019      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a908:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a90c:	e011      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a914:	2b00      	cmp	r3, #0
 800a916:	d002      	beq.n	800a91e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a918:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a91c:	e009      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f003 0308 	and.w	r3, r3, #8
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a928:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a92c:	e001      	b.n	800a932 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a92e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a932:	4618      	mov	r0, r3
 800a934:	3720      	adds	r7, #32
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	20000004 	.word	0x20000004
 800a940:	10624dd3 	.word	0x10624dd3
 800a944:	fdffe008 	.word	0xfdffe008

0800a948 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a950:	4b1f      	ldr	r3, [pc, #124]	@ (800a9d0 <SDMMC_GetCmdResp2+0x88>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a1f      	ldr	r2, [pc, #124]	@ (800a9d4 <SDMMC_GetCmdResp2+0x8c>)
 800a956:	fba2 2303 	umull	r2, r3, r2, r3
 800a95a:	0a5b      	lsrs	r3, r3, #9
 800a95c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a960:	fb02 f303 	mul.w	r3, r2, r3
 800a964:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	1e5a      	subs	r2, r3, #1
 800a96a:	60fa      	str	r2, [r7, #12]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d102      	bne.n	800a976 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a970:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a974:	e026      	b.n	800a9c4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a97a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a982:	2b00      	cmp	r3, #0
 800a984:	d0ef      	beq.n	800a966 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d1ea      	bne.n	800a966 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a994:	f003 0304 	and.w	r3, r3, #4
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d004      	beq.n	800a9a6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2204      	movs	r2, #4
 800a9a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9a2:	2304      	movs	r3, #4
 800a9a4:	e00e      	b.n	800a9c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9aa:	f003 0301 	and.w	r3, r3, #1
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d004      	beq.n	800a9bc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e003      	b.n	800a9c4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	22c5      	movs	r2, #197	@ 0xc5
 800a9c0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3714      	adds	r7, #20
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	20000004 	.word	0x20000004
 800a9d4:	10624dd3 	.word	0x10624dd3

0800a9d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9e0:	4b1a      	ldr	r3, [pc, #104]	@ (800aa4c <SDMMC_GetCmdResp3+0x74>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a1a      	ldr	r2, [pc, #104]	@ (800aa50 <SDMMC_GetCmdResp3+0x78>)
 800a9e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ea:	0a5b      	lsrs	r3, r3, #9
 800a9ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9f0:	fb02 f303 	mul.w	r3, r2, r3
 800a9f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	1e5a      	subs	r2, r3, #1
 800a9fa:	60fa      	str	r2, [r7, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d102      	bne.n	800aa06 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa00:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa04:	e01b      	b.n	800aa3e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa0a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d0ef      	beq.n	800a9f6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1ea      	bne.n	800a9f6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa24:	f003 0304 	and.w	r3, r3, #4
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d004      	beq.n	800aa36 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2204      	movs	r2, #4
 800aa30:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa32:	2304      	movs	r3, #4
 800aa34:	e003      	b.n	800aa3e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	22c5      	movs	r2, #197	@ 0xc5
 800aa3a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	20000004 	.word	0x20000004
 800aa50:	10624dd3 	.word	0x10624dd3

0800aa54 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b088      	sub	sp, #32
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	460b      	mov	r3, r1
 800aa5e:	607a      	str	r2, [r7, #4]
 800aa60:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa62:	4b35      	ldr	r3, [pc, #212]	@ (800ab38 <SDMMC_GetCmdResp6+0xe4>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a35      	ldr	r2, [pc, #212]	@ (800ab3c <SDMMC_GetCmdResp6+0xe8>)
 800aa68:	fba2 2303 	umull	r2, r3, r2, r3
 800aa6c:	0a5b      	lsrs	r3, r3, #9
 800aa6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa72:	fb02 f303 	mul.w	r3, r2, r3
 800aa76:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	1e5a      	subs	r2, r3, #1
 800aa7c:	61fa      	str	r2, [r7, #28]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d102      	bne.n	800aa88 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa82:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa86:	e052      	b.n	800ab2e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa8c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa8e:	69bb      	ldr	r3, [r7, #24]
 800aa90:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d0ef      	beq.n	800aa78 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1ea      	bne.n	800aa78 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaa6:	f003 0304 	and.w	r3, r3, #4
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d004      	beq.n	800aab8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2204      	movs	r2, #4
 800aab2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aab4:	2304      	movs	r3, #4
 800aab6:	e03a      	b.n	800ab2e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aabc:	f003 0301 	and.w	r3, r3, #1
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d004      	beq.n	800aace <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2201      	movs	r2, #1
 800aac8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aaca:	2301      	movs	r3, #1
 800aacc:	e02f      	b.n	800ab2e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f7ff fc0d 	bl	800a2ee <SDIO_GetCommandResponse>
 800aad4:	4603      	mov	r3, r0
 800aad6:	461a      	mov	r2, r3
 800aad8:	7afb      	ldrb	r3, [r7, #11]
 800aada:	4293      	cmp	r3, r2
 800aadc:	d001      	beq.n	800aae2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aade:	2301      	movs	r3, #1
 800aae0:	e025      	b.n	800ab2e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	22c5      	movs	r2, #197	@ 0xc5
 800aae6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800aae8:	2100      	movs	r1, #0
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f7ff fc0c 	bl	800a308 <SDIO_GetResponse>
 800aaf0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d106      	bne.n	800ab0a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	0c1b      	lsrs	r3, r3, #16
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ab06:	2300      	movs	r3, #0
 800ab08:	e011      	b.n	800ab2e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d002      	beq.n	800ab1a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab18:	e009      	b.n	800ab2e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d002      	beq.n	800ab2a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab28:	e001      	b.n	800ab2e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ab2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3720      	adds	r7, #32
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}
 800ab36:	bf00      	nop
 800ab38:	20000004 	.word	0x20000004
 800ab3c:	10624dd3 	.word	0x10624dd3

0800ab40 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b085      	sub	sp, #20
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab48:	4b22      	ldr	r3, [pc, #136]	@ (800abd4 <SDMMC_GetCmdResp7+0x94>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a22      	ldr	r2, [pc, #136]	@ (800abd8 <SDMMC_GetCmdResp7+0x98>)
 800ab4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab52:	0a5b      	lsrs	r3, r3, #9
 800ab54:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ab58:	fb02 f303 	mul.w	r3, r2, r3
 800ab5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	1e5a      	subs	r2, r3, #1
 800ab62:	60fa      	str	r2, [r7, #12]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d102      	bne.n	800ab6e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab68:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ab6c:	e02c      	b.n	800abc8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d0ef      	beq.n	800ab5e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1ea      	bne.n	800ab5e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab8c:	f003 0304 	and.w	r3, r3, #4
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d004      	beq.n	800ab9e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2204      	movs	r2, #4
 800ab98:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab9a:	2304      	movs	r3, #4
 800ab9c:	e014      	b.n	800abc8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d004      	beq.n	800abb4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2201      	movs	r2, #1
 800abae:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800abb0:	2301      	movs	r3, #1
 800abb2:	e009      	b.n	800abc8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d002      	beq.n	800abc6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2240      	movs	r2, #64	@ 0x40
 800abc4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800abc6:	2300      	movs	r3, #0
  
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr
 800abd4:	20000004 	.word	0x20000004
 800abd8:	10624dd3 	.word	0x10624dd3

0800abdc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800abdc:	b480      	push	{r7}
 800abde:	b085      	sub	sp, #20
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abe4:	4b11      	ldr	r3, [pc, #68]	@ (800ac2c <SDMMC_GetCmdError+0x50>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a11      	ldr	r2, [pc, #68]	@ (800ac30 <SDMMC_GetCmdError+0x54>)
 800abea:	fba2 2303 	umull	r2, r3, r2, r3
 800abee:	0a5b      	lsrs	r3, r3, #9
 800abf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abf4:	fb02 f303 	mul.w	r3, r2, r3
 800abf8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	1e5a      	subs	r2, r3, #1
 800abfe:	60fa      	str	r2, [r7, #12]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d102      	bne.n	800ac0a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac04:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac08:	e009      	b.n	800ac1e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d0f1      	beq.n	800abfa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	22c5      	movs	r2, #197	@ 0xc5
 800ac1a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ac1c:	2300      	movs	r3, #0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3714      	adds	r7, #20
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	20000004 	.word	0x20000004
 800ac30:	10624dd3 	.word	0x10624dd3

0800ac34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ac38:	4904      	ldr	r1, [pc, #16]	@ (800ac4c <MX_FATFS_Init+0x18>)
 800ac3a:	4805      	ldr	r0, [pc, #20]	@ (800ac50 <MX_FATFS_Init+0x1c>)
 800ac3c:	f002 fb38 	bl	800d2b0 <FATFS_LinkDriver>
 800ac40:	4603      	mov	r3, r0
 800ac42:	461a      	mov	r2, r3
 800ac44:	4b03      	ldr	r3, [pc, #12]	@ (800ac54 <MX_FATFS_Init+0x20>)
 800ac46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ac48:	bf00      	nop
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	20000754 	.word	0x20000754
 800ac50:	0800e030 	.word	0x0800e030
 800ac54:	20000750 	.word	0x20000750

0800ac58 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ac5c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ac72:	f000 f89e 	bl	800adb2 <BSP_SD_IsDetected>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d001      	beq.n	800ac80 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	e005      	b.n	800ac8c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ac80:	4804      	ldr	r0, [pc, #16]	@ (800ac94 <BSP_SD_Init+0x2c>)
 800ac82:	f7fd fa9f 	bl	80081c4 <HAL_SD_Init>
 800ac86:	4603      	mov	r3, r0
 800ac88:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ac8a:	79fb      	ldrb	r3, [r7, #7]
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3708      	adds	r7, #8
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	20000600 	.word	0x20000600

0800ac98 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b088      	sub	sp, #32
 800ac9c:	af02      	add	r7, sp, #8
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
 800aca4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800aca6:	2300      	movs	r3, #0
 800aca8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	68f9      	ldr	r1, [r7, #12]
 800acb4:	4806      	ldr	r0, [pc, #24]	@ (800acd0 <BSP_SD_ReadBlocks+0x38>)
 800acb6:	f7fd fb2d 	bl	8008314 <HAL_SD_ReadBlocks>
 800acba:	4603      	mov	r3, r0
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d001      	beq.n	800acc4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800acc0:	2301      	movs	r3, #1
 800acc2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800acc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	20000600 	.word	0x20000600

0800acd4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b088      	sub	sp, #32
 800acd8:	af02      	add	r7, sp, #8
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
 800ace0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ace2:	2300      	movs	r3, #0
 800ace4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	68ba      	ldr	r2, [r7, #8]
 800acee:	68f9      	ldr	r1, [r7, #12]
 800acf0:	4806      	ldr	r0, [pc, #24]	@ (800ad0c <BSP_SD_WriteBlocks+0x38>)
 800acf2:	f7fd fcf5 	bl	80086e0 <HAL_SD_WriteBlocks>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d001      	beq.n	800ad00 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ad00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3718      	adds	r7, #24
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20000600 	.word	0x20000600

0800ad10 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ad14:	4805      	ldr	r0, [pc, #20]	@ (800ad2c <BSP_SD_GetCardState+0x1c>)
 800ad16:	f7fe f9d1 	bl	80090bc <HAL_SD_GetCardState>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b04      	cmp	r3, #4
 800ad1e:	bf14      	ite	ne
 800ad20:	2301      	movne	r3, #1
 800ad22:	2300      	moveq	r3, #0
 800ad24:	b2db      	uxtb	r3, r3
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	20000600 	.word	0x20000600

0800ad30 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ad38:	6879      	ldr	r1, [r7, #4]
 800ad3a:	4803      	ldr	r0, [pc, #12]	@ (800ad48 <BSP_SD_GetCardInfo+0x18>)
 800ad3c:	f7fe f992 	bl	8009064 <HAL_SD_GetCardInfo>
}
 800ad40:	bf00      	nop
 800ad42:	3708      	adds	r7, #8
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	20000600 	.word	0x20000600

0800ad4c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800ad54:	f000 f818 	bl	800ad88 <BSP_SD_AbortCallback>
}
 800ad58:	bf00      	nop
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ad68:	f000 f815 	bl	800ad96 <BSP_SD_WriteCpltCallback>
}
 800ad6c:	bf00      	nop
 800ad6e:	3708      	adds	r7, #8
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ad7c:	f000 f812 	bl	800ada4 <BSP_SD_ReadCpltCallback>
}
 800ad80:	bf00      	nop
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	af00      	add	r7, sp, #0

}
 800ad8c:	bf00      	nop
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr

0800ad96 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800ad96:	b480      	push	{r7}
 800ad98:	af00      	add	r7, sp, #0

}
 800ad9a:	bf00      	nop
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800ada4:	b480      	push	{r7}
 800ada6:	af00      	add	r7, sp, #0

}
 800ada8:	bf00      	nop
 800adaa:	46bd      	mov	sp, r7
 800adac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb0:	4770      	bx	lr

0800adb2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800adb2:	b580      	push	{r7, lr}
 800adb4:	b082      	sub	sp, #8
 800adb6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800adb8:	2301      	movs	r3, #1
 800adba:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800adbc:	f000 f80c 	bl	800add8 <BSP_PlatformIsDetected>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d101      	bne.n	800adca <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800adc6:	2300      	movs	r3, #0
 800adc8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800adca:	79fb      	ldrb	r3, [r7, #7]
 800adcc:	b2db      	uxtb	r3, r3
}
 800adce:	4618      	mov	r0, r3
 800add0:	3708      	adds	r7, #8
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
	...

0800add8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800adde:	2301      	movs	r3, #1
 800ade0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ade2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ade6:	4806      	ldr	r0, [pc, #24]	@ (800ae00 <BSP_PlatformIsDetected+0x28>)
 800ade8:	f7fa f92c 	bl	8005044 <HAL_GPIO_ReadPin>
 800adec:	4603      	mov	r3, r0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d001      	beq.n	800adf6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800adf2:	2300      	movs	r3, #0
 800adf4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800adf6:	79fb      	ldrb	r3, [r7, #7]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	40020800 	.word	0x40020800

0800ae04 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ae0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ae3c <SD_CheckStatus+0x38>)
 800ae10:	2201      	movs	r2, #1
 800ae12:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ae14:	f7ff ff7c 	bl	800ad10 <BSP_SD_GetCardState>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d107      	bne.n	800ae2e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ae1e:	4b07      	ldr	r3, [pc, #28]	@ (800ae3c <SD_CheckStatus+0x38>)
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	b2db      	uxtb	r3, r3
 800ae24:	f023 0301 	bic.w	r3, r3, #1
 800ae28:	b2da      	uxtb	r2, r3
 800ae2a:	4b04      	ldr	r3, [pc, #16]	@ (800ae3c <SD_CheckStatus+0x38>)
 800ae2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ae2e:	4b03      	ldr	r3, [pc, #12]	@ (800ae3c <SD_CheckStatus+0x38>)
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	b2db      	uxtb	r3, r3
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3708      	adds	r7, #8
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	2000000d 	.word	0x2000000d

0800ae40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	4603      	mov	r3, r0
 800ae48:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800ae4a:	4b0b      	ldr	r3, [pc, #44]	@ (800ae78 <SD_initialize+0x38>)
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ae50:	f7ff ff0a 	bl	800ac68 <BSP_SD_Init>
 800ae54:	4603      	mov	r3, r0
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d107      	bne.n	800ae6a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800ae5a:	79fb      	ldrb	r3, [r7, #7]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7ff ffd1 	bl	800ae04 <SD_CheckStatus>
 800ae62:	4603      	mov	r3, r0
 800ae64:	461a      	mov	r2, r3
 800ae66:	4b04      	ldr	r3, [pc, #16]	@ (800ae78 <SD_initialize+0x38>)
 800ae68:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ae6a:	4b03      	ldr	r3, [pc, #12]	@ (800ae78 <SD_initialize+0x38>)
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	b2db      	uxtb	r3, r3
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	2000000d 	.word	0x2000000d

0800ae7c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	4603      	mov	r3, r0
 800ae84:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800ae86:	79fb      	ldrb	r3, [r7, #7]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7ff ffbb 	bl	800ae04 <SD_CheckStatus>
 800ae8e:	4603      	mov	r3, r0
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3708      	adds	r7, #8
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b086      	sub	sp, #24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60b9      	str	r1, [r7, #8]
 800aea0:	607a      	str	r2, [r7, #4]
 800aea2:	603b      	str	r3, [r7, #0]
 800aea4:	4603      	mov	r3, r0
 800aea6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800aeac:	f04f 33ff 	mov.w	r3, #4294967295
 800aeb0:	683a      	ldr	r2, [r7, #0]
 800aeb2:	6879      	ldr	r1, [r7, #4]
 800aeb4:	68b8      	ldr	r0, [r7, #8]
 800aeb6:	f7ff feef 	bl	800ac98 <BSP_SD_ReadBlocks>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d107      	bne.n	800aed0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800aec0:	bf00      	nop
 800aec2:	f7ff ff25 	bl	800ad10 <BSP_SD_GetCardState>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d1fa      	bne.n	800aec2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800aecc:	2300      	movs	r3, #0
 800aece:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800aed0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	3718      	adds	r7, #24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b086      	sub	sp, #24
 800aede:	af00      	add	r7, sp, #0
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
 800aee4:	603b      	str	r3, [r7, #0]
 800aee6:	4603      	mov	r3, r0
 800aee8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800aeee:	f04f 33ff 	mov.w	r3, #4294967295
 800aef2:	683a      	ldr	r2, [r7, #0]
 800aef4:	6879      	ldr	r1, [r7, #4]
 800aef6:	68b8      	ldr	r0, [r7, #8]
 800aef8:	f7ff feec 	bl	800acd4 <BSP_SD_WriteBlocks>
 800aefc:	4603      	mov	r3, r0
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d107      	bne.n	800af12 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800af02:	bf00      	nop
 800af04:	f7ff ff04 	bl	800ad10 <BSP_SD_GetCardState>
 800af08:	4603      	mov	r3, r0
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1fa      	bne.n	800af04 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800af12:	7dfb      	ldrb	r3, [r7, #23]
}
 800af14:	4618      	mov	r0, r3
 800af16:	3718      	adds	r7, #24
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b08c      	sub	sp, #48	@ 0x30
 800af20:	af00      	add	r7, sp, #0
 800af22:	4603      	mov	r3, r0
 800af24:	603a      	str	r2, [r7, #0]
 800af26:	71fb      	strb	r3, [r7, #7]
 800af28:	460b      	mov	r3, r1
 800af2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800af32:	4b25      	ldr	r3, [pc, #148]	@ (800afc8 <SD_ioctl+0xac>)
 800af34:	781b      	ldrb	r3, [r3, #0]
 800af36:	b2db      	uxtb	r3, r3
 800af38:	f003 0301 	and.w	r3, r3, #1
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <SD_ioctl+0x28>
 800af40:	2303      	movs	r3, #3
 800af42:	e03c      	b.n	800afbe <SD_ioctl+0xa2>

  switch (cmd)
 800af44:	79bb      	ldrb	r3, [r7, #6]
 800af46:	2b03      	cmp	r3, #3
 800af48:	d834      	bhi.n	800afb4 <SD_ioctl+0x98>
 800af4a:	a201      	add	r2, pc, #4	@ (adr r2, 800af50 <SD_ioctl+0x34>)
 800af4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af50:	0800af61 	.word	0x0800af61
 800af54:	0800af69 	.word	0x0800af69
 800af58:	0800af81 	.word	0x0800af81
 800af5c:	0800af9b 	.word	0x0800af9b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800af60:	2300      	movs	r3, #0
 800af62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800af66:	e028      	b.n	800afba <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800af68:	f107 030c 	add.w	r3, r7, #12
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7ff fedf 	bl	800ad30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800af72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800af78:	2300      	movs	r3, #0
 800af7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800af7e:	e01c      	b.n	800afba <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800af80:	f107 030c 	add.w	r3, r7, #12
 800af84:	4618      	mov	r0, r3
 800af86:	f7ff fed3 	bl	800ad30 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800af8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800af92:	2300      	movs	r3, #0
 800af94:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800af98:	e00f      	b.n	800afba <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800af9a:	f107 030c 	add.w	r3, r7, #12
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7ff fec6 	bl	800ad30 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800afa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afa6:	0a5a      	lsrs	r2, r3, #9
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800afb2:	e002      	b.n	800afba <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800afb4:	2304      	movs	r3, #4
 800afb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800afba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3730      	adds	r7, #48	@ 0x30
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
 800afc6:	bf00      	nop
 800afc8:	2000000d 	.word	0x2000000d

0800afcc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b084      	sub	sp, #16
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	4603      	mov	r3, r0
 800afd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800afd6:	79fb      	ldrb	r3, [r7, #7]
 800afd8:	4a08      	ldr	r2, [pc, #32]	@ (800affc <disk_status+0x30>)
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4413      	add	r3, r2
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	79fa      	ldrb	r2, [r7, #7]
 800afe4:	4905      	ldr	r1, [pc, #20]	@ (800affc <disk_status+0x30>)
 800afe6:	440a      	add	r2, r1
 800afe8:	7a12      	ldrb	r2, [r2, #8]
 800afea:	4610      	mov	r0, r2
 800afec:	4798      	blx	r3
 800afee:	4603      	mov	r3, r0
 800aff0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800aff2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	20000324 	.word	0x20000324

0800b000 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	4603      	mov	r3, r0
 800b008:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b00a:	2300      	movs	r3, #0
 800b00c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b00e:	79fb      	ldrb	r3, [r7, #7]
 800b010:	4a0e      	ldr	r2, [pc, #56]	@ (800b04c <disk_initialize+0x4c>)
 800b012:	5cd3      	ldrb	r3, [r2, r3]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d114      	bne.n	800b042 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b018:	79fb      	ldrb	r3, [r7, #7]
 800b01a:	4a0c      	ldr	r2, [pc, #48]	@ (800b04c <disk_initialize+0x4c>)
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	4413      	add	r3, r2
 800b020:	685b      	ldr	r3, [r3, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	79fa      	ldrb	r2, [r7, #7]
 800b026:	4909      	ldr	r1, [pc, #36]	@ (800b04c <disk_initialize+0x4c>)
 800b028:	440a      	add	r2, r1
 800b02a:	7a12      	ldrb	r2, [r2, #8]
 800b02c:	4610      	mov	r0, r2
 800b02e:	4798      	blx	r3
 800b030:	4603      	mov	r3, r0
 800b032:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b034:	7bfb      	ldrb	r3, [r7, #15]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d103      	bne.n	800b042 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b03a:	79fb      	ldrb	r3, [r7, #7]
 800b03c:	4a03      	ldr	r2, [pc, #12]	@ (800b04c <disk_initialize+0x4c>)
 800b03e:	2101      	movs	r1, #1
 800b040:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b042:	7bfb      	ldrb	r3, [r7, #15]
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	20000324 	.word	0x20000324

0800b050 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b050:	b590      	push	{r4, r7, lr}
 800b052:	b087      	sub	sp, #28
 800b054:	af00      	add	r7, sp, #0
 800b056:	60b9      	str	r1, [r7, #8]
 800b058:	607a      	str	r2, [r7, #4]
 800b05a:	603b      	str	r3, [r7, #0]
 800b05c:	4603      	mov	r3, r0
 800b05e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	4a0a      	ldr	r2, [pc, #40]	@ (800b08c <disk_read+0x3c>)
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	4413      	add	r3, r2
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	689c      	ldr	r4, [r3, #8]
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
 800b06e:	4a07      	ldr	r2, [pc, #28]	@ (800b08c <disk_read+0x3c>)
 800b070:	4413      	add	r3, r2
 800b072:	7a18      	ldrb	r0, [r3, #8]
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	68b9      	ldr	r1, [r7, #8]
 800b07a:	47a0      	blx	r4
 800b07c:	4603      	mov	r3, r0
 800b07e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b080:	7dfb      	ldrb	r3, [r7, #23]
}
 800b082:	4618      	mov	r0, r3
 800b084:	371c      	adds	r7, #28
 800b086:	46bd      	mov	sp, r7
 800b088:	bd90      	pop	{r4, r7, pc}
 800b08a:	bf00      	nop
 800b08c:	20000324 	.word	0x20000324

0800b090 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b090:	b590      	push	{r4, r7, lr}
 800b092:	b087      	sub	sp, #28
 800b094:	af00      	add	r7, sp, #0
 800b096:	60b9      	str	r1, [r7, #8]
 800b098:	607a      	str	r2, [r7, #4]
 800b09a:	603b      	str	r3, [r7, #0]
 800b09c:	4603      	mov	r3, r0
 800b09e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
 800b0a2:	4a0a      	ldr	r2, [pc, #40]	@ (800b0cc <disk_write+0x3c>)
 800b0a4:	009b      	lsls	r3, r3, #2
 800b0a6:	4413      	add	r3, r2
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	68dc      	ldr	r4, [r3, #12]
 800b0ac:	7bfb      	ldrb	r3, [r7, #15]
 800b0ae:	4a07      	ldr	r2, [pc, #28]	@ (800b0cc <disk_write+0x3c>)
 800b0b0:	4413      	add	r3, r2
 800b0b2:	7a18      	ldrb	r0, [r3, #8]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	68b9      	ldr	r1, [r7, #8]
 800b0ba:	47a0      	blx	r4
 800b0bc:	4603      	mov	r3, r0
 800b0be:	75fb      	strb	r3, [r7, #23]
  return res;
 800b0c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	371c      	adds	r7, #28
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd90      	pop	{r4, r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	20000324 	.word	0x20000324

0800b0d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	603a      	str	r2, [r7, #0]
 800b0da:	71fb      	strb	r3, [r7, #7]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b0e0:	79fb      	ldrb	r3, [r7, #7]
 800b0e2:	4a09      	ldr	r2, [pc, #36]	@ (800b108 <disk_ioctl+0x38>)
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	691b      	ldr	r3, [r3, #16]
 800b0ec:	79fa      	ldrb	r2, [r7, #7]
 800b0ee:	4906      	ldr	r1, [pc, #24]	@ (800b108 <disk_ioctl+0x38>)
 800b0f0:	440a      	add	r2, r1
 800b0f2:	7a10      	ldrb	r0, [r2, #8]
 800b0f4:	79b9      	ldrb	r1, [r7, #6]
 800b0f6:	683a      	ldr	r2, [r7, #0]
 800b0f8:	4798      	blx	r3
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	73fb      	strb	r3, [r7, #15]
  return res;
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	20000324 	.word	0x20000324

0800b10c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	3301      	adds	r3, #1
 800b118:	781b      	ldrb	r3, [r3, #0]
 800b11a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b11c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b120:	021b      	lsls	r3, r3, #8
 800b122:	b21a      	sxth	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	b21b      	sxth	r3, r3
 800b12a:	4313      	orrs	r3, r2
 800b12c:	b21b      	sxth	r3, r3
 800b12e:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b130:	89fb      	ldrh	r3, [r7, #14]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3714      	adds	r7, #20
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b13e:	b480      	push	{r7}
 800b140:	b085      	sub	sp, #20
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	3303      	adds	r3, #3
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	021b      	lsls	r3, r3, #8
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	3202      	adds	r2, #2
 800b156:	7812      	ldrb	r2, [r2, #0]
 800b158:	4313      	orrs	r3, r2
 800b15a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	021b      	lsls	r3, r3, #8
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	3201      	adds	r2, #1
 800b164:	7812      	ldrb	r2, [r2, #0]
 800b166:	4313      	orrs	r3, r2
 800b168:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	021b      	lsls	r3, r3, #8
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	7812      	ldrb	r2, [r2, #0]
 800b172:	4313      	orrs	r3, r2
 800b174:	60fb      	str	r3, [r7, #12]
	return rv;
 800b176:	68fb      	ldr	r3, [r7, #12]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3714      	adds	r7, #20
 800b17c:	46bd      	mov	sp, r7
 800b17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b182:	4770      	bx	lr

0800b184 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b184:	b480      	push	{r7}
 800b186:	b083      	sub	sp, #12
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	460b      	mov	r3, r1
 800b18e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	1c5a      	adds	r2, r3, #1
 800b194:	607a      	str	r2, [r7, #4]
 800b196:	887a      	ldrh	r2, [r7, #2]
 800b198:	b2d2      	uxtb	r2, r2
 800b19a:	701a      	strb	r2, [r3, #0]
 800b19c:	887b      	ldrh	r3, [r7, #2]
 800b19e:	0a1b      	lsrs	r3, r3, #8
 800b1a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	1c5a      	adds	r2, r3, #1
 800b1a6:	607a      	str	r2, [r7, #4]
 800b1a8:	887a      	ldrh	r2, [r7, #2]
 800b1aa:	b2d2      	uxtb	r2, r2
 800b1ac:	701a      	strb	r2, [r3, #0]
}
 800b1ae:	bf00      	nop
 800b1b0:	370c      	adds	r7, #12
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b083      	sub	sp, #12
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
 800b1c2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	1c5a      	adds	r2, r3, #1
 800b1c8:	607a      	str	r2, [r7, #4]
 800b1ca:	683a      	ldr	r2, [r7, #0]
 800b1cc:	b2d2      	uxtb	r2, r2
 800b1ce:	701a      	strb	r2, [r3, #0]
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	0a1b      	lsrs	r3, r3, #8
 800b1d4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	1c5a      	adds	r2, r3, #1
 800b1da:	607a      	str	r2, [r7, #4]
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	b2d2      	uxtb	r2, r2
 800b1e0:	701a      	strb	r2, [r3, #0]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	0a1b      	lsrs	r3, r3, #8
 800b1e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	607a      	str	r2, [r7, #4]
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	b2d2      	uxtb	r2, r2
 800b1f2:	701a      	strb	r2, [r3, #0]
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	0a1b      	lsrs	r3, r3, #8
 800b1f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	1c5a      	adds	r2, r3, #1
 800b1fe:	607a      	str	r2, [r7, #4]
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	b2d2      	uxtb	r2, r2
 800b204:	701a      	strb	r2, [r3, #0]
}
 800b206:	bf00      	nop
 800b208:	370c      	adds	r7, #12
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr

0800b212 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b212:	b480      	push	{r7}
 800b214:	b087      	sub	sp, #28
 800b216:	af00      	add	r7, sp, #0
 800b218:	60f8      	str	r0, [r7, #12]
 800b21a:	60b9      	str	r1, [r7, #8]
 800b21c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00d      	beq.n	800b248 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b22c:	693a      	ldr	r2, [r7, #16]
 800b22e:	1c53      	adds	r3, r2, #1
 800b230:	613b      	str	r3, [r7, #16]
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	1c59      	adds	r1, r3, #1
 800b236:	6179      	str	r1, [r7, #20]
 800b238:	7812      	ldrb	r2, [r2, #0]
 800b23a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	3b01      	subs	r3, #1
 800b240:	607b      	str	r3, [r7, #4]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d1f1      	bne.n	800b22c <mem_cpy+0x1a>
	}
}
 800b248:	bf00      	nop
 800b24a:	371c      	adds	r7, #28
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b254:	b480      	push	{r7}
 800b256:	b087      	sub	sp, #28
 800b258:	af00      	add	r7, sp, #0
 800b25a:	60f8      	str	r0, [r7, #12]
 800b25c:	60b9      	str	r1, [r7, #8]
 800b25e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	1c5a      	adds	r2, r3, #1
 800b268:	617a      	str	r2, [r7, #20]
 800b26a:	68ba      	ldr	r2, [r7, #8]
 800b26c:	b2d2      	uxtb	r2, r2
 800b26e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3b01      	subs	r3, #1
 800b274:	607b      	str	r3, [r7, #4]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d1f3      	bne.n	800b264 <mem_set+0x10>
}
 800b27c:	bf00      	nop
 800b27e:	bf00      	nop
 800b280:	371c      	adds	r7, #28
 800b282:	46bd      	mov	sp, r7
 800b284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b288:	4770      	bx	lr

0800b28a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b28a:	b480      	push	{r7}
 800b28c:	b089      	sub	sp, #36	@ 0x24
 800b28e:	af00      	add	r7, sp, #0
 800b290:	60f8      	str	r0, [r7, #12]
 800b292:	60b9      	str	r1, [r7, #8]
 800b294:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	61fb      	str	r3, [r7, #28]
 800b29a:	68bb      	ldr	r3, [r7, #8]
 800b29c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	1c5a      	adds	r2, r3, #1
 800b2a6:	61fa      	str	r2, [r7, #28]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	1c5a      	adds	r2, r3, #1
 800b2b0:	61ba      	str	r2, [r7, #24]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	1acb      	subs	r3, r1, r3
 800b2b6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	3b01      	subs	r3, #1
 800b2bc:	607b      	str	r3, [r7, #4]
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <mem_cmp+0x40>
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d0eb      	beq.n	800b2a2 <mem_cmp+0x18>

	return r;
 800b2ca:	697b      	ldr	r3, [r7, #20]
}
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	3724      	adds	r7, #36	@ 0x24
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b2e2:	e002      	b.n	800b2ea <chk_chr+0x12>
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	607b      	str	r3, [r7, #4]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d005      	beq.n	800b2fe <chk_chr+0x26>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d1f2      	bne.n	800b2e4 <chk_chr+0xc>
	return *str;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	781b      	ldrb	r3, [r3, #0]
}
 800b302:	4618      	mov	r0, r3
 800b304:	370c      	adds	r7, #12
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
	...

0800b310 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b31a:	2300      	movs	r3, #0
 800b31c:	60bb      	str	r3, [r7, #8]
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	60fb      	str	r3, [r7, #12]
 800b322:	e029      	b.n	800b378 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b324:	4a27      	ldr	r2, [pc, #156]	@ (800b3c4 <chk_lock+0xb4>)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	011b      	lsls	r3, r3, #4
 800b32a:	4413      	add	r3, r2
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d01d      	beq.n	800b36e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b332:	4a24      	ldr	r2, [pc, #144]	@ (800b3c4 <chk_lock+0xb4>)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	011b      	lsls	r3, r3, #4
 800b338:	4413      	add	r3, r2
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	429a      	cmp	r2, r3
 800b342:	d116      	bne.n	800b372 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b344:	4a1f      	ldr	r2, [pc, #124]	@ (800b3c4 <chk_lock+0xb4>)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	011b      	lsls	r3, r3, #4
 800b34a:	4413      	add	r3, r2
 800b34c:	3304      	adds	r3, #4
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b354:	429a      	cmp	r2, r3
 800b356:	d10c      	bne.n	800b372 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b358:	4a1a      	ldr	r2, [pc, #104]	@ (800b3c4 <chk_lock+0xb4>)
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	011b      	lsls	r3, r3, #4
 800b35e:	4413      	add	r3, r2
 800b360:	3308      	adds	r3, #8
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b368:	429a      	cmp	r2, r3
 800b36a:	d102      	bne.n	800b372 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b36c:	e007      	b.n	800b37e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b36e:	2301      	movs	r3, #1
 800b370:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	3301      	adds	r3, #1
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d9d2      	bls.n	800b324 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2b02      	cmp	r3, #2
 800b382:	d109      	bne.n	800b398 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d102      	bne.n	800b390 <chk_lock+0x80>
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	2b02      	cmp	r3, #2
 800b38e:	d101      	bne.n	800b394 <chk_lock+0x84>
 800b390:	2300      	movs	r3, #0
 800b392:	e010      	b.n	800b3b6 <chk_lock+0xa6>
 800b394:	2312      	movs	r3, #18
 800b396:	e00e      	b.n	800b3b6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d108      	bne.n	800b3b0 <chk_lock+0xa0>
 800b39e:	4a09      	ldr	r2, [pc, #36]	@ (800b3c4 <chk_lock+0xb4>)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	011b      	lsls	r3, r3, #4
 800b3a4:	4413      	add	r3, r2
 800b3a6:	330c      	adds	r3, #12
 800b3a8:	881b      	ldrh	r3, [r3, #0]
 800b3aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b3ae:	d101      	bne.n	800b3b4 <chk_lock+0xa4>
 800b3b0:	2310      	movs	r3, #16
 800b3b2:	e000      	b.n	800b3b6 <chk_lock+0xa6>
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3714      	adds	r7, #20
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	20000304 	.word	0x20000304

0800b3c8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b083      	sub	sp, #12
 800b3cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	607b      	str	r3, [r7, #4]
 800b3d2:	e002      	b.n	800b3da <enq_lock+0x12>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	607b      	str	r3, [r7, #4]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d806      	bhi.n	800b3ee <enq_lock+0x26>
 800b3e0:	4a09      	ldr	r2, [pc, #36]	@ (800b408 <enq_lock+0x40>)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	011b      	lsls	r3, r3, #4
 800b3e6:	4413      	add	r3, r2
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1f2      	bne.n	800b3d4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	bf14      	ite	ne
 800b3f4:	2301      	movne	r3, #1
 800b3f6:	2300      	moveq	r3, #0
 800b3f8:	b2db      	uxtb	r3, r3
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	370c      	adds	r7, #12
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr
 800b406:	bf00      	nop
 800b408:	20000304 	.word	0x20000304

0800b40c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b416:	2300      	movs	r3, #0
 800b418:	60fb      	str	r3, [r7, #12]
 800b41a:	e01f      	b.n	800b45c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b41c:	4a41      	ldr	r2, [pc, #260]	@ (800b524 <inc_lock+0x118>)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	011b      	lsls	r3, r3, #4
 800b422:	4413      	add	r3, r2
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	429a      	cmp	r2, r3
 800b42c:	d113      	bne.n	800b456 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b42e:	4a3d      	ldr	r2, [pc, #244]	@ (800b524 <inc_lock+0x118>)
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	011b      	lsls	r3, r3, #4
 800b434:	4413      	add	r3, r2
 800b436:	3304      	adds	r3, #4
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b43e:	429a      	cmp	r2, r3
 800b440:	d109      	bne.n	800b456 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b442:	4a38      	ldr	r2, [pc, #224]	@ (800b524 <inc_lock+0x118>)
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	011b      	lsls	r3, r3, #4
 800b448:	4413      	add	r3, r2
 800b44a:	3308      	adds	r3, #8
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b452:	429a      	cmp	r2, r3
 800b454:	d006      	beq.n	800b464 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	3301      	adds	r3, #1
 800b45a:	60fb      	str	r3, [r7, #12]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d9dc      	bls.n	800b41c <inc_lock+0x10>
 800b462:	e000      	b.n	800b466 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b464:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2b02      	cmp	r3, #2
 800b46a:	d132      	bne.n	800b4d2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b46c:	2300      	movs	r3, #0
 800b46e:	60fb      	str	r3, [r7, #12]
 800b470:	e002      	b.n	800b478 <inc_lock+0x6c>
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	3301      	adds	r3, #1
 800b476:	60fb      	str	r3, [r7, #12]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d806      	bhi.n	800b48c <inc_lock+0x80>
 800b47e:	4a29      	ldr	r2, [pc, #164]	@ (800b524 <inc_lock+0x118>)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	011b      	lsls	r3, r3, #4
 800b484:	4413      	add	r3, r2
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d1f2      	bne.n	800b472 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2b02      	cmp	r3, #2
 800b490:	d101      	bne.n	800b496 <inc_lock+0x8a>
 800b492:	2300      	movs	r3, #0
 800b494:	e040      	b.n	800b518 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	4922      	ldr	r1, [pc, #136]	@ (800b524 <inc_lock+0x118>)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	011b      	lsls	r3, r3, #4
 800b4a0:	440b      	add	r3, r1
 800b4a2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	689a      	ldr	r2, [r3, #8]
 800b4a8:	491e      	ldr	r1, [pc, #120]	@ (800b524 <inc_lock+0x118>)
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	011b      	lsls	r3, r3, #4
 800b4ae:	440b      	add	r3, r1
 800b4b0:	3304      	adds	r3, #4
 800b4b2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	695a      	ldr	r2, [r3, #20]
 800b4b8:	491a      	ldr	r1, [pc, #104]	@ (800b524 <inc_lock+0x118>)
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	011b      	lsls	r3, r3, #4
 800b4be:	440b      	add	r3, r1
 800b4c0:	3308      	adds	r3, #8
 800b4c2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b4c4:	4a17      	ldr	r2, [pc, #92]	@ (800b524 <inc_lock+0x118>)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	011b      	lsls	r3, r3, #4
 800b4ca:	4413      	add	r3, r2
 800b4cc:	330c      	adds	r3, #12
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d009      	beq.n	800b4ec <inc_lock+0xe0>
 800b4d8:	4a12      	ldr	r2, [pc, #72]	@ (800b524 <inc_lock+0x118>)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	011b      	lsls	r3, r3, #4
 800b4de:	4413      	add	r3, r2
 800b4e0:	330c      	adds	r3, #12
 800b4e2:	881b      	ldrh	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d001      	beq.n	800b4ec <inc_lock+0xe0>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	e015      	b.n	800b518 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d108      	bne.n	800b504 <inc_lock+0xf8>
 800b4f2:	4a0c      	ldr	r2, [pc, #48]	@ (800b524 <inc_lock+0x118>)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	011b      	lsls	r3, r3, #4
 800b4f8:	4413      	add	r3, r2
 800b4fa:	330c      	adds	r3, #12
 800b4fc:	881b      	ldrh	r3, [r3, #0]
 800b4fe:	3301      	adds	r3, #1
 800b500:	b29a      	uxth	r2, r3
 800b502:	e001      	b.n	800b508 <inc_lock+0xfc>
 800b504:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b508:	4906      	ldr	r1, [pc, #24]	@ (800b524 <inc_lock+0x118>)
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	011b      	lsls	r3, r3, #4
 800b50e:	440b      	add	r3, r1
 800b510:	330c      	adds	r3, #12
 800b512:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	3301      	adds	r3, #1
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3714      	adds	r7, #20
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr
 800b524:	20000304 	.word	0x20000304

0800b528 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	3b01      	subs	r3, #1
 800b534:	607b      	str	r3, [r7, #4]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d825      	bhi.n	800b588 <dec_lock+0x60>
		n = Files[i].ctr;
 800b53c:	4a17      	ldr	r2, [pc, #92]	@ (800b59c <dec_lock+0x74>)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	011b      	lsls	r3, r3, #4
 800b542:	4413      	add	r3, r2
 800b544:	330c      	adds	r3, #12
 800b546:	881b      	ldrh	r3, [r3, #0]
 800b548:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b54a:	89fb      	ldrh	r3, [r7, #14]
 800b54c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b550:	d101      	bne.n	800b556 <dec_lock+0x2e>
 800b552:	2300      	movs	r3, #0
 800b554:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b556:	89fb      	ldrh	r3, [r7, #14]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d002      	beq.n	800b562 <dec_lock+0x3a>
 800b55c:	89fb      	ldrh	r3, [r7, #14]
 800b55e:	3b01      	subs	r3, #1
 800b560:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b562:	4a0e      	ldr	r2, [pc, #56]	@ (800b59c <dec_lock+0x74>)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	011b      	lsls	r3, r3, #4
 800b568:	4413      	add	r3, r2
 800b56a:	330c      	adds	r3, #12
 800b56c:	89fa      	ldrh	r2, [r7, #14]
 800b56e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b570:	89fb      	ldrh	r3, [r7, #14]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d105      	bne.n	800b582 <dec_lock+0x5a>
 800b576:	4a09      	ldr	r2, [pc, #36]	@ (800b59c <dec_lock+0x74>)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	011b      	lsls	r3, r3, #4
 800b57c:	4413      	add	r3, r2
 800b57e:	2200      	movs	r2, #0
 800b580:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b582:	2300      	movs	r3, #0
 800b584:	737b      	strb	r3, [r7, #13]
 800b586:	e001      	b.n	800b58c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b588:	2302      	movs	r3, #2
 800b58a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b58c:	7b7b      	ldrb	r3, [r7, #13]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	20000304 	.word	0x20000304

0800b5a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b085      	sub	sp, #20
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	60fb      	str	r3, [r7, #12]
 800b5ac:	e010      	b.n	800b5d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b5ae:	4a0d      	ldr	r2, [pc, #52]	@ (800b5e4 <clear_lock+0x44>)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	011b      	lsls	r3, r3, #4
 800b5b4:	4413      	add	r3, r2
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	429a      	cmp	r2, r3
 800b5bc:	d105      	bne.n	800b5ca <clear_lock+0x2a>
 800b5be:	4a09      	ldr	r2, [pc, #36]	@ (800b5e4 <clear_lock+0x44>)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	011b      	lsls	r3, r3, #4
 800b5c4:	4413      	add	r3, r2
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	60fb      	str	r3, [r7, #12]
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d9eb      	bls.n	800b5ae <clear_lock+0xe>
	}
}
 800b5d6:	bf00      	nop
 800b5d8:	bf00      	nop
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	20000304 	.word	0x20000304

0800b5e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	78db      	ldrb	r3, [r3, #3]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d034      	beq.n	800b666 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b600:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	7858      	ldrb	r0, [r3, #1]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b60c:	2301      	movs	r3, #1
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	f7ff fd3e 	bl	800b090 <disk_write>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d002      	beq.n	800b620 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b61a:	2301      	movs	r3, #1
 800b61c:	73fb      	strb	r3, [r7, #15]
 800b61e:	e022      	b.n	800b666 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2200      	movs	r2, #0
 800b624:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	697a      	ldr	r2, [r7, #20]
 800b62c:	1ad2      	subs	r2, r2, r3
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	699b      	ldr	r3, [r3, #24]
 800b632:	429a      	cmp	r2, r3
 800b634:	d217      	bcs.n	800b666 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	789b      	ldrb	r3, [r3, #2]
 800b63a:	613b      	str	r3, [r7, #16]
 800b63c:	e010      	b.n	800b660 <sync_window+0x78>
					wsect += fs->fsize;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	4413      	add	r3, r2
 800b646:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	7858      	ldrb	r0, [r3, #1]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b652:	2301      	movs	r3, #1
 800b654:	697a      	ldr	r2, [r7, #20]
 800b656:	f7ff fd1b 	bl	800b090 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b65a:	693b      	ldr	r3, [r7, #16]
 800b65c:	3b01      	subs	r3, #1
 800b65e:	613b      	str	r3, [r7, #16]
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d8eb      	bhi.n	800b63e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b666:	7bfb      	ldrb	r3, [r7, #15]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3718      	adds	r7, #24
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b084      	sub	sp, #16
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b682:	683a      	ldr	r2, [r7, #0]
 800b684:	429a      	cmp	r2, r3
 800b686:	d01b      	beq.n	800b6c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7ff ffad 	bl	800b5e8 <sync_window>
 800b68e:	4603      	mov	r3, r0
 800b690:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b692:	7bfb      	ldrb	r3, [r7, #15]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d113      	bne.n	800b6c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	7858      	ldrb	r0, [r3, #1]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	683a      	ldr	r2, [r7, #0]
 800b6a6:	f7ff fcd3 	bl	800b050 <disk_read>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d004      	beq.n	800b6ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	683a      	ldr	r2, [r7, #0]
 800b6be:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800b6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
	...

0800b6cc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f7ff ff87 	bl	800b5e8 <sync_window>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b6de:	7bfb      	ldrb	r3, [r7, #15]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d158      	bne.n	800b796 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	2b03      	cmp	r3, #3
 800b6ea:	d148      	bne.n	800b77e <sync_fs+0xb2>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	791b      	ldrb	r3, [r3, #4]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d144      	bne.n	800b77e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	3330      	adds	r3, #48	@ 0x30
 800b6f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	4618      	mov	r0, r3
 800b700:	f7ff fda8 	bl	800b254 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	3330      	adds	r3, #48	@ 0x30
 800b708:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b70c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b710:	4618      	mov	r0, r3
 800b712:	f7ff fd37 	bl	800b184 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	3330      	adds	r3, #48	@ 0x30
 800b71a:	4921      	ldr	r1, [pc, #132]	@ (800b7a0 <sync_fs+0xd4>)
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7ff fd4c 	bl	800b1ba <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	3330      	adds	r3, #48	@ 0x30
 800b726:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b72a:	491e      	ldr	r1, [pc, #120]	@ (800b7a4 <sync_fs+0xd8>)
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7ff fd44 	bl	800b1ba <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	3330      	adds	r3, #48	@ 0x30
 800b736:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	691b      	ldr	r3, [r3, #16]
 800b73e:	4619      	mov	r1, r3
 800b740:	4610      	mov	r0, r2
 800b742:	f7ff fd3a 	bl	800b1ba <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	3330      	adds	r3, #48	@ 0x30
 800b74a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	4619      	mov	r1, r3
 800b754:	4610      	mov	r0, r2
 800b756:	f7ff fd30 	bl	800b1ba <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	69db      	ldr	r3, [r3, #28]
 800b75e:	1c5a      	adds	r2, r3, #1
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	7858      	ldrb	r0, [r3, #1]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b772:	2301      	movs	r3, #1
 800b774:	f7ff fc8c 	bl	800b090 <disk_write>
			fs->fsi_flag = 0;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	785b      	ldrb	r3, [r3, #1]
 800b782:	2200      	movs	r2, #0
 800b784:	2100      	movs	r1, #0
 800b786:	4618      	mov	r0, r3
 800b788:	f7ff fca2 	bl	800b0d0 <disk_ioctl>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d001      	beq.n	800b796 <sync_fs+0xca>
 800b792:	2301      	movs	r3, #1
 800b794:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b796:	7bfb      	ldrb	r3, [r7, #15]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	41615252 	.word	0x41615252
 800b7a4:	61417272 	.word	0x61417272

0800b7a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
 800b7b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	3b02      	subs	r3, #2
 800b7b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	695b      	ldr	r3, [r3, #20]
 800b7bc:	3b02      	subs	r3, #2
 800b7be:	683a      	ldr	r2, [r7, #0]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d301      	bcc.n	800b7c8 <clust2sect+0x20>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	e008      	b.n	800b7da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	895b      	ldrh	r3, [r3, #10]
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	fb03 f202 	mul.w	r2, r3, r2
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7d8:	4413      	add	r3, r2
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	370c      	adds	r7, #12
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e4:	4770      	bx	lr

0800b7e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b086      	sub	sp, #24
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d904      	bls.n	800b806 <get_fat+0x20>
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	695b      	ldr	r3, [r3, #20]
 800b800:	683a      	ldr	r2, [r7, #0]
 800b802:	429a      	cmp	r2, r3
 800b804:	d302      	bcc.n	800b80c <get_fat+0x26>
		val = 1;	/* Internal error */
 800b806:	2301      	movs	r3, #1
 800b808:	617b      	str	r3, [r7, #20]
 800b80a:	e08e      	b.n	800b92a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b80c:	f04f 33ff 	mov.w	r3, #4294967295
 800b810:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	2b03      	cmp	r3, #3
 800b818:	d061      	beq.n	800b8de <get_fat+0xf8>
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	dc7b      	bgt.n	800b916 <get_fat+0x130>
 800b81e:	2b01      	cmp	r3, #1
 800b820:	d002      	beq.n	800b828 <get_fat+0x42>
 800b822:	2b02      	cmp	r3, #2
 800b824:	d041      	beq.n	800b8aa <get_fat+0xc4>
 800b826:	e076      	b.n	800b916 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	60fb      	str	r3, [r7, #12]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	085b      	lsrs	r3, r3, #1
 800b830:	68fa      	ldr	r2, [r7, #12]
 800b832:	4413      	add	r3, r2
 800b834:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	6a1a      	ldr	r2, [r3, #32]
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	0a5b      	lsrs	r3, r3, #9
 800b83e:	4413      	add	r3, r2
 800b840:	4619      	mov	r1, r3
 800b842:	6938      	ldr	r0, [r7, #16]
 800b844:	f7ff ff14 	bl	800b670 <move_window>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d166      	bne.n	800b91c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	60fa      	str	r2, [r7, #12]
 800b854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b858:	693a      	ldr	r2, [r7, #16]
 800b85a:	4413      	add	r3, r2
 800b85c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b860:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	6a1a      	ldr	r2, [r3, #32]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	0a5b      	lsrs	r3, r3, #9
 800b86a:	4413      	add	r3, r2
 800b86c:	4619      	mov	r1, r3
 800b86e:	6938      	ldr	r0, [r7, #16]
 800b870:	f7ff fefe 	bl	800b670 <move_window>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d152      	bne.n	800b920 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b880:	693a      	ldr	r2, [r7, #16]
 800b882:	4413      	add	r3, r2
 800b884:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b888:	021b      	lsls	r3, r3, #8
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	4313      	orrs	r3, r2
 800b88e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	f003 0301 	and.w	r3, r3, #1
 800b896:	2b00      	cmp	r3, #0
 800b898:	d002      	beq.n	800b8a0 <get_fat+0xba>
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	091b      	lsrs	r3, r3, #4
 800b89e:	e002      	b.n	800b8a6 <get_fat+0xc0>
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8a6:	617b      	str	r3, [r7, #20]
			break;
 800b8a8:	e03f      	b.n	800b92a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	6a1a      	ldr	r2, [r3, #32]
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	0a1b      	lsrs	r3, r3, #8
 800b8b2:	4413      	add	r3, r2
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6938      	ldr	r0, [r7, #16]
 800b8b8:	f7ff feda 	bl	800b670 <move_window>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d130      	bne.n	800b924 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	005b      	lsls	r3, r3, #1
 800b8cc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b8d0:	4413      	add	r3, r2
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7ff fc1a 	bl	800b10c <ld_word>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	617b      	str	r3, [r7, #20]
			break;
 800b8dc:	e025      	b.n	800b92a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	6a1a      	ldr	r2, [r3, #32]
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	09db      	lsrs	r3, r3, #7
 800b8e6:	4413      	add	r3, r2
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	6938      	ldr	r0, [r7, #16]
 800b8ec:	f7ff fec0 	bl	800b670 <move_window>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d118      	bne.n	800b928 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b904:	4413      	add	r3, r2
 800b906:	4618      	mov	r0, r3
 800b908:	f7ff fc19 	bl	800b13e <ld_dword>
 800b90c:	4603      	mov	r3, r0
 800b90e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b912:	617b      	str	r3, [r7, #20]
			break;
 800b914:	e009      	b.n	800b92a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b916:	2301      	movs	r3, #1
 800b918:	617b      	str	r3, [r7, #20]
 800b91a:	e006      	b.n	800b92a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b91c:	bf00      	nop
 800b91e:	e004      	b.n	800b92a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b920:	bf00      	nop
 800b922:	e002      	b.n	800b92a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b924:	bf00      	nop
 800b926:	e000      	b.n	800b92a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b928:	bf00      	nop
		}
	}

	return val;
 800b92a:	697b      	ldr	r3, [r7, #20]
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3718      	adds	r7, #24
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b934:	b590      	push	{r4, r7, lr}
 800b936:	b089      	sub	sp, #36	@ 0x24
 800b938:	af00      	add	r7, sp, #0
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b940:	2302      	movs	r3, #2
 800b942:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2b01      	cmp	r3, #1
 800b948:	f240 80d9 	bls.w	800bafe <put_fat+0x1ca>
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	695b      	ldr	r3, [r3, #20]
 800b950:	68ba      	ldr	r2, [r7, #8]
 800b952:	429a      	cmp	r2, r3
 800b954:	f080 80d3 	bcs.w	800bafe <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	2b03      	cmp	r3, #3
 800b95e:	f000 8096 	beq.w	800ba8e <put_fat+0x15a>
 800b962:	2b03      	cmp	r3, #3
 800b964:	f300 80cb 	bgt.w	800bafe <put_fat+0x1ca>
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d002      	beq.n	800b972 <put_fat+0x3e>
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d06e      	beq.n	800ba4e <put_fat+0x11a>
 800b970:	e0c5      	b.n	800bafe <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	61bb      	str	r3, [r7, #24]
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	085b      	lsrs	r3, r3, #1
 800b97a:	69ba      	ldr	r2, [r7, #24]
 800b97c:	4413      	add	r3, r2
 800b97e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	6a1a      	ldr	r2, [r3, #32]
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	0a5b      	lsrs	r3, r3, #9
 800b988:	4413      	add	r3, r2
 800b98a:	4619      	mov	r1, r3
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f7ff fe6f 	bl	800b670 <move_window>
 800b992:	4603      	mov	r3, r0
 800b994:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b996:	7ffb      	ldrb	r3, [r7, #31]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f040 80a9 	bne.w	800baf0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b9a4:	69bb      	ldr	r3, [r7, #24]
 800b9a6:	1c59      	adds	r1, r3, #1
 800b9a8:	61b9      	str	r1, [r7, #24]
 800b9aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ae:	4413      	add	r3, r2
 800b9b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	f003 0301 	and.w	r3, r3, #1
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d00d      	beq.n	800b9d8 <put_fat+0xa4>
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	b25b      	sxtb	r3, r3
 800b9c2:	f003 030f 	and.w	r3, r3, #15
 800b9c6:	b25a      	sxtb	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	b25b      	sxtb	r3, r3
 800b9cc:	011b      	lsls	r3, r3, #4
 800b9ce:	b25b      	sxtb	r3, r3
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	b25b      	sxtb	r3, r3
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	e001      	b.n	800b9dc <put_fat+0xa8>
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	697a      	ldr	r2, [r7, #20]
 800b9de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6a1a      	ldr	r2, [r3, #32]
 800b9ea:	69bb      	ldr	r3, [r7, #24]
 800b9ec:	0a5b      	lsrs	r3, r3, #9
 800b9ee:	4413      	add	r3, r2
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f7ff fe3c 	bl	800b670 <move_window>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b9fc:	7ffb      	ldrb	r3, [r7, #31]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d178      	bne.n	800baf4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba0e:	4413      	add	r3, r2
 800ba10:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	f003 0301 	and.w	r3, r3, #1
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d003      	beq.n	800ba24 <put_fat+0xf0>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	091b      	lsrs	r3, r3, #4
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	e00e      	b.n	800ba42 <put_fat+0x10e>
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	b25b      	sxtb	r3, r3
 800ba2a:	f023 030f 	bic.w	r3, r3, #15
 800ba2e:	b25a      	sxtb	r2, r3
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	0a1b      	lsrs	r3, r3, #8
 800ba34:	b25b      	sxtb	r3, r3
 800ba36:	f003 030f 	and.w	r3, r3, #15
 800ba3a:	b25b      	sxtb	r3, r3
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	b25b      	sxtb	r3, r3
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	70da      	strb	r2, [r3, #3]
			break;
 800ba4c:	e057      	b.n	800bafe <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6a1a      	ldr	r2, [r3, #32]
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	0a1b      	lsrs	r3, r3, #8
 800ba56:	4413      	add	r3, r2
 800ba58:	4619      	mov	r1, r3
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f7ff fe08 	bl	800b670 <move_window>
 800ba60:	4603      	mov	r3, r0
 800ba62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba64:	7ffb      	ldrb	r3, [r7, #31]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d146      	bne.n	800baf8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	005b      	lsls	r3, r3, #1
 800ba74:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ba78:	4413      	add	r3, r2
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	b292      	uxth	r2, r2
 800ba7e:	4611      	mov	r1, r2
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7ff fb7f 	bl	800b184 <st_word>
			fs->wflag = 1;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2201      	movs	r2, #1
 800ba8a:	70da      	strb	r2, [r3, #3]
			break;
 800ba8c:	e037      	b.n	800bafe <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6a1a      	ldr	r2, [r3, #32]
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	09db      	lsrs	r3, r3, #7
 800ba96:	4413      	add	r3, r2
 800ba98:	4619      	mov	r1, r3
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f7ff fde8 	bl	800b670 <move_window>
 800baa0:	4603      	mov	r3, r0
 800baa2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800baa4:	7ffb      	ldrb	r3, [r7, #31]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d128      	bne.n	800bafc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800babe:	4413      	add	r3, r2
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7ff fb3c 	bl	800b13e <ld_dword>
 800bac6:	4603      	mov	r3, r0
 800bac8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bacc:	4323      	orrs	r3, r4
 800bace:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bade:	4413      	add	r3, r2
 800bae0:	6879      	ldr	r1, [r7, #4]
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7ff fb69 	bl	800b1ba <st_dword>
			fs->wflag = 1;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2201      	movs	r2, #1
 800baec:	70da      	strb	r2, [r3, #3]
			break;
 800baee:	e006      	b.n	800bafe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800baf0:	bf00      	nop
 800baf2:	e004      	b.n	800bafe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800baf4:	bf00      	nop
 800baf6:	e002      	b.n	800bafe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800baf8:	bf00      	nop
 800bafa:	e000      	b.n	800bafe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bafc:	bf00      	nop
		}
	}
	return res;
 800bafe:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	3724      	adds	r7, #36	@ 0x24
 800bb04:	46bd      	mov	sp, r7
 800bb06:	bd90      	pop	{r4, r7, pc}

0800bb08 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b088      	sub	sp, #32
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bb14:	2300      	movs	r3, #0
 800bb16:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d904      	bls.n	800bb2e <remove_chain+0x26>
 800bb24:	69bb      	ldr	r3, [r7, #24]
 800bb26:	695b      	ldr	r3, [r3, #20]
 800bb28:	68ba      	ldr	r2, [r7, #8]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d301      	bcc.n	800bb32 <remove_chain+0x2a>
 800bb2e:	2302      	movs	r3, #2
 800bb30:	e04b      	b.n	800bbca <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00c      	beq.n	800bb52 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bb38:	f04f 32ff 	mov.w	r2, #4294967295
 800bb3c:	6879      	ldr	r1, [r7, #4]
 800bb3e:	69b8      	ldr	r0, [r7, #24]
 800bb40:	f7ff fef8 	bl	800b934 <put_fat>
 800bb44:	4603      	mov	r3, r0
 800bb46:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bb48:	7ffb      	ldrb	r3, [r7, #31]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d001      	beq.n	800bb52 <remove_chain+0x4a>
 800bb4e:	7ffb      	ldrb	r3, [r7, #31]
 800bb50:	e03b      	b.n	800bbca <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bb52:	68b9      	ldr	r1, [r7, #8]
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f7ff fe46 	bl	800b7e6 <get_fat>
 800bb5a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bb5c:	697b      	ldr	r3, [r7, #20]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d031      	beq.n	800bbc6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d101      	bne.n	800bb6c <remove_chain+0x64>
 800bb68:	2302      	movs	r3, #2
 800bb6a:	e02e      	b.n	800bbca <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bb6c:	697b      	ldr	r3, [r7, #20]
 800bb6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb72:	d101      	bne.n	800bb78 <remove_chain+0x70>
 800bb74:	2301      	movs	r3, #1
 800bb76:	e028      	b.n	800bbca <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bb78:	2200      	movs	r2, #0
 800bb7a:	68b9      	ldr	r1, [r7, #8]
 800bb7c:	69b8      	ldr	r0, [r7, #24]
 800bb7e:	f7ff fed9 	bl	800b934 <put_fat>
 800bb82:	4603      	mov	r3, r0
 800bb84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bb86:	7ffb      	ldrb	r3, [r7, #31]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d001      	beq.n	800bb90 <remove_chain+0x88>
 800bb8c:	7ffb      	ldrb	r3, [r7, #31]
 800bb8e:	e01c      	b.n	800bbca <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	691a      	ldr	r2, [r3, #16]
 800bb94:	69bb      	ldr	r3, [r7, #24]
 800bb96:	695b      	ldr	r3, [r3, #20]
 800bb98:	3b02      	subs	r3, #2
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d20b      	bcs.n	800bbb6 <remove_chain+0xae>
			fs->free_clst++;
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	1c5a      	adds	r2, r3, #1
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bba8:	69bb      	ldr	r3, [r7, #24]
 800bbaa:	791b      	ldrb	r3, [r3, #4]
 800bbac:	f043 0301 	orr.w	r3, r3, #1
 800bbb0:	b2da      	uxtb	r2, r3
 800bbb2:	69bb      	ldr	r3, [r7, #24]
 800bbb4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bbb6:	697b      	ldr	r3, [r7, #20]
 800bbb8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bbba:	69bb      	ldr	r3, [r7, #24]
 800bbbc:	695b      	ldr	r3, [r3, #20]
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d3c6      	bcc.n	800bb52 <remove_chain+0x4a>
 800bbc4:	e000      	b.n	800bbc8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bbc6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3720      	adds	r7, #32
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b088      	sub	sp, #32
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
 800bbda:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d10d      	bne.n	800bc04 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	68db      	ldr	r3, [r3, #12]
 800bbec:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d004      	beq.n	800bbfe <create_chain+0x2c>
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	695b      	ldr	r3, [r3, #20]
 800bbf8:	69ba      	ldr	r2, [r7, #24]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d31b      	bcc.n	800bc36 <create_chain+0x64>
 800bbfe:	2301      	movs	r3, #1
 800bc00:	61bb      	str	r3, [r7, #24]
 800bc02:	e018      	b.n	800bc36 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bc04:	6839      	ldr	r1, [r7, #0]
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f7ff fded 	bl	800b7e6 <get_fat>
 800bc0c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d801      	bhi.n	800bc18 <create_chain+0x46>
 800bc14:	2301      	movs	r3, #1
 800bc16:	e070      	b.n	800bcfa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc1e:	d101      	bne.n	800bc24 <create_chain+0x52>
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	e06a      	b.n	800bcfa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	695b      	ldr	r3, [r3, #20]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d201      	bcs.n	800bc32 <create_chain+0x60>
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	e063      	b.n	800bcfa <create_chain+0x128>
		scl = clst;
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bc36:	69bb      	ldr	r3, [r7, #24]
 800bc38:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	3301      	adds	r3, #1
 800bc3e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	695b      	ldr	r3, [r3, #20]
 800bc44:	69fa      	ldr	r2, [r7, #28]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d307      	bcc.n	800bc5a <create_chain+0x88>
				ncl = 2;
 800bc4a:	2302      	movs	r3, #2
 800bc4c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bc4e:	69fa      	ldr	r2, [r7, #28]
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d901      	bls.n	800bc5a <create_chain+0x88>
 800bc56:	2300      	movs	r3, #0
 800bc58:	e04f      	b.n	800bcfa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bc5a:	69f9      	ldr	r1, [r7, #28]
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f7ff fdc2 	bl	800b7e6 <get_fat>
 800bc62:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00e      	beq.n	800bc88 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d003      	beq.n	800bc78 <create_chain+0xa6>
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc76:	d101      	bne.n	800bc7c <create_chain+0xaa>
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	e03e      	b.n	800bcfa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bc7c:	69fa      	ldr	r2, [r7, #28]
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d1da      	bne.n	800bc3a <create_chain+0x68>
 800bc84:	2300      	movs	r3, #0
 800bc86:	e038      	b.n	800bcfa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bc88:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bc8a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc8e:	69f9      	ldr	r1, [r7, #28]
 800bc90:	6938      	ldr	r0, [r7, #16]
 800bc92:	f7ff fe4f 	bl	800b934 <put_fat>
 800bc96:	4603      	mov	r3, r0
 800bc98:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bc9a:	7dfb      	ldrb	r3, [r7, #23]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d109      	bne.n	800bcb4 <create_chain+0xe2>
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d006      	beq.n	800bcb4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bca6:	69fa      	ldr	r2, [r7, #28]
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	6938      	ldr	r0, [r7, #16]
 800bcac:	f7ff fe42 	bl	800b934 <put_fat>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bcb4:	7dfb      	ldrb	r3, [r7, #23]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d116      	bne.n	800bce8 <create_chain+0x116>
		fs->last_clst = ncl;
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	69fa      	ldr	r2, [r7, #28]
 800bcbe:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	691a      	ldr	r2, [r3, #16]
 800bcc4:	693b      	ldr	r3, [r7, #16]
 800bcc6:	695b      	ldr	r3, [r3, #20]
 800bcc8:	3b02      	subs	r3, #2
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d804      	bhi.n	800bcd8 <create_chain+0x106>
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	691b      	ldr	r3, [r3, #16]
 800bcd2:	1e5a      	subs	r2, r3, #1
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	791b      	ldrb	r3, [r3, #4]
 800bcdc:	f043 0301 	orr.w	r3, r3, #1
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	693b      	ldr	r3, [r7, #16]
 800bce4:	711a      	strb	r2, [r3, #4]
 800bce6:	e007      	b.n	800bcf8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bce8:	7dfb      	ldrb	r3, [r7, #23]
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d102      	bne.n	800bcf4 <create_chain+0x122>
 800bcee:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf2:	e000      	b.n	800bcf6 <create_chain+0x124>
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bcf8:	69fb      	ldr	r3, [r7, #28]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3720      	adds	r7, #32
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bd02:	b480      	push	{r7}
 800bd04:	b087      	sub	sp, #28
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd16:	3304      	adds	r3, #4
 800bd18:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bd1a:	683b      	ldr	r3, [r7, #0]
 800bd1c:	0a5b      	lsrs	r3, r3, #9
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	8952      	ldrh	r2, [r2, #10]
 800bd22:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd26:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	1d1a      	adds	r2, r3, #4
 800bd2c:	613a      	str	r2, [r7, #16]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d101      	bne.n	800bd3c <clmt_clust+0x3a>
 800bd38:	2300      	movs	r3, #0
 800bd3a:	e010      	b.n	800bd5e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bd3c:	697a      	ldr	r2, [r7, #20]
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d307      	bcc.n	800bd54 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bd44:	697a      	ldr	r2, [r7, #20]
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	1ad3      	subs	r3, r2, r3
 800bd4a:	617b      	str	r3, [r7, #20]
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	3304      	adds	r3, #4
 800bd50:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bd52:	e7e9      	b.n	800bd28 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bd54:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	4413      	add	r3, r2
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	371c      	adds	r7, #28
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr

0800bd6a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b086      	sub	sp, #24
 800bd6e:	af00      	add	r7, sp, #0
 800bd70:	6078      	str	r0, [r7, #4]
 800bd72:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bd80:	d204      	bcs.n	800bd8c <dir_sdi+0x22>
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	f003 031f 	and.w	r3, r3, #31
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d001      	beq.n	800bd90 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	e063      	b.n	800be58 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d106      	bne.n	800bdb0 <dir_sdi+0x46>
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	781b      	ldrb	r3, [r3, #0]
 800bda6:	2b02      	cmp	r3, #2
 800bda8:	d902      	bls.n	800bdb0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdae:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d10c      	bne.n	800bdd0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	095b      	lsrs	r3, r3, #5
 800bdba:	693a      	ldr	r2, [r7, #16]
 800bdbc:	8912      	ldrh	r2, [r2, #8]
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d301      	bcc.n	800bdc6 <dir_sdi+0x5c>
 800bdc2:	2302      	movs	r3, #2
 800bdc4:	e048      	b.n	800be58 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	61da      	str	r2, [r3, #28]
 800bdce:	e029      	b.n	800be24 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	895b      	ldrh	r3, [r3, #10]
 800bdd4:	025b      	lsls	r3, r3, #9
 800bdd6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bdd8:	e019      	b.n	800be0e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6979      	ldr	r1, [r7, #20]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7ff fd01 	bl	800b7e6 <get_fat>
 800bde4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdec:	d101      	bne.n	800bdf2 <dir_sdi+0x88>
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e032      	b.n	800be58 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d904      	bls.n	800be02 <dir_sdi+0x98>
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	695b      	ldr	r3, [r3, #20]
 800bdfc:	697a      	ldr	r2, [r7, #20]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d301      	bcc.n	800be06 <dir_sdi+0x9c>
 800be02:	2302      	movs	r3, #2
 800be04:	e028      	b.n	800be58 <dir_sdi+0xee>
			ofs -= csz;
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	1ad3      	subs	r3, r2, r3
 800be0c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800be0e:	683a      	ldr	r2, [r7, #0]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	429a      	cmp	r2, r3
 800be14:	d2e1      	bcs.n	800bdda <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800be16:	6979      	ldr	r1, [r7, #20]
 800be18:	6938      	ldr	r0, [r7, #16]
 800be1a:	f7ff fcc5 	bl	800b7a8 <clust2sect>
 800be1e:	4602      	mov	r2, r0
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	69db      	ldr	r3, [r3, #28]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d101      	bne.n	800be36 <dir_sdi+0xcc>
 800be32:	2302      	movs	r3, #2
 800be34:	e010      	b.n	800be58 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	69da      	ldr	r2, [r3, #28]
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	0a5b      	lsrs	r3, r3, #9
 800be3e:	441a      	add	r2, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be50:	441a      	add	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	3718      	adds	r7, #24
 800be5c:	46bd      	mov	sp, r7
 800be5e:	bd80      	pop	{r7, pc}

0800be60 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	695b      	ldr	r3, [r3, #20]
 800be74:	3320      	adds	r3, #32
 800be76:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	69db      	ldr	r3, [r3, #28]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d003      	beq.n	800be88 <dir_next+0x28>
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800be86:	d301      	bcc.n	800be8c <dir_next+0x2c>
 800be88:	2304      	movs	r3, #4
 800be8a:	e0aa      	b.n	800bfe2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be92:	2b00      	cmp	r3, #0
 800be94:	f040 8098 	bne.w	800bfc8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	69db      	ldr	r3, [r3, #28]
 800be9c:	1c5a      	adds	r2, r3, #1
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	699b      	ldr	r3, [r3, #24]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d10b      	bne.n	800bec2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	095b      	lsrs	r3, r3, #5
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	8912      	ldrh	r2, [r2, #8]
 800beb2:	4293      	cmp	r3, r2
 800beb4:	f0c0 8088 	bcc.w	800bfc8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	61da      	str	r2, [r3, #28]
 800bebe:	2304      	movs	r3, #4
 800bec0:	e08f      	b.n	800bfe2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	0a5b      	lsrs	r3, r3, #9
 800bec6:	68fa      	ldr	r2, [r7, #12]
 800bec8:	8952      	ldrh	r2, [r2, #10]
 800beca:	3a01      	subs	r2, #1
 800becc:	4013      	ands	r3, r2
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d17a      	bne.n	800bfc8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	699b      	ldr	r3, [r3, #24]
 800bed8:	4619      	mov	r1, r3
 800beda:	4610      	mov	r0, r2
 800bedc:	f7ff fc83 	bl	800b7e6 <get_fat>
 800bee0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d801      	bhi.n	800beec <dir_next+0x8c>
 800bee8:	2302      	movs	r3, #2
 800beea:	e07a      	b.n	800bfe2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bef2:	d101      	bne.n	800bef8 <dir_next+0x98>
 800bef4:	2301      	movs	r3, #1
 800bef6:	e074      	b.n	800bfe2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	697a      	ldr	r2, [r7, #20]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d358      	bcc.n	800bfb4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d104      	bne.n	800bf12 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	61da      	str	r2, [r3, #28]
 800bf0e:	2304      	movs	r3, #4
 800bf10:	e067      	b.n	800bfe2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	699b      	ldr	r3, [r3, #24]
 800bf18:	4619      	mov	r1, r3
 800bf1a:	4610      	mov	r0, r2
 800bf1c:	f7ff fe59 	bl	800bbd2 <create_chain>
 800bf20:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d101      	bne.n	800bf2c <dir_next+0xcc>
 800bf28:	2307      	movs	r3, #7
 800bf2a:	e05a      	b.n	800bfe2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d101      	bne.n	800bf36 <dir_next+0xd6>
 800bf32:	2302      	movs	r3, #2
 800bf34:	e055      	b.n	800bfe2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf3c:	d101      	bne.n	800bf42 <dir_next+0xe2>
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e04f      	b.n	800bfe2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bf42:	68f8      	ldr	r0, [r7, #12]
 800bf44:	f7ff fb50 	bl	800b5e8 <sync_window>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d001      	beq.n	800bf52 <dir_next+0xf2>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e047      	b.n	800bfe2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	3330      	adds	r3, #48	@ 0x30
 800bf56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f7ff f979 	bl	800b254 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bf62:	2300      	movs	r3, #0
 800bf64:	613b      	str	r3, [r7, #16]
 800bf66:	6979      	ldr	r1, [r7, #20]
 800bf68:	68f8      	ldr	r0, [r7, #12]
 800bf6a:	f7ff fc1d 	bl	800b7a8 <clust2sect>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bf74:	e012      	b.n	800bf9c <dir_next+0x13c>
						fs->wflag = 1;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f7ff fb33 	bl	800b5e8 <sync_window>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d001      	beq.n	800bf8c <dir_next+0x12c>
 800bf88:	2301      	movs	r3, #1
 800bf8a:	e02a      	b.n	800bfe2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	613b      	str	r3, [r7, #16]
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf96:	1c5a      	adds	r2, r3, #1
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	895b      	ldrh	r3, [r3, #10]
 800bfa0:	461a      	mov	r2, r3
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d3e6      	bcc.n	800bf76 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	1ad2      	subs	r2, r2, r3
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	697a      	ldr	r2, [r7, #20]
 800bfb8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bfba:	6979      	ldr	r1, [r7, #20]
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f7ff fbf3 	bl	800b7a8 <clust2sect>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68ba      	ldr	r2, [r7, #8]
 800bfcc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfda:	441a      	add	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3718      	adds	r7, #24
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b086      	sub	sp, #24
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
 800bff2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bffa:	2100      	movs	r1, #0
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f7ff feb4 	bl	800bd6a <dir_sdi>
 800c002:	4603      	mov	r3, r0
 800c004:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c006:	7dfb      	ldrb	r3, [r7, #23]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d12b      	bne.n	800c064 <dir_alloc+0x7a>
		n = 0;
 800c00c:	2300      	movs	r3, #0
 800c00e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	69db      	ldr	r3, [r3, #28]
 800c014:	4619      	mov	r1, r3
 800c016:	68f8      	ldr	r0, [r7, #12]
 800c018:	f7ff fb2a 	bl	800b670 <move_window>
 800c01c:	4603      	mov	r3, r0
 800c01e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c020:	7dfb      	ldrb	r3, [r7, #23]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d11d      	bne.n	800c062 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a1b      	ldr	r3, [r3, #32]
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	2be5      	cmp	r3, #229	@ 0xe5
 800c02e:	d004      	beq.n	800c03a <dir_alloc+0x50>
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a1b      	ldr	r3, [r3, #32]
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d107      	bne.n	800c04a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	3301      	adds	r3, #1
 800c03e:	613b      	str	r3, [r7, #16]
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	429a      	cmp	r2, r3
 800c046:	d102      	bne.n	800c04e <dir_alloc+0x64>
 800c048:	e00c      	b.n	800c064 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c04a:	2300      	movs	r3, #0
 800c04c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c04e:	2101      	movs	r1, #1
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7ff ff05 	bl	800be60 <dir_next>
 800c056:	4603      	mov	r3, r0
 800c058:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c05a:	7dfb      	ldrb	r3, [r7, #23]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d0d7      	beq.n	800c010 <dir_alloc+0x26>
 800c060:	e000      	b.n	800c064 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c062:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c064:	7dfb      	ldrb	r3, [r7, #23]
 800c066:	2b04      	cmp	r3, #4
 800c068:	d101      	bne.n	800c06e <dir_alloc+0x84>
 800c06a:	2307      	movs	r3, #7
 800c06c:	75fb      	strb	r3, [r7, #23]
	return res;
 800c06e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3718      	adds	r7, #24
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}

0800c078 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b084      	sub	sp, #16
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	331a      	adds	r3, #26
 800c086:	4618      	mov	r0, r3
 800c088:	f7ff f840 	bl	800b10c <ld_word>
 800c08c:	4603      	mov	r3, r0
 800c08e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	781b      	ldrb	r3, [r3, #0]
 800c094:	2b03      	cmp	r3, #3
 800c096:	d109      	bne.n	800c0ac <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	3314      	adds	r3, #20
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7ff f835 	bl	800b10c <ld_word>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	041b      	lsls	r3, r3, #16
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b084      	sub	sp, #16
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	60f8      	str	r0, [r7, #12]
 800c0be:	60b9      	str	r1, [r7, #8]
 800c0c0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	331a      	adds	r3, #26
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	b292      	uxth	r2, r2
 800c0ca:	4611      	mov	r1, r2
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7ff f859 	bl	800b184 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	2b03      	cmp	r3, #3
 800c0d8:	d109      	bne.n	800c0ee <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	f103 0214 	add.w	r2, r3, #20
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	0c1b      	lsrs	r3, r3, #16
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	4610      	mov	r0, r2
 800c0ea:	f7ff f84b 	bl	800b184 <st_word>
	}
}
 800c0ee:	bf00      	nop
 800c0f0:	3710      	adds	r7, #16
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b086      	sub	sp, #24
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c104:	2100      	movs	r1, #0
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f7ff fe2f 	bl	800bd6a <dir_sdi>
 800c10c:	4603      	mov	r3, r0
 800c10e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c110:	7dfb      	ldrb	r3, [r7, #23]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d001      	beq.n	800c11a <dir_find+0x24>
 800c116:	7dfb      	ldrb	r3, [r7, #23]
 800c118:	e03e      	b.n	800c198 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	69db      	ldr	r3, [r3, #28]
 800c11e:	4619      	mov	r1, r3
 800c120:	6938      	ldr	r0, [r7, #16]
 800c122:	f7ff faa5 	bl	800b670 <move_window>
 800c126:	4603      	mov	r3, r0
 800c128:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c12a:	7dfb      	ldrb	r3, [r7, #23]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d12f      	bne.n	800c190 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6a1b      	ldr	r3, [r3, #32]
 800c134:	781b      	ldrb	r3, [r3, #0]
 800c136:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c138:	7bfb      	ldrb	r3, [r7, #15]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d102      	bne.n	800c144 <dir_find+0x4e>
 800c13e:	2304      	movs	r3, #4
 800c140:	75fb      	strb	r3, [r7, #23]
 800c142:	e028      	b.n	800c196 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6a1b      	ldr	r3, [r3, #32]
 800c148:	330b      	adds	r3, #11
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c150:	b2da      	uxtb	r2, r3
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a1b      	ldr	r3, [r3, #32]
 800c15a:	330b      	adds	r3, #11
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	f003 0308 	and.w	r3, r3, #8
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10a      	bne.n	800c17c <dir_find+0x86>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a18      	ldr	r0, [r3, #32]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	3324      	adds	r3, #36	@ 0x24
 800c16e:	220b      	movs	r2, #11
 800c170:	4619      	mov	r1, r3
 800c172:	f7ff f88a 	bl	800b28a <mem_cmp>
 800c176:	4603      	mov	r3, r0
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d00b      	beq.n	800c194 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c17c:	2100      	movs	r1, #0
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f7ff fe6e 	bl	800be60 <dir_next>
 800c184:	4603      	mov	r3, r0
 800c186:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c188:	7dfb      	ldrb	r3, [r7, #23]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d0c5      	beq.n	800c11a <dir_find+0x24>
 800c18e:	e002      	b.n	800c196 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c190:	bf00      	nop
 800c192:	e000      	b.n	800c196 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c194:	bf00      	nop

	return res;
 800c196:	7dfb      	ldrb	r3, [r7, #23]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3718      	adds	r7, #24
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c1ae:	2101      	movs	r1, #1
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff ff1a 	bl	800bfea <dir_alloc>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c1ba:	7bfb      	ldrb	r3, [r7, #15]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d11c      	bne.n	800c1fa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	69db      	ldr	r3, [r3, #28]
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	68b8      	ldr	r0, [r7, #8]
 800c1c8:	f7ff fa52 	bl	800b670 <move_window>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d111      	bne.n	800c1fa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6a1b      	ldr	r3, [r3, #32]
 800c1da:	2220      	movs	r2, #32
 800c1dc:	2100      	movs	r1, #0
 800c1de:	4618      	mov	r0, r3
 800c1e0:	f7ff f838 	bl	800b254 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a18      	ldr	r0, [r3, #32]
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	3324      	adds	r3, #36	@ 0x24
 800c1ec:	220b      	movs	r2, #11
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	f7ff f80f 	bl	800b212 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c1fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}

0800c204 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b088      	sub	sp, #32
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	60fb      	str	r3, [r7, #12]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	3324      	adds	r3, #36	@ 0x24
 800c218:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c21a:	220b      	movs	r2, #11
 800c21c:	2120      	movs	r1, #32
 800c21e:	68b8      	ldr	r0, [r7, #8]
 800c220:	f7ff f818 	bl	800b254 <mem_set>
	si = i = 0; ni = 8;
 800c224:	2300      	movs	r3, #0
 800c226:	613b      	str	r3, [r7, #16]
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	61fb      	str	r3, [r7, #28]
 800c22c:	2308      	movs	r3, #8
 800c22e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	1c5a      	adds	r2, r3, #1
 800c234:	61fa      	str	r2, [r7, #28]
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	4413      	add	r3, r2
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c23e:	7efb      	ldrb	r3, [r7, #27]
 800c240:	2b20      	cmp	r3, #32
 800c242:	d94e      	bls.n	800c2e2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c244:	7efb      	ldrb	r3, [r7, #27]
 800c246:	2b2f      	cmp	r3, #47	@ 0x2f
 800c248:	d006      	beq.n	800c258 <create_name+0x54>
 800c24a:	7efb      	ldrb	r3, [r7, #27]
 800c24c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c24e:	d110      	bne.n	800c272 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c250:	e002      	b.n	800c258 <create_name+0x54>
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	3301      	adds	r3, #1
 800c256:	61fb      	str	r3, [r7, #28]
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	4413      	add	r3, r2
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	2b2f      	cmp	r3, #47	@ 0x2f
 800c262:	d0f6      	beq.n	800c252 <create_name+0x4e>
 800c264:	68fa      	ldr	r2, [r7, #12]
 800c266:	69fb      	ldr	r3, [r7, #28]
 800c268:	4413      	add	r3, r2
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	2b5c      	cmp	r3, #92	@ 0x5c
 800c26e:	d0f0      	beq.n	800c252 <create_name+0x4e>
			break;
 800c270:	e038      	b.n	800c2e4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c272:	7efb      	ldrb	r3, [r7, #27]
 800c274:	2b2e      	cmp	r3, #46	@ 0x2e
 800c276:	d003      	beq.n	800c280 <create_name+0x7c>
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	697b      	ldr	r3, [r7, #20]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d30c      	bcc.n	800c29a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	2b0b      	cmp	r3, #11
 800c284:	d002      	beq.n	800c28c <create_name+0x88>
 800c286:	7efb      	ldrb	r3, [r7, #27]
 800c288:	2b2e      	cmp	r3, #46	@ 0x2e
 800c28a:	d001      	beq.n	800c290 <create_name+0x8c>
 800c28c:	2306      	movs	r3, #6
 800c28e:	e044      	b.n	800c31a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c290:	2308      	movs	r3, #8
 800c292:	613b      	str	r3, [r7, #16]
 800c294:	230b      	movs	r3, #11
 800c296:	617b      	str	r3, [r7, #20]
			continue;
 800c298:	e022      	b.n	800c2e0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c29a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	da04      	bge.n	800c2ac <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c2a2:	7efb      	ldrb	r3, [r7, #27]
 800c2a4:	3b80      	subs	r3, #128	@ 0x80
 800c2a6:	4a1f      	ldr	r2, [pc, #124]	@ (800c324 <create_name+0x120>)
 800c2a8:	5cd3      	ldrb	r3, [r2, r3]
 800c2aa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c2ac:	7efb      	ldrb	r3, [r7, #27]
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	481d      	ldr	r0, [pc, #116]	@ (800c328 <create_name+0x124>)
 800c2b2:	f7ff f811 	bl	800b2d8 <chk_chr>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d001      	beq.n	800c2c0 <create_name+0xbc>
 800c2bc:	2306      	movs	r3, #6
 800c2be:	e02c      	b.n	800c31a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c2c0:	7efb      	ldrb	r3, [r7, #27]
 800c2c2:	2b60      	cmp	r3, #96	@ 0x60
 800c2c4:	d905      	bls.n	800c2d2 <create_name+0xce>
 800c2c6:	7efb      	ldrb	r3, [r7, #27]
 800c2c8:	2b7a      	cmp	r3, #122	@ 0x7a
 800c2ca:	d802      	bhi.n	800c2d2 <create_name+0xce>
 800c2cc:	7efb      	ldrb	r3, [r7, #27]
 800c2ce:	3b20      	subs	r3, #32
 800c2d0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	1c5a      	adds	r2, r3, #1
 800c2d6:	613a      	str	r2, [r7, #16]
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	4413      	add	r3, r2
 800c2dc:	7efa      	ldrb	r2, [r7, #27]
 800c2de:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c2e0:	e7a6      	b.n	800c230 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c2e2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	441a      	add	r2, r3
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d101      	bne.n	800c2f8 <create_name+0xf4>
 800c2f4:	2306      	movs	r3, #6
 800c2f6:	e010      	b.n	800c31a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c2f8:	68bb      	ldr	r3, [r7, #8]
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	2be5      	cmp	r3, #229	@ 0xe5
 800c2fe:	d102      	bne.n	800c306 <create_name+0x102>
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	2205      	movs	r2, #5
 800c304:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c306:	7efb      	ldrb	r3, [r7, #27]
 800c308:	2b20      	cmp	r3, #32
 800c30a:	d801      	bhi.n	800c310 <create_name+0x10c>
 800c30c:	2204      	movs	r2, #4
 800c30e:	e000      	b.n	800c312 <create_name+0x10e>
 800c310:	2200      	movs	r2, #0
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	330b      	adds	r3, #11
 800c316:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c318:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3720      	adds	r7, #32
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	0800e044 	.word	0x0800e044
 800c328:	0800ddf8 	.word	0x0800ddf8

0800c32c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b086      	sub	sp, #24
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c340:	e002      	b.n	800c348 <follow_path+0x1c>
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	3301      	adds	r3, #1
 800c346:	603b      	str	r3, [r7, #0]
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c34e:	d0f8      	beq.n	800c342 <follow_path+0x16>
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	2b5c      	cmp	r3, #92	@ 0x5c
 800c356:	d0f4      	beq.n	800c342 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	2200      	movs	r2, #0
 800c35c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	2b1f      	cmp	r3, #31
 800c364:	d80a      	bhi.n	800c37c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2280      	movs	r2, #128	@ 0x80
 800c36a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c36e:	2100      	movs	r1, #0
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7ff fcfa 	bl	800bd6a <dir_sdi>
 800c376:	4603      	mov	r3, r0
 800c378:	75fb      	strb	r3, [r7, #23]
 800c37a:	e043      	b.n	800c404 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c37c:	463b      	mov	r3, r7
 800c37e:	4619      	mov	r1, r3
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f7ff ff3f 	bl	800c204 <create_name>
 800c386:	4603      	mov	r3, r0
 800c388:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c38a:	7dfb      	ldrb	r3, [r7, #23]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d134      	bne.n	800c3fa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f7ff feb0 	bl	800c0f6 <dir_find>
 800c396:	4603      	mov	r3, r0
 800c398:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c3a0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c3a2:	7dfb      	ldrb	r3, [r7, #23]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d00a      	beq.n	800c3be <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c3a8:	7dfb      	ldrb	r3, [r7, #23]
 800c3aa:	2b04      	cmp	r3, #4
 800c3ac:	d127      	bne.n	800c3fe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c3ae:	7afb      	ldrb	r3, [r7, #11]
 800c3b0:	f003 0304 	and.w	r3, r3, #4
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d122      	bne.n	800c3fe <follow_path+0xd2>
 800c3b8:	2305      	movs	r3, #5
 800c3ba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c3bc:	e01f      	b.n	800c3fe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c3be:	7afb      	ldrb	r3, [r7, #11]
 800c3c0:	f003 0304 	and.w	r3, r3, #4
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d11c      	bne.n	800c402 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	799b      	ldrb	r3, [r3, #6]
 800c3cc:	f003 0310 	and.w	r3, r3, #16
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d102      	bne.n	800c3da <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c3d4:	2305      	movs	r3, #5
 800c3d6:	75fb      	strb	r3, [r7, #23]
 800c3d8:	e014      	b.n	800c404 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	695b      	ldr	r3, [r3, #20]
 800c3e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3e8:	4413      	add	r3, r2
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	68f8      	ldr	r0, [r7, #12]
 800c3ee:	f7ff fe43 	bl	800c078 <ld_clust>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c3f8:	e7c0      	b.n	800c37c <follow_path+0x50>
			if (res != FR_OK) break;
 800c3fa:	bf00      	nop
 800c3fc:	e002      	b.n	800c404 <follow_path+0xd8>
				break;
 800c3fe:	bf00      	nop
 800c400:	e000      	b.n	800c404 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c402:	bf00      	nop
			}
		}
	}

	return res;
 800c404:	7dfb      	ldrb	r3, [r7, #23]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3718      	adds	r7, #24
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c40e:	b480      	push	{r7}
 800c410:	b087      	sub	sp, #28
 800c412:	af00      	add	r7, sp, #0
 800c414:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c416:	f04f 33ff 	mov.w	r3, #4294967295
 800c41a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d031      	beq.n	800c488 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	617b      	str	r3, [r7, #20]
 800c42a:	e002      	b.n	800c432 <get_ldnumber+0x24>
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	3301      	adds	r3, #1
 800c430:	617b      	str	r3, [r7, #20]
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	2b20      	cmp	r3, #32
 800c438:	d903      	bls.n	800c442 <get_ldnumber+0x34>
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	2b3a      	cmp	r3, #58	@ 0x3a
 800c440:	d1f4      	bne.n	800c42c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c442:	697b      	ldr	r3, [r7, #20]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	2b3a      	cmp	r3, #58	@ 0x3a
 800c448:	d11c      	bne.n	800c484 <get_ldnumber+0x76>
			tp = *path;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	1c5a      	adds	r2, r3, #1
 800c454:	60fa      	str	r2, [r7, #12]
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	3b30      	subs	r3, #48	@ 0x30
 800c45a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	2b09      	cmp	r3, #9
 800c460:	d80e      	bhi.n	800c480 <get_ldnumber+0x72>
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	429a      	cmp	r2, r3
 800c468:	d10a      	bne.n	800c480 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d107      	bne.n	800c480 <get_ldnumber+0x72>
					vol = (int)i;
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	3301      	adds	r3, #1
 800c478:	617b      	str	r3, [r7, #20]
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	697a      	ldr	r2, [r7, #20]
 800c47e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	e002      	b.n	800c48a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c484:	2300      	movs	r3, #0
 800c486:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c488:	693b      	ldr	r3, [r7, #16]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	371c      	adds	r7, #28
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
	...

0800c498 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	70da      	strb	r2, [r3, #3]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c4ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c4b0:	6839      	ldr	r1, [r7, #0]
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7ff f8dc 	bl	800b670 <move_window>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d001      	beq.n	800c4c2 <check_fs+0x2a>
 800c4be:	2304      	movs	r3, #4
 800c4c0:	e038      	b.n	800c534 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	3330      	adds	r3, #48	@ 0x30
 800c4c6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7fe fe1e 	bl	800b10c <ld_word>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d001      	beq.n	800c4e0 <check_fs+0x48>
 800c4dc:	2303      	movs	r3, #3
 800c4de:	e029      	b.n	800c534 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c4e6:	2be9      	cmp	r3, #233	@ 0xe9
 800c4e8:	d009      	beq.n	800c4fe <check_fs+0x66>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c4f0:	2beb      	cmp	r3, #235	@ 0xeb
 800c4f2:	d11e      	bne.n	800c532 <check_fs+0x9a>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c4fa:	2b90      	cmp	r3, #144	@ 0x90
 800c4fc:	d119      	bne.n	800c532 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	3330      	adds	r3, #48	@ 0x30
 800c502:	3336      	adds	r3, #54	@ 0x36
 800c504:	4618      	mov	r0, r3
 800c506:	f7fe fe1a 	bl	800b13e <ld_dword>
 800c50a:	4603      	mov	r3, r0
 800c50c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c510:	4a0a      	ldr	r2, [pc, #40]	@ (800c53c <check_fs+0xa4>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d101      	bne.n	800c51a <check_fs+0x82>
 800c516:	2300      	movs	r3, #0
 800c518:	e00c      	b.n	800c534 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	3330      	adds	r3, #48	@ 0x30
 800c51e:	3352      	adds	r3, #82	@ 0x52
 800c520:	4618      	mov	r0, r3
 800c522:	f7fe fe0c 	bl	800b13e <ld_dword>
 800c526:	4603      	mov	r3, r0
 800c528:	4a05      	ldr	r2, [pc, #20]	@ (800c540 <check_fs+0xa8>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d101      	bne.n	800c532 <check_fs+0x9a>
 800c52e:	2300      	movs	r3, #0
 800c530:	e000      	b.n	800c534 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c532:	2302      	movs	r3, #2
}
 800c534:	4618      	mov	r0, r3
 800c536:	3708      	adds	r7, #8
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	00544146 	.word	0x00544146
 800c540:	33544146 	.word	0x33544146

0800c544 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b096      	sub	sp, #88	@ 0x58
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	4613      	mov	r3, r2
 800c550:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	2200      	movs	r2, #0
 800c556:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c558:	68f8      	ldr	r0, [r7, #12]
 800c55a:	f7ff ff58 	bl	800c40e <get_ldnumber>
 800c55e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c562:	2b00      	cmp	r3, #0
 800c564:	da01      	bge.n	800c56a <find_volume+0x26>
 800c566:	230b      	movs	r3, #11
 800c568:	e22d      	b.n	800c9c6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c56a:	4aa1      	ldr	r2, [pc, #644]	@ (800c7f0 <find_volume+0x2ac>)
 800c56c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c56e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c572:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c576:	2b00      	cmp	r3, #0
 800c578:	d101      	bne.n	800c57e <find_volume+0x3a>
 800c57a:	230c      	movs	r3, #12
 800c57c:	e223      	b.n	800c9c6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c582:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c584:	79fb      	ldrb	r3, [r7, #7]
 800c586:	f023 0301 	bic.w	r3, r3, #1
 800c58a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d01a      	beq.n	800c5ca <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c596:	785b      	ldrb	r3, [r3, #1]
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fe fd17 	bl	800afcc <disk_status>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c5a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c5a8:	f003 0301 	and.w	r3, r3, #1
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d10c      	bne.n	800c5ca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c5b0:	79fb      	ldrb	r3, [r7, #7]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d007      	beq.n	800c5c6 <find_volume+0x82>
 800c5b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c5ba:	f003 0304 	and.w	r3, r3, #4
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d001      	beq.n	800c5c6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c5c2:	230a      	movs	r3, #10
 800c5c4:	e1ff      	b.n	800c9c6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	e1fd      	b.n	800c9c6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c5d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5d2:	b2da      	uxtb	r2, r3
 800c5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5da:	785b      	ldrb	r3, [r3, #1]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fe fd0f 	bl	800b000 <disk_initialize>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c5e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c5ec:	f003 0301 	and.w	r3, r3, #1
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d001      	beq.n	800c5f8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c5f4:	2303      	movs	r3, #3
 800c5f6:	e1e6      	b.n	800c9c6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c5f8:	79fb      	ldrb	r3, [r7, #7]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d007      	beq.n	800c60e <find_volume+0xca>
 800c5fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c602:	f003 0304 	and.w	r3, r3, #4
 800c606:	2b00      	cmp	r3, #0
 800c608:	d001      	beq.n	800c60e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c60a:	230a      	movs	r3, #10
 800c60c:	e1db      	b.n	800c9c6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c60e:	2300      	movs	r3, #0
 800c610:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c612:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c614:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c616:	f7ff ff3f 	bl	800c498 <check_fs>
 800c61a:	4603      	mov	r3, r0
 800c61c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c620:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c624:	2b02      	cmp	r3, #2
 800c626:	d149      	bne.n	800c6bc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c628:	2300      	movs	r3, #0
 800c62a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c62c:	e01e      	b.n	800c66c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c630:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c634:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c636:	011b      	lsls	r3, r3, #4
 800c638:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c63c:	4413      	add	r3, r2
 800c63e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c642:	3304      	adds	r3, #4
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d006      	beq.n	800c658 <find_volume+0x114>
 800c64a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c64c:	3308      	adds	r3, #8
 800c64e:	4618      	mov	r0, r3
 800c650:	f7fe fd75 	bl	800b13e <ld_dword>
 800c654:	4602      	mov	r2, r0
 800c656:	e000      	b.n	800c65a <find_volume+0x116>
 800c658:	2200      	movs	r2, #0
 800c65a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c65c:	009b      	lsls	r3, r3, #2
 800c65e:	3358      	adds	r3, #88	@ 0x58
 800c660:	443b      	add	r3, r7
 800c662:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c668:	3301      	adds	r3, #1
 800c66a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c66c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c66e:	2b03      	cmp	r3, #3
 800c670:	d9dd      	bls.n	800c62e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c672:	2300      	movs	r3, #0
 800c674:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d002      	beq.n	800c682 <find_volume+0x13e>
 800c67c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c67e:	3b01      	subs	r3, #1
 800c680:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	3358      	adds	r3, #88	@ 0x58
 800c688:	443b      	add	r3, r7
 800c68a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c68e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c692:	2b00      	cmp	r3, #0
 800c694:	d005      	beq.n	800c6a2 <find_volume+0x15e>
 800c696:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c698:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c69a:	f7ff fefd 	bl	800c498 <check_fs>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	e000      	b.n	800c6a4 <find_volume+0x160>
 800c6a2:	2303      	movs	r3, #3
 800c6a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c6a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d905      	bls.n	800c6bc <find_volume+0x178>
 800c6b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6b8:	2b03      	cmp	r3, #3
 800c6ba:	d9e2      	bls.n	800c682 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c6bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c6c0:	2b04      	cmp	r3, #4
 800c6c2:	d101      	bne.n	800c6c8 <find_volume+0x184>
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	e17e      	b.n	800c9c6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c6c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d901      	bls.n	800c6d4 <find_volume+0x190>
 800c6d0:	230d      	movs	r3, #13
 800c6d2:	e178      	b.n	800c9c6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d6:	3330      	adds	r3, #48	@ 0x30
 800c6d8:	330b      	adds	r3, #11
 800c6da:	4618      	mov	r0, r3
 800c6dc:	f7fe fd16 	bl	800b10c <ld_word>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6e6:	d001      	beq.n	800c6ec <find_volume+0x1a8>
 800c6e8:	230d      	movs	r3, #13
 800c6ea:	e16c      	b.n	800c9c6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6ee:	3330      	adds	r3, #48	@ 0x30
 800c6f0:	3316      	adds	r3, #22
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	f7fe fd0a 	bl	800b10c <ld_word>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c6fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d106      	bne.n	800c710 <find_volume+0x1cc>
 800c702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c704:	3330      	adds	r3, #48	@ 0x30
 800c706:	3324      	adds	r3, #36	@ 0x24
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fe fd18 	bl	800b13e <ld_dword>
 800c70e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c712:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c714:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c718:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c71c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c71e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c722:	789b      	ldrb	r3, [r3, #2]
 800c724:	2b01      	cmp	r3, #1
 800c726:	d005      	beq.n	800c734 <find_volume+0x1f0>
 800c728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c72a:	789b      	ldrb	r3, [r3, #2]
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	d001      	beq.n	800c734 <find_volume+0x1f0>
 800c730:	230d      	movs	r3, #13
 800c732:	e148      	b.n	800c9c6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c736:	789b      	ldrb	r3, [r3, #2]
 800c738:	461a      	mov	r2, r3
 800c73a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c73c:	fb02 f303 	mul.w	r3, r2, r3
 800c740:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c748:	461a      	mov	r2, r3
 800c74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c750:	895b      	ldrh	r3, [r3, #10]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d008      	beq.n	800c768 <find_volume+0x224>
 800c756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c758:	895b      	ldrh	r3, [r3, #10]
 800c75a:	461a      	mov	r2, r3
 800c75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75e:	895b      	ldrh	r3, [r3, #10]
 800c760:	3b01      	subs	r3, #1
 800c762:	4013      	ands	r3, r2
 800c764:	2b00      	cmp	r3, #0
 800c766:	d001      	beq.n	800c76c <find_volume+0x228>
 800c768:	230d      	movs	r3, #13
 800c76a:	e12c      	b.n	800c9c6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76e:	3330      	adds	r3, #48	@ 0x30
 800c770:	3311      	adds	r3, #17
 800c772:	4618      	mov	r0, r3
 800c774:	f7fe fcca 	bl	800b10c <ld_word>
 800c778:	4603      	mov	r3, r0
 800c77a:	461a      	mov	r2, r3
 800c77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c782:	891b      	ldrh	r3, [r3, #8]
 800c784:	f003 030f 	and.w	r3, r3, #15
 800c788:	b29b      	uxth	r3, r3
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d001      	beq.n	800c792 <find_volume+0x24e>
 800c78e:	230d      	movs	r3, #13
 800c790:	e119      	b.n	800c9c6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c794:	3330      	adds	r3, #48	@ 0x30
 800c796:	3313      	adds	r3, #19
 800c798:	4618      	mov	r0, r3
 800c79a:	f7fe fcb7 	bl	800b10c <ld_word>
 800c79e:	4603      	mov	r3, r0
 800c7a0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c7a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d106      	bne.n	800c7b6 <find_volume+0x272>
 800c7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7aa:	3330      	adds	r3, #48	@ 0x30
 800c7ac:	3320      	adds	r3, #32
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f7fe fcc5 	bl	800b13e <ld_dword>
 800c7b4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c7b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b8:	3330      	adds	r3, #48	@ 0x30
 800c7ba:	330e      	adds	r3, #14
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7fe fca5 	bl	800b10c <ld_word>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c7c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d101      	bne.n	800c7d0 <find_volume+0x28c>
 800c7cc:	230d      	movs	r3, #13
 800c7ce:	e0fa      	b.n	800c9c6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c7d0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c7d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7d4:	4413      	add	r3, r2
 800c7d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7d8:	8912      	ldrh	r2, [r2, #8]
 800c7da:	0912      	lsrs	r2, r2, #4
 800c7dc:	b292      	uxth	r2, r2
 800c7de:	4413      	add	r3, r2
 800c7e0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c7e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d204      	bcs.n	800c7f4 <find_volume+0x2b0>
 800c7ea:	230d      	movs	r3, #13
 800c7ec:	e0eb      	b.n	800c9c6 <find_volume+0x482>
 800c7ee:	bf00      	nop
 800c7f0:	200002fc 	.word	0x200002fc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c7f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f8:	1ad3      	subs	r3, r2, r3
 800c7fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7fc:	8952      	ldrh	r2, [r2, #10]
 800c7fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800c802:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c806:	2b00      	cmp	r3, #0
 800c808:	d101      	bne.n	800c80e <find_volume+0x2ca>
 800c80a:	230d      	movs	r3, #13
 800c80c:	e0db      	b.n	800c9c6 <find_volume+0x482>
		fmt = FS_FAT32;
 800c80e:	2303      	movs	r3, #3
 800c810:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c816:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d802      	bhi.n	800c824 <find_volume+0x2e0>
 800c81e:	2302      	movs	r3, #2
 800c820:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c826:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d802      	bhi.n	800c834 <find_volume+0x2f0>
 800c82e:	2301      	movs	r3, #1
 800c830:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c836:	1c9a      	adds	r2, r3, #2
 800c838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c83a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c83e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c840:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c842:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c844:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c846:	441a      	add	r2, r3
 800c848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c84a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c84c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c850:	441a      	add	r2, r3
 800c852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c854:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800c856:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c85a:	2b03      	cmp	r3, #3
 800c85c:	d11e      	bne.n	800c89c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c860:	3330      	adds	r3, #48	@ 0x30
 800c862:	332a      	adds	r3, #42	@ 0x2a
 800c864:	4618      	mov	r0, r3
 800c866:	f7fe fc51 	bl	800b10c <ld_word>
 800c86a:	4603      	mov	r3, r0
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d001      	beq.n	800c874 <find_volume+0x330>
 800c870:	230d      	movs	r3, #13
 800c872:	e0a8      	b.n	800c9c6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c876:	891b      	ldrh	r3, [r3, #8]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d001      	beq.n	800c880 <find_volume+0x33c>
 800c87c:	230d      	movs	r3, #13
 800c87e:	e0a2      	b.n	800c9c6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c882:	3330      	adds	r3, #48	@ 0x30
 800c884:	332c      	adds	r3, #44	@ 0x2c
 800c886:	4618      	mov	r0, r3
 800c888:	f7fe fc59 	bl	800b13e <ld_dword>
 800c88c:	4602      	mov	r2, r0
 800c88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c890:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c894:	695b      	ldr	r3, [r3, #20]
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	647b      	str	r3, [r7, #68]	@ 0x44
 800c89a:	e01f      	b.n	800c8dc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c89c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c89e:	891b      	ldrh	r3, [r3, #8]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d101      	bne.n	800c8a8 <find_volume+0x364>
 800c8a4:	230d      	movs	r3, #13
 800c8a6:	e08e      	b.n	800c9c6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8aa:	6a1a      	ldr	r2, [r3, #32]
 800c8ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c8ae:	441a      	add	r2, r3
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c8b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	d103      	bne.n	800c8c4 <find_volume+0x380>
 800c8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8be:	695b      	ldr	r3, [r3, #20]
 800c8c0:	005b      	lsls	r3, r3, #1
 800c8c2:	e00a      	b.n	800c8da <find_volume+0x396>
 800c8c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8c6:	695a      	ldr	r2, [r3, #20]
 800c8c8:	4613      	mov	r3, r2
 800c8ca:	005b      	lsls	r3, r3, #1
 800c8cc:	4413      	add	r3, r2
 800c8ce:	085a      	lsrs	r2, r3, #1
 800c8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d2:	695b      	ldr	r3, [r3, #20]
 800c8d4:	f003 0301 	and.w	r3, r3, #1
 800c8d8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c8da:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c8dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8de:	699a      	ldr	r2, [r3, #24]
 800c8e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8e2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c8e6:	0a5b      	lsrs	r3, r3, #9
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d201      	bcs.n	800c8f0 <find_volume+0x3ac>
 800c8ec:	230d      	movs	r3, #13
 800c8ee:	e06a      	b.n	800c9c6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c8f6:	611a      	str	r2, [r3, #16]
 800c8f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8fa:	691a      	ldr	r2, [r3, #16]
 800c8fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8fe:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c902:	2280      	movs	r2, #128	@ 0x80
 800c904:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c906:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c90a:	2b03      	cmp	r3, #3
 800c90c:	d149      	bne.n	800c9a2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c910:	3330      	adds	r3, #48	@ 0x30
 800c912:	3330      	adds	r3, #48	@ 0x30
 800c914:	4618      	mov	r0, r3
 800c916:	f7fe fbf9 	bl	800b10c <ld_word>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	d140      	bne.n	800c9a2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c920:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c922:	3301      	adds	r3, #1
 800c924:	4619      	mov	r1, r3
 800c926:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c928:	f7fe fea2 	bl	800b670 <move_window>
 800c92c:	4603      	mov	r3, r0
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d137      	bne.n	800c9a2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c934:	2200      	movs	r2, #0
 800c936:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c93a:	3330      	adds	r3, #48	@ 0x30
 800c93c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c940:	4618      	mov	r0, r3
 800c942:	f7fe fbe3 	bl	800b10c <ld_word>
 800c946:	4603      	mov	r3, r0
 800c948:	461a      	mov	r2, r3
 800c94a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c94e:	429a      	cmp	r2, r3
 800c950:	d127      	bne.n	800c9a2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c954:	3330      	adds	r3, #48	@ 0x30
 800c956:	4618      	mov	r0, r3
 800c958:	f7fe fbf1 	bl	800b13e <ld_dword>
 800c95c:	4603      	mov	r3, r0
 800c95e:	4a1c      	ldr	r2, [pc, #112]	@ (800c9d0 <find_volume+0x48c>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d11e      	bne.n	800c9a2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c966:	3330      	adds	r3, #48	@ 0x30
 800c968:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7fe fbe6 	bl	800b13e <ld_dword>
 800c972:	4603      	mov	r3, r0
 800c974:	4a17      	ldr	r2, [pc, #92]	@ (800c9d4 <find_volume+0x490>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d113      	bne.n	800c9a2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c97c:	3330      	adds	r3, #48	@ 0x30
 800c97e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c982:	4618      	mov	r0, r3
 800c984:	f7fe fbdb 	bl	800b13e <ld_dword>
 800c988:	4602      	mov	r2, r0
 800c98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c98c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c990:	3330      	adds	r3, #48	@ 0x30
 800c992:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c996:	4618      	mov	r0, r3
 800c998:	f7fe fbd1 	bl	800b13e <ld_dword>
 800c99c:	4602      	mov	r2, r0
 800c99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9a4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800c9a8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c9aa:	4b0b      	ldr	r3, [pc, #44]	@ (800c9d8 <find_volume+0x494>)
 800c9ac:	881b      	ldrh	r3, [r3, #0]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	b29a      	uxth	r2, r3
 800c9b2:	4b09      	ldr	r3, [pc, #36]	@ (800c9d8 <find_volume+0x494>)
 800c9b4:	801a      	strh	r2, [r3, #0]
 800c9b6:	4b08      	ldr	r3, [pc, #32]	@ (800c9d8 <find_volume+0x494>)
 800c9b8:	881a      	ldrh	r2, [r3, #0]
 800c9ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9bc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c9be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c9c0:	f7fe fdee 	bl	800b5a0 <clear_lock>
#endif
	return FR_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3758      	adds	r7, #88	@ 0x58
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	41615252 	.word	0x41615252
 800c9d4:	61417272 	.word	0x61417272
 800c9d8:	20000300 	.word	0x20000300

0800c9dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b084      	sub	sp, #16
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c9e6:	2309      	movs	r3, #9
 800c9e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d01c      	beq.n	800ca2a <validate+0x4e>
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d018      	beq.n	800ca2a <validate+0x4e>
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d013      	beq.n	800ca2a <validate+0x4e>
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	889a      	ldrh	r2, [r3, #4]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	88db      	ldrh	r3, [r3, #6]
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d10c      	bne.n	800ca2a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	785b      	ldrb	r3, [r3, #1]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7fe fad8 	bl	800afcc <disk_status>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	f003 0301 	and.w	r3, r3, #1
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d101      	bne.n	800ca2a <validate+0x4e>
			res = FR_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ca2a:	7bfb      	ldrb	r3, [r7, #15]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d102      	bne.n	800ca36 <validate+0x5a>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	e000      	b.n	800ca38 <validate+0x5c>
 800ca36:	2300      	movs	r3, #0
 800ca38:	683a      	ldr	r2, [r7, #0]
 800ca3a:	6013      	str	r3, [r2, #0]
	return res;
 800ca3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3710      	adds	r7, #16
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
	...

0800ca48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b088      	sub	sp, #32
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	4613      	mov	r3, r2
 800ca54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ca5a:	f107 0310 	add.w	r3, r7, #16
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f7ff fcd5 	bl	800c40e <get_ldnumber>
 800ca64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ca66:	69fb      	ldr	r3, [r7, #28]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	da01      	bge.n	800ca70 <f_mount+0x28>
 800ca6c:	230b      	movs	r3, #11
 800ca6e:	e02b      	b.n	800cac8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ca70:	4a17      	ldr	r2, [pc, #92]	@ (800cad0 <f_mount+0x88>)
 800ca72:	69fb      	ldr	r3, [r7, #28]
 800ca74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d005      	beq.n	800ca8c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ca80:	69b8      	ldr	r0, [r7, #24]
 800ca82:	f7fe fd8d 	bl	800b5a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ca86:	69bb      	ldr	r3, [r7, #24]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d002      	beq.n	800ca98 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2200      	movs	r2, #0
 800ca96:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ca98:	68fa      	ldr	r2, [r7, #12]
 800ca9a:	490d      	ldr	r1, [pc, #52]	@ (800cad0 <f_mount+0x88>)
 800ca9c:	69fb      	ldr	r3, [r7, #28]
 800ca9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d002      	beq.n	800caae <f_mount+0x66>
 800caa8:	79fb      	ldrb	r3, [r7, #7]
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d001      	beq.n	800cab2 <f_mount+0x6a>
 800caae:	2300      	movs	r3, #0
 800cab0:	e00a      	b.n	800cac8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cab2:	f107 010c 	add.w	r1, r7, #12
 800cab6:	f107 0308 	add.w	r3, r7, #8
 800caba:	2200      	movs	r2, #0
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7ff fd41 	bl	800c544 <find_volume>
 800cac2:	4603      	mov	r3, r0
 800cac4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cac6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3720      	adds	r7, #32
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	200002fc 	.word	0x200002fc

0800cad4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b098      	sub	sp, #96	@ 0x60
 800cad8:	af00      	add	r7, sp, #0
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	4613      	mov	r3, r2
 800cae0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d101      	bne.n	800caec <f_open+0x18>
 800cae8:	2309      	movs	r3, #9
 800caea:	e1a9      	b.n	800ce40 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800caec:	79fb      	ldrb	r3, [r7, #7]
 800caee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800caf2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800caf4:	79fa      	ldrb	r2, [r7, #7]
 800caf6:	f107 0110 	add.w	r1, r7, #16
 800cafa:	f107 0308 	add.w	r3, r7, #8
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7ff fd20 	bl	800c544 <find_volume>
 800cb04:	4603      	mov	r3, r0
 800cb06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800cb0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	f040 818d 	bne.w	800ce2e <f_open+0x35a>
		dj.obj.fs = fs;
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cb18:	68ba      	ldr	r2, [r7, #8]
 800cb1a:	f107 0314 	add.w	r3, r7, #20
 800cb1e:	4611      	mov	r1, r2
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7ff fc03 	bl	800c32c <follow_path>
 800cb26:	4603      	mov	r3, r0
 800cb28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cb2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d118      	bne.n	800cb66 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cb34:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cb38:	b25b      	sxtb	r3, r3
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	da03      	bge.n	800cb46 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cb3e:	2306      	movs	r3, #6
 800cb40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cb44:	e00f      	b.n	800cb66 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cb46:	79fb      	ldrb	r3, [r7, #7]
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	bf8c      	ite	hi
 800cb4c:	2301      	movhi	r3, #1
 800cb4e:	2300      	movls	r3, #0
 800cb50:	b2db      	uxtb	r3, r3
 800cb52:	461a      	mov	r2, r3
 800cb54:	f107 0314 	add.w	r3, r7, #20
 800cb58:	4611      	mov	r1, r2
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fe fbd8 	bl	800b310 <chk_lock>
 800cb60:	4603      	mov	r3, r0
 800cb62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cb66:	79fb      	ldrb	r3, [r7, #7]
 800cb68:	f003 031c 	and.w	r3, r3, #28
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d07f      	beq.n	800cc70 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800cb70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d017      	beq.n	800cba8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cb78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb7c:	2b04      	cmp	r3, #4
 800cb7e:	d10e      	bne.n	800cb9e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cb80:	f7fe fc22 	bl	800b3c8 <enq_lock>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d006      	beq.n	800cb98 <f_open+0xc4>
 800cb8a:	f107 0314 	add.w	r3, r7, #20
 800cb8e:	4618      	mov	r0, r3
 800cb90:	f7ff fb06 	bl	800c1a0 <dir_register>
 800cb94:	4603      	mov	r3, r0
 800cb96:	e000      	b.n	800cb9a <f_open+0xc6>
 800cb98:	2312      	movs	r3, #18
 800cb9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cb9e:	79fb      	ldrb	r3, [r7, #7]
 800cba0:	f043 0308 	orr.w	r3, r3, #8
 800cba4:	71fb      	strb	r3, [r7, #7]
 800cba6:	e010      	b.n	800cbca <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cba8:	7ebb      	ldrb	r3, [r7, #26]
 800cbaa:	f003 0311 	and.w	r3, r3, #17
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d003      	beq.n	800cbba <f_open+0xe6>
					res = FR_DENIED;
 800cbb2:	2307      	movs	r3, #7
 800cbb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cbb8:	e007      	b.n	800cbca <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cbba:	79fb      	ldrb	r3, [r7, #7]
 800cbbc:	f003 0304 	and.w	r3, r3, #4
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <f_open+0xf6>
 800cbc4:	2308      	movs	r3, #8
 800cbc6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cbca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d168      	bne.n	800cca4 <f_open+0x1d0>
 800cbd2:	79fb      	ldrb	r3, [r7, #7]
 800cbd4:	f003 0308 	and.w	r3, r3, #8
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d063      	beq.n	800cca4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800cbdc:	f7fe f83c 	bl	800ac58 <get_fattime>
 800cbe0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cbe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbe4:	330e      	adds	r3, #14
 800cbe6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cbe8:	4618      	mov	r0, r3
 800cbea:	f7fe fae6 	bl	800b1ba <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cbee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbf0:	3316      	adds	r3, #22
 800cbf2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7fe fae0 	bl	800b1ba <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cbfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbfc:	330b      	adds	r3, #11
 800cbfe:	2220      	movs	r2, #32
 800cc00:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc06:	4611      	mov	r1, r2
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7ff fa35 	bl	800c078 <ld_clust>
 800cc0e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cc10:	693b      	ldr	r3, [r7, #16]
 800cc12:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cc14:	2200      	movs	r2, #0
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7ff fa4d 	bl	800c0b6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cc1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc1e:	331c      	adds	r3, #28
 800cc20:	2100      	movs	r1, #0
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fe fac9 	bl	800b1ba <st_dword>
					fs->wflag = 1;
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	2201      	movs	r2, #1
 800cc2c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cc2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d037      	beq.n	800cca4 <f_open+0x1d0>
						dw = fs->winsect;
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc38:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cc3a:	f107 0314 	add.w	r3, r7, #20
 800cc3e:	2200      	movs	r2, #0
 800cc40:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7fe ff60 	bl	800bb08 <remove_chain>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800cc4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d126      	bne.n	800cca4 <f_open+0x1d0>
							res = move_window(fs, dw);
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7fe fd08 	bl	800b670 <move_window>
 800cc60:	4603      	mov	r3, r0
 800cc62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cc6a:	3a01      	subs	r2, #1
 800cc6c:	60da      	str	r2, [r3, #12]
 800cc6e:	e019      	b.n	800cca4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cc70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d115      	bne.n	800cca4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cc78:	7ebb      	ldrb	r3, [r7, #26]
 800cc7a:	f003 0310 	and.w	r3, r3, #16
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d003      	beq.n	800cc8a <f_open+0x1b6>
					res = FR_NO_FILE;
 800cc82:	2304      	movs	r3, #4
 800cc84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cc88:	e00c      	b.n	800cca4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cc8a:	79fb      	ldrb	r3, [r7, #7]
 800cc8c:	f003 0302 	and.w	r3, r3, #2
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d007      	beq.n	800cca4 <f_open+0x1d0>
 800cc94:	7ebb      	ldrb	r3, [r7, #26]
 800cc96:	f003 0301 	and.w	r3, r3, #1
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d002      	beq.n	800cca4 <f_open+0x1d0>
						res = FR_DENIED;
 800cc9e:	2307      	movs	r3, #7
 800cca0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cca4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d126      	bne.n	800ccfa <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ccac:	79fb      	ldrb	r3, [r7, #7]
 800ccae:	f003 0308 	and.w	r3, r3, #8
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d003      	beq.n	800ccbe <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800ccb6:	79fb      	ldrb	r3, [r7, #7]
 800ccb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccbc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800ccc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cccc:	79fb      	ldrb	r3, [r7, #7]
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	bf8c      	ite	hi
 800ccd2:	2301      	movhi	r3, #1
 800ccd4:	2300      	movls	r3, #0
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	461a      	mov	r2, r3
 800ccda:	f107 0314 	add.w	r3, r7, #20
 800ccde:	4611      	mov	r1, r2
 800cce0:	4618      	mov	r0, r3
 800cce2:	f7fe fb93 	bl	800b40c <inc_lock>
 800cce6:	4602      	mov	r2, r0
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d102      	bne.n	800ccfa <f_open+0x226>
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ccfa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	f040 8095 	bne.w	800ce2e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd08:	4611      	mov	r1, r2
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7ff f9b4 	bl	800c078 <ld_clust>
 800cd10:	4602      	mov	r2, r0
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cd16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd18:	331c      	adds	r3, #28
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7fe fa0f 	bl	800b13e <ld_dword>
 800cd20:	4602      	mov	r2, r0
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cd2c:	693a      	ldr	r2, [r7, #16]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	88da      	ldrh	r2, [r3, #6]
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	79fa      	ldrb	r2, [r7, #7]
 800cd3e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	2200      	movs	r2, #0
 800cd44:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	2200      	movs	r2, #0
 800cd4a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	3330      	adds	r3, #48	@ 0x30
 800cd56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd5a:	2100      	movs	r1, #0
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	f7fe fa79 	bl	800b254 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cd62:	79fb      	ldrb	r3, [r7, #7]
 800cd64:	f003 0320 	and.w	r3, r3, #32
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d060      	beq.n	800ce2e <f_open+0x35a>
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	68db      	ldr	r3, [r3, #12]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d05c      	beq.n	800ce2e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	68da      	ldr	r2, [r3, #12]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	895b      	ldrh	r3, [r3, #10]
 800cd80:	025b      	lsls	r3, r3, #9
 800cd82:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	68db      	ldr	r3, [r3, #12]
 800cd8e:	657b      	str	r3, [r7, #84]	@ 0x54
 800cd90:	e016      	b.n	800cdc0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cd96:	4618      	mov	r0, r3
 800cd98:	f7fe fd25 	bl	800b7e6 <get_fat>
 800cd9c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800cd9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d802      	bhi.n	800cdaa <f_open+0x2d6>
 800cda4:	2302      	movs	r3, #2
 800cda6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800cdaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cdac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdb0:	d102      	bne.n	800cdb8 <f_open+0x2e4>
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cdb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cdba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdbc:	1ad3      	subs	r3, r2, r3
 800cdbe:	657b      	str	r3, [r7, #84]	@ 0x54
 800cdc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d103      	bne.n	800cdd0 <f_open+0x2fc>
 800cdc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cdca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d8e0      	bhi.n	800cd92 <f_open+0x2be>
				}
				fp->clust = clst;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cdd4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800cdd6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d127      	bne.n	800ce2e <f_open+0x35a>
 800cdde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cde0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d022      	beq.n	800ce2e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cdec:	4618      	mov	r0, r3
 800cdee:	f7fe fcdb 	bl	800b7a8 <clust2sect>
 800cdf2:	6478      	str	r0, [r7, #68]	@ 0x44
 800cdf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d103      	bne.n	800ce02 <f_open+0x32e>
						res = FR_INT_ERR;
 800cdfa:	2302      	movs	r3, #2
 800cdfc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ce00:	e015      	b.n	800ce2e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ce02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce04:	0a5a      	lsrs	r2, r3, #9
 800ce06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce08:	441a      	add	r2, r3
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	7858      	ldrb	r0, [r3, #1]
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	6a1a      	ldr	r2, [r3, #32]
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	f7fe f917 	bl	800b050 <disk_read>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d002      	beq.n	800ce2e <f_open+0x35a>
 800ce28:	2301      	movs	r3, #1
 800ce2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ce2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d002      	beq.n	800ce3c <f_open+0x368>
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ce3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3760      	adds	r7, #96	@ 0x60
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b08e      	sub	sp, #56	@ 0x38
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	607a      	str	r2, [r7, #4]
 800ce54:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	f107 0214 	add.w	r2, r7, #20
 800ce66:	4611      	mov	r1, r2
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f7ff fdb7 	bl	800c9dc <validate>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ce74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d107      	bne.n	800ce8c <f_read+0x44>
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	7d5b      	ldrb	r3, [r3, #21]
 800ce80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ce84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d002      	beq.n	800ce92 <f_read+0x4a>
 800ce8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ce90:	e115      	b.n	800d0be <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	7d1b      	ldrb	r3, [r3, #20]
 800ce96:	f003 0301 	and.w	r3, r3, #1
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d101      	bne.n	800cea2 <f_read+0x5a>
 800ce9e:	2307      	movs	r3, #7
 800cea0:	e10d      	b.n	800d0be <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	68da      	ldr	r2, [r3, #12]
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	699b      	ldr	r3, [r3, #24]
 800ceaa:	1ad3      	subs	r3, r2, r3
 800ceac:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	6a3b      	ldr	r3, [r7, #32]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	f240 80fe 	bls.w	800d0b4 <f_read+0x26c>
 800ceb8:	6a3b      	ldr	r3, [r7, #32]
 800ceba:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cebc:	e0fa      	b.n	800d0b4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	699b      	ldr	r3, [r3, #24]
 800cec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f040 80c6 	bne.w	800d058 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	699b      	ldr	r3, [r3, #24]
 800ced0:	0a5b      	lsrs	r3, r3, #9
 800ced2:	697a      	ldr	r2, [r7, #20]
 800ced4:	8952      	ldrh	r2, [r2, #10]
 800ced6:	3a01      	subs	r2, #1
 800ced8:	4013      	ands	r3, r2
 800ceda:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d12f      	bne.n	800cf42 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	699b      	ldr	r3, [r3, #24]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d103      	bne.n	800cef2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	689b      	ldr	r3, [r3, #8]
 800ceee:	633b      	str	r3, [r7, #48]	@ 0x30
 800cef0:	e013      	b.n	800cf1a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d007      	beq.n	800cf0a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	699b      	ldr	r3, [r3, #24]
 800cefe:	4619      	mov	r1, r3
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	f7fe fefe 	bl	800bd02 <clmt_clust>
 800cf06:	6338      	str	r0, [r7, #48]	@ 0x30
 800cf08:	e007      	b.n	800cf1a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cf0a:	68fa      	ldr	r2, [r7, #12]
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	69db      	ldr	r3, [r3, #28]
 800cf10:	4619      	mov	r1, r3
 800cf12:	4610      	mov	r0, r2
 800cf14:	f7fe fc67 	bl	800b7e6 <get_fat>
 800cf18:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cf1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d804      	bhi.n	800cf2a <f_read+0xe2>
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	2202      	movs	r2, #2
 800cf24:	755a      	strb	r2, [r3, #21]
 800cf26:	2302      	movs	r3, #2
 800cf28:	e0c9      	b.n	800d0be <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf30:	d104      	bne.n	800cf3c <f_read+0xf4>
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2201      	movs	r2, #1
 800cf36:	755a      	strb	r2, [r3, #21]
 800cf38:	2301      	movs	r3, #1
 800cf3a:	e0c0      	b.n	800d0be <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf40:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cf42:	697a      	ldr	r2, [r7, #20]
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	69db      	ldr	r3, [r3, #28]
 800cf48:	4619      	mov	r1, r3
 800cf4a:	4610      	mov	r0, r2
 800cf4c:	f7fe fc2c 	bl	800b7a8 <clust2sect>
 800cf50:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d104      	bne.n	800cf62 <f_read+0x11a>
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2202      	movs	r2, #2
 800cf5c:	755a      	strb	r2, [r3, #21]
 800cf5e:	2302      	movs	r3, #2
 800cf60:	e0ad      	b.n	800d0be <f_read+0x276>
			sect += csect;
 800cf62:	69ba      	ldr	r2, [r7, #24]
 800cf64:	69fb      	ldr	r3, [r7, #28]
 800cf66:	4413      	add	r3, r2
 800cf68:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	0a5b      	lsrs	r3, r3, #9
 800cf6e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cf70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d039      	beq.n	800cfea <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cf76:	69fa      	ldr	r2, [r7, #28]
 800cf78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf7a:	4413      	add	r3, r2
 800cf7c:	697a      	ldr	r2, [r7, #20]
 800cf7e:	8952      	ldrh	r2, [r2, #10]
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d905      	bls.n	800cf90 <f_read+0x148>
					cc = fs->csize - csect;
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	895b      	ldrh	r3, [r3, #10]
 800cf88:	461a      	mov	r2, r3
 800cf8a:	69fb      	ldr	r3, [r7, #28]
 800cf8c:	1ad3      	subs	r3, r2, r3
 800cf8e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	7858      	ldrb	r0, [r3, #1]
 800cf94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf96:	69ba      	ldr	r2, [r7, #24]
 800cf98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cf9a:	f7fe f859 	bl	800b050 <disk_read>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d004      	beq.n	800cfae <f_read+0x166>
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	755a      	strb	r2, [r3, #21]
 800cfaa:	2301      	movs	r3, #1
 800cfac:	e087      	b.n	800d0be <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	7d1b      	ldrb	r3, [r3, #20]
 800cfb2:	b25b      	sxtb	r3, r3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	da14      	bge.n	800cfe2 <f_read+0x19a>
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	6a1a      	ldr	r2, [r3, #32]
 800cfbc:	69bb      	ldr	r3, [r7, #24]
 800cfbe:	1ad3      	subs	r3, r2, r3
 800cfc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d90d      	bls.n	800cfe2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6a1a      	ldr	r2, [r3, #32]
 800cfca:	69bb      	ldr	r3, [r7, #24]
 800cfcc:	1ad3      	subs	r3, r2, r3
 800cfce:	025b      	lsls	r3, r3, #9
 800cfd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfd2:	18d0      	adds	r0, r2, r3
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	3330      	adds	r3, #48	@ 0x30
 800cfd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cfdc:	4619      	mov	r1, r3
 800cfde:	f7fe f918 	bl	800b212 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cfe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfe4:	025b      	lsls	r3, r3, #9
 800cfe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800cfe8:	e050      	b.n	800d08c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	6a1b      	ldr	r3, [r3, #32]
 800cfee:	69ba      	ldr	r2, [r7, #24]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d02e      	beq.n	800d052 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	7d1b      	ldrb	r3, [r3, #20]
 800cff8:	b25b      	sxtb	r3, r3
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	da18      	bge.n	800d030 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	7858      	ldrb	r0, [r3, #1]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	6a1a      	ldr	r2, [r3, #32]
 800d00c:	2301      	movs	r3, #1
 800d00e:	f7fe f83f 	bl	800b090 <disk_write>
 800d012:	4603      	mov	r3, r0
 800d014:	2b00      	cmp	r3, #0
 800d016:	d004      	beq.n	800d022 <f_read+0x1da>
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2201      	movs	r2, #1
 800d01c:	755a      	strb	r2, [r3, #21]
 800d01e:	2301      	movs	r3, #1
 800d020:	e04d      	b.n	800d0be <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	7d1b      	ldrb	r3, [r3, #20]
 800d026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d02a:	b2da      	uxtb	r2, r3
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	7858      	ldrb	r0, [r3, #1]
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d03a:	2301      	movs	r3, #1
 800d03c:	69ba      	ldr	r2, [r7, #24]
 800d03e:	f7fe f807 	bl	800b050 <disk_read>
 800d042:	4603      	mov	r3, r0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d004      	beq.n	800d052 <f_read+0x20a>
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2201      	movs	r2, #1
 800d04c:	755a      	strb	r2, [r3, #21]
 800d04e:	2301      	movs	r3, #1
 800d050:	e035      	b.n	800d0be <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	69ba      	ldr	r2, [r7, #24]
 800d056:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	699b      	ldr	r3, [r3, #24]
 800d05c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d060:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d064:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d901      	bls.n	800d072 <f_read+0x22a>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	699b      	ldr	r3, [r3, #24]
 800d07c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d080:	4413      	add	r3, r2
 800d082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d084:	4619      	mov	r1, r3
 800d086:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d088:	f7fe f8c3 	bl	800b212 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d08c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d090:	4413      	add	r3, r2
 800d092:	627b      	str	r3, [r7, #36]	@ 0x24
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	699a      	ldr	r2, [r3, #24]
 800d098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d09a:	441a      	add	r2, r3
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	619a      	str	r2, [r3, #24]
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a6:	441a      	add	r2, r3
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	601a      	str	r2, [r3, #0]
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0b0:	1ad3      	subs	r3, r2, r3
 800d0b2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	f47f af01 	bne.w	800cebe <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d0bc:	2300      	movs	r3, #0
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3738      	adds	r7, #56	@ 0x38
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b086      	sub	sp, #24
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f107 0208 	add.w	r2, r7, #8
 800d0d4:	4611      	mov	r1, r2
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f7ff fc80 	bl	800c9dc <validate>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d0e0:	7dfb      	ldrb	r3, [r7, #23]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d168      	bne.n	800d1b8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	7d1b      	ldrb	r3, [r3, #20]
 800d0ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d062      	beq.n	800d1b8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	7d1b      	ldrb	r3, [r3, #20]
 800d0f6:	b25b      	sxtb	r3, r3
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	da15      	bge.n	800d128 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	7858      	ldrb	r0, [r3, #1]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a1a      	ldr	r2, [r3, #32]
 800d10a:	2301      	movs	r3, #1
 800d10c:	f7fd ffc0 	bl	800b090 <disk_write>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d001      	beq.n	800d11a <f_sync+0x54>
 800d116:	2301      	movs	r3, #1
 800d118:	e04f      	b.n	800d1ba <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	7d1b      	ldrb	r3, [r3, #20]
 800d11e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d122:	b2da      	uxtb	r2, r3
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d128:	f7fd fd96 	bl	800ac58 <get_fattime>
 800d12c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d12e:	68ba      	ldr	r2, [r7, #8]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d134:	4619      	mov	r1, r3
 800d136:	4610      	mov	r0, r2
 800d138:	f7fe fa9a 	bl	800b670 <move_window>
 800d13c:	4603      	mov	r3, r0
 800d13e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d140:	7dfb      	ldrb	r3, [r7, #23]
 800d142:	2b00      	cmp	r3, #0
 800d144:	d138      	bne.n	800d1b8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d14a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	330b      	adds	r3, #11
 800d150:	781a      	ldrb	r2, [r3, #0]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	330b      	adds	r3, #11
 800d156:	f042 0220 	orr.w	r2, r2, #32
 800d15a:	b2d2      	uxtb	r2, r2
 800d15c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6818      	ldr	r0, [r3, #0]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	689b      	ldr	r3, [r3, #8]
 800d166:	461a      	mov	r2, r3
 800d168:	68f9      	ldr	r1, [r7, #12]
 800d16a:	f7fe ffa4 	bl	800c0b6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f103 021c 	add.w	r2, r3, #28
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	68db      	ldr	r3, [r3, #12]
 800d178:	4619      	mov	r1, r3
 800d17a:	4610      	mov	r0, r2
 800d17c:	f7fe f81d 	bl	800b1ba <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	3316      	adds	r3, #22
 800d184:	6939      	ldr	r1, [r7, #16]
 800d186:	4618      	mov	r0, r3
 800d188:	f7fe f817 	bl	800b1ba <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	3312      	adds	r3, #18
 800d190:	2100      	movs	r1, #0
 800d192:	4618      	mov	r0, r3
 800d194:	f7fd fff6 	bl	800b184 <st_word>
					fs->wflag = 1;
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	2201      	movs	r2, #1
 800d19c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fe fa93 	bl	800b6cc <sync_fs>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	7d1b      	ldrb	r3, [r3, #20]
 800d1ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1b2:	b2da      	uxtb	r2, r3
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d1b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3718      	adds	r7, #24
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}

0800d1c2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b084      	sub	sp, #16
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f7ff ff7b 	bl	800d0c6 <f_sync>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d1d4:	7bfb      	ldrb	r3, [r7, #15]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d118      	bne.n	800d20c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f107 0208 	add.w	r2, r7, #8
 800d1e0:	4611      	mov	r1, r2
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7ff fbfa 	bl	800c9dc <validate>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d1ec:	7bfb      	ldrb	r3, [r7, #15]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d10c      	bne.n	800d20c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	691b      	ldr	r3, [r3, #16]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7fe f996 	bl	800b528 <dec_lock>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d200:	7bfb      	ldrb	r3, [r7, #15]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d102      	bne.n	800d20c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	2200      	movs	r2, #0
 800d20a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d20c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
	...

0800d218 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d218:	b480      	push	{r7}
 800d21a:	b087      	sub	sp, #28
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	60f8      	str	r0, [r7, #12]
 800d220:	60b9      	str	r1, [r7, #8]
 800d222:	4613      	mov	r3, r2
 800d224:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d226:	2301      	movs	r3, #1
 800d228:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d22a:	2300      	movs	r3, #0
 800d22c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d22e:	4b1f      	ldr	r3, [pc, #124]	@ (800d2ac <FATFS_LinkDriverEx+0x94>)
 800d230:	7a5b      	ldrb	r3, [r3, #9]
 800d232:	b2db      	uxtb	r3, r3
 800d234:	2b00      	cmp	r3, #0
 800d236:	d131      	bne.n	800d29c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d238:	4b1c      	ldr	r3, [pc, #112]	@ (800d2ac <FATFS_LinkDriverEx+0x94>)
 800d23a:	7a5b      	ldrb	r3, [r3, #9]
 800d23c:	b2db      	uxtb	r3, r3
 800d23e:	461a      	mov	r2, r3
 800d240:	4b1a      	ldr	r3, [pc, #104]	@ (800d2ac <FATFS_LinkDriverEx+0x94>)
 800d242:	2100      	movs	r1, #0
 800d244:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d246:	4b19      	ldr	r3, [pc, #100]	@ (800d2ac <FATFS_LinkDriverEx+0x94>)
 800d248:	7a5b      	ldrb	r3, [r3, #9]
 800d24a:	b2db      	uxtb	r3, r3
 800d24c:	4a17      	ldr	r2, [pc, #92]	@ (800d2ac <FATFS_LinkDriverEx+0x94>)
 800d24e:	009b      	lsls	r3, r3, #2
 800d250:	4413      	add	r3, r2
 800d252:	68fa      	ldr	r2, [r7, #12]
 800d254:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d256:	4b15      	ldr	r3, [pc, #84]	@ (800d2ac <FATFS_LinkDriverEx+0x94>)
 800d258:	7a5b      	ldrb	r3, [r3, #9]
 800d25a:	b2db      	uxtb	r3, r3
 800d25c:	461a      	mov	r2, r3
 800d25e:	4b13      	ldr	r3, [pc, #76]	@ (800d2ac <FATFS_LinkDriverEx+0x94>)
 800d260:	4413      	add	r3, r2
 800d262:	79fa      	ldrb	r2, [r7, #7]
 800d264:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d266:	4b11      	ldr	r3, [pc, #68]	@ (800d2ac <FATFS_LinkDriverEx+0x94>)
 800d268:	7a5b      	ldrb	r3, [r3, #9]
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	1c5a      	adds	r2, r3, #1
 800d26e:	b2d1      	uxtb	r1, r2
 800d270:	4a0e      	ldr	r2, [pc, #56]	@ (800d2ac <FATFS_LinkDriverEx+0x94>)
 800d272:	7251      	strb	r1, [r2, #9]
 800d274:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d276:	7dbb      	ldrb	r3, [r7, #22]
 800d278:	3330      	adds	r3, #48	@ 0x30
 800d27a:	b2da      	uxtb	r2, r3
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	3301      	adds	r3, #1
 800d284:	223a      	movs	r2, #58	@ 0x3a
 800d286:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	3302      	adds	r3, #2
 800d28c:	222f      	movs	r2, #47	@ 0x2f
 800d28e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	3303      	adds	r3, #3
 800d294:	2200      	movs	r2, #0
 800d296:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d298:	2300      	movs	r3, #0
 800d29a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d29c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	371c      	adds	r7, #28
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	20000324 	.word	0x20000324

0800d2b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
 800d2b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	6839      	ldr	r1, [r7, #0]
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f7ff ffaa 	bl	800d218 <FATFS_LinkDriverEx>
 800d2c4:	4603      	mov	r3, r0
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3708      	adds	r7, #8
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
	...

0800d2d0 <siprintf>:
 800d2d0:	b40e      	push	{r1, r2, r3}
 800d2d2:	b510      	push	{r4, lr}
 800d2d4:	b09d      	sub	sp, #116	@ 0x74
 800d2d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d2d8:	9002      	str	r0, [sp, #8]
 800d2da:	9006      	str	r0, [sp, #24]
 800d2dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d2e0:	480a      	ldr	r0, [pc, #40]	@ (800d30c <siprintf+0x3c>)
 800d2e2:	9107      	str	r1, [sp, #28]
 800d2e4:	9104      	str	r1, [sp, #16]
 800d2e6:	490a      	ldr	r1, [pc, #40]	@ (800d310 <siprintf+0x40>)
 800d2e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2ec:	9105      	str	r1, [sp, #20]
 800d2ee:	2400      	movs	r4, #0
 800d2f0:	a902      	add	r1, sp, #8
 800d2f2:	6800      	ldr	r0, [r0, #0]
 800d2f4:	9301      	str	r3, [sp, #4]
 800d2f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d2f8:	f000 f99c 	bl	800d634 <_svfiprintf_r>
 800d2fc:	9b02      	ldr	r3, [sp, #8]
 800d2fe:	701c      	strb	r4, [r3, #0]
 800d300:	b01d      	add	sp, #116	@ 0x74
 800d302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d306:	b003      	add	sp, #12
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	20000010 	.word	0x20000010
 800d310:	ffff0208 	.word	0xffff0208

0800d314 <memset>:
 800d314:	4402      	add	r2, r0
 800d316:	4603      	mov	r3, r0
 800d318:	4293      	cmp	r3, r2
 800d31a:	d100      	bne.n	800d31e <memset+0xa>
 800d31c:	4770      	bx	lr
 800d31e:	f803 1b01 	strb.w	r1, [r3], #1
 800d322:	e7f9      	b.n	800d318 <memset+0x4>

0800d324 <__errno>:
 800d324:	4b01      	ldr	r3, [pc, #4]	@ (800d32c <__errno+0x8>)
 800d326:	6818      	ldr	r0, [r3, #0]
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	20000010 	.word	0x20000010

0800d330 <__libc_init_array>:
 800d330:	b570      	push	{r4, r5, r6, lr}
 800d332:	4d0d      	ldr	r5, [pc, #52]	@ (800d368 <__libc_init_array+0x38>)
 800d334:	4c0d      	ldr	r4, [pc, #52]	@ (800d36c <__libc_init_array+0x3c>)
 800d336:	1b64      	subs	r4, r4, r5
 800d338:	10a4      	asrs	r4, r4, #2
 800d33a:	2600      	movs	r6, #0
 800d33c:	42a6      	cmp	r6, r4
 800d33e:	d109      	bne.n	800d354 <__libc_init_array+0x24>
 800d340:	4d0b      	ldr	r5, [pc, #44]	@ (800d370 <__libc_init_array+0x40>)
 800d342:	4c0c      	ldr	r4, [pc, #48]	@ (800d374 <__libc_init_array+0x44>)
 800d344:	f000 fc6c 	bl	800dc20 <_init>
 800d348:	1b64      	subs	r4, r4, r5
 800d34a:	10a4      	asrs	r4, r4, #2
 800d34c:	2600      	movs	r6, #0
 800d34e:	42a6      	cmp	r6, r4
 800d350:	d105      	bne.n	800d35e <__libc_init_array+0x2e>
 800d352:	bd70      	pop	{r4, r5, r6, pc}
 800d354:	f855 3b04 	ldr.w	r3, [r5], #4
 800d358:	4798      	blx	r3
 800d35a:	3601      	adds	r6, #1
 800d35c:	e7ee      	b.n	800d33c <__libc_init_array+0xc>
 800d35e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d362:	4798      	blx	r3
 800d364:	3601      	adds	r6, #1
 800d366:	e7f2      	b.n	800d34e <__libc_init_array+0x1e>
 800d368:	0800e100 	.word	0x0800e100
 800d36c:	0800e100 	.word	0x0800e100
 800d370:	0800e100 	.word	0x0800e100
 800d374:	0800e104 	.word	0x0800e104

0800d378 <__retarget_lock_acquire_recursive>:
 800d378:	4770      	bx	lr

0800d37a <__retarget_lock_release_recursive>:
 800d37a:	4770      	bx	lr

0800d37c <strcpy>:
 800d37c:	4603      	mov	r3, r0
 800d37e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d382:	f803 2b01 	strb.w	r2, [r3], #1
 800d386:	2a00      	cmp	r2, #0
 800d388:	d1f9      	bne.n	800d37e <strcpy+0x2>
 800d38a:	4770      	bx	lr

0800d38c <_free_r>:
 800d38c:	b538      	push	{r3, r4, r5, lr}
 800d38e:	4605      	mov	r5, r0
 800d390:	2900      	cmp	r1, #0
 800d392:	d041      	beq.n	800d418 <_free_r+0x8c>
 800d394:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d398:	1f0c      	subs	r4, r1, #4
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	bfb8      	it	lt
 800d39e:	18e4      	addlt	r4, r4, r3
 800d3a0:	f000 f8e0 	bl	800d564 <__malloc_lock>
 800d3a4:	4a1d      	ldr	r2, [pc, #116]	@ (800d41c <_free_r+0x90>)
 800d3a6:	6813      	ldr	r3, [r2, #0]
 800d3a8:	b933      	cbnz	r3, 800d3b8 <_free_r+0x2c>
 800d3aa:	6063      	str	r3, [r4, #4]
 800d3ac:	6014      	str	r4, [r2, #0]
 800d3ae:	4628      	mov	r0, r5
 800d3b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3b4:	f000 b8dc 	b.w	800d570 <__malloc_unlock>
 800d3b8:	42a3      	cmp	r3, r4
 800d3ba:	d908      	bls.n	800d3ce <_free_r+0x42>
 800d3bc:	6820      	ldr	r0, [r4, #0]
 800d3be:	1821      	adds	r1, r4, r0
 800d3c0:	428b      	cmp	r3, r1
 800d3c2:	bf01      	itttt	eq
 800d3c4:	6819      	ldreq	r1, [r3, #0]
 800d3c6:	685b      	ldreq	r3, [r3, #4]
 800d3c8:	1809      	addeq	r1, r1, r0
 800d3ca:	6021      	streq	r1, [r4, #0]
 800d3cc:	e7ed      	b.n	800d3aa <_free_r+0x1e>
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	b10b      	cbz	r3, 800d3d8 <_free_r+0x4c>
 800d3d4:	42a3      	cmp	r3, r4
 800d3d6:	d9fa      	bls.n	800d3ce <_free_r+0x42>
 800d3d8:	6811      	ldr	r1, [r2, #0]
 800d3da:	1850      	adds	r0, r2, r1
 800d3dc:	42a0      	cmp	r0, r4
 800d3de:	d10b      	bne.n	800d3f8 <_free_r+0x6c>
 800d3e0:	6820      	ldr	r0, [r4, #0]
 800d3e2:	4401      	add	r1, r0
 800d3e4:	1850      	adds	r0, r2, r1
 800d3e6:	4283      	cmp	r3, r0
 800d3e8:	6011      	str	r1, [r2, #0]
 800d3ea:	d1e0      	bne.n	800d3ae <_free_r+0x22>
 800d3ec:	6818      	ldr	r0, [r3, #0]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	6053      	str	r3, [r2, #4]
 800d3f2:	4408      	add	r0, r1
 800d3f4:	6010      	str	r0, [r2, #0]
 800d3f6:	e7da      	b.n	800d3ae <_free_r+0x22>
 800d3f8:	d902      	bls.n	800d400 <_free_r+0x74>
 800d3fa:	230c      	movs	r3, #12
 800d3fc:	602b      	str	r3, [r5, #0]
 800d3fe:	e7d6      	b.n	800d3ae <_free_r+0x22>
 800d400:	6820      	ldr	r0, [r4, #0]
 800d402:	1821      	adds	r1, r4, r0
 800d404:	428b      	cmp	r3, r1
 800d406:	bf04      	itt	eq
 800d408:	6819      	ldreq	r1, [r3, #0]
 800d40a:	685b      	ldreq	r3, [r3, #4]
 800d40c:	6063      	str	r3, [r4, #4]
 800d40e:	bf04      	itt	eq
 800d410:	1809      	addeq	r1, r1, r0
 800d412:	6021      	streq	r1, [r4, #0]
 800d414:	6054      	str	r4, [r2, #4]
 800d416:	e7ca      	b.n	800d3ae <_free_r+0x22>
 800d418:	bd38      	pop	{r3, r4, r5, pc}
 800d41a:	bf00      	nop
 800d41c:	20000474 	.word	0x20000474

0800d420 <sbrk_aligned>:
 800d420:	b570      	push	{r4, r5, r6, lr}
 800d422:	4e0f      	ldr	r6, [pc, #60]	@ (800d460 <sbrk_aligned+0x40>)
 800d424:	460c      	mov	r4, r1
 800d426:	6831      	ldr	r1, [r6, #0]
 800d428:	4605      	mov	r5, r0
 800d42a:	b911      	cbnz	r1, 800d432 <sbrk_aligned+0x12>
 800d42c:	f000 fba4 	bl	800db78 <_sbrk_r>
 800d430:	6030      	str	r0, [r6, #0]
 800d432:	4621      	mov	r1, r4
 800d434:	4628      	mov	r0, r5
 800d436:	f000 fb9f 	bl	800db78 <_sbrk_r>
 800d43a:	1c43      	adds	r3, r0, #1
 800d43c:	d103      	bne.n	800d446 <sbrk_aligned+0x26>
 800d43e:	f04f 34ff 	mov.w	r4, #4294967295
 800d442:	4620      	mov	r0, r4
 800d444:	bd70      	pop	{r4, r5, r6, pc}
 800d446:	1cc4      	adds	r4, r0, #3
 800d448:	f024 0403 	bic.w	r4, r4, #3
 800d44c:	42a0      	cmp	r0, r4
 800d44e:	d0f8      	beq.n	800d442 <sbrk_aligned+0x22>
 800d450:	1a21      	subs	r1, r4, r0
 800d452:	4628      	mov	r0, r5
 800d454:	f000 fb90 	bl	800db78 <_sbrk_r>
 800d458:	3001      	adds	r0, #1
 800d45a:	d1f2      	bne.n	800d442 <sbrk_aligned+0x22>
 800d45c:	e7ef      	b.n	800d43e <sbrk_aligned+0x1e>
 800d45e:	bf00      	nop
 800d460:	20000470 	.word	0x20000470

0800d464 <_malloc_r>:
 800d464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d468:	1ccd      	adds	r5, r1, #3
 800d46a:	f025 0503 	bic.w	r5, r5, #3
 800d46e:	3508      	adds	r5, #8
 800d470:	2d0c      	cmp	r5, #12
 800d472:	bf38      	it	cc
 800d474:	250c      	movcc	r5, #12
 800d476:	2d00      	cmp	r5, #0
 800d478:	4606      	mov	r6, r0
 800d47a:	db01      	blt.n	800d480 <_malloc_r+0x1c>
 800d47c:	42a9      	cmp	r1, r5
 800d47e:	d904      	bls.n	800d48a <_malloc_r+0x26>
 800d480:	230c      	movs	r3, #12
 800d482:	6033      	str	r3, [r6, #0]
 800d484:	2000      	movs	r0, #0
 800d486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d48a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d560 <_malloc_r+0xfc>
 800d48e:	f000 f869 	bl	800d564 <__malloc_lock>
 800d492:	f8d8 3000 	ldr.w	r3, [r8]
 800d496:	461c      	mov	r4, r3
 800d498:	bb44      	cbnz	r4, 800d4ec <_malloc_r+0x88>
 800d49a:	4629      	mov	r1, r5
 800d49c:	4630      	mov	r0, r6
 800d49e:	f7ff ffbf 	bl	800d420 <sbrk_aligned>
 800d4a2:	1c43      	adds	r3, r0, #1
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	d158      	bne.n	800d55a <_malloc_r+0xf6>
 800d4a8:	f8d8 4000 	ldr.w	r4, [r8]
 800d4ac:	4627      	mov	r7, r4
 800d4ae:	2f00      	cmp	r7, #0
 800d4b0:	d143      	bne.n	800d53a <_malloc_r+0xd6>
 800d4b2:	2c00      	cmp	r4, #0
 800d4b4:	d04b      	beq.n	800d54e <_malloc_r+0xea>
 800d4b6:	6823      	ldr	r3, [r4, #0]
 800d4b8:	4639      	mov	r1, r7
 800d4ba:	4630      	mov	r0, r6
 800d4bc:	eb04 0903 	add.w	r9, r4, r3
 800d4c0:	f000 fb5a 	bl	800db78 <_sbrk_r>
 800d4c4:	4581      	cmp	r9, r0
 800d4c6:	d142      	bne.n	800d54e <_malloc_r+0xea>
 800d4c8:	6821      	ldr	r1, [r4, #0]
 800d4ca:	1a6d      	subs	r5, r5, r1
 800d4cc:	4629      	mov	r1, r5
 800d4ce:	4630      	mov	r0, r6
 800d4d0:	f7ff ffa6 	bl	800d420 <sbrk_aligned>
 800d4d4:	3001      	adds	r0, #1
 800d4d6:	d03a      	beq.n	800d54e <_malloc_r+0xea>
 800d4d8:	6823      	ldr	r3, [r4, #0]
 800d4da:	442b      	add	r3, r5
 800d4dc:	6023      	str	r3, [r4, #0]
 800d4de:	f8d8 3000 	ldr.w	r3, [r8]
 800d4e2:	685a      	ldr	r2, [r3, #4]
 800d4e4:	bb62      	cbnz	r2, 800d540 <_malloc_r+0xdc>
 800d4e6:	f8c8 7000 	str.w	r7, [r8]
 800d4ea:	e00f      	b.n	800d50c <_malloc_r+0xa8>
 800d4ec:	6822      	ldr	r2, [r4, #0]
 800d4ee:	1b52      	subs	r2, r2, r5
 800d4f0:	d420      	bmi.n	800d534 <_malloc_r+0xd0>
 800d4f2:	2a0b      	cmp	r2, #11
 800d4f4:	d917      	bls.n	800d526 <_malloc_r+0xc2>
 800d4f6:	1961      	adds	r1, r4, r5
 800d4f8:	42a3      	cmp	r3, r4
 800d4fa:	6025      	str	r5, [r4, #0]
 800d4fc:	bf18      	it	ne
 800d4fe:	6059      	strne	r1, [r3, #4]
 800d500:	6863      	ldr	r3, [r4, #4]
 800d502:	bf08      	it	eq
 800d504:	f8c8 1000 	streq.w	r1, [r8]
 800d508:	5162      	str	r2, [r4, r5]
 800d50a:	604b      	str	r3, [r1, #4]
 800d50c:	4630      	mov	r0, r6
 800d50e:	f000 f82f 	bl	800d570 <__malloc_unlock>
 800d512:	f104 000b 	add.w	r0, r4, #11
 800d516:	1d23      	adds	r3, r4, #4
 800d518:	f020 0007 	bic.w	r0, r0, #7
 800d51c:	1ac2      	subs	r2, r0, r3
 800d51e:	bf1c      	itt	ne
 800d520:	1a1b      	subne	r3, r3, r0
 800d522:	50a3      	strne	r3, [r4, r2]
 800d524:	e7af      	b.n	800d486 <_malloc_r+0x22>
 800d526:	6862      	ldr	r2, [r4, #4]
 800d528:	42a3      	cmp	r3, r4
 800d52a:	bf0c      	ite	eq
 800d52c:	f8c8 2000 	streq.w	r2, [r8]
 800d530:	605a      	strne	r2, [r3, #4]
 800d532:	e7eb      	b.n	800d50c <_malloc_r+0xa8>
 800d534:	4623      	mov	r3, r4
 800d536:	6864      	ldr	r4, [r4, #4]
 800d538:	e7ae      	b.n	800d498 <_malloc_r+0x34>
 800d53a:	463c      	mov	r4, r7
 800d53c:	687f      	ldr	r7, [r7, #4]
 800d53e:	e7b6      	b.n	800d4ae <_malloc_r+0x4a>
 800d540:	461a      	mov	r2, r3
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	42a3      	cmp	r3, r4
 800d546:	d1fb      	bne.n	800d540 <_malloc_r+0xdc>
 800d548:	2300      	movs	r3, #0
 800d54a:	6053      	str	r3, [r2, #4]
 800d54c:	e7de      	b.n	800d50c <_malloc_r+0xa8>
 800d54e:	230c      	movs	r3, #12
 800d550:	6033      	str	r3, [r6, #0]
 800d552:	4630      	mov	r0, r6
 800d554:	f000 f80c 	bl	800d570 <__malloc_unlock>
 800d558:	e794      	b.n	800d484 <_malloc_r+0x20>
 800d55a:	6005      	str	r5, [r0, #0]
 800d55c:	e7d6      	b.n	800d50c <_malloc_r+0xa8>
 800d55e:	bf00      	nop
 800d560:	20000474 	.word	0x20000474

0800d564 <__malloc_lock>:
 800d564:	4801      	ldr	r0, [pc, #4]	@ (800d56c <__malloc_lock+0x8>)
 800d566:	f7ff bf07 	b.w	800d378 <__retarget_lock_acquire_recursive>
 800d56a:	bf00      	nop
 800d56c:	2000046c 	.word	0x2000046c

0800d570 <__malloc_unlock>:
 800d570:	4801      	ldr	r0, [pc, #4]	@ (800d578 <__malloc_unlock+0x8>)
 800d572:	f7ff bf02 	b.w	800d37a <__retarget_lock_release_recursive>
 800d576:	bf00      	nop
 800d578:	2000046c 	.word	0x2000046c

0800d57c <__ssputs_r>:
 800d57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d580:	688e      	ldr	r6, [r1, #8]
 800d582:	461f      	mov	r7, r3
 800d584:	42be      	cmp	r6, r7
 800d586:	680b      	ldr	r3, [r1, #0]
 800d588:	4682      	mov	sl, r0
 800d58a:	460c      	mov	r4, r1
 800d58c:	4690      	mov	r8, r2
 800d58e:	d82d      	bhi.n	800d5ec <__ssputs_r+0x70>
 800d590:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d594:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d598:	d026      	beq.n	800d5e8 <__ssputs_r+0x6c>
 800d59a:	6965      	ldr	r5, [r4, #20]
 800d59c:	6909      	ldr	r1, [r1, #16]
 800d59e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5a2:	eba3 0901 	sub.w	r9, r3, r1
 800d5a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5aa:	1c7b      	adds	r3, r7, #1
 800d5ac:	444b      	add	r3, r9
 800d5ae:	106d      	asrs	r5, r5, #1
 800d5b0:	429d      	cmp	r5, r3
 800d5b2:	bf38      	it	cc
 800d5b4:	461d      	movcc	r5, r3
 800d5b6:	0553      	lsls	r3, r2, #21
 800d5b8:	d527      	bpl.n	800d60a <__ssputs_r+0x8e>
 800d5ba:	4629      	mov	r1, r5
 800d5bc:	f7ff ff52 	bl	800d464 <_malloc_r>
 800d5c0:	4606      	mov	r6, r0
 800d5c2:	b360      	cbz	r0, 800d61e <__ssputs_r+0xa2>
 800d5c4:	6921      	ldr	r1, [r4, #16]
 800d5c6:	464a      	mov	r2, r9
 800d5c8:	f000 fae6 	bl	800db98 <memcpy>
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d5d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5d6:	81a3      	strh	r3, [r4, #12]
 800d5d8:	6126      	str	r6, [r4, #16]
 800d5da:	6165      	str	r5, [r4, #20]
 800d5dc:	444e      	add	r6, r9
 800d5de:	eba5 0509 	sub.w	r5, r5, r9
 800d5e2:	6026      	str	r6, [r4, #0]
 800d5e4:	60a5      	str	r5, [r4, #8]
 800d5e6:	463e      	mov	r6, r7
 800d5e8:	42be      	cmp	r6, r7
 800d5ea:	d900      	bls.n	800d5ee <__ssputs_r+0x72>
 800d5ec:	463e      	mov	r6, r7
 800d5ee:	6820      	ldr	r0, [r4, #0]
 800d5f0:	4632      	mov	r2, r6
 800d5f2:	4641      	mov	r1, r8
 800d5f4:	f000 faa6 	bl	800db44 <memmove>
 800d5f8:	68a3      	ldr	r3, [r4, #8]
 800d5fa:	1b9b      	subs	r3, r3, r6
 800d5fc:	60a3      	str	r3, [r4, #8]
 800d5fe:	6823      	ldr	r3, [r4, #0]
 800d600:	4433      	add	r3, r6
 800d602:	6023      	str	r3, [r4, #0]
 800d604:	2000      	movs	r0, #0
 800d606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d60a:	462a      	mov	r2, r5
 800d60c:	f000 fad2 	bl	800dbb4 <_realloc_r>
 800d610:	4606      	mov	r6, r0
 800d612:	2800      	cmp	r0, #0
 800d614:	d1e0      	bne.n	800d5d8 <__ssputs_r+0x5c>
 800d616:	6921      	ldr	r1, [r4, #16]
 800d618:	4650      	mov	r0, sl
 800d61a:	f7ff feb7 	bl	800d38c <_free_r>
 800d61e:	230c      	movs	r3, #12
 800d620:	f8ca 3000 	str.w	r3, [sl]
 800d624:	89a3      	ldrh	r3, [r4, #12]
 800d626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d62a:	81a3      	strh	r3, [r4, #12]
 800d62c:	f04f 30ff 	mov.w	r0, #4294967295
 800d630:	e7e9      	b.n	800d606 <__ssputs_r+0x8a>
	...

0800d634 <_svfiprintf_r>:
 800d634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d638:	4698      	mov	r8, r3
 800d63a:	898b      	ldrh	r3, [r1, #12]
 800d63c:	061b      	lsls	r3, r3, #24
 800d63e:	b09d      	sub	sp, #116	@ 0x74
 800d640:	4607      	mov	r7, r0
 800d642:	460d      	mov	r5, r1
 800d644:	4614      	mov	r4, r2
 800d646:	d510      	bpl.n	800d66a <_svfiprintf_r+0x36>
 800d648:	690b      	ldr	r3, [r1, #16]
 800d64a:	b973      	cbnz	r3, 800d66a <_svfiprintf_r+0x36>
 800d64c:	2140      	movs	r1, #64	@ 0x40
 800d64e:	f7ff ff09 	bl	800d464 <_malloc_r>
 800d652:	6028      	str	r0, [r5, #0]
 800d654:	6128      	str	r0, [r5, #16]
 800d656:	b930      	cbnz	r0, 800d666 <_svfiprintf_r+0x32>
 800d658:	230c      	movs	r3, #12
 800d65a:	603b      	str	r3, [r7, #0]
 800d65c:	f04f 30ff 	mov.w	r0, #4294967295
 800d660:	b01d      	add	sp, #116	@ 0x74
 800d662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d666:	2340      	movs	r3, #64	@ 0x40
 800d668:	616b      	str	r3, [r5, #20]
 800d66a:	2300      	movs	r3, #0
 800d66c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d66e:	2320      	movs	r3, #32
 800d670:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d674:	f8cd 800c 	str.w	r8, [sp, #12]
 800d678:	2330      	movs	r3, #48	@ 0x30
 800d67a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d818 <_svfiprintf_r+0x1e4>
 800d67e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d682:	f04f 0901 	mov.w	r9, #1
 800d686:	4623      	mov	r3, r4
 800d688:	469a      	mov	sl, r3
 800d68a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d68e:	b10a      	cbz	r2, 800d694 <_svfiprintf_r+0x60>
 800d690:	2a25      	cmp	r2, #37	@ 0x25
 800d692:	d1f9      	bne.n	800d688 <_svfiprintf_r+0x54>
 800d694:	ebba 0b04 	subs.w	fp, sl, r4
 800d698:	d00b      	beq.n	800d6b2 <_svfiprintf_r+0x7e>
 800d69a:	465b      	mov	r3, fp
 800d69c:	4622      	mov	r2, r4
 800d69e:	4629      	mov	r1, r5
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	f7ff ff6b 	bl	800d57c <__ssputs_r>
 800d6a6:	3001      	adds	r0, #1
 800d6a8:	f000 80a7 	beq.w	800d7fa <_svfiprintf_r+0x1c6>
 800d6ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6ae:	445a      	add	r2, fp
 800d6b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 809f 	beq.w	800d7fa <_svfiprintf_r+0x1c6>
 800d6bc:	2300      	movs	r3, #0
 800d6be:	f04f 32ff 	mov.w	r2, #4294967295
 800d6c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6c6:	f10a 0a01 	add.w	sl, sl, #1
 800d6ca:	9304      	str	r3, [sp, #16]
 800d6cc:	9307      	str	r3, [sp, #28]
 800d6ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d6d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6d4:	4654      	mov	r4, sl
 800d6d6:	2205      	movs	r2, #5
 800d6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6dc:	484e      	ldr	r0, [pc, #312]	@ (800d818 <_svfiprintf_r+0x1e4>)
 800d6de:	f7f2 fd8f 	bl	8000200 <memchr>
 800d6e2:	9a04      	ldr	r2, [sp, #16]
 800d6e4:	b9d8      	cbnz	r0, 800d71e <_svfiprintf_r+0xea>
 800d6e6:	06d0      	lsls	r0, r2, #27
 800d6e8:	bf44      	itt	mi
 800d6ea:	2320      	movmi	r3, #32
 800d6ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6f0:	0711      	lsls	r1, r2, #28
 800d6f2:	bf44      	itt	mi
 800d6f4:	232b      	movmi	r3, #43	@ 0x2b
 800d6f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d6fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800d700:	d015      	beq.n	800d72e <_svfiprintf_r+0xfa>
 800d702:	9a07      	ldr	r2, [sp, #28]
 800d704:	4654      	mov	r4, sl
 800d706:	2000      	movs	r0, #0
 800d708:	f04f 0c0a 	mov.w	ip, #10
 800d70c:	4621      	mov	r1, r4
 800d70e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d712:	3b30      	subs	r3, #48	@ 0x30
 800d714:	2b09      	cmp	r3, #9
 800d716:	d94b      	bls.n	800d7b0 <_svfiprintf_r+0x17c>
 800d718:	b1b0      	cbz	r0, 800d748 <_svfiprintf_r+0x114>
 800d71a:	9207      	str	r2, [sp, #28]
 800d71c:	e014      	b.n	800d748 <_svfiprintf_r+0x114>
 800d71e:	eba0 0308 	sub.w	r3, r0, r8
 800d722:	fa09 f303 	lsl.w	r3, r9, r3
 800d726:	4313      	orrs	r3, r2
 800d728:	9304      	str	r3, [sp, #16]
 800d72a:	46a2      	mov	sl, r4
 800d72c:	e7d2      	b.n	800d6d4 <_svfiprintf_r+0xa0>
 800d72e:	9b03      	ldr	r3, [sp, #12]
 800d730:	1d19      	adds	r1, r3, #4
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	9103      	str	r1, [sp, #12]
 800d736:	2b00      	cmp	r3, #0
 800d738:	bfbb      	ittet	lt
 800d73a:	425b      	neglt	r3, r3
 800d73c:	f042 0202 	orrlt.w	r2, r2, #2
 800d740:	9307      	strge	r3, [sp, #28]
 800d742:	9307      	strlt	r3, [sp, #28]
 800d744:	bfb8      	it	lt
 800d746:	9204      	strlt	r2, [sp, #16]
 800d748:	7823      	ldrb	r3, [r4, #0]
 800d74a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d74c:	d10a      	bne.n	800d764 <_svfiprintf_r+0x130>
 800d74e:	7863      	ldrb	r3, [r4, #1]
 800d750:	2b2a      	cmp	r3, #42	@ 0x2a
 800d752:	d132      	bne.n	800d7ba <_svfiprintf_r+0x186>
 800d754:	9b03      	ldr	r3, [sp, #12]
 800d756:	1d1a      	adds	r2, r3, #4
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	9203      	str	r2, [sp, #12]
 800d75c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d760:	3402      	adds	r4, #2
 800d762:	9305      	str	r3, [sp, #20]
 800d764:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d828 <_svfiprintf_r+0x1f4>
 800d768:	7821      	ldrb	r1, [r4, #0]
 800d76a:	2203      	movs	r2, #3
 800d76c:	4650      	mov	r0, sl
 800d76e:	f7f2 fd47 	bl	8000200 <memchr>
 800d772:	b138      	cbz	r0, 800d784 <_svfiprintf_r+0x150>
 800d774:	9b04      	ldr	r3, [sp, #16]
 800d776:	eba0 000a 	sub.w	r0, r0, sl
 800d77a:	2240      	movs	r2, #64	@ 0x40
 800d77c:	4082      	lsls	r2, r0
 800d77e:	4313      	orrs	r3, r2
 800d780:	3401      	adds	r4, #1
 800d782:	9304      	str	r3, [sp, #16]
 800d784:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d788:	4824      	ldr	r0, [pc, #144]	@ (800d81c <_svfiprintf_r+0x1e8>)
 800d78a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d78e:	2206      	movs	r2, #6
 800d790:	f7f2 fd36 	bl	8000200 <memchr>
 800d794:	2800      	cmp	r0, #0
 800d796:	d036      	beq.n	800d806 <_svfiprintf_r+0x1d2>
 800d798:	4b21      	ldr	r3, [pc, #132]	@ (800d820 <_svfiprintf_r+0x1ec>)
 800d79a:	bb1b      	cbnz	r3, 800d7e4 <_svfiprintf_r+0x1b0>
 800d79c:	9b03      	ldr	r3, [sp, #12]
 800d79e:	3307      	adds	r3, #7
 800d7a0:	f023 0307 	bic.w	r3, r3, #7
 800d7a4:	3308      	adds	r3, #8
 800d7a6:	9303      	str	r3, [sp, #12]
 800d7a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7aa:	4433      	add	r3, r6
 800d7ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7ae:	e76a      	b.n	800d686 <_svfiprintf_r+0x52>
 800d7b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	2001      	movs	r0, #1
 800d7b8:	e7a8      	b.n	800d70c <_svfiprintf_r+0xd8>
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	3401      	adds	r4, #1
 800d7be:	9305      	str	r3, [sp, #20]
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	f04f 0c0a 	mov.w	ip, #10
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7cc:	3a30      	subs	r2, #48	@ 0x30
 800d7ce:	2a09      	cmp	r2, #9
 800d7d0:	d903      	bls.n	800d7da <_svfiprintf_r+0x1a6>
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d0c6      	beq.n	800d764 <_svfiprintf_r+0x130>
 800d7d6:	9105      	str	r1, [sp, #20]
 800d7d8:	e7c4      	b.n	800d764 <_svfiprintf_r+0x130>
 800d7da:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7de:	4604      	mov	r4, r0
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e7f0      	b.n	800d7c6 <_svfiprintf_r+0x192>
 800d7e4:	ab03      	add	r3, sp, #12
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	462a      	mov	r2, r5
 800d7ea:	4b0e      	ldr	r3, [pc, #56]	@ (800d824 <_svfiprintf_r+0x1f0>)
 800d7ec:	a904      	add	r1, sp, #16
 800d7ee:	4638      	mov	r0, r7
 800d7f0:	f3af 8000 	nop.w
 800d7f4:	1c42      	adds	r2, r0, #1
 800d7f6:	4606      	mov	r6, r0
 800d7f8:	d1d6      	bne.n	800d7a8 <_svfiprintf_r+0x174>
 800d7fa:	89ab      	ldrh	r3, [r5, #12]
 800d7fc:	065b      	lsls	r3, r3, #25
 800d7fe:	f53f af2d 	bmi.w	800d65c <_svfiprintf_r+0x28>
 800d802:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d804:	e72c      	b.n	800d660 <_svfiprintf_r+0x2c>
 800d806:	ab03      	add	r3, sp, #12
 800d808:	9300      	str	r3, [sp, #0]
 800d80a:	462a      	mov	r2, r5
 800d80c:	4b05      	ldr	r3, [pc, #20]	@ (800d824 <_svfiprintf_r+0x1f0>)
 800d80e:	a904      	add	r1, sp, #16
 800d810:	4638      	mov	r0, r7
 800d812:	f000 f879 	bl	800d908 <_printf_i>
 800d816:	e7ed      	b.n	800d7f4 <_svfiprintf_r+0x1c0>
 800d818:	0800e0c4 	.word	0x0800e0c4
 800d81c:	0800e0ce 	.word	0x0800e0ce
 800d820:	00000000 	.word	0x00000000
 800d824:	0800d57d 	.word	0x0800d57d
 800d828:	0800e0ca 	.word	0x0800e0ca

0800d82c <_printf_common>:
 800d82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d830:	4616      	mov	r6, r2
 800d832:	4698      	mov	r8, r3
 800d834:	688a      	ldr	r2, [r1, #8]
 800d836:	690b      	ldr	r3, [r1, #16]
 800d838:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d83c:	4293      	cmp	r3, r2
 800d83e:	bfb8      	it	lt
 800d840:	4613      	movlt	r3, r2
 800d842:	6033      	str	r3, [r6, #0]
 800d844:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d848:	4607      	mov	r7, r0
 800d84a:	460c      	mov	r4, r1
 800d84c:	b10a      	cbz	r2, 800d852 <_printf_common+0x26>
 800d84e:	3301      	adds	r3, #1
 800d850:	6033      	str	r3, [r6, #0]
 800d852:	6823      	ldr	r3, [r4, #0]
 800d854:	0699      	lsls	r1, r3, #26
 800d856:	bf42      	ittt	mi
 800d858:	6833      	ldrmi	r3, [r6, #0]
 800d85a:	3302      	addmi	r3, #2
 800d85c:	6033      	strmi	r3, [r6, #0]
 800d85e:	6825      	ldr	r5, [r4, #0]
 800d860:	f015 0506 	ands.w	r5, r5, #6
 800d864:	d106      	bne.n	800d874 <_printf_common+0x48>
 800d866:	f104 0a19 	add.w	sl, r4, #25
 800d86a:	68e3      	ldr	r3, [r4, #12]
 800d86c:	6832      	ldr	r2, [r6, #0]
 800d86e:	1a9b      	subs	r3, r3, r2
 800d870:	42ab      	cmp	r3, r5
 800d872:	dc26      	bgt.n	800d8c2 <_printf_common+0x96>
 800d874:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d878:	6822      	ldr	r2, [r4, #0]
 800d87a:	3b00      	subs	r3, #0
 800d87c:	bf18      	it	ne
 800d87e:	2301      	movne	r3, #1
 800d880:	0692      	lsls	r2, r2, #26
 800d882:	d42b      	bmi.n	800d8dc <_printf_common+0xb0>
 800d884:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d888:	4641      	mov	r1, r8
 800d88a:	4638      	mov	r0, r7
 800d88c:	47c8      	blx	r9
 800d88e:	3001      	adds	r0, #1
 800d890:	d01e      	beq.n	800d8d0 <_printf_common+0xa4>
 800d892:	6823      	ldr	r3, [r4, #0]
 800d894:	6922      	ldr	r2, [r4, #16]
 800d896:	f003 0306 	and.w	r3, r3, #6
 800d89a:	2b04      	cmp	r3, #4
 800d89c:	bf02      	ittt	eq
 800d89e:	68e5      	ldreq	r5, [r4, #12]
 800d8a0:	6833      	ldreq	r3, [r6, #0]
 800d8a2:	1aed      	subeq	r5, r5, r3
 800d8a4:	68a3      	ldr	r3, [r4, #8]
 800d8a6:	bf0c      	ite	eq
 800d8a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8ac:	2500      	movne	r5, #0
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	bfc4      	itt	gt
 800d8b2:	1a9b      	subgt	r3, r3, r2
 800d8b4:	18ed      	addgt	r5, r5, r3
 800d8b6:	2600      	movs	r6, #0
 800d8b8:	341a      	adds	r4, #26
 800d8ba:	42b5      	cmp	r5, r6
 800d8bc:	d11a      	bne.n	800d8f4 <_printf_common+0xc8>
 800d8be:	2000      	movs	r0, #0
 800d8c0:	e008      	b.n	800d8d4 <_printf_common+0xa8>
 800d8c2:	2301      	movs	r3, #1
 800d8c4:	4652      	mov	r2, sl
 800d8c6:	4641      	mov	r1, r8
 800d8c8:	4638      	mov	r0, r7
 800d8ca:	47c8      	blx	r9
 800d8cc:	3001      	adds	r0, #1
 800d8ce:	d103      	bne.n	800d8d8 <_printf_common+0xac>
 800d8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8d8:	3501      	adds	r5, #1
 800d8da:	e7c6      	b.n	800d86a <_printf_common+0x3e>
 800d8dc:	18e1      	adds	r1, r4, r3
 800d8de:	1c5a      	adds	r2, r3, #1
 800d8e0:	2030      	movs	r0, #48	@ 0x30
 800d8e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d8e6:	4422      	add	r2, r4
 800d8e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d8ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d8f0:	3302      	adds	r3, #2
 800d8f2:	e7c7      	b.n	800d884 <_printf_common+0x58>
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	4622      	mov	r2, r4
 800d8f8:	4641      	mov	r1, r8
 800d8fa:	4638      	mov	r0, r7
 800d8fc:	47c8      	blx	r9
 800d8fe:	3001      	adds	r0, #1
 800d900:	d0e6      	beq.n	800d8d0 <_printf_common+0xa4>
 800d902:	3601      	adds	r6, #1
 800d904:	e7d9      	b.n	800d8ba <_printf_common+0x8e>
	...

0800d908 <_printf_i>:
 800d908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d90c:	7e0f      	ldrb	r7, [r1, #24]
 800d90e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d910:	2f78      	cmp	r7, #120	@ 0x78
 800d912:	4691      	mov	r9, r2
 800d914:	4680      	mov	r8, r0
 800d916:	460c      	mov	r4, r1
 800d918:	469a      	mov	sl, r3
 800d91a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d91e:	d807      	bhi.n	800d930 <_printf_i+0x28>
 800d920:	2f62      	cmp	r7, #98	@ 0x62
 800d922:	d80a      	bhi.n	800d93a <_printf_i+0x32>
 800d924:	2f00      	cmp	r7, #0
 800d926:	f000 80d1 	beq.w	800dacc <_printf_i+0x1c4>
 800d92a:	2f58      	cmp	r7, #88	@ 0x58
 800d92c:	f000 80b8 	beq.w	800daa0 <_printf_i+0x198>
 800d930:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d934:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d938:	e03a      	b.n	800d9b0 <_printf_i+0xa8>
 800d93a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d93e:	2b15      	cmp	r3, #21
 800d940:	d8f6      	bhi.n	800d930 <_printf_i+0x28>
 800d942:	a101      	add	r1, pc, #4	@ (adr r1, 800d948 <_printf_i+0x40>)
 800d944:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d948:	0800d9a1 	.word	0x0800d9a1
 800d94c:	0800d9b5 	.word	0x0800d9b5
 800d950:	0800d931 	.word	0x0800d931
 800d954:	0800d931 	.word	0x0800d931
 800d958:	0800d931 	.word	0x0800d931
 800d95c:	0800d931 	.word	0x0800d931
 800d960:	0800d9b5 	.word	0x0800d9b5
 800d964:	0800d931 	.word	0x0800d931
 800d968:	0800d931 	.word	0x0800d931
 800d96c:	0800d931 	.word	0x0800d931
 800d970:	0800d931 	.word	0x0800d931
 800d974:	0800dab3 	.word	0x0800dab3
 800d978:	0800d9df 	.word	0x0800d9df
 800d97c:	0800da6d 	.word	0x0800da6d
 800d980:	0800d931 	.word	0x0800d931
 800d984:	0800d931 	.word	0x0800d931
 800d988:	0800dad5 	.word	0x0800dad5
 800d98c:	0800d931 	.word	0x0800d931
 800d990:	0800d9df 	.word	0x0800d9df
 800d994:	0800d931 	.word	0x0800d931
 800d998:	0800d931 	.word	0x0800d931
 800d99c:	0800da75 	.word	0x0800da75
 800d9a0:	6833      	ldr	r3, [r6, #0]
 800d9a2:	1d1a      	adds	r2, r3, #4
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	6032      	str	r2, [r6, #0]
 800d9a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d9ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	e09c      	b.n	800daee <_printf_i+0x1e6>
 800d9b4:	6833      	ldr	r3, [r6, #0]
 800d9b6:	6820      	ldr	r0, [r4, #0]
 800d9b8:	1d19      	adds	r1, r3, #4
 800d9ba:	6031      	str	r1, [r6, #0]
 800d9bc:	0606      	lsls	r6, r0, #24
 800d9be:	d501      	bpl.n	800d9c4 <_printf_i+0xbc>
 800d9c0:	681d      	ldr	r5, [r3, #0]
 800d9c2:	e003      	b.n	800d9cc <_printf_i+0xc4>
 800d9c4:	0645      	lsls	r5, r0, #25
 800d9c6:	d5fb      	bpl.n	800d9c0 <_printf_i+0xb8>
 800d9c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d9cc:	2d00      	cmp	r5, #0
 800d9ce:	da03      	bge.n	800d9d8 <_printf_i+0xd0>
 800d9d0:	232d      	movs	r3, #45	@ 0x2d
 800d9d2:	426d      	negs	r5, r5
 800d9d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9d8:	4858      	ldr	r0, [pc, #352]	@ (800db3c <_printf_i+0x234>)
 800d9da:	230a      	movs	r3, #10
 800d9dc:	e011      	b.n	800da02 <_printf_i+0xfa>
 800d9de:	6821      	ldr	r1, [r4, #0]
 800d9e0:	6833      	ldr	r3, [r6, #0]
 800d9e2:	0608      	lsls	r0, r1, #24
 800d9e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d9e8:	d402      	bmi.n	800d9f0 <_printf_i+0xe8>
 800d9ea:	0649      	lsls	r1, r1, #25
 800d9ec:	bf48      	it	mi
 800d9ee:	b2ad      	uxthmi	r5, r5
 800d9f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d9f2:	4852      	ldr	r0, [pc, #328]	@ (800db3c <_printf_i+0x234>)
 800d9f4:	6033      	str	r3, [r6, #0]
 800d9f6:	bf14      	ite	ne
 800d9f8:	230a      	movne	r3, #10
 800d9fa:	2308      	moveq	r3, #8
 800d9fc:	2100      	movs	r1, #0
 800d9fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800da02:	6866      	ldr	r6, [r4, #4]
 800da04:	60a6      	str	r6, [r4, #8]
 800da06:	2e00      	cmp	r6, #0
 800da08:	db05      	blt.n	800da16 <_printf_i+0x10e>
 800da0a:	6821      	ldr	r1, [r4, #0]
 800da0c:	432e      	orrs	r6, r5
 800da0e:	f021 0104 	bic.w	r1, r1, #4
 800da12:	6021      	str	r1, [r4, #0]
 800da14:	d04b      	beq.n	800daae <_printf_i+0x1a6>
 800da16:	4616      	mov	r6, r2
 800da18:	fbb5 f1f3 	udiv	r1, r5, r3
 800da1c:	fb03 5711 	mls	r7, r3, r1, r5
 800da20:	5dc7      	ldrb	r7, [r0, r7]
 800da22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da26:	462f      	mov	r7, r5
 800da28:	42bb      	cmp	r3, r7
 800da2a:	460d      	mov	r5, r1
 800da2c:	d9f4      	bls.n	800da18 <_printf_i+0x110>
 800da2e:	2b08      	cmp	r3, #8
 800da30:	d10b      	bne.n	800da4a <_printf_i+0x142>
 800da32:	6823      	ldr	r3, [r4, #0]
 800da34:	07df      	lsls	r7, r3, #31
 800da36:	d508      	bpl.n	800da4a <_printf_i+0x142>
 800da38:	6923      	ldr	r3, [r4, #16]
 800da3a:	6861      	ldr	r1, [r4, #4]
 800da3c:	4299      	cmp	r1, r3
 800da3e:	bfde      	ittt	le
 800da40:	2330      	movle	r3, #48	@ 0x30
 800da42:	f806 3c01 	strble.w	r3, [r6, #-1]
 800da46:	f106 36ff 	addle.w	r6, r6, #4294967295
 800da4a:	1b92      	subs	r2, r2, r6
 800da4c:	6122      	str	r2, [r4, #16]
 800da4e:	f8cd a000 	str.w	sl, [sp]
 800da52:	464b      	mov	r3, r9
 800da54:	aa03      	add	r2, sp, #12
 800da56:	4621      	mov	r1, r4
 800da58:	4640      	mov	r0, r8
 800da5a:	f7ff fee7 	bl	800d82c <_printf_common>
 800da5e:	3001      	adds	r0, #1
 800da60:	d14a      	bne.n	800daf8 <_printf_i+0x1f0>
 800da62:	f04f 30ff 	mov.w	r0, #4294967295
 800da66:	b004      	add	sp, #16
 800da68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da6c:	6823      	ldr	r3, [r4, #0]
 800da6e:	f043 0320 	orr.w	r3, r3, #32
 800da72:	6023      	str	r3, [r4, #0]
 800da74:	4832      	ldr	r0, [pc, #200]	@ (800db40 <_printf_i+0x238>)
 800da76:	2778      	movs	r7, #120	@ 0x78
 800da78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da7c:	6823      	ldr	r3, [r4, #0]
 800da7e:	6831      	ldr	r1, [r6, #0]
 800da80:	061f      	lsls	r7, r3, #24
 800da82:	f851 5b04 	ldr.w	r5, [r1], #4
 800da86:	d402      	bmi.n	800da8e <_printf_i+0x186>
 800da88:	065f      	lsls	r7, r3, #25
 800da8a:	bf48      	it	mi
 800da8c:	b2ad      	uxthmi	r5, r5
 800da8e:	6031      	str	r1, [r6, #0]
 800da90:	07d9      	lsls	r1, r3, #31
 800da92:	bf44      	itt	mi
 800da94:	f043 0320 	orrmi.w	r3, r3, #32
 800da98:	6023      	strmi	r3, [r4, #0]
 800da9a:	b11d      	cbz	r5, 800daa4 <_printf_i+0x19c>
 800da9c:	2310      	movs	r3, #16
 800da9e:	e7ad      	b.n	800d9fc <_printf_i+0xf4>
 800daa0:	4826      	ldr	r0, [pc, #152]	@ (800db3c <_printf_i+0x234>)
 800daa2:	e7e9      	b.n	800da78 <_printf_i+0x170>
 800daa4:	6823      	ldr	r3, [r4, #0]
 800daa6:	f023 0320 	bic.w	r3, r3, #32
 800daaa:	6023      	str	r3, [r4, #0]
 800daac:	e7f6      	b.n	800da9c <_printf_i+0x194>
 800daae:	4616      	mov	r6, r2
 800dab0:	e7bd      	b.n	800da2e <_printf_i+0x126>
 800dab2:	6833      	ldr	r3, [r6, #0]
 800dab4:	6825      	ldr	r5, [r4, #0]
 800dab6:	6961      	ldr	r1, [r4, #20]
 800dab8:	1d18      	adds	r0, r3, #4
 800daba:	6030      	str	r0, [r6, #0]
 800dabc:	062e      	lsls	r6, r5, #24
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	d501      	bpl.n	800dac6 <_printf_i+0x1be>
 800dac2:	6019      	str	r1, [r3, #0]
 800dac4:	e002      	b.n	800dacc <_printf_i+0x1c4>
 800dac6:	0668      	lsls	r0, r5, #25
 800dac8:	d5fb      	bpl.n	800dac2 <_printf_i+0x1ba>
 800daca:	8019      	strh	r1, [r3, #0]
 800dacc:	2300      	movs	r3, #0
 800dace:	6123      	str	r3, [r4, #16]
 800dad0:	4616      	mov	r6, r2
 800dad2:	e7bc      	b.n	800da4e <_printf_i+0x146>
 800dad4:	6833      	ldr	r3, [r6, #0]
 800dad6:	1d1a      	adds	r2, r3, #4
 800dad8:	6032      	str	r2, [r6, #0]
 800dada:	681e      	ldr	r6, [r3, #0]
 800dadc:	6862      	ldr	r2, [r4, #4]
 800dade:	2100      	movs	r1, #0
 800dae0:	4630      	mov	r0, r6
 800dae2:	f7f2 fb8d 	bl	8000200 <memchr>
 800dae6:	b108      	cbz	r0, 800daec <_printf_i+0x1e4>
 800dae8:	1b80      	subs	r0, r0, r6
 800daea:	6060      	str	r0, [r4, #4]
 800daec:	6863      	ldr	r3, [r4, #4]
 800daee:	6123      	str	r3, [r4, #16]
 800daf0:	2300      	movs	r3, #0
 800daf2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800daf6:	e7aa      	b.n	800da4e <_printf_i+0x146>
 800daf8:	6923      	ldr	r3, [r4, #16]
 800dafa:	4632      	mov	r2, r6
 800dafc:	4649      	mov	r1, r9
 800dafe:	4640      	mov	r0, r8
 800db00:	47d0      	blx	sl
 800db02:	3001      	adds	r0, #1
 800db04:	d0ad      	beq.n	800da62 <_printf_i+0x15a>
 800db06:	6823      	ldr	r3, [r4, #0]
 800db08:	079b      	lsls	r3, r3, #30
 800db0a:	d413      	bmi.n	800db34 <_printf_i+0x22c>
 800db0c:	68e0      	ldr	r0, [r4, #12]
 800db0e:	9b03      	ldr	r3, [sp, #12]
 800db10:	4298      	cmp	r0, r3
 800db12:	bfb8      	it	lt
 800db14:	4618      	movlt	r0, r3
 800db16:	e7a6      	b.n	800da66 <_printf_i+0x15e>
 800db18:	2301      	movs	r3, #1
 800db1a:	4632      	mov	r2, r6
 800db1c:	4649      	mov	r1, r9
 800db1e:	4640      	mov	r0, r8
 800db20:	47d0      	blx	sl
 800db22:	3001      	adds	r0, #1
 800db24:	d09d      	beq.n	800da62 <_printf_i+0x15a>
 800db26:	3501      	adds	r5, #1
 800db28:	68e3      	ldr	r3, [r4, #12]
 800db2a:	9903      	ldr	r1, [sp, #12]
 800db2c:	1a5b      	subs	r3, r3, r1
 800db2e:	42ab      	cmp	r3, r5
 800db30:	dcf2      	bgt.n	800db18 <_printf_i+0x210>
 800db32:	e7eb      	b.n	800db0c <_printf_i+0x204>
 800db34:	2500      	movs	r5, #0
 800db36:	f104 0619 	add.w	r6, r4, #25
 800db3a:	e7f5      	b.n	800db28 <_printf_i+0x220>
 800db3c:	0800e0d5 	.word	0x0800e0d5
 800db40:	0800e0e6 	.word	0x0800e0e6

0800db44 <memmove>:
 800db44:	4288      	cmp	r0, r1
 800db46:	b510      	push	{r4, lr}
 800db48:	eb01 0402 	add.w	r4, r1, r2
 800db4c:	d902      	bls.n	800db54 <memmove+0x10>
 800db4e:	4284      	cmp	r4, r0
 800db50:	4623      	mov	r3, r4
 800db52:	d807      	bhi.n	800db64 <memmove+0x20>
 800db54:	1e43      	subs	r3, r0, #1
 800db56:	42a1      	cmp	r1, r4
 800db58:	d008      	beq.n	800db6c <memmove+0x28>
 800db5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db62:	e7f8      	b.n	800db56 <memmove+0x12>
 800db64:	4402      	add	r2, r0
 800db66:	4601      	mov	r1, r0
 800db68:	428a      	cmp	r2, r1
 800db6a:	d100      	bne.n	800db6e <memmove+0x2a>
 800db6c:	bd10      	pop	{r4, pc}
 800db6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800db72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800db76:	e7f7      	b.n	800db68 <memmove+0x24>

0800db78 <_sbrk_r>:
 800db78:	b538      	push	{r3, r4, r5, lr}
 800db7a:	4d06      	ldr	r5, [pc, #24]	@ (800db94 <_sbrk_r+0x1c>)
 800db7c:	2300      	movs	r3, #0
 800db7e:	4604      	mov	r4, r0
 800db80:	4608      	mov	r0, r1
 800db82:	602b      	str	r3, [r5, #0]
 800db84:	f7f5 fb52 	bl	800322c <_sbrk>
 800db88:	1c43      	adds	r3, r0, #1
 800db8a:	d102      	bne.n	800db92 <_sbrk_r+0x1a>
 800db8c:	682b      	ldr	r3, [r5, #0]
 800db8e:	b103      	cbz	r3, 800db92 <_sbrk_r+0x1a>
 800db90:	6023      	str	r3, [r4, #0]
 800db92:	bd38      	pop	{r3, r4, r5, pc}
 800db94:	20000468 	.word	0x20000468

0800db98 <memcpy>:
 800db98:	440a      	add	r2, r1
 800db9a:	4291      	cmp	r1, r2
 800db9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dba0:	d100      	bne.n	800dba4 <memcpy+0xc>
 800dba2:	4770      	bx	lr
 800dba4:	b510      	push	{r4, lr}
 800dba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbae:	4291      	cmp	r1, r2
 800dbb0:	d1f9      	bne.n	800dba6 <memcpy+0xe>
 800dbb2:	bd10      	pop	{r4, pc}

0800dbb4 <_realloc_r>:
 800dbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbb8:	4607      	mov	r7, r0
 800dbba:	4614      	mov	r4, r2
 800dbbc:	460d      	mov	r5, r1
 800dbbe:	b921      	cbnz	r1, 800dbca <_realloc_r+0x16>
 800dbc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbc4:	4611      	mov	r1, r2
 800dbc6:	f7ff bc4d 	b.w	800d464 <_malloc_r>
 800dbca:	b92a      	cbnz	r2, 800dbd8 <_realloc_r+0x24>
 800dbcc:	f7ff fbde 	bl	800d38c <_free_r>
 800dbd0:	4625      	mov	r5, r4
 800dbd2:	4628      	mov	r0, r5
 800dbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbd8:	f000 f81a 	bl	800dc10 <_malloc_usable_size_r>
 800dbdc:	4284      	cmp	r4, r0
 800dbde:	4606      	mov	r6, r0
 800dbe0:	d802      	bhi.n	800dbe8 <_realloc_r+0x34>
 800dbe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dbe6:	d8f4      	bhi.n	800dbd2 <_realloc_r+0x1e>
 800dbe8:	4621      	mov	r1, r4
 800dbea:	4638      	mov	r0, r7
 800dbec:	f7ff fc3a 	bl	800d464 <_malloc_r>
 800dbf0:	4680      	mov	r8, r0
 800dbf2:	b908      	cbnz	r0, 800dbf8 <_realloc_r+0x44>
 800dbf4:	4645      	mov	r5, r8
 800dbf6:	e7ec      	b.n	800dbd2 <_realloc_r+0x1e>
 800dbf8:	42b4      	cmp	r4, r6
 800dbfa:	4622      	mov	r2, r4
 800dbfc:	4629      	mov	r1, r5
 800dbfe:	bf28      	it	cs
 800dc00:	4632      	movcs	r2, r6
 800dc02:	f7ff ffc9 	bl	800db98 <memcpy>
 800dc06:	4629      	mov	r1, r5
 800dc08:	4638      	mov	r0, r7
 800dc0a:	f7ff fbbf 	bl	800d38c <_free_r>
 800dc0e:	e7f1      	b.n	800dbf4 <_realloc_r+0x40>

0800dc10 <_malloc_usable_size_r>:
 800dc10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc14:	1f18      	subs	r0, r3, #4
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	bfbc      	itt	lt
 800dc1a:	580b      	ldrlt	r3, [r1, r0]
 800dc1c:	18c0      	addlt	r0, r0, r3
 800dc1e:	4770      	bx	lr

0800dc20 <_init>:
 800dc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc22:	bf00      	nop
 800dc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc26:	bc08      	pop	{r3}
 800dc28:	469e      	mov	lr, r3
 800dc2a:	4770      	bx	lr

0800dc2c <_fini>:
 800dc2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc2e:	bf00      	nop
 800dc30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc32:	bc08      	pop	{r3}
 800dc34:	469e      	mov	lr, r3
 800dc36:	4770      	bx	lr
