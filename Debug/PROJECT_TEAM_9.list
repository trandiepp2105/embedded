
PROJECT_TEAM_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800dc90  0800dc90  0000ec90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e128  0800e128  00010060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e128  0800e128  0000f128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e130  0800e130  00010060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e130  0800e130  0000f130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e134  0800e134  0000f134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800e138  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010060  2**0
                  CONTENTS
 10 .bss          00000b24  20000060  20000060  00010060  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000b84  20000b84  00010060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000177e6  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b36  00000000  00000000  00027876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  0002b3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b7d  00000000  00000000  0002c828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d07f  00000000  00000000  000503a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d128e  00000000  00000000  0006d424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e6b2  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000f92  00000000  00000000  0013e6f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b6c  00000000  00000000  0013f688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  001451f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dc78 	.word	0x0800dc78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800dc78 	.word	0x0800dc78

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b988 	b.w	8000eb4 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	468e      	mov	lr, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	4688      	mov	r8, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4617      	mov	r7, r2
 8000bd0:	d962      	bls.n	8000c98 <__udivmoddi4+0xdc>
 8000bd2:	fab2 f682 	clz	r6, r2
 8000bd6:	b14e      	cbz	r6, 8000bec <__udivmoddi4+0x30>
 8000bd8:	f1c6 0320 	rsb	r3, r6, #32
 8000bdc:	fa01 f806 	lsl.w	r8, r1, r6
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	40b7      	lsls	r7, r6
 8000be6:	ea43 0808 	orr.w	r8, r3, r8
 8000bea:	40b4      	lsls	r4, r6
 8000bec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf0:	fa1f fc87 	uxth.w	ip, r7
 8000bf4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bf8:	0c23      	lsrs	r3, r4, #16
 8000bfa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fb01 f20c 	mul.w	r2, r1, ip
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c10:	f080 80ea 	bcs.w	8000de8 <__udivmoddi4+0x22c>
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f240 80e7 	bls.w	8000de8 <__udivmoddi4+0x22c>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	443b      	add	r3, r7
 8000c1e:	1a9a      	subs	r2, r3, r2
 8000c20:	b2a3      	uxth	r3, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c2e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c32:	459c      	cmp	ip, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x8e>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3c:	f080 80d6 	bcs.w	8000dec <__udivmoddi4+0x230>
 8000c40:	459c      	cmp	ip, r3
 8000c42:	f240 80d3 	bls.w	8000dec <__udivmoddi4+0x230>
 8000c46:	443b      	add	r3, r7
 8000c48:	3802      	subs	r0, #2
 8000c4a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c4e:	eba3 030c 	sub.w	r3, r3, ip
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11d      	cbz	r5, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40f3      	lsrs	r3, r6
 8000c58:	2200      	movs	r2, #0
 8000c5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d905      	bls.n	8000c72 <__udivmoddi4+0xb6>
 8000c66:	b10d      	cbz	r5, 8000c6c <__udivmoddi4+0xb0>
 8000c68:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e7f5      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c72:	fab3 f183 	clz	r1, r3
 8000c76:	2900      	cmp	r1, #0
 8000c78:	d146      	bne.n	8000d08 <__udivmoddi4+0x14c>
 8000c7a:	4573      	cmp	r3, lr
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xc8>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 8105 	bhi.w	8000e8e <__udivmoddi4+0x2d2>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	4690      	mov	r8, r2
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e5      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c92:	e9c5 4800 	strd	r4, r8, [r5]
 8000c96:	e7e2      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f000 8090 	beq.w	8000dbe <__udivmoddi4+0x202>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f040 80a4 	bne.w	8000df0 <__udivmoddi4+0x234>
 8000ca8:	1a8a      	subs	r2, r1, r2
 8000caa:	0c03      	lsrs	r3, r0, #16
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	b280      	uxth	r0, r0
 8000cb2:	b2bc      	uxth	r4, r7
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cba:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cc2:	fb04 f20c 	mul.w	r2, r4, ip
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x11e>
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x11c>
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	f200 80e0 	bhi.w	8000e98 <__udivmoddi4+0x2dc>
 8000cd8:	46c4      	mov	ip, r8
 8000cda:	1a9b      	subs	r3, r3, r2
 8000cdc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ce0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ce4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ce8:	fb02 f404 	mul.w	r4, r2, r4
 8000cec:	429c      	cmp	r4, r3
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x144>
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x142>
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	f200 80ca 	bhi.w	8000e92 <__udivmoddi4+0x2d6>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	1b1b      	subs	r3, r3, r4
 8000d02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d06:	e7a5      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d08:	f1c1 0620 	rsb	r6, r1, #32
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d12:	431f      	orrs	r7, r3
 8000d14:	fa0e f401 	lsl.w	r4, lr, r1
 8000d18:	fa20 f306 	lsr.w	r3, r0, r6
 8000d1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d24:	4323      	orrs	r3, r4
 8000d26:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2a:	fa1f fc87 	uxth.w	ip, r7
 8000d2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d32:	0c1c      	lsrs	r4, r3, #16
 8000d34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	fa02 f201 	lsl.w	r2, r2, r1
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x1a0>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d4e:	f080 809c 	bcs.w	8000e8a <__udivmoddi4+0x2ce>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f240 8099 	bls.w	8000e8a <__udivmoddi4+0x2ce>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	443c      	add	r4, r7
 8000d5c:	eba4 040e 	sub.w	r4, r4, lr
 8000d60:	fa1f fe83 	uxth.w	lr, r3
 8000d64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d68:	fb09 4413 	mls	r4, r9, r3, r4
 8000d6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d74:	45a4      	cmp	ip, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1ce>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d7e:	f080 8082 	bcs.w	8000e86 <__udivmoddi4+0x2ca>
 8000d82:	45a4      	cmp	ip, r4
 8000d84:	d97f      	bls.n	8000e86 <__udivmoddi4+0x2ca>
 8000d86:	3b02      	subs	r3, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d8e:	eba4 040c 	sub.w	r4, r4, ip
 8000d92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d96:	4564      	cmp	r4, ip
 8000d98:	4673      	mov	r3, lr
 8000d9a:	46e1      	mov	r9, ip
 8000d9c:	d362      	bcc.n	8000e64 <__udivmoddi4+0x2a8>
 8000d9e:	d05f      	beq.n	8000e60 <__udivmoddi4+0x2a4>
 8000da0:	b15d      	cbz	r5, 8000dba <__udivmoddi4+0x1fe>
 8000da2:	ebb8 0203 	subs.w	r2, r8, r3
 8000da6:	eb64 0409 	sbc.w	r4, r4, r9
 8000daa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dae:	fa22 f301 	lsr.w	r3, r2, r1
 8000db2:	431e      	orrs	r6, r3
 8000db4:	40cc      	lsrs	r4, r1
 8000db6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dba:	2100      	movs	r1, #0
 8000dbc:	e74f      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000dbe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dc2:	0c01      	lsrs	r1, r0, #16
 8000dc4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dc8:	b280      	uxth	r0, r0
 8000dca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	463c      	mov	r4, r7
 8000dd4:	46b8      	mov	r8, r7
 8000dd6:	46be      	mov	lr, r7
 8000dd8:	2620      	movs	r6, #32
 8000dda:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dde:	eba2 0208 	sub.w	r2, r2, r8
 8000de2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000de6:	e766      	b.n	8000cb6 <__udivmoddi4+0xfa>
 8000de8:	4601      	mov	r1, r0
 8000dea:	e718      	b.n	8000c1e <__udivmoddi4+0x62>
 8000dec:	4610      	mov	r0, r2
 8000dee:	e72c      	b.n	8000c4a <__udivmoddi4+0x8e>
 8000df0:	f1c6 0220 	rsb	r2, r6, #32
 8000df4:	fa2e f302 	lsr.w	r3, lr, r2
 8000df8:	40b7      	lsls	r7, r6
 8000dfa:	40b1      	lsls	r1, r6
 8000dfc:	fa20 f202 	lsr.w	r2, r0, r2
 8000e00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e04:	430a      	orrs	r2, r1
 8000e06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e0a:	b2bc      	uxth	r4, r7
 8000e0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb08 f904 	mul.w	r9, r8, r4
 8000e1a:	40b0      	lsls	r0, r6
 8000e1c:	4589      	cmp	r9, r1
 8000e1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e22:	b280      	uxth	r0, r0
 8000e24:	d93e      	bls.n	8000ea4 <__udivmoddi4+0x2e8>
 8000e26:	1879      	adds	r1, r7, r1
 8000e28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e2c:	d201      	bcs.n	8000e32 <__udivmoddi4+0x276>
 8000e2e:	4589      	cmp	r9, r1
 8000e30:	d81f      	bhi.n	8000e72 <__udivmoddi4+0x2b6>
 8000e32:	eba1 0109 	sub.w	r1, r1, r9
 8000e36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3a:	fb09 f804 	mul.w	r8, r9, r4
 8000e3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e42:	b292      	uxth	r2, r2
 8000e44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e48:	4542      	cmp	r2, r8
 8000e4a:	d229      	bcs.n	8000ea0 <__udivmoddi4+0x2e4>
 8000e4c:	18ba      	adds	r2, r7, r2
 8000e4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e52:	d2c4      	bcs.n	8000dde <__udivmoddi4+0x222>
 8000e54:	4542      	cmp	r2, r8
 8000e56:	d2c2      	bcs.n	8000dde <__udivmoddi4+0x222>
 8000e58:	f1a9 0102 	sub.w	r1, r9, #2
 8000e5c:	443a      	add	r2, r7
 8000e5e:	e7be      	b.n	8000dde <__udivmoddi4+0x222>
 8000e60:	45f0      	cmp	r8, lr
 8000e62:	d29d      	bcs.n	8000da0 <__udivmoddi4+0x1e4>
 8000e64:	ebbe 0302 	subs.w	r3, lr, r2
 8000e68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	46e1      	mov	r9, ip
 8000e70:	e796      	b.n	8000da0 <__udivmoddi4+0x1e4>
 8000e72:	eba7 0909 	sub.w	r9, r7, r9
 8000e76:	4449      	add	r1, r9
 8000e78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e80:	fb09 f804 	mul.w	r8, r9, r4
 8000e84:	e7db      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e86:	4673      	mov	r3, lr
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1ce>
 8000e8a:	4650      	mov	r0, sl
 8000e8c:	e766      	b.n	8000d5c <__udivmoddi4+0x1a0>
 8000e8e:	4608      	mov	r0, r1
 8000e90:	e6fd      	b.n	8000c8e <__udivmoddi4+0xd2>
 8000e92:	443b      	add	r3, r7
 8000e94:	3a02      	subs	r2, #2
 8000e96:	e733      	b.n	8000d00 <__udivmoddi4+0x144>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	443b      	add	r3, r7
 8000e9e:	e71c      	b.n	8000cda <__udivmoddi4+0x11e>
 8000ea0:	4649      	mov	r1, r9
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x222>
 8000ea4:	eba1 0109 	sub.w	r1, r1, r9
 8000ea8:	46c4      	mov	ip, r8
 8000eaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eae:	fb09 f804 	mul.w	r8, r9, r4
 8000eb2:	e7c4      	b.n	8000e3e <__udivmoddi4+0x282>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <FRAM_WriteBytes>:

/**
  * @brief Ghi một mảng byte vào FRAM từ một địa chỉ.
  */
HAL_StatusTypeDef FRAM_WriteBytes(I2C_HandleTypeDef *hi2c, uint16_t memAddress, uint8_t *pData, uint16_t size)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af04      	add	r7, sp, #16
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	817b      	strh	r3, [r7, #10]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	813b      	strh	r3, [r7, #8]
  if ((memAddress + size - 1) > FRAM_MAX_MEMORY_ADDRESS) {
 8000ecc:	897a      	ldrh	r2, [r7, #10]
 8000ece:	893b      	ldrh	r3, [r7, #8]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ed6:	dd01      	ble.n	8000edc <FRAM_WriteBytes+0x24>
      return HAL_ERROR; // Ghi vượt quá giới hạn bộ nhớ
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e00c      	b.n	8000ef6 <FRAM_WriteBytes+0x3e>
  }
  return HAL_I2C_Mem_Write(hi2c, FRAM_I2C_DEVICE_ADDRESS, memAddress, I2C_MEMADD_SIZE_16BIT, pData, size, FRAM_DEFAULT_TIMEOUT);
 8000edc:	897a      	ldrh	r2, [r7, #10]
 8000ede:	2364      	movs	r3, #100	@ 0x64
 8000ee0:	9302      	str	r3, [sp, #8]
 8000ee2:	893b      	ldrh	r3, [r7, #8]
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2310      	movs	r3, #16
 8000eec:	21a0      	movs	r1, #160	@ 0xa0
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f004 fa92 	bl	8005418 <HAL_I2C_Mem_Write>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <FRAM_ReadBytes>:

/**
  * @brief Đọc một mảng byte từ FRAM bắt đầu từ một địa chỉ.
  */
HAL_StatusTypeDef FRAM_ReadBytes(I2C_HandleTypeDef *hi2c, uint16_t memAddress, uint8_t *pData, uint16_t size)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b088      	sub	sp, #32
 8000f02:	af04      	add	r7, sp, #16
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	817b      	strh	r3, [r7, #10]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	813b      	strh	r3, [r7, #8]
  if ((memAddress + size - 1) > FRAM_MAX_MEMORY_ADDRESS) {
 8000f12:	897a      	ldrh	r2, [r7, #10]
 8000f14:	893b      	ldrh	r3, [r7, #8]
 8000f16:	4413      	add	r3, r2
 8000f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f1c:	dd01      	ble.n	8000f22 <FRAM_ReadBytes+0x24>
      return HAL_ERROR; // Đọc vượt quá giới hạn bộ nhớ
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00c      	b.n	8000f3c <FRAM_ReadBytes+0x3e>
  }
  return HAL_I2C_Mem_Read(hi2c, FRAM_I2C_DEVICE_ADDRESS, memAddress, I2C_MEMADD_SIZE_16BIT, pData, size, FRAM_DEFAULT_TIMEOUT);
 8000f22:	897a      	ldrh	r2, [r7, #10]
 8000f24:	2364      	movs	r3, #100	@ 0x64
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	893b      	ldrh	r3, [r7, #8]
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2310      	movs	r3, #16
 8000f32:	21a0      	movs	r1, #160	@ 0xa0
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f004 fb69 	bl	800560c <HAL_I2C_Mem_Read>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0c0      	sub	sp, #256	@ 0x100
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  // Task Box Definitions
  uint16_t start_y_tasks_row1 = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 8000f4a:	233c      	movs	r3, #60	@ 0x3c
 8000f4c:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
  uint16_t start_y_tasks_row2 = start_y_tasks_row1 + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8000f50:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8000f54:	3350      	adds	r3, #80	@ 0x50
 8000f56:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
  // task_boxes[0] = (TaskBox_t){MARGIN, start_y_tasks_row1, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-1"};
  // task_boxes[1] = (TaskBox_t){(uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES), start_y_tasks_row1, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-2"};
  // task_boxes[2] = (TaskBox_t){MARGIN, start_y_tasks_row2, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-3"};
  // task_boxes[3] = (TaskBox_t){(uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES), start_y_tasks_row2, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-4"};

  task_boxes[0] = (TaskBox_t){25, 80, 90, 60, "Task 02-1"};
 8000f5a:	4bb4      	ldr	r3, [pc, #720]	@ (800122c <main+0x2e8>)
 8000f5c:	4ab4      	ldr	r2, [pc, #720]	@ (8001230 <main+0x2ec>)
 8000f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  task_boxes[1] = (TaskBox_t){125, 80, 90, 60, "Task 02-2"};
 8000f64:	4bb1      	ldr	r3, [pc, #708]	@ (800122c <main+0x2e8>)
 8000f66:	4ab3      	ldr	r2, [pc, #716]	@ (8001234 <main+0x2f0>)
 8000f68:	330c      	adds	r3, #12
 8000f6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  task_boxes[2] = (TaskBox_t){25, 150, 90, 60, "Task 02-3"};
 8000f70:	4bae      	ldr	r3, [pc, #696]	@ (800122c <main+0x2e8>)
 8000f72:	4ab1      	ldr	r2, [pc, #708]	@ (8001238 <main+0x2f4>)
 8000f74:	3318      	adds	r3, #24
 8000f76:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  task_boxes[3] = (TaskBox_t){125, 150, 90, 60, "Task 02-4"};
 8000f7c:	4bab      	ldr	r3, [pc, #684]	@ (800122c <main+0x2e8>)
 8000f7e:	4aaf      	ldr	r2, [pc, #700]	@ (800123c <main+0x2f8>)
 8000f80:	3324      	adds	r3, #36	@ 0x24
 8000f82:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f84:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  num_tasks = 4; // Set global count
 8000f88:	4bad      	ldr	r3, [pc, #692]	@ (8001240 <main+0x2fc>)
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	601a      	str	r2, [r3, #0]
  //     BACK_BUTTON_W,                                                             // w: span most of the width
  //     BACK_BUTTON_H,                                                             // h: defined height
  //     "Back"                                                                     // name (used for internal logic if needed, not displayed by default)
  // };

  back_button_box = (TaskBox_t){
 8000f8e:	4bad      	ldr	r3, [pc, #692]	@ (8001244 <main+0x300>)
 8000f90:	4aad      	ldr	r2, [pc, #692]	@ (8001248 <main+0x304>)
 8000f92:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f98:	f002 fa74 	bl	8003484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9c:	f000 f9ee 	bl	800137c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa0:	f000 fb9e 	bl	80016e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000fa4:	f000 fb66 	bl	8001674 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000fa8:	f000 fb16 	bl	80015d8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8000fac:	f000 fb42 	bl	8001634 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000fb0:	f009 fe6c 	bl	800ac8c <MX_FATFS_Init>
  MX_ADC1_Init();
 8000fb4:	f000 fa4a 	bl	800144c <MX_ADC1_Init>
  MX_CAN1_Init();
 8000fb8:	f000 fa9a 	bl	80014f0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000fbc:	f000 face 	bl	800155c <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  // Bật backlight trước khi khởi tạo LCD
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2140      	movs	r1, #64	@ 0x40
 8000fc4:	48a1      	ldr	r0, [pc, #644]	@ (800124c <main+0x308>)
 8000fc6:	f004 f881 	bl	80050cc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000fca:	2064      	movs	r0, #100	@ 0x64
 8000fcc:	f002 facc 	bl	8003568 <HAL_Delay>
  //   Error_Handler();
  // }

  // Cấu hình filter cho CAN2
  CAN_FilterTypeDef sFilterConfig2;
  sFilterConfig2.FilterBank = 14; // CAN2 sử dụng từ bank 14-27
 8000fd0:	230e      	movs	r3, #14
 8000fd2:	657b      	str	r3, [r7, #84]	@ 0x54
  sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sFilterConfig2.FilterIdHigh = 0x0000;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	643b      	str	r3, [r7, #64]	@ 0x40
  sFilterConfig2.FilterIdLow = 0x0000;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sFilterConfig2.FilterMaskIdLow = 0x0000;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	653b      	str	r3, [r7, #80]	@ 0x50
  sFilterConfig2.FilterActivation = ENABLE;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	663b      	str	r3, [r7, #96]	@ 0x60
  // Không cần đặt SlaveStartFilterBank ở đây

  if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 8000ff4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4895      	ldr	r0, [pc, #596]	@ (8001250 <main+0x30c>)
 8000ffc:	f002 ffd4 	bl	8003fa8 <HAL_CAN_ConfigFilter>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <main+0xc6>
  {
    Error_Handler();
 8001006:	f000 fd55 	bl	8001ab4 <Error_Handler>
  }

  // Khởi động CAN1 và CAN2
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800100a:	4892      	ldr	r0, [pc, #584]	@ (8001254 <main+0x310>)
 800100c:	f003 f8aa 	bl	8004164 <HAL_CAN_Start>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <main+0xd6>
  {
    Error_Handler();
 8001016:	f000 fd4d 	bl	8001ab4 <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan2) != HAL_OK)
 800101a:	488d      	ldr	r0, [pc, #564]	@ (8001250 <main+0x30c>)
 800101c:	f003 f8a2 	bl	8004164 <HAL_CAN_Start>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <main+0xe6>
  {
    Error_Handler();
 8001026:	f000 fd45 	bl	8001ab4 <Error_Handler>
  }

  // Kích hoạt thông báo ngắt cho CAN2 RX FIFO0
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800102a:	2102      	movs	r1, #2
 800102c:	4888      	ldr	r0, [pc, #544]	@ (8001250 <main+0x30c>)
 800102e:	f003 facf 	bl	80045d0 <HAL_CAN_ActivateNotification>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <main+0xf8>
  {
    Error_Handler();
 8001038:	f000 fd3c 	bl	8001ab4 <Error_Handler>
  }

  // Cấu hình thông điệp gửi từ CAN1
  TxHeader1.StdId = 0x124;
 800103c:	4b86      	ldr	r3, [pc, #536]	@ (8001258 <main+0x314>)
 800103e:	f44f 7292 	mov.w	r2, #292	@ 0x124
 8001042:	601a      	str	r2, [r3, #0]
  TxHeader1.ExtId = 0x00;
 8001044:	4b84      	ldr	r3, [pc, #528]	@ (8001258 <main+0x314>)
 8001046:	2200      	movs	r2, #0
 8001048:	605a      	str	r2, [r3, #4]
  TxHeader1.RTR = CAN_RTR_DATA;
 800104a:	4b83      	ldr	r3, [pc, #524]	@ (8001258 <main+0x314>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  TxHeader1.IDE = CAN_ID_STD;
 8001050:	4b81      	ldr	r3, [pc, #516]	@ (8001258 <main+0x314>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  TxHeader1.DLC = 2;
 8001056:	4b80      	ldr	r3, [pc, #512]	@ (8001258 <main+0x314>)
 8001058:	2202      	movs	r2, #2
 800105a:	611a      	str	r2, [r3, #16]
  TxHeader1.TransmitGlobalTime = DISABLE;
 800105c:	4b7e      	ldr	r3, [pc, #504]	@ (8001258 <main+0x314>)
 800105e:	2200      	movs	r2, #0
 8001060:	751a      	strb	r2, [r3, #20]

  // Khởi tạo LCD và Touch
  // disable touch interrupt
  HAL_NVIC_DisableIRQ(EXTI4_IRQn); // Tắt ngắt trước khi khởi tạo
 8001062:	200a      	movs	r0, #10
 8001064:	f003 fe33 	bl	8004cce <HAL_NVIC_DisableIRQ>

  Manual_LCD_Init();
 8001068:	f000 fdf6 	bl	8001c58 <Manual_LCD_Init>
  Manual_Touch_Init(&hspi1);
 800106c:	487b      	ldr	r0, [pc, #492]	@ (800125c <main+0x318>)
 800106e:	f001 fcb1 	bl	80029d4 <Manual_Touch_Init>
  Manual_LCD_DrawLayout(); // This function should draw the tasks and the back button
 8001072:	f001 fa1b 	bl	80024ac <Manual_LCD_DrawLayout>

  if (SD_Init())
 8001076:	f001 fdaf 	bl	8002bd8 <SD_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d006      	beq.n	800108e <main+0x14a>
  {
    sprintf(info_text_buffer, "SD OK");
 8001080:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001084:	4976      	ldr	r1, [pc, #472]	@ (8001260 <main+0x31c>)
 8001086:	4618      	mov	r0, r3
 8001088:	f00c f94e 	bl	800d328 <siprintf>
 800108c:	e005      	b.n	800109a <main+0x156>
    //      sprintf(info_text_buffer, "SD OK, File error");
    //    }
  }
  else
  {
    sprintf(info_text_buffer, "SD Init Failed");
 800108e:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001092:	4974      	ldr	r1, [pc, #464]	@ (8001264 <main+0x320>)
 8001094:	4618      	mov	r0, r3
 8001096:	f00c f947 	bl	800d328 <siprintf>
  }

  Manual_LCD_UpdateInfoText(info_text_buffer);
 800109a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 fb98 	bl	80027d4 <Manual_LCD_UpdateInfoText>

  __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
 80010a4:	4b70      	ldr	r3, [pc, #448]	@ (8001268 <main+0x324>)
 80010a6:	2210      	movs	r2, #16
 80010a8:	615a      	str	r2, [r3, #20]

  HAL_NVIC_EnableIRQ(EXTI4_IRQn); // Enable touch interrupt
 80010aa:	200a      	movs	r0, #10
 80010ac:	f003 fe01 	bl	8004cb2 <HAL_NVIC_EnableIRQ>

  int can2_received_temperature_int;

  while (1)
  {
    if (current_task == 0)
 80010b0:	4b6e      	ldr	r3, [pc, #440]	@ (800126c <main+0x328>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d106      	bne.n	80010c6 <main+0x182>
    {
      Task2_LedBlink(GPIOB, GPIO_PIN_1, BLINK_SPEED_500_MS);
 80010b8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010bc:	2102      	movs	r1, #2
 80010be:	4863      	ldr	r0, [pc, #396]	@ (800124c <main+0x308>)
 80010c0:	f002 f928 	bl	8003314 <Task2_LedBlink>
 80010c4:	e7f4      	b.n	80010b0 <main+0x16c>
    }
    else if (current_task == 1)
 80010c6:	4b69      	ldr	r3, [pc, #420]	@ (800126c <main+0x328>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d152      	bne.n	8001174 <main+0x230>
    {
      char temp_display_str[50];
      uint8_t current_temp_c = (uint8_t)Read_Internal_Temperature();
 80010ce:	f002 f935 	bl	800333c <Read_Internal_Temperature>
 80010d2:	eef0 7a40 	vmov.f32	s15, s0
 80010d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010da:	edc7 7a01 	vstr	s15, [r7, #4]
 80010de:	793b      	ldrb	r3, [r7, #4]
 80010e0:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
      uint8_t temp_to_send = current_temp_c;
 80010e4:	f897 30fa 	ldrb.w	r3, [r7, #250]	@ 0xfa
 80010e8:	f887 30f9 	strb.w	r3, [r7, #249]	@ 0xf9
      TxData1[0] = GROUP_NUMBER;
 80010ec:	4b60      	ldr	r3, [pc, #384]	@ (8001270 <main+0x32c>)
 80010ee:	2209      	movs	r2, #9
 80010f0:	701a      	strb	r2, [r3, #0]
      TxData1[1] = temp_to_send;
 80010f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001270 <main+0x32c>)
 80010f4:	f897 30f9 	ldrb.w	r3, [r7, #249]	@ 0xf9
 80010f8:	7053      	strb	r3, [r2, #1]
      HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox1);
 80010fa:	4b5e      	ldr	r3, [pc, #376]	@ (8001274 <main+0x330>)
 80010fc:	4a5c      	ldr	r2, [pc, #368]	@ (8001270 <main+0x32c>)
 80010fe:	4956      	ldr	r1, [pc, #344]	@ (8001258 <main+0x314>)
 8001100:	4854      	ldr	r0, [pc, #336]	@ (8001254 <main+0x310>)
 8001102:	f003 f873 	bl	80041ec <HAL_CAN_AddTxMessage>
      while (!can2_received_data_flag)
 8001106:	e002      	b.n	800110e <main+0x1ca>
      {
        HAL_Delay(10);
 8001108:	200a      	movs	r0, #10
 800110a:	f002 fa2d 	bl	8003568 <HAL_Delay>
      while (!can2_received_data_flag)
 800110e:	4b5a      	ldr	r3, [pc, #360]	@ (8001278 <main+0x334>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b2db      	uxtb	r3, r3
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f7      	beq.n	8001108 <main+0x1c4>
      }
      can2_received_data_flag = 0; // Reset the flag for the next message
 8001118:	4b57      	ldr	r3, [pc, #348]	@ (8001278 <main+0x334>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
      can2_received_temperature_int = (int)can2_received_temperature;
 800111e:	4b57      	ldr	r3, [pc, #348]	@ (800127c <main+0x338>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	b2db      	uxtb	r3, r3
 8001124:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

      sprintf(temp_display_str, "Group: %d, temp: %d *C", can2_received_group, can2_received_temperature_int);
 8001128:	4b55      	ldr	r3, [pc, #340]	@ (8001280 <main+0x33c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	f107 000c 	add.w	r0, r7, #12
 8001134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001138:	4952      	ldr	r1, [pc, #328]	@ (8001284 <main+0x340>)
 800113a:	f00c f8f5 	bl	800d328 <siprintf>
      // sprintf(temp_display_str, "Group: %d, temp: %d *C", GROUP_NUMBER, temp_to_send);
      strcpy(info_text_buffer, temp_display_str);
 800113e:	f107 020c 	add.w	r2, r7, #12
 8001142:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f00c f943 	bl	800d3d4 <strcpy>
      HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 800114e:	200a      	movs	r0, #10
 8001150:	f003 fdbd 	bl	8004cce <HAL_NVIC_DisableIRQ>

      Manual_LCD_UpdateInfoText(info_text_buffer);
 8001154:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001158:	4618      	mov	r0, r3
 800115a:	f001 fb3b 	bl	80027d4 <Manual_LCD_UpdateInfoText>
      __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
 800115e:	4b42      	ldr	r3, [pc, #264]	@ (8001268 <main+0x324>)
 8001160:	2210      	movs	r2, #16
 8001162:	615a      	str	r2, [r3, #20]
      HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001164:	200a      	movs	r0, #10
 8001166:	f003 fda4 	bl	8004cb2 <HAL_NVIC_EnableIRQ>
      HAL_Delay(500); // Delay to avoid flooding the CAN bus
 800116a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800116e:	f002 f9fb 	bl	8003568 <HAL_Delay>
 8001172:	e79d      	b.n	80010b0 <main+0x16c>
    }
    else if (current_task == 2)
 8001174:	4b3d      	ldr	r3, [pc, #244]	@ (800126c <main+0x328>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b02      	cmp	r3, #2
 800117a:	f040 80aa 	bne.w	80012d2 <main+0x38e>
    {
      HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 800117e:	200a      	movs	r0, #10
 8001180:	f003 fda5 	bl	8004cce <HAL_NVIC_DisableIRQ>

      byte_read = SD_ReadTeamFile(read_data, sizeof(read_data));
 8001184:	2132      	movs	r1, #50	@ 0x32
 8001186:	4840      	ldr	r0, [pc, #256]	@ (8001288 <main+0x344>)
 8001188:	f001 fdd6 	bl	8002d38 <SD_ReadTeamFile>
 800118c:	4603      	mov	r3, r0
 800118e:	b2da      	uxtb	r2, r3
 8001190:	4b3e      	ldr	r3, [pc, #248]	@ (800128c <main+0x348>)
 8001192:	701a      	strb	r2, [r3, #0]

      if (byte_read > 0)
 8001194:	4b3d      	ldr	r3, [pc, #244]	@ (800128c <main+0x348>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00c      	beq.n	80011b6 <main+0x272>
      {
        // Đọc thành công, hiển thị nội dung
        sprintf(info_text_buffer, "SD content: %s", read_data);
 800119c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011a0:	4a39      	ldr	r2, [pc, #228]	@ (8001288 <main+0x344>)
 80011a2:	493b      	ldr	r1, [pc, #236]	@ (8001290 <main+0x34c>)
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00c f8bf 	bl	800d328 <siprintf>
        Manual_LCD_UpdateInfoText(info_text_buffer);
 80011aa:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011ae:	4618      	mov	r0, r3
 80011b0:	f001 fb10 	bl	80027d4 <Manual_LCD_UpdateInfoText>
 80011b4:	e082      	b.n	80012bc <main+0x378>
      }
      else
      {
        // Đọc thất bại
        sprintf(info_text_buffer, "Read error (%d)", byte_read);
 80011b6:	4b35      	ldr	r3, [pc, #212]	@ (800128c <main+0x348>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	461a      	mov	r2, r3
 80011bc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011c0:	4934      	ldr	r1, [pc, #208]	@ (8001294 <main+0x350>)
 80011c2:	4618      	mov	r0, r3
 80011c4:	f00c f8b0 	bl	800d328 <siprintf>
        Manual_LCD_UpdateInfoText(info_text_buffer);
 80011c8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011cc:	4618      	mov	r0, r3
 80011ce:	f001 fb01 	bl	80027d4 <Manual_LCD_UpdateInfoText>

        // Thử khởi tạo lại SD trong trường hợp bị ngắt kết nối
        if (SD_Init())
 80011d2:	f001 fd01 	bl	8002bd8 <SD_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d06f      	beq.n	80012bc <main+0x378>
        {
          sprintf(info_text_buffer, "SD reinitialized");
 80011dc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011e0:	492d      	ldr	r1, [pc, #180]	@ (8001298 <main+0x354>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f00c f8a0 	bl	800d328 <siprintf>
          Manual_LCD_UpdateInfoText(info_text_buffer);
 80011e8:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 faf1 	bl	80027d4 <Manual_LCD_UpdateInfoText>
          HAL_Delay(1000);
 80011f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011f6:	f002 f9b7 	bl	8003568 <HAL_Delay>

          // Thử đọc lại
          byte_read = SD_ReadTeamFile(read_data, sizeof(read_data));
 80011fa:	2132      	movs	r1, #50	@ 0x32
 80011fc:	4822      	ldr	r0, [pc, #136]	@ (8001288 <main+0x344>)
 80011fe:	f001 fd9b 	bl	8002d38 <SD_ReadTeamFile>
 8001202:	4603      	mov	r3, r0
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4b21      	ldr	r3, [pc, #132]	@ (800128c <main+0x348>)
 8001208:	701a      	strb	r2, [r3, #0]
          if (byte_read > 0)
 800120a:	4b20      	ldr	r3, [pc, #128]	@ (800128c <main+0x348>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d046      	beq.n	80012a0 <main+0x35c>
          {
            sprintf(info_text_buffer, "Content: %s", read_data);
 8001212:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001216:	4a1c      	ldr	r2, [pc, #112]	@ (8001288 <main+0x344>)
 8001218:	4920      	ldr	r1, [pc, #128]	@ (800129c <main+0x358>)
 800121a:	4618      	mov	r0, r3
 800121c:	f00c f884 	bl	800d328 <siprintf>
            Manual_LCD_UpdateInfoText(info_text_buffer);
 8001220:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001224:	4618      	mov	r0, r3
 8001226:	f001 fad5 	bl	80027d4 <Manual_LCD_UpdateInfoText>
 800122a:	e047      	b.n	80012bc <main+0x378>
 800122c:	2000047c 	.word	0x2000047c
 8001230:	0800dd44 	.word	0x0800dd44
 8001234:	0800dd5c 	.word	0x0800dd5c
 8001238:	0800dd74 	.word	0x0800dd74
 800123c:	0800dd8c 	.word	0x0800dd8c
 8001240:	20000518 	.word	0x20000518
 8001244:	2000070c 	.word	0x2000070c
 8001248:	0800dda0 	.word	0x0800dda0
 800124c:	40020400 	.word	0x40020400
 8001250:	200005a4 	.word	0x200005a4
 8001254:	200006e4 	.word	0x200006e4
 8001258:	20000500 	.word	0x20000500
 800125c:	20000688 	.word	0x20000688
 8001260:	0800dc90 	.word	0x0800dc90
 8001264:	0800dc98 	.word	0x0800dc98
 8001268:	40013c00 	.word	0x40013c00
 800126c:	20000000 	.word	0x20000000
 8001270:	2000051c 	.word	0x2000051c
 8001274:	200006e0 	.word	0x200006e0
 8001278:	2000007c 	.word	0x2000007c
 800127c:	20000685 	.word	0x20000685
 8001280:	200005fe 	.word	0x200005fe
 8001284:	0800dca8 	.word	0x0800dca8
 8001288:	200005cc 	.word	0x200005cc
 800128c:	20000684 	.word	0x20000684
 8001290:	0800dcc0 	.word	0x0800dcc0
 8001294:	0800dcd0 	.word	0x0800dcd0
 8001298:	0800dce0 	.word	0x0800dce0
 800129c:	0800dcf4 	.word	0x0800dcf4
          }
          else
          {
            sprintf(info_text_buffer, "Still error (%d)", byte_read);
 80012a0:	4b2e      	ldr	r3, [pc, #184]	@ (800135c <main+0x418>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80012aa:	492d      	ldr	r1, [pc, #180]	@ (8001360 <main+0x41c>)
 80012ac:	4618      	mov	r0, r3
 80012ae:	f00c f83b 	bl	800d328 <siprintf>
            Manual_LCD_UpdateInfoText(info_text_buffer);
 80012b2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80012b6:	4618      	mov	r0, r3
 80012b8:	f001 fa8c 	bl	80027d4 <Manual_LCD_UpdateInfoText>
          }
        }
      }
      __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
 80012bc:	4b29      	ldr	r3, [pc, #164]	@ (8001364 <main+0x420>)
 80012be:	2210      	movs	r2, #16
 80012c0:	615a      	str	r2, [r3, #20]
      HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80012c2:	200a      	movs	r0, #10
 80012c4:	f003 fcf5 	bl	8004cb2 <HAL_NVIC_EnableIRQ>
      HAL_Delay(500); // Delay to avoid flooding the LCD
 80012c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012cc:	f002 f94c 	bl	8003568 <HAL_Delay>
 80012d0:	e6ee      	b.n	80010b0 <main+0x16c>
    }
    else if (current_task == 3)
 80012d2:	4b25      	ldr	r3, [pc, #148]	@ (8001368 <main+0x424>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	f47f aeea 	bne.w	80010b0 <main+0x16c>
    {
      HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80012dc:	200a      	movs	r0, #10
 80012de:	f003 fcf6 	bl	8004cce <HAL_NVIC_DisableIRQ>

      // Task 02-4: Read temperature from FRAM
      uint8_t read_value = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      // Đọc nhiệt độ từ FRAM
      GPIO_PinState prev_btn_state = current_button_state;
 80012e8:	4b20      	ldr	r3, [pc, #128]	@ (800136c <main+0x428>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb

      CheckUserButtonAndSaveTemp(&current_button_state);
 80012f0:	481e      	ldr	r0, [pc, #120]	@ (800136c <main+0x428>)
 80012f2:	f002 f86b 	bl	80033cc <CheckUserButtonAndSaveTemp>
      //        {
      //          sprintf(info_text_buffer, "FRAM Read ERROR");
      //        }
      //        Manual_LCD_UpdateInfoText(info_text_buffer);
      // Kiểm tra trạng thái nút và ghi nhiệt độ vào FRAM
      if (current_button_state == GPIO_PIN_SET && prev_btn_state == GPIO_PIN_RESET)
 80012f6:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <main+0x428>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d123      	bne.n	8001346 <main+0x402>
 80012fe:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8001302:	2b00      	cmp	r3, #0
 8001304:	d11f      	bne.n	8001346 <main+0x402>
      {
        // Nút vừa được nhấn xuống
        if (FRAM_ReadBytes(&hi2c2, USER_TEMP_ADDR, &read_value, 1) == HAL_OK)
 8001306:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 800130a:	2301      	movs	r3, #1
 800130c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001310:	4817      	ldr	r0, [pc, #92]	@ (8001370 <main+0x42c>)
 8001312:	f7ff fdf4 	bl	8000efe <FRAM_ReadBytes>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d109      	bne.n	8001330 <main+0x3ec>
        {
          sprintf(info_text_buffer, "FRAM Read OK: %d", read_value);
 800131c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001320:	461a      	mov	r2, r3
 8001322:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001326:	4913      	ldr	r1, [pc, #76]	@ (8001374 <main+0x430>)
 8001328:	4618      	mov	r0, r3
 800132a:	f00b fffd 	bl	800d328 <siprintf>
 800132e:	e005      	b.n	800133c <main+0x3f8>
        }
        else
        {
          sprintf(info_text_buffer, "FRAM Read ERROR");
 8001330:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001334:	4910      	ldr	r1, [pc, #64]	@ (8001378 <main+0x434>)
 8001336:	4618      	mov	r0, r3
 8001338:	f00b fff6 	bl	800d328 <siprintf>
        }
        Manual_LCD_UpdateInfoText(info_text_buffer);
 800133c:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001340:	4618      	mov	r0, r3
 8001342:	f001 fa47 	bl	80027d4 <Manual_LCD_UpdateInfoText>
      }
      __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
 8001346:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <main+0x420>)
 8001348:	2210      	movs	r2, #16
 800134a:	615a      	str	r2, [r3, #20]
      HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800134c:	200a      	movs	r0, #10
 800134e:	f003 fcb0 	bl	8004cb2 <HAL_NVIC_EnableIRQ>
      HAL_Delay(10); // Delay to avoid flooding the LCD
 8001352:	200a      	movs	r0, #10
 8001354:	f002 f908 	bl	8003568 <HAL_Delay>
    if (current_task == 0)
 8001358:	e6aa      	b.n	80010b0 <main+0x16c>
 800135a:	bf00      	nop
 800135c:	20000684 	.word	0x20000684
 8001360:	0800dd00 	.word	0x0800dd00
 8001364:	40013c00 	.word	0x40013c00
 8001368:	20000000 	.word	0x20000000
 800136c:	2000007d 	.word	0x2000007d
 8001370:	200004ac 	.word	0x200004ac
 8001374:	0800dd14 	.word	0x0800dd14
 8001378:	0800dd28 	.word	0x0800dd28

0800137c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b094      	sub	sp, #80	@ 0x50
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0320 	add.w	r3, r7, #32
 8001386:	2230      	movs	r2, #48	@ 0x30
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f00b ffee 	bl	800d36c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <SystemClock_Config+0xc8>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	4a26      	ldr	r2, [pc, #152]	@ (8001444 <SystemClock_Config+0xc8>)
 80013aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b0:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <SystemClock_Config+0xc8>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	4b21      	ldr	r3, [pc, #132]	@ (8001448 <SystemClock_Config+0xcc>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a20      	ldr	r2, [pc, #128]	@ (8001448 <SystemClock_Config+0xcc>)
 80013c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001448 <SystemClock_Config+0xcc>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d8:	2301      	movs	r3, #1
 80013da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e2:	2302      	movs	r3, #2
 80013e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80013ec:	2319      	movs	r3, #25
 80013ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80013f0:	2390      	movs	r3, #144	@ 0x90
 80013f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013f4:	2302      	movs	r3, #2
 80013f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013f8:	2304      	movs	r3, #4
 80013fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fc:	f107 0320 	add.w	r3, r7, #32
 8001400:	4618      	mov	r0, r3
 8001402:	f006 fac7 	bl	8007994 <HAL_RCC_OscConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800140c:	f000 fb52 	bl	8001ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001410:	230f      	movs	r3, #15
 8001412:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001414:	2302      	movs	r3, #2
 8001416:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001420:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001426:	f107 030c 	add.w	r3, r7, #12
 800142a:	2102      	movs	r1, #2
 800142c:	4618      	mov	r0, r3
 800142e:	f006 fd29 	bl	8007e84 <HAL_RCC_ClockConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001438:	f000 fb3c 	bl	8001ab4 <Error_Handler>
  }
}
 800143c:	bf00      	nop
 800143e:	3750      	adds	r7, #80	@ 0x50
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	40007000 	.word	0x40007000

0800144c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001452:	463b      	mov	r3, r7
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 800145e:	4b21      	ldr	r3, [pc, #132]	@ (80014e4 <MX_ADC1_Init+0x98>)
 8001460:	4a21      	ldr	r2, [pc, #132]	@ (80014e8 <MX_ADC1_Init+0x9c>)
 8001462:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001464:	4b1f      	ldr	r3, [pc, #124]	@ (80014e4 <MX_ADC1_Init+0x98>)
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800146a:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <MX_ADC1_Init+0x98>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001470:	4b1c      	ldr	r3, [pc, #112]	@ (80014e4 <MX_ADC1_Init+0x98>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001476:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <MX_ADC1_Init+0x98>)
 8001478:	2200      	movs	r2, #0
 800147a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800147c:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <MX_ADC1_Init+0x98>)
 800147e:	2200      	movs	r2, #0
 8001480:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001484:	4b17      	ldr	r3, [pc, #92]	@ (80014e4 <MX_ADC1_Init+0x98>)
 8001486:	2200      	movs	r2, #0
 8001488:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148a:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <MX_ADC1_Init+0x98>)
 800148c:	4a17      	ldr	r2, [pc, #92]	@ (80014ec <MX_ADC1_Init+0xa0>)
 800148e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <MX_ADC1_Init+0x98>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001496:	4b13      	ldr	r3, [pc, #76]	@ (80014e4 <MX_ADC1_Init+0x98>)
 8001498:	2201      	movs	r2, #1
 800149a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800149c:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <MX_ADC1_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	@ (80014e4 <MX_ADC1_Init+0x98>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014aa:	480e      	ldr	r0, [pc, #56]	@ (80014e4 <MX_ADC1_Init+0x98>)
 80014ac:	f002 f880 	bl	80035b0 <HAL_ADC_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014b6:	f000 fafd 	bl	8001ab4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014ba:	2310      	movs	r3, #16
 80014bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014be:	2301      	movs	r3, #1
 80014c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014c6:	463b      	mov	r3, r7
 80014c8:	4619      	mov	r1, r3
 80014ca:	4806      	ldr	r0, [pc, #24]	@ (80014e4 <MX_ADC1_Init+0x98>)
 80014cc:	f002 fa52 	bl	8003974 <HAL_ADC_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014d6:	f000 faed 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000055c 	.word	0x2000055c
 80014e8:	40012000 	.word	0x40012000
 80014ec:	0f000001 	.word	0x0f000001

080014f0 <MX_CAN1_Init>:
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80014f4:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <MX_CAN1_Init+0x64>)
 80014f6:	4a18      	ldr	r2, [pc, #96]	@ (8001558 <MX_CAN1_Init+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 72;
 80014fa:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <MX_CAN1_Init+0x64>)
 80014fc:	2248      	movs	r2, #72	@ 0x48
 80014fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001500:	4b14      	ldr	r3, [pc, #80]	@ (8001554 <MX_CAN1_Init+0x64>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001506:	4b13      	ldr	r3, [pc, #76]	@ (8001554 <MX_CAN1_Init+0x64>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800150c:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <MX_CAN1_Init+0x64>)
 800150e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001512:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001514:	4b0f      	ldr	r3, [pc, #60]	@ (8001554 <MX_CAN1_Init+0x64>)
 8001516:	2200      	movs	r2, #0
 8001518:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800151a:	4b0e      	ldr	r3, [pc, #56]	@ (8001554 <MX_CAN1_Init+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001520:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <MX_CAN1_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	@ (8001554 <MX_CAN1_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800152c:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <MX_CAN1_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001532:	4b08      	ldr	r3, [pc, #32]	@ (8001554 <MX_CAN1_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001538:	4b06      	ldr	r3, [pc, #24]	@ (8001554 <MX_CAN1_Init+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <MX_CAN1_Init+0x64>)
 8001540:	f002 fc36 	bl	8003db0 <HAL_CAN_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800154a:	f000 fab3 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200006e4 	.word	0x200006e4
 8001558:	40006400 	.word	0x40006400

0800155c <MX_CAN2_Init>:
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001560:	4b1b      	ldr	r3, [pc, #108]	@ (80015d0 <MX_CAN2_Init+0x74>)
 8001562:	4a1c      	ldr	r2, [pc, #112]	@ (80015d4 <MX_CAN2_Init+0x78>)
 8001564:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 72;
 8001566:	4b1a      	ldr	r3, [pc, #104]	@ (80015d0 <MX_CAN2_Init+0x74>)
 8001568:	2248      	movs	r2, #72	@ 0x48
 800156a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800156c:	4b18      	ldr	r3, [pc, #96]	@ (80015d0 <MX_CAN2_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001572:	4b17      	ldr	r3, [pc, #92]	@ (80015d0 <MX_CAN2_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001578:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <MX_CAN2_Init+0x74>)
 800157a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800157e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001580:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <MX_CAN2_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001586:	4b12      	ldr	r3, [pc, #72]	@ (80015d0 <MX_CAN2_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800158c:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <MX_CAN2_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001592:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <MX_CAN2_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001598:	4b0d      	ldr	r3, [pc, #52]	@ (80015d0 <MX_CAN2_Init+0x74>)
 800159a:	2200      	movs	r2, #0
 800159c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800159e:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_CAN2_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	@ (80015d0 <MX_CAN2_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80015aa:	4809      	ldr	r0, [pc, #36]	@ (80015d0 <MX_CAN2_Init+0x74>)
 80015ac:	f002 fc00 	bl	8003db0 <HAL_CAN_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80015b6:	f000 fa7d 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2040      	movs	r0, #64	@ 0x40
 80015c0:	f003 fb5b 	bl	8004c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80015c4:	2040      	movs	r0, #64	@ 0x40
 80015c6:	f003 fb74 	bl	8004cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END CAN2_Init 2 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200005a4 	.word	0x200005a4
 80015d4:	40006800 	.word	0x40006800

080015d8 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <MX_I2C2_Init+0x50>)
 80015de:	4a13      	ldr	r2, [pc, #76]	@ (800162c <MX_I2C2_Init+0x54>)
 80015e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015e2:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <MX_I2C2_Init+0x50>)
 80015e4:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <MX_I2C2_Init+0x58>)
 80015e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001628 <MX_I2C2_Init+0x50>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <MX_I2C2_Init+0x50>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001628 <MX_I2C2_Init+0x50>)
 80015f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <MX_I2C2_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001602:	4b09      	ldr	r3, [pc, #36]	@ (8001628 <MX_I2C2_Init+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001608:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <MX_I2C2_Init+0x50>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160e:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <MX_I2C2_Init+0x50>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001614:	4804      	ldr	r0, [pc, #16]	@ (8001628 <MX_I2C2_Init+0x50>)
 8001616:	f003 fda5 	bl	8005164 <HAL_I2C_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001620:	f000 fa48 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200004ac 	.word	0x200004ac
 800162c:	40005800 	.word	0x40005800
 8001630:	000186a0 	.word	0x000186a0

08001634 <MX_SDIO_SD_Init>:
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001638:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <MX_SDIO_SD_Init+0x38>)
 800163a:	4a0d      	ldr	r2, [pc, #52]	@ (8001670 <MX_SDIO_SD_Init+0x3c>)
 800163c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800163e:	4b0b      	ldr	r3, [pc, #44]	@ (800166c <MX_SDIO_SD_Init+0x38>)
 8001640:	2200      	movs	r2, #0
 8001642:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001644:	4b09      	ldr	r3, [pc, #36]	@ (800166c <MX_SDIO_SD_Init+0x38>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800164a:	4b08      	ldr	r3, [pc, #32]	@ (800166c <MX_SDIO_SD_Init+0x38>)
 800164c:	2200      	movs	r2, #0
 800164e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <MX_SDIO_SD_Init+0x38>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001656:	4b05      	ldr	r3, [pc, #20]	@ (800166c <MX_SDIO_SD_Init+0x38>)
 8001658:	2200      	movs	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <MX_SDIO_SD_Init+0x38>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */
}
 8001662:	bf00      	nop
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	20000600 	.word	0x20000600
 8001670:	40012c00 	.word	0x40012c00

08001674 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001678:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <MX_SPI1_Init+0x64>)
 800167a:	4a18      	ldr	r2, [pc, #96]	@ (80016dc <MX_SPI1_Init+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800167e:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <MX_SPI1_Init+0x64>)
 8001680:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001684:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001686:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <MX_SPI1_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <MX_SPI1_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <MX_SPI1_Init+0x64>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001698:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <MX_SPI1_Init+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <MX_SPI1_Init+0x64>)
 80016a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016a6:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_SPI1_Init+0x64>)
 80016a8:	2220      	movs	r2, #32
 80016aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <MX_SPI1_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_SPI1_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016b8:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <MX_SPI1_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MX_SPI1_Init+0x64>)
 80016c0:	220a      	movs	r2, #10
 80016c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016c4:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <MX_SPI1_Init+0x64>)
 80016c6:	f007 ffdd 	bl	8009684 <HAL_SPI_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016d0:	f000 f9f0 	bl	8001ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000688 	.word	0x20000688
 80016dc:	40013000 	.word	0x40013000

080016e0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	@ 0x28
 80016e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	4b50      	ldr	r3, [pc, #320]	@ (800183c <MX_GPIO_Init+0x15c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a4f      	ldr	r2, [pc, #316]	@ (800183c <MX_GPIO_Init+0x15c>)
 8001700:	f043 0304 	orr.w	r3, r3, #4
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b4d      	ldr	r3, [pc, #308]	@ (800183c <MX_GPIO_Init+0x15c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0304 	and.w	r3, r3, #4
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b49      	ldr	r3, [pc, #292]	@ (800183c <MX_GPIO_Init+0x15c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a48      	ldr	r2, [pc, #288]	@ (800183c <MX_GPIO_Init+0x15c>)
 800171c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b46      	ldr	r3, [pc, #280]	@ (800183c <MX_GPIO_Init+0x15c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	4b42      	ldr	r3, [pc, #264]	@ (800183c <MX_GPIO_Init+0x15c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a41      	ldr	r2, [pc, #260]	@ (800183c <MX_GPIO_Init+0x15c>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b3f      	ldr	r3, [pc, #252]	@ (800183c <MX_GPIO_Init+0x15c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	607b      	str	r3, [r7, #4]
 800174e:	4b3b      	ldr	r3, [pc, #236]	@ (800183c <MX_GPIO_Init+0x15c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a3a      	ldr	r2, [pc, #232]	@ (800183c <MX_GPIO_Init+0x15c>)
 8001754:	f043 0302 	orr.w	r3, r3, #2
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b38      	ldr	r3, [pc, #224]	@ (800183c <MX_GPIO_Init+0x15c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	4b34      	ldr	r3, [pc, #208]	@ (800183c <MX_GPIO_Init+0x15c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a33      	ldr	r2, [pc, #204]	@ (800183c <MX_GPIO_Init+0x15c>)
 8001770:	f043 0308 	orr.w	r3, r3, #8
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b31      	ldr	r3, [pc, #196]	@ (800183c <MX_GPIO_Init+0x15c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 8001782:	2200      	movs	r2, #0
 8001784:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
 8001788:	482d      	ldr	r0, [pc, #180]	@ (8001840 <MX_GPIO_Init+0x160>)
 800178a:	f003 fc9f 	bl	80050cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001794:	482b      	ldr	r0, [pc, #172]	@ (8001844 <MX_GPIO_Init+0x164>)
 8001796:	f003 fc99 	bl	80050cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800179a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800179e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4619      	mov	r1, r3
 80017ae:	4826      	ldr	r0, [pc, #152]	@ (8001848 <MX_GPIO_Init+0x168>)
 80017b0:	f003 fad8 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017b4:	2302      	movs	r3, #2
 80017b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017bc:	2301      	movs	r3, #1
 80017be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	4619      	mov	r1, r3
 80017c6:	481f      	ldr	r0, [pc, #124]	@ (8001844 <MX_GPIO_Init+0x164>)
 80017c8:	f003 facc 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 LCD_RST_Pin LCD_BL_Pin LCD_CS_Pin
                           LCD_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1 | LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin;
 80017cc:	f44f 73e3 	mov.w	r3, #454	@ 0x1c6
 80017d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2301      	movs	r3, #1
 80017d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	4619      	mov	r1, r3
 80017e4:	4816      	ldr	r0, [pc, #88]	@ (8001840 <MX_GPIO_Init+0x160>)
 80017e6:	f003 fabd 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 80017ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f0:	2301      	movs	r3, #1
 80017f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	4810      	ldr	r0, [pc, #64]	@ (8001844 <MX_GPIO_Init+0x164>)
 8001804:	f003 faae 	bl	8004d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001808:	2310      	movs	r3, #16
 800180a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800180c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001810:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001812:	2301      	movs	r3, #1
 8001814:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	4808      	ldr	r0, [pc, #32]	@ (8001840 <MX_GPIO_Init+0x160>)
 800181e:	f003 faa1 	bl	8004d64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2100      	movs	r1, #0
 8001826:	200a      	movs	r0, #10
 8001828:	f003 fa27 	bl	8004c7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800182c:	200a      	movs	r0, #10
 800182e:	f003 fa40 	bl	8004cb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001832:	bf00      	nop
 8001834:	3728      	adds	r7, #40	@ 0x28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	40020400 	.word	0x40020400
 8001844:	40020000 	.word	0x40020000
 8001848:	40020800 	.word	0x40020800

0800184c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800184c:	b590      	push	{r4, r7, lr}
 800184e:	b087      	sub	sp, #28
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TP_IRQ_Pin)
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	2b10      	cmp	r3, #16
 800185a:	f040 80e9 	bne.w	8001a30 <HAL_GPIO_EXTI_Callback+0x1e4>
  {
    if (HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == GPIO_PIN_RESET)
 800185e:	2110      	movs	r1, #16
 8001860:	4875      	ldr	r0, [pc, #468]	@ (8001a38 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001862:	f003 fc1b 	bl	800509c <HAL_GPIO_ReadPin>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	f040 80e1 	bne.w	8001a30 <HAL_GPIO_EXTI_Callback+0x1e4>
    {
      Coordinate rawPoint, displayPoint;
      int old_task = current_task; // Lưu task cũ
 800186e:	4b73      	ldr	r3, [pc, #460]	@ (8001a3c <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	613b      	str	r3, [r7, #16]
      if (Manual_Touch_GetRawPoint(&rawPoint))
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	4618      	mov	r0, r3
 800187a:	f001 f8c1 	bl	8002a00 <Manual_Touch_GetRawPoint>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80d5 	beq.w	8001a30 <HAL_GPIO_EXTI_Callback+0x1e4>
      {
        Manual_Touch_ApplyCalibration(&displayPoint, &rawPoint);
 8001886:	f107 020c 	add.w	r2, r7, #12
 800188a:	f107 0308 	add.w	r3, r7, #8
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f001 f8cd 	bl	8002a30 <Manual_Touch_ApplyCalibration>

        // Kiểm tra xem có chạm vào task box nào không
        for (int i = 0; i < num_tasks; i++)
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	e07f      	b.n	800199c <HAL_GPIO_EXTI_Callback+0x150>
        {
          if (displayPoint.x >= task_boxes[i].x &&
 800189c:	8939      	ldrh	r1, [r7, #8]
 800189e:	4868      	ldr	r0, [pc, #416]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4403      	add	r3, r0
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	4299      	cmp	r1, r3
 80018b0:	d371      	bcc.n	8001996 <HAL_GPIO_EXTI_Callback+0x14a>
              displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 80018b2:	893b      	ldrh	r3, [r7, #8]
 80018b4:	4618      	mov	r0, r3
 80018b6:	4962      	ldr	r1, [pc, #392]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	881b      	ldrh	r3, [r3, #0]
 80018c6:	461c      	mov	r4, r3
 80018c8:	495d      	ldr	r1, [pc, #372]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	3304      	adds	r3, #4
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	4423      	add	r3, r4
          if (displayPoint.x >= task_boxes[i].x &&
 80018dc:	4298      	cmp	r0, r3
 80018de:	da5a      	bge.n	8001996 <HAL_GPIO_EXTI_Callback+0x14a>
              displayPoint.y >= task_boxes[i].y &&
 80018e0:	8979      	ldrh	r1, [r7, #10]
 80018e2:	4857      	ldr	r0, [pc, #348]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	4613      	mov	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4403      	add	r3, r0
 80018f0:	3302      	adds	r3, #2
 80018f2:	881b      	ldrh	r3, [r3, #0]
              displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 80018f4:	4299      	cmp	r1, r3
 80018f6:	d34e      	bcc.n	8001996 <HAL_GPIO_EXTI_Callback+0x14a>
              displayPoint.y < (task_boxes[i].y + task_boxes[i].h))
 80018f8:	897b      	ldrh	r3, [r7, #10]
 80018fa:	4618      	mov	r0, r3
 80018fc:	4950      	ldr	r1, [pc, #320]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	3302      	adds	r3, #2
 800190c:	881b      	ldrh	r3, [r3, #0]
 800190e:	461c      	mov	r4, r3
 8001910:	494b      	ldr	r1, [pc, #300]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	3306      	adds	r3, #6
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	4423      	add	r3, r4
              displayPoint.y >= task_boxes[i].y &&
 8001924:	4298      	cmp	r0, r3
 8001926:	da36      	bge.n	8001996 <HAL_GPIO_EXTI_Callback+0x14a>
          {
            current_task = i; // Đặt current_task thành index của task box
 8001928:	4a44      	ldr	r2, [pc, #272]	@ (8001a3c <HAL_GPIO_EXTI_Callback+0x1f0>)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	6013      	str	r3, [r2, #0]
            // Khôi phục màu của task cũ nếu có
            if (old_task >= 0 && old_task < num_tasks && old_task != i)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db15      	blt.n	8001960 <HAL_GPIO_EXTI_Callback+0x114>
 8001934:	4b43      	ldr	r3, [pc, #268]	@ (8001a44 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	429a      	cmp	r2, r3
 800193c:	da10      	bge.n	8001960 <HAL_GPIO_EXTI_Callback+0x114>
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	429a      	cmp	r2, r3
 8001944:	d00c      	beq.n	8001960 <HAL_GPIO_EXTI_Callback+0x114>
            {
              Manual_LCD_RefillTaskBox(task_boxes[old_task].name, COLOR_BLACK); // Khôi phục màu của task cũ
 8001946:	493e      	ldr	r1, [pc, #248]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	440b      	add	r3, r1
 8001954:	3308      	adds	r3, #8
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2100      	movs	r1, #0
 800195a:	4618      	mov	r0, r3
 800195c:	f000 ff6c 	bl	8002838 <Manual_LCD_RefillTaskBox>
            }
            Manual_LCD_RefillTaskBox(task_boxes[i].name, COLOR_MAGENTA); // Đổi màu task box được chọn
 8001960:	4937      	ldr	r1, [pc, #220]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x1f4>)
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	440b      	add	r3, r1
 800196e:	3308      	adds	r3, #8
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8001976:	4618      	mov	r0, r3
 8001978:	f000 ff5e 	bl	8002838 <Manual_LCD_RefillTaskBox>
            Manual_LCD_UpdateInfoText(task_boxes[i].name);               // Cập nhật thông tin task
 800197c:	4930      	ldr	r1, [pc, #192]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x1f4>)
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	3308      	adds	r3, #8
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f000 ff20 	bl	80027d4 <Manual_LCD_UpdateInfoText>
            return;
 8001994:	e04c      	b.n	8001a30 <HAL_GPIO_EXTI_Callback+0x1e4>
        for (int i = 0; i < num_tasks; i++)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3301      	adds	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	4b29      	ldr	r3, [pc, #164]	@ (8001a44 <HAL_GPIO_EXTI_Callback+0x1f8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	f6ff af7a 	blt.w	800189c <HAL_GPIO_EXTI_Callback+0x50>
          }
        }

        // Kiểm tra xem có chạm vào nút Back không
        if (displayPoint.x >= back_button_box.x &&
 80019a8:	893a      	ldrh	r2, [r7, #8]
 80019aa:	4b27      	ldr	r3, [pc, #156]	@ (8001a48 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d336      	bcc.n	8001a20 <HAL_GPIO_EXTI_Callback+0x1d4>
            displayPoint.x < (back_button_box.x + back_button_box.w) &&
 80019b2:	893b      	ldrh	r3, [r7, #8]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b24      	ldr	r3, [pc, #144]	@ (8001a48 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80019b8:	881b      	ldrh	r3, [r3, #0]
 80019ba:	4619      	mov	r1, r3
 80019bc:	4b22      	ldr	r3, [pc, #136]	@ (8001a48 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80019be:	889b      	ldrh	r3, [r3, #4]
 80019c0:	440b      	add	r3, r1
        if (displayPoint.x >= back_button_box.x &&
 80019c2:	429a      	cmp	r2, r3
 80019c4:	da2c      	bge.n	8001a20 <HAL_GPIO_EXTI_Callback+0x1d4>
            displayPoint.y >= back_button_box.y &&
 80019c6:	897a      	ldrh	r2, [r7, #10]
 80019c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a48 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80019ca:	885b      	ldrh	r3, [r3, #2]
            displayPoint.x < (back_button_box.x + back_button_box.w) &&
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d327      	bcc.n	8001a20 <HAL_GPIO_EXTI_Callback+0x1d4>
            displayPoint.y < (back_button_box.y + back_button_box.h))
 80019d0:	897b      	ldrh	r3, [r7, #10]
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80019d6:	885b      	ldrh	r3, [r3, #2]
 80019d8:	4619      	mov	r1, r3
 80019da:	4b1b      	ldr	r3, [pc, #108]	@ (8001a48 <HAL_GPIO_EXTI_Callback+0x1fc>)
 80019dc:	88db      	ldrh	r3, [r3, #6]
 80019de:	440b      	add	r3, r1
            displayPoint.y >= back_button_box.y &&
 80019e0:	429a      	cmp	r2, r3
 80019e2:	da1d      	bge.n	8001a20 <HAL_GPIO_EXTI_Callback+0x1d4>
        {
          current_task = 4; // Nút Back
 80019e4:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <HAL_GPIO_EXTI_Callback+0x1f0>)
 80019e6:	2204      	movs	r2, #4
 80019e8:	601a      	str	r2, [r3, #0]
          if (old_task >= 0 && old_task < num_tasks)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db11      	blt.n	8001a14 <HAL_GPIO_EXTI_Callback+0x1c8>
 80019f0:	4b14      	ldr	r3, [pc, #80]	@ (8001a44 <HAL_GPIO_EXTI_Callback+0x1f8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	da0c      	bge.n	8001a14 <HAL_GPIO_EXTI_Callback+0x1c8>
          {
            Manual_LCD_RefillTaskBox(task_boxes[old_task].name, COLOR_BLACK); // Khôi phục màu của task cũ
 80019fa:	4911      	ldr	r1, [pc, #68]	@ (8001a40 <HAL_GPIO_EXTI_Callback+0x1f4>)
 80019fc:	693a      	ldr	r2, [r7, #16]
 80019fe:	4613      	mov	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	440b      	add	r3, r1
 8001a08:	3308      	adds	r3, #8
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 ff12 	bl	8002838 <Manual_LCD_RefillTaskBox>
          }
          Manual_LCD_UpdateInfoText(back_button_box.name); // Cập nhật thông tin nút Back
 8001a14:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fedb 	bl	80027d4 <Manual_LCD_UpdateInfoText>
          return;
 8001a1e:	e007      	b.n	8001a30 <HAL_GPIO_EXTI_Callback+0x1e4>
        }

        // Nếu không chạm vào task box nào, đặt current_task về -1
        current_task = -1;
 8001a20:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001a22:	f04f 32ff 	mov.w	r2, #4294967295
 8001a26:	601a      	str	r2, [r3, #0]
        Manual_LCD_UpdateInfoText("No task selected"); // Cập nhật thông tin không có task nào được chọn
 8001a28:	4808      	ldr	r0, [pc, #32]	@ (8001a4c <HAL_GPIO_EXTI_Callback+0x200>)
 8001a2a:	f000 fed3 	bl	80027d4 <Manual_LCD_UpdateInfoText>
        return;
 8001a2e:	bf00      	nop
      }
    }
  }
}
 8001a30:	371c      	adds	r7, #28
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd90      	pop	{r4, r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	2000047c 	.word	0x2000047c
 8001a44:	20000518 	.word	0x20000518
 8001a48:	2000070c 	.word	0x2000070c
 8001a4c:	0800ddac 	.word	0x0800ddac

08001a50 <HAL_CAN_RxFifo0MsgPendingCallback>:
//     // __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
//   }
// }

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if (hcan->Instance == CAN2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a9c <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d117      	bne.n	8001a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
  {
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader2, RxData2) == HAL_OK)
 8001a62:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001a64:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001a66:	2100      	movs	r1, #0
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f002 fc8f 	bl	800438c <HAL_CAN_GetRxMessage>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10e      	bne.n	8001a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
    {
      // Giải mã dữ liệu nhận được (Tùy chọn, để debug)
      if (RxHeader2.DLC >= 2) // Đảm bảo có đủ dữ liệu
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d90a      	bls.n	8001a92 <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
      {
        can2_received_group = RxData2[0];
 8001a7c:	4b08      	ldr	r3, [pc, #32]	@ (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001a7e:	781a      	ldrb	r2, [r3, #0]
 8001a80:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8001a82:	701a      	strb	r2, [r3, #0]
        can2_received_temperature = RxData2[1];
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001a86:	785a      	ldrb	r2, [r3, #1]
 8001a88:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8001a8a:	701a      	strb	r2, [r3, #0]
        can2_received_data_flag = 1; // Đánh dấu đã nhận dữ liệu
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
      }
    }
  }
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40006800 	.word	0x40006800
 8001aa0:	20000478 	.word	0x20000478
 8001aa4:	20000540 	.word	0x20000540
 8001aa8:	200005fe 	.word	0x200005fe
 8001aac:	20000685 	.word	0x20000685
 8001ab0:	2000007c 	.word	0x2000007c

08001ab4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab8:	b672      	cpsid	i
}
 8001aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8001abc:	bf00      	nop
 8001abe:	e7fd      	b.n	8001abc <Error_Handler+0x8>

08001ac0 <LCD_SPI_Send>:
// External SPI handle defined in main.c
extern SPI_HandleTypeDef hspi1;

// Low-level SPI communication functions
static void LCD_SPI_Send(uint8_t data)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8001aca:	1df9      	adds	r1, r7, #7
 8001acc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4803      	ldr	r0, [pc, #12]	@ (8001ae0 <LCD_SPI_Send+0x20>)
 8001ad4:	f007 fe5f 	bl	8009796 <HAL_SPI_Transmit>
}
 8001ad8:	bf00      	nop
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	20000688 	.word	0x20000688

08001ae4 <LCD_Write_Cmd>:

static void LCD_Write_Cmd(uint8_t cmd)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // DC low for command
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001af4:	480a      	ldr	r0, [pc, #40]	@ (8001b20 <LCD_Write_Cmd+0x3c>)
 8001af6:	f003 fae9 	bl	80050cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001afa:	2200      	movs	r2, #0
 8001afc:	2180      	movs	r1, #128	@ 0x80
 8001afe:	4808      	ldr	r0, [pc, #32]	@ (8001b20 <LCD_Write_Cmd+0x3c>)
 8001b00:	f003 fae4 	bl	80050cc <HAL_GPIO_WritePin>
    LCD_SPI_Send(cmd);
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ffda 	bl	8001ac0 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2180      	movs	r1, #128	@ 0x80
 8001b10:	4803      	ldr	r0, [pc, #12]	@ (8001b20 <LCD_Write_Cmd+0x3c>)
 8001b12:	f003 fadb 	bl	80050cc <HAL_GPIO_WritePin>
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40020400 	.word	0x40020400

08001b24 <LCD_Write_Data>:

static void LCD_Write_Data(uint8_t data)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b34:	480a      	ldr	r0, [pc, #40]	@ (8001b60 <LCD_Write_Data+0x3c>)
 8001b36:	f003 fac9 	bl	80050cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2180      	movs	r1, #128	@ 0x80
 8001b3e:	4808      	ldr	r0, [pc, #32]	@ (8001b60 <LCD_Write_Data+0x3c>)
 8001b40:	f003 fac4 	bl	80050cc <HAL_GPIO_WritePin>
    LCD_SPI_Send(data);
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ffba 	bl	8001ac0 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	2180      	movs	r1, #128	@ 0x80
 8001b50:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <LCD_Write_Data+0x3c>)
 8001b52:	f003 fabb 	bl	80050cc <HAL_GPIO_WritePin>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40020400 	.word	0x40020400

08001b64 <LCD_Write_Data16>:

static void LCD_Write_Data16(uint16_t data)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b74:	4810      	ldr	r0, [pc, #64]	@ (8001bb8 <LCD_Write_Data16+0x54>)
 8001b76:	f003 faa9 	bl	80050cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2180      	movs	r1, #128	@ 0x80
 8001b7e:	480e      	ldr	r0, [pc, #56]	@ (8001bb8 <LCD_Write_Data16+0x54>)
 8001b80:	f003 faa4 	bl	80050cc <HAL_GPIO_WritePin>
    uint8_t bytes[2];
    bytes[0] = (data >> 8) & 0xFF;
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	0a1b      	lsrs	r3, r3, #8
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	733b      	strb	r3, [r7, #12]
    bytes[1] = data & 0xFF;
 8001b8e:	88fb      	ldrh	r3, [r7, #6]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, bytes, 2, HAL_MAX_DELAY);
 8001b94:	f107 010c 	add.w	r1, r7, #12
 8001b98:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	4807      	ldr	r0, [pc, #28]	@ (8001bbc <LCD_Write_Data16+0x58>)
 8001ba0:	f007 fdf9 	bl	8009796 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2180      	movs	r1, #128	@ 0x80
 8001ba8:	4803      	ldr	r0, [pc, #12]	@ (8001bb8 <LCD_Write_Data16+0x54>)
 8001baa:	f003 fa8f 	bl	80050cc <HAL_GPIO_WritePin>
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40020400 	.word	0x40020400
 8001bbc:	20000688 	.word	0x20000688

08001bc0 <LCD_Set_Address_Window>:

// Set drawing window
static void LCD_Set_Address_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4604      	mov	r4, r0
 8001bc8:	4608      	mov	r0, r1
 8001bca:	4611      	mov	r1, r2
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4623      	mov	r3, r4
 8001bd0:	80fb      	strh	r3, [r7, #6]
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	80bb      	strh	r3, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	807b      	strh	r3, [r7, #2]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	803b      	strh	r3, [r7, #0]
    LCD_Write_Cmd(0x2A); // Column Address Set
 8001bde:	202a      	movs	r0, #42	@ 0x2a
 8001be0:	f7ff ff80 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(x1 >> 8);
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff99 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(x1 & 0xFF);
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff ff94 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(x2 >> 8);
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff8d 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(x2 & 0xFF);
 8001c0a:	887b      	ldrh	r3, [r7, #2]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff ff88 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0x2B); // Page Address Set
 8001c14:	202b      	movs	r0, #43	@ 0x2b
 8001c16:	f7ff ff65 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(y1 >> 8);
 8001c1a:	88bb      	ldrh	r3, [r7, #4]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff7e 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(y1 & 0xFF);
 8001c28:	88bb      	ldrh	r3, [r7, #4]
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff79 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(y2 >> 8);
 8001c32:	883b      	ldrh	r3, [r7, #0]
 8001c34:	0a1b      	lsrs	r3, r3, #8
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ff72 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(y2 & 0xFF);
 8001c40:	883b      	ldrh	r3, [r7, #0]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff6d 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0x2C); // Memory Write
 8001c4a:	202c      	movs	r0, #44	@ 0x2c
 8001c4c:	f7ff ff4a 	bl	8001ae4 <LCD_Write_Cmd>
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd90      	pop	{r4, r7, pc}

08001c58 <Manual_LCD_Init>:
        }
    }
}

void Manual_LCD_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0

    // Hardware Reset
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2104      	movs	r1, #4
 8001c60:	4889      	ldr	r0, [pc, #548]	@ (8001e88 <Manual_LCD_Init+0x230>)
 8001c62:	f003 fa33 	bl	80050cc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001c66:	2064      	movs	r0, #100	@ 0x64
 8001c68:	f001 fc7e 	bl	8003568 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	2104      	movs	r1, #4
 8001c70:	4885      	ldr	r0, [pc, #532]	@ (8001e88 <Manual_LCD_Init+0x230>)
 8001c72:	f003 fa2b 	bl	80050cc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001c76:	2064      	movs	r0, #100	@ 0x64
 8001c78:	f001 fc76 	bl	8003568 <HAL_Delay>

    // Backlight ON
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2140      	movs	r1, #64	@ 0x40
 8001c80:	4881      	ldr	r0, [pc, #516]	@ (8001e88 <Manual_LCD_Init+0x230>)
 8001c82:	f003 fa23 	bl	80050cc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001c86:	200a      	movs	r0, #10
 8001c88:	f001 fc6e 	bl	8003568 <HAL_Delay>

    // Initialization sequence (Example for ILI9341 - ADJUST FOR YOUR LCD)
    LCD_Write_Cmd(0xCF); // Power Control B
 8001c8c:	20cf      	movs	r0, #207	@ 0xcf
 8001c8e:	f7ff ff29 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff ff46 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 8001c98:	20c1      	movs	r0, #193	@ 0xc1
 8001c9a:	f7ff ff43 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x30);
 8001c9e:	2030      	movs	r0, #48	@ 0x30
 8001ca0:	f7ff ff40 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0xED); // Power on sequence control
 8001ca4:	20ed      	movs	r0, #237	@ 0xed
 8001ca6:	f7ff ff1d 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x64);
 8001caa:	2064      	movs	r0, #100	@ 0x64
 8001cac:	f7ff ff3a 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001cb0:	2003      	movs	r0, #3
 8001cb2:	f7ff ff37 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x12);
 8001cb6:	2012      	movs	r0, #18
 8001cb8:	f7ff ff34 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x81);
 8001cbc:	2081      	movs	r0, #129	@ 0x81
 8001cbe:	f7ff ff31 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0xE8); // Driver timing control A
 8001cc2:	20e8      	movs	r0, #232	@ 0xe8
 8001cc4:	f7ff ff0e 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x85);
 8001cc8:	2085      	movs	r0, #133	@ 0x85
 8001cca:	f7ff ff2b 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f7ff ff28 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x78);
 8001cd4:	2078      	movs	r0, #120	@ 0x78
 8001cd6:	f7ff ff25 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0xCB); // Power control A
 8001cda:	20cb      	movs	r0, #203	@ 0xcb
 8001cdc:	f7ff ff02 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x39);
 8001ce0:	2039      	movs	r0, #57	@ 0x39
 8001ce2:	f7ff ff1f 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x2C);
 8001ce6:	202c      	movs	r0, #44	@ 0x2c
 8001ce8:	f7ff ff1c 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001cec:	2000      	movs	r0, #0
 8001cee:	f7ff ff19 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x34);
 8001cf2:	2034      	movs	r0, #52	@ 0x34
 8001cf4:	f7ff ff16 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x02);
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f7ff ff13 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0xF7); // Pump ratio control
 8001cfe:	20f7      	movs	r0, #247	@ 0xf7
 8001d00:	f7ff fef0 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x20);
 8001d04:	2020      	movs	r0, #32
 8001d06:	f7ff ff0d 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0xEA); // Driver timing control B
 8001d0a:	20ea      	movs	r0, #234	@ 0xea
 8001d0c:	f7ff feea 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001d10:	2000      	movs	r0, #0
 8001d12:	f7ff ff07 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff ff04 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0xC0);  // Power Control 1
 8001d1c:	20c0      	movs	r0, #192	@ 0xc0
 8001d1e:	f7ff fee1 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x23); // VRH[5:0]
 8001d22:	2023      	movs	r0, #35	@ 0x23
 8001d24:	f7ff fefe 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0xC1);  // Power Control 2
 8001d28:	20c1      	movs	r0, #193	@ 0xc1
 8001d2a:	f7ff fedb 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x10); // SAP[2:0];BT[3:0]
 8001d2e:	2010      	movs	r0, #16
 8001d30:	f7ff fef8 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0xC5);  // VCOM Control 1
 8001d34:	20c5      	movs	r0, #197	@ 0xc5
 8001d36:	f7ff fed5 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x3E); // Contrast
 8001d3a:	203e      	movs	r0, #62	@ 0x3e
 8001d3c:	f7ff fef2 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x28);
 8001d40:	2028      	movs	r0, #40	@ 0x28
 8001d42:	f7ff feef 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0xC7);  // VCOM Control 2
 8001d46:	20c7      	movs	r0, #199	@ 0xc7
 8001d48:	f7ff fecc 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x86); // --
 8001d4c:	2086      	movs	r0, #134	@ 0x86
 8001d4e:	f7ff fee9 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0x36); // Memory Access Control
 8001d52:	2036      	movs	r0, #54	@ 0x36
 8001d54:	f7ff fec6 	bl	8001ae4 <LCD_Write_Cmd>
    // LCD_Write_Data(0x08); // Previous value
    LCD_Write_Data(0x28); // Try this: MV=1, MY=0, MX=0, BGR=1 (Landscape, X:T-B, Y:L-R)
 8001d58:	2028      	movs	r0, #40	@ 0x28
 8001d5a:	f7ff fee3 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0x3A);  // Pixel Format Set
 8001d5e:	203a      	movs	r0, #58	@ 0x3a
 8001d60:	f7ff fec0 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x55); // 16 bits/pixel
 8001d64:	2055      	movs	r0, #85	@ 0x55
 8001d66:	f7ff fedd 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0xB1); // Frame Rate Control (In Normal Mode/Full Colors)
 8001d6a:	20b1      	movs	r0, #177	@ 0xb1
 8001d6c:	f7ff feba 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff fed7 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x18);
 8001d76:	2018      	movs	r0, #24
 8001d78:	f7ff fed4 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0xB6); // Display Function Control
 8001d7c:	20b6      	movs	r0, #182	@ 0xb6
 8001d7e:	f7ff feb1 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x08);
 8001d82:	2008      	movs	r0, #8
 8001d84:	f7ff fece 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x82);
 8001d88:	2082      	movs	r0, #130	@ 0x82
 8001d8a:	f7ff fecb 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x27);
 8001d8e:	2027      	movs	r0, #39	@ 0x27
 8001d90:	f7ff fec8 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0xF2);  // Enable 3G
 8001d94:	20f2      	movs	r0, #242	@ 0xf2
 8001d96:	f7ff fea5 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x00); // 3Gamma Function Disable
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f7ff fec2 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0x26);  // Gamma Set
 8001da0:	2026      	movs	r0, #38	@ 0x26
 8001da2:	f7ff fe9f 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x01); // Gamma curve selected
 8001da6:	2001      	movs	r0, #1
 8001da8:	f7ff febc 	bl	8001b24 <LCD_Write_Data>

    // ... (Positive and Negative Gamma Correction remain the same) ...
    LCD_Write_Cmd(0xE0); // Positive Gamma Correction
 8001dac:	20e0      	movs	r0, #224	@ 0xe0
 8001dae:	f7ff fe99 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x0F);
 8001db2:	200f      	movs	r0, #15
 8001db4:	f7ff feb6 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001db8:	2031      	movs	r0, #49	@ 0x31
 8001dba:	f7ff feb3 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x2B);
 8001dbe:	202b      	movs	r0, #43	@ 0x2b
 8001dc0:	f7ff feb0 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8001dc4:	200c      	movs	r0, #12
 8001dc6:	f7ff fead 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001dca:	200e      	movs	r0, #14
 8001dcc:	f7ff feaa 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8001dd0:	2008      	movs	r0, #8
 8001dd2:	f7ff fea7 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x4E);
 8001dd6:	204e      	movs	r0, #78	@ 0x4e
 8001dd8:	f7ff fea4 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0xF1);
 8001ddc:	20f1      	movs	r0, #241	@ 0xf1
 8001dde:	f7ff fea1 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x37);
 8001de2:	2037      	movs	r0, #55	@ 0x37
 8001de4:	f7ff fe9e 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 8001de8:	2007      	movs	r0, #7
 8001dea:	f7ff fe9b 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x10);
 8001dee:	2010      	movs	r0, #16
 8001df0:	f7ff fe98 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f7ff fe95 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001dfa:	200e      	movs	r0, #14
 8001dfc:	f7ff fe92 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x09);
 8001e00:	2009      	movs	r0, #9
 8001e02:	f7ff fe8f 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff fe8c 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0xE1); // Negative Gamma Correction
 8001e0c:	20e1      	movs	r0, #225	@ 0xe1
 8001e0e:	f7ff fe69 	bl	8001ae4 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff fe86 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001e18:	200e      	movs	r0, #14
 8001e1a:	f7ff fe83 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x14);
 8001e1e:	2014      	movs	r0, #20
 8001e20:	f7ff fe80 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001e24:	2003      	movs	r0, #3
 8001e26:	f7ff fe7d 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x11);
 8001e2a:	2011      	movs	r0, #17
 8001e2c:	f7ff fe7a 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 8001e30:	2007      	movs	r0, #7
 8001e32:	f7ff fe77 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001e36:	2031      	movs	r0, #49	@ 0x31
 8001e38:	f7ff fe74 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 8001e3c:	20c1      	movs	r0, #193	@ 0xc1
 8001e3e:	f7ff fe71 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x48);
 8001e42:	2048      	movs	r0, #72	@ 0x48
 8001e44:	f7ff fe6e 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8001e48:	2008      	movs	r0, #8
 8001e4a:	f7ff fe6b 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8001e4e:	200f      	movs	r0, #15
 8001e50:	f7ff fe68 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8001e54:	200c      	movs	r0, #12
 8001e56:	f7ff fe65 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001e5a:	2031      	movs	r0, #49	@ 0x31
 8001e5c:	f7ff fe62 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x36);
 8001e60:	2036      	movs	r0, #54	@ 0x36
 8001e62:	f7ff fe5f 	bl	8001b24 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8001e66:	200f      	movs	r0, #15
 8001e68:	f7ff fe5c 	bl	8001b24 <LCD_Write_Data>

    LCD_Write_Cmd(0x11); // Exit Sleep
 8001e6c:	2011      	movs	r0, #17
 8001e6e:	f7ff fe39 	bl	8001ae4 <LCD_Write_Cmd>
    HAL_Delay(120);
 8001e72:	2078      	movs	r0, #120	@ 0x78
 8001e74:	f001 fb78 	bl	8003568 <HAL_Delay>
    LCD_Write_Cmd(0x29); // Display ON
 8001e78:	2029      	movs	r0, #41	@ 0x29
 8001e7a:	f7ff fe33 	bl	8001ae4 <LCD_Write_Cmd>

    Manual_LCD_Clear(COLOR_BLACK);
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f000 f804 	bl	8001e8c <Manual_LCD_Clear>

    // Enable touch interrupt
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40020400 	.word	0x40020400

08001e8c <Manual_LCD_Clear>:

void Manual_LCD_Clear(uint16_t color)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	80fb      	strh	r3, [r7, #6]
    LCD_Set_Address_Window(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 8001e96:	f240 133f 	movw	r3, #319	@ 0x13f
 8001e9a:	22ef      	movs	r2, #239	@ 0xef
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff fe8e 	bl	8001bc0 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001eaa:	4815      	ldr	r0, [pc, #84]	@ (8001f00 <Manual_LCD_Clear+0x74>)
 8001eac:	f003 f90e 	bl	80050cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2180      	movs	r1, #128	@ 0x80
 8001eb4:	4812      	ldr	r0, [pc, #72]	@ (8001f00 <Manual_LCD_Clear+0x74>)
 8001eb6:	f003 f909 	bl	80050cc <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	723b      	strb	r3, [r7, #8]
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e00a      	b.n	8001ee6 <Manual_LCD_Clear+0x5a>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8001ed0:	f107 0108 	add.w	r1, r7, #8
 8001ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed8:	2202      	movs	r2, #2
 8001eda:	480a      	ldr	r0, [pc, #40]	@ (8001f04 <Manual_LCD_Clear+0x78>)
 8001edc:	f007 fc5b 	bl	8009796 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001eec:	d3f0      	bcc.n	8001ed0 <Manual_LCD_Clear+0x44>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001eee:	2201      	movs	r2, #1
 8001ef0:	2180      	movs	r1, #128	@ 0x80
 8001ef2:	4803      	ldr	r0, [pc, #12]	@ (8001f00 <Manual_LCD_Clear+0x74>)
 8001ef4:	f003 f8ea 	bl	80050cc <HAL_GPIO_WritePin>
}
 8001ef8:	bf00      	nop
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40020400 	.word	0x40020400
 8001f04:	20000688 	.word	0x20000688

08001f08 <Manual_LCD_DrawPixel>:

void Manual_LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
 8001f12:	460b      	mov	r3, r1
 8001f14:	80bb      	strh	r3, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	807b      	strh	r3, [r7, #2]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	2bef      	cmp	r3, #239	@ 0xef
 8001f1e:	d80e      	bhi.n	8001f3e <Manual_LCD_DrawPixel+0x36>
 8001f20:	88bb      	ldrh	r3, [r7, #4]
 8001f22:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001f26:	d20a      	bcs.n	8001f3e <Manual_LCD_DrawPixel+0x36>
        return;
    LCD_Set_Address_Window(x, y, x, y);
 8001f28:	88bb      	ldrh	r3, [r7, #4]
 8001f2a:	88fa      	ldrh	r2, [r7, #6]
 8001f2c:	88b9      	ldrh	r1, [r7, #4]
 8001f2e:	88f8      	ldrh	r0, [r7, #6]
 8001f30:	f7ff fe46 	bl	8001bc0 <LCD_Set_Address_Window>
    LCD_Write_Data16(color);
 8001f34:	887b      	ldrh	r3, [r7, #2]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fe14 	bl	8001b64 <LCD_Write_Data16>
 8001f3c:	e000      	b.n	8001f40 <Manual_LCD_DrawPixel+0x38>
        return;
 8001f3e:	bf00      	nop
}
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <Manual_LCD_DrawLine>:

void Manual_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8001f46:	b590      	push	{r4, r7, lr}
 8001f48:	b087      	sub	sp, #28
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	4608      	mov	r0, r1
 8001f50:	4611      	mov	r1, r2
 8001f52:	461a      	mov	r2, r3
 8001f54:	4623      	mov	r3, r4
 8001f56:	80fb      	strh	r3, [r7, #6]
 8001f58:	4603      	mov	r3, r0
 8001f5a:	80bb      	strh	r3, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001f64:	883a      	ldrh	r2, [r7, #0]
 8001f66:	88bb      	ldrh	r3, [r7, #4]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001f6e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001f72:	8879      	ldrh	r1, [r7, #2]
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	1acb      	subs	r3, r1, r3
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bfb8      	it	lt
 8001f7c:	425b      	neglt	r3, r3
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	bfcc      	ite	gt
 8001f82:	2301      	movgt	r3, #1
 8001f84:	2300      	movle	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	827b      	strh	r3, [r7, #18]
    if (steep)
 8001f8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <Manual_LCD_DrawLine+0x64>
    {
        uint16_t temp;
        temp = x1;
 8001f92:	88fb      	ldrh	r3, [r7, #6]
 8001f94:	823b      	strh	r3, [r7, #16]
        x1 = y1;
 8001f96:	88bb      	ldrh	r3, [r7, #4]
 8001f98:	80fb      	strh	r3, [r7, #6]
        y1 = temp;
 8001f9a:	8a3b      	ldrh	r3, [r7, #16]
 8001f9c:	80bb      	strh	r3, [r7, #4]
        temp = x2;
 8001f9e:	887b      	ldrh	r3, [r7, #2]
 8001fa0:	823b      	strh	r3, [r7, #16]
        x2 = y2;
 8001fa2:	883b      	ldrh	r3, [r7, #0]
 8001fa4:	807b      	strh	r3, [r7, #2]
        y2 = temp;
 8001fa6:	8a3b      	ldrh	r3, [r7, #16]
 8001fa8:	803b      	strh	r3, [r7, #0]
    }
    if (x1 > x2)
 8001faa:	88fa      	ldrh	r2, [r7, #6]
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d90b      	bls.n	8001fca <Manual_LCD_DrawLine+0x84>
    {
        uint16_t temp;
        temp = x1;
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	81fb      	strh	r3, [r7, #14]
        x1 = x2;
 8001fb6:	887b      	ldrh	r3, [r7, #2]
 8001fb8:	80fb      	strh	r3, [r7, #6]
        x2 = temp;
 8001fba:	89fb      	ldrh	r3, [r7, #14]
 8001fbc:	807b      	strh	r3, [r7, #2]
        temp = y1;
 8001fbe:	88bb      	ldrh	r3, [r7, #4]
 8001fc0:	81fb      	strh	r3, [r7, #14]
        y1 = y2;
 8001fc2:	883b      	ldrh	r3, [r7, #0]
 8001fc4:	80bb      	strh	r3, [r7, #4]
        y2 = temp;
 8001fc6:	89fb      	ldrh	r3, [r7, #14]
 8001fc8:	803b      	strh	r3, [r7, #0]
    }
    int16_t dx = x2 - x1;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	81bb      	strh	r3, [r7, #12]
    int16_t dy = abs(y2 - y1);
 8001fd4:	883a      	ldrh	r2, [r7, #0]
 8001fd6:	88bb      	ldrh	r3, [r7, #4]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	bfb8      	it	lt
 8001fde:	425b      	neglt	r3, r3
 8001fe0:	817b      	strh	r3, [r7, #10]
    int16_t err = dx / 2;
 8001fe2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001fe6:	0fda      	lsrs	r2, r3, #31
 8001fe8:	4413      	add	r3, r2
 8001fea:	105b      	asrs	r3, r3, #1
 8001fec:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;
    if (y1 < y2)
 8001fee:	88ba      	ldrh	r2, [r7, #4]
 8001ff0:	883b      	ldrh	r3, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d202      	bcs.n	8001ffc <Manual_LCD_DrawLine+0xb6>
        ystep = 1;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	82bb      	strh	r3, [r7, #20]
 8001ffa:	e029      	b.n	8002050 <Manual_LCD_DrawLine+0x10a>
    else
        ystep = -1;
 8001ffc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002000:	82bb      	strh	r3, [r7, #20]

    for (; x1 <= x2; x1++)
 8002002:	e025      	b.n	8002050 <Manual_LCD_DrawLine+0x10a>
    {
        if (steep)
 8002004:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <Manual_LCD_DrawLine+0xd4>
            Manual_LCD_DrawPixel(y1, x1, color);
 800200c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800200e:	88f9      	ldrh	r1, [r7, #6]
 8002010:	88bb      	ldrh	r3, [r7, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff78 	bl	8001f08 <Manual_LCD_DrawPixel>
 8002018:	e005      	b.n	8002026 <Manual_LCD_DrawLine+0xe0>
        else
            Manual_LCD_DrawPixel(x1, y1, color);
 800201a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800201c:	88b9      	ldrh	r1, [r7, #4]
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff71 	bl	8001f08 <Manual_LCD_DrawPixel>
        err -= dy;
 8002026:	8afa      	ldrh	r2, [r7, #22]
 8002028:	897b      	ldrh	r3, [r7, #10]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	b29b      	uxth	r3, r3
 800202e:	82fb      	strh	r3, [r7, #22]
        if (err < 0)
 8002030:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da08      	bge.n	800204a <Manual_LCD_DrawLine+0x104>
        {
            y1 += ystep;
 8002038:	8aba      	ldrh	r2, [r7, #20]
 800203a:	88bb      	ldrh	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8002040:	8afa      	ldrh	r2, [r7, #22]
 8002042:	89bb      	ldrh	r3, [r7, #12]
 8002044:	4413      	add	r3, r2
 8002046:	b29b      	uxth	r3, r3
 8002048:	82fb      	strh	r3, [r7, #22]
    for (; x1 <= x2; x1++)
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	3301      	adds	r3, #1
 800204e:	80fb      	strh	r3, [r7, #6]
 8002050:	88fa      	ldrh	r2, [r7, #6]
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	429a      	cmp	r2, r3
 8002056:	d9d5      	bls.n	8002004 <Manual_LCD_DrawLine+0xbe>
        }
    }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	bd90      	pop	{r4, r7, pc}

08002062 <Manual_LCD_DrawRectangle>:

void Manual_LCD_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8002062:	b590      	push	{r4, r7, lr}
 8002064:	b085      	sub	sp, #20
 8002066:	af02      	add	r7, sp, #8
 8002068:	4604      	mov	r4, r0
 800206a:	4608      	mov	r0, r1
 800206c:	4611      	mov	r1, r2
 800206e:	461a      	mov	r2, r3
 8002070:	4623      	mov	r3, r4
 8002072:	80fb      	strh	r3, [r7, #6]
 8002074:	4603      	mov	r3, r0
 8002076:	80bb      	strh	r3, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	2bef      	cmp	r3, #239	@ 0xef
 8002084:	d865      	bhi.n	8002152 <Manual_LCD_DrawRectangle+0xf0>
 8002086:	88bb      	ldrh	r3, [r7, #4]
 8002088:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800208c:	d261      	bcs.n	8002152 <Manual_LCD_DrawRectangle+0xf0>
        return;
    if ((x + width - 1) >= LCD_WIDTH)
 800208e:	88fa      	ldrh	r2, [r7, #6]
 8002090:	887b      	ldrh	r3, [r7, #2]
 8002092:	4413      	add	r3, r2
 8002094:	2bf0      	cmp	r3, #240	@ 0xf0
 8002096:	dd03      	ble.n	80020a0 <Manual_LCD_DrawRectangle+0x3e>
        width = LCD_WIDTH - x;
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 800209e:	807b      	strh	r3, [r7, #2]
    if ((y + height - 1) >= LCD_HEIGHT)
 80020a0:	88ba      	ldrh	r2, [r7, #4]
 80020a2:	883b      	ldrh	r3, [r7, #0]
 80020a4:	4413      	add	r3, r2
 80020a6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80020aa:	dd03      	ble.n	80020b4 <Manual_LCD_DrawRectangle+0x52>
        height = LCD_HEIGHT - y;
 80020ac:	88bb      	ldrh	r3, [r7, #4]
 80020ae:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80020b2:	803b      	strh	r3, [r7, #0]

    Manual_LCD_DrawLine(x, y, x + width - 1, y, color);
 80020b4:	88fa      	ldrh	r2, [r7, #6]
 80020b6:	887b      	ldrh	r3, [r7, #2]
 80020b8:	4413      	add	r3, r2
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	88bc      	ldrh	r4, [r7, #4]
 80020c2:	88b9      	ldrh	r1, [r7, #4]
 80020c4:	88f8      	ldrh	r0, [r7, #6]
 80020c6:	8b3b      	ldrh	r3, [r7, #24]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	4623      	mov	r3, r4
 80020cc:	f7ff ff3b 	bl	8001f46 <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y + height - 1, x + width - 1, y + height - 1, color);
 80020d0:	88ba      	ldrh	r2, [r7, #4]
 80020d2:	883b      	ldrh	r3, [r7, #0]
 80020d4:	4413      	add	r3, r2
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	b299      	uxth	r1, r3
 80020dc:	88fa      	ldrh	r2, [r7, #6]
 80020de:	887b      	ldrh	r3, [r7, #2]
 80020e0:	4413      	add	r3, r2
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29c      	uxth	r4, r3
 80020e8:	88ba      	ldrh	r2, [r7, #4]
 80020ea:	883b      	ldrh	r3, [r7, #0]
 80020ec:	4413      	add	r3, r2
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	88f8      	ldrh	r0, [r7, #6]
 80020f6:	8b3b      	ldrh	r3, [r7, #24]
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	4613      	mov	r3, r2
 80020fc:	4622      	mov	r2, r4
 80020fe:	f7ff ff22 	bl	8001f46 <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y, x, y + height - 1, color);
 8002102:	88ba      	ldrh	r2, [r7, #4]
 8002104:	883b      	ldrh	r3, [r7, #0]
 8002106:	4413      	add	r3, r2
 8002108:	b29b      	uxth	r3, r3
 800210a:	3b01      	subs	r3, #1
 800210c:	b29c      	uxth	r4, r3
 800210e:	88fa      	ldrh	r2, [r7, #6]
 8002110:	88b9      	ldrh	r1, [r7, #4]
 8002112:	88f8      	ldrh	r0, [r7, #6]
 8002114:	8b3b      	ldrh	r3, [r7, #24]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	4623      	mov	r3, r4
 800211a:	f7ff ff14 	bl	8001f46 <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x + width - 1, y, x + width - 1, y + height - 1, color);
 800211e:	88fa      	ldrh	r2, [r7, #6]
 8002120:	887b      	ldrh	r3, [r7, #2]
 8002122:	4413      	add	r3, r2
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b01      	subs	r3, #1
 8002128:	b298      	uxth	r0, r3
 800212a:	88fa      	ldrh	r2, [r7, #6]
 800212c:	887b      	ldrh	r3, [r7, #2]
 800212e:	4413      	add	r3, r2
 8002130:	b29b      	uxth	r3, r3
 8002132:	3b01      	subs	r3, #1
 8002134:	b29c      	uxth	r4, r3
 8002136:	88ba      	ldrh	r2, [r7, #4]
 8002138:	883b      	ldrh	r3, [r7, #0]
 800213a:	4413      	add	r3, r2
 800213c:	b29b      	uxth	r3, r3
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	88b9      	ldrh	r1, [r7, #4]
 8002144:	8b3b      	ldrh	r3, [r7, #24]
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	4613      	mov	r3, r2
 800214a:	4622      	mov	r2, r4
 800214c:	f7ff fefb 	bl	8001f46 <Manual_LCD_DrawLine>
 8002150:	e000      	b.n	8002154 <Manual_LCD_DrawRectangle+0xf2>
        return;
 8002152:	bf00      	nop
}
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	bd90      	pop	{r4, r7, pc}
	...

0800215c <Manual_LCD_FillRectangle>:

void Manual_LCD_FillRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	4604      	mov	r4, r0
 8002164:	4608      	mov	r0, r1
 8002166:	4611      	mov	r1, r2
 8002168:	461a      	mov	r2, r3
 800216a:	4623      	mov	r3, r4
 800216c:	80fb      	strh	r3, [r7, #6]
 800216e:	4603      	mov	r3, r0
 8002170:	80bb      	strh	r3, [r7, #4]
 8002172:	460b      	mov	r3, r1
 8002174:	807b      	strh	r3, [r7, #2]
 8002176:	4613      	mov	r3, r2
 8002178:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	2bef      	cmp	r3, #239	@ 0xef
 800217e:	d855      	bhi.n	800222c <Manual_LCD_FillRectangle+0xd0>
 8002180:	88bb      	ldrh	r3, [r7, #4]
 8002182:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002186:	d251      	bcs.n	800222c <Manual_LCD_FillRectangle+0xd0>
        return;
    if ((x + width) > LCD_WIDTH)
 8002188:	88fa      	ldrh	r2, [r7, #6]
 800218a:	887b      	ldrh	r3, [r7, #2]
 800218c:	4413      	add	r3, r2
 800218e:	2bf0      	cmp	r3, #240	@ 0xf0
 8002190:	dd03      	ble.n	800219a <Manual_LCD_FillRectangle+0x3e>
        width = LCD_WIDTH - x;
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8002198:	807b      	strh	r3, [r7, #2]
    if ((y + height) > LCD_HEIGHT)
 800219a:	88ba      	ldrh	r2, [r7, #4]
 800219c:	883b      	ldrh	r3, [r7, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80021a4:	dd03      	ble.n	80021ae <Manual_LCD_FillRectangle+0x52>
        height = LCD_HEIGHT - y;
 80021a6:	88bb      	ldrh	r3, [r7, #4]
 80021a8:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80021ac:	803b      	strh	r3, [r7, #0]

    LCD_Set_Address_Window(x, y, x + width - 1, y + height - 1);
 80021ae:	88fa      	ldrh	r2, [r7, #6]
 80021b0:	887b      	ldrh	r3, [r7, #2]
 80021b2:	4413      	add	r3, r2
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	3b01      	subs	r3, #1
 80021b8:	b29c      	uxth	r4, r3
 80021ba:	88ba      	ldrh	r2, [r7, #4]
 80021bc:	883b      	ldrh	r3, [r7, #0]
 80021be:	4413      	add	r3, r2
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	3b01      	subs	r3, #1
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	88b9      	ldrh	r1, [r7, #4]
 80021c8:	88f8      	ldrh	r0, [r7, #6]
 80021ca:	4622      	mov	r2, r4
 80021cc:	f7ff fcf8 	bl	8001bc0 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 80021d0:	2201      	movs	r2, #1
 80021d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021d6:	4817      	ldr	r0, [pc, #92]	@ (8002234 <Manual_LCD_FillRectangle+0xd8>)
 80021d8:	f002 ff78 	bl	80050cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 80021dc:	2200      	movs	r2, #0
 80021de:	2180      	movs	r1, #128	@ 0x80
 80021e0:	4814      	ldr	r0, [pc, #80]	@ (8002234 <Manual_LCD_FillRectangle+0xd8>)
 80021e2:	f002 ff73 	bl	80050cc <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 80021e6:	8c3b      	ldrh	r3, [r7, #32]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	723b      	strb	r3, [r7, #8]
 80021f0:	8c3b      	ldrh	r3, [r7, #32]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	e00a      	b.n	8002212 <Manual_LCD_FillRectangle+0xb6>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 80021fc:	f107 0108 	add.w	r1, r7, #8
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
 8002204:	2202      	movs	r2, #2
 8002206:	480c      	ldr	r0, [pc, #48]	@ (8002238 <Manual_LCD_FillRectangle+0xdc>)
 8002208:	f007 fac5 	bl	8009796 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3301      	adds	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	887b      	ldrh	r3, [r7, #2]
 8002214:	883a      	ldrh	r2, [r7, #0]
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	429a      	cmp	r2, r3
 800221e:	d3ed      	bcc.n	80021fc <Manual_LCD_FillRectangle+0xa0>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8002220:	2201      	movs	r2, #1
 8002222:	2180      	movs	r1, #128	@ 0x80
 8002224:	4803      	ldr	r0, [pc, #12]	@ (8002234 <Manual_LCD_FillRectangle+0xd8>)
 8002226:	f002 ff51 	bl	80050cc <HAL_GPIO_WritePin>
 800222a:	e000      	b.n	800222e <Manual_LCD_FillRectangle+0xd2>
        return;
 800222c:	bf00      	nop
}
 800222e:	3714      	adds	r7, #20
 8002230:	46bd      	mov	sp, r7
 8002232:	bd90      	pop	{r4, r7, pc}
 8002234:	40020400 	.word	0x40020400
 8002238:	20000688 	.word	0x20000688

0800223c <Manual_LCD_DrawChar>:
// A proper implementation would look up character data in a font table.
// Placeholder for font data - you need to define this
extern const unsigned char Font5x7[][5]; // Example: needs to be defined in font.c

void Manual_LCD_DrawChar(uint16_t x, uint16_t y, char c, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	b087      	sub	sp, #28
 8002240:	af02      	add	r7, sp, #8
 8002242:	4604      	mov	r4, r0
 8002244:	4608      	mov	r0, r1
 8002246:	4611      	mov	r1, r2
 8002248:	461a      	mov	r2, r3
 800224a:	4623      	mov	r3, r4
 800224c:	80fb      	strh	r3, [r7, #6]
 800224e:	4603      	mov	r3, r0
 8002250:	80bb      	strh	r3, [r7, #4]
 8002252:	460b      	mov	r3, r1
 8002254:	70fb      	strb	r3, [r7, #3]
 8002256:	4613      	mov	r3, r2
 8002258:	803b      	strh	r3, [r7, #0]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT || (x + 5 * size) > LCD_WIDTH || (y + 7 * size) > LCD_HEIGHT)
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	2bef      	cmp	r3, #239	@ 0xef
 800225e:	f200 80d1 	bhi.w	8002404 <Manual_LCD_DrawChar+0x1c8>
 8002262:	88bb      	ldrh	r3, [r7, #4]
 8002264:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002268:	f080 80cc 	bcs.w	8002404 <Manual_LCD_DrawChar+0x1c8>
 800226c:	88f9      	ldrh	r1, [r7, #6]
 800226e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	440b      	add	r3, r1
 800227a:	2bf0      	cmp	r3, #240	@ 0xf0
 800227c:	f300 80c2 	bgt.w	8002404 <Manual_LCD_DrawChar+0x1c8>
 8002280:	88b9      	ldrh	r1, [r7, #4]
 8002282:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002286:	4613      	mov	r3, r2
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	440b      	add	r3, r1
 800228e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002292:	f300 80b7 	bgt.w	8002404 <Manual_LCD_DrawChar+0x1c8>
    {
        return; // Character won't fit
    }

    if (c < ' ' || c > '~')
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	2b1f      	cmp	r3, #31
 800229a:	d902      	bls.n	80022a2 <Manual_LCD_DrawChar+0x66>
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	2b7e      	cmp	r3, #126	@ 0x7e
 80022a0:	d901      	bls.n	80022a6 <Manual_LCD_DrawChar+0x6a>
        c = '?'; // Handle non-printable characters
 80022a2:	233f      	movs	r3, #63	@ 0x3f
 80022a4:	70fb      	strb	r3, [r7, #3]

    for (uint8_t i = 0; i < 5; i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e088      	b.n	80023be <Manual_LCD_DrawChar+0x182>
    { // Width of char
        uint8_t line = Font5x7[c - ' '][i];
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	f1a3 0220 	sub.w	r2, r3, #32
 80022b2:	7bf9      	ldrb	r1, [r7, #15]
 80022b4:	4855      	ldr	r0, [pc, #340]	@ (800240c <Manual_LCD_DrawChar+0x1d0>)
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	4403      	add	r3, r0
 80022be:	440b      	add	r3, r1
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	737b      	strb	r3, [r7, #13]
 80022c8:	e073      	b.n	80023b2 <Manual_LCD_DrawChar+0x176>
        { // Height of char
            if (line & 0x01)
 80022ca:	7bbb      	ldrb	r3, [r7, #14]
 80022cc:	f003 0301 	and.w	r3, r3, #1
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d034      	beq.n	800233e <Manual_LCD_DrawChar+0x102>
            { // Check bit
                if (size == 1)
 80022d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d10e      	bne.n	80022fa <Manual_LCD_DrawChar+0xbe>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, charColor);
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	4413      	add	r3, r2
 80022e4:	b298      	uxth	r0, r3
 80022e6:	7b7b      	ldrb	r3, [r7, #13]
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	88bb      	ldrh	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	883a      	ldrh	r2, [r7, #0]
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7ff fe08 	bl	8001f08 <Manual_LCD_DrawPixel>
 80022f8:	e055      	b.n	80023a6 <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, charColor);
 80022fa:	7bfb      	ldrb	r3, [r7, #15]
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002302:	b29b      	uxth	r3, r3
 8002304:	fb12 f303 	smulbb	r3, r2, r3
 8002308:	b29a      	uxth	r2, r3
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	4413      	add	r3, r2
 800230e:	b298      	uxth	r0, r3
 8002310:	7b7b      	ldrb	r3, [r7, #13]
 8002312:	b29a      	uxth	r2, r3
 8002314:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002318:	b29b      	uxth	r3, r3
 800231a:	fb12 f303 	smulbb	r3, r2, r3
 800231e:	b29a      	uxth	r2, r3
 8002320:	88bb      	ldrh	r3, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	b299      	uxth	r1, r3
 8002326:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800232a:	b29a      	uxth	r2, r3
 800232c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002330:	b29c      	uxth	r4, r3
 8002332:	883b      	ldrh	r3, [r7, #0]
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	4623      	mov	r3, r4
 8002338:	f7ff ff10 	bl	800215c <Manual_LCD_FillRectangle>
 800233c:	e033      	b.n	80023a6 <Manual_LCD_DrawChar+0x16a>
                }
            }
            else
            {
                if (size == 1)
 800233e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002342:	2b01      	cmp	r3, #1
 8002344:	d10e      	bne.n	8002364 <Manual_LCD_DrawChar+0x128>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, bgColor);
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	b29a      	uxth	r2, r3
 800234a:	88fb      	ldrh	r3, [r7, #6]
 800234c:	4413      	add	r3, r2
 800234e:	b298      	uxth	r0, r3
 8002350:	7b7b      	ldrb	r3, [r7, #13]
 8002352:	b29a      	uxth	r2, r3
 8002354:	88bb      	ldrh	r3, [r7, #4]
 8002356:	4413      	add	r3, r2
 8002358:	b29b      	uxth	r3, r3
 800235a:	8c3a      	ldrh	r2, [r7, #32]
 800235c:	4619      	mov	r1, r3
 800235e:	f7ff fdd3 	bl	8001f08 <Manual_LCD_DrawPixel>
 8002362:	e020      	b.n	80023a6 <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, bgColor);
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	b29a      	uxth	r2, r3
 8002368:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800236c:	b29b      	uxth	r3, r3
 800236e:	fb12 f303 	smulbb	r3, r2, r3
 8002372:	b29a      	uxth	r2, r3
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	4413      	add	r3, r2
 8002378:	b298      	uxth	r0, r3
 800237a:	7b7b      	ldrb	r3, [r7, #13]
 800237c:	b29a      	uxth	r2, r3
 800237e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002382:	b29b      	uxth	r3, r3
 8002384:	fb12 f303 	smulbb	r3, r2, r3
 8002388:	b29a      	uxth	r2, r3
 800238a:	88bb      	ldrh	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	b299      	uxth	r1, r3
 8002390:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002394:	b29a      	uxth	r2, r3
 8002396:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800239a:	b29c      	uxth	r4, r3
 800239c:	8c3b      	ldrh	r3, [r7, #32]
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	4623      	mov	r3, r4
 80023a2:	f7ff fedb 	bl	800215c <Manual_LCD_FillRectangle>
                }
            }
            line >>= 1;
 80023a6:	7bbb      	ldrb	r3, [r7, #14]
 80023a8:	085b      	lsrs	r3, r3, #1
 80023aa:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 80023ac:	7b7b      	ldrb	r3, [r7, #13]
 80023ae:	3301      	adds	r3, #1
 80023b0:	737b      	strb	r3, [r7, #13]
 80023b2:	7b7b      	ldrb	r3, [r7, #13]
 80023b4:	2b06      	cmp	r3, #6
 80023b6:	d988      	bls.n	80022ca <Manual_LCD_DrawChar+0x8e>
    for (uint8_t i = 0; i < 5; i++)
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	3301      	adds	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	f67f af73 	bls.w	80022ac <Manual_LCD_DrawChar+0x70>
        }
    }
    // Draw a small gap for characters if size > 1 or if you want background fill for the gap
    if (size > 0)
 80023c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01b      	beq.n	8002406 <Manual_LCD_DrawChar+0x1ca>
    { // Fill the column after the character (for spacing)
        Manual_LCD_FillRectangle(x + 5 * size, y, size, 7 * size, bgColor);
 80023ce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	0092      	lsls	r2, r2, #2
 80023d8:	4413      	add	r3, r2
 80023da:	b29a      	uxth	r2, r3
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	4413      	add	r3, r2
 80023e0:	b298      	uxth	r0, r3
 80023e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	4619      	mov	r1, r3
 80023f0:	00c9      	lsls	r1, r1, #3
 80023f2:	1acb      	subs	r3, r1, r3
 80023f4:	b29c      	uxth	r4, r3
 80023f6:	88b9      	ldrh	r1, [r7, #4]
 80023f8:	8c3b      	ldrh	r3, [r7, #32]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	4623      	mov	r3, r4
 80023fe:	f7ff fead 	bl	800215c <Manual_LCD_FillRectangle>
 8002402:	e000      	b.n	8002406 <Manual_LCD_DrawChar+0x1ca>
        return; // Character won't fit
 8002404:	bf00      	nop
    }
}
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}
 800240c:	0800de6c 	.word	0x0800de6c

08002410 <Manual_LCD_DrawString>:

void Manual_LCD_DrawString(uint16_t x, uint16_t y, const char *str, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 8002410:	b590      	push	{r4, r7, lr}
 8002412:	b087      	sub	sp, #28
 8002414:	af02      	add	r7, sp, #8
 8002416:	60ba      	str	r2, [r7, #8]
 8002418:	461a      	mov	r2, r3
 800241a:	4603      	mov	r3, r0
 800241c:	81fb      	strh	r3, [r7, #14]
 800241e:	460b      	mov	r3, r1
 8002420:	81bb      	strh	r3, [r7, #12]
 8002422:	4613      	mov	r3, r2
 8002424:	80fb      	strh	r3, [r7, #6]
    while (*str)
 8002426:	e037      	b.n	8002498 <Manual_LCD_DrawString+0x88>
    {
        Manual_LCD_DrawChar(x, y, *str, charColor, bgColor, size);
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	781a      	ldrb	r2, [r3, #0]
 800242c:	88fc      	ldrh	r4, [r7, #6]
 800242e:	89b9      	ldrh	r1, [r7, #12]
 8002430:	89f8      	ldrh	r0, [r7, #14]
 8002432:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	8c3b      	ldrh	r3, [r7, #32]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	4623      	mov	r3, r4
 800243e:	f7ff fefd 	bl	800223c <Manual_LCD_DrawChar>
        x += 6 * size; // Advance X position (5 for char + 1 for spacing)
 8002442:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	0052      	lsls	r2, r2, #1
 800244c:	4413      	add	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	89fb      	ldrh	r3, [r7, #14]
 8002454:	4413      	add	r3, r2
 8002456:	81fb      	strh	r3, [r7, #14]
        if (x + 5 * size >= LCD_WIDTH)
 8002458:	89f9      	ldrh	r1, [r7, #14]
 800245a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	440b      	add	r3, r1
 8002466:	2bef      	cmp	r3, #239	@ 0xef
 8002468:	dd09      	ble.n	800247e <Manual_LCD_DrawString+0x6e>
        { // Simple wrap
            x = 0;
 800246a:	2300      	movs	r3, #0
 800246c:	81fb      	strh	r3, [r7, #14]
            y += 8 * size; // Advance Y position
 800246e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002472:	b29b      	uxth	r3, r3
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	b29a      	uxth	r2, r3
 8002478:	89bb      	ldrh	r3, [r7, #12]
 800247a:	4413      	add	r3, r2
 800247c:	81bb      	strh	r3, [r7, #12]
        }
        if (y + 7 * size >= LCD_HEIGHT)
 800247e:	89b9      	ldrh	r1, [r7, #12]
 8002480:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002484:	4613      	mov	r3, r2
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	440b      	add	r3, r1
 800248c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002490:	da07      	bge.n	80024a2 <Manual_LCD_DrawString+0x92>
            break; // Out of screen
        str++;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	3301      	adds	r3, #1
 8002496:	60bb      	str	r3, [r7, #8]
    while (*str)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1c3      	bne.n	8002428 <Manual_LCD_DrawString+0x18>
    }
}
 80024a0:	e000      	b.n	80024a4 <Manual_LCD_DrawString+0x94>
            break; // Out of screen
 80024a2:	bf00      	nop
}
 80024a4:	bf00      	nop
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd90      	pop	{r4, r7, pc}

080024ac <Manual_LCD_DrawLayout>:

void Manual_LCD_DrawLayout(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b09a      	sub	sp, #104	@ 0x68
 80024b0:	af02      	add	r7, sp, #8
    // Clear screen with blue background
    Manual_LCD_Clear(COLOR_BLUE);
 80024b2:	201f      	movs	r0, #31
 80024b4:	f7ff fcea 	bl	8001e8c <Manual_LCD_Clear>

    uint16_t text_color = COLOR_WHITE;
 80024b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024bc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint16_t box_fill_color = COLOR_BLACK;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    uint16_t box_border_color = COLOR_WHITE;
 80024c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024ca:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    uint8_t font_size = 1;
 80024ce:	2301      	movs	r3, #1
 80024d0:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
    uint8_t char_height = 7; // For 5x7 font at size 1
 80024d4:	2307      	movs	r3, #7
 80024d6:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
    // uint8_t char_width_with_spacing = 6; // For 5x7 font at size 1

    // 1. Top Info Box: "Nhom: [nhom 01]"
    const char *info_text = "Nhom: [nhom 01]";
 80024da:	4bb8      	ldr	r3, [pc, #736]	@ (80027bc <Manual_LCD_DrawLayout+0x310>)
 80024dc:	657b      	str	r3, [r7, #84]	@ 0x54
    uint16_t info_text_x = MARGIN + 5;
 80024de:	230f      	movs	r3, #15
 80024e0:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t info_text_y = INFO_BOX_Y + (INFO_BOX_H - char_height * font_size) / 2;
 80024e4:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80024e8:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	f1c3 031e 	rsb	r3, r3, #30
 80024f4:	0fda      	lsrs	r2, r3, #31
 80024f6:	4413      	add	r3, r2
 80024f8:	105b      	asrs	r3, r3, #1
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	330a      	adds	r3, #10
 80024fe:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

    Manual_LCD_FillRectangle(MARGIN, INFO_BOX_Y, INFO_BOX_W, INFO_BOX_H, box_fill_color);
 8002502:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	231e      	movs	r3, #30
 800250a:	2296      	movs	r2, #150	@ 0x96
 800250c:	210a      	movs	r1, #10
 800250e:	200a      	movs	r0, #10
 8002510:	f7ff fe24 	bl	800215c <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(MARGIN, INFO_BOX_Y, INFO_BOX_W, INFO_BOX_H, box_border_color);
 8002514:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002518:	9300      	str	r3, [sp, #0]
 800251a:	231e      	movs	r3, #30
 800251c:	2296      	movs	r2, #150	@ 0x96
 800251e:	210a      	movs	r1, #10
 8002520:	200a      	movs	r0, #10
 8002522:	f7ff fd9e 	bl	8002062 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(info_text_x, info_text_y, info_text, text_color, box_fill_color, font_size);
 8002526:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800252a:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 800252e:	f8b7 0052 	ldrh.w	r0, [r7, #82]	@ 0x52
 8002532:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	4613      	mov	r3, r2
 8002540:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002542:	f7ff ff65 	bl	8002410 <Manual_LCD_DrawString>

    // 2. Task Boxes Grid
    uint16_t start_y_tasks_row1 = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 8002546:	233c      	movs	r3, #60	@ 0x3c
 8002548:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint16_t text_task_x_padding = 10; // Left padding for text inside task boxes
 800254c:	230a      	movs	r3, #10
 800254e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    uint16_t text_task_y_offset = (TASK_BOX_H - char_height * font_size) / 2;
 8002552:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002556:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 800255a:	fb02 f303 	mul.w	r3, r2, r3
 800255e:	f1c3 0346 	rsb	r3, r3, #70	@ 0x46
 8002562:	0fda      	lsrs	r2, r3, #31
 8002564:	4413      	add	r3, r2
 8002566:	105b      	asrs	r3, r3, #1
 8002568:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

    // Task 02-1 (Top-Left)
    uint16_t task1_x = MARGIN;
 800256c:	230a      	movs	r3, #10
 800256e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    uint16_t task1_y = start_y_tasks_row1;
 8002572:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002576:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    const char *task1_text = "Task 02-1";
 800257a:	4b91      	ldr	r3, [pc, #580]	@ (80027c0 <Manual_LCD_DrawLayout+0x314>)
 800257c:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t text_task1_x = task1_x + text_task_x_padding;
 800257e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002582:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002586:	4413      	add	r3, r2
 8002588:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint16_t text_task1_y = task1_y + text_task_y_offset;
 800258a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800258e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002592:	4413      	add	r3, r2
 8002594:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    Manual_LCD_FillRectangle(task1_x, task1_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 8002596:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800259a:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 800259e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	2346      	movs	r3, #70	@ 0x46
 80025a6:	2269      	movs	r2, #105	@ 0x69
 80025a8:	f7ff fdd8 	bl	800215c <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task1_x, task1_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 80025ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80025b0:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 80025b4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	2346      	movs	r3, #70	@ 0x46
 80025bc:	2269      	movs	r2, #105	@ 0x69
 80025be:	f7ff fd50 	bl	8002062 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task1_x, text_task1_y, task1_text, text_color, box_fill_color, font_size);
 80025c2:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80025c6:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 80025c8:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 80025ca:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80025ce:	9301      	str	r3, [sp, #4]
 80025d0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	4613      	mov	r3, r2
 80025d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025da:	f7ff ff19 	bl	8002410 <Manual_LCD_DrawString>

    // Task 02-2 (Top-Right)
    uint16_t task2_x = task1_x + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 80025de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80025e2:	3373      	adds	r3, #115	@ 0x73
 80025e4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    uint16_t task2_y = start_y_tasks_row1;
 80025e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80025ea:	873b      	strh	r3, [r7, #56]	@ 0x38
    const char *task2_text = "Task 02-2";
 80025ec:	4b75      	ldr	r3, [pc, #468]	@ (80027c4 <Manual_LCD_DrawLayout+0x318>)
 80025ee:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t text_task2_x = task2_x + text_task_x_padding;
 80025f0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80025f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80025f6:	4413      	add	r3, r2
 80025f8:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t text_task2_y = task2_y + text_task_y_offset;
 80025fa:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80025fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002600:	4413      	add	r3, r2
 8002602:	863b      	strh	r3, [r7, #48]	@ 0x30
    Manual_LCD_FillRectangle(task2_x, task2_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 8002604:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002606:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 8002608:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	2346      	movs	r3, #70	@ 0x46
 8002610:	2269      	movs	r2, #105	@ 0x69
 8002612:	f7ff fda3 	bl	800215c <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task2_x, task2_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 8002616:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002618:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 800261a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2346      	movs	r3, #70	@ 0x46
 8002622:	2269      	movs	r2, #105	@ 0x69
 8002624:	f7ff fd1d 	bl	8002062 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task2_x, text_task2_y, task2_text, text_color, box_fill_color, font_size);
 8002628:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800262c:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 800262e:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 8002630:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	4613      	mov	r3, r2
 800263e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002640:	f7ff fee6 	bl	8002410 <Manual_LCD_DrawString>

    // Second row of task boxes
    uint16_t start_y_tasks_row2 = start_y_tasks_row1 + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8002644:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002648:	3350      	adds	r3, #80	@ 0x50
 800264a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Task 02-3 (Bottom-Left)
    uint16_t task3_x = MARGIN;
 800264c:	230a      	movs	r3, #10
 800264e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t task3_y = start_y_tasks_row2;
 8002650:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002652:	857b      	strh	r3, [r7, #42]	@ 0x2a
    const char *task3_text = "Task 02-3";
 8002654:	4b5c      	ldr	r3, [pc, #368]	@ (80027c8 <Manual_LCD_DrawLayout+0x31c>)
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t text_task3_x = task3_x + text_task_x_padding;
 8002658:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800265a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800265e:	4413      	add	r3, r2
 8002660:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t text_task3_y = task3_y + text_task_y_offset;
 8002662:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002664:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002668:	4413      	add	r3, r2
 800266a:	843b      	strh	r3, [r7, #32]
    Manual_LCD_FillRectangle(task3_x, task3_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 800266c:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800266e:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 8002670:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2346      	movs	r3, #70	@ 0x46
 8002678:	2269      	movs	r2, #105	@ 0x69
 800267a:	f7ff fd6f 	bl	800215c <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task3_x, task3_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 800267e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8002680:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 8002682:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	2346      	movs	r3, #70	@ 0x46
 800268a:	2269      	movs	r2, #105	@ 0x69
 800268c:	f7ff fce9 	bl	8002062 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task3_x, text_task3_y, task3_text, text_color, box_fill_color, font_size);
 8002690:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002694:	8c39      	ldrh	r1, [r7, #32]
 8002696:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8002698:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	4613      	mov	r3, r2
 80026a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a8:	f7ff feb2 	bl	8002410 <Manual_LCD_DrawString>

    // Task 02-4 (Bottom-Right)
    uint16_t task4_x = task1_x + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 80026ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80026b0:	3373      	adds	r3, #115	@ 0x73
 80026b2:	83fb      	strh	r3, [r7, #30]
    uint16_t task4_y = start_y_tasks_row2;
 80026b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80026b6:	83bb      	strh	r3, [r7, #28]
    const char *task4_text = "Task 02-4";
 80026b8:	4b44      	ldr	r3, [pc, #272]	@ (80027cc <Manual_LCD_DrawLayout+0x320>)
 80026ba:	61bb      	str	r3, [r7, #24]
    uint16_t text_task4_x = task4_x + text_task_x_padding;
 80026bc:	8bfa      	ldrh	r2, [r7, #30]
 80026be:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80026c2:	4413      	add	r3, r2
 80026c4:	82fb      	strh	r3, [r7, #22]
    uint16_t text_task4_y = task4_y + text_task_y_offset;
 80026c6:	8bba      	ldrh	r2, [r7, #28]
 80026c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026cc:	4413      	add	r3, r2
 80026ce:	82bb      	strh	r3, [r7, #20]
    Manual_LCD_FillRectangle(task4_x, task4_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 80026d0:	8bb9      	ldrh	r1, [r7, #28]
 80026d2:	8bf8      	ldrh	r0, [r7, #30]
 80026d4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2346      	movs	r3, #70	@ 0x46
 80026dc:	2269      	movs	r2, #105	@ 0x69
 80026de:	f7ff fd3d 	bl	800215c <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task4_x, task4_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 80026e2:	8bb9      	ldrh	r1, [r7, #28]
 80026e4:	8bf8      	ldrh	r0, [r7, #30]
 80026e6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2346      	movs	r3, #70	@ 0x46
 80026ee:	2269      	movs	r2, #105	@ 0x69
 80026f0:	f7ff fcb7 	bl	8002062 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task4_x, text_task4_y, task4_text, text_color, box_fill_color, font_size);
 80026f4:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80026f8:	8ab9      	ldrh	r1, [r7, #20]
 80026fa:	8af8      	ldrh	r0, [r7, #22]
 80026fc:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002700:	9301      	str	r3, [sp, #4]
 8002702:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	4613      	mov	r3, r2
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	f7ff fe80 	bl	8002410 <Manual_LCD_DrawString>

    // 3. Back Button
    const char *back_button_text = "<<Back";
 8002710:	4b2f      	ldr	r3, [pc, #188]	@ (80027d0 <Manual_LCD_DrawLayout+0x324>)
 8002712:	613b      	str	r3, [r7, #16]
    uint16_t back_button_text_len = strlen(back_button_text);
 8002714:	6938      	ldr	r0, [r7, #16]
 8002716:	f7fd fd65 	bl	80001e4 <strlen>
 800271a:	4603      	mov	r3, r0
 800271c:	81fb      	strh	r3, [r7, #14]
    uint16_t back_button_text_pixel_width = back_button_text_len * 6 * font_size; // 6 is char width with spacing for 5x7 font
 800271e:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002722:	b29b      	uxth	r3, r3
 8002724:	89fa      	ldrh	r2, [r7, #14]
 8002726:	fb12 f303 	smulbb	r3, r2, r3
 800272a:	b29b      	uxth	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	0052      	lsls	r2, r2, #1
 8002730:	4413      	add	r3, r2
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	81bb      	strh	r3, [r7, #12]

    uint16_t back_button_y = start_y_tasks_row2 + TASK_BOX_H + TASK_TO_BACK_BUTTON_SPACING;
 8002736:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002738:	335a      	adds	r3, #90	@ 0x5a
 800273a:	817b      	strh	r3, [r7, #10]
    uint16_t back_button_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 800273c:	237d      	movs	r3, #125	@ 0x7d
 800273e:	813b      	strh	r3, [r7, #8]
    uint16_t text_button_x = back_button_x + (BACK_BUTTON_W - back_button_text_pixel_width) / 2;
 8002740:	89bb      	ldrh	r3, [r7, #12]
 8002742:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8002746:	0fda      	lsrs	r2, r3, #31
 8002748:	4413      	add	r3, r2
 800274a:	105b      	asrs	r3, r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	893b      	ldrh	r3, [r7, #8]
 8002750:	4413      	add	r3, r2
 8002752:	80fb      	strh	r3, [r7, #6]
    uint16_t text_button_y = back_button_y + (BACK_BUTTON_H - char_height * font_size) / 2;
 8002754:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002758:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 800275c:	fb02 f303 	mul.w	r3, r2, r3
 8002760:	f1c3 032d 	rsb	r3, r3, #45	@ 0x2d
 8002764:	0fda      	lsrs	r2, r3, #31
 8002766:	4413      	add	r3, r2
 8002768:	105b      	asrs	r3, r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	897b      	ldrh	r3, [r7, #10]
 800276e:	4413      	add	r3, r2
 8002770:	80bb      	strh	r3, [r7, #4]

    Manual_LCD_FillRectangle(back_button_x, back_button_y, BACK_BUTTON_W, BACK_BUTTON_H, box_fill_color);
 8002772:	8979      	ldrh	r1, [r7, #10]
 8002774:	8938      	ldrh	r0, [r7, #8]
 8002776:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	232d      	movs	r3, #45	@ 0x2d
 800277e:	225a      	movs	r2, #90	@ 0x5a
 8002780:	f7ff fcec 	bl	800215c <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(back_button_x, back_button_y, BACK_BUTTON_W, BACK_BUTTON_H, box_border_color);
 8002784:	8979      	ldrh	r1, [r7, #10]
 8002786:	8938      	ldrh	r0, [r7, #8]
 8002788:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	232d      	movs	r3, #45	@ 0x2d
 8002790:	225a      	movs	r2, #90	@ 0x5a
 8002792:	f7ff fc66 	bl	8002062 <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_button_x, text_button_y, back_button_text, text_color, box_fill_color, font_size);
 8002796:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800279a:	88b9      	ldrh	r1, [r7, #4]
 800279c:	88f8      	ldrh	r0, [r7, #6]
 800279e:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	4613      	mov	r3, r2
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	f7ff fe2f 	bl	8002410 <Manual_LCD_DrawString>
}
 80027b2:	bf00      	nop
 80027b4:	3760      	adds	r7, #96	@ 0x60
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	0800ddc0 	.word	0x0800ddc0
 80027c0:	0800ddd0 	.word	0x0800ddd0
 80027c4:	0800dddc 	.word	0x0800dddc
 80027c8:	0800dde8 	.word	0x0800dde8
 80027cc:	0800ddf4 	.word	0x0800ddf4
 80027d0:	0800de00 	.word	0x0800de00

080027d4 <Manual_LCD_UpdateInfoText>:

// New function to update the info text
void Manual_LCD_UpdateInfoText(const char *new_text)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af02      	add	r7, sp, #8
 80027da:	6078      	str	r0, [r7, #4]
    uint8_t font_size = 1;
 80027dc:	2301      	movs	r3, #1
 80027de:	75fb      	strb	r3, [r7, #23]
    uint8_t char_height = 7; // For 5x7 font at size 1
 80027e0:	2307      	movs	r3, #7
 80027e2:	75bb      	strb	r3, [r7, #22]

    uint16_t text_color = COLOR_WHITE;     // Original text color from DrawLayout
 80027e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027e8:	82bb      	strh	r3, [r7, #20]
    uint16_t box_fill_color = COLOR_BLACK; // Original box fill color from DrawLayout
 80027ea:	2300      	movs	r3, #0
 80027ec:	827b      	strh	r3, [r7, #18]

    uint16_t info_text_x = MARGIN + 5;
 80027ee:	230f      	movs	r3, #15
 80027f0:	823b      	strh	r3, [r7, #16]
    uint16_t info_text_y = INFO_BOX_Y + (INFO_BOX_H - char_height * font_size) / 2;
 80027f2:	7dbb      	ldrb	r3, [r7, #22]
 80027f4:	7dfa      	ldrb	r2, [r7, #23]
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	f1c3 031e 	rsb	r3, r3, #30
 80027fe:	0fda      	lsrs	r2, r3, #31
 8002800:	4413      	add	r3, r2
 8002802:	105b      	asrs	r3, r3, #1
 8002804:	b29b      	uxth	r3, r3
 8002806:	330a      	adds	r3, #10
 8002808:	81fb      	strh	r3, [r7, #14]

    // Clear the inner part of the info box where text resides
    // The border is 1px, so we fill from x+1, y+1 with width-2, height-2
    Manual_LCD_FillRectangle(MARGIN + 1, INFO_BOX_Y + 1, INFO_BOX_W - 2, INFO_BOX_H - 2, box_fill_color);
 800280a:	8a7b      	ldrh	r3, [r7, #18]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	231c      	movs	r3, #28
 8002810:	2294      	movs	r2, #148	@ 0x94
 8002812:	210b      	movs	r1, #11
 8002814:	200b      	movs	r0, #11
 8002816:	f7ff fca1 	bl	800215c <Manual_LCD_FillRectangle>

    // Draw the new string with original text color and original box fill as background
    Manual_LCD_DrawString(info_text_x, info_text_y, new_text, text_color, box_fill_color, font_size);
 800281a:	8aba      	ldrh	r2, [r7, #20]
 800281c:	89f9      	ldrh	r1, [r7, #14]
 800281e:	8a38      	ldrh	r0, [r7, #16]
 8002820:	7dfb      	ldrb	r3, [r7, #23]
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	8a7b      	ldrh	r3, [r7, #18]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	f7ff fdf0 	bl	8002410 <Manual_LCD_DrawString>
}
 8002830:	bf00      	nop
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <Manual_LCD_RefillTaskBox>:

// New function to refill a task box and redraw its text
void Manual_LCD_RefillTaskBox(const char *task_name, uint16_t new_fill_color)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	@ 0x28
 800283c:	af02      	add	r7, sp, #8
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	807b      	strh	r3, [r7, #2]
    uint16_t original_text_color = COLOR_WHITE;
 8002844:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002848:	82fb      	strh	r3, [r7, #22]
    uint16_t original_box_border_color = COLOR_WHITE;
 800284a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800284e:	82bb      	strh	r3, [r7, #20]
    uint8_t font_size = 1;
 8002850:	2301      	movs	r3, #1
 8002852:	74fb      	strb	r3, [r7, #19]
    uint8_t char_height = 7; // For 5x7 font at size 1
 8002854:	2307      	movs	r3, #7
 8002856:	74bb      	strb	r3, [r7, #18]

    uint16_t text_task_x_padding = 10;
 8002858:	230a      	movs	r3, #10
 800285a:	823b      	strh	r3, [r7, #16]
    uint16_t text_task_y_offset = (TASK_BOX_H - char_height * font_size) / 2;
 800285c:	7cbb      	ldrb	r3, [r7, #18]
 800285e:	7cfa      	ldrb	r2, [r7, #19]
 8002860:	fb02 f303 	mul.w	r3, r2, r3
 8002864:	f1c3 0346 	rsb	r3, r3, #70	@ 0x46
 8002868:	0fda      	lsrs	r2, r3, #31
 800286a:	4413      	add	r3, r2
 800286c:	105b      	asrs	r3, r3, #1
 800286e:	81fb      	strh	r3, [r7, #14]

    uint16_t current_task_x = 0, current_task_y = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	83fb      	strh	r3, [r7, #30]
 8002874:	2300      	movs	r3, #0
 8002876:	83bb      	strh	r3, [r7, #28]
    uint16_t text_draw_x = 0, text_draw_y = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	81bb      	strh	r3, [r7, #12]
 800287c:	2300      	movs	r3, #0
 800287e:	817b      	strh	r3, [r7, #10]
    const char *original_task_text_content = "";
 8002880:	4b30      	ldr	r3, [pc, #192]	@ (8002944 <Manual_LCD_RefillTaskBox+0x10c>)
 8002882:	61bb      	str	r3, [r7, #24]

    if (strcmp(task_name, "Task 02-1") == 0)
 8002884:	4930      	ldr	r1, [pc, #192]	@ (8002948 <Manual_LCD_RefillTaskBox+0x110>)
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fd fca2 	bl	80001d0 <strcmp>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d106      	bne.n	80028a0 <Manual_LCD_RefillTaskBox+0x68>
    {
        current_task_x = MARGIN;
 8002892:	230a      	movs	r3, #10
 8002894:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 8002896:	233c      	movs	r3, #60	@ 0x3c
 8002898:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-1";
 800289a:	4b2b      	ldr	r3, [pc, #172]	@ (8002948 <Manual_LCD_RefillTaskBox+0x110>)
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	e028      	b.n	80028f2 <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-2") == 0)
 80028a0:	492a      	ldr	r1, [pc, #168]	@ (800294c <Manual_LCD_RefillTaskBox+0x114>)
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fd fc94 	bl	80001d0 <strcmp>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <Manual_LCD_RefillTaskBox+0x84>
    {
        current_task_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 80028ae:	237d      	movs	r3, #125	@ 0x7d
 80028b0:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 80028b2:	233c      	movs	r3, #60	@ 0x3c
 80028b4:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-2";
 80028b6:	4b25      	ldr	r3, [pc, #148]	@ (800294c <Manual_LCD_RefillTaskBox+0x114>)
 80028b8:	61bb      	str	r3, [r7, #24]
 80028ba:	e01a      	b.n	80028f2 <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-3") == 0)
 80028bc:	4924      	ldr	r1, [pc, #144]	@ (8002950 <Manual_LCD_RefillTaskBox+0x118>)
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fd fc86 	bl	80001d0 <strcmp>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <Manual_LCD_RefillTaskBox+0xa0>
    {
        current_task_x = MARGIN;
 80028ca:	230a      	movs	r3, #10
 80028cc:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 80028ce:	238c      	movs	r3, #140	@ 0x8c
 80028d0:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-3";
 80028d2:	4b1f      	ldr	r3, [pc, #124]	@ (8002950 <Manual_LCD_RefillTaskBox+0x118>)
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	e00c      	b.n	80028f2 <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-4") == 0)
 80028d8:	491e      	ldr	r1, [pc, #120]	@ (8002954 <Manual_LCD_RefillTaskBox+0x11c>)
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fd fc78 	bl	80001d0 <strcmp>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d129      	bne.n	800293a <Manual_LCD_RefillTaskBox+0x102>
    {
        current_task_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 80028e6:	237d      	movs	r3, #125	@ 0x7d
 80028e8:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 80028ea:	238c      	movs	r3, #140	@ 0x8c
 80028ec:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-4";
 80028ee:	4b19      	ldr	r3, [pc, #100]	@ (8002954 <Manual_LCD_RefillTaskBox+0x11c>)
 80028f0:	61bb      	str	r3, [r7, #24]
    else
    {
        return; // Unknown task name, do nothing
    }

    text_draw_x = current_task_x + text_task_x_padding;
 80028f2:	8bfa      	ldrh	r2, [r7, #30]
 80028f4:	8a3b      	ldrh	r3, [r7, #16]
 80028f6:	4413      	add	r3, r2
 80028f8:	81bb      	strh	r3, [r7, #12]
    text_draw_y = current_task_y + text_task_y_offset;
 80028fa:	8bba      	ldrh	r2, [r7, #28]
 80028fc:	89fb      	ldrh	r3, [r7, #14]
 80028fe:	4413      	add	r3, r2
 8002900:	817b      	strh	r3, [r7, #10]

    // 1. Refill the entire task box with the new color
    Manual_LCD_FillRectangle(current_task_x, current_task_y, TASK_BOX_W_CALC, TASK_BOX_H, new_fill_color);
 8002902:	8bb9      	ldrh	r1, [r7, #28]
 8002904:	8bf8      	ldrh	r0, [r7, #30]
 8002906:	887b      	ldrh	r3, [r7, #2]
 8002908:	9300      	str	r3, [sp, #0]
 800290a:	2346      	movs	r3, #70	@ 0x46
 800290c:	2269      	movs	r2, #105	@ 0x69
 800290e:	f7ff fc25 	bl	800215c <Manual_LCD_FillRectangle>

    // 2. Redraw the border
    Manual_LCD_DrawRectangle(current_task_x, current_task_y, TASK_BOX_W_CALC, TASK_BOX_H, original_box_border_color);
 8002912:	8bb9      	ldrh	r1, [r7, #28]
 8002914:	8bf8      	ldrh	r0, [r7, #30]
 8002916:	8abb      	ldrh	r3, [r7, #20]
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2346      	movs	r3, #70	@ 0x46
 800291c:	2269      	movs	r2, #105	@ 0x69
 800291e:	f7ff fba0 	bl	8002062 <Manual_LCD_DrawRectangle>

    // 3. Redraw the original text using the original text color and the new_fill_color as background
    Manual_LCD_DrawString(text_draw_x, text_draw_y, original_task_text_content, original_text_color, new_fill_color, font_size);
 8002922:	8afa      	ldrh	r2, [r7, #22]
 8002924:	8979      	ldrh	r1, [r7, #10]
 8002926:	89b8      	ldrh	r0, [r7, #12]
 8002928:	7cfb      	ldrb	r3, [r7, #19]
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	887b      	ldrh	r3, [r7, #2]
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	4613      	mov	r3, r2
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	f7ff fd6c 	bl	8002410 <Manual_LCD_DrawString>
 8002938:	e000      	b.n	800293c <Manual_LCD_RefillTaskBox+0x104>
        return; // Unknown task name, do nothing
 800293a:	bf00      	nop
 800293c:	3720      	adds	r7, #32
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	0800de08 	.word	0x0800de08
 8002948:	0800ddd0 	.word	0x0800ddd0
 800294c:	0800dddc 	.word	0x0800dddc
 8002950:	0800dde8 	.word	0x0800dde8
 8002954:	0800ddf4 	.word	0x0800ddf4

08002958 <TP_Read_ADC_Raw>:
Coordinate CalScreenSample[3]; // Raw ADC values from touch panel for calibration points

// Low-level SPI communication for touch
// Sends 1 byte command, receives 2 bytes data (12-bit ADC value)
static uint16_t TP_Read_ADC_Raw(uint8_t cmd)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_byte = cmd;
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buffer[2] = {0, 0};
 8002966:	2300      	movs	r3, #0
 8002968:	813b      	strh	r3, [r7, #8]
    uint16_t adc_val = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	81fb      	strh	r3, [r7, #14]

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET); // Select touch controller
 800296e:	2200      	movs	r2, #0
 8002970:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002974:	4815      	ldr	r0, [pc, #84]	@ (80029cc <TP_Read_ADC_Raw+0x74>)
 8002976:	f002 fba9 	bl	80050cc <HAL_GPIO_WritePin>

    // Send command byte
    HAL_SPI_Transmit(g_hspi_touch_ptr, &tx_byte, 1, HAL_MAX_DELAY);
 800297a:	4b15      	ldr	r3, [pc, #84]	@ (80029d0 <TP_Read_ADC_Raw+0x78>)
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	f107 010d 	add.w	r1, r7, #13
 8002982:	f04f 33ff 	mov.w	r3, #4294967295
 8002986:	2201      	movs	r2, #1
 8002988:	f006 ff05 	bl	8009796 <HAL_SPI_Transmit>

    // Receive 2 data bytes. Some controllers might need dummy clocks before data is valid.
    // For XPT2046/ADS7846, data usually follows directly.
    HAL_SPI_Receive(g_hspi_touch_ptr, rx_buffer, 2, HAL_MAX_DELAY);
 800298c:	4b10      	ldr	r3, [pc, #64]	@ (80029d0 <TP_Read_ADC_Raw+0x78>)
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	f107 0108 	add.w	r1, r7, #8
 8002994:	f04f 33ff 	mov.w	r3, #4294967295
 8002998:	2202      	movs	r2, #2
 800299a:	f007 f840 	bl	8009a1e <HAL_SPI_Receive>

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect
 800299e:	2201      	movs	r2, #1
 80029a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029a4:	4809      	ldr	r0, [pc, #36]	@ (80029cc <TP_Read_ADC_Raw+0x74>)
 80029a6:	f002 fb91 	bl	80050cc <HAL_GPIO_WritePin>

    adc_val = (rx_buffer[0] << 8) | rx_buffer[1];
 80029aa:	7a3b      	ldrb	r3, [r7, #8]
 80029ac:	b21b      	sxth	r3, r3
 80029ae:	021b      	lsls	r3, r3, #8
 80029b0:	b21a      	sxth	r2, r3
 80029b2:	7a7b      	ldrb	r3, [r7, #9]
 80029b4:	b21b      	sxth	r3, r3
 80029b6:	4313      	orrs	r3, r2
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	81fb      	strh	r3, [r7, #14]
    adc_val >>= 3; // Keep the most significant 12 bits (XPT2046 specific, D0 is at bit 3 of second byte)
 80029bc:	89fb      	ldrh	r3, [r7, #14]
 80029be:	08db      	lsrs	r3, r3, #3
 80029c0:	81fb      	strh	r3, [r7, #14]
                   // Original code used >>4, which might be for a different ADC alignment or resolution.
                   // If raw values are consistently too low or high, this shift might need adjustment.
    return adc_val;
 80029c2:	89fb      	ldrh	r3, [r7, #14]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40020000 	.word	0x40020000
 80029d0:	20000080 	.word	0x20000080

080029d4 <Manual_Touch_Init>:

void Manual_Touch_Init(SPI_HandleTypeDef *hspi_touch)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
    g_hspi_touch_ptr = hspi_touch;
 80029dc:	4a06      	ldr	r2, [pc, #24]	@ (80029f8 <Manual_Touch_Init+0x24>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6013      	str	r3, [r2, #0]
    // GPIOs for TP_CS (PA9) and TP_IRQ (PB4) are assumed to be initialized
    // in main.c's MX_GPIO_Init() as Output PP and Input Pull-up respectively.
    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect touch controller initially
 80029e2:	2201      	movs	r2, #1
 80029e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029e8:	4804      	ldr	r0, [pc, #16]	@ (80029fc <Manual_Touch_Init+0x28>)
 80029ea:	f002 fb6f 	bl	80050cc <HAL_GPIO_WritePin>
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	20000080 	.word	0x20000080
 80029fc:	40020000 	.word	0x40020000

08002a00 <Manual_Touch_GetRawPoint>:
    // TP_IRQ_Pin is low when pressed (assuming pull-up resistor is enabled)
    return (HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == GPIO_PIN_RESET);
}

uint8_t Manual_Touch_GetRawPoint(Coordinate *rawPoint)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
    // Đọc một mẫu đơn giản để debug
    rawPoint->x = TP_Read_ADC_Raw(TP_CMD_READ_X);
 8002a08:	20d0      	movs	r0, #208	@ 0xd0
 8002a0a:	f7ff ffa5 	bl	8002958 <TP_Read_ADC_Raw>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	461a      	mov	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	801a      	strh	r2, [r3, #0]
    rawPoint->y = TP_Read_ADC_Raw(TP_CMD_READ_Y);
 8002a16:	2090      	movs	r0, #144	@ 0x90
 8002a18:	f7ff ff9e 	bl	8002958 <TP_Read_ADC_Raw>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461a      	mov	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	805a      	strh	r2, [r3, #2]

    // Trả về thành công mà không kiểm tra
    return 1;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <Manual_Touch_ApplyCalibration>:
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    return 1; // Success
}

uint8_t Manual_Touch_ApplyCalibration(Coordinate *displayPoint, const Coordinate *screenPoint)
{
 8002a30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
    if (touchMatrix.Divider == 0)
 8002a3c:	4b64      	ldr	r3, [pc, #400]	@ (8002bd0 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002a3e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	f7fe f84d 	bl	8000ae8 <__aeabi_dcmpeq>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d023      	beq.n	8002a9c <Manual_Touch_ApplyCalibration+0x6c>
    { // Not calibrated or calibration failed
        // Fallback: direct scaling (highly inaccurate without calibration)
        displayPoint->x = (uint16_t)(((long)screenPoint->x * LCD_WIDTH) / 4095);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	011b      	lsls	r3, r3, #4
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	4a5c      	ldr	r2, [pc, #368]	@ (8002bd4 <Manual_Touch_ApplyCalibration+0x1a4>)
 8002a64:	fb82 1203 	smull	r1, r2, r2, r3
 8002a68:	441a      	add	r2, r3
 8002a6a:	12d2      	asrs	r2, r2, #11
 8002a6c:	17db      	asrs	r3, r3, #31
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	801a      	strh	r2, [r3, #0]
        displayPoint->y = (uint16_t)(((long)screenPoint->y * LCD_HEIGHT) / 4095);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	885b      	ldrh	r3, [r3, #2]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	019b      	lsls	r3, r3, #6
 8002a84:	4a53      	ldr	r2, [pc, #332]	@ (8002bd4 <Manual_Touch_ApplyCalibration+0x1a4>)
 8002a86:	fb82 1203 	smull	r1, r2, r2, r3
 8002a8a:	441a      	add	r2, r3
 8002a8c:	12d2      	asrs	r2, r2, #11
 8002a8e:	17db      	asrs	r3, r3, #31
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	805a      	strh	r2, [r3, #2]
        return 0; // Indicated that calibration matrix was not used
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e094      	b.n	8002bc6 <Manual_Touch_ApplyCalibration+0x196>
    }

    // Apply calibration matrix
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002a9c:	4b4c      	ldr	r3, [pc, #304]	@ (8002bd0 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002a9e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7fd fd4c 	bl	8000544 <__aeabi_i2d>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4620      	mov	r0, r4
 8002ab2:	4629      	mov	r1, r5
 8002ab4:	f7fd fdb0 	bl	8000618 <__aeabi_dmul>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4690      	mov	r8, r2
 8002abe:	4699      	mov	r9, r3
                                  (touchMatrix.Bn * screenPoint->y) +
 8002ac0:	4b43      	ldr	r3, [pc, #268]	@ (8002bd0 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002ac2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	885b      	ldrh	r3, [r3, #2]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fd3a 	bl	8000544 <__aeabi_i2d>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	4629      	mov	r1, r5
 8002ad8:	f7fd fd9e 	bl	8000618 <__aeabi_dmul>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002ae0:	4640      	mov	r0, r8
 8002ae2:	4649      	mov	r1, r9
 8002ae4:	f7fd fbe2 	bl	80002ac <__adddf3>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
                                  touchMatrix.Cn) /
 8002af0:	4b37      	ldr	r3, [pc, #220]	@ (8002bd0 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002af2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
                                  (touchMatrix.Bn * screenPoint->y) +
 8002af6:	f7fd fbd9 	bl	80002ac <__adddf3>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4610      	mov	r0, r2
 8002b00:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 8002b02:	4b33      	ldr	r3, [pc, #204]	@ (8002bd0 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b04:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Cn) /
 8002b08:	f7fd feb0 	bl	800086c <__aeabi_ddiv>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	f7fe f81a 	bl	8000b4c <__aeabi_d2uiz>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	801a      	strh	r2, [r3, #0]
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002b20:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd0 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b22:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fd0a 	bl	8000544 <__aeabi_i2d>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4620      	mov	r0, r4
 8002b36:	4629      	mov	r1, r5
 8002b38:	f7fd fd6e 	bl	8000618 <__aeabi_dmul>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4690      	mov	r8, r2
 8002b42:	4699      	mov	r9, r3
                                  (touchMatrix.En * screenPoint->y) +
 8002b44:	4b22      	ldr	r3, [pc, #136]	@ (8002bd0 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b46:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	885b      	ldrh	r3, [r3, #2]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fcf8 	bl	8000544 <__aeabi_i2d>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4620      	mov	r0, r4
 8002b5a:	4629      	mov	r1, r5
 8002b5c:	f7fd fd5c 	bl	8000618 <__aeabi_dmul>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002b64:	4640      	mov	r0, r8
 8002b66:	4649      	mov	r1, r9
 8002b68:	f7fd fba0 	bl	80002ac <__adddf3>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	460b      	mov	r3, r1
 8002b70:	4610      	mov	r0, r2
 8002b72:	4619      	mov	r1, r3
                                  touchMatrix.Fn) /
 8002b74:	4b16      	ldr	r3, [pc, #88]	@ (8002bd0 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b76:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
                                  (touchMatrix.En * screenPoint->y) +
 8002b7a:	f7fd fb97 	bl	80002ac <__adddf3>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4610      	mov	r0, r2
 8002b84:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 8002b86:	4b12      	ldr	r3, [pc, #72]	@ (8002bd0 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b88:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Fn) /
 8002b8c:	f7fd fe6e 	bl	800086c <__aeabi_ddiv>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002b94:	4610      	mov	r0, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	f7fd ffd8 	bl	8000b4c <__aeabi_d2uiz>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	805a      	strh	r2, [r3, #2]

    // Constrain to LCD boundaries
    if (displayPoint->x >= LCD_WIDTH)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	2bef      	cmp	r3, #239	@ 0xef
 8002baa:	d902      	bls.n	8002bb2 <Manual_Touch_ApplyCalibration+0x182>
        displayPoint->x = LCD_WIDTH - 1;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	22ef      	movs	r2, #239	@ 0xef
 8002bb0:	801a      	strh	r2, [r3, #0]
    if (displayPoint->y >= LCD_HEIGHT)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	885b      	ldrh	r3, [r3, #2]
 8002bb6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002bba:	d303      	bcc.n	8002bc4 <Manual_Touch_ApplyCalibration+0x194>
        displayPoint->y = LCD_HEIGHT - 1;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f240 123f 	movw	r2, #319	@ 0x13f
 8002bc2:	805a      	strh	r2, [r3, #2]
    // Note: long double might produce negative intermediate results if raw values are way off.
    // Casting to uint16_t will wrap. Consider clamping if signed intermediates are possible.
    // For typical touch values, this should be fine.

    return 1; // Calibration matrix used
 8002bc4:	2301      	movs	r3, #1
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bd0:	20000088 	.word	0x20000088
 8002bd4:	80080081 	.word	0x80080081

08002bd8 <SD_Init>:
/**
 * @brief  Khởi tạo SD Card và file system
 * @retval uint8_t: 1 nếu thành công, 0 nếu thất bại
 */
uint8_t SD_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
    FRESULT fresult;

    // Nếu đã khởi tạo rồi thì không khởi tạo lại
    if (sd_initialized)
 8002bde:	4b10      	ldr	r3, [pc, #64]	@ (8002c20 <SD_Init+0x48>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <SD_Init+0x12>
    {
        return 1;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e016      	b.n	8002c18 <SD_Init+0x40>
    }

    // Khởi tạo SD Card qua giao diện SDIO
    if (BSP_SD_Init() != MSD_OK)
 8002bea:	f008 f869 	bl	800acc0 <BSP_SD_Init>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <SD_Init+0x20>
    {
        return 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e00f      	b.n	8002c18 <SD_Init+0x40>
    }

    // Mount file system
    fresult = f_mount(&sdFatFs, "", 1);
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	490a      	ldr	r1, [pc, #40]	@ (8002c24 <SD_Init+0x4c>)
 8002bfc:	480a      	ldr	r0, [pc, #40]	@ (8002c28 <SD_Init+0x50>)
 8002bfe:	f009 ff4f 	bl	800caa0 <f_mount>
 8002c02:	4603      	mov	r3, r0
 8002c04:	71fb      	strb	r3, [r7, #7]
    if (fresult != FR_OK)
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <SD_Init+0x38>
    {
        return 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e003      	b.n	8002c18 <SD_Init+0x40>
    }

    sd_initialized = 1;
 8002c10:	4b03      	ldr	r3, [pc, #12]	@ (8002c20 <SD_Init+0x48>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
    return 1;
 8002c16:	2301      	movs	r3, #1
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	200002f0 	.word	0x200002f0
 8002c24:	0800de0c 	.word	0x0800de0c
 8002c28:	200000c0 	.word	0x200000c0

08002c2c <SD_ReadFile>:
 * @param  buffer: Buffer để lưu dữ liệu đọc được
 * @param  buffer_size: Kích thước của buffer
 * @retval int: Số byte đọc được, -1 nếu có lỗi
 */
int SD_ReadFile(const char *filename, char *buffer, uint32_t buffer_size)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002c38:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002c3c:	6018      	str	r0, [r3, #0]
 8002c3e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002c42:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002c46:	6019      	str	r1, [r3, #0]
 8002c48:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002c4c:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002c50:	601a      	str	r2, [r3, #0]
    FIL file;
    FRESULT fresult;
    UINT bytesRead = 0;
 8002c52:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002c56:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

    // Kiểm tra SD đã khởi tạo chưa
    if (!sd_initialized)
 8002c5e:	4b35      	ldr	r3, [pc, #212]	@ (8002d34 <SD_ReadFile+0x108>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d107      	bne.n	8002c76 <SD_ReadFile+0x4a>
    {
        if (!SD_Init())
 8002c66:	f7ff ffb7 	bl	8002bd8 <SD_Init>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d102      	bne.n	8002c76 <SD_ReadFile+0x4a>
        {
            return -1;
 8002c70:	f04f 33ff 	mov.w	r3, #4294967295
 8002c74:	e059      	b.n	8002d2a <SD_ReadFile+0xfe>
        }
    }

    // Mở file để đọc
    fresult = f_open(&file, filename, FA_READ);
 8002c76:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002c7a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002c7e:	f107 0018 	add.w	r0, r7, #24
 8002c82:	2201      	movs	r2, #1
 8002c84:	6819      	ldr	r1, [r3, #0]
 8002c86:	f009 ff51 	bl	800cb2c <f_open>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
    if (fresult != FR_OK)
 8002c90:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d002      	beq.n	8002c9e <SD_ReadFile+0x72>
    {
        return -1;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9c:	e045      	b.n	8002d2a <SD_ReadFile+0xfe>
    }

    // Xác định kích thước cần đọc
    UINT size_to_read = f_size(&file);
 8002c9e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002ca2:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002ca6:	68db      	ldr	r3, [r3, #12]
 8002ca8:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    if (size_to_read >= buffer_size)
 8002cac:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002cb0:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002cb4:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d307      	bcc.n	8002cce <SD_ReadFile+0xa2>
    {
        size_to_read = buffer_size - 1;
 8002cbe:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002cc2:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    }

    // Đọc dữ liệu từ file
    fresult = f_read(&file, buffer, size_to_read, &bytesRead);
 8002cce:	f107 0314 	add.w	r3, r7, #20
 8002cd2:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8002cd6:	f5a2 7112 	sub.w	r1, r2, #584	@ 0x248
 8002cda:	f107 0018 	add.w	r0, r7, #24
 8002cde:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8002ce2:	6809      	ldr	r1, [r1, #0]
 8002ce4:	f00a f8dc 	bl	800cea0 <f_read>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b

    // Đóng file
    f_close(&file);
 8002cee:	f107 0318 	add.w	r3, r7, #24
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f00a fa91 	bl	800d21a <f_close>

    if (fresult != FR_OK)
 8002cf8:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <SD_ReadFile+0xda>
    {
        return -1;
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295
 8002d04:	e011      	b.n	8002d2a <SD_ReadFile+0xfe>
    }

    // Thêm null terminator nếu đọc chuỗi
    buffer[bytesRead] = '\0';
 8002d06:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002d0a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8002d14:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 8002d18:	6812      	ldr	r2, [r2, #0]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]

    return bytesRead;
 8002d20:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002d24:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002d28:	681b      	ldr	r3, [r3, #0]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	200002f0 	.word	0x200002f0

08002d38 <SD_ReadTeamFile>:
 * @param  buffer: Buffer để lưu dữ liệu đọc được
 * @param  buffer_size: Kích thước buffer
 * @retval int: Số byte đọc được, -1 nếu có lỗi
 */
int SD_ReadTeamFile(char *buffer, uint32_t buffer_size)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
    return SD_ReadFile(FILE_NAME, buffer, buffer_size);
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4804      	ldr	r0, [pc, #16]	@ (8002d58 <SD_ReadTeamFile+0x20>)
 8002d48:	f7ff ff70 	bl	8002c2c <SD_ReadFile>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	0800de1c 	.word	0x0800de1c

08002d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	607b      	str	r3, [r7, #4]
 8002d66:	4b10      	ldr	r3, [pc, #64]	@ (8002da8 <HAL_MspInit+0x4c>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8002da8 <HAL_MspInit+0x4c>)
 8002d6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d72:	4b0d      	ldr	r3, [pc, #52]	@ (8002da8 <HAL_MspInit+0x4c>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d7a:	607b      	str	r3, [r7, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	4b09      	ldr	r3, [pc, #36]	@ (8002da8 <HAL_MspInit+0x4c>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	4a08      	ldr	r2, [pc, #32]	@ (8002da8 <HAL_MspInit+0x4c>)
 8002d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d8e:	4b06      	ldr	r3, [pc, #24]	@ (8002da8 <HAL_MspInit+0x4c>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800

08002dac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a0b      	ldr	r2, [pc, #44]	@ (8002de8 <HAL_ADC_MspInit+0x3c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d10d      	bne.n	8002dda <HAL_ADC_MspInit+0x2e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dec <HAL_ADC_MspInit+0x40>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc6:	4a09      	ldr	r2, [pc, #36]	@ (8002dec <HAL_ADC_MspInit+0x40>)
 8002dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dce:	4b07      	ldr	r3, [pc, #28]	@ (8002dec <HAL_ADC_MspInit+0x40>)
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40012000 	.word	0x40012000
 8002dec:	40023800 	.word	0x40023800

08002df0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b08c      	sub	sp, #48	@ 0x30
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	f107 031c 	add.w	r3, r7, #28
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
 8002e00:	605a      	str	r2, [r3, #4]
 8002e02:	609a      	str	r2, [r3, #8]
 8002e04:	60da      	str	r2, [r3, #12]
 8002e06:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8002f3c <HAL_CAN_MspInit+0x14c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d13e      	bne.n	8002e90 <HAL_CAN_MspInit+0xa0>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002e12:	4b4b      	ldr	r3, [pc, #300]	@ (8002f40 <HAL_CAN_MspInit+0x150>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	4a49      	ldr	r2, [pc, #292]	@ (8002f40 <HAL_CAN_MspInit+0x150>)
 8002e1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002e1c:	4b48      	ldr	r3, [pc, #288]	@ (8002f40 <HAL_CAN_MspInit+0x150>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d10d      	bne.n	8002e40 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002e24:	2300      	movs	r3, #0
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	4b46      	ldr	r3, [pc, #280]	@ (8002f44 <HAL_CAN_MspInit+0x154>)
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	4a45      	ldr	r2, [pc, #276]	@ (8002f44 <HAL_CAN_MspInit+0x154>)
 8002e2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e34:	4b43      	ldr	r3, [pc, #268]	@ (8002f44 <HAL_CAN_MspInit+0x154>)
 8002e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	4b3f      	ldr	r3, [pc, #252]	@ (8002f44 <HAL_CAN_MspInit+0x154>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e48:	4a3e      	ldr	r2, [pc, #248]	@ (8002f44 <HAL_CAN_MspInit+0x154>)
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e50:	4b3c      	ldr	r3, [pc, #240]	@ (8002f44 <HAL_CAN_MspInit+0x154>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	617b      	str	r3, [r7, #20]
 8002e5a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e5c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002e6e:	2309      	movs	r3, #9
 8002e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e72:	f107 031c 	add.w	r3, r7, #28
 8002e76:	4619      	mov	r1, r3
 8002e78:	4833      	ldr	r0, [pc, #204]	@ (8002f48 <HAL_CAN_MspInit+0x158>)
 8002e7a:	f001 ff73 	bl	8004d64 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2100      	movs	r1, #0
 8002e82:	2013      	movs	r0, #19
 8002e84:	f001 fef9 	bl	8004c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002e88:	2013      	movs	r0, #19
 8002e8a:	f001 ff12 	bl	8004cb2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002e8e:	e050      	b.n	8002f32 <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a2d      	ldr	r2, [pc, #180]	@ (8002f4c <HAL_CAN_MspInit+0x15c>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d14b      	bne.n	8002f32 <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	613b      	str	r3, [r7, #16]
 8002e9e:	4b29      	ldr	r3, [pc, #164]	@ (8002f44 <HAL_CAN_MspInit+0x154>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	4a28      	ldr	r2, [pc, #160]	@ (8002f44 <HAL_CAN_MspInit+0x154>)
 8002ea4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ea8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eaa:	4b26      	ldr	r3, [pc, #152]	@ (8002f44 <HAL_CAN_MspInit+0x154>)
 8002eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002eb2:	613b      	str	r3, [r7, #16]
 8002eb4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002eb6:	4b22      	ldr	r3, [pc, #136]	@ (8002f40 <HAL_CAN_MspInit+0x150>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	4a20      	ldr	r2, [pc, #128]	@ (8002f40 <HAL_CAN_MspInit+0x150>)
 8002ebe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f40 <HAL_CAN_MspInit+0x150>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d10d      	bne.n	8002ee4 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002ec8:	2300      	movs	r3, #0
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8002f44 <HAL_CAN_MspInit+0x154>)
 8002ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f44 <HAL_CAN_MspInit+0x154>)
 8002ed2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002ed6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f44 <HAL_CAN_MspInit+0x154>)
 8002eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	4b16      	ldr	r3, [pc, #88]	@ (8002f44 <HAL_CAN_MspInit+0x154>)
 8002eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eec:	4a15      	ldr	r2, [pc, #84]	@ (8002f44 <HAL_CAN_MspInit+0x154>)
 8002eee:	f043 0302 	orr.w	r3, r3, #2
 8002ef2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ef4:	4b13      	ldr	r3, [pc, #76]	@ (8002f44 <HAL_CAN_MspInit+0x154>)
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002f00:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002f12:	2309      	movs	r3, #9
 8002f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f16:	f107 031c 	add.w	r3, r7, #28
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	480c      	ldr	r0, [pc, #48]	@ (8002f50 <HAL_CAN_MspInit+0x160>)
 8002f1e:	f001 ff21 	bl	8004d64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2100      	movs	r1, #0
 8002f26:	2040      	movs	r0, #64	@ 0x40
 8002f28:	f001 fea7 	bl	8004c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002f2c:	2040      	movs	r0, #64	@ 0x40
 8002f2e:	f001 fec0 	bl	8004cb2 <HAL_NVIC_EnableIRQ>
}
 8002f32:	bf00      	nop
 8002f34:	3730      	adds	r7, #48	@ 0x30
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40006400 	.word	0x40006400
 8002f40:	200002f4 	.word	0x200002f4
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020000 	.word	0x40020000
 8002f4c:	40006800 	.word	0x40006800
 8002f50:	40020400 	.word	0x40020400

08002f54 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	@ 0x28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f5c:	f107 0314 	add.w	r3, r7, #20
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	605a      	str	r2, [r3, #4]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a26      	ldr	r2, [pc, #152]	@ (800300c <HAL_I2C_MspInit+0xb8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d145      	bne.n	8003002 <HAL_I2C_MspInit+0xae>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f76:	2300      	movs	r3, #0
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	4b25      	ldr	r3, [pc, #148]	@ (8003010 <HAL_I2C_MspInit+0xbc>)
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f7e:	4a24      	ldr	r2, [pc, #144]	@ (8003010 <HAL_I2C_MspInit+0xbc>)
 8002f80:	f043 0302 	orr.w	r3, r3, #2
 8002f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f86:	4b22      	ldr	r3, [pc, #136]	@ (8003010 <HAL_I2C_MspInit+0xbc>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin;
 8002f92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f98:	2312      	movs	r3, #18
 8002f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002fa4:	2304      	movs	r3, #4
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	4619      	mov	r1, r3
 8002fae:	4819      	ldr	r0, [pc, #100]	@ (8003014 <HAL_I2C_MspInit+0xc0>)
 8002fb0:	f001 fed8 	bl	8004d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDA_Pin;
 8002fb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002fb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fba:	2312      	movs	r3, #18
 8002fbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002fc6:	2304      	movs	r3, #4
 8002fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8002fca:	f107 0314 	add.w	r3, r7, #20
 8002fce:	4619      	mov	r1, r3
 8002fd0:	4810      	ldr	r0, [pc, #64]	@ (8003014 <HAL_I2C_MspInit+0xc0>)
 8002fd2:	f001 fec7 	bl	8004d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	4b0d      	ldr	r3, [pc, #52]	@ (8003010 <HAL_I2C_MspInit+0xbc>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	4a0c      	ldr	r2, [pc, #48]	@ (8003010 <HAL_I2C_MspInit+0xbc>)
 8002fe0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8003010 <HAL_I2C_MspInit+0xbc>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	2021      	movs	r0, #33	@ 0x21
 8002ff8:	f001 fe3f 	bl	8004c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002ffc:	2021      	movs	r0, #33	@ 0x21
 8002ffe:	f001 fe58 	bl	8004cb2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8003002:	bf00      	nop
 8003004:	3728      	adds	r7, #40	@ 0x28
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40005800 	.word	0x40005800
 8003010:	40023800 	.word	0x40023800
 8003014:	40020400 	.word	0x40020400

08003018 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	@ 0x28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a2c      	ldr	r2, [pc, #176]	@ (80030e8 <HAL_SD_MspInit+0xd0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d152      	bne.n	80030e0 <HAL_SD_MspInit+0xc8>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	4b2b      	ldr	r3, [pc, #172]	@ (80030ec <HAL_SD_MspInit+0xd4>)
 8003040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003042:	4a2a      	ldr	r2, [pc, #168]	@ (80030ec <HAL_SD_MspInit+0xd4>)
 8003044:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003048:	6453      	str	r3, [r2, #68]	@ 0x44
 800304a:	4b28      	ldr	r3, [pc, #160]	@ (80030ec <HAL_SD_MspInit+0xd4>)
 800304c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b24      	ldr	r3, [pc, #144]	@ (80030ec <HAL_SD_MspInit+0xd4>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	4a23      	ldr	r2, [pc, #140]	@ (80030ec <HAL_SD_MspInit+0xd4>)
 8003060:	f043 0304 	orr.w	r3, r3, #4
 8003064:	6313      	str	r3, [r2, #48]	@ 0x30
 8003066:	4b21      	ldr	r3, [pc, #132]	@ (80030ec <HAL_SD_MspInit+0xd4>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	4b1d      	ldr	r3, [pc, #116]	@ (80030ec <HAL_SD_MspInit+0xd4>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	4a1c      	ldr	r2, [pc, #112]	@ (80030ec <HAL_SD_MspInit+0xd4>)
 800307c:	f043 0308 	orr.w	r3, r3, #8
 8003080:	6313      	str	r3, [r2, #48]	@ 0x30
 8003082:	4b1a      	ldr	r3, [pc, #104]	@ (80030ec <HAL_SD_MspInit+0xd4>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	60bb      	str	r3, [r7, #8]
 800308c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800308e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8003092:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800309c:	2303      	movs	r3, #3
 800309e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80030a0:	230c      	movs	r3, #12
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	4619      	mov	r1, r3
 80030aa:	4811      	ldr	r0, [pc, #68]	@ (80030f0 <HAL_SD_MspInit+0xd8>)
 80030ac:	f001 fe5a 	bl	8004d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030b0:	2304      	movs	r3, #4
 80030b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b4:	2302      	movs	r3, #2
 80030b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030bc:	2303      	movs	r3, #3
 80030be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80030c0:	230c      	movs	r3, #12
 80030c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	4619      	mov	r1, r3
 80030ca:	480a      	ldr	r0, [pc, #40]	@ (80030f4 <HAL_SD_MspInit+0xdc>)
 80030cc:	f001 fe4a 	bl	8004d64 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80030d0:	2200      	movs	r2, #0
 80030d2:	2100      	movs	r1, #0
 80030d4:	2031      	movs	r0, #49	@ 0x31
 80030d6:	f001 fdd0 	bl	8004c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80030da:	2031      	movs	r0, #49	@ 0x31
 80030dc:	f001 fde9 	bl	8004cb2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 80030e0:	bf00      	nop
 80030e2:	3728      	adds	r7, #40	@ 0x28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40012c00 	.word	0x40012c00
 80030ec:	40023800 	.word	0x40023800
 80030f0:	40020800 	.word	0x40020800
 80030f4:	40020c00 	.word	0x40020c00

080030f8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08a      	sub	sp, #40	@ 0x28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003100:	f107 0314 	add.w	r3, r7, #20
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	605a      	str	r2, [r3, #4]
 800310a:	609a      	str	r2, [r3, #8]
 800310c:	60da      	str	r2, [r3, #12]
 800310e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a28      	ldr	r2, [pc, #160]	@ (80031b8 <HAL_SPI_MspInit+0xc0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d149      	bne.n	80031ae <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	4b27      	ldr	r3, [pc, #156]	@ (80031bc <HAL_SPI_MspInit+0xc4>)
 8003120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003122:	4a26      	ldr	r2, [pc, #152]	@ (80031bc <HAL_SPI_MspInit+0xc4>)
 8003124:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003128:	6453      	str	r3, [r2, #68]	@ 0x44
 800312a:	4b24      	ldr	r3, [pc, #144]	@ (80031bc <HAL_SPI_MspInit+0xc4>)
 800312c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	4b20      	ldr	r3, [pc, #128]	@ (80031bc <HAL_SPI_MspInit+0xc4>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	4a1f      	ldr	r2, [pc, #124]	@ (80031bc <HAL_SPI_MspInit+0xc4>)
 8003140:	f043 0301 	orr.w	r3, r3, #1
 8003144:	6313      	str	r3, [r2, #48]	@ 0x30
 8003146:	4b1d      	ldr	r3, [pc, #116]	@ (80031bc <HAL_SPI_MspInit+0xc4>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	4b19      	ldr	r3, [pc, #100]	@ (80031bc <HAL_SPI_MspInit+0xc4>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315a:	4a18      	ldr	r2, [pc, #96]	@ (80031bc <HAL_SPI_MspInit+0xc4>)
 800315c:	f043 0302 	orr.w	r3, r3, #2
 8003160:	6313      	str	r3, [r2, #48]	@ 0x30
 8003162:	4b16      	ldr	r3, [pc, #88]	@ (80031bc <HAL_SPI_MspInit+0xc4>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	60bb      	str	r3, [r7, #8]
 800316c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin|MOSI_Pin;
 800316e:	23c0      	movs	r3, #192	@ 0xc0
 8003170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	2302      	movs	r3, #2
 8003174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800317a:	2303      	movs	r3, #3
 800317c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800317e:	2305      	movs	r3, #5
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4619      	mov	r1, r3
 8003188:	480d      	ldr	r0, [pc, #52]	@ (80031c0 <HAL_SPI_MspInit+0xc8>)
 800318a:	f001 fdeb 	bl	8004d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCLK_Pin;
 800318e:	2308      	movs	r3, #8
 8003190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2302      	movs	r3, #2
 8003194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319a:	2303      	movs	r3, #3
 800319c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800319e:	2305      	movs	r3, #5
 80031a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCLK_GPIO_Port, &GPIO_InitStruct);
 80031a2:	f107 0314 	add.w	r3, r7, #20
 80031a6:	4619      	mov	r1, r3
 80031a8:	4806      	ldr	r0, [pc, #24]	@ (80031c4 <HAL_SPI_MspInit+0xcc>)
 80031aa:	f001 fddb 	bl	8004d64 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80031ae:	bf00      	nop
 80031b0:	3728      	adds	r7, #40	@ 0x28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40013000 	.word	0x40013000
 80031bc:	40023800 	.word	0x40023800
 80031c0:	40020000 	.word	0x40020000
 80031c4:	40020400 	.word	0x40020400

080031c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <NMI_Handler+0x4>

080031d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031d4:	bf00      	nop
 80031d6:	e7fd      	b.n	80031d4 <HardFault_Handler+0x4>

080031d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <MemManage_Handler+0x4>

080031e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031e4:	bf00      	nop
 80031e6:	e7fd      	b.n	80031e4 <BusFault_Handler+0x4>

080031e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <UsageFault_Handler+0x4>

080031f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003202:	bf00      	nop
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800321e:	f000 f983 	bl	8003528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003222:	bf00      	nop
 8003224:	bd80      	pop	{r7, pc}

08003226 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 800322a:	2010      	movs	r0, #16
 800322c:	f001 ff82 	bl	8005134 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}

08003234 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003238:	4802      	ldr	r0, [pc, #8]	@ (8003244 <CAN1_TX_IRQHandler+0x10>)
 800323a:	f001 f9ef 	bl	800461c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	200006e4 	.word	0x200006e4

08003248 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800324c:	4802      	ldr	r0, [pc, #8]	@ (8003258 <I2C2_EV_IRQHandler+0x10>)
 800324e:	f002 fc0f 	bl	8005a70 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200004ac 	.word	0x200004ac

0800325c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003260:	4802      	ldr	r0, [pc, #8]	@ (800326c <SDIO_IRQHandler+0x10>)
 8003262:	f005 fbf7 	bl	8008a54 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20000600 	.word	0x20000600

08003270 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003274:	4802      	ldr	r0, [pc, #8]	@ (8003280 <CAN2_RX0_IRQHandler+0x10>)
 8003276:	f001 f9d1 	bl	800461c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	200005a4 	.word	0x200005a4

08003284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800328c:	4a14      	ldr	r2, [pc, #80]	@ (80032e0 <_sbrk+0x5c>)
 800328e:	4b15      	ldr	r3, [pc, #84]	@ (80032e4 <_sbrk+0x60>)
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003298:	4b13      	ldr	r3, [pc, #76]	@ (80032e8 <_sbrk+0x64>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d102      	bne.n	80032a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032a0:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <_sbrk+0x64>)
 80032a2:	4a12      	ldr	r2, [pc, #72]	@ (80032ec <_sbrk+0x68>)
 80032a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032a6:	4b10      	ldr	r3, [pc, #64]	@ (80032e8 <_sbrk+0x64>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4413      	add	r3, r2
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d207      	bcs.n	80032c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032b4:	f00a f862 	bl	800d37c <__errno>
 80032b8:	4603      	mov	r3, r0
 80032ba:	220c      	movs	r2, #12
 80032bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032be:	f04f 33ff 	mov.w	r3, #4294967295
 80032c2:	e009      	b.n	80032d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032c4:	4b08      	ldr	r3, [pc, #32]	@ (80032e8 <_sbrk+0x64>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032ca:	4b07      	ldr	r3, [pc, #28]	@ (80032e8 <_sbrk+0x64>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4413      	add	r3, r2
 80032d2:	4a05      	ldr	r2, [pc, #20]	@ (80032e8 <_sbrk+0x64>)
 80032d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032d6:	68fb      	ldr	r3, [r7, #12]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	20020000 	.word	0x20020000
 80032e4:	00000400 	.word	0x00000400
 80032e8:	200002f8 	.word	0x200002f8
 80032ec:	20000b88 	.word	0x20000b88

080032f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032f4:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <SystemInit+0x20>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fa:	4a05      	ldr	r2, [pc, #20]	@ (8003310 <SystemInit+0x20>)
 80032fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003300:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	e000ed00 	.word	0xe000ed00

08003314 <Task2_LedBlink>:

/**
 * @brief Thực hiện một lần nháy (toggle) LED và delay cho Task 2.
 */
void Task2_LedBlink(GPIO_TypeDef *ledPort, uint16_t ledPin, uint32_t blinkSpeed_ms) // Sử dụng tên hàm mới (nếu đổi)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	460b      	mov	r3, r1
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	817b      	strh	r3, [r7, #10]
  HAL_GPIO_TogglePin(ledPort, ledPin);
 8003322:	897b      	ldrh	r3, [r7, #10]
 8003324:	4619      	mov	r1, r3
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f001 fee9 	bl	80050fe <HAL_GPIO_TogglePin>
  HAL_Delay(blinkSpeed_ms);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f91b 	bl	8003568 <HAL_Delay>
//	static uint32_t last_tick = 0;
//		    if (HAL_GetTick() - last_tick >= blinkSpeed_ms) {
//		        HAL_GPIO_TogglePin(ledPort, ledPin);
//		        last_tick = HAL_GetTick();
//		    }
}
 8003332:	bf00      	nop
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <Read_Internal_Temperature>:

float Read_Internal_Temperature(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
  uint32_t adc_value = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]
  float temperature_celsius = 0.0f;
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	60bb      	str	r3, [r7, #8]

  HAL_ADC_Start(&hadc1);                                // Khởi động ADC1
 800334c:	481b      	ldr	r0, [pc, #108]	@ (80033bc <Read_Internal_Temperature+0x80>)
 800334e:	f000 f973 	bl	8003638 <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) // Chờ chuyển đổi, timeout 100ms
 8003352:	2164      	movs	r1, #100	@ 0x64
 8003354:	4819      	ldr	r0, [pc, #100]	@ (80033bc <Read_Internal_Temperature+0x80>)
 8003356:	f000 fa74 	bl	8003842 <HAL_ADC_PollForConversion>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d103      	bne.n	8003368 <Read_Internal_Temperature+0x2c>
  {
    adc_value = HAL_ADC_GetValue(&hadc1); // Đọc giá trị ADC
 8003360:	4816      	ldr	r0, [pc, #88]	@ (80033bc <Read_Internal_Temperature+0x80>)
 8003362:	f000 faf9 	bl	8003958 <HAL_ADC_GetValue>
 8003366:	60f8      	str	r0, [r7, #12]
  }
  HAL_ADC_Stop(&hadc1); // Dừng ADC1
 8003368:	4814      	ldr	r0, [pc, #80]	@ (80033bc <Read_Internal_Temperature+0x80>)
 800336a:	f000 fa37 	bl	80037dc <HAL_ADC_Stop>

  // Công thức tính nhiệt độ từ datasheet (có thể cần điều chỉnh)
  // Temperature(in °C) = {(V SENSE – V 25 ) / Avg_Slope} + 25
  // V SENSE = adc_value * VREF_MV / ADC_MAX_VALUE
  float vsense_mv = ((float)adc_value * ADC_VREF_MV) / ADC_MAX_VALUE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	ee07 3a90 	vmov	s15, r3
 8003374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003378:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80033c0 <Read_Internal_Temperature+0x84>
 800337c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003380:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80033c4 <Read_Internal_Temperature+0x88>
 8003384:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003388:	edc7 7a01 	vstr	s15, [r7, #4]
  temperature_celsius = (vsense_mv - TEMP_SENSOR_V25_MV) / TEMP_SENSOR_AVG_SLOPE_MV_PER_C + 25.0f;
 800338c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003390:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80033c8 <Read_Internal_Temperature+0x8c>
 8003394:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003398:	eef0 6a04 	vmov.f32	s13, #4	@ 0x40200000  2.5
 800339c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033a0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80033a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033a8:	edc7 7a02 	vstr	s15, [r7, #8]

  return temperature_celsius;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	ee07 3a90 	vmov	s15, r3
}
 80033b2:	eeb0 0a67 	vmov.f32	s0, s15
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	2000055c 	.word	0x2000055c
 80033c0:	454e4000 	.word	0x454e4000
 80033c4:	457ff000 	.word	0x457ff000
 80033c8:	443e0000 	.word	0x443e0000

080033cc <CheckUserButtonAndSaveTemp>:
 * @brief Kiểm tra nút User Button và ghi nhiệt độ vào FRAM ngay lập tức khi nút được nhấn
 * @param previous_state Con trỏ đến biến lưu trạng thái nút trước đó
 * @retval None
 */
void CheckUserButtonAndSaveTemp(GPIO_PinState *previous_state)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  // Đọc trạng thái hiện tại của nút
  GPIO_PinState current_button_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80033d4:	2102      	movs	r1, #2
 80033d6:	4814      	ldr	r0, [pc, #80]	@ (8003428 <CheckUserButtonAndSaveTemp+0x5c>)
 80033d8:	f001 fe60 	bl	800509c <HAL_GPIO_ReadPin>
 80033dc:	4603      	mov	r3, r0
 80033de:	73fb      	strb	r3, [r7, #15]

  // Kiểm tra xem nút vừa được nhấn xuống (phát hiện cạnh xuống)
  if (current_button_state == GPIO_PIN_SET && *previous_state == GPIO_PIN_RESET)
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d118      	bne.n	8003418 <CheckUserButtonAndSaveTemp+0x4c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d114      	bne.n	8003418 <CheckUserButtonAndSaveTemp+0x4c>
  {
    // Nút vừa được nhấn xuống
    // Đọc nhiệt độ từ cảm biến
    uint8_t current_temp = (uint8_t)Read_Internal_Temperature();
 80033ee:	f7ff ffa5 	bl	800333c <Read_Internal_Temperature>
 80033f2:	eef0 7a40 	vmov.f32	s15, s0
 80033f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033fa:	edc7 7a00 	vstr	s15, [r7]
 80033fe:	783b      	ldrb	r3, [r7, #0]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	737b      	strb	r3, [r7, #13]

    // Ghi nhiệt độ vào FRAM tại địa chỉ cố định, ghi đè lên giá trị cũ
    HAL_StatusTypeDef status = FRAM_WriteBytes(&hi2c2, USER_TEMP_ADDR, &current_temp, 1);
 8003404:	f107 020d 	add.w	r2, r7, #13
 8003408:	2301      	movs	r3, #1
 800340a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800340e:	4807      	ldr	r0, [pc, #28]	@ (800342c <CheckUserButtonAndSaveTemp+0x60>)
 8003410:	f7fd fd52 	bl	8000eb8 <FRAM_WriteBytes>
 8003414:	4603      	mov	r3, r0
 8003416:	73bb      	strb	r3, [r7, #14]

  }

  // Cập nhật trạng thái nút trước đó
  *previous_state = current_button_state;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	7bfa      	ldrb	r2, [r7, #15]
 800341c:	701a      	strb	r2, [r3, #0]
}
 800341e:	bf00      	nop
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40020000 	.word	0x40020000
 800342c:	200004ac 	.word	0x200004ac

08003430 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003430:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003468 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003434:	f7ff ff5c 	bl	80032f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003438:	480c      	ldr	r0, [pc, #48]	@ (800346c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800343a:	490d      	ldr	r1, [pc, #52]	@ (8003470 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800343c:	4a0d      	ldr	r2, [pc, #52]	@ (8003474 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800343e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003440:	e002      	b.n	8003448 <LoopCopyDataInit>

08003442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003446:	3304      	adds	r3, #4

08003448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800344a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800344c:	d3f9      	bcc.n	8003442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800344e:	4a0a      	ldr	r2, [pc, #40]	@ (8003478 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003450:	4c0a      	ldr	r4, [pc, #40]	@ (800347c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003454:	e001      	b.n	800345a <LoopFillZerobss>

08003456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003458:	3204      	adds	r2, #4

0800345a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800345a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800345c:	d3fb      	bcc.n	8003456 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800345e:	f009 ff93 	bl	800d388 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003462:	f7fd fd6f 	bl	8000f44 <main>
  bx  lr    
 8003466:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800346c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003470:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8003474:	0800e138 	.word	0x0800e138
  ldr r2, =_sbss
 8003478:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800347c:	20000b84 	.word	0x20000b84

08003480 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003480:	e7fe      	b.n	8003480 <ADC_IRQHandler>
	...

08003484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003488:	4b0e      	ldr	r3, [pc, #56]	@ (80034c4 <HAL_Init+0x40>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a0d      	ldr	r2, [pc, #52]	@ (80034c4 <HAL_Init+0x40>)
 800348e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003492:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003494:	4b0b      	ldr	r3, [pc, #44]	@ (80034c4 <HAL_Init+0x40>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a0a      	ldr	r2, [pc, #40]	@ (80034c4 <HAL_Init+0x40>)
 800349a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800349e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034a0:	4b08      	ldr	r3, [pc, #32]	@ (80034c4 <HAL_Init+0x40>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a07      	ldr	r2, [pc, #28]	@ (80034c4 <HAL_Init+0x40>)
 80034a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034ac:	2003      	movs	r0, #3
 80034ae:	f001 fbd9 	bl	8004c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034b2:	200f      	movs	r0, #15
 80034b4:	f000 f808 	bl	80034c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034b8:	f7ff fc50 	bl	8002d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40023c00 	.word	0x40023c00

080034c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034d0:	4b12      	ldr	r3, [pc, #72]	@ (800351c <HAL_InitTick+0x54>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b12      	ldr	r3, [pc, #72]	@ (8003520 <HAL_InitTick+0x58>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	4619      	mov	r1, r3
 80034da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034de:	fbb3 f3f1 	udiv	r3, r3, r1
 80034e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e6:	4618      	mov	r0, r3
 80034e8:	f001 fbff 	bl	8004cea <HAL_SYSTICK_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00e      	b.n	8003514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b0f      	cmp	r3, #15
 80034fa:	d80a      	bhi.n	8003512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034fc:	2200      	movs	r2, #0
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	f001 fbb9 	bl	8004c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003508:	4a06      	ldr	r2, [pc, #24]	@ (8003524 <HAL_InitTick+0x5c>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	e000      	b.n	8003514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
}
 8003514:	4618      	mov	r0, r3
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20000004 	.word	0x20000004
 8003520:	2000000c 	.word	0x2000000c
 8003524:	20000008 	.word	0x20000008

08003528 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800352c:	4b06      	ldr	r3, [pc, #24]	@ (8003548 <HAL_IncTick+0x20>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	461a      	mov	r2, r3
 8003532:	4b06      	ldr	r3, [pc, #24]	@ (800354c <HAL_IncTick+0x24>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4413      	add	r3, r2
 8003538:	4a04      	ldr	r2, [pc, #16]	@ (800354c <HAL_IncTick+0x24>)
 800353a:	6013      	str	r3, [r2, #0]
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	2000000c 	.word	0x2000000c
 800354c:	20000718 	.word	0x20000718

08003550 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return uwTick;
 8003554:	4b03      	ldr	r3, [pc, #12]	@ (8003564 <HAL_GetTick+0x14>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000718 	.word	0x20000718

08003568 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003570:	f7ff ffee 	bl	8003550 <HAL_GetTick>
 8003574:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d005      	beq.n	800358e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003582:	4b0a      	ldr	r3, [pc, #40]	@ (80035ac <HAL_Delay+0x44>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	461a      	mov	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4413      	add	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800358e:	bf00      	nop
 8003590:	f7ff ffde 	bl	8003550 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	429a      	cmp	r2, r3
 800359e:	d8f7      	bhi.n	8003590 <HAL_Delay+0x28>
  {
  }
}
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	2000000c 	.word	0x2000000c

080035b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e033      	b.n	800362e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff fbec 	bl	8002dac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	f003 0310 	and.w	r3, r3, #16
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d118      	bne.n	8003620 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80035f6:	f023 0302 	bic.w	r3, r3, #2
 80035fa:	f043 0202 	orr.w	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fad8 	bl	8003bb8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003612:	f023 0303 	bic.w	r3, r3, #3
 8003616:	f043 0201 	orr.w	r2, r3, #1
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	641a      	str	r2, [r3, #64]	@ 0x40
 800361e:	e001      	b.n	8003624 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800362c:	7bfb      	ldrb	r3, [r7, #15]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3710      	adds	r7, #16
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
	...

08003638 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_ADC_Start+0x1a>
 800364e:	2302      	movs	r3, #2
 8003650:	e0b2      	b.n	80037b8 <HAL_ADC_Start+0x180>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b01      	cmp	r3, #1
 8003666:	d018      	beq.n	800369a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003678:	4b52      	ldr	r3, [pc, #328]	@ (80037c4 <HAL_ADC_Start+0x18c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a52      	ldr	r2, [pc, #328]	@ (80037c8 <HAL_ADC_Start+0x190>)
 800367e:	fba2 2303 	umull	r2, r3, r2, r3
 8003682:	0c9a      	lsrs	r2, r3, #18
 8003684:	4613      	mov	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800368c:	e002      	b.n	8003694 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3b01      	subs	r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1f9      	bne.n	800368e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d17a      	bne.n	800379e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d007      	beq.n	80036da <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036d2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80036e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e6:	d106      	bne.n	80036f6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036ec:	f023 0206 	bic.w	r2, r3, #6
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	645a      	str	r2, [r3, #68]	@ 0x44
 80036f4:	e002      	b.n	80036fc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003704:	4b31      	ldr	r3, [pc, #196]	@ (80037cc <HAL_ADC_Start+0x194>)
 8003706:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003710:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	2b00      	cmp	r3, #0
 800371c:	d12a      	bne.n	8003774 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a2b      	ldr	r2, [pc, #172]	@ (80037d0 <HAL_ADC_Start+0x198>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d015      	beq.n	8003754 <HAL_ADC_Start+0x11c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a29      	ldr	r2, [pc, #164]	@ (80037d4 <HAL_ADC_Start+0x19c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d105      	bne.n	800373e <HAL_ADC_Start+0x106>
 8003732:	4b26      	ldr	r3, [pc, #152]	@ (80037cc <HAL_ADC_Start+0x194>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a25      	ldr	r2, [pc, #148]	@ (80037d8 <HAL_ADC_Start+0x1a0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d136      	bne.n	80037b6 <HAL_ADC_Start+0x17e>
 8003748:	4b20      	ldr	r3, [pc, #128]	@ (80037cc <HAL_ADC_Start+0x194>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b00      	cmp	r3, #0
 8003752:	d130      	bne.n	80037b6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d129      	bne.n	80037b6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	e020      	b.n	80037b6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a15      	ldr	r2, [pc, #84]	@ (80037d0 <HAL_ADC_Start+0x198>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d11b      	bne.n	80037b6 <HAL_ADC_Start+0x17e>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d114      	bne.n	80037b6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	e00b      	b.n	80037b6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	f043 0210 	orr.w	r2, r3, #16
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ae:	f043 0201 	orr.w	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	20000004 	.word	0x20000004
 80037c8:	431bde83 	.word	0x431bde83
 80037cc:	40012300 	.word	0x40012300
 80037d0:	40012000 	.word	0x40012000
 80037d4:	40012100 	.word	0x40012100
 80037d8:	40012200 	.word	0x40012200

080037dc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_ADC_Stop+0x16>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e021      	b.n	8003836 <HAL_ADC_Stop+0x5a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b00      	cmp	r3, #0
 8003816:	d109      	bne.n	800382c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003820:	f023 0301 	bic.w	r3, r3, #1
 8003824:	f043 0201 	orr.w	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800385a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800385e:	d113      	bne.n	8003888 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800386a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800386e:	d10b      	bne.n	8003888 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003874:	f043 0220 	orr.w	r2, r3, #32
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e063      	b.n	8003950 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003888:	f7ff fe62 	bl	8003550 <HAL_GetTick>
 800388c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800388e:	e021      	b.n	80038d4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d01d      	beq.n	80038d4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <HAL_ADC_PollForConversion+0x6c>
 800389e:	f7ff fe57 	bl	8003550 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d212      	bcs.n	80038d4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d00b      	beq.n	80038d4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c0:	f043 0204 	orr.w	r2, r3, #4
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e03d      	b.n	8003950 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d1d6      	bne.n	8003890 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f06f 0212 	mvn.w	r2, #18
 80038ea:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d123      	bne.n	800394e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800390a:	2b00      	cmp	r3, #0
 800390c:	d11f      	bne.n	800394e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003914:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003918:	2b00      	cmp	r3, #0
 800391a:	d006      	beq.n	800392a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003926:	2b00      	cmp	r3, #0
 8003928:	d111      	bne.n	800394e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d105      	bne.n	800394e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003946:	f043 0201 	orr.w	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3710      	adds	r7, #16
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003966:	4618      	mov	r0, r3
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
	...

08003974 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800397e:	2300      	movs	r3, #0
 8003980:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_ADC_ConfigChannel+0x1c>
 800398c:	2302      	movs	r3, #2
 800398e:	e105      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x228>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b09      	cmp	r3, #9
 800399e:	d925      	bls.n	80039ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68d9      	ldr	r1, [r3, #12]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	4613      	mov	r3, r2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	3b1e      	subs	r3, #30
 80039b6:	2207      	movs	r2, #7
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43da      	mvns	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	400a      	ands	r2, r1
 80039c4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68d9      	ldr	r1, [r3, #12]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	689a      	ldr	r2, [r3, #8]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	4618      	mov	r0, r3
 80039d8:	4603      	mov	r3, r0
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	4403      	add	r3, r0
 80039de:	3b1e      	subs	r3, #30
 80039e0:	409a      	lsls	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	60da      	str	r2, [r3, #12]
 80039ea:	e022      	b.n	8003a32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6919      	ldr	r1, [r3, #16]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	4613      	mov	r3, r2
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	4413      	add	r3, r2
 8003a00:	2207      	movs	r2, #7
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43da      	mvns	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6919      	ldr	r1, [r3, #16]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	689a      	ldr	r2, [r3, #8]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	4618      	mov	r0, r3
 8003a22:	4603      	mov	r3, r0
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4403      	add	r3, r0
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b06      	cmp	r3, #6
 8003a38:	d824      	bhi.n	8003a84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	3b05      	subs	r3, #5
 8003a4c:	221f      	movs	r2, #31
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43da      	mvns	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	400a      	ands	r2, r1
 8003a5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	4618      	mov	r0, r3
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	3b05      	subs	r3, #5
 8003a76:	fa00 f203 	lsl.w	r2, r0, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a82:	e04c      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	d824      	bhi.n	8003ad6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3b23      	subs	r3, #35	@ 0x23
 8003a9e:	221f      	movs	r2, #31
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	43da      	mvns	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	400a      	ands	r2, r1
 8003aac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	4618      	mov	r0, r3
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3b23      	subs	r3, #35	@ 0x23
 8003ac8:	fa00 f203 	lsl.w	r2, r0, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ad4:	e023      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3b41      	subs	r3, #65	@ 0x41
 8003ae8:	221f      	movs	r2, #31
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43da      	mvns	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	400a      	ands	r2, r1
 8003af6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	4618      	mov	r0, r3
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	4413      	add	r3, r2
 8003b10:	3b41      	subs	r3, #65	@ 0x41
 8003b12:	fa00 f203 	lsl.w	r2, r0, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b1e:	4b22      	ldr	r3, [pc, #136]	@ (8003ba8 <HAL_ADC_ConfigChannel+0x234>)
 8003b20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a21      	ldr	r2, [pc, #132]	@ (8003bac <HAL_ADC_ConfigChannel+0x238>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d109      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x1cc>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b12      	cmp	r3, #18
 8003b32:	d105      	bne.n	8003b40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a19      	ldr	r2, [pc, #100]	@ (8003bac <HAL_ADC_ConfigChannel+0x238>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d123      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x21e>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b10      	cmp	r3, #16
 8003b50:	d003      	beq.n	8003b5a <HAL_ADC_ConfigChannel+0x1e6>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b11      	cmp	r3, #17
 8003b58:	d11b      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	d111      	bne.n	8003b92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b6e:	4b10      	ldr	r3, [pc, #64]	@ (8003bb0 <HAL_ADC_ConfigChannel+0x23c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a10      	ldr	r2, [pc, #64]	@ (8003bb4 <HAL_ADC_ConfigChannel+0x240>)
 8003b74:	fba2 2303 	umull	r2, r3, r2, r3
 8003b78:	0c9a      	lsrs	r2, r3, #18
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b84:	e002      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f9      	bne.n	8003b86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	40012300 	.word	0x40012300
 8003bac:	40012000 	.word	0x40012000
 8003bb0:	20000004 	.word	0x20000004
 8003bb4:	431bde83 	.word	0x431bde83

08003bb8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bc0:	4b79      	ldr	r3, [pc, #484]	@ (8003da8 <ADC_Init+0x1f0>)
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003bec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	021a      	lsls	r2, r3, #8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003c10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6859      	ldr	r1, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6899      	ldr	r1, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	430a      	orrs	r2, r1
 8003c44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4a:	4a58      	ldr	r2, [pc, #352]	@ (8003dac <ADC_Init+0x1f4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d022      	beq.n	8003c96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689a      	ldr	r2, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6899      	ldr	r1, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6899      	ldr	r1, [r3, #8]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	609a      	str	r2, [r3, #8]
 8003c94:	e00f      	b.n	8003cb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ca4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003cb4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689a      	ldr	r2, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0202 	bic.w	r2, r2, #2
 8003cc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6899      	ldr	r1, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	7e1b      	ldrb	r3, [r3, #24]
 8003cd0:	005a      	lsls	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01b      	beq.n	8003d1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cf2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003d02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6859      	ldr	r1, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	035a      	lsls	r2, r3, #13
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	e007      	b.n	8003d2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d2a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69db      	ldr	r3, [r3, #28]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	051a      	lsls	r2, r3, #20
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6899      	ldr	r1, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d6e:	025a      	lsls	r2, r3, #9
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6899      	ldr	r1, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	029a      	lsls	r2, r3, #10
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	609a      	str	r2, [r3, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	40012300 	.word	0x40012300
 8003dac:	0f000001 	.word	0x0f000001

08003db0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0ed      	b.n	8003f9e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff f80e 	bl	8002df0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003de4:	f7ff fbb4 	bl	8003550 <HAL_GetTick>
 8003de8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003dea:	e012      	b.n	8003e12 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003dec:	f7ff fbb0 	bl	8003550 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b0a      	cmp	r3, #10
 8003df8:	d90b      	bls.n	8003e12 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2205      	movs	r2, #5
 8003e0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e0c5      	b.n	8003f9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0e5      	beq.n	8003dec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0202 	bic.w	r2, r2, #2
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e30:	f7ff fb8e 	bl	8003550 <HAL_GetTick>
 8003e34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e36:	e012      	b.n	8003e5e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e38:	f7ff fb8a 	bl	8003550 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b0a      	cmp	r3, #10
 8003e44:	d90b      	bls.n	8003e5e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2205      	movs	r2, #5
 8003e56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e09f      	b.n	8003f9e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e5      	bne.n	8003e38 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	7e1b      	ldrb	r3, [r3, #24]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d108      	bne.n	8003e86 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	e007      	b.n	8003e96 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	7e5b      	ldrb	r3, [r3, #25]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d108      	bne.n	8003eb0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003eac:	601a      	str	r2, [r3, #0]
 8003eae:	e007      	b.n	8003ec0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ebe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	7e9b      	ldrb	r3, [r3, #26]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d108      	bne.n	8003eda <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0220 	orr.w	r2, r2, #32
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	e007      	b.n	8003eea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0220 	bic.w	r2, r2, #32
 8003ee8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	7edb      	ldrb	r3, [r3, #27]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d108      	bne.n	8003f04 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0210 	bic.w	r2, r2, #16
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	e007      	b.n	8003f14 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0210 	orr.w	r2, r2, #16
 8003f12:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	7f1b      	ldrb	r3, [r3, #28]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d108      	bne.n	8003f2e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0208 	orr.w	r2, r2, #8
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e007      	b.n	8003f3e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0208 	bic.w	r2, r2, #8
 8003f3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	7f5b      	ldrb	r3, [r3, #29]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d108      	bne.n	8003f58 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f042 0204 	orr.w	r2, r2, #4
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	e007      	b.n	8003f68 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0204 	bic.w	r2, r2, #4
 8003f66:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	68db      	ldr	r3, [r3, #12]
 8003f70:	431a      	orrs	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	ea42 0103 	orr.w	r1, r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	1e5a      	subs	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fb8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8003fba:	7dfb      	ldrb	r3, [r7, #23]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d003      	beq.n	8003fc8 <HAL_CAN_ConfigFilter+0x20>
 8003fc0:	7dfb      	ldrb	r3, [r7, #23]
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	f040 80be 	bne.w	8004144 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003fc8:	4b65      	ldr	r3, [pc, #404]	@ (8004160 <HAL_CAN_ConfigFilter+0x1b8>)
 8003fca:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003fd2:	f043 0201 	orr.w	r2, r3, #1
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003fe2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	431a      	orrs	r2, r3
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2201      	movs	r2, #1
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	43db      	mvns	r3, r3
 800401a:	401a      	ands	r2, r3
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d123      	bne.n	8004072 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	43db      	mvns	r3, r3
 8004034:	401a      	ands	r2, r3
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800404c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	3248      	adds	r2, #72	@ 0x48
 8004052:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004066:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004068:	6939      	ldr	r1, [r7, #16]
 800406a:	3348      	adds	r3, #72	@ 0x48
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	440b      	add	r3, r1
 8004070:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d122      	bne.n	80040c0 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	431a      	orrs	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800409a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	3248      	adds	r2, #72	@ 0x48
 80040a0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040b4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040b6:	6939      	ldr	r1, [r7, #16]
 80040b8:	3348      	adds	r3, #72	@ 0x48
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	440b      	add	r3, r1
 80040be:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	43db      	mvns	r3, r3
 80040d2:	401a      	ands	r2, r3
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80040da:	e007      	b.n	80040ec <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	401a      	ands	r2, r3
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004106:	e007      	b.n	8004118 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	431a      	orrs	r2, r3
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d107      	bne.n	8004130 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	431a      	orrs	r2, r3
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004136:	f023 0201 	bic.w	r2, r3, #1
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004140:	2300      	movs	r3, #0
 8004142:	e006      	b.n	8004152 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004148:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40006400 	.word	0x40006400

08004164 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	2b01      	cmp	r3, #1
 8004176:	d12e      	bne.n	80041d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004190:	f7ff f9de 	bl	8003550 <HAL_GetTick>
 8004194:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004196:	e012      	b.n	80041be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004198:	f7ff f9da 	bl	8003550 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b0a      	cmp	r3, #10
 80041a4:	d90b      	bls.n	80041be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2205      	movs	r2, #5
 80041b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e012      	b.n	80041e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f003 0301 	and.w	r3, r3, #1
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e5      	bne.n	8004198 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	e006      	b.n	80041e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041da:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b089      	sub	sp, #36	@ 0x24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004200:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800420a:	7ffb      	ldrb	r3, [r7, #31]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d003      	beq.n	8004218 <HAL_CAN_AddTxMessage+0x2c>
 8004210:	7ffb      	ldrb	r3, [r7, #31]
 8004212:	2b02      	cmp	r3, #2
 8004214:	f040 80ad 	bne.w	8004372 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004218:	69bb      	ldr	r3, [r7, #24]
 800421a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10a      	bne.n	8004238 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004228:	2b00      	cmp	r3, #0
 800422a:	d105      	bne.n	8004238 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 8095 	beq.w	8004362 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	0e1b      	lsrs	r3, r3, #24
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004242:	2201      	movs	r2, #1
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	409a      	lsls	r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d10d      	bne.n	8004270 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800425e:	68f9      	ldr	r1, [r7, #12]
 8004260:	6809      	ldr	r1, [r1, #0]
 8004262:	431a      	orrs	r2, r3
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	3318      	adds	r3, #24
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	440b      	add	r3, r1
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	e00f      	b.n	8004290 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800427a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004280:	68f9      	ldr	r1, [r7, #12]
 8004282:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004284:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	3318      	adds	r3, #24
 800428a:	011b      	lsls	r3, r3, #4
 800428c:	440b      	add	r3, r1
 800428e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6819      	ldr	r1, [r3, #0]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	3318      	adds	r3, #24
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	440b      	add	r3, r1
 80042a0:	3304      	adds	r3, #4
 80042a2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	7d1b      	ldrb	r3, [r3, #20]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d111      	bne.n	80042d0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	3318      	adds	r3, #24
 80042b4:	011b      	lsls	r3, r3, #4
 80042b6:	4413      	add	r3, r2
 80042b8:	3304      	adds	r3, #4
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	6811      	ldr	r1, [r2, #0]
 80042c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	3318      	adds	r3, #24
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	440b      	add	r3, r1
 80042cc:	3304      	adds	r3, #4
 80042ce:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3307      	adds	r3, #7
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	061a      	lsls	r2, r3, #24
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3306      	adds	r3, #6
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	041b      	lsls	r3, r3, #16
 80042e0:	431a      	orrs	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3305      	adds	r3, #5
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	4313      	orrs	r3, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	3204      	adds	r2, #4
 80042f0:	7812      	ldrb	r2, [r2, #0]
 80042f2:	4610      	mov	r0, r2
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	6811      	ldr	r1, [r2, #0]
 80042f8:	ea43 0200 	orr.w	r2, r3, r0
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	440b      	add	r3, r1
 8004302:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004306:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3303      	adds	r3, #3
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	061a      	lsls	r2, r3, #24
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	3302      	adds	r3, #2
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3301      	adds	r3, #1
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	4313      	orrs	r3, r2
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	7812      	ldrb	r2, [r2, #0]
 8004328:	4610      	mov	r0, r2
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	6811      	ldr	r1, [r2, #0]
 800432e:	ea43 0200 	orr.w	r2, r3, r0
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	440b      	add	r3, r1
 8004338:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800433c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	3318      	adds	r3, #24
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	4413      	add	r3, r2
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	6811      	ldr	r1, [r2, #0]
 8004350:	f043 0201 	orr.w	r2, r3, #1
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	3318      	adds	r3, #24
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	440b      	add	r3, r1
 800435c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	e00e      	b.n	8004380 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004366:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e006      	b.n	8004380 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004376:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3724      	adds	r7, #36	@ 0x24
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800438c:	b480      	push	{r7}
 800438e:	b087      	sub	sp, #28
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043a0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d003      	beq.n	80043b0 <HAL_CAN_GetRxMessage+0x24>
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	f040 8103 	bne.w	80045b6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10e      	bne.n	80043d4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d116      	bne.n	80043f2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0f7      	b.n	80045c4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d107      	bne.n	80043f2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e0e8      	b.n	80045c4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	331b      	adds	r3, #27
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	4413      	add	r3, r2
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0204 	and.w	r2, r3, #4
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10c      	bne.n	800442a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	331b      	adds	r3, #27
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	4413      	add	r3, r2
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	0d5b      	lsrs	r3, r3, #21
 8004420:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	e00b      	b.n	8004442 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	331b      	adds	r3, #27
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	4413      	add	r3, r2
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	08db      	lsrs	r3, r3, #3
 800443a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	331b      	adds	r3, #27
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	4413      	add	r3, r2
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0202 	and.w	r2, r3, #2
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	331b      	adds	r3, #27
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	4413      	add	r3, r2
 8004464:	3304      	adds	r3, #4
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0308 	and.w	r3, r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2208      	movs	r2, #8
 8004474:	611a      	str	r2, [r3, #16]
 8004476:	e00b      	b.n	8004490 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	331b      	adds	r3, #27
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	4413      	add	r3, r2
 8004484:	3304      	adds	r3, #4
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 020f 	and.w	r2, r3, #15
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	331b      	adds	r3, #27
 8004498:	011b      	lsls	r3, r3, #4
 800449a:	4413      	add	r3, r2
 800449c:	3304      	adds	r3, #4
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	0a1b      	lsrs	r3, r3, #8
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	331b      	adds	r3, #27
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	4413      	add	r3, r2
 80044b4:	3304      	adds	r3, #4
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	0c1b      	lsrs	r3, r3, #16
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	4413      	add	r3, r2
 80044e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	0a1a      	lsrs	r2, r3, #8
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	3301      	adds	r3, #1
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	4413      	add	r3, r2
 80044fa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	0c1a      	lsrs	r2, r3, #16
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	3302      	adds	r3, #2
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	4413      	add	r3, r2
 8004514:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	0e1a      	lsrs	r2, r3, #24
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	3303      	adds	r3, #3
 8004520:	b2d2      	uxtb	r2, r2
 8004522:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	4413      	add	r3, r2
 800452e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	3304      	adds	r3, #4
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	4413      	add	r3, r2
 8004546:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0a1a      	lsrs	r2, r3, #8
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	3305      	adds	r3, #5
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	4413      	add	r3, r2
 8004560:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	0c1a      	lsrs	r2, r3, #16
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	3306      	adds	r3, #6
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	4413      	add	r3, r2
 800457a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	0e1a      	lsrs	r2, r3, #24
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	3307      	adds	r3, #7
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d108      	bne.n	80045a2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0220 	orr.w	r2, r2, #32
 800459e:	60da      	str	r2, [r3, #12]
 80045a0:	e007      	b.n	80045b2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	691a      	ldr	r2, [r3, #16]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0220 	orr.w	r2, r2, #32
 80045b0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	e006      	b.n	80045c4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
  }
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	371c      	adds	r7, #28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80045e0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d002      	beq.n	80045ee <HAL_CAN_ActivateNotification+0x1e>
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d109      	bne.n	8004602 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6959      	ldr	r1, [r3, #20]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	683a      	ldr	r2, [r7, #0]
 80045fa:	430a      	orrs	r2, r1
 80045fc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e006      	b.n	8004610 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004606:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
  }
}
 8004610:	4618      	mov	r0, r3
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08a      	sub	sp, #40	@ 0x28
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004624:	2300      	movs	r3, #0
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d07c      	beq.n	800475c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d023      	beq.n	80046b4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2201      	movs	r2, #1
 8004672:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f983 	bl	800498a <HAL_CAN_TxMailbox0CompleteCallback>
 8004684:	e016      	b.n	80046b4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d004      	beq.n	800469a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004696:	627b      	str	r3, [r7, #36]	@ 0x24
 8004698:	e00c      	b.n	80046b4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	f003 0308 	and.w	r3, r3, #8
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80046a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ac:	e002      	b.n	80046b4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f989 	bl	80049c6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d024      	beq.n	8004708 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 f963 	bl	800499e <HAL_CAN_TxMailbox1CompleteCallback>
 80046d8:	e016      	b.n	8004708 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d004      	beq.n	80046ee <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80046e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80046ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ec:	e00c      	b.n	8004708 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d004      	beq.n	8004702 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004700:	e002      	b.n	8004708 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 f969 	bl	80049da <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d024      	beq.n	800475c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800471a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f000 f943 	bl	80049b2 <HAL_CAN_TxMailbox2CompleteCallback>
 800472c:	e016      	b.n	800475c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d004      	beq.n	8004742 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004740:	e00c      	b.n	800475c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d004      	beq.n	8004756 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24
 8004754:	e002      	b.n	800475c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f949 	bl	80049ee <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800475c:	6a3b      	ldr	r3, [r7, #32]
 800475e:	f003 0308 	and.w	r3, r3, #8
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00c      	beq.n	8004780 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b00      	cmp	r3, #0
 800476e:	d007      	beq.n	8004780 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004776:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2210      	movs	r2, #16
 800477e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00b      	beq.n	80047a2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d006      	beq.n	80047a2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2208      	movs	r2, #8
 800479a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f930 	bl	8004a02 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d009      	beq.n	80047c0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fd f948 	bl	8001a50 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00c      	beq.n	80047e4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d007      	beq.n	80047e4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047da:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2210      	movs	r2, #16
 80047e2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80047e4:	6a3b      	ldr	r3, [r7, #32]
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d006      	beq.n	8004806 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2208      	movs	r2, #8
 80047fe:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f912 	bl	8004a2a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b00      	cmp	r3, #0
 800480e:	d009      	beq.n	8004824 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f8f9 	bl	8004a16 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b00      	cmp	r3, #0
 8004836:	d006      	beq.n	8004846 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2210      	movs	r2, #16
 800483e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f8fc 	bl	8004a3e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00b      	beq.n	8004868 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f003 0308 	and.w	r3, r3, #8
 8004856:	2b00      	cmp	r3, #0
 8004858:	d006      	beq.n	8004868 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2208      	movs	r2, #8
 8004860:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f8f5 	bl	8004a52 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d07b      	beq.n	800496a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d072      	beq.n	8004962 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d008      	beq.n	80048b4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80048ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ae:	f043 0302 	orr.w	r3, r3, #2
 80048b2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d008      	beq.n	80048d0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d003      	beq.n	80048d0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80048c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ca:	f043 0304 	orr.w	r3, r3, #4
 80048ce:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d043      	beq.n	8004962 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d03e      	beq.n	8004962 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048ea:	2b60      	cmp	r3, #96	@ 0x60
 80048ec:	d02b      	beq.n	8004946 <HAL_CAN_IRQHandler+0x32a>
 80048ee:	2b60      	cmp	r3, #96	@ 0x60
 80048f0:	d82e      	bhi.n	8004950 <HAL_CAN_IRQHandler+0x334>
 80048f2:	2b50      	cmp	r3, #80	@ 0x50
 80048f4:	d022      	beq.n	800493c <HAL_CAN_IRQHandler+0x320>
 80048f6:	2b50      	cmp	r3, #80	@ 0x50
 80048f8:	d82a      	bhi.n	8004950 <HAL_CAN_IRQHandler+0x334>
 80048fa:	2b40      	cmp	r3, #64	@ 0x40
 80048fc:	d019      	beq.n	8004932 <HAL_CAN_IRQHandler+0x316>
 80048fe:	2b40      	cmp	r3, #64	@ 0x40
 8004900:	d826      	bhi.n	8004950 <HAL_CAN_IRQHandler+0x334>
 8004902:	2b30      	cmp	r3, #48	@ 0x30
 8004904:	d010      	beq.n	8004928 <HAL_CAN_IRQHandler+0x30c>
 8004906:	2b30      	cmp	r3, #48	@ 0x30
 8004908:	d822      	bhi.n	8004950 <HAL_CAN_IRQHandler+0x334>
 800490a:	2b10      	cmp	r3, #16
 800490c:	d002      	beq.n	8004914 <HAL_CAN_IRQHandler+0x2f8>
 800490e:	2b20      	cmp	r3, #32
 8004910:	d005      	beq.n	800491e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004912:	e01d      	b.n	8004950 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004916:	f043 0308 	orr.w	r3, r3, #8
 800491a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800491c:	e019      	b.n	8004952 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	f043 0310 	orr.w	r3, r3, #16
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004926:	e014      	b.n	8004952 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492a:	f043 0320 	orr.w	r3, r3, #32
 800492e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004930:	e00f      	b.n	8004952 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004938:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800493a:	e00a      	b.n	8004952 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004944:	e005      	b.n	8004952 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800494e:	e000      	b.n	8004952 <HAL_CAN_IRQHandler+0x336>
            break;
 8004950:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699a      	ldr	r2, [r3, #24]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004960:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2204      	movs	r2, #4
 8004968:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800496a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f872 	bl	8004a66 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004982:	bf00      	nop
 8004984:	3728      	adds	r7, #40	@ 0x28
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800498a:	b480      	push	{r7}
 800498c:	b083      	sub	sp, #12
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004992:	bf00      	nop
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a98:	4013      	ands	r3, r2
 8004a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aae:	4a04      	ldr	r2, [pc, #16]	@ (8004ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	60d3      	str	r3, [r2, #12]
}
 8004ab4:	bf00      	nop
 8004ab6:	3714      	adds	r7, #20
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	e000ed00 	.word	0xe000ed00

08004ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ac8:	4b04      	ldr	r3, [pc, #16]	@ (8004adc <__NVIC_GetPriorityGrouping+0x18>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	0a1b      	lsrs	r3, r3, #8
 8004ace:	f003 0307 	and.w	r3, r3, #7
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	e000ed00 	.word	0xe000ed00

08004ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	db0b      	blt.n	8004b0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	f003 021f 	and.w	r2, r3, #31
 8004af8:	4907      	ldr	r1, [pc, #28]	@ (8004b18 <__NVIC_EnableIRQ+0x38>)
 8004afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	2001      	movs	r0, #1
 8004b02:	fa00 f202 	lsl.w	r2, r0, r2
 8004b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b0a:	bf00      	nop
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	e000e100 	.word	0xe000e100

08004b1c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	4603      	mov	r3, r0
 8004b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	db12      	blt.n	8004b54 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b2e:	79fb      	ldrb	r3, [r7, #7]
 8004b30:	f003 021f 	and.w	r2, r3, #31
 8004b34:	490a      	ldr	r1, [pc, #40]	@ (8004b60 <__NVIC_DisableIRQ+0x44>)
 8004b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b42:	3320      	adds	r3, #32
 8004b44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b48:	f3bf 8f4f 	dsb	sy
}
 8004b4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b4e:	f3bf 8f6f 	isb	sy
}
 8004b52:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr
 8004b60:	e000e100 	.word	0xe000e100

08004b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	6039      	str	r1, [r7, #0]
 8004b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	db0a      	blt.n	8004b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	490c      	ldr	r1, [pc, #48]	@ (8004bb0 <__NVIC_SetPriority+0x4c>)
 8004b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b82:	0112      	lsls	r2, r2, #4
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	440b      	add	r3, r1
 8004b88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b8c:	e00a      	b.n	8004ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	4908      	ldr	r1, [pc, #32]	@ (8004bb4 <__NVIC_SetPriority+0x50>)
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	f003 030f 	and.w	r3, r3, #15
 8004b9a:	3b04      	subs	r3, #4
 8004b9c:	0112      	lsls	r2, r2, #4
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	761a      	strb	r2, [r3, #24]
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	e000e100 	.word	0xe000e100
 8004bb4:	e000ed00 	.word	0xe000ed00

08004bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b089      	sub	sp, #36	@ 0x24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f1c3 0307 	rsb	r3, r3, #7
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	bf28      	it	cs
 8004bd6:	2304      	movcs	r3, #4
 8004bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	2b06      	cmp	r3, #6
 8004be0:	d902      	bls.n	8004be8 <NVIC_EncodePriority+0x30>
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3b03      	subs	r3, #3
 8004be6:	e000      	b.n	8004bea <NVIC_EncodePriority+0x32>
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bec:	f04f 32ff 	mov.w	r2, #4294967295
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf6:	43da      	mvns	r2, r3
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	401a      	ands	r2, r3
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c00:	f04f 31ff 	mov.w	r1, #4294967295
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0a:	43d9      	mvns	r1, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c10:	4313      	orrs	r3, r2
         );
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3724      	adds	r7, #36	@ 0x24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr
	...

08004c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c30:	d301      	bcc.n	8004c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c32:	2301      	movs	r3, #1
 8004c34:	e00f      	b.n	8004c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c36:	4a0a      	ldr	r2, [pc, #40]	@ (8004c60 <SysTick_Config+0x40>)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c3e:	210f      	movs	r1, #15
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	f7ff ff8e 	bl	8004b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c48:	4b05      	ldr	r3, [pc, #20]	@ (8004c60 <SysTick_Config+0x40>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c4e:	4b04      	ldr	r3, [pc, #16]	@ (8004c60 <SysTick_Config+0x40>)
 8004c50:	2207      	movs	r2, #7
 8004c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	e000e010 	.word	0xe000e010

08004c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff ff05 	bl	8004a7c <__NVIC_SetPriorityGrouping>
}
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b086      	sub	sp, #24
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	4603      	mov	r3, r0
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	607a      	str	r2, [r7, #4]
 8004c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c8c:	f7ff ff1a 	bl	8004ac4 <__NVIC_GetPriorityGrouping>
 8004c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	6978      	ldr	r0, [r7, #20]
 8004c98:	f7ff ff8e 	bl	8004bb8 <NVIC_EncodePriority>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff ff5d 	bl	8004b64 <__NVIC_SetPriority>
}
 8004caa:	bf00      	nop
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b082      	sub	sp, #8
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	4603      	mov	r3, r0
 8004cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff ff0d 	bl	8004ae0 <__NVIC_EnableIRQ>
}
 8004cc6:	bf00      	nop
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b082      	sub	sp, #8
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f7ff ff1d 	bl	8004b1c <__NVIC_DisableIRQ>
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b082      	sub	sp, #8
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff ff94 	bl	8004c20 <SysTick_Config>
 8004cf8:	4603      	mov	r3, r0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d004      	beq.n	8004d20 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2280      	movs	r2, #128	@ 0x80
 8004d1a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e00c      	b.n	8004d3a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2205      	movs	r2, #5
 8004d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f022 0201 	bic.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr

08004d46 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d54:	b2db      	uxtb	r3, r3
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	370c      	adds	r7, #12
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
	...

08004d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b089      	sub	sp, #36	@ 0x24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	e16b      	b.n	8005058 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d80:	2201      	movs	r2, #1
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4013      	ands	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	f040 815a 	bne.w	8005052 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d005      	beq.n	8004db6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d130      	bne.n	8004e18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	2203      	movs	r2, #3
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dec:	2201      	movs	r2, #1
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	69ba      	ldr	r2, [r7, #24]
 8004df8:	4013      	ands	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	091b      	lsrs	r3, r3, #4
 8004e02:	f003 0201 	and.w	r2, r3, #1
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 0303 	and.w	r3, r3, #3
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d017      	beq.n	8004e54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	2203      	movs	r2, #3
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	689a      	ldr	r2, [r3, #8]
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d123      	bne.n	8004ea8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	08da      	lsrs	r2, r3, #3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3208      	adds	r2, #8
 8004e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	220f      	movs	r2, #15
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	43db      	mvns	r3, r3
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	4013      	ands	r3, r2
 8004e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	691a      	ldr	r2, [r3, #16]
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	f003 0307 	and.w	r3, r3, #7
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	08da      	lsrs	r2, r3, #3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3208      	adds	r2, #8
 8004ea2:	69b9      	ldr	r1, [r7, #24]
 8004ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	005b      	lsls	r3, r3, #1
 8004eb2:	2203      	movs	r2, #3
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 0203 	and.w	r2, r3, #3
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 80b4 	beq.w	8005052 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eea:	2300      	movs	r3, #0
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	4b60      	ldr	r3, [pc, #384]	@ (8005070 <HAL_GPIO_Init+0x30c>)
 8004ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ef2:	4a5f      	ldr	r2, [pc, #380]	@ (8005070 <HAL_GPIO_Init+0x30c>)
 8004ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004efa:	4b5d      	ldr	r3, [pc, #372]	@ (8005070 <HAL_GPIO_Init+0x30c>)
 8004efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f06:	4a5b      	ldr	r2, [pc, #364]	@ (8005074 <HAL_GPIO_Init+0x310>)
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	089b      	lsrs	r3, r3, #2
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	220f      	movs	r2, #15
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	43db      	mvns	r3, r3
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	4013      	ands	r3, r2
 8004f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a52      	ldr	r2, [pc, #328]	@ (8005078 <HAL_GPIO_Init+0x314>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d02b      	beq.n	8004f8a <HAL_GPIO_Init+0x226>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a51      	ldr	r2, [pc, #324]	@ (800507c <HAL_GPIO_Init+0x318>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d025      	beq.n	8004f86 <HAL_GPIO_Init+0x222>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a50      	ldr	r2, [pc, #320]	@ (8005080 <HAL_GPIO_Init+0x31c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d01f      	beq.n	8004f82 <HAL_GPIO_Init+0x21e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a4f      	ldr	r2, [pc, #316]	@ (8005084 <HAL_GPIO_Init+0x320>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d019      	beq.n	8004f7e <HAL_GPIO_Init+0x21a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a4e      	ldr	r2, [pc, #312]	@ (8005088 <HAL_GPIO_Init+0x324>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <HAL_GPIO_Init+0x216>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a4d      	ldr	r2, [pc, #308]	@ (800508c <HAL_GPIO_Init+0x328>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00d      	beq.n	8004f76 <HAL_GPIO_Init+0x212>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a4c      	ldr	r2, [pc, #304]	@ (8005090 <HAL_GPIO_Init+0x32c>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d007      	beq.n	8004f72 <HAL_GPIO_Init+0x20e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a4b      	ldr	r2, [pc, #300]	@ (8005094 <HAL_GPIO_Init+0x330>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d101      	bne.n	8004f6e <HAL_GPIO_Init+0x20a>
 8004f6a:	2307      	movs	r3, #7
 8004f6c:	e00e      	b.n	8004f8c <HAL_GPIO_Init+0x228>
 8004f6e:	2308      	movs	r3, #8
 8004f70:	e00c      	b.n	8004f8c <HAL_GPIO_Init+0x228>
 8004f72:	2306      	movs	r3, #6
 8004f74:	e00a      	b.n	8004f8c <HAL_GPIO_Init+0x228>
 8004f76:	2305      	movs	r3, #5
 8004f78:	e008      	b.n	8004f8c <HAL_GPIO_Init+0x228>
 8004f7a:	2304      	movs	r3, #4
 8004f7c:	e006      	b.n	8004f8c <HAL_GPIO_Init+0x228>
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e004      	b.n	8004f8c <HAL_GPIO_Init+0x228>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e002      	b.n	8004f8c <HAL_GPIO_Init+0x228>
 8004f86:	2301      	movs	r3, #1
 8004f88:	e000      	b.n	8004f8c <HAL_GPIO_Init+0x228>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	69fa      	ldr	r2, [r7, #28]
 8004f8e:	f002 0203 	and.w	r2, r2, #3
 8004f92:	0092      	lsls	r2, r2, #2
 8004f94:	4093      	lsls	r3, r2
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f9c:	4935      	ldr	r1, [pc, #212]	@ (8005074 <HAL_GPIO_Init+0x310>)
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	089b      	lsrs	r3, r3, #2
 8004fa2:	3302      	adds	r3, #2
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004faa:	4b3b      	ldr	r3, [pc, #236]	@ (8005098 <HAL_GPIO_Init+0x334>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fce:	4a32      	ldr	r2, [pc, #200]	@ (8005098 <HAL_GPIO_Init+0x334>)
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fd4:	4b30      	ldr	r3, [pc, #192]	@ (8005098 <HAL_GPIO_Init+0x334>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ff8:	4a27      	ldr	r2, [pc, #156]	@ (8005098 <HAL_GPIO_Init+0x334>)
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ffe:	4b26      	ldr	r3, [pc, #152]	@ (8005098 <HAL_GPIO_Init+0x334>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	43db      	mvns	r3, r3
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4013      	ands	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005022:	4a1d      	ldr	r2, [pc, #116]	@ (8005098 <HAL_GPIO_Init+0x334>)
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005028:	4b1b      	ldr	r3, [pc, #108]	@ (8005098 <HAL_GPIO_Init+0x334>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	43db      	mvns	r3, r3
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4013      	ands	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800504c:	4a12      	ldr	r2, [pc, #72]	@ (8005098 <HAL_GPIO_Init+0x334>)
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	3301      	adds	r3, #1
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	2b0f      	cmp	r3, #15
 800505c:	f67f ae90 	bls.w	8004d80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005060:	bf00      	nop
 8005062:	bf00      	nop
 8005064:	3724      	adds	r7, #36	@ 0x24
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40023800 	.word	0x40023800
 8005074:	40013800 	.word	0x40013800
 8005078:	40020000 	.word	0x40020000
 800507c:	40020400 	.word	0x40020400
 8005080:	40020800 	.word	0x40020800
 8005084:	40020c00 	.word	0x40020c00
 8005088:	40021000 	.word	0x40021000
 800508c:	40021400 	.word	0x40021400
 8005090:	40021800 	.word	0x40021800
 8005094:	40021c00 	.word	0x40021c00
 8005098:	40013c00 	.word	0x40013c00

0800509c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	887b      	ldrh	r3, [r7, #2]
 80050ae:	4013      	ands	r3, r2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	e001      	b.n	80050be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050ba:	2300      	movs	r3, #0
 80050bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050be:	7bfb      	ldrb	r3, [r7, #15]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	807b      	strh	r3, [r7, #2]
 80050d8:	4613      	mov	r3, r2
 80050da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050dc:	787b      	ldrb	r3, [r7, #1]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050e2:	887a      	ldrh	r2, [r7, #2]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050e8:	e003      	b.n	80050f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050ea:	887b      	ldrh	r3, [r7, #2]
 80050ec:	041a      	lsls	r2, r3, #16
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	619a      	str	r2, [r3, #24]
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	460b      	mov	r3, r1
 8005108:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005110:	887a      	ldrh	r2, [r7, #2]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4013      	ands	r3, r2
 8005116:	041a      	lsls	r2, r3, #16
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	43d9      	mvns	r1, r3
 800511c:	887b      	ldrh	r3, [r7, #2]
 800511e:	400b      	ands	r3, r1
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	619a      	str	r2, [r3, #24]
}
 8005126:	bf00      	nop
 8005128:	3714      	adds	r7, #20
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800513e:	4b08      	ldr	r3, [pc, #32]	@ (8005160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	88fb      	ldrh	r3, [r7, #6]
 8005144:	4013      	ands	r3, r2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d006      	beq.n	8005158 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800514a:	4a05      	ldr	r2, [pc, #20]	@ (8005160 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005150:	88fb      	ldrh	r3, [r7, #6]
 8005152:	4618      	mov	r0, r3
 8005154:	f7fc fb7a 	bl	800184c <HAL_GPIO_EXTI_Callback>
  }
}
 8005158:	bf00      	nop
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40013c00 	.word	0x40013c00

08005164 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e12b      	b.n	80053ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fd fee2 	bl	8002f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2224      	movs	r2, #36	@ 0x24
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0201 	bic.w	r2, r2, #1
 80051a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051c8:	f003 f814 	bl	80081f4 <HAL_RCC_GetPCLK1Freq>
 80051cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4a81      	ldr	r2, [pc, #516]	@ (80053d8 <HAL_I2C_Init+0x274>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d807      	bhi.n	80051e8 <HAL_I2C_Init+0x84>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a80      	ldr	r2, [pc, #512]	@ (80053dc <HAL_I2C_Init+0x278>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	bf94      	ite	ls
 80051e0:	2301      	movls	r3, #1
 80051e2:	2300      	movhi	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	e006      	b.n	80051f6 <HAL_I2C_Init+0x92>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4a7d      	ldr	r2, [pc, #500]	@ (80053e0 <HAL_I2C_Init+0x27c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	bf94      	ite	ls
 80051f0:	2301      	movls	r3, #1
 80051f2:	2300      	movhi	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e0e7      	b.n	80053ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4a78      	ldr	r2, [pc, #480]	@ (80053e4 <HAL_I2C_Init+0x280>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	0c9b      	lsrs	r3, r3, #18
 8005208:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	4a6a      	ldr	r2, [pc, #424]	@ (80053d8 <HAL_I2C_Init+0x274>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d802      	bhi.n	8005238 <HAL_I2C_Init+0xd4>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	3301      	adds	r3, #1
 8005236:	e009      	b.n	800524c <HAL_I2C_Init+0xe8>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800523e:	fb02 f303 	mul.w	r3, r2, r3
 8005242:	4a69      	ldr	r2, [pc, #420]	@ (80053e8 <HAL_I2C_Init+0x284>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	099b      	lsrs	r3, r3, #6
 800524a:	3301      	adds	r3, #1
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6812      	ldr	r2, [r2, #0]
 8005250:	430b      	orrs	r3, r1
 8005252:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800525e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	495c      	ldr	r1, [pc, #368]	@ (80053d8 <HAL_I2C_Init+0x274>)
 8005268:	428b      	cmp	r3, r1
 800526a:	d819      	bhi.n	80052a0 <HAL_I2C_Init+0x13c>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1e59      	subs	r1, r3, #1
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	fbb1 f3f3 	udiv	r3, r1, r3
 800527a:	1c59      	adds	r1, r3, #1
 800527c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005280:	400b      	ands	r3, r1
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00a      	beq.n	800529c <HAL_I2C_Init+0x138>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1e59      	subs	r1, r3, #1
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	fbb1 f3f3 	udiv	r3, r1, r3
 8005294:	3301      	adds	r3, #1
 8005296:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800529a:	e051      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 800529c:	2304      	movs	r3, #4
 800529e:	e04f      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d111      	bne.n	80052cc <HAL_I2C_Init+0x168>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	1e58      	subs	r0, r3, #1
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6859      	ldr	r1, [r3, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	440b      	add	r3, r1
 80052b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ba:	3301      	adds	r3, #1
 80052bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf0c      	ite	eq
 80052c4:	2301      	moveq	r3, #1
 80052c6:	2300      	movne	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	e012      	b.n	80052f2 <HAL_I2C_Init+0x18e>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1e58      	subs	r0, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6859      	ldr	r1, [r3, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	0099      	lsls	r1, r3, #2
 80052dc:	440b      	add	r3, r1
 80052de:	fbb0 f3f3 	udiv	r3, r0, r3
 80052e2:	3301      	adds	r3, #1
 80052e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_I2C_Init+0x196>
 80052f6:	2301      	movs	r3, #1
 80052f8:	e022      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10e      	bne.n	8005320 <HAL_I2C_Init+0x1bc>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	1e58      	subs	r0, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6859      	ldr	r1, [r3, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	440b      	add	r3, r1
 8005310:	fbb0 f3f3 	udiv	r3, r0, r3
 8005314:	3301      	adds	r3, #1
 8005316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800531a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800531e:	e00f      	b.n	8005340 <HAL_I2C_Init+0x1dc>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	1e58      	subs	r0, r3, #1
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6859      	ldr	r1, [r3, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	0099      	lsls	r1, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	fbb0 f3f3 	udiv	r3, r0, r3
 8005336:	3301      	adds	r3, #1
 8005338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800533c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005340:	6879      	ldr	r1, [r7, #4]
 8005342:	6809      	ldr	r1, [r1, #0]
 8005344:	4313      	orrs	r3, r2
 8005346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	69da      	ldr	r2, [r3, #28]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800536e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6911      	ldr	r1, [r2, #16]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68d2      	ldr	r2, [r2, #12]
 800537a:	4311      	orrs	r1, r2
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6812      	ldr	r2, [r2, #0]
 8005380:	430b      	orrs	r3, r1
 8005382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	695a      	ldr	r2, [r3, #20]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	430a      	orrs	r2, r1
 800539e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	000186a0 	.word	0x000186a0
 80053dc:	001e847f 	.word	0x001e847f
 80053e0:	003d08ff 	.word	0x003d08ff
 80053e4:	431bde83 	.word	0x431bde83
 80053e8:	10624dd3 	.word	0x10624dd3

080053ec <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053fe:	2b80      	cmp	r3, #128	@ 0x80
 8005400:	d103      	bne.n	800540a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2200      	movs	r2, #0
 8005408:	611a      	str	r2, [r3, #16]
  }
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
	...

08005418 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b088      	sub	sp, #32
 800541c:	af02      	add	r7, sp, #8
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	4608      	mov	r0, r1
 8005422:	4611      	mov	r1, r2
 8005424:	461a      	mov	r2, r3
 8005426:	4603      	mov	r3, r0
 8005428:	817b      	strh	r3, [r7, #10]
 800542a:	460b      	mov	r3, r1
 800542c:	813b      	strh	r3, [r7, #8]
 800542e:	4613      	mov	r3, r2
 8005430:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005432:	f7fe f88d 	bl	8003550 <HAL_GetTick>
 8005436:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b20      	cmp	r3, #32
 8005442:	f040 80d9 	bne.w	80055f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	2319      	movs	r3, #25
 800544c:	2201      	movs	r2, #1
 800544e:	496d      	ldr	r1, [pc, #436]	@ (8005604 <HAL_I2C_Mem_Write+0x1ec>)
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f002 f81b 	bl	800748c <I2C_WaitOnFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800545c:	2302      	movs	r3, #2
 800545e:	e0cc      	b.n	80055fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_I2C_Mem_Write+0x56>
 800546a:	2302      	movs	r3, #2
 800546c:	e0c5      	b.n	80055fa <HAL_I2C_Mem_Write+0x1e2>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b01      	cmp	r3, #1
 8005482:	d007      	beq.n	8005494 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2221      	movs	r2, #33	@ 0x21
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2240      	movs	r2, #64	@ 0x40
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a3a      	ldr	r2, [r7, #32]
 80054be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80054c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4a4d      	ldr	r2, [pc, #308]	@ (8005608 <HAL_I2C_Mem_Write+0x1f0>)
 80054d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054d6:	88f8      	ldrh	r0, [r7, #6]
 80054d8:	893a      	ldrh	r2, [r7, #8]
 80054da:	8979      	ldrh	r1, [r7, #10]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e2:	9300      	str	r3, [sp, #0]
 80054e4:	4603      	mov	r3, r0
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f001 fdaa 	bl	8007040 <I2C_RequestMemoryWrite>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d052      	beq.n	8005598 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e081      	b.n	80055fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f002 f8e0 	bl	80076c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00d      	beq.n	8005522 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800550a:	2b04      	cmp	r3, #4
 800550c:	d107      	bne.n	800551e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800551c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e06b      	b.n	80055fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005526:	781a      	ldrb	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005548:	b29b      	uxth	r3, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695b      	ldr	r3, [r3, #20]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b04      	cmp	r3, #4
 800555e:	d11b      	bne.n	8005598 <HAL_I2C_Mem_Write+0x180>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005564:	2b00      	cmp	r3, #0
 8005566:	d017      	beq.n	8005598 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556c:	781a      	ldrb	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005578:	1c5a      	adds	r2, r3, #1
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558e:	b29b      	uxth	r3, r3
 8005590:	3b01      	subs	r3, #1
 8005592:	b29a      	uxth	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800559c:	2b00      	cmp	r3, #0
 800559e:	d1aa      	bne.n	80054f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f002 f8d3 	bl	8007750 <I2C_WaitOnBTFFlagUntilTimeout>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00d      	beq.n	80055cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b4:	2b04      	cmp	r3, #4
 80055b6:	d107      	bne.n	80055c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e016      	b.n	80055fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80055f4:	2300      	movs	r3, #0
 80055f6:	e000      	b.n	80055fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80055f8:	2302      	movs	r3, #2
  }
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	00100002 	.word	0x00100002
 8005608:	ffff0000 	.word	0xffff0000

0800560c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08c      	sub	sp, #48	@ 0x30
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	4608      	mov	r0, r1
 8005616:	4611      	mov	r1, r2
 8005618:	461a      	mov	r2, r3
 800561a:	4603      	mov	r3, r0
 800561c:	817b      	strh	r3, [r7, #10]
 800561e:	460b      	mov	r3, r1
 8005620:	813b      	strh	r3, [r7, #8]
 8005622:	4613      	mov	r3, r2
 8005624:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005626:	f7fd ff93 	bl	8003550 <HAL_GetTick>
 800562a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b20      	cmp	r3, #32
 8005636:	f040 8214 	bne.w	8005a62 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800563a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	2319      	movs	r3, #25
 8005640:	2201      	movs	r2, #1
 8005642:	497b      	ldr	r1, [pc, #492]	@ (8005830 <HAL_I2C_Mem_Read+0x224>)
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f001 ff21 	bl	800748c <I2C_WaitOnFlagUntilTimeout>
 800564a:	4603      	mov	r3, r0
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005650:	2302      	movs	r3, #2
 8005652:	e207      	b.n	8005a64 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_I2C_Mem_Read+0x56>
 800565e:	2302      	movs	r3, #2
 8005660:	e200      	b.n	8005a64 <HAL_I2C_Mem_Read+0x458>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b01      	cmp	r3, #1
 8005676:	d007      	beq.n	8005688 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0201 	orr.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005696:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2222      	movs	r2, #34	@ 0x22
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2240      	movs	r2, #64	@ 0x40
 80056a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80056b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056be:	b29a      	uxth	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005834 <HAL_I2C_Mem_Read+0x228>)
 80056c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056ca:	88f8      	ldrh	r0, [r7, #6]
 80056cc:	893a      	ldrh	r2, [r7, #8]
 80056ce:	8979      	ldrh	r1, [r7, #10]
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	4603      	mov	r3, r0
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f001 fd46 	bl	800716c <I2C_RequestMemoryRead>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e1bc      	b.n	8005a64 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d113      	bne.n	800571a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056f2:	2300      	movs	r3, #0
 80056f4:	623b      	str	r3, [r7, #32]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695b      	ldr	r3, [r3, #20]
 80056fc:	623b      	str	r3, [r7, #32]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	623b      	str	r3, [r7, #32]
 8005706:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005716:	601a      	str	r2, [r3, #0]
 8005718:	e190      	b.n	8005a3c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800571e:	2b01      	cmp	r3, #1
 8005720:	d11b      	bne.n	800575a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005730:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005732:	2300      	movs	r3, #0
 8005734:	61fb      	str	r3, [r7, #28]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	61fb      	str	r3, [r7, #28]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	61fb      	str	r3, [r7, #28]
 8005746:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005756:	601a      	str	r2, [r3, #0]
 8005758:	e170      	b.n	8005a3c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800575e:	2b02      	cmp	r3, #2
 8005760:	d11b      	bne.n	800579a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005770:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005782:	2300      	movs	r3, #0
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	61bb      	str	r3, [r7, #24]
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	e150      	b.n	8005a3c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	699b      	ldr	r3, [r3, #24]
 80057ac:	617b      	str	r3, [r7, #20]
 80057ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80057b0:	e144      	b.n	8005a3c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	f200 80f1 	bhi.w	800599e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d123      	bne.n	800580c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f002 f83b 	bl	8007844 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e145      	b.n	8005a64 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e2:	b2d2      	uxtb	r2, r2
 80057e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ea:	1c5a      	adds	r2, r3, #1
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005800:	b29b      	uxth	r3, r3
 8005802:	3b01      	subs	r3, #1
 8005804:	b29a      	uxth	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800580a:	e117      	b.n	8005a3c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005810:	2b02      	cmp	r3, #2
 8005812:	d14e      	bne.n	80058b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005816:	9300      	str	r3, [sp, #0]
 8005818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581a:	2200      	movs	r2, #0
 800581c:	4906      	ldr	r1, [pc, #24]	@ (8005838 <HAL_I2C_Mem_Read+0x22c>)
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f001 fe34 	bl	800748c <I2C_WaitOnFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d008      	beq.n	800583c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e11a      	b.n	8005a64 <HAL_I2C_Mem_Read+0x458>
 800582e:	bf00      	nop
 8005830:	00100002 	.word	0x00100002
 8005834:	ffff0000 	.word	0xffff0000
 8005838:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800584a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005856:	b2d2      	uxtb	r2, r2
 8005858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b01      	subs	r3, #1
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005888:	b2d2      	uxtb	r2, r2
 800588a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589a:	3b01      	subs	r3, #1
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	3b01      	subs	r3, #1
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058b0:	e0c4      	b.n	8005a3c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b8:	2200      	movs	r2, #0
 80058ba:	496c      	ldr	r1, [pc, #432]	@ (8005a6c <HAL_I2C_Mem_Read+0x460>)
 80058bc:	68f8      	ldr	r0, [r7, #12]
 80058be:	f001 fde5 	bl	800748c <I2C_WaitOnFlagUntilTimeout>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d001      	beq.n	80058cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80058c8:	2301      	movs	r3, #1
 80058ca:	e0cb      	b.n	8005a64 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691a      	ldr	r2, [r3, #16]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800590e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005914:	2200      	movs	r2, #0
 8005916:	4955      	ldr	r1, [pc, #340]	@ (8005a6c <HAL_I2C_Mem_Read+0x460>)
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f001 fdb7 	bl	800748c <I2C_WaitOnFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e09d      	b.n	8005a64 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005936:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005942:	b2d2      	uxtb	r2, r2
 8005944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800599c:	e04e      	b.n	8005a3c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800599e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f001 ff4e 	bl	8007844 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e058      	b.n	8005a64 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	691a      	ldr	r2, [r3, #16]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ce:	3b01      	subs	r3, #1
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695b      	ldr	r3, [r3, #20]
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b04      	cmp	r3, #4
 80059f0:	d124      	bne.n	8005a3c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d107      	bne.n	8005a0a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a08:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a14:	b2d2      	uxtb	r2, r2
 8005a16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	1c5a      	adds	r2, r3, #1
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a26:	3b01      	subs	r3, #1
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	3b01      	subs	r3, #1
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f47f aeb6 	bne.w	80057b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e000      	b.n	8005a64 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005a62:	2302      	movs	r3, #2
  }
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3728      	adds	r7, #40	@ 0x28
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	00010004 	.word	0x00010004

08005a70 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a88:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a90:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a98:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a9a:	7bfb      	ldrb	r3, [r7, #15]
 8005a9c:	2b10      	cmp	r3, #16
 8005a9e:	d003      	beq.n	8005aa8 <HAL_I2C_EV_IRQHandler+0x38>
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	2b40      	cmp	r3, #64	@ 0x40
 8005aa4:	f040 80c1 	bne.w	8005c2a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10d      	bne.n	8005ade <HAL_I2C_EV_IRQHandler+0x6e>
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005ac8:	d003      	beq.n	8005ad2 <HAL_I2C_EV_IRQHandler+0x62>
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005ad0:	d101      	bne.n	8005ad6 <HAL_I2C_EV_IRQHandler+0x66>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e000      	b.n	8005ad8 <HAL_I2C_EV_IRQHandler+0x68>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	f000 8132 	beq.w	8005d42 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00c      	beq.n	8005b02 <HAL_I2C_EV_IRQHandler+0x92>
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	0a5b      	lsrs	r3, r3, #9
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d006      	beq.n	8005b02 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f001 ff31 	bl	800795c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fcf4 	bl	80064e8 <I2C_Master_SB>
 8005b00:	e092      	b.n	8005c28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	08db      	lsrs	r3, r3, #3
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d009      	beq.n	8005b22 <HAL_I2C_EV_IRQHandler+0xb2>
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	0a5b      	lsrs	r3, r3, #9
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fd6a 	bl	80065f4 <I2C_Master_ADD10>
 8005b20:	e082      	b.n	8005c28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	085b      	lsrs	r3, r3, #1
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d009      	beq.n	8005b42 <HAL_I2C_EV_IRQHandler+0xd2>
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	0a5b      	lsrs	r3, r3, #9
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fd84 	bl	8006648 <I2C_Master_ADDR>
 8005b40:	e072      	b.n	8005c28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	089b      	lsrs	r3, r3, #2
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d03b      	beq.n	8005bc6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b5c:	f000 80f3 	beq.w	8005d46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	09db      	lsrs	r3, r3, #7
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00f      	beq.n	8005b8c <HAL_I2C_EV_IRQHandler+0x11c>
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	0a9b      	lsrs	r3, r3, #10
 8005b70:	f003 0301 	and.w	r3, r3, #1
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d009      	beq.n	8005b8c <HAL_I2C_EV_IRQHandler+0x11c>
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	089b      	lsrs	r3, r3, #2
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 f94c 	bl	8005e22 <I2C_MasterTransmit_TXE>
 8005b8a:	e04d      	b.n	8005c28 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	089b      	lsrs	r3, r3, #2
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 80d6 	beq.w	8005d46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	0a5b      	lsrs	r3, r3, #9
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 80cf 	beq.w	8005d46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005ba8:	7bbb      	ldrb	r3, [r7, #14]
 8005baa:	2b21      	cmp	r3, #33	@ 0x21
 8005bac:	d103      	bne.n	8005bb6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f9d3 	bl	8005f5a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bb4:	e0c7      	b.n	8005d46 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
 8005bb8:	2b40      	cmp	r3, #64	@ 0x40
 8005bba:	f040 80c4 	bne.w	8005d46 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fa41 	bl	8006046 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bc4:	e0bf      	b.n	8005d46 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bd4:	f000 80b7 	beq.w	8005d46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	099b      	lsrs	r3, r3, #6
 8005bdc:	f003 0301 	and.w	r3, r3, #1
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00f      	beq.n	8005c04 <HAL_I2C_EV_IRQHandler+0x194>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	0a9b      	lsrs	r3, r3, #10
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d009      	beq.n	8005c04 <HAL_I2C_EV_IRQHandler+0x194>
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	089b      	lsrs	r3, r3, #2
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d103      	bne.n	8005c04 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 faba 	bl	8006176 <I2C_MasterReceive_RXNE>
 8005c02:	e011      	b.n	8005c28 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	089b      	lsrs	r3, r3, #2
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 809a 	beq.w	8005d46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	0a5b      	lsrs	r3, r3, #9
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 8093 	beq.w	8005d46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fb70 	bl	8006306 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c26:	e08e      	b.n	8005d46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c28:	e08d      	b.n	8005d46 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d004      	beq.n	8005c3c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	e007      	b.n	8005c4c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699b      	ldr	r3, [r3, #24]
 8005c42:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d012      	beq.n	8005c7e <HAL_I2C_EV_IRQHandler+0x20e>
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	0a5b      	lsrs	r3, r3, #9
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00c      	beq.n	8005c7e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005c74:	69b9      	ldr	r1, [r7, #24]
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 ff35 	bl	8006ae6 <I2C_Slave_ADDR>
 8005c7c:	e066      	b.n	8005d4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	091b      	lsrs	r3, r3, #4
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d009      	beq.n	8005c9e <HAL_I2C_EV_IRQHandler+0x22e>
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	0a5b      	lsrs	r3, r3, #9
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 ff70 	bl	8006b7c <I2C_Slave_STOPF>
 8005c9c:	e056      	b.n	8005d4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005c9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ca0:	2b21      	cmp	r3, #33	@ 0x21
 8005ca2:	d002      	beq.n	8005caa <HAL_I2C_EV_IRQHandler+0x23a>
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	2b29      	cmp	r3, #41	@ 0x29
 8005ca8:	d125      	bne.n	8005cf6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	09db      	lsrs	r3, r3, #7
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00f      	beq.n	8005cd6 <HAL_I2C_EV_IRQHandler+0x266>
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	0a9b      	lsrs	r3, r3, #10
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d009      	beq.n	8005cd6 <HAL_I2C_EV_IRQHandler+0x266>
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	089b      	lsrs	r3, r3, #2
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d103      	bne.n	8005cd6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fe4b 	bl	800696a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cd4:	e039      	b.n	8005d4a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	089b      	lsrs	r3, r3, #2
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d033      	beq.n	8005d4a <HAL_I2C_EV_IRQHandler+0x2da>
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	0a5b      	lsrs	r3, r3, #9
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d02d      	beq.n	8005d4a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fe78 	bl	80069e4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cf4:	e029      	b.n	8005d4a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	099b      	lsrs	r3, r3, #6
 8005cfa:	f003 0301 	and.w	r3, r3, #1
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00f      	beq.n	8005d22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	0a9b      	lsrs	r3, r3, #10
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d009      	beq.n	8005d22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	089b      	lsrs	r3, r3, #2
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d103      	bne.n	8005d22 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fe83 	bl	8006a26 <I2C_SlaveReceive_RXNE>
 8005d20:	e014      	b.n	8005d4c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	089b      	lsrs	r3, r3, #2
 8005d26:	f003 0301 	and.w	r3, r3, #1
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00e      	beq.n	8005d4c <HAL_I2C_EV_IRQHandler+0x2dc>
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	0a5b      	lsrs	r3, r3, #9
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d008      	beq.n	8005d4c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 feb1 	bl	8006aa2 <I2C_SlaveReceive_BTF>
 8005d40:	e004      	b.n	8005d4c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005d42:	bf00      	nop
 8005d44:	e002      	b.n	8005d4c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d46:	bf00      	nop
 8005d48:	e000      	b.n	8005d4c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d4a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005d5a:	bf00      	nop
 8005d5c:	370c      	adds	r7, #12
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005d6e:	bf00      	nop
 8005d70:	370c      	adds	r7, #12
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	70fb      	strb	r3, [r7, #3]
 8005dae:	4613      	mov	r3, r2
 8005db0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005db2:	bf00      	nop
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005dc6:	bf00      	nop
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b084      	sub	sp, #16
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e30:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e38:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e3e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d150      	bne.n	8005eea <I2C_MasterTransmit_TXE+0xc8>
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	2b21      	cmp	r3, #33	@ 0x21
 8005e4c:	d14d      	bne.n	8005eea <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d01d      	beq.n	8005e90 <I2C_MasterTransmit_TXE+0x6e>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d01a      	beq.n	8005e90 <I2C_MasterTransmit_TXE+0x6e>
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e60:	d016      	beq.n	8005e90 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e70:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2211      	movs	r2, #17
 8005e76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff ff62 	bl	8005d52 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e8e:	e060      	b.n	8005f52 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e9e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eae:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2220      	movs	r2, #32
 8005eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b40      	cmp	r3, #64	@ 0x40
 8005ec8:	d107      	bne.n	8005eda <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7ff ff7d 	bl	8005dd2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ed8:	e03b      	b.n	8005f52 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7ff ff35 	bl	8005d52 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ee8:	e033      	b.n	8005f52 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	2b21      	cmp	r3, #33	@ 0x21
 8005eee:	d005      	beq.n	8005efc <I2C_MasterTransmit_TXE+0xda>
 8005ef0:	7bbb      	ldrb	r3, [r7, #14]
 8005ef2:	2b40      	cmp	r3, #64	@ 0x40
 8005ef4:	d12d      	bne.n	8005f52 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005ef6:	7bfb      	ldrb	r3, [r7, #15]
 8005ef8:	2b22      	cmp	r3, #34	@ 0x22
 8005efa:	d12a      	bne.n	8005f52 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d108      	bne.n	8005f18 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f14:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005f16:	e01c      	b.n	8005f52 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b40      	cmp	r3, #64	@ 0x40
 8005f22:	d103      	bne.n	8005f2c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f88e 	bl	8006046 <I2C_MemoryTransmit_TXE_BTF>
}
 8005f2a:	e012      	b.n	8005f52 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f30:	781a      	ldrb	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f3c:	1c5a      	adds	r2, r3, #1
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005f50:	e7ff      	b.n	8005f52 <I2C_MasterTransmit_TXE+0x130>
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f66:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	2b21      	cmp	r3, #33	@ 0x21
 8005f72:	d164      	bne.n	800603e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d012      	beq.n	8005fa4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	781a      	ldrb	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005fa2:	e04c      	b.n	800603e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d01d      	beq.n	8005fe6 <I2C_MasterTransmit_BTF+0x8c>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d01a      	beq.n	8005fe6 <I2C_MasterTransmit_BTF+0x8c>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fb6:	d016      	beq.n	8005fe6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005fc6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2211      	movs	r2, #17
 8005fcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2220      	movs	r2, #32
 8005fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f7ff feb7 	bl	8005d52 <HAL_I2C_MasterTxCpltCallback>
}
 8005fe4:	e02b      	b.n	800603e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ff4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006004:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2220      	movs	r2, #32
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b40      	cmp	r3, #64	@ 0x40
 800601e:	d107      	bne.n	8006030 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff fed2 	bl	8005dd2 <HAL_I2C_MemTxCpltCallback>
}
 800602e:	e006      	b.n	800603e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7ff fe8a 	bl	8005d52 <HAL_I2C_MasterTxCpltCallback>
}
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006054:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800605a:	2b00      	cmp	r3, #0
 800605c:	d11d      	bne.n	800609a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006062:	2b01      	cmp	r3, #1
 8006064:	d10b      	bne.n	800607e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800606a:	b2da      	uxtb	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006076:	1c9a      	adds	r2, r3, #2
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800607c:	e077      	b.n	800616e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006082:	b29b      	uxth	r3, r3
 8006084:	121b      	asrs	r3, r3, #8
 8006086:	b2da      	uxtb	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006092:	1c5a      	adds	r2, r3, #1
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006098:	e069      	b.n	800616e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d10b      	bne.n	80060ba <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80060b8:	e059      	b.n	800616e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d152      	bne.n	8006168 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	2b22      	cmp	r3, #34	@ 0x22
 80060c6:	d10d      	bne.n	80060e4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060d6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80060e2:	e044      	b.n	800616e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d015      	beq.n	800611a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
 80060f0:	2b21      	cmp	r3, #33	@ 0x21
 80060f2:	d112      	bne.n	800611a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060f8:	781a      	ldrb	r2, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006118:	e029      	b.n	800616e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800611e:	b29b      	uxth	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d124      	bne.n	800616e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	2b21      	cmp	r3, #33	@ 0x21
 8006128:	d121      	bne.n	800616e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006138:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006148:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2220      	movs	r2, #32
 8006154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006160:	6878      	ldr	r0, [r7, #4]
 8006162:	f7ff fe36 	bl	8005dd2 <HAL_I2C_MemTxCpltCallback>
}
 8006166:	e002      	b.n	800616e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff f93f 	bl	80053ec <I2C_Flush_DR>
}
 800616e:	bf00      	nop
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006176:	b580      	push	{r7, lr}
 8006178:	b084      	sub	sp, #16
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b22      	cmp	r3, #34	@ 0x22
 8006188:	f040 80b9 	bne.w	80062fe <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006190:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006196:	b29b      	uxth	r3, r3
 8006198:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b03      	cmp	r3, #3
 800619e:	d921      	bls.n	80061e4 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061aa:	b2d2      	uxtb	r2, r2
 80061ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	1c5a      	adds	r2, r3, #1
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061bc:	b29b      	uxth	r3, r3
 80061be:	3b01      	subs	r3, #1
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b03      	cmp	r3, #3
 80061ce:	f040 8096 	bne.w	80062fe <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061e0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80061e2:	e08c      	b.n	80062fe <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d07f      	beq.n	80062ec <I2C_MasterReceive_RXNE+0x176>
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d002      	beq.n	80061f8 <I2C_MasterReceive_RXNE+0x82>
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d179      	bne.n	80062ec <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 faf1 	bl	80077e0 <I2C_WaitOnSTOPRequestThroughIT>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d14c      	bne.n	800629e <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006212:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006222:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800622e:	b2d2      	uxtb	r2, r2
 8006230:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006240:	b29b      	uxth	r3, r3
 8006242:	3b01      	subs	r3, #1
 8006244:	b29a      	uxth	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b40      	cmp	r3, #64	@ 0x40
 800625c:	d10a      	bne.n	8006274 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff fdba 	bl	8005de6 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006272:	e044      	b.n	80062fe <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b08      	cmp	r3, #8
 8006280:	d002      	beq.n	8006288 <I2C_MasterReceive_RXNE+0x112>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b20      	cmp	r3, #32
 8006286:	d103      	bne.n	8006290 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	631a      	str	r2, [r3, #48]	@ 0x30
 800628e:	e002      	b.n	8006296 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2212      	movs	r2, #18
 8006294:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f7ff fd65 	bl	8005d66 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800629c:	e02f      	b.n	80062fe <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685a      	ldr	r2, [r3, #4]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062ac:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c0:	1c5a      	adds	r2, r3, #1
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	3b01      	subs	r3, #1
 80062ce:	b29a      	uxth	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2220      	movs	r2, #32
 80062d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f7ff fd88 	bl	8005dfa <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80062ea:	e008      	b.n	80062fe <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685a      	ldr	r2, [r3, #4]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062fa:	605a      	str	r2, [r3, #4]
}
 80062fc:	e7ff      	b.n	80062fe <I2C_MasterReceive_RXNE+0x188>
 80062fe:	bf00      	nop
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006312:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b04      	cmp	r3, #4
 800631c:	d11b      	bne.n	8006356 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	685a      	ldr	r2, [r3, #4]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800632c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	691a      	ldr	r2, [r3, #16]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006340:	1c5a      	adds	r2, r3, #1
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800634a:	b29b      	uxth	r3, r3
 800634c:	3b01      	subs	r3, #1
 800634e:	b29a      	uxth	r2, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8006354:	e0c4      	b.n	80064e0 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800635a:	b29b      	uxth	r3, r3
 800635c:	2b03      	cmp	r3, #3
 800635e:	d129      	bne.n	80063b4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800636e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b04      	cmp	r3, #4
 8006374:	d00a      	beq.n	800638c <I2C_MasterReceive_BTF+0x86>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2b02      	cmp	r3, #2
 800637a:	d007      	beq.n	800638c <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800638a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691a      	ldr	r2, [r3, #16]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	3b01      	subs	r3, #1
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80063b2:	e095      	b.n	80064e0 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d17d      	bne.n	80064ba <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d002      	beq.n	80063ca <I2C_MasterReceive_BTF+0xc4>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b10      	cmp	r3, #16
 80063c8:	d108      	bne.n	80063dc <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	e016      	b.n	800640a <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d002      	beq.n	80063e8 <I2C_MasterReceive_BTF+0xe2>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d108      	bne.n	80063fa <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	e007      	b.n	800640a <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006408:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	691a      	ldr	r2, [r3, #16]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641c:	1c5a      	adds	r2, r3, #1
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006426:	b29b      	uxth	r3, r3
 8006428:	3b01      	subs	r3, #1
 800642a:	b29a      	uxth	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	691a      	ldr	r2, [r3, #16]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006442:	1c5a      	adds	r2, r3, #1
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800644c:	b29b      	uxth	r3, r3
 800644e:	3b01      	subs	r3, #1
 8006450:	b29a      	uxth	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006464:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b40      	cmp	r3, #64	@ 0x40
 8006478:	d10a      	bne.n	8006490 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f7ff fcac 	bl	8005de6 <HAL_I2C_MemRxCpltCallback>
}
 800648e:	e027      	b.n	80064e0 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b08      	cmp	r3, #8
 800649c:	d002      	beq.n	80064a4 <I2C_MasterReceive_BTF+0x19e>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2b20      	cmp	r3, #32
 80064a2:	d103      	bne.n	80064ac <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	631a      	str	r2, [r3, #48]	@ 0x30
 80064aa:	e002      	b.n	80064b2 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2212      	movs	r2, #18
 80064b0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7ff fc57 	bl	8005d66 <HAL_I2C_MasterRxCpltCallback>
}
 80064b8:	e012      	b.n	80064e0 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3b01      	subs	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80064e0:	bf00      	nop
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	2b40      	cmp	r3, #64	@ 0x40
 80064fa:	d117      	bne.n	800652c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006500:	2b00      	cmp	r3, #0
 8006502:	d109      	bne.n	8006518 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006508:	b2db      	uxtb	r3, r3
 800650a:	461a      	mov	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006514:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006516:	e067      	b.n	80065e8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800651c:	b2db      	uxtb	r3, r3
 800651e:	f043 0301 	orr.w	r3, r3, #1
 8006522:	b2da      	uxtb	r2, r3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	611a      	str	r2, [r3, #16]
}
 800652a:	e05d      	b.n	80065e8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006534:	d133      	bne.n	800659e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b21      	cmp	r3, #33	@ 0x21
 8006540:	d109      	bne.n	8006556 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006546:	b2db      	uxtb	r3, r3
 8006548:	461a      	mov	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006552:	611a      	str	r2, [r3, #16]
 8006554:	e008      	b.n	8006568 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655a:	b2db      	uxtb	r3, r3
 800655c:	f043 0301 	orr.w	r3, r3, #1
 8006560:	b2da      	uxtb	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800656c:	2b00      	cmp	r3, #0
 800656e:	d004      	beq.n	800657a <I2C_Master_SB+0x92>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006576:	2b00      	cmp	r3, #0
 8006578:	d108      	bne.n	800658c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657e:	2b00      	cmp	r3, #0
 8006580:	d032      	beq.n	80065e8 <I2C_Master_SB+0x100>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006588:	2b00      	cmp	r3, #0
 800658a:	d02d      	beq.n	80065e8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	685a      	ldr	r2, [r3, #4]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800659a:	605a      	str	r2, [r3, #4]
}
 800659c:	e024      	b.n	80065e8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10e      	bne.n	80065c4 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	11db      	asrs	r3, r3, #7
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	f003 0306 	and.w	r3, r3, #6
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	f063 030f 	orn	r3, r3, #15
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	611a      	str	r2, [r3, #16]
}
 80065c2:	e011      	b.n	80065e8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d10d      	bne.n	80065e8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	11db      	asrs	r3, r3, #7
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	f003 0306 	and.w	r3, r3, #6
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	f063 030e 	orn	r3, r3, #14
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	611a      	str	r2, [r3, #16]
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006600:	b2da      	uxtb	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800660c:	2b00      	cmp	r3, #0
 800660e:	d004      	beq.n	800661a <I2C_Master_ADD10+0x26>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006616:	2b00      	cmp	r3, #0
 8006618:	d108      	bne.n	800662c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00c      	beq.n	800663c <I2C_Master_ADD10+0x48>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800663a:	605a      	str	r2, [r3, #4]
  }
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006648:	b480      	push	{r7}
 800664a:	b091      	sub	sp, #68	@ 0x44
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006656:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006664:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b22      	cmp	r3, #34	@ 0x22
 8006670:	f040 8169 	bne.w	8006946 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10f      	bne.n	800669c <I2C_Master_ADDR+0x54>
 800667c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006680:	2b40      	cmp	r3, #64	@ 0x40
 8006682:	d10b      	bne.n	800669c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006684:	2300      	movs	r3, #0
 8006686:	633b      	str	r3, [r7, #48]	@ 0x30
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695b      	ldr	r3, [r3, #20]
 800668e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	633b      	str	r3, [r7, #48]	@ 0x30
 8006698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669a:	e160      	b.n	800695e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d11d      	bne.n	80066e0 <I2C_Master_ADDR+0x98>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80066ac:	d118      	bne.n	80066e0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ae:	2300      	movs	r3, #0
 80066b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066d2:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066d8:	1c5a      	adds	r2, r3, #1
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	651a      	str	r2, [r3, #80]	@ 0x50
 80066de:	e13e      	b.n	800695e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d113      	bne.n	8006712 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ea:	2300      	movs	r3, #0
 80066ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800670e:	601a      	str	r2, [r3, #0]
 8006710:	e115      	b.n	800693e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006716:	b29b      	uxth	r3, r3
 8006718:	2b01      	cmp	r3, #1
 800671a:	f040 808a 	bne.w	8006832 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800671e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006720:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006724:	d137      	bne.n	8006796 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006734:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006740:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006744:	d113      	bne.n	800676e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006754:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006756:	2300      	movs	r3, #0
 8006758:	627b      	str	r3, [r7, #36]	@ 0x24
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	627b      	str	r3, [r7, #36]	@ 0x24
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	627b      	str	r3, [r7, #36]	@ 0x24
 800676a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676c:	e0e7      	b.n	800693e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800676e:	2300      	movs	r3, #0
 8006770:	623b      	str	r3, [r7, #32]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	695b      	ldr	r3, [r3, #20]
 8006778:	623b      	str	r3, [r7, #32]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	623b      	str	r3, [r7, #32]
 8006782:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	e0d3      	b.n	800693e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006798:	2b08      	cmp	r3, #8
 800679a:	d02e      	beq.n	80067fa <I2C_Master_ADDR+0x1b2>
 800679c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800679e:	2b20      	cmp	r3, #32
 80067a0:	d02b      	beq.n	80067fa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80067a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067a4:	2b12      	cmp	r3, #18
 80067a6:	d102      	bne.n	80067ae <I2C_Master_ADDR+0x166>
 80067a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d125      	bne.n	80067fa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80067ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d00e      	beq.n	80067d2 <I2C_Master_ADDR+0x18a>
 80067b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d00b      	beq.n	80067d2 <I2C_Master_ADDR+0x18a>
 80067ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067bc:	2b10      	cmp	r3, #16
 80067be:	d008      	beq.n	80067d2 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	e007      	b.n	80067e2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80067e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e2:	2300      	movs	r3, #0
 80067e4:	61fb      	str	r3, [r7, #28]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	61fb      	str	r3, [r7, #28]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	61fb      	str	r3, [r7, #28]
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	e0a1      	b.n	800693e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006808:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800680a:	2300      	movs	r3, #0
 800680c:	61bb      	str	r3, [r7, #24]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	61bb      	str	r3, [r7, #24]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	61bb      	str	r3, [r7, #24]
 800681e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	e085      	b.n	800693e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006836:	b29b      	uxth	r3, r3
 8006838:	2b02      	cmp	r3, #2
 800683a:	d14d      	bne.n	80068d8 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	2b04      	cmp	r3, #4
 8006840:	d016      	beq.n	8006870 <I2C_Master_ADDR+0x228>
 8006842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006844:	2b02      	cmp	r3, #2
 8006846:	d013      	beq.n	8006870 <I2C_Master_ADDR+0x228>
 8006848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800684a:	2b10      	cmp	r3, #16
 800684c:	d010      	beq.n	8006870 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800685c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	e007      	b.n	8006880 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800687e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800688a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800688e:	d117      	bne.n	80068c0 <I2C_Master_ADDR+0x278>
 8006890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006892:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006896:	d00b      	beq.n	80068b0 <I2C_Master_ADDR+0x268>
 8006898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689a:	2b01      	cmp	r3, #1
 800689c:	d008      	beq.n	80068b0 <I2C_Master_ADDR+0x268>
 800689e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d005      	beq.n	80068b0 <I2C_Master_ADDR+0x268>
 80068a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a6:	2b10      	cmp	r3, #16
 80068a8:	d002      	beq.n	80068b0 <I2C_Master_ADDR+0x268>
 80068aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ac:	2b20      	cmp	r3, #32
 80068ae:	d107      	bne.n	80068c0 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	685a      	ldr	r2, [r3, #4]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80068be:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068c0:	2300      	movs	r3, #0
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	e032      	b.n	800693e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068e6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068f6:	d117      	bne.n	8006928 <I2C_Master_ADDR+0x2e0>
 80068f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068fe:	d00b      	beq.n	8006918 <I2C_Master_ADDR+0x2d0>
 8006900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006902:	2b01      	cmp	r3, #1
 8006904:	d008      	beq.n	8006918 <I2C_Master_ADDR+0x2d0>
 8006906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006908:	2b08      	cmp	r3, #8
 800690a:	d005      	beq.n	8006918 <I2C_Master_ADDR+0x2d0>
 800690c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690e:	2b10      	cmp	r3, #16
 8006910:	d002      	beq.n	8006918 <I2C_Master_ADDR+0x2d0>
 8006912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006914:	2b20      	cmp	r3, #32
 8006916:	d107      	bne.n	8006928 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685a      	ldr	r2, [r3, #4]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006926:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006928:	2300      	movs	r3, #0
 800692a:	613b      	str	r3, [r7, #16]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	613b      	str	r3, [r7, #16]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699b      	ldr	r3, [r3, #24]
 800693a:	613b      	str	r3, [r7, #16]
 800693c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006944:	e00b      	b.n	800695e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006946:	2300      	movs	r3, #0
 8006948:	60fb      	str	r3, [r7, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	695b      	ldr	r3, [r3, #20]
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	68fb      	ldr	r3, [r7, #12]
}
 800695c:	e7ff      	b.n	800695e <I2C_Master_ADDR+0x316>
 800695e:	bf00      	nop
 8006960:	3744      	adds	r7, #68	@ 0x44
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b084      	sub	sp, #16
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006978:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800697e:	b29b      	uxth	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d02b      	beq.n	80069dc <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006988:	781a      	ldrb	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006994:	1c5a      	adds	r2, r3, #1
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d114      	bne.n	80069dc <I2C_SlaveTransmit_TXE+0x72>
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	2b29      	cmp	r3, #41	@ 0x29
 80069b6:	d111      	bne.n	80069dc <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069c6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2221      	movs	r2, #33	@ 0x21
 80069cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2228      	movs	r2, #40	@ 0x28
 80069d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f7ff f9cf 	bl	8005d7a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80069dc:	bf00      	nop
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d011      	beq.n	8006a1a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a06:	1c5a      	adds	r2, r3, #1
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b084      	sub	sp, #16
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a34:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d02c      	beq.n	8006a9a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691a      	ldr	r2, [r3, #16]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a4a:	b2d2      	uxtb	r2, r2
 8006a4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a52:	1c5a      	adds	r2, r3, #1
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	b29a      	uxth	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d114      	bne.n	8006a9a <I2C_SlaveReceive_RXNE+0x74>
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a74:	d111      	bne.n	8006a9a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a84:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2222      	movs	r2, #34	@ 0x22
 8006a8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2228      	movs	r2, #40	@ 0x28
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff f97a 	bl	8005d8e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006a9a:	bf00      	nop
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b083      	sub	sp, #12
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d012      	beq.n	8006ada <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	691a      	ldr	r2, [r3, #16]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006abe:	b2d2      	uxtb	r2, r2
 8006ac0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	b29a      	uxth	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006af0:	2300      	movs	r3, #0
 8006af2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b00:	2b28      	cmp	r3, #40	@ 0x28
 8006b02:	d127      	bne.n	8006b54 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b12:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	089b      	lsrs	r3, r3, #2
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006b20:	2301      	movs	r3, #1
 8006b22:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	09db      	lsrs	r3, r3, #7
 8006b28:	f003 0301 	and.w	r3, r3, #1
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d103      	bne.n	8006b38 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	81bb      	strh	r3, [r7, #12]
 8006b36:	e002      	b.n	8006b3e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006b46:	89ba      	ldrh	r2, [r7, #12]
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff f928 	bl	8005da2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006b52:	e00e      	b.n	8006b72 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b54:	2300      	movs	r3, #0
 8006b56:	60bb      	str	r3, [r7, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	60bb      	str	r3, [r7, #8]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	60bb      	str	r3, [r7, #8]
 8006b68:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
	...

08006b7c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b8a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	685a      	ldr	r2, [r3, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b9a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	60bb      	str	r3, [r7, #8]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	60bb      	str	r3, [r7, #8]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f042 0201 	orr.w	r2, r2, #1
 8006bb6:	601a      	str	r2, [r3, #0]
 8006bb8:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bc8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bd8:	d172      	bne.n	8006cc0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	2b22      	cmp	r3, #34	@ 0x22
 8006bde:	d002      	beq.n	8006be6 <I2C_Slave_STOPF+0x6a>
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006be4:	d135      	bne.n	8006c52 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d005      	beq.n	8006c0a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c02:	f043 0204 	orr.w	r2, r3, #4
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685a      	ldr	r2, [r3, #4]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c18:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7fe f891 	bl	8004d46 <HAL_DMA_GetState>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d049      	beq.n	8006cbe <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c2e:	4a69      	ldr	r2, [pc, #420]	@ (8006dd4 <I2C_Slave_STOPF+0x258>)
 8006c30:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe f863 	bl	8004d02 <HAL_DMA_Abort_IT>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d03d      	beq.n	8006cbe <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c50:	e035      	b.n	8006cbe <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6e:	f043 0204 	orr.w	r2, r3, #4
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c84:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fe f85b 	bl	8004d46 <HAL_DMA_GetState>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d014      	beq.n	8006cc0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c9a:	4a4e      	ldr	r2, [pc, #312]	@ (8006dd4 <I2C_Slave_STOPF+0x258>)
 8006c9c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fe f82d 	bl	8004d02 <HAL_DMA_Abort_IT>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d008      	beq.n	8006cc0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006cb8:	4610      	mov	r0, r2
 8006cba:	4798      	blx	r3
 8006cbc:	e000      	b.n	8006cc0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006cbe:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d03e      	beq.n	8006d48 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	f003 0304 	and.w	r3, r3, #4
 8006cd4:	2b04      	cmp	r3, #4
 8006cd6:	d112      	bne.n	8006cfe <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691a      	ldr	r2, [r3, #16]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce2:	b2d2      	uxtb	r2, r2
 8006ce4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	b29a      	uxth	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d08:	2b40      	cmp	r3, #64	@ 0x40
 8006d0a:	d112      	bne.n	8006d32 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	691a      	ldr	r2, [r3, #16]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d16:	b2d2      	uxtb	r2, r2
 8006d18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	3b01      	subs	r3, #1
 8006d2c:	b29a      	uxth	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d005      	beq.n	8006d48 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d40:	f043 0204 	orr.w	r2, r3, #4
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d003      	beq.n	8006d58 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 f843 	bl	8006ddc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006d56:	e039      	b.n	8006dcc <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d5c:	d109      	bne.n	8006d72 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2228      	movs	r2, #40	@ 0x28
 8006d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff f80e 	bl	8005d8e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b28      	cmp	r3, #40	@ 0x28
 8006d7c:	d111      	bne.n	8006da2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a15      	ldr	r2, [pc, #84]	@ (8006dd8 <I2C_Slave_STOPF+0x25c>)
 8006d82:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7ff f80f 	bl	8005dbe <HAL_I2C_ListenCpltCallback>
}
 8006da0:	e014      	b.n	8006dcc <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da6:	2b22      	cmp	r3, #34	@ 0x22
 8006da8:	d002      	beq.n	8006db0 <I2C_Slave_STOPF+0x234>
 8006daa:	7bfb      	ldrb	r3, [r7, #15]
 8006dac:	2b22      	cmp	r3, #34	@ 0x22
 8006dae:	d10d      	bne.n	8006dcc <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f7fe ffe1 	bl	8005d8e <HAL_I2C_SlaveRxCpltCallback>
}
 8006dcc:	bf00      	nop
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	0800733d 	.word	0x0800733d
 8006dd8:	ffff0000 	.word	0xffff0000

08006ddc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006df2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006df4:	7bbb      	ldrb	r3, [r7, #14]
 8006df6:	2b10      	cmp	r3, #16
 8006df8:	d002      	beq.n	8006e00 <I2C_ITError+0x24>
 8006dfa:	7bbb      	ldrb	r3, [r7, #14]
 8006dfc:	2b40      	cmp	r3, #64	@ 0x40
 8006dfe:	d10a      	bne.n	8006e16 <I2C_ITError+0x3a>
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	2b22      	cmp	r3, #34	@ 0x22
 8006e04:	d107      	bne.n	8006e16 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e14:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
 8006e18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006e1c:	2b28      	cmp	r3, #40	@ 0x28
 8006e1e:	d107      	bne.n	8006e30 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2228      	movs	r2, #40	@ 0x28
 8006e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006e2e:	e015      	b.n	8006e5c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e3e:	d00a      	beq.n	8006e56 <I2C_ITError+0x7a>
 8006e40:	7bfb      	ldrb	r3, [r7, #15]
 8006e42:	2b60      	cmp	r3, #96	@ 0x60
 8006e44:	d007      	beq.n	8006e56 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e6a:	d162      	bne.n	8006f32 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e7a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d020      	beq.n	8006ecc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e8e:	4a6a      	ldr	r2, [pc, #424]	@ (8007038 <I2C_ITError+0x25c>)
 8006e90:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fd ff33 	bl	8004d02 <HAL_DMA_Abort_IT>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	f000 8089 	beq.w	8006fb6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0201 	bic.w	r2, r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	4798      	blx	r3
 8006eca:	e074      	b.n	8006fb6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed0:	4a59      	ldr	r2, [pc, #356]	@ (8007038 <I2C_ITError+0x25c>)
 8006ed2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fd ff12 	bl	8004d02 <HAL_DMA_Abort_IT>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d068      	beq.n	8006fb6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eee:	2b40      	cmp	r3, #64	@ 0x40
 8006ef0:	d10b      	bne.n	8006f0a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	691a      	ldr	r2, [r3, #16]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f022 0201 	bic.w	r2, r2, #1
 8006f18:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f2c:	4610      	mov	r0, r2
 8006f2e:	4798      	blx	r3
 8006f30:	e041      	b.n	8006fb6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b60      	cmp	r3, #96	@ 0x60
 8006f3c:	d125      	bne.n	8006f8a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f56:	2b40      	cmp	r3, #64	@ 0x40
 8006f58:	d10b      	bne.n	8006f72 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691a      	ldr	r2, [r3, #16]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f64:	b2d2      	uxtb	r2, r2
 8006f66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0201 	bic.w	r2, r2, #1
 8006f80:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f7fe ff43 	bl	8005e0e <HAL_I2C_AbortCpltCallback>
 8006f88:	e015      	b.n	8006fb6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f94:	2b40      	cmp	r3, #64	@ 0x40
 8006f96:	d10b      	bne.n	8006fb0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691a      	ldr	r2, [r3, #16]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7fe ff22 	bl	8005dfa <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10e      	bne.n	8006fe4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d109      	bne.n	8006fe4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d104      	bne.n	8006fe4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d007      	beq.n	8006ff4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ff2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ffa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b04      	cmp	r3, #4
 8007006:	d113      	bne.n	8007030 <I2C_ITError+0x254>
 8007008:	7bfb      	ldrb	r3, [r7, #15]
 800700a:	2b28      	cmp	r3, #40	@ 0x28
 800700c:	d110      	bne.n	8007030 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a0a      	ldr	r2, [pc, #40]	@ (800703c <I2C_ITError+0x260>)
 8007012:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2220      	movs	r2, #32
 800701e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fe fec7 	bl	8005dbe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007030:	bf00      	nop
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	0800733d 	.word	0x0800733d
 800703c:	ffff0000 	.word	0xffff0000

08007040 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af02      	add	r7, sp, #8
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	4608      	mov	r0, r1
 800704a:	4611      	mov	r1, r2
 800704c:	461a      	mov	r2, r3
 800704e:	4603      	mov	r3, r0
 8007050:	817b      	strh	r3, [r7, #10]
 8007052:	460b      	mov	r3, r1
 8007054:	813b      	strh	r3, [r7, #8]
 8007056:	4613      	mov	r3, r2
 8007058:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007068:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800706a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	2200      	movs	r2, #0
 8007072:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fa08 	bl	800748c <I2C_WaitOnFlagUntilTimeout>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00d      	beq.n	800709e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800708c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007090:	d103      	bne.n	800709a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007098:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e05f      	b.n	800715e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800709e:	897b      	ldrh	r3, [r7, #10]
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80070ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	6a3a      	ldr	r2, [r7, #32]
 80070b2:	492d      	ldr	r1, [pc, #180]	@ (8007168 <I2C_RequestMemoryWrite+0x128>)
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f000 fa63 	bl	8007580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d001      	beq.n	80070c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	e04c      	b.n	800715e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070c4:	2300      	movs	r3, #0
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	617b      	str	r3, [r7, #20]
 80070d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070dc:	6a39      	ldr	r1, [r7, #32]
 80070de:	68f8      	ldr	r0, [r7, #12]
 80070e0:	f000 faee 	bl	80076c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00d      	beq.n	8007106 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070ee:	2b04      	cmp	r3, #4
 80070f0:	d107      	bne.n	8007102 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007100:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e02b      	b.n	800715e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007106:	88fb      	ldrh	r3, [r7, #6]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d105      	bne.n	8007118 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800710c:	893b      	ldrh	r3, [r7, #8]
 800710e:	b2da      	uxtb	r2, r3
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	611a      	str	r2, [r3, #16]
 8007116:	e021      	b.n	800715c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007118:	893b      	ldrh	r3, [r7, #8]
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	b29b      	uxth	r3, r3
 800711e:	b2da      	uxtb	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007128:	6a39      	ldr	r1, [r7, #32]
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 fac8 	bl	80076c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00d      	beq.n	8007152 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713a:	2b04      	cmp	r3, #4
 800713c:	d107      	bne.n	800714e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800714c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e005      	b.n	800715e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007152:	893b      	ldrh	r3, [r7, #8]
 8007154:	b2da      	uxtb	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	00010002 	.word	0x00010002

0800716c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af02      	add	r7, sp, #8
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	4608      	mov	r0, r1
 8007176:	4611      	mov	r1, r2
 8007178:	461a      	mov	r2, r3
 800717a:	4603      	mov	r3, r0
 800717c:	817b      	strh	r3, [r7, #10]
 800717e:	460b      	mov	r3, r1
 8007180:	813b      	strh	r3, [r7, #8]
 8007182:	4613      	mov	r3, r2
 8007184:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007194:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 f96a 	bl	800748c <I2C_WaitOnFlagUntilTimeout>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00d      	beq.n	80071da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071cc:	d103      	bne.n	80071d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e0aa      	b.n	8007330 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071da:	897b      	ldrh	r3, [r7, #10]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	461a      	mov	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80071e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	6a3a      	ldr	r2, [r7, #32]
 80071ee:	4952      	ldr	r1, [pc, #328]	@ (8007338 <I2C_RequestMemoryRead+0x1cc>)
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f9c5 	bl	8007580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e097      	b.n	8007330 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007218:	6a39      	ldr	r1, [r7, #32]
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 fa50 	bl	80076c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00d      	beq.n	8007242 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722a:	2b04      	cmp	r3, #4
 800722c:	d107      	bne.n	800723e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800723c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e076      	b.n	8007330 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007242:	88fb      	ldrh	r3, [r7, #6]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d105      	bne.n	8007254 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007248:	893b      	ldrh	r3, [r7, #8]
 800724a:	b2da      	uxtb	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	611a      	str	r2, [r3, #16]
 8007252:	e021      	b.n	8007298 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007254:	893b      	ldrh	r3, [r7, #8]
 8007256:	0a1b      	lsrs	r3, r3, #8
 8007258:	b29b      	uxth	r3, r3
 800725a:	b2da      	uxtb	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007264:	6a39      	ldr	r1, [r7, #32]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 fa2a 	bl	80076c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00d      	beq.n	800728e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007276:	2b04      	cmp	r3, #4
 8007278:	d107      	bne.n	800728a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007288:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e050      	b.n	8007330 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800728e:	893b      	ldrh	r3, [r7, #8]
 8007290:	b2da      	uxtb	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007298:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800729a:	6a39      	ldr	r1, [r7, #32]
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 fa0f 	bl	80076c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00d      	beq.n	80072c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d107      	bne.n	80072c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e035      	b.n	8007330 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d6:	9300      	str	r3, [sp, #0]
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	2200      	movs	r2, #0
 80072dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80072e0:	68f8      	ldr	r0, [r7, #12]
 80072e2:	f000 f8d3 	bl	800748c <I2C_WaitOnFlagUntilTimeout>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00d      	beq.n	8007308 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072fa:	d103      	bne.n	8007304 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007302:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e013      	b.n	8007330 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007308:	897b      	ldrh	r3, [r7, #10]
 800730a:	b2db      	uxtb	r3, r3
 800730c:	f043 0301 	orr.w	r3, r3, #1
 8007310:	b2da      	uxtb	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731a:	6a3a      	ldr	r2, [r7, #32]
 800731c:	4906      	ldr	r1, [pc, #24]	@ (8007338 <I2C_RequestMemoryRead+0x1cc>)
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f92e 	bl	8007580 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e000      	b.n	8007330 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	00010002 	.word	0x00010002

0800733c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007344:	2300      	movs	r3, #0
 8007346:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007354:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8007356:	4b4b      	ldr	r3, [pc, #300]	@ (8007484 <I2C_DMAAbort+0x148>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	08db      	lsrs	r3, r3, #3
 800735c:	4a4a      	ldr	r2, [pc, #296]	@ (8007488 <I2C_DMAAbort+0x14c>)
 800735e:	fba2 2303 	umull	r2, r3, r2, r3
 8007362:	0a1a      	lsrs	r2, r3, #8
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	00da      	lsls	r2, r3, #3
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800737a:	f043 0220 	orr.w	r2, r3, #32
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007382:	e00a      	b.n	800739a <I2C_DMAAbort+0x5e>
    }
    count--;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	3b01      	subs	r3, #1
 8007388:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007398:	d0ea      	beq.n	8007370 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073a6:	2200      	movs	r2, #0
 80073a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b6:	2200      	movs	r2, #0
 80073b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073c8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2200      	movs	r2, #0
 80073ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073dc:	2200      	movs	r2, #0
 80073de:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d003      	beq.n	80073f0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ec:	2200      	movs	r2, #0
 80073ee:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0201 	bic.w	r2, r2, #1
 80073fe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007406:	b2db      	uxtb	r3, r3
 8007408:	2b60      	cmp	r3, #96	@ 0x60
 800740a:	d10e      	bne.n	800742a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	2220      	movs	r2, #32
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2200      	movs	r2, #0
 8007420:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007422:	6978      	ldr	r0, [r7, #20]
 8007424:	f7fe fcf3 	bl	8005e0e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007428:	e027      	b.n	800747a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800742a:	7cfb      	ldrb	r3, [r7, #19]
 800742c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007430:	2b28      	cmp	r3, #40	@ 0x28
 8007432:	d117      	bne.n	8007464 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007452:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	2200      	movs	r2, #0
 8007458:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	2228      	movs	r2, #40	@ 0x28
 800745e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007462:	e007      	b.n	8007474 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2220      	movs	r2, #32
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007474:	6978      	ldr	r0, [r7, #20]
 8007476:	f7fe fcc0 	bl	8005dfa <HAL_I2C_ErrorCallback>
}
 800747a:	bf00      	nop
 800747c:	3718      	adds	r7, #24
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20000004 	.word	0x20000004
 8007488:	14f8b589 	.word	0x14f8b589

0800748c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	4613      	mov	r3, r2
 800749a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800749c:	e048      	b.n	8007530 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a4:	d044      	beq.n	8007530 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074a6:	f7fc f853 	bl	8003550 <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	69bb      	ldr	r3, [r7, #24]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d302      	bcc.n	80074bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d139      	bne.n	8007530 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	0c1b      	lsrs	r3, r3, #16
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d10d      	bne.n	80074e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	43da      	mvns	r2, r3
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	4013      	ands	r3, r2
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	bf0c      	ite	eq
 80074d8:	2301      	moveq	r3, #1
 80074da:	2300      	movne	r3, #0
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	461a      	mov	r2, r3
 80074e0:	e00c      	b.n	80074fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	699b      	ldr	r3, [r3, #24]
 80074e8:	43da      	mvns	r2, r3
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	4013      	ands	r3, r2
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	bf0c      	ite	eq
 80074f4:	2301      	moveq	r3, #1
 80074f6:	2300      	movne	r3, #0
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	461a      	mov	r2, r3
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d116      	bne.n	8007530 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2220      	movs	r2, #32
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800751c:	f043 0220 	orr.w	r2, r3, #32
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e023      	b.n	8007578 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	0c1b      	lsrs	r3, r3, #16
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b01      	cmp	r3, #1
 8007538:	d10d      	bne.n	8007556 <I2C_WaitOnFlagUntilTimeout+0xca>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	43da      	mvns	r2, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4013      	ands	r3, r2
 8007546:	b29b      	uxth	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	bf0c      	ite	eq
 800754c:	2301      	moveq	r3, #1
 800754e:	2300      	movne	r3, #0
 8007550:	b2db      	uxtb	r3, r3
 8007552:	461a      	mov	r2, r3
 8007554:	e00c      	b.n	8007570 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	699b      	ldr	r3, [r3, #24]
 800755c:	43da      	mvns	r2, r3
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	4013      	ands	r3, r2
 8007562:	b29b      	uxth	r3, r3
 8007564:	2b00      	cmp	r3, #0
 8007566:	bf0c      	ite	eq
 8007568:	2301      	moveq	r3, #1
 800756a:	2300      	movne	r3, #0
 800756c:	b2db      	uxtb	r3, r3
 800756e:	461a      	mov	r2, r3
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	429a      	cmp	r2, r3
 8007574:	d093      	beq.n	800749e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007576:	2300      	movs	r3, #0
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
 800758c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800758e:	e071      	b.n	8007674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800759a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800759e:	d123      	bne.n	80075e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80075b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d4:	f043 0204 	orr.w	r2, r3, #4
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e067      	b.n	80076b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075ee:	d041      	beq.n	8007674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075f0:	f7fb ffae 	bl	8003550 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d302      	bcc.n	8007606 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d136      	bne.n	8007674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	0c1b      	lsrs	r3, r3, #16
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b01      	cmp	r3, #1
 800760e:	d10c      	bne.n	800762a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	695b      	ldr	r3, [r3, #20]
 8007616:	43da      	mvns	r2, r3
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	4013      	ands	r3, r2
 800761c:	b29b      	uxth	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	bf14      	ite	ne
 8007622:	2301      	movne	r3, #1
 8007624:	2300      	moveq	r3, #0
 8007626:	b2db      	uxtb	r3, r3
 8007628:	e00b      	b.n	8007642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	699b      	ldr	r3, [r3, #24]
 8007630:	43da      	mvns	r2, r3
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	4013      	ands	r3, r2
 8007636:	b29b      	uxth	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	bf14      	ite	ne
 800763c:	2301      	movne	r3, #1
 800763e:	2300      	moveq	r3, #0
 8007640:	b2db      	uxtb	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d016      	beq.n	8007674 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2200      	movs	r2, #0
 800764a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2220      	movs	r2, #32
 8007650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007660:	f043 0220 	orr.w	r2, r3, #32
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	e021      	b.n	80076b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	0c1b      	lsrs	r3, r3, #16
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b01      	cmp	r3, #1
 800767c:	d10c      	bne.n	8007698 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	43da      	mvns	r2, r3
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	4013      	ands	r3, r2
 800768a:	b29b      	uxth	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	bf14      	ite	ne
 8007690:	2301      	movne	r3, #1
 8007692:	2300      	moveq	r3, #0
 8007694:	b2db      	uxtb	r3, r3
 8007696:	e00b      	b.n	80076b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	43da      	mvns	r2, r3
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	4013      	ands	r3, r2
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bf14      	ite	ne
 80076aa:	2301      	movne	r3, #1
 80076ac:	2300      	moveq	r3, #0
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f47f af6d 	bne.w	8007590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076cc:	e034      	b.n	8007738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 f915 	bl	80078fe <I2C_IsAcknowledgeFailed>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e034      	b.n	8007748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e4:	d028      	beq.n	8007738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076e6:	f7fb ff33 	bl	8003550 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	1ad3      	subs	r3, r2, r3
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d302      	bcc.n	80076fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d11d      	bne.n	8007738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	695b      	ldr	r3, [r3, #20]
 8007702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007706:	2b80      	cmp	r3, #128	@ 0x80
 8007708:	d016      	beq.n	8007738 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2220      	movs	r2, #32
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007724:	f043 0220 	orr.w	r2, r3, #32
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007734:	2301      	movs	r3, #1
 8007736:	e007      	b.n	8007748 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007742:	2b80      	cmp	r3, #128	@ 0x80
 8007744:	d1c3      	bne.n	80076ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800775c:	e034      	b.n	80077c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 f8cd 	bl	80078fe <I2C_IsAcknowledgeFailed>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e034      	b.n	80077d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007774:	d028      	beq.n	80077c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007776:	f7fb feeb 	bl	8003550 <HAL_GetTick>
 800777a:	4602      	mov	r2, r0
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	1ad3      	subs	r3, r2, r3
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	429a      	cmp	r2, r3
 8007784:	d302      	bcc.n	800778c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d11d      	bne.n	80077c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	f003 0304 	and.w	r3, r3, #4
 8007796:	2b04      	cmp	r3, #4
 8007798:	d016      	beq.n	80077c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b4:	f043 0220 	orr.w	r2, r3, #32
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e007      	b.n	80077d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f003 0304 	and.w	r3, r3, #4
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	d1c3      	bne.n	800775e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80077ec:	4b13      	ldr	r3, [pc, #76]	@ (800783c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	08db      	lsrs	r3, r3, #3
 80077f2:	4a13      	ldr	r2, [pc, #76]	@ (8007840 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80077f4:	fba2 2303 	umull	r2, r3, r2, r3
 80077f8:	0a1a      	lsrs	r2, r3, #8
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3b01      	subs	r3, #1
 8007806:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d107      	bne.n	800781e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007812:	f043 0220 	orr.w	r2, r3, #32
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e008      	b.n	8007830 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007828:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800782c:	d0e9      	beq.n	8007802 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr
 800783c:	20000004 	.word	0x20000004
 8007840:	14f8b589 	.word	0x14f8b589

08007844 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007850:	e049      	b.n	80078e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	f003 0310 	and.w	r3, r3, #16
 800785c:	2b10      	cmp	r3, #16
 800785e:	d119      	bne.n	8007894 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f06f 0210 	mvn.w	r2, #16
 8007868:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2200      	movs	r2, #0
 800786e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2220      	movs	r2, #32
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e030      	b.n	80078f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007894:	f7fb fe5c 	bl	8003550 <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	68ba      	ldr	r2, [r7, #8]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d302      	bcc.n	80078aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d11d      	bne.n	80078e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b4:	2b40      	cmp	r3, #64	@ 0x40
 80078b6:	d016      	beq.n	80078e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2220      	movs	r2, #32
 80078c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d2:	f043 0220 	orr.w	r2, r3, #32
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e007      	b.n	80078f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f0:	2b40      	cmp	r3, #64	@ 0x40
 80078f2:	d1ae      	bne.n	8007852 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80078fe:	b480      	push	{r7}
 8007900:	b083      	sub	sp, #12
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	695b      	ldr	r3, [r3, #20]
 800790c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007914:	d11b      	bne.n	800794e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800791e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2220      	movs	r2, #32
 800792a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793a:	f043 0204 	orr.w	r2, r3, #4
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e000      	b.n	8007950 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007968:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800796c:	d103      	bne.n	8007976 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007974:	e007      	b.n	8007986 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800797e:	d102      	bne.n	8007986 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2208      	movs	r2, #8
 8007984:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
	...

08007994 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d101      	bne.n	80079a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e267      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d075      	beq.n	8007a9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80079b2:	4b88      	ldr	r3, [pc, #544]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f003 030c 	and.w	r3, r3, #12
 80079ba:	2b04      	cmp	r3, #4
 80079bc:	d00c      	beq.n	80079d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079be:	4b85      	ldr	r3, [pc, #532]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80079c6:	2b08      	cmp	r3, #8
 80079c8:	d112      	bne.n	80079f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079ca:	4b82      	ldr	r3, [pc, #520]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079d6:	d10b      	bne.n	80079f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079d8:	4b7e      	ldr	r3, [pc, #504]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d05b      	beq.n	8007a9c <HAL_RCC_OscConfig+0x108>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d157      	bne.n	8007a9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e242      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f8:	d106      	bne.n	8007a08 <HAL_RCC_OscConfig+0x74>
 80079fa:	4b76      	ldr	r3, [pc, #472]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a75      	ldr	r2, [pc, #468]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a04:	6013      	str	r3, [r2, #0]
 8007a06:	e01d      	b.n	8007a44 <HAL_RCC_OscConfig+0xb0>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a10:	d10c      	bne.n	8007a2c <HAL_RCC_OscConfig+0x98>
 8007a12:	4b70      	ldr	r3, [pc, #448]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a6f      	ldr	r2, [pc, #444]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a1c:	6013      	str	r3, [r2, #0]
 8007a1e:	4b6d      	ldr	r3, [pc, #436]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a6c      	ldr	r2, [pc, #432]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a28:	6013      	str	r3, [r2, #0]
 8007a2a:	e00b      	b.n	8007a44 <HAL_RCC_OscConfig+0xb0>
 8007a2c:	4b69      	ldr	r3, [pc, #420]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a68      	ldr	r2, [pc, #416]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	4b66      	ldr	r3, [pc, #408]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a65      	ldr	r2, [pc, #404]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d013      	beq.n	8007a74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a4c:	f7fb fd80 	bl	8003550 <HAL_GetTick>
 8007a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a52:	e008      	b.n	8007a66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a54:	f7fb fd7c 	bl	8003550 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b64      	cmp	r3, #100	@ 0x64
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e207      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a66:	4b5b      	ldr	r3, [pc, #364]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0f0      	beq.n	8007a54 <HAL_RCC_OscConfig+0xc0>
 8007a72:	e014      	b.n	8007a9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a74:	f7fb fd6c 	bl	8003550 <HAL_GetTick>
 8007a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a7a:	e008      	b.n	8007a8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a7c:	f7fb fd68 	bl	8003550 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	2b64      	cmp	r3, #100	@ 0x64
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e1f3      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a8e:	4b51      	ldr	r3, [pc, #324]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1f0      	bne.n	8007a7c <HAL_RCC_OscConfig+0xe8>
 8007a9a:	e000      	b.n	8007a9e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0302 	and.w	r3, r3, #2
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d063      	beq.n	8007b72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007aaa:	4b4a      	ldr	r3, [pc, #296]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f003 030c 	and.w	r3, r3, #12
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00b      	beq.n	8007ace <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ab6:	4b47      	ldr	r3, [pc, #284]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007abe:	2b08      	cmp	r3, #8
 8007ac0:	d11c      	bne.n	8007afc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ac2:	4b44      	ldr	r3, [pc, #272]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007ac4:	685b      	ldr	r3, [r3, #4]
 8007ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d116      	bne.n	8007afc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ace:	4b41      	ldr	r3, [pc, #260]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d005      	beq.n	8007ae6 <HAL_RCC_OscConfig+0x152>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	68db      	ldr	r3, [r3, #12]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d001      	beq.n	8007ae6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e1c7      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ae6:	4b3b      	ldr	r3, [pc, #236]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	4937      	ldr	r1, [pc, #220]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007afa:	e03a      	b.n	8007b72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d020      	beq.n	8007b46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b04:	4b34      	ldr	r3, [pc, #208]	@ (8007bd8 <HAL_RCC_OscConfig+0x244>)
 8007b06:	2201      	movs	r2, #1
 8007b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b0a:	f7fb fd21 	bl	8003550 <HAL_GetTick>
 8007b0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b10:	e008      	b.n	8007b24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b12:	f7fb fd1d 	bl	8003550 <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d901      	bls.n	8007b24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e1a8      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b24:	4b2b      	ldr	r3, [pc, #172]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0302 	and.w	r3, r3, #2
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0f0      	beq.n	8007b12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b30:	4b28      	ldr	r3, [pc, #160]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	00db      	lsls	r3, r3, #3
 8007b3e:	4925      	ldr	r1, [pc, #148]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	600b      	str	r3, [r1, #0]
 8007b44:	e015      	b.n	8007b72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b46:	4b24      	ldr	r3, [pc, #144]	@ (8007bd8 <HAL_RCC_OscConfig+0x244>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b4c:	f7fb fd00 	bl	8003550 <HAL_GetTick>
 8007b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b52:	e008      	b.n	8007b66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b54:	f7fb fcfc 	bl	8003550 <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d901      	bls.n	8007b66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e187      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b66:	4b1b      	ldr	r3, [pc, #108]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d1f0      	bne.n	8007b54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0308 	and.w	r3, r3, #8
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d036      	beq.n	8007bec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	695b      	ldr	r3, [r3, #20]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d016      	beq.n	8007bb4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b86:	4b15      	ldr	r3, [pc, #84]	@ (8007bdc <HAL_RCC_OscConfig+0x248>)
 8007b88:	2201      	movs	r2, #1
 8007b8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b8c:	f7fb fce0 	bl	8003550 <HAL_GetTick>
 8007b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b92:	e008      	b.n	8007ba6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b94:	f7fb fcdc 	bl	8003550 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e167      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd4 <HAL_RCC_OscConfig+0x240>)
 8007ba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007baa:	f003 0302 	and.w	r3, r3, #2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d0f0      	beq.n	8007b94 <HAL_RCC_OscConfig+0x200>
 8007bb2:	e01b      	b.n	8007bec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bb4:	4b09      	ldr	r3, [pc, #36]	@ (8007bdc <HAL_RCC_OscConfig+0x248>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007bba:	f7fb fcc9 	bl	8003550 <HAL_GetTick>
 8007bbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007bc0:	e00e      	b.n	8007be0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bc2:	f7fb fcc5 	bl	8003550 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	693b      	ldr	r3, [r7, #16]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d907      	bls.n	8007be0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e150      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	42470000 	.word	0x42470000
 8007bdc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007be0:	4b88      	ldr	r3, [pc, #544]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007be4:	f003 0302 	and.w	r3, r3, #2
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1ea      	bne.n	8007bc2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0304 	and.w	r3, r3, #4
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 8097 	beq.w	8007d28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bfe:	4b81      	ldr	r3, [pc, #516]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10f      	bne.n	8007c2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60bb      	str	r3, [r7, #8]
 8007c0e:	4b7d      	ldr	r3, [pc, #500]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c12:	4a7c      	ldr	r2, [pc, #496]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007c14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c1a:	4b7a      	ldr	r3, [pc, #488]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c22:	60bb      	str	r3, [r7, #8]
 8007c24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c26:	2301      	movs	r3, #1
 8007c28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c2a:	4b77      	ldr	r3, [pc, #476]	@ (8007e08 <HAL_RCC_OscConfig+0x474>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d118      	bne.n	8007c68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c36:	4b74      	ldr	r3, [pc, #464]	@ (8007e08 <HAL_RCC_OscConfig+0x474>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a73      	ldr	r2, [pc, #460]	@ (8007e08 <HAL_RCC_OscConfig+0x474>)
 8007c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c42:	f7fb fc85 	bl	8003550 <HAL_GetTick>
 8007c46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c48:	e008      	b.n	8007c5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c4a:	f7fb fc81 	bl	8003550 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	2b02      	cmp	r3, #2
 8007c56:	d901      	bls.n	8007c5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e10c      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c5c:	4b6a      	ldr	r3, [pc, #424]	@ (8007e08 <HAL_RCC_OscConfig+0x474>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0f0      	beq.n	8007c4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d106      	bne.n	8007c7e <HAL_RCC_OscConfig+0x2ea>
 8007c70:	4b64      	ldr	r3, [pc, #400]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c74:	4a63      	ldr	r2, [pc, #396]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007c76:	f043 0301 	orr.w	r3, r3, #1
 8007c7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c7c:	e01c      	b.n	8007cb8 <HAL_RCC_OscConfig+0x324>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	2b05      	cmp	r3, #5
 8007c84:	d10c      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x30c>
 8007c86:	4b5f      	ldr	r3, [pc, #380]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c8a:	4a5e      	ldr	r2, [pc, #376]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007c8c:	f043 0304 	orr.w	r3, r3, #4
 8007c90:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c92:	4b5c      	ldr	r3, [pc, #368]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c96:	4a5b      	ldr	r2, [pc, #364]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007c98:	f043 0301 	orr.w	r3, r3, #1
 8007c9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c9e:	e00b      	b.n	8007cb8 <HAL_RCC_OscConfig+0x324>
 8007ca0:	4b58      	ldr	r3, [pc, #352]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ca4:	4a57      	ldr	r2, [pc, #348]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007ca6:	f023 0301 	bic.w	r3, r3, #1
 8007caa:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cac:	4b55      	ldr	r3, [pc, #340]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb0:	4a54      	ldr	r2, [pc, #336]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007cb2:	f023 0304 	bic.w	r3, r3, #4
 8007cb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d015      	beq.n	8007cec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cc0:	f7fb fc46 	bl	8003550 <HAL_GetTick>
 8007cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cc6:	e00a      	b.n	8007cde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cc8:	f7fb fc42 	bl	8003550 <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d901      	bls.n	8007cde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e0cb      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cde:	4b49      	ldr	r3, [pc, #292]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0ee      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x334>
 8007cea:	e014      	b.n	8007d16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cec:	f7fb fc30 	bl	8003550 <HAL_GetTick>
 8007cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cf2:	e00a      	b.n	8007d0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cf4:	f7fb fc2c 	bl	8003550 <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e0b5      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d0a:	4b3e      	ldr	r3, [pc, #248]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d0e:	f003 0302 	and.w	r3, r3, #2
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1ee      	bne.n	8007cf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d16:	7dfb      	ldrb	r3, [r7, #23]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d105      	bne.n	8007d28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d1c:	4b39      	ldr	r3, [pc, #228]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d20:	4a38      	ldr	r2, [pc, #224]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007d22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 80a1 	beq.w	8007e74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d32:	4b34      	ldr	r3, [pc, #208]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	f003 030c 	and.w	r3, r3, #12
 8007d3a:	2b08      	cmp	r3, #8
 8007d3c:	d05c      	beq.n	8007df8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d141      	bne.n	8007dca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d46:	4b31      	ldr	r3, [pc, #196]	@ (8007e0c <HAL_RCC_OscConfig+0x478>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d4c:	f7fb fc00 	bl	8003550 <HAL_GetTick>
 8007d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d52:	e008      	b.n	8007d66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d54:	f7fb fbfc 	bl	8003550 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b02      	cmp	r3, #2
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e087      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d66:	4b27      	ldr	r3, [pc, #156]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1f0      	bne.n	8007d54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	69da      	ldr	r2, [r3, #28]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d80:	019b      	lsls	r3, r3, #6
 8007d82:	431a      	orrs	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d88:	085b      	lsrs	r3, r3, #1
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	041b      	lsls	r3, r3, #16
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d94:	061b      	lsls	r3, r3, #24
 8007d96:	491b      	ldr	r1, [pc, #108]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8007e0c <HAL_RCC_OscConfig+0x478>)
 8007d9e:	2201      	movs	r2, #1
 8007da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007da2:	f7fb fbd5 	bl	8003550 <HAL_GetTick>
 8007da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007da8:	e008      	b.n	8007dbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007daa:	f7fb fbd1 	bl	8003550 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d901      	bls.n	8007dbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e05c      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dbc:	4b11      	ldr	r3, [pc, #68]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0f0      	beq.n	8007daa <HAL_RCC_OscConfig+0x416>
 8007dc8:	e054      	b.n	8007e74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dca:	4b10      	ldr	r3, [pc, #64]	@ (8007e0c <HAL_RCC_OscConfig+0x478>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dd0:	f7fb fbbe 	bl	8003550 <HAL_GetTick>
 8007dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dd8:	f7fb fbba 	bl	8003550 <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e045      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dea:	4b06      	ldr	r3, [pc, #24]	@ (8007e04 <HAL_RCC_OscConfig+0x470>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f0      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x444>
 8007df6:	e03d      	b.n	8007e74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	699b      	ldr	r3, [r3, #24]
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d107      	bne.n	8007e10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e038      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
 8007e04:	40023800 	.word	0x40023800
 8007e08:	40007000 	.word	0x40007000
 8007e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e10:	4b1b      	ldr	r3, [pc, #108]	@ (8007e80 <HAL_RCC_OscConfig+0x4ec>)
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d028      	beq.n	8007e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d121      	bne.n	8007e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d11a      	bne.n	8007e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007e40:	4013      	ands	r3, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d111      	bne.n	8007e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e56:	085b      	lsrs	r3, r3, #1
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d107      	bne.n	8007e70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d001      	beq.n	8007e74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007e70:	2301      	movs	r3, #1
 8007e72:	e000      	b.n	8007e76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	40023800 	.word	0x40023800

08007e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e0cc      	b.n	8008032 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e98:	4b68      	ldr	r3, [pc, #416]	@ (800803c <HAL_RCC_ClockConfig+0x1b8>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0307 	and.w	r3, r3, #7
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d90c      	bls.n	8007ec0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ea6:	4b65      	ldr	r3, [pc, #404]	@ (800803c <HAL_RCC_ClockConfig+0x1b8>)
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	b2d2      	uxtb	r2, r2
 8007eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eae:	4b63      	ldr	r3, [pc, #396]	@ (800803c <HAL_RCC_ClockConfig+0x1b8>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	683a      	ldr	r2, [r7, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d001      	beq.n	8007ec0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e0b8      	b.n	8008032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0302 	and.w	r3, r3, #2
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d020      	beq.n	8007f0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0304 	and.w	r3, r3, #4
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d005      	beq.n	8007ee4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ed8:	4b59      	ldr	r3, [pc, #356]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	4a58      	ldr	r2, [pc, #352]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007ede:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ee2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0308 	and.w	r3, r3, #8
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d005      	beq.n	8007efc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ef0:	4b53      	ldr	r3, [pc, #332]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	4a52      	ldr	r2, [pc, #328]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007efa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007efc:	4b50      	ldr	r3, [pc, #320]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	494d      	ldr	r1, [pc, #308]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d044      	beq.n	8007fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d107      	bne.n	8007f32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f22:	4b47      	ldr	r3, [pc, #284]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d119      	bne.n	8007f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e07f      	b.n	8008032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d003      	beq.n	8007f42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d107      	bne.n	8007f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f42:	4b3f      	ldr	r3, [pc, #252]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d109      	bne.n	8007f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	e06f      	b.n	8008032 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f52:	4b3b      	ldr	r3, [pc, #236]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 0302 	and.w	r3, r3, #2
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e067      	b.n	8008032 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f62:	4b37      	ldr	r3, [pc, #220]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f023 0203 	bic.w	r2, r3, #3
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	4934      	ldr	r1, [pc, #208]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f74:	f7fb faec 	bl	8003550 <HAL_GetTick>
 8007f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f7a:	e00a      	b.n	8007f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f7c:	f7fb fae8 	bl	8003550 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e04f      	b.n	8008032 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f92:	4b2b      	ldr	r3, [pc, #172]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 020c 	and.w	r2, r3, #12
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d1eb      	bne.n	8007f7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fa4:	4b25      	ldr	r3, [pc, #148]	@ (800803c <HAL_RCC_ClockConfig+0x1b8>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d20c      	bcs.n	8007fcc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fb2:	4b22      	ldr	r3, [pc, #136]	@ (800803c <HAL_RCC_ClockConfig+0x1b8>)
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fba:	4b20      	ldr	r3, [pc, #128]	@ (800803c <HAL_RCC_ClockConfig+0x1b8>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d001      	beq.n	8007fcc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e032      	b.n	8008032 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0304 	and.w	r3, r3, #4
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d008      	beq.n	8007fea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fd8:	4b19      	ldr	r3, [pc, #100]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	4916      	ldr	r1, [pc, #88]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0308 	and.w	r3, r3, #8
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d009      	beq.n	800800a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ff6:	4b12      	ldr	r3, [pc, #72]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	00db      	lsls	r3, r3, #3
 8008004:	490e      	ldr	r1, [pc, #56]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8008006:	4313      	orrs	r3, r2
 8008008:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800800a:	f000 f821 	bl	8008050 <HAL_RCC_GetSysClockFreq>
 800800e:	4602      	mov	r2, r0
 8008010:	4b0b      	ldr	r3, [pc, #44]	@ (8008040 <HAL_RCC_ClockConfig+0x1bc>)
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	091b      	lsrs	r3, r3, #4
 8008016:	f003 030f 	and.w	r3, r3, #15
 800801a:	490a      	ldr	r1, [pc, #40]	@ (8008044 <HAL_RCC_ClockConfig+0x1c0>)
 800801c:	5ccb      	ldrb	r3, [r1, r3]
 800801e:	fa22 f303 	lsr.w	r3, r2, r3
 8008022:	4a09      	ldr	r2, [pc, #36]	@ (8008048 <HAL_RCC_ClockConfig+0x1c4>)
 8008024:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008026:	4b09      	ldr	r3, [pc, #36]	@ (800804c <HAL_RCC_ClockConfig+0x1c8>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4618      	mov	r0, r3
 800802c:	f7fb fa4c 	bl	80034c8 <HAL_InitTick>

  return HAL_OK;
 8008030:	2300      	movs	r3, #0
}
 8008032:	4618      	mov	r0, r3
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	40023c00 	.word	0x40023c00
 8008040:	40023800 	.word	0x40023800
 8008044:	0800e048 	.word	0x0800e048
 8008048:	20000004 	.word	0x20000004
 800804c:	20000008 	.word	0x20000008

08008050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008054:	b090      	sub	sp, #64	@ 0x40
 8008056:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800805c:	2300      	movs	r3, #0
 800805e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008068:	4b59      	ldr	r3, [pc, #356]	@ (80081d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f003 030c 	and.w	r3, r3, #12
 8008070:	2b08      	cmp	r3, #8
 8008072:	d00d      	beq.n	8008090 <HAL_RCC_GetSysClockFreq+0x40>
 8008074:	2b08      	cmp	r3, #8
 8008076:	f200 80a1 	bhi.w	80081bc <HAL_RCC_GetSysClockFreq+0x16c>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <HAL_RCC_GetSysClockFreq+0x34>
 800807e:	2b04      	cmp	r3, #4
 8008080:	d003      	beq.n	800808a <HAL_RCC_GetSysClockFreq+0x3a>
 8008082:	e09b      	b.n	80081bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008084:	4b53      	ldr	r3, [pc, #332]	@ (80081d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008086:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008088:	e09b      	b.n	80081c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800808a:	4b53      	ldr	r3, [pc, #332]	@ (80081d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800808c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800808e:	e098      	b.n	80081c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008090:	4b4f      	ldr	r3, [pc, #316]	@ (80081d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008098:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800809a:	4b4d      	ldr	r3, [pc, #308]	@ (80081d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d028      	beq.n	80080f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080a6:	4b4a      	ldr	r3, [pc, #296]	@ (80081d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	099b      	lsrs	r3, r3, #6
 80080ac:	2200      	movs	r2, #0
 80080ae:	623b      	str	r3, [r7, #32]
 80080b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80080b8:	2100      	movs	r1, #0
 80080ba:	4b47      	ldr	r3, [pc, #284]	@ (80081d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80080bc:	fb03 f201 	mul.w	r2, r3, r1
 80080c0:	2300      	movs	r3, #0
 80080c2:	fb00 f303 	mul.w	r3, r0, r3
 80080c6:	4413      	add	r3, r2
 80080c8:	4a43      	ldr	r2, [pc, #268]	@ (80081d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80080ca:	fba0 1202 	umull	r1, r2, r0, r2
 80080ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080d0:	460a      	mov	r2, r1
 80080d2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80080d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080d6:	4413      	add	r3, r2
 80080d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080dc:	2200      	movs	r2, #0
 80080de:	61bb      	str	r3, [r7, #24]
 80080e0:	61fa      	str	r2, [r7, #28]
 80080e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80080ea:	f7f8 fd4f 	bl	8000b8c <__aeabi_uldivmod>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4613      	mov	r3, r2
 80080f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080f6:	e053      	b.n	80081a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080f8:	4b35      	ldr	r3, [pc, #212]	@ (80081d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	099b      	lsrs	r3, r3, #6
 80080fe:	2200      	movs	r2, #0
 8008100:	613b      	str	r3, [r7, #16]
 8008102:	617a      	str	r2, [r7, #20]
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800810a:	f04f 0b00 	mov.w	fp, #0
 800810e:	4652      	mov	r2, sl
 8008110:	465b      	mov	r3, fp
 8008112:	f04f 0000 	mov.w	r0, #0
 8008116:	f04f 0100 	mov.w	r1, #0
 800811a:	0159      	lsls	r1, r3, #5
 800811c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008120:	0150      	lsls	r0, r2, #5
 8008122:	4602      	mov	r2, r0
 8008124:	460b      	mov	r3, r1
 8008126:	ebb2 080a 	subs.w	r8, r2, sl
 800812a:	eb63 090b 	sbc.w	r9, r3, fp
 800812e:	f04f 0200 	mov.w	r2, #0
 8008132:	f04f 0300 	mov.w	r3, #0
 8008136:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800813a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800813e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008142:	ebb2 0408 	subs.w	r4, r2, r8
 8008146:	eb63 0509 	sbc.w	r5, r3, r9
 800814a:	f04f 0200 	mov.w	r2, #0
 800814e:	f04f 0300 	mov.w	r3, #0
 8008152:	00eb      	lsls	r3, r5, #3
 8008154:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008158:	00e2      	lsls	r2, r4, #3
 800815a:	4614      	mov	r4, r2
 800815c:	461d      	mov	r5, r3
 800815e:	eb14 030a 	adds.w	r3, r4, sl
 8008162:	603b      	str	r3, [r7, #0]
 8008164:	eb45 030b 	adc.w	r3, r5, fp
 8008168:	607b      	str	r3, [r7, #4]
 800816a:	f04f 0200 	mov.w	r2, #0
 800816e:	f04f 0300 	mov.w	r3, #0
 8008172:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008176:	4629      	mov	r1, r5
 8008178:	028b      	lsls	r3, r1, #10
 800817a:	4621      	mov	r1, r4
 800817c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008180:	4621      	mov	r1, r4
 8008182:	028a      	lsls	r2, r1, #10
 8008184:	4610      	mov	r0, r2
 8008186:	4619      	mov	r1, r3
 8008188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800818a:	2200      	movs	r2, #0
 800818c:	60bb      	str	r3, [r7, #8]
 800818e:	60fa      	str	r2, [r7, #12]
 8008190:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008194:	f7f8 fcfa 	bl	8000b8c <__aeabi_uldivmod>
 8008198:	4602      	mov	r2, r0
 800819a:	460b      	mov	r3, r1
 800819c:	4613      	mov	r3, r2
 800819e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80081a0:	4b0b      	ldr	r3, [pc, #44]	@ (80081d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	0c1b      	lsrs	r3, r3, #16
 80081a6:	f003 0303 	and.w	r3, r3, #3
 80081aa:	3301      	adds	r3, #1
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80081b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80081b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80081ba:	e002      	b.n	80081c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081bc:	4b05      	ldr	r3, [pc, #20]	@ (80081d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80081be:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80081c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3740      	adds	r7, #64	@ 0x40
 80081c8:	46bd      	mov	sp, r7
 80081ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081ce:	bf00      	nop
 80081d0:	40023800 	.word	0x40023800
 80081d4:	00f42400 	.word	0x00f42400
 80081d8:	017d7840 	.word	0x017d7840

080081dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081dc:	b480      	push	{r7}
 80081de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081e0:	4b03      	ldr	r3, [pc, #12]	@ (80081f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80081e2:	681b      	ldr	r3, [r3, #0]
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr
 80081ee:	bf00      	nop
 80081f0:	20000004 	.word	0x20000004

080081f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80081f8:	f7ff fff0 	bl	80081dc <HAL_RCC_GetHCLKFreq>
 80081fc:	4602      	mov	r2, r0
 80081fe:	4b05      	ldr	r3, [pc, #20]	@ (8008214 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	0a9b      	lsrs	r3, r3, #10
 8008204:	f003 0307 	and.w	r3, r3, #7
 8008208:	4903      	ldr	r1, [pc, #12]	@ (8008218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800820a:	5ccb      	ldrb	r3, [r1, r3]
 800820c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008210:	4618      	mov	r0, r3
 8008212:	bd80      	pop	{r7, pc}
 8008214:	40023800 	.word	0x40023800
 8008218:	0800e058 	.word	0x0800e058

0800821c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b082      	sub	sp, #8
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e022      	b.n	8008274 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d105      	bne.n	8008246 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7fa fee9 	bl	8003018 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2203      	movs	r2, #3
 800824a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f000 f814 	bl	800827c <HAL_SD_InitCard>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e00a      	b.n	8008274 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800827c:	b5b0      	push	{r4, r5, r7, lr}
 800827e:	b08e      	sub	sp, #56	@ 0x38
 8008280:	af04      	add	r7, sp, #16
 8008282:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008284:	2300      	movs	r3, #0
 8008286:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008288:	2300      	movs	r3, #0
 800828a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800828c:	2300      	movs	r3, #0
 800828e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008290:	2300      	movs	r3, #0
 8008292:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008294:	2300      	movs	r3, #0
 8008296:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008298:	2376      	movs	r3, #118	@ 0x76
 800829a:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681d      	ldr	r5, [r3, #0]
 80082a0:	466c      	mov	r4, sp
 80082a2:	f107 0318 	add.w	r3, r7, #24
 80082a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082ae:	f107 030c 	add.w	r3, r7, #12
 80082b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082b4:	4628      	mov	r0, r5
 80082b6:	f001 ffb7 	bl	800a228 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80082ba:	4b2a      	ldr	r3, [pc, #168]	@ (8008364 <HAL_SD_InitCard+0xe8>)
 80082bc:	2200      	movs	r2, #0
 80082be:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f001 fff8 	bl	800a2ba <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80082ca:	4b26      	ldr	r3, [pc, #152]	@ (8008364 <HAL_SD_InitCard+0xe8>)
 80082cc:	2201      	movs	r2, #1
 80082ce:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80082d0:	2002      	movs	r0, #2
 80082d2:	f7fb f949 	bl	8003568 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f001 f878 	bl	80093cc <SD_PowerON>
 80082dc:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 80082de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d00b      	beq.n	80082fc <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f2:	431a      	orrs	r2, r3
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e02e      	b.n	800835a <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 ff97 	bl	8009230 <SD_InitCard>
 8008302:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00b      	beq.n	8008322 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008318:	431a      	orrs	r2, r3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e01b      	b.n	800835a <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800832a:	4618      	mov	r0, r3
 800832c:	f002 f857 	bl	800a3de <SDMMC_CmdBlockLength>
 8008330:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008334:	2b00      	cmp	r3, #0
 8008336:	d00f      	beq.n	8008358 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a0a      	ldr	r2, [pc, #40]	@ (8008368 <HAL_SD_InitCard+0xec>)
 800833e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008346:	431a      	orrs	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e000      	b.n	800835a <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3728      	adds	r7, #40	@ 0x28
 800835e:	46bd      	mov	sp, r7
 8008360:	bdb0      	pop	{r4, r5, r7, pc}
 8008362:	bf00      	nop
 8008364:	422580a0 	.word	0x422580a0
 8008368:	004005ff 	.word	0x004005ff

0800836c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b092      	sub	sp, #72	@ 0x48
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800837a:	f7fb f8e9 	bl	8003550 <HAL_GetTick>
 800837e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d107      	bne.n	800839e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008392:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e1c5      	b.n	800872a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	f040 81b8 	bne.w	800871c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80083b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	441a      	add	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083bc:	429a      	cmp	r2, r3
 80083be:	d907      	bls.n	80083d0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083c4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e1ac      	b.n	800872a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2203      	movs	r2, #3
 80083d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2200      	movs	r2, #0
 80083de:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d002      	beq.n	80083ee <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80083e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ea:	025b      	lsls	r3, r3, #9
 80083ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80083ee:	f04f 33ff 	mov.w	r3, #4294967295
 80083f2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	025b      	lsls	r3, r3, #9
 80083f8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80083fa:	2390      	movs	r3, #144	@ 0x90
 80083fc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80083fe:	2302      	movs	r3, #2
 8008400:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008402:	2300      	movs	r3, #0
 8008404:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8008406:	2301      	movs	r3, #1
 8008408:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f107 0214 	add.w	r2, r7, #20
 8008412:	4611      	mov	r1, r2
 8008414:	4618      	mov	r0, r3
 8008416:	f001 ffb6 	bl	800a386 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d90a      	bls.n	8008436 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2202      	movs	r2, #2
 8008424:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800842c:	4618      	mov	r0, r3
 800842e:	f002 f81a 	bl	800a466 <SDMMC_CmdReadMultiBlock>
 8008432:	6478      	str	r0, [r7, #68]	@ 0x44
 8008434:	e009      	b.n	800844a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2201      	movs	r2, #1
 800843a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008442:	4618      	mov	r0, r3
 8008444:	f001 ffed 	bl	800a422 <SDMMC_CmdReadSingleBlock>
 8008448:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800844a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800844c:	2b00      	cmp	r3, #0
 800844e:	d012      	beq.n	8008476 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a7e      	ldr	r2, [pc, #504]	@ (8008650 <HAL_SD_ReadBlocks+0x2e4>)
 8008456:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800845c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800845e:	431a      	orrs	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2200      	movs	r2, #0
 8008470:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e159      	b.n	800872a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800847a:	e061      	b.n	8008540 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008482:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008486:	2b00      	cmp	r3, #0
 8008488:	d03c      	beq.n	8008504 <HAL_SD_ReadBlocks+0x198>
 800848a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d039      	beq.n	8008504 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008490:	2300      	movs	r3, #0
 8008492:	643b      	str	r3, [r7, #64]	@ 0x40
 8008494:	e033      	b.n	80084fe <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4618      	mov	r0, r3
 800849c:	f001 feef 	bl	800a27e <SDIO_ReadFIFO>
 80084a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80084a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084a8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80084aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ac:	3301      	adds	r3, #1
 80084ae:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80084b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b2:	3b01      	subs	r3, #1
 80084b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80084b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084b8:	0a1b      	lsrs	r3, r3, #8
 80084ba:	b2da      	uxtb	r2, r3
 80084bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084be:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80084c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084c2:	3301      	adds	r3, #1
 80084c4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80084c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084c8:	3b01      	subs	r3, #1
 80084ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80084cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ce:	0c1b      	lsrs	r3, r3, #16
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80084d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d8:	3301      	adds	r3, #1
 80084da:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80084dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084de:	3b01      	subs	r3, #1
 80084e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80084e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e4:	0e1b      	lsrs	r3, r3, #24
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ea:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80084ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ee:	3301      	adds	r3, #1
 80084f0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80084f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f4:	3b01      	subs	r3, #1
 80084f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80084f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084fa:	3301      	adds	r3, #1
 80084fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80084fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008500:	2b07      	cmp	r3, #7
 8008502:	d9c8      	bls.n	8008496 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008504:	f7fb f824 	bl	8003550 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008510:	429a      	cmp	r2, r3
 8008512:	d902      	bls.n	800851a <HAL_SD_ReadBlocks+0x1ae>
 8008514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008516:	2b00      	cmp	r3, #0
 8008518:	d112      	bne.n	8008540 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a4c      	ldr	r2, [pc, #304]	@ (8008650 <HAL_SD_ReadBlocks+0x2e4>)
 8008520:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008526:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	2200      	movs	r2, #0
 800853a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800853c:	2303      	movs	r3, #3
 800853e:	e0f4      	b.n	800872a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008546:	f240 332a 	movw	r3, #810	@ 0x32a
 800854a:	4013      	ands	r3, r2
 800854c:	2b00      	cmp	r3, #0
 800854e:	d095      	beq.n	800847c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800855a:	2b00      	cmp	r3, #0
 800855c:	d022      	beq.n	80085a4 <HAL_SD_ReadBlocks+0x238>
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	2b01      	cmp	r3, #1
 8008562:	d91f      	bls.n	80085a4 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008568:	2b03      	cmp	r3, #3
 800856a:	d01b      	beq.n	80085a4 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4618      	mov	r0, r3
 8008572:	f001 ffdf 	bl	800a534 <SDMMC_CmdStopTransfer>
 8008576:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800857a:	2b00      	cmp	r3, #0
 800857c:	d012      	beq.n	80085a4 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a33      	ldr	r2, [pc, #204]	@ (8008650 <HAL_SD_ReadBlocks+0x2e4>)
 8008584:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800858a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800858c:	431a      	orrs	r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2200      	movs	r2, #0
 800859e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e0c2      	b.n	800872a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085aa:	f003 0308 	and.w	r3, r3, #8
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <HAL_SD_ReadBlocks+0x254>
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d012      	beq.n	80085e6 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a22      	ldr	r2, [pc, #136]	@ (8008650 <HAL_SD_ReadBlocks+0x2e4>)
 80085c6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085cc:	f043 0208 	orr.w	r2, r3, #8
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2200      	movs	r2, #0
 80085e0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	e0a1      	b.n	800872a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085ec:	f003 0302 	and.w	r3, r3, #2
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d012      	beq.n	800861a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a15      	ldr	r2, [pc, #84]	@ (8008650 <HAL_SD_ReadBlocks+0x2e4>)
 80085fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008600:	f043 0202 	orr.w	r2, r3, #2
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e087      	b.n	800872a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008620:	f003 0320 	and.w	r3, r3, #32
 8008624:	2b00      	cmp	r3, #0
 8008626:	d064      	beq.n	80086f2 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a08      	ldr	r2, [pc, #32]	@ (8008650 <HAL_SD_ReadBlocks+0x2e4>)
 800862e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008634:	f043 0220 	orr.w	r2, r3, #32
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2201      	movs	r2, #1
 8008640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2200      	movs	r2, #0
 8008648:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e06d      	b.n	800872a <HAL_SD_ReadBlocks+0x3be>
 800864e:	bf00      	nop
 8008650:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4618      	mov	r0, r3
 800865a:	f001 fe10 	bl	800a27e <SDIO_ReadFIFO>
 800865e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008662:	b2da      	uxtb	r2, r3
 8008664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008666:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800866a:	3301      	adds	r3, #1
 800866c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800866e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008670:	3b01      	subs	r3, #1
 8008672:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008676:	0a1b      	lsrs	r3, r3, #8
 8008678:	b2da      	uxtb	r2, r3
 800867a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800867c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800867e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008680:	3301      	adds	r3, #1
 8008682:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008686:	3b01      	subs	r3, #1
 8008688:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800868a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868c:	0c1b      	lsrs	r3, r3, #16
 800868e:	b2da      	uxtb	r2, r3
 8008690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008692:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008696:	3301      	adds	r3, #1
 8008698:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800869a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800869c:	3b01      	subs	r3, #1
 800869e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80086a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a2:	0e1b      	lsrs	r3, r3, #24
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80086aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ac:	3301      	adds	r3, #1
 80086ae:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80086b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086b2:	3b01      	subs	r3, #1
 80086b4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80086b6:	f7fa ff4b 	bl	8003550 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d902      	bls.n	80086cc <HAL_SD_ReadBlocks+0x360>
 80086c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d112      	bne.n	80086f2 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a18      	ldr	r2, [pc, #96]	@ (8008734 <HAL_SD_ReadBlocks+0x3c8>)
 80086d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086d8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	2201      	movs	r2, #1
 80086e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e01b      	b.n	800872a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <HAL_SD_ReadBlocks+0x39a>
 8008700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1a6      	bne.n	8008654 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800870e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	e006      	b.n	800872a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008720:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
  }
}
 800872a:	4618      	mov	r0, r3
 800872c:	3748      	adds	r7, #72	@ 0x48
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}
 8008732:	bf00      	nop
 8008734:	004005ff 	.word	0x004005ff

08008738 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b092      	sub	sp, #72	@ 0x48
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008746:	f7fa ff03 	bl	8003550 <HAL_GetTick>
 800874a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d107      	bne.n	800876a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800875e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	e16d      	b.n	8008a46 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b01      	cmp	r3, #1
 8008774:	f040 8160 	bne.w	8008a38 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800877e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	441a      	add	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008788:	429a      	cmp	r2, r3
 800878a:	d907      	bls.n	800879c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008790:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e154      	b.n	8008a46 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2203      	movs	r2, #3
 80087a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2200      	movs	r2, #0
 80087aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d002      	beq.n	80087ba <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80087b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b6:	025b      	lsls	r3, r3, #9
 80087b8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087ba:	f04f 33ff 	mov.w	r3, #4294967295
 80087be:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	025b      	lsls	r3, r3, #9
 80087c4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80087c6:	2390      	movs	r3, #144	@ 0x90
 80087c8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80087ca:	2300      	movs	r3, #0
 80087cc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80087ce:	2300      	movs	r3, #0
 80087d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80087d2:	2301      	movs	r3, #1
 80087d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f107 0218 	add.w	r2, r7, #24
 80087de:	4611      	mov	r1, r2
 80087e0:	4618      	mov	r0, r3
 80087e2:	f001 fdd0 	bl	800a386 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d90a      	bls.n	8008802 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2220      	movs	r2, #32
 80087f0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80087f8:	4618      	mov	r0, r3
 80087fa:	f001 fe78 	bl	800a4ee <SDMMC_CmdWriteMultiBlock>
 80087fe:	6478      	str	r0, [r7, #68]	@ 0x44
 8008800:	e009      	b.n	8008816 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2210      	movs	r2, #16
 8008806:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800880e:	4618      	mov	r0, r3
 8008810:	f001 fe4b 	bl	800a4aa <SDMMC_CmdWriteSingleBlock>
 8008814:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008818:	2b00      	cmp	r3, #0
 800881a:	d012      	beq.n	8008842 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a8b      	ldr	r2, [pc, #556]	@ (8008a50 <HAL_SD_WriteBlocks+0x318>)
 8008822:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800882a:	431a      	orrs	r2, r3
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	2200      	movs	r2, #0
 800883c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e101      	b.n	8008a46 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008846:	e065      	b.n	8008914 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800884e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d040      	beq.n	80088d8 <HAL_SD_WriteBlocks+0x1a0>
 8008856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008858:	2b00      	cmp	r3, #0
 800885a:	d03d      	beq.n	80088d8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800885c:	2300      	movs	r3, #0
 800885e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008860:	e037      	b.n	80088d2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8008862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800886a:	3301      	adds	r3, #1
 800886c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800886e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008870:	3b01      	subs	r3, #1
 8008872:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8008874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	021a      	lsls	r2, r3, #8
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	4313      	orrs	r3, r2
 800887e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008882:	3301      	adds	r3, #1
 8008884:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008886:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008888:	3b01      	subs	r3, #1
 800888a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800888c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888e:	781b      	ldrb	r3, [r3, #0]
 8008890:	041a      	lsls	r2, r3, #16
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	4313      	orrs	r3, r2
 8008896:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800889a:	3301      	adds	r3, #1
 800889c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800889e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088a0:	3b01      	subs	r3, #1
 80088a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80088a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	061a      	lsls	r2, r3, #24
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80088b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088b2:	3301      	adds	r3, #1
 80088b4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80088b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088b8:	3b01      	subs	r3, #1
 80088ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f107 0214 	add.w	r2, r7, #20
 80088c4:	4611      	mov	r1, r2
 80088c6:	4618      	mov	r0, r3
 80088c8:	f001 fce6 	bl	800a298 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80088cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088ce:	3301      	adds	r3, #1
 80088d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80088d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088d4:	2b07      	cmp	r3, #7
 80088d6:	d9c4      	bls.n	8008862 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80088d8:	f7fa fe3a 	bl	8003550 <HAL_GetTick>
 80088dc:	4602      	mov	r2, r0
 80088de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d902      	bls.n	80088ee <HAL_SD_WriteBlocks+0x1b6>
 80088e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d112      	bne.n	8008914 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a57      	ldr	r2, [pc, #348]	@ (8008a50 <HAL_SD_WriteBlocks+0x318>)
 80088f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088fc:	431a      	orrs	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008910:	2303      	movs	r3, #3
 8008912:	e098      	b.n	8008a46 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800891a:	f240 331a 	movw	r3, #794	@ 0x31a
 800891e:	4013      	ands	r3, r2
 8008920:	2b00      	cmp	r3, #0
 8008922:	d091      	beq.n	8008848 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800892a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800892e:	2b00      	cmp	r3, #0
 8008930:	d022      	beq.n	8008978 <HAL_SD_WriteBlocks+0x240>
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	2b01      	cmp	r3, #1
 8008936:	d91f      	bls.n	8008978 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893c:	2b03      	cmp	r3, #3
 800893e:	d01b      	beq.n	8008978 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4618      	mov	r0, r3
 8008946:	f001 fdf5 	bl	800a534 <SDMMC_CmdStopTransfer>
 800894a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800894c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800894e:	2b00      	cmp	r3, #0
 8008950:	d012      	beq.n	8008978 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a3e      	ldr	r2, [pc, #248]	@ (8008a50 <HAL_SD_WriteBlocks+0x318>)
 8008958:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800895e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008960:	431a      	orrs	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2201      	movs	r2, #1
 800896a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8008974:	2301      	movs	r3, #1
 8008976:	e066      	b.n	8008a46 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d106      	bne.n	8008994 <HAL_SD_WriteBlocks+0x25c>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800898c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008990:	2b00      	cmp	r3, #0
 8008992:	d012      	beq.n	80089ba <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a2d      	ldr	r2, [pc, #180]	@ (8008a50 <HAL_SD_WriteBlocks+0x318>)
 800899a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089a0:	f043 0208 	orr.w	r2, r3, #8
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2201      	movs	r2, #1
 80089ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80089b6:	2301      	movs	r3, #1
 80089b8:	e045      	b.n	8008a46 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089c0:	f003 0302 	and.w	r3, r3, #2
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d012      	beq.n	80089ee <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a20      	ldr	r2, [pc, #128]	@ (8008a50 <HAL_SD_WriteBlocks+0x318>)
 80089ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d4:	f043 0202 	orr.w	r2, r3, #2
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e02b      	b.n	8008a46 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d012      	beq.n	8008a22 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a13      	ldr	r2, [pc, #76]	@ (8008a50 <HAL_SD_WriteBlocks+0x318>)
 8008a02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a08:	f043 0210 	orr.w	r2, r3, #16
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e011      	b.n	8008a46 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008a2a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	e006      	b.n	8008a46 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a3c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
  }
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3748      	adds	r7, #72	@ 0x48
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	004005ff 	.word	0x004005ff

08008a54 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a60:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d008      	beq.n	8008a82 <HAL_SD_IRQHandler+0x2e>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f003 0308 	and.w	r3, r3, #8
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f000 fd5c 	bl	8009538 <SD_Read_IT>
 8008a80:	e165      	b.n	8008d4e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f000 808f 	beq.w	8008bb0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a9a:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6812      	ldr	r2, [r2, #0]
 8008aa6:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8008aaa:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8008aae:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0201 	bic.w	r2, r2, #1
 8008abe:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f003 0308 	and.w	r3, r3, #8
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d039      	beq.n	8008b3e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f003 0302 	and.w	r3, r3, #2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d104      	bne.n	8008ade <HAL_SD_IRQHandler+0x8a>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f003 0320 	and.w	r3, r3, #32
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d011      	beq.n	8008b02 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f001 fd26 	bl	800a534 <SDMMC_CmdStopTransfer>
 8008ae8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d008      	beq.n	8008b02 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	431a      	orrs	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f92f 	bl	8008d60 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008b0a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d104      	bne.n	8008b2e <HAL_SD_IRQHandler+0xda>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f003 0302 	and.w	r3, r3, #2
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f002 f94c 	bl	800adcc <HAL_SD_RxCpltCallback>
 8008b34:	e10b      	b.n	8008d4e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f002 f93e 	bl	800adb8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b3c:	e107      	b.n	8008d4e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 8102 	beq.w	8008d4e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f003 0320 	and.w	r3, r3, #32
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d011      	beq.n	8008b78 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f001 fceb 	bl	800a534 <SDMMC_CmdStopTransfer>
 8008b5e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d008      	beq.n	8008b78 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	431a      	orrs	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f8f4 	bl	8008d60 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	f040 80e5 	bne.w	8008d4e <HAL_SD_IRQHandler+0x2fa>
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f003 0302 	and.w	r3, r3, #2
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f040 80df 	bne.w	8008d4e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f022 0208 	bic.w	r2, r2, #8
 8008b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f002 f905 	bl	800adb8 <HAL_SD_TxCpltCallback>
}
 8008bae:	e0ce      	b.n	8008d4e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d008      	beq.n	8008bd0 <HAL_SD_IRQHandler+0x17c>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f003 0308 	and.w	r3, r3, #8
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fd06 	bl	80095da <SD_Write_IT>
 8008bce:	e0be      	b.n	8008d4e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bd6:	f240 233a 	movw	r3, #570	@ 0x23a
 8008bda:	4013      	ands	r3, r2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f000 80b6 	beq.w	8008d4e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008be8:	f003 0302 	and.w	r3, r3, #2
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d005      	beq.n	8008bfc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bf4:	f043 0202 	orr.w	r2, r3, #2
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c02:	f003 0308 	and.w	r3, r3, #8
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d005      	beq.n	8008c16 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c0e:	f043 0208 	orr.w	r2, r3, #8
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c1c:	f003 0320 	and.w	r3, r3, #32
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d005      	beq.n	8008c30 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c28:	f043 0220 	orr.w	r2, r3, #32
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c36:	f003 0310 	and.w	r3, r3, #16
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d005      	beq.n	8008c4a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c42:	f043 0210 	orr.w	r2, r3, #16
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d005      	beq.n	8008c64 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c5c:	f043 0208 	orr.w	r2, r3, #8
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f240 723a 	movw	r2, #1850	@ 0x73a
 8008c6c:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	6812      	ldr	r2, [r2, #0]
 8008c78:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8008c7c:	f023 0302 	bic.w	r3, r3, #2
 8008c80:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f001 fc54 	bl	800a534 <SDMMC_CmdStopTransfer>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c92:	431a      	orrs	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f003 0308 	and.w	r3, r3, #8
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00a      	beq.n	8008cb8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f855 	bl	8008d60 <HAL_SD_ErrorCallback>
}
 8008cb6:	e04a      	b.n	8008d4e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d045      	beq.n	8008d4e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f003 0310 	and.w	r3, r3, #16
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d104      	bne.n	8008cd6 <HAL_SD_IRQHandler+0x282>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f003 0320 	and.w	r3, r3, #32
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d011      	beq.n	8008cfa <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cda:	4a1f      	ldr	r2, [pc, #124]	@ (8008d58 <HAL_SD_IRQHandler+0x304>)
 8008cdc:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fc f80d 	bl	8004d02 <HAL_DMA_Abort_IT>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d02f      	beq.n	8008d4e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 fa2e 	bl	8009154 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008cf8:	e029      	b.n	8008d4e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f003 0301 	and.w	r3, r3, #1
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d104      	bne.n	8008d0e <HAL_SD_IRQHandler+0x2ba>
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f003 0302 	and.w	r3, r3, #2
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d011      	beq.n	8008d32 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d12:	4a12      	ldr	r2, [pc, #72]	@ (8008d5c <HAL_SD_IRQHandler+0x308>)
 8008d14:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fb fff1 	bl	8004d02 <HAL_DMA_Abort_IT>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d013      	beq.n	8008d4e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f000 fa49 	bl	80091c2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008d30:	e00d      	b.n	8008d4e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f002 f82c 	bl	800ada4 <HAL_SD_AbortCallback>
}
 8008d4c:	e7ff      	b.n	8008d4e <HAL_SD_IRQHandler+0x2fa>
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	08009155 	.word	0x08009155
 8008d5c:	080091c3 	.word	0x080091c3

08008d60 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d82:	0f9b      	lsrs	r3, r3, #30
 8008d84:	b2da      	uxtb	r2, r3
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d8e:	0e9b      	lsrs	r3, r3, #26
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	f003 030f 	and.w	r3, r3, #15
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008da0:	0e1b      	lsrs	r3, r3, #24
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	f003 0303 	and.w	r3, r3, #3
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008db2:	0c1b      	lsrs	r3, r3, #16
 8008db4:	b2da      	uxtb	r2, r3
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dbe:	0a1b      	lsrs	r3, r3, #8
 8008dc0:	b2da      	uxtb	r2, r3
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dca:	b2da      	uxtb	r2, r3
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dd4:	0d1b      	lsrs	r3, r3, #20
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008de0:	0c1b      	lsrs	r3, r3, #16
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	f003 030f 	and.w	r3, r3, #15
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008df2:	0bdb      	lsrs	r3, r3, #15
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	b2da      	uxtb	r2, r3
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e04:	0b9b      	lsrs	r3, r3, #14
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	f003 0301 	and.w	r3, r3, #1
 8008e0c:	b2da      	uxtb	r2, r3
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e16:	0b5b      	lsrs	r3, r3, #13
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	f003 0301 	and.w	r3, r3, #1
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e28:	0b1b      	lsrs	r3, r3, #12
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	f003 0301 	and.w	r3, r3, #1
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d163      	bne.n	8008f0c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e48:	009a      	lsls	r2, r3, #2
 8008e4a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008e4e:	4013      	ands	r3, r2
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008e54:	0f92      	lsrs	r2, r2, #30
 8008e56:	431a      	orrs	r2, r3
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e60:	0edb      	lsrs	r3, r3, #27
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	f003 0307 	and.w	r3, r3, #7
 8008e68:	b2da      	uxtb	r2, r3
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e72:	0e1b      	lsrs	r3, r3, #24
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	f003 0307 	and.w	r3, r3, #7
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e84:	0d5b      	lsrs	r3, r3, #21
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	f003 0307 	and.w	r3, r3, #7
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e96:	0c9b      	lsrs	r3, r3, #18
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	f003 0307 	and.w	r3, r3, #7
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ea8:	0bdb      	lsrs	r3, r3, #15
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	f003 0307 	and.w	r3, r3, #7
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	1c5a      	adds	r2, r3, #1
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	7e1b      	ldrb	r3, [r3, #24]
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	f003 0307 	and.w	r3, r3, #7
 8008eca:	3302      	adds	r3, #2
 8008ecc:	2201      	movs	r2, #1
 8008ece:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008ed6:	fb03 f202 	mul.w	r2, r3, r2
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	7a1b      	ldrb	r3, [r3, #8]
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	f003 030f 	and.w	r3, r3, #15
 8008ee8:	2201      	movs	r2, #1
 8008eea:	409a      	lsls	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008ef8:	0a52      	lsrs	r2, r2, #9
 8008efa:	fb03 f202 	mul.w	r2, r3, r2
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f08:	661a      	str	r2, [r3, #96]	@ 0x60
 8008f0a:	e031      	b.n	8008f70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d11d      	bne.n	8008f50 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f18:	041b      	lsls	r3, r3, #16
 8008f1a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f22:	0c1b      	lsrs	r3, r3, #16
 8008f24:	431a      	orrs	r2, r3
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	029a      	lsls	r2, r3, #10
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f44:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	661a      	str	r2, [r3, #96]	@ 0x60
 8008f4e:	e00f      	b.n	8008f70 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a58      	ldr	r2, [pc, #352]	@ (80090b8 <HAL_SD_GetCardCSD+0x344>)
 8008f56:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e09d      	b.n	80090ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f74:	0b9b      	lsrs	r3, r3, #14
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f86:	09db      	lsrs	r3, r3, #7
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f8e:	b2da      	uxtb	r2, r3
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f9e:	b2da      	uxtb	r2, r3
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fa8:	0fdb      	lsrs	r3, r3, #31
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fb4:	0f5b      	lsrs	r3, r3, #29
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	f003 0303 	and.w	r3, r3, #3
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fc6:	0e9b      	lsrs	r3, r3, #26
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	f003 0307 	and.w	r3, r3, #7
 8008fce:	b2da      	uxtb	r2, r3
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fd8:	0d9b      	lsrs	r3, r3, #22
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	f003 030f 	and.w	r3, r3, #15
 8008fe0:	b2da      	uxtb	r2, r3
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fea:	0d5b      	lsrs	r3, r3, #21
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009006:	0c1b      	lsrs	r3, r3, #16
 8009008:	b2db      	uxtb	r3, r3
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	b2da      	uxtb	r2, r3
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800901a:	0bdb      	lsrs	r3, r3, #15
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	b2da      	uxtb	r2, r3
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800902e:	0b9b      	lsrs	r3, r3, #14
 8009030:	b2db      	uxtb	r3, r3
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	b2da      	uxtb	r2, r3
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009042:	0b5b      	lsrs	r3, r3, #13
 8009044:	b2db      	uxtb	r3, r3
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	b2da      	uxtb	r2, r3
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009056:	0b1b      	lsrs	r3, r3, #12
 8009058:	b2db      	uxtb	r3, r3
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	b2da      	uxtb	r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800906a:	0a9b      	lsrs	r3, r3, #10
 800906c:	b2db      	uxtb	r3, r3
 800906e:	f003 0303 	and.w	r3, r3, #3
 8009072:	b2da      	uxtb	r2, r3
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800907e:	0a1b      	lsrs	r3, r3, #8
 8009080:	b2db      	uxtb	r3, r3
 8009082:	f003 0303 	and.w	r3, r3, #3
 8009086:	b2da      	uxtb	r2, r3
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009092:	085b      	lsrs	r3, r3, #1
 8009094:	b2db      	uxtb	r3, r3
 8009096:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800909a:	b2da      	uxtb	r2, r3
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	004005ff 	.word	0x004005ff

080090bc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800911c:	2300      	movs	r3, #0
 800911e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009120:	f107 030c 	add.w	r3, r7, #12
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f9de 	bl	80094e8 <SD_SendStatus>
 800912c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d005      	beq.n	8009140 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	431a      	orrs	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	0a5b      	lsrs	r3, r3, #9
 8009144:	f003 030f 	and.w	r3, r3, #15
 8009148:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800914a:	693b      	ldr	r3, [r7, #16]
}
 800914c:	4618      	mov	r0, r3
 800914e:	3718      	adds	r7, #24
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009160:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f240 523a 	movw	r2, #1338	@ 0x53a
 800916a:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7ff ffd1 	bl	8009114 <HAL_SD_GetCardState>
 8009172:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	2201      	movs	r2, #1
 8009178:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2b06      	cmp	r3, #6
 8009186:	d002      	beq.n	800918e <SD_DMATxAbort+0x3a>
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	2b05      	cmp	r3, #5
 800918c:	d10a      	bne.n	80091a4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4618      	mov	r0, r3
 8009194:	f001 f9ce 	bl	800a534 <SDMMC_CmdStopTransfer>
 8009198:	4602      	mov	r2, r0
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919e:	431a      	orrs	r2, r3
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d103      	bne.n	80091b4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f001 fdf9 	bl	800ada4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80091b2:	e002      	b.n	80091ba <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f7ff fdd3 	bl	8008d60 <HAL_SD_ErrorCallback>
}
 80091ba:	bf00      	nop
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b084      	sub	sp, #16
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ce:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80091d8:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	f7ff ff9a 	bl	8009114 <HAL_SD_GetCardState>
 80091e0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2b06      	cmp	r3, #6
 80091f4:	d002      	beq.n	80091fc <SD_DMARxAbort+0x3a>
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	2b05      	cmp	r3, #5
 80091fa:	d10a      	bne.n	8009212 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4618      	mov	r0, r3
 8009202:	f001 f997 	bl	800a534 <SDMMC_CmdStopTransfer>
 8009206:	4602      	mov	r2, r0
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800920c:	431a      	orrs	r2, r3
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009216:	2b00      	cmp	r3, #0
 8009218:	d103      	bne.n	8009222 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800921a:	68f8      	ldr	r0, [r7, #12]
 800921c:	f001 fdc2 	bl	800ada4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009220:	e002      	b.n	8009228 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f7ff fd9c 	bl	8008d60 <HAL_SD_ErrorCallback>
}
 8009228:	bf00      	nop
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009230:	b5b0      	push	{r4, r5, r7, lr}
 8009232:	b094      	sub	sp, #80	@ 0x50
 8009234:	af04      	add	r7, sp, #16
 8009236:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009238:	2301      	movs	r3, #1
 800923a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4618      	mov	r0, r3
 8009242:	f001 f848 	bl	800a2d6 <SDIO_GetPowerState>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d102      	bne.n	8009252 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800924c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009250:	e0b8      	b.n	80093c4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009256:	2b03      	cmp	r3, #3
 8009258:	d02f      	beq.n	80092ba <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4618      	mov	r0, r3
 8009260:	f001 fa2f 	bl	800a6c2 <SDMMC_CmdSendCID>
 8009264:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009268:	2b00      	cmp	r3, #0
 800926a:	d001      	beq.n	8009270 <SD_InitCard+0x40>
    {
      return errorstate;
 800926c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800926e:	e0a9      	b.n	80093c4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2100      	movs	r1, #0
 8009276:	4618      	mov	r0, r3
 8009278:	f001 f872 	bl	800a360 <SDIO_GetResponse>
 800927c:	4602      	mov	r2, r0
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2104      	movs	r1, #4
 8009288:	4618      	mov	r0, r3
 800928a:	f001 f869 	bl	800a360 <SDIO_GetResponse>
 800928e:	4602      	mov	r2, r0
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2108      	movs	r1, #8
 800929a:	4618      	mov	r0, r3
 800929c:	f001 f860 	bl	800a360 <SDIO_GetResponse>
 80092a0:	4602      	mov	r2, r0
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	210c      	movs	r1, #12
 80092ac:	4618      	mov	r0, r3
 80092ae:	f001 f857 	bl	800a360 <SDIO_GetResponse>
 80092b2:	4602      	mov	r2, r0
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d00d      	beq.n	80092de <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f107 020e 	add.w	r2, r7, #14
 80092ca:	4611      	mov	r1, r2
 80092cc:	4618      	mov	r0, r3
 80092ce:	f001 fa35 	bl	800a73c <SDMMC_CmdSetRelAdd>
 80092d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80092d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d001      	beq.n	80092de <SD_InitCard+0xae>
    {
      return errorstate;
 80092da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092dc:	e072      	b.n	80093c4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d036      	beq.n	8009354 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80092e6:	89fb      	ldrh	r3, [r7, #14]
 80092e8:	461a      	mov	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092f6:	041b      	lsls	r3, r3, #16
 80092f8:	4619      	mov	r1, r3
 80092fa:	4610      	mov	r0, r2
 80092fc:	f001 f9ff 	bl	800a6fe <SDMMC_CmdSendCSD>
 8009300:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009304:	2b00      	cmp	r3, #0
 8009306:	d001      	beq.n	800930c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800930a:	e05b      	b.n	80093c4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2100      	movs	r1, #0
 8009312:	4618      	mov	r0, r3
 8009314:	f001 f824 	bl	800a360 <SDIO_GetResponse>
 8009318:	4602      	mov	r2, r0
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2104      	movs	r1, #4
 8009324:	4618      	mov	r0, r3
 8009326:	f001 f81b 	bl	800a360 <SDIO_GetResponse>
 800932a:	4602      	mov	r2, r0
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2108      	movs	r1, #8
 8009336:	4618      	mov	r0, r3
 8009338:	f001 f812 	bl	800a360 <SDIO_GetResponse>
 800933c:	4602      	mov	r2, r0
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	210c      	movs	r1, #12
 8009348:	4618      	mov	r0, r3
 800934a:	f001 f809 	bl	800a360 <SDIO_GetResponse>
 800934e:	4602      	mov	r2, r0
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	2104      	movs	r1, #4
 800935a:	4618      	mov	r0, r3
 800935c:	f001 f800 	bl	800a360 <SDIO_GetResponse>
 8009360:	4603      	mov	r3, r0
 8009362:	0d1a      	lsrs	r2, r3, #20
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009368:	f107 0310 	add.w	r3, r7, #16
 800936c:	4619      	mov	r1, r3
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7ff fd00 	bl	8008d74 <HAL_SD_GetCardCSD>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d002      	beq.n	8009380 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800937a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800937e:	e021      	b.n	80093c4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6819      	ldr	r1, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009388:	041b      	lsls	r3, r3, #16
 800938a:	2200      	movs	r2, #0
 800938c:	461c      	mov	r4, r3
 800938e:	4615      	mov	r5, r2
 8009390:	4622      	mov	r2, r4
 8009392:	462b      	mov	r3, r5
 8009394:	4608      	mov	r0, r1
 8009396:	f001 f8ef 	bl	800a578 <SDMMC_CmdSelDesel>
 800939a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800939c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <SD_InitCard+0x176>
  {
    return errorstate;
 80093a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093a4:	e00e      	b.n	80093c4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681d      	ldr	r5, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	466c      	mov	r4, sp
 80093ae:	f103 0210 	add.w	r2, r3, #16
 80093b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80093b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80093b8:	3304      	adds	r3, #4
 80093ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093bc:	4628      	mov	r0, r5
 80093be:	f000 ff33 	bl	800a228 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3740      	adds	r7, #64	@ 0x40
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bdb0      	pop	{r4, r5, r7, pc}

080093cc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093d4:	2300      	movs	r3, #0
 80093d6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80093d8:	2300      	movs	r3, #0
 80093da:	617b      	str	r3, [r7, #20]
 80093dc:	2300      	movs	r3, #0
 80093de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 f8ea 	bl	800a5be <SDMMC_CmdGoIdleState>
 80093ea:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <SD_PowerON+0x2a>
  {
    return errorstate;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	e072      	b.n	80094dc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f001 f8fd 	bl	800a5fa <SDMMC_CmdOperCond>
 8009400:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00d      	beq.n	8009424 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	4618      	mov	r0, r3
 8009414:	f001 f8d3 	bl	800a5be <SDMMC_CmdGoIdleState>
 8009418:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d004      	beq.n	800942a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	e05b      	b.n	80094dc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800942e:	2b01      	cmp	r3, #1
 8009430:	d137      	bne.n	80094a2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2100      	movs	r1, #0
 8009438:	4618      	mov	r0, r3
 800943a:	f001 f8fd 	bl	800a638 <SDMMC_CmdAppCommand>
 800943e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d02d      	beq.n	80094a2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009446:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800944a:	e047      	b.n	80094dc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2100      	movs	r1, #0
 8009452:	4618      	mov	r0, r3
 8009454:	f001 f8f0 	bl	800a638 <SDMMC_CmdAppCommand>
 8009458:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <SD_PowerON+0x98>
    {
      return errorstate;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	e03b      	b.n	80094dc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	491e      	ldr	r1, [pc, #120]	@ (80094e4 <SD_PowerON+0x118>)
 800946a:	4618      	mov	r0, r3
 800946c:	f001 f906 	bl	800a67c <SDMMC_CmdAppOperCommand>
 8009470:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009478:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800947c:	e02e      	b.n	80094dc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2100      	movs	r1, #0
 8009484:	4618      	mov	r0, r3
 8009486:	f000 ff6b 	bl	800a360 <SDIO_GetResponse>
 800948a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	0fdb      	lsrs	r3, r3, #31
 8009490:	2b01      	cmp	r3, #1
 8009492:	d101      	bne.n	8009498 <SD_PowerON+0xcc>
 8009494:	2301      	movs	r3, #1
 8009496:	e000      	b.n	800949a <SD_PowerON+0xce>
 8009498:	2300      	movs	r3, #0
 800949a:	613b      	str	r3, [r7, #16]

    count++;
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	3301      	adds	r3, #1
 80094a0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d802      	bhi.n	80094b2 <SD_PowerON+0xe6>
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d0cc      	beq.n	800944c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d902      	bls.n	80094c2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80094bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80094c0:	e00c      	b.n	80094dc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d003      	beq.n	80094d4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80094d2:	e002      	b.n	80094da <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 80094da:	2300      	movs	r3, #0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3718      	adds	r7, #24
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}
 80094e4:	c1100000 	.word	0xc1100000

080094e8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b084      	sub	sp, #16
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d102      	bne.n	80094fe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80094f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80094fc:	e018      	b.n	8009530 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009506:	041b      	lsls	r3, r3, #16
 8009508:	4619      	mov	r1, r3
 800950a:	4610      	mov	r0, r2
 800950c:	f001 f937 	bl	800a77e <SDMMC_CmdSendStatus>
 8009510:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	e009      	b.n	8009530 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2100      	movs	r1, #0
 8009522:	4618      	mov	r0, r3
 8009524:	f000 ff1c 	bl	800a360 <SDIO_GetResponse>
 8009528:	4602      	mov	r2, r0
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b086      	sub	sp, #24
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009544:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d03f      	beq.n	80095d2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009552:	2300      	movs	r3, #0
 8009554:	617b      	str	r3, [r7, #20]
 8009556:	e033      	b.n	80095c0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4618      	mov	r0, r3
 800955e:	f000 fe8e 	bl	800a27e <SDIO_ReadFIFO>
 8009562:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	b2da      	uxtb	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	3301      	adds	r3, #1
 8009570:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	3b01      	subs	r3, #1
 8009576:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	0a1b      	lsrs	r3, r3, #8
 800957c:	b2da      	uxtb	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	3301      	adds	r3, #1
 8009586:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	3b01      	subs	r3, #1
 800958c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	0c1b      	lsrs	r3, r3, #16
 8009592:	b2da      	uxtb	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	3301      	adds	r3, #1
 800959c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	3b01      	subs	r3, #1
 80095a2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	0e1b      	lsrs	r3, r3, #24
 80095a8:	b2da      	uxtb	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	3301      	adds	r3, #1
 80095b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	3301      	adds	r3, #1
 80095be:	617b      	str	r3, [r7, #20]
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	2b07      	cmp	r3, #7
 80095c4:	d9c8      	bls.n	8009558 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	693a      	ldr	r2, [r7, #16]
 80095d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80095d2:	bf00      	nop
 80095d4:	3718      	adds	r7, #24
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b086      	sub	sp, #24
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095ec:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d043      	beq.n	800967c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80095f4:	2300      	movs	r3, #0
 80095f6:	617b      	str	r3, [r7, #20]
 80095f8:	e037      	b.n	800966a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3301      	adds	r3, #1
 8009604:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	3b01      	subs	r3, #1
 800960a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	021a      	lsls	r2, r3, #8
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	4313      	orrs	r3, r2
 8009616:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	3301      	adds	r3, #1
 800961c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	3b01      	subs	r3, #1
 8009622:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	041a      	lsls	r2, r3, #16
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	4313      	orrs	r3, r2
 800962e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	3301      	adds	r3, #1
 8009634:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	3b01      	subs	r3, #1
 800963a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	061a      	lsls	r2, r3, #24
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	4313      	orrs	r3, r2
 8009646:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3301      	adds	r3, #1
 800964c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	3b01      	subs	r3, #1
 8009652:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f107 0208 	add.w	r2, r7, #8
 800965c:	4611      	mov	r1, r2
 800965e:	4618      	mov	r0, r3
 8009660:	f000 fe1a 	bl	800a298 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	3301      	adds	r3, #1
 8009668:	617b      	str	r3, [r7, #20]
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2b07      	cmp	r3, #7
 800966e:	d9c4      	bls.n	80095fa <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800967c:	bf00      	nop
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e07b      	b.n	800978e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800969a:	2b00      	cmp	r3, #0
 800969c:	d108      	bne.n	80096b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096a6:	d009      	beq.n	80096bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2200      	movs	r2, #0
 80096ac:	61da      	str	r2, [r3, #28]
 80096ae:	e005      	b.n	80096bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d106      	bne.n	80096dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7f9 fd0e 	bl	80030f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2202      	movs	r2, #2
 80096e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80096f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009704:	431a      	orrs	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800970e:	431a      	orrs	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	f003 0302 	and.w	r3, r3, #2
 8009718:	431a      	orrs	r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	695b      	ldr	r3, [r3, #20]
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	431a      	orrs	r2, r3
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	699b      	ldr	r3, [r3, #24]
 8009728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800972c:	431a      	orrs	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009736:	431a      	orrs	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6a1b      	ldr	r3, [r3, #32]
 800973c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009740:	ea42 0103 	orr.w	r1, r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009748:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	430a      	orrs	r2, r1
 8009752:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	0c1b      	lsrs	r3, r3, #16
 800975a:	f003 0104 	and.w	r1, r3, #4
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009762:	f003 0210 	and.w	r2, r3, #16
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	430a      	orrs	r2, r1
 800976c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	69da      	ldr	r2, [r3, #28]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800977c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3708      	adds	r7, #8
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b088      	sub	sp, #32
 800979a:	af00      	add	r7, sp, #0
 800979c:	60f8      	str	r0, [r7, #12]
 800979e:	60b9      	str	r1, [r7, #8]
 80097a0:	603b      	str	r3, [r7, #0]
 80097a2:	4613      	mov	r3, r2
 80097a4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097a6:	f7f9 fed3 	bl	8003550 <HAL_GetTick>
 80097aa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80097ac:	88fb      	ldrh	r3, [r7, #6]
 80097ae:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d001      	beq.n	80097c0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80097bc:	2302      	movs	r3, #2
 80097be:	e12a      	b.n	8009a16 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d002      	beq.n	80097cc <HAL_SPI_Transmit+0x36>
 80097c6:	88fb      	ldrh	r3, [r7, #6]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d101      	bne.n	80097d0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e122      	b.n	8009a16 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d101      	bne.n	80097de <HAL_SPI_Transmit+0x48>
 80097da:	2302      	movs	r3, #2
 80097dc:	e11b      	b.n	8009a16 <HAL_SPI_Transmit+0x280>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2201      	movs	r2, #1
 80097e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	2203      	movs	r2, #3
 80097ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2200      	movs	r2, #0
 80097f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	88fa      	ldrh	r2, [r7, #6]
 80097fe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	88fa      	ldrh	r2, [r7, #6]
 8009804:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2200      	movs	r2, #0
 8009822:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800982c:	d10f      	bne.n	800984e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800983c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800984c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009858:	2b40      	cmp	r3, #64	@ 0x40
 800985a:	d007      	beq.n	800986c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800986a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009874:	d152      	bne.n	800991c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d002      	beq.n	8009884 <HAL_SPI_Transmit+0xee>
 800987e:	8b7b      	ldrh	r3, [r7, #26]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d145      	bne.n	8009910 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009888:	881a      	ldrh	r2, [r3, #0]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009894:	1c9a      	adds	r2, r3, #2
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800989e:	b29b      	uxth	r3, r3
 80098a0:	3b01      	subs	r3, #1
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80098a8:	e032      	b.n	8009910 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f003 0302 	and.w	r3, r3, #2
 80098b4:	2b02      	cmp	r3, #2
 80098b6:	d112      	bne.n	80098de <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098bc:	881a      	ldrh	r2, [r3, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098c8:	1c9a      	adds	r2, r3, #2
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	3b01      	subs	r3, #1
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	86da      	strh	r2, [r3, #54]	@ 0x36
 80098dc:	e018      	b.n	8009910 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098de:	f7f9 fe37 	bl	8003550 <HAL_GetTick>
 80098e2:	4602      	mov	r2, r0
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d803      	bhi.n	80098f6 <HAL_SPI_Transmit+0x160>
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f4:	d102      	bne.n	80098fc <HAL_SPI_Transmit+0x166>
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d109      	bne.n	8009910 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800990c:	2303      	movs	r3, #3
 800990e:	e082      	b.n	8009a16 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009914:	b29b      	uxth	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1c7      	bne.n	80098aa <HAL_SPI_Transmit+0x114>
 800991a:	e053      	b.n	80099c4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <HAL_SPI_Transmit+0x194>
 8009924:	8b7b      	ldrh	r3, [r7, #26]
 8009926:	2b01      	cmp	r3, #1
 8009928:	d147      	bne.n	80099ba <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	330c      	adds	r3, #12
 8009934:	7812      	ldrb	r2, [r2, #0]
 8009936:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800993c:	1c5a      	adds	r2, r3, #1
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009946:	b29b      	uxth	r3, r3
 8009948:	3b01      	subs	r3, #1
 800994a:	b29a      	uxth	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009950:	e033      	b.n	80099ba <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	f003 0302 	and.w	r3, r3, #2
 800995c:	2b02      	cmp	r3, #2
 800995e:	d113      	bne.n	8009988 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	330c      	adds	r3, #12
 800996a:	7812      	ldrb	r2, [r2, #0]
 800996c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009972:	1c5a      	adds	r2, r3, #1
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800997c:	b29b      	uxth	r3, r3
 800997e:	3b01      	subs	r3, #1
 8009980:	b29a      	uxth	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009986:	e018      	b.n	80099ba <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009988:	f7f9 fde2 	bl	8003550 <HAL_GetTick>
 800998c:	4602      	mov	r2, r0
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	429a      	cmp	r2, r3
 8009996:	d803      	bhi.n	80099a0 <HAL_SPI_Transmit+0x20a>
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800999e:	d102      	bne.n	80099a6 <HAL_SPI_Transmit+0x210>
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d109      	bne.n	80099ba <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e02d      	b.n	8009a16 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099be:	b29b      	uxth	r3, r3
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1c6      	bne.n	8009952 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099c4:	69fa      	ldr	r2, [r7, #28]
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 fbd9 	bl	800a180 <SPI_EndRxTxTransaction>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d002      	beq.n	80099da <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2220      	movs	r2, #32
 80099d8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10a      	bne.n	80099f8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80099e2:	2300      	movs	r3, #0
 80099e4:	617b      	str	r3, [r7, #20]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	617b      	str	r3, [r7, #20]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	617b      	str	r3, [r7, #20]
 80099f6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2201      	movs	r2, #1
 80099fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d001      	beq.n	8009a14 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e000      	b.n	8009a16 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8009a14:	2300      	movs	r3, #0
  }
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3720      	adds	r7, #32
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b088      	sub	sp, #32
 8009a22:	af02      	add	r7, sp, #8
 8009a24:	60f8      	str	r0, [r7, #12]
 8009a26:	60b9      	str	r1, [r7, #8]
 8009a28:	603b      	str	r3, [r7, #0]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d001      	beq.n	8009a3e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8009a3a:	2302      	movs	r3, #2
 8009a3c:	e104      	b.n	8009c48 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d002      	beq.n	8009a4a <HAL_SPI_Receive+0x2c>
 8009a44:	88fb      	ldrh	r3, [r7, #6]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e0fc      	b.n	8009c48 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a56:	d112      	bne.n	8009a7e <HAL_SPI_Receive+0x60>
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	689b      	ldr	r3, [r3, #8]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10e      	bne.n	8009a7e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2204      	movs	r2, #4
 8009a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009a68:	88fa      	ldrh	r2, [r7, #6]
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	68ba      	ldr	r2, [r7, #8]
 8009a72:	68b9      	ldr	r1, [r7, #8]
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	f000 f8eb 	bl	8009c50 <HAL_SPI_TransmitReceive>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	e0e4      	b.n	8009c48 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a7e:	f7f9 fd67 	bl	8003550 <HAL_GetTick>
 8009a82:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d101      	bne.n	8009a92 <HAL_SPI_Receive+0x74>
 8009a8e:	2302      	movs	r3, #2
 8009a90:	e0da      	b.n	8009c48 <HAL_SPI_Receive+0x22a>
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	2204      	movs	r2, #4
 8009a9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	88fa      	ldrh	r2, [r7, #6]
 8009ab2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	88fa      	ldrh	r2, [r7, #6]
 8009ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2200      	movs	r2, #0
 8009abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ae0:	d10f      	bne.n	8009b02 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009af0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009b00:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b0c:	2b40      	cmp	r3, #64	@ 0x40
 8009b0e:	d007      	beq.n	8009b20 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b1e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d170      	bne.n	8009c0a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009b28:	e035      	b.n	8009b96 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d115      	bne.n	8009b64 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f103 020c 	add.w	r2, r3, #12
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b44:	7812      	ldrb	r2, [r2, #0]
 8009b46:	b2d2      	uxtb	r2, r2
 8009b48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009b62:	e018      	b.n	8009b96 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b64:	f7f9 fcf4 	bl	8003550 <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d803      	bhi.n	8009b7c <HAL_SPI_Receive+0x15e>
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b7a:	d102      	bne.n	8009b82 <HAL_SPI_Receive+0x164>
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d109      	bne.n	8009b96 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2201      	movs	r2, #1
 8009b86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009b92:	2303      	movs	r3, #3
 8009b94:	e058      	b.n	8009c48 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1c4      	bne.n	8009b2a <HAL_SPI_Receive+0x10c>
 8009ba0:	e038      	b.n	8009c14 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	f003 0301 	and.w	r3, r3, #1
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d113      	bne.n	8009bd8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	68da      	ldr	r2, [r3, #12]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bba:	b292      	uxth	r2, r2
 8009bbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bc2:	1c9a      	adds	r2, r3, #2
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	3b01      	subs	r3, #1
 8009bd0:	b29a      	uxth	r2, r3
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009bd6:	e018      	b.n	8009c0a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009bd8:	f7f9 fcba 	bl	8003550 <HAL_GetTick>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d803      	bhi.n	8009bf0 <HAL_SPI_Receive+0x1d2>
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bee:	d102      	bne.n	8009bf6 <HAL_SPI_Receive+0x1d8>
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d109      	bne.n	8009c0a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009c06:	2303      	movs	r3, #3
 8009c08:	e01e      	b.n	8009c48 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c0e:	b29b      	uxth	r3, r3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d1c6      	bne.n	8009ba2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c14:	697a      	ldr	r2, [r7, #20]
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	68f8      	ldr	r0, [r7, #12]
 8009c1a:	f000 fa4b 	bl	800a0b4 <SPI_EndRxTransaction>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d002      	beq.n	8009c2a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2220      	movs	r2, #32
 8009c28:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d001      	beq.n	8009c46 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	e000      	b.n	8009c48 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8009c46:	2300      	movs	r3, #0
  }
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3718      	adds	r7, #24
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}

08009c50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b08a      	sub	sp, #40	@ 0x28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
 8009c5c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c5e:	2301      	movs	r3, #1
 8009c60:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c62:	f7f9 fc75 	bl	8003550 <HAL_GetTick>
 8009c66:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009c6e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009c76:	887b      	ldrh	r3, [r7, #2]
 8009c78:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009c7a:	7ffb      	ldrb	r3, [r7, #31]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d00c      	beq.n	8009c9a <HAL_SPI_TransmitReceive+0x4a>
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c86:	d106      	bne.n	8009c96 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d102      	bne.n	8009c96 <HAL_SPI_TransmitReceive+0x46>
 8009c90:	7ffb      	ldrb	r3, [r7, #31]
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	d001      	beq.n	8009c9a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009c96:	2302      	movs	r3, #2
 8009c98:	e17f      	b.n	8009f9a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d005      	beq.n	8009cac <HAL_SPI_TransmitReceive+0x5c>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d002      	beq.n	8009cac <HAL_SPI_TransmitReceive+0x5c>
 8009ca6:	887b      	ldrh	r3, [r7, #2]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d101      	bne.n	8009cb0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	e174      	b.n	8009f9a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d101      	bne.n	8009cbe <HAL_SPI_TransmitReceive+0x6e>
 8009cba:	2302      	movs	r3, #2
 8009cbc:	e16d      	b.n	8009f9a <HAL_SPI_TransmitReceive+0x34a>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b04      	cmp	r3, #4
 8009cd0:	d003      	beq.n	8009cda <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2205      	movs	r2, #5
 8009cd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	887a      	ldrh	r2, [r7, #2]
 8009cea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	887a      	ldrh	r2, [r7, #2]
 8009cf0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	68ba      	ldr	r2, [r7, #8]
 8009cf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	887a      	ldrh	r2, [r7, #2]
 8009cfc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	887a      	ldrh	r2, [r7, #2]
 8009d02:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d1a:	2b40      	cmp	r3, #64	@ 0x40
 8009d1c:	d007      	beq.n	8009d2e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681a      	ldr	r2, [r3, #0]
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d2c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d36:	d17e      	bne.n	8009e36 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d002      	beq.n	8009d46 <HAL_SPI_TransmitReceive+0xf6>
 8009d40:	8afb      	ldrh	r3, [r7, #22]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d16c      	bne.n	8009e20 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d4a:	881a      	ldrh	r2, [r3, #0]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d56:	1c9a      	adds	r2, r3, #2
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	3b01      	subs	r3, #1
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d6a:	e059      	b.n	8009e20 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f003 0302 	and.w	r3, r3, #2
 8009d76:	2b02      	cmp	r3, #2
 8009d78:	d11b      	bne.n	8009db2 <HAL_SPI_TransmitReceive+0x162>
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d016      	beq.n	8009db2 <HAL_SPI_TransmitReceive+0x162>
 8009d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d113      	bne.n	8009db2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d8e:	881a      	ldrh	r2, [r3, #0]
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d9a:	1c9a      	adds	r2, r3, #2
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	3b01      	subs	r3, #1
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009dae:	2300      	movs	r3, #0
 8009db0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	f003 0301 	and.w	r3, r3, #1
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d119      	bne.n	8009df4 <HAL_SPI_TransmitReceive+0x1a4>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d014      	beq.n	8009df4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	68da      	ldr	r2, [r3, #12]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dd4:	b292      	uxth	r2, r2
 8009dd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ddc:	1c9a      	adds	r2, r3, #2
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	3b01      	subs	r3, #1
 8009dea:	b29a      	uxth	r2, r3
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009df0:	2301      	movs	r3, #1
 8009df2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009df4:	f7f9 fbac 	bl	8003550 <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d80d      	bhi.n	8009e20 <HAL_SPI_TransmitReceive+0x1d0>
 8009e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0a:	d009      	beq.n	8009e20 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009e1c:	2303      	movs	r3, #3
 8009e1e:	e0bc      	b.n	8009f9a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1a0      	bne.n	8009d6c <HAL_SPI_TransmitReceive+0x11c>
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d19b      	bne.n	8009d6c <HAL_SPI_TransmitReceive+0x11c>
 8009e34:	e082      	b.n	8009f3c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d002      	beq.n	8009e44 <HAL_SPI_TransmitReceive+0x1f4>
 8009e3e:	8afb      	ldrh	r3, [r7, #22]
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d171      	bne.n	8009f28 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	330c      	adds	r3, #12
 8009e4e:	7812      	ldrb	r2, [r2, #0]
 8009e50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e56:	1c5a      	adds	r2, r3, #1
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	3b01      	subs	r3, #1
 8009e64:	b29a      	uxth	r2, r3
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e6a:	e05d      	b.n	8009f28 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	f003 0302 	and.w	r3, r3, #2
 8009e76:	2b02      	cmp	r3, #2
 8009e78:	d11c      	bne.n	8009eb4 <HAL_SPI_TransmitReceive+0x264>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d017      	beq.n	8009eb4 <HAL_SPI_TransmitReceive+0x264>
 8009e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d114      	bne.n	8009eb4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	330c      	adds	r3, #12
 8009e94:	7812      	ldrb	r2, [r2, #0]
 8009e96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e9c:	1c5a      	adds	r2, r3, #1
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b01      	cmp	r3, #1
 8009ec0:	d119      	bne.n	8009ef6 <HAL_SPI_TransmitReceive+0x2a6>
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d014      	beq.n	8009ef6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	68da      	ldr	r2, [r3, #12]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed6:	b2d2      	uxtb	r2, r2
 8009ed8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ede:	1c5a      	adds	r2, r3, #1
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	3b01      	subs	r3, #1
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009ef6:	f7f9 fb2b 	bl	8003550 <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	6a3b      	ldr	r3, [r7, #32]
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d803      	bhi.n	8009f0e <HAL_SPI_TransmitReceive+0x2be>
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0c:	d102      	bne.n	8009f14 <HAL_SPI_TransmitReceive+0x2c4>
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d109      	bne.n	8009f28 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009f24:	2303      	movs	r3, #3
 8009f26:	e038      	b.n	8009f9a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d19c      	bne.n	8009e6c <HAL_SPI_TransmitReceive+0x21c>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d197      	bne.n	8009e6c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f3c:	6a3a      	ldr	r2, [r7, #32]
 8009f3e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f40:	68f8      	ldr	r0, [r7, #12]
 8009f42:	f000 f91d 	bl	800a180 <SPI_EndRxTxTransaction>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d008      	beq.n	8009f5e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	e01d      	b.n	8009f9a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d10a      	bne.n	8009f7c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f66:	2300      	movs	r3, #0
 8009f68:	613b      	str	r3, [r7, #16]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	613b      	str	r3, [r7, #16]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	613b      	str	r3, [r7, #16]
 8009f7a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	2200      	movs	r2, #0
 8009f88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e000      	b.n	8009f9a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8009f98:	2300      	movs	r3, #0
  }
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3728      	adds	r7, #40	@ 0x28
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
	...

08009fa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b088      	sub	sp, #32
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	60f8      	str	r0, [r7, #12]
 8009fac:	60b9      	str	r1, [r7, #8]
 8009fae:	603b      	str	r3, [r7, #0]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009fb4:	f7f9 facc 	bl	8003550 <HAL_GetTick>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fbc:	1a9b      	subs	r3, r3, r2
 8009fbe:	683a      	ldr	r2, [r7, #0]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009fc4:	f7f9 fac4 	bl	8003550 <HAL_GetTick>
 8009fc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009fca:	4b39      	ldr	r3, [pc, #228]	@ (800a0b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	015b      	lsls	r3, r3, #5
 8009fd0:	0d1b      	lsrs	r3, r3, #20
 8009fd2:	69fa      	ldr	r2, [r7, #28]
 8009fd4:	fb02 f303 	mul.w	r3, r2, r3
 8009fd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009fda:	e055      	b.n	800a088 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe2:	d051      	beq.n	800a088 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fe4:	f7f9 fab4 	bl	8003550 <HAL_GetTick>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	69fa      	ldr	r2, [r7, #28]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d902      	bls.n	8009ffa <SPI_WaitFlagStateUntilTimeout+0x56>
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d13d      	bne.n	800a076 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a008:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a012:	d111      	bne.n	800a038 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a01c:	d004      	beq.n	800a028 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	689b      	ldr	r3, [r3, #8]
 800a022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a026:	d107      	bne.n	800a038 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a036:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a040:	d10f      	bne.n	800a062 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a060:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2201      	movs	r2, #1
 800a066:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2200      	movs	r2, #0
 800a06e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a072:	2303      	movs	r3, #3
 800a074:	e018      	b.n	800a0a8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d102      	bne.n	800a082 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	61fb      	str	r3, [r7, #28]
 800a080:	e002      	b.n	800a088 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	3b01      	subs	r3, #1
 800a086:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	689a      	ldr	r2, [r3, #8]
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	4013      	ands	r3, r2
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	429a      	cmp	r2, r3
 800a096:	bf0c      	ite	eq
 800a098:	2301      	moveq	r3, #1
 800a09a:	2300      	movne	r3, #0
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	461a      	mov	r2, r3
 800a0a0:	79fb      	ldrb	r3, [r7, #7]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d19a      	bne.n	8009fdc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3720      	adds	r7, #32
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20000004 	.word	0x20000004

0800a0b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b086      	sub	sp, #24
 800a0b8:	af02      	add	r7, sp, #8
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	60b9      	str	r1, [r7, #8]
 800a0be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a0c8:	d111      	bne.n	800a0ee <SPI_EndRxTransaction+0x3a>
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0d2:	d004      	beq.n	800a0de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0dc:	d107      	bne.n	800a0ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a0f6:	d12a      	bne.n	800a14e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a100:	d012      	beq.n	800a128 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	9300      	str	r3, [sp, #0]
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2200      	movs	r2, #0
 800a10a:	2180      	movs	r1, #128	@ 0x80
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f7ff ff49 	bl	8009fa4 <SPI_WaitFlagStateUntilTimeout>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d02d      	beq.n	800a174 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a11c:	f043 0220 	orr.w	r2, r3, #32
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800a124:	2303      	movs	r3, #3
 800a126:	e026      	b.n	800a176 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	2200      	movs	r2, #0
 800a130:	2101      	movs	r1, #1
 800a132:	68f8      	ldr	r0, [r7, #12]
 800a134:	f7ff ff36 	bl	8009fa4 <SPI_WaitFlagStateUntilTimeout>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d01a      	beq.n	800a174 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a142:	f043 0220 	orr.w	r2, r3, #32
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800a14a:	2303      	movs	r3, #3
 800a14c:	e013      	b.n	800a176 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	2200      	movs	r2, #0
 800a156:	2101      	movs	r1, #1
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f7ff ff23 	bl	8009fa4 <SPI_WaitFlagStateUntilTimeout>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d007      	beq.n	800a174 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a168:	f043 0220 	orr.w	r2, r3, #32
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e000      	b.n	800a176 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3710      	adds	r7, #16
 800a17a:	46bd      	mov	sp, r7
 800a17c:	bd80      	pop	{r7, pc}
	...

0800a180 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af02      	add	r7, sp, #8
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	2201      	movs	r2, #1
 800a194:	2102      	movs	r1, #2
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f7ff ff04 	bl	8009fa4 <SPI_WaitFlagStateUntilTimeout>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d007      	beq.n	800a1b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1a6:	f043 0220 	orr.w	r2, r3, #32
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e032      	b.n	800a218 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a1b2:	4b1b      	ldr	r3, [pc, #108]	@ (800a220 <SPI_EndRxTxTransaction+0xa0>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a1b      	ldr	r2, [pc, #108]	@ (800a224 <SPI_EndRxTxTransaction+0xa4>)
 800a1b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1bc:	0d5b      	lsrs	r3, r3, #21
 800a1be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a1c2:	fb02 f303 	mul.w	r3, r2, r3
 800a1c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	685b      	ldr	r3, [r3, #4]
 800a1cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a1d0:	d112      	bne.n	800a1f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	2180      	movs	r1, #128	@ 0x80
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f7ff fee1 	bl	8009fa4 <SPI_WaitFlagStateUntilTimeout>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d016      	beq.n	800a216 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ec:	f043 0220 	orr.w	r2, r3, #32
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e00f      	b.n	800a218 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00a      	beq.n	800a214 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	3b01      	subs	r3, #1
 800a202:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a20e:	2b80      	cmp	r3, #128	@ 0x80
 800a210:	d0f2      	beq.n	800a1f8 <SPI_EndRxTxTransaction+0x78>
 800a212:	e000      	b.n	800a216 <SPI_EndRxTxTransaction+0x96>
        break;
 800a214:	bf00      	nop
  }

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	20000004 	.word	0x20000004
 800a224:	165e9f81 	.word	0x165e9f81

0800a228 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a228:	b084      	sub	sp, #16
 800a22a:	b480      	push	{r7}
 800a22c:	b085      	sub	sp, #20
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	f107 001c 	add.w	r0, r7, #28
 800a236:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a23a:	2300      	movs	r3, #0
 800a23c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a23e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a240:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a242:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a246:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a24a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a24e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a252:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	4313      	orrs	r3, r2
 800a258:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a262:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	431a      	orrs	r2, r3
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3714      	adds	r7, #20
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	b004      	add	sp, #16
 800a27c:	4770      	bx	lr

0800a27e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a27e:	b480      	push	{r7}
 800a280:	b083      	sub	sp, #12
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2203      	movs	r2, #3
 800a2c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a2c8:	2300      	movs	r3, #0
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b083      	sub	sp, #12
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 0303 	and.w	r3, r3, #3
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a2f2:	b480      	push	{r7}
 800a2f4:	b085      	sub	sp, #20
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a310:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a316:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a31c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	4313      	orrs	r3, r2
 800a322:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a32c:	f023 030f 	bic.w	r3, r3, #15
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	431a      	orrs	r2, r3
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3714      	adds	r7, #20
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a346:	b480      	push	{r7}
 800a348:	b083      	sub	sp, #12
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	691b      	ldr	r3, [r3, #16]
 800a352:	b2db      	uxtb	r3, r3
}
 800a354:	4618      	mov	r0, r3
 800a356:	370c      	adds	r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	3314      	adds	r3, #20
 800a36e:	461a      	mov	r2, r3
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	4413      	add	r3, r2
 800a374:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
}  
 800a37a:	4618      	mov	r0, r3
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a386:	b480      	push	{r7}
 800a388:	b085      	sub	sp, #20
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a390:	2300      	movs	r3, #0
 800a392:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	685a      	ldr	r2, [r3, #4]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3ac:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a3b2:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a3b8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3ba:	68fa      	ldr	r2, [r7, #12]
 800a3bc:	4313      	orrs	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3c4:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	431a      	orrs	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a3d0:	2300      	movs	r3, #0

}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b088      	sub	sp, #32
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a3ec:	2310      	movs	r3, #16
 800a3ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3f0:	2340      	movs	r3, #64	@ 0x40
 800a3f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a3fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3fe:	f107 0308 	add.w	r3, r7, #8
 800a402:	4619      	mov	r1, r3
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7ff ff74 	bl	800a2f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a40a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a40e:	2110      	movs	r1, #16
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f9d7 	bl	800a7c4 <SDMMC_GetCmdResp1>
 800a416:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a418:	69fb      	ldr	r3, [r7, #28]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3720      	adds	r7, #32
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b088      	sub	sp, #32
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a430:	2311      	movs	r3, #17
 800a432:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a434:	2340      	movs	r3, #64	@ 0x40
 800a436:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a438:	2300      	movs	r3, #0
 800a43a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a43c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a440:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a442:	f107 0308 	add.w	r3, r7, #8
 800a446:	4619      	mov	r1, r3
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7ff ff52 	bl	800a2f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a44e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a452:	2111      	movs	r1, #17
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f9b5 	bl	800a7c4 <SDMMC_GetCmdResp1>
 800a45a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a45c:	69fb      	ldr	r3, [r7, #28]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3720      	adds	r7, #32
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b088      	sub	sp, #32
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
 800a46e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a474:	2312      	movs	r3, #18
 800a476:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a478:	2340      	movs	r3, #64	@ 0x40
 800a47a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a47c:	2300      	movs	r3, #0
 800a47e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a480:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a484:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a486:	f107 0308 	add.w	r3, r7, #8
 800a48a:	4619      	mov	r1, r3
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f7ff ff30 	bl	800a2f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a492:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a496:	2112      	movs	r1, #18
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 f993 	bl	800a7c4 <SDMMC_GetCmdResp1>
 800a49e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4a0:	69fb      	ldr	r3, [r7, #28]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3720      	adds	r7, #32
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a4aa:	b580      	push	{r7, lr}
 800a4ac:	b088      	sub	sp, #32
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a4b8:	2318      	movs	r3, #24
 800a4ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4bc:	2340      	movs	r3, #64	@ 0x40
 800a4be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4ca:	f107 0308 	add.w	r3, r7, #8
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f7ff ff0e 	bl	800a2f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a4d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4da:	2118      	movs	r1, #24
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f971 	bl	800a7c4 <SDMMC_GetCmdResp1>
 800a4e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4e4:	69fb      	ldr	r3, [r7, #28]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3720      	adds	r7, #32
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b088      	sub	sp, #32
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a4fc:	2319      	movs	r3, #25
 800a4fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a500:	2340      	movs	r3, #64	@ 0x40
 800a502:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a504:	2300      	movs	r3, #0
 800a506:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a508:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a50c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a50e:	f107 0308 	add.w	r3, r7, #8
 800a512:	4619      	mov	r1, r3
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f7ff feec 	bl	800a2f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a51a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a51e:	2119      	movs	r1, #25
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f94f 	bl	800a7c4 <SDMMC_GetCmdResp1>
 800a526:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a528:	69fb      	ldr	r3, [r7, #28]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3720      	adds	r7, #32
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
	...

0800a534 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b088      	sub	sp, #32
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a53c:	2300      	movs	r3, #0
 800a53e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a540:	230c      	movs	r3, #12
 800a542:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a544:	2340      	movs	r3, #64	@ 0x40
 800a546:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a548:	2300      	movs	r3, #0
 800a54a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a54c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a550:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a552:	f107 0308 	add.w	r3, r7, #8
 800a556:	4619      	mov	r1, r3
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f7ff feca 	bl	800a2f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a55e:	4a05      	ldr	r2, [pc, #20]	@ (800a574 <SDMMC_CmdStopTransfer+0x40>)
 800a560:	210c      	movs	r1, #12
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 f92e 	bl	800a7c4 <SDMMC_GetCmdResp1>
 800a568:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a56a:	69fb      	ldr	r3, [r7, #28]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3720      	adds	r7, #32
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}
 800a574:	05f5e100 	.word	0x05f5e100

0800a578 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b08a      	sub	sp, #40	@ 0x28
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a588:	2307      	movs	r3, #7
 800a58a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a58c:	2340      	movs	r3, #64	@ 0x40
 800a58e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a590:	2300      	movs	r3, #0
 800a592:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a594:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a598:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a59a:	f107 0310 	add.w	r3, r7, #16
 800a59e:	4619      	mov	r1, r3
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f7ff fea6 	bl	800a2f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a5a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5aa:	2107      	movs	r1, #7
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f000 f909 	bl	800a7c4 <SDMMC_GetCmdResp1>
 800a5b2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3728      	adds	r7, #40	@ 0x28
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b088      	sub	sp, #32
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5dc:	f107 0308 	add.w	r3, r7, #8
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f7ff fe85 	bl	800a2f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 fb23 	bl	800ac34 <SDMMC_GetCmdError>
 800a5ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5f0:	69fb      	ldr	r3, [r7, #28]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3720      	adds	r7, #32
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b088      	sub	sp, #32
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a602:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a608:	2308      	movs	r3, #8
 800a60a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a60c:	2340      	movs	r3, #64	@ 0x40
 800a60e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a610:	2300      	movs	r3, #0
 800a612:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a614:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a618:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a61a:	f107 0308 	add.w	r3, r7, #8
 800a61e:	4619      	mov	r1, r3
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f7ff fe66 	bl	800a2f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fab6 	bl	800ab98 <SDMMC_GetCmdResp7>
 800a62c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a62e:	69fb      	ldr	r3, [r7, #28]
}
 800a630:	4618      	mov	r0, r3
 800a632:	3720      	adds	r7, #32
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b088      	sub	sp, #32
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
 800a640:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a646:	2337      	movs	r3, #55	@ 0x37
 800a648:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a64a:	2340      	movs	r3, #64	@ 0x40
 800a64c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a64e:	2300      	movs	r3, #0
 800a650:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a652:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a656:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a658:	f107 0308 	add.w	r3, r7, #8
 800a65c:	4619      	mov	r1, r3
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7ff fe47 	bl	800a2f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a664:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a668:	2137      	movs	r1, #55	@ 0x37
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f8aa 	bl	800a7c4 <SDMMC_GetCmdResp1>
 800a670:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a672:	69fb      	ldr	r3, [r7, #28]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3720      	adds	r7, #32
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b088      	sub	sp, #32
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a68c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a692:	2329      	movs	r3, #41	@ 0x29
 800a694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a696:	2340      	movs	r3, #64	@ 0x40
 800a698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a69a:	2300      	movs	r3, #0
 800a69c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a69e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6a4:	f107 0308 	add.w	r3, r7, #8
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f7ff fe21 	bl	800a2f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 f9bd 	bl	800aa30 <SDMMC_GetCmdResp3>
 800a6b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6b8:	69fb      	ldr	r3, [r7, #28]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3720      	adds	r7, #32
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b088      	sub	sp, #32
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a6ce:	2302      	movs	r3, #2
 800a6d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a6d2:	23c0      	movs	r3, #192	@ 0xc0
 800a6d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6e0:	f107 0308 	add.w	r3, r7, #8
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f7ff fe03 	bl	800a2f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f000 f957 	bl	800a9a0 <SDMMC_GetCmdResp2>
 800a6f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6f4:	69fb      	ldr	r3, [r7, #28]
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	3720      	adds	r7, #32
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b088      	sub	sp, #32
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a70c:	2309      	movs	r3, #9
 800a70e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a710:	23c0      	movs	r3, #192	@ 0xc0
 800a712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a714:	2300      	movs	r3, #0
 800a716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a718:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a71c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a71e:	f107 0308 	add.w	r3, r7, #8
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f7ff fde4 	bl	800a2f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f938 	bl	800a9a0 <SDMMC_GetCmdResp2>
 800a730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a732:	69fb      	ldr	r3, [r7, #28]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3720      	adds	r7, #32
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a746:	2300      	movs	r3, #0
 800a748:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a74a:	2303      	movs	r3, #3
 800a74c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a74e:	2340      	movs	r3, #64	@ 0x40
 800a750:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a752:	2300      	movs	r3, #0
 800a754:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a75a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a75c:	f107 0308 	add.w	r3, r7, #8
 800a760:	4619      	mov	r1, r3
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f7ff fdc5 	bl	800a2f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a768:	683a      	ldr	r2, [r7, #0]
 800a76a:	2103      	movs	r1, #3
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f99d 	bl	800aaac <SDMMC_GetCmdResp6>
 800a772:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a774:	69fb      	ldr	r3, [r7, #28]
}
 800a776:	4618      	mov	r0, r3
 800a778:	3720      	adds	r7, #32
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b088      	sub	sp, #32
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a78c:	230d      	movs	r3, #13
 800a78e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a790:	2340      	movs	r3, #64	@ 0x40
 800a792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a794:	2300      	movs	r3, #0
 800a796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a798:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a79c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a79e:	f107 0308 	add.w	r3, r7, #8
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f7ff fda4 	bl	800a2f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a7aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7ae:	210d      	movs	r1, #13
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 f807 	bl	800a7c4 <SDMMC_GetCmdResp1>
 800a7b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7b8:	69fb      	ldr	r3, [r7, #28]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3720      	adds	r7, #32
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
	...

0800a7c4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b088      	sub	sp, #32
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	607a      	str	r2, [r7, #4]
 800a7d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a7d2:	4b70      	ldr	r3, [pc, #448]	@ (800a994 <SDMMC_GetCmdResp1+0x1d0>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a70      	ldr	r2, [pc, #448]	@ (800a998 <SDMMC_GetCmdResp1+0x1d4>)
 800a7d8:	fba2 2303 	umull	r2, r3, r2, r3
 800a7dc:	0a5a      	lsrs	r2, r3, #9
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	fb02 f303 	mul.w	r3, r2, r3
 800a7e4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	1e5a      	subs	r2, r3, #1
 800a7ea:	61fa      	str	r2, [r7, #28]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d102      	bne.n	800a7f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a7f4:	e0c9      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a7fa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a802:	2b00      	cmp	r3, #0
 800a804:	d0ef      	beq.n	800a7e6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d1ea      	bne.n	800a7e6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a814:	f003 0304 	and.w	r3, r3, #4
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d004      	beq.n	800a826 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2204      	movs	r2, #4
 800a820:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a822:	2304      	movs	r3, #4
 800a824:	e0b1      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a82a:	f003 0301 	and.w	r3, r3, #1
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d004      	beq.n	800a83c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2201      	movs	r2, #1
 800a836:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a838:	2301      	movs	r3, #1
 800a83a:	e0a6      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	22c5      	movs	r2, #197	@ 0xc5
 800a840:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f7ff fd7f 	bl	800a346 <SDIO_GetCommandResponse>
 800a848:	4603      	mov	r3, r0
 800a84a:	461a      	mov	r2, r3
 800a84c:	7afb      	ldrb	r3, [r7, #11]
 800a84e:	4293      	cmp	r3, r2
 800a850:	d001      	beq.n	800a856 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a852:	2301      	movs	r3, #1
 800a854:	e099      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a856:	2100      	movs	r1, #0
 800a858:	68f8      	ldr	r0, [r7, #12]
 800a85a:	f7ff fd81 	bl	800a360 <SDIO_GetResponse>
 800a85e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a860:	697a      	ldr	r2, [r7, #20]
 800a862:	4b4e      	ldr	r3, [pc, #312]	@ (800a99c <SDMMC_GetCmdResp1+0x1d8>)
 800a864:	4013      	ands	r3, r2
 800a866:	2b00      	cmp	r3, #0
 800a868:	d101      	bne.n	800a86e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a86a:	2300      	movs	r3, #0
 800a86c:	e08d      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	2b00      	cmp	r3, #0
 800a872:	da02      	bge.n	800a87a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a874:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a878:	e087      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d001      	beq.n	800a888 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a884:	2340      	movs	r3, #64	@ 0x40
 800a886:	e080      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a892:	2380      	movs	r3, #128	@ 0x80
 800a894:	e079      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a8a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8a4:	e071      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a8a6:	697b      	ldr	r3, [r7, #20]
 800a8a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d002      	beq.n	800a8b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a8b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a8b4:	e069      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d002      	beq.n	800a8c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a8c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8c4:	e061      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d002      	beq.n	800a8d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a8d0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a8d4:	e059      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d002      	beq.n	800a8e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a8e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a8e4:	e051      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d002      	beq.n	800a8f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a8f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a8f4:	e049      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d002      	beq.n	800a906 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a900:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a904:	e041      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d002      	beq.n	800a916 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a910:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a914:	e039      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a920:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a924:	e031      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a926:	697b      	ldr	r3, [r7, #20]
 800a928:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d002      	beq.n	800a936 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a930:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a934:	e029      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d002      	beq.n	800a946 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a940:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a944:	e021      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d002      	beq.n	800a956 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a950:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a954:	e019      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d002      	beq.n	800a966 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a960:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a964:	e011      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d002      	beq.n	800a976 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a970:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a974:	e009      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	f003 0308 	and.w	r3, r3, #8
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d002      	beq.n	800a986 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a980:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a984:	e001      	b.n	800a98a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a986:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3720      	adds	r7, #32
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	20000004 	.word	0x20000004
 800a998:	10624dd3 	.word	0x10624dd3
 800a99c:	fdffe008 	.word	0xfdffe008

0800a9a0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b085      	sub	sp, #20
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9a8:	4b1f      	ldr	r3, [pc, #124]	@ (800aa28 <SDMMC_GetCmdResp2+0x88>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a1f      	ldr	r2, [pc, #124]	@ (800aa2c <SDMMC_GetCmdResp2+0x8c>)
 800a9ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a9b2:	0a5b      	lsrs	r3, r3, #9
 800a9b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9b8:	fb02 f303 	mul.w	r3, r2, r3
 800a9bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	1e5a      	subs	r2, r3, #1
 800a9c2:	60fa      	str	r2, [r7, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d102      	bne.n	800a9ce <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a9c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a9cc:	e026      	b.n	800aa1c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9d2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d0ef      	beq.n	800a9be <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d1ea      	bne.n	800a9be <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ec:	f003 0304 	and.w	r3, r3, #4
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d004      	beq.n	800a9fe <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2204      	movs	r2, #4
 800a9f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9fa:	2304      	movs	r3, #4
 800a9fc:	e00e      	b.n	800aa1c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa02:	f003 0301 	and.w	r3, r3, #1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d004      	beq.n	800aa14 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa10:	2301      	movs	r3, #1
 800aa12:	e003      	b.n	800aa1c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	22c5      	movs	r2, #197	@ 0xc5
 800aa18:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3714      	adds	r7, #20
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr
 800aa28:	20000004 	.word	0x20000004
 800aa2c:	10624dd3 	.word	0x10624dd3

0800aa30 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800aa30:	b480      	push	{r7}
 800aa32:	b085      	sub	sp, #20
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa38:	4b1a      	ldr	r3, [pc, #104]	@ (800aaa4 <SDMMC_GetCmdResp3+0x74>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a1a      	ldr	r2, [pc, #104]	@ (800aaa8 <SDMMC_GetCmdResp3+0x78>)
 800aa3e:	fba2 2303 	umull	r2, r3, r2, r3
 800aa42:	0a5b      	lsrs	r3, r3, #9
 800aa44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa48:	fb02 f303 	mul.w	r3, r2, r3
 800aa4c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	1e5a      	subs	r2, r3, #1
 800aa52:	60fa      	str	r2, [r7, #12]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d102      	bne.n	800aa5e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa58:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa5c:	e01b      	b.n	800aa96 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa62:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d0ef      	beq.n	800aa4e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d1ea      	bne.n	800aa4e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa7c:	f003 0304 	and.w	r3, r3, #4
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d004      	beq.n	800aa8e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2204      	movs	r2, #4
 800aa88:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa8a:	2304      	movs	r3, #4
 800aa8c:	e003      	b.n	800aa96 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	22c5      	movs	r2, #197	@ 0xc5
 800aa92:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3714      	adds	r7, #20
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	20000004 	.word	0x20000004
 800aaa8:	10624dd3 	.word	0x10624dd3

0800aaac <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b088      	sub	sp, #32
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	460b      	mov	r3, r1
 800aab6:	607a      	str	r2, [r7, #4]
 800aab8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aaba:	4b35      	ldr	r3, [pc, #212]	@ (800ab90 <SDMMC_GetCmdResp6+0xe4>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a35      	ldr	r2, [pc, #212]	@ (800ab94 <SDMMC_GetCmdResp6+0xe8>)
 800aac0:	fba2 2303 	umull	r2, r3, r2, r3
 800aac4:	0a5b      	lsrs	r3, r3, #9
 800aac6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aaca:	fb02 f303 	mul.w	r3, r2, r3
 800aace:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	1e5a      	subs	r2, r3, #1
 800aad4:	61fa      	str	r2, [r7, #28]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d102      	bne.n	800aae0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aada:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aade:	e052      	b.n	800ab86 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aae4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d0ef      	beq.n	800aad0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1ea      	bne.n	800aad0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aafe:	f003 0304 	and.w	r3, r3, #4
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d004      	beq.n	800ab10 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2204      	movs	r2, #4
 800ab0a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab0c:	2304      	movs	r3, #4
 800ab0e:	e03a      	b.n	800ab86 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab14:	f003 0301 	and.w	r3, r3, #1
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d004      	beq.n	800ab26 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2201      	movs	r2, #1
 800ab20:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab22:	2301      	movs	r3, #1
 800ab24:	e02f      	b.n	800ab86 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f7ff fc0d 	bl	800a346 <SDIO_GetCommandResponse>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	461a      	mov	r2, r3
 800ab30:	7afb      	ldrb	r3, [r7, #11]
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d001      	beq.n	800ab3a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab36:	2301      	movs	r3, #1
 800ab38:	e025      	b.n	800ab86 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	22c5      	movs	r2, #197	@ 0xc5
 800ab3e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ab40:	2100      	movs	r1, #0
 800ab42:	68f8      	ldr	r0, [r7, #12]
 800ab44:	f7ff fc0c 	bl	800a360 <SDIO_GetResponse>
 800ab48:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d106      	bne.n	800ab62 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	0c1b      	lsrs	r3, r3, #16
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	e011      	b.n	800ab86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab70:	e009      	b.n	800ab86 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ab7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab80:	e001      	b.n	800ab86 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ab82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3720      	adds	r7, #32
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	20000004 	.word	0x20000004
 800ab94:	10624dd3 	.word	0x10624dd3

0800ab98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aba0:	4b22      	ldr	r3, [pc, #136]	@ (800ac2c <SDMMC_GetCmdResp7+0x94>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a22      	ldr	r2, [pc, #136]	@ (800ac30 <SDMMC_GetCmdResp7+0x98>)
 800aba6:	fba2 2303 	umull	r2, r3, r2, r3
 800abaa:	0a5b      	lsrs	r3, r3, #9
 800abac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abb0:	fb02 f303 	mul.w	r3, r2, r3
 800abb4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	1e5a      	subs	r2, r3, #1
 800abba:	60fa      	str	r2, [r7, #12]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d102      	bne.n	800abc6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abc0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800abc4:	e02c      	b.n	800ac20 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d0ef      	beq.n	800abb6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d1ea      	bne.n	800abb6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abe4:	f003 0304 	and.w	r3, r3, #4
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d004      	beq.n	800abf6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2204      	movs	r2, #4
 800abf0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800abf2:	2304      	movs	r3, #4
 800abf4:	e014      	b.n	800ac20 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abfa:	f003 0301 	and.w	r3, r3, #1
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d004      	beq.n	800ac0c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2201      	movs	r2, #1
 800ac06:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e009      	b.n	800ac20 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d002      	beq.n	800ac1e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2240      	movs	r2, #64	@ 0x40
 800ac1c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ac1e:	2300      	movs	r3, #0
  
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	3714      	adds	r7, #20
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr
 800ac2c:	20000004 	.word	0x20000004
 800ac30:	10624dd3 	.word	0x10624dd3

0800ac34 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac3c:	4b11      	ldr	r3, [pc, #68]	@ (800ac84 <SDMMC_GetCmdError+0x50>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a11      	ldr	r2, [pc, #68]	@ (800ac88 <SDMMC_GetCmdError+0x54>)
 800ac42:	fba2 2303 	umull	r2, r3, r2, r3
 800ac46:	0a5b      	lsrs	r3, r3, #9
 800ac48:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac4c:	fb02 f303 	mul.w	r3, r2, r3
 800ac50:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	1e5a      	subs	r2, r3, #1
 800ac56:	60fa      	str	r2, [r7, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d102      	bne.n	800ac62 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac5c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac60:	e009      	b.n	800ac76 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d0f1      	beq.n	800ac52 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	22c5      	movs	r2, #197	@ 0xc5
 800ac72:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	20000004 	.word	0x20000004
 800ac88:	10624dd3 	.word	0x10624dd3

0800ac8c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ac90:	4904      	ldr	r1, [pc, #16]	@ (800aca4 <MX_FATFS_Init+0x18>)
 800ac92:	4805      	ldr	r0, [pc, #20]	@ (800aca8 <MX_FATFS_Init+0x1c>)
 800ac94:	f002 fb38 	bl	800d308 <FATFS_LinkDriver>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	4b03      	ldr	r3, [pc, #12]	@ (800acac <MX_FATFS_Init+0x20>)
 800ac9e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aca0:	bf00      	nop
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	20000720 	.word	0x20000720
 800aca8:	0800e060 	.word	0x0800e060
 800acac:	2000071c 	.word	0x2000071c

0800acb0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800acb0:	b480      	push	{r7}
 800acb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800acb4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b082      	sub	sp, #8
 800acc4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800acc6:	2300      	movs	r3, #0
 800acc8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800acca:	f000 f89e 	bl	800ae0a <BSP_SD_IsDetected>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d001      	beq.n	800acd8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800acd4:	2301      	movs	r3, #1
 800acd6:	e005      	b.n	800ace4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800acd8:	4804      	ldr	r0, [pc, #16]	@ (800acec <BSP_SD_Init+0x2c>)
 800acda:	f7fd fa9f 	bl	800821c <HAL_SD_Init>
 800acde:	4603      	mov	r3, r0
 800ace0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ace2:	79fb      	ldrb	r3, [r7, #7]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3708      	adds	r7, #8
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	20000600 	.word	0x20000600

0800acf0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b088      	sub	sp, #32
 800acf4:	af02      	add	r7, sp, #8
 800acf6:	60f8      	str	r0, [r7, #12]
 800acf8:	60b9      	str	r1, [r7, #8]
 800acfa:	607a      	str	r2, [r7, #4]
 800acfc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800acfe:	2300      	movs	r3, #0
 800ad00:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	9300      	str	r3, [sp, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	68ba      	ldr	r2, [r7, #8]
 800ad0a:	68f9      	ldr	r1, [r7, #12]
 800ad0c:	4806      	ldr	r0, [pc, #24]	@ (800ad28 <BSP_SD_ReadBlocks+0x38>)
 800ad0e:	f7fd fb2d 	bl	800836c <HAL_SD_ReadBlocks>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d001      	beq.n	800ad1c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ad1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3718      	adds	r7, #24
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	20000600 	.word	0x20000600

0800ad2c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b088      	sub	sp, #32
 800ad30:	af02      	add	r7, sp, #8
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
 800ad38:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	9300      	str	r3, [sp, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	68f9      	ldr	r1, [r7, #12]
 800ad48:	4806      	ldr	r0, [pc, #24]	@ (800ad64 <BSP_SD_WriteBlocks+0x38>)
 800ad4a:	f7fd fcf5 	bl	8008738 <HAL_SD_WriteBlocks>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d001      	beq.n	800ad58 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3718      	adds	r7, #24
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bd80      	pop	{r7, pc}
 800ad62:	bf00      	nop
 800ad64:	20000600 	.word	0x20000600

0800ad68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ad6c:	4805      	ldr	r0, [pc, #20]	@ (800ad84 <BSP_SD_GetCardState+0x1c>)
 800ad6e:	f7fe f9d1 	bl	8009114 <HAL_SD_GetCardState>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b04      	cmp	r3, #4
 800ad76:	bf14      	ite	ne
 800ad78:	2301      	movne	r3, #1
 800ad7a:	2300      	moveq	r3, #0
 800ad7c:	b2db      	uxtb	r3, r3
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	20000600 	.word	0x20000600

0800ad88 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	4803      	ldr	r0, [pc, #12]	@ (800ada0 <BSP_SD_GetCardInfo+0x18>)
 800ad94:	f7fe f992 	bl	80090bc <HAL_SD_GetCardInfo>
}
 800ad98:	bf00      	nop
 800ad9a:	3708      	adds	r7, #8
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	20000600 	.word	0x20000600

0800ada4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b082      	sub	sp, #8
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800adac:	f000 f818 	bl	800ade0 <BSP_SD_AbortCallback>
}
 800adb0:	bf00      	nop
 800adb2:	3708      	adds	r7, #8
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b082      	sub	sp, #8
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800adc0:	f000 f815 	bl	800adee <BSP_SD_WriteCpltCallback>
}
 800adc4:	bf00      	nop
 800adc6:	3708      	adds	r7, #8
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800add4:	f000 f812 	bl	800adfc <BSP_SD_ReadCpltCallback>
}
 800add8:	bf00      	nop
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ade0:	b480      	push	{r7}
 800ade2:	af00      	add	r7, sp, #0

}
 800ade4:	bf00      	nop
 800ade6:	46bd      	mov	sp, r7
 800ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adec:	4770      	bx	lr

0800adee <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800adee:	b480      	push	{r7}
 800adf0:	af00      	add	r7, sp, #0

}
 800adf2:	bf00      	nop
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr

0800adfc <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800adfc:	b480      	push	{r7}
 800adfe:	af00      	add	r7, sp, #0

}
 800ae00:	bf00      	nop
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b082      	sub	sp, #8
 800ae0e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ae10:	2301      	movs	r3, #1
 800ae12:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ae14:	f000 f80c 	bl	800ae30 <BSP_PlatformIsDetected>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d101      	bne.n	800ae22 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ae22:	79fb      	ldrb	r3, [r7, #7]
 800ae24:	b2db      	uxtb	r3, r3
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
	...

0800ae30 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ae36:	2301      	movs	r3, #1
 800ae38:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ae3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ae3e:	4806      	ldr	r0, [pc, #24]	@ (800ae58 <BSP_PlatformIsDetected+0x28>)
 800ae40:	f7fa f92c 	bl	800509c <HAL_GPIO_ReadPin>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ae4e:	79fb      	ldrb	r3, [r7, #7]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3708      	adds	r7, #8
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}
 800ae58:	40020800 	.word	0x40020800

0800ae5c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	4603      	mov	r3, r0
 800ae64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ae66:	4b0b      	ldr	r3, [pc, #44]	@ (800ae94 <SD_CheckStatus+0x38>)
 800ae68:	2201      	movs	r2, #1
 800ae6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ae6c:	f7ff ff7c 	bl	800ad68 <BSP_SD_GetCardState>
 800ae70:	4603      	mov	r3, r0
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d107      	bne.n	800ae86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ae76:	4b07      	ldr	r3, [pc, #28]	@ (800ae94 <SD_CheckStatus+0x38>)
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	f023 0301 	bic.w	r3, r3, #1
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	4b04      	ldr	r3, [pc, #16]	@ (800ae94 <SD_CheckStatus+0x38>)
 800ae84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ae86:	4b03      	ldr	r3, [pc, #12]	@ (800ae94 <SD_CheckStatus+0x38>)
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	b2db      	uxtb	r3, r3
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3708      	adds	r7, #8
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	2000000d 	.word	0x2000000d

0800ae98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b082      	sub	sp, #8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	4603      	mov	r3, r0
 800aea0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800aea2:	4b0b      	ldr	r3, [pc, #44]	@ (800aed0 <SD_initialize+0x38>)
 800aea4:	2201      	movs	r2, #1
 800aea6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800aea8:	f7ff ff0a 	bl	800acc0 <BSP_SD_Init>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d107      	bne.n	800aec2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800aeb2:	79fb      	ldrb	r3, [r7, #7]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7ff ffd1 	bl	800ae5c <SD_CheckStatus>
 800aeba:	4603      	mov	r3, r0
 800aebc:	461a      	mov	r2, r3
 800aebe:	4b04      	ldr	r3, [pc, #16]	@ (800aed0 <SD_initialize+0x38>)
 800aec0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800aec2:	4b03      	ldr	r3, [pc, #12]	@ (800aed0 <SD_initialize+0x38>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	b2db      	uxtb	r3, r3
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	2000000d 	.word	0x2000000d

0800aed4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	4603      	mov	r3, r0
 800aedc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800aede:	79fb      	ldrb	r3, [r7, #7]
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7ff ffbb 	bl	800ae5c <SD_CheckStatus>
 800aee6:	4603      	mov	r3, r0
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b086      	sub	sp, #24
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60b9      	str	r1, [r7, #8]
 800aef8:	607a      	str	r2, [r7, #4]
 800aefa:	603b      	str	r3, [r7, #0]
 800aefc:	4603      	mov	r3, r0
 800aefe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800af00:	2301      	movs	r3, #1
 800af02:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800af04:	f04f 33ff 	mov.w	r3, #4294967295
 800af08:	683a      	ldr	r2, [r7, #0]
 800af0a:	6879      	ldr	r1, [r7, #4]
 800af0c:	68b8      	ldr	r0, [r7, #8]
 800af0e:	f7ff feef 	bl	800acf0 <BSP_SD_ReadBlocks>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d107      	bne.n	800af28 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800af18:	bf00      	nop
 800af1a:	f7ff ff25 	bl	800ad68 <BSP_SD_GetCardState>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d1fa      	bne.n	800af1a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800af28:	7dfb      	ldrb	r3, [r7, #23]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3718      	adds	r7, #24
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b086      	sub	sp, #24
 800af36:	af00      	add	r7, sp, #0
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	603b      	str	r3, [r7, #0]
 800af3e:	4603      	mov	r3, r0
 800af40:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800af42:	2301      	movs	r3, #1
 800af44:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800af46:	f04f 33ff 	mov.w	r3, #4294967295
 800af4a:	683a      	ldr	r2, [r7, #0]
 800af4c:	6879      	ldr	r1, [r7, #4]
 800af4e:	68b8      	ldr	r0, [r7, #8]
 800af50:	f7ff feec 	bl	800ad2c <BSP_SD_WriteBlocks>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d107      	bne.n	800af6a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800af5a:	bf00      	nop
 800af5c:	f7ff ff04 	bl	800ad68 <BSP_SD_GetCardState>
 800af60:	4603      	mov	r3, r0
 800af62:	2b00      	cmp	r3, #0
 800af64:	d1fa      	bne.n	800af5c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800af66:	2300      	movs	r3, #0
 800af68:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800af6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3718      	adds	r7, #24
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b08c      	sub	sp, #48	@ 0x30
 800af78:	af00      	add	r7, sp, #0
 800af7a:	4603      	mov	r3, r0
 800af7c:	603a      	str	r2, [r7, #0]
 800af7e:	71fb      	strb	r3, [r7, #7]
 800af80:	460b      	mov	r3, r1
 800af82:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800af8a:	4b25      	ldr	r3, [pc, #148]	@ (800b020 <SD_ioctl+0xac>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	f003 0301 	and.w	r3, r3, #1
 800af94:	2b00      	cmp	r3, #0
 800af96:	d001      	beq.n	800af9c <SD_ioctl+0x28>
 800af98:	2303      	movs	r3, #3
 800af9a:	e03c      	b.n	800b016 <SD_ioctl+0xa2>

  switch (cmd)
 800af9c:	79bb      	ldrb	r3, [r7, #6]
 800af9e:	2b03      	cmp	r3, #3
 800afa0:	d834      	bhi.n	800b00c <SD_ioctl+0x98>
 800afa2:	a201      	add	r2, pc, #4	@ (adr r2, 800afa8 <SD_ioctl+0x34>)
 800afa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa8:	0800afb9 	.word	0x0800afb9
 800afac:	0800afc1 	.word	0x0800afc1
 800afb0:	0800afd9 	.word	0x0800afd9
 800afb4:	0800aff3 	.word	0x0800aff3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800afb8:	2300      	movs	r3, #0
 800afba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800afbe:	e028      	b.n	800b012 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800afc0:	f107 030c 	add.w	r3, r7, #12
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7ff fedf 	bl	800ad88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800afca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800afd0:	2300      	movs	r3, #0
 800afd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800afd6:	e01c      	b.n	800b012 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800afd8:	f107 030c 	add.w	r3, r7, #12
 800afdc:	4618      	mov	r0, r3
 800afde:	f7ff fed3 	bl	800ad88 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800afe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800afea:	2300      	movs	r3, #0
 800afec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800aff0:	e00f      	b.n	800b012 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800aff2:	f107 030c 	add.w	r3, r7, #12
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7ff fec6 	bl	800ad88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800affc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800affe:	0a5a      	lsrs	r2, r3, #9
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b004:	2300      	movs	r3, #0
 800b006:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b00a:	e002      	b.n	800b012 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b00c:	2304      	movs	r3, #4
 800b00e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b012:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b016:	4618      	mov	r0, r3
 800b018:	3730      	adds	r7, #48	@ 0x30
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	2000000d 	.word	0x2000000d

0800b024 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	4603      	mov	r3, r0
 800b02c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b02e:	79fb      	ldrb	r3, [r7, #7]
 800b030:	4a08      	ldr	r2, [pc, #32]	@ (800b054 <disk_status+0x30>)
 800b032:	009b      	lsls	r3, r3, #2
 800b034:	4413      	add	r3, r2
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	79fa      	ldrb	r2, [r7, #7]
 800b03c:	4905      	ldr	r1, [pc, #20]	@ (800b054 <disk_status+0x30>)
 800b03e:	440a      	add	r2, r1
 800b040:	7a12      	ldrb	r2, [r2, #8]
 800b042:	4610      	mov	r0, r2
 800b044:	4798      	blx	r3
 800b046:	4603      	mov	r3, r0
 800b048:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20000324 	.word	0x20000324

0800b058 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	4603      	mov	r3, r0
 800b060:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b062:	2300      	movs	r3, #0
 800b064:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b066:	79fb      	ldrb	r3, [r7, #7]
 800b068:	4a0e      	ldr	r2, [pc, #56]	@ (800b0a4 <disk_initialize+0x4c>)
 800b06a:	5cd3      	ldrb	r3, [r2, r3]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d114      	bne.n	800b09a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b070:	79fb      	ldrb	r3, [r7, #7]
 800b072:	4a0c      	ldr	r2, [pc, #48]	@ (800b0a4 <disk_initialize+0x4c>)
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	4413      	add	r3, r2
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	79fa      	ldrb	r2, [r7, #7]
 800b07e:	4909      	ldr	r1, [pc, #36]	@ (800b0a4 <disk_initialize+0x4c>)
 800b080:	440a      	add	r2, r1
 800b082:	7a12      	ldrb	r2, [r2, #8]
 800b084:	4610      	mov	r0, r2
 800b086:	4798      	blx	r3
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d103      	bne.n	800b09a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b092:	79fb      	ldrb	r3, [r7, #7]
 800b094:	4a03      	ldr	r2, [pc, #12]	@ (800b0a4 <disk_initialize+0x4c>)
 800b096:	2101      	movs	r1, #1
 800b098:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	20000324 	.word	0x20000324

0800b0a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b0a8:	b590      	push	{r4, r7, lr}
 800b0aa:	b087      	sub	sp, #28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	60b9      	str	r1, [r7, #8]
 800b0b0:	607a      	str	r2, [r7, #4]
 800b0b2:	603b      	str	r3, [r7, #0]
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ba:	4a0a      	ldr	r2, [pc, #40]	@ (800b0e4 <disk_read+0x3c>)
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	689c      	ldr	r4, [r3, #8]
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
 800b0c6:	4a07      	ldr	r2, [pc, #28]	@ (800b0e4 <disk_read+0x3c>)
 800b0c8:	4413      	add	r3, r2
 800b0ca:	7a18      	ldrb	r0, [r3, #8]
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	68b9      	ldr	r1, [r7, #8]
 800b0d2:	47a0      	blx	r4
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	75fb      	strb	r3, [r7, #23]
  return res;
 800b0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	371c      	adds	r7, #28
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd90      	pop	{r4, r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20000324 	.word	0x20000324

0800b0e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b0e8:	b590      	push	{r4, r7, lr}
 800b0ea:	b087      	sub	sp, #28
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	60b9      	str	r1, [r7, #8]
 800b0f0:	607a      	str	r2, [r7, #4]
 800b0f2:	603b      	str	r3, [r7, #0]
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
 800b0fa:	4a0a      	ldr	r2, [pc, #40]	@ (800b124 <disk_write+0x3c>)
 800b0fc:	009b      	lsls	r3, r3, #2
 800b0fe:	4413      	add	r3, r2
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	68dc      	ldr	r4, [r3, #12]
 800b104:	7bfb      	ldrb	r3, [r7, #15]
 800b106:	4a07      	ldr	r2, [pc, #28]	@ (800b124 <disk_write+0x3c>)
 800b108:	4413      	add	r3, r2
 800b10a:	7a18      	ldrb	r0, [r3, #8]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	68b9      	ldr	r1, [r7, #8]
 800b112:	47a0      	blx	r4
 800b114:	4603      	mov	r3, r0
 800b116:	75fb      	strb	r3, [r7, #23]
  return res;
 800b118:	7dfb      	ldrb	r3, [r7, #23]
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	371c      	adds	r7, #28
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd90      	pop	{r4, r7, pc}
 800b122:	bf00      	nop
 800b124:	20000324 	.word	0x20000324

0800b128 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	4603      	mov	r3, r0
 800b130:	603a      	str	r2, [r7, #0]
 800b132:	71fb      	strb	r3, [r7, #7]
 800b134:	460b      	mov	r3, r1
 800b136:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b138:	79fb      	ldrb	r3, [r7, #7]
 800b13a:	4a09      	ldr	r2, [pc, #36]	@ (800b160 <disk_ioctl+0x38>)
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	79fa      	ldrb	r2, [r7, #7]
 800b146:	4906      	ldr	r1, [pc, #24]	@ (800b160 <disk_ioctl+0x38>)
 800b148:	440a      	add	r2, r1
 800b14a:	7a10      	ldrb	r0, [r2, #8]
 800b14c:	79b9      	ldrb	r1, [r7, #6]
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	4798      	blx	r3
 800b152:	4603      	mov	r3, r0
 800b154:	73fb      	strb	r3, [r7, #15]
  return res;
 800b156:	7bfb      	ldrb	r3, [r7, #15]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	20000324 	.word	0x20000324

0800b164 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	3301      	adds	r3, #1
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b174:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b178:	021b      	lsls	r3, r3, #8
 800b17a:	b21a      	sxth	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	b21b      	sxth	r3, r3
 800b182:	4313      	orrs	r3, r2
 800b184:	b21b      	sxth	r3, r3
 800b186:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b188:	89fb      	ldrh	r3, [r7, #14]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3714      	adds	r7, #20
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b196:	b480      	push	{r7}
 800b198:	b085      	sub	sp, #20
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	3303      	adds	r3, #3
 800b1a2:	781b      	ldrb	r3, [r3, #0]
 800b1a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	021b      	lsls	r3, r3, #8
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	3202      	adds	r2, #2
 800b1ae:	7812      	ldrb	r2, [r2, #0]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	021b      	lsls	r3, r3, #8
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	3201      	adds	r2, #1
 800b1bc:	7812      	ldrb	r2, [r2, #0]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	021b      	lsls	r3, r3, #8
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	7812      	ldrb	r2, [r2, #0]
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	60fb      	str	r3, [r7, #12]
	return rv;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3714      	adds	r7, #20
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	607a      	str	r2, [r7, #4]
 800b1ee:	887a      	ldrh	r2, [r7, #2]
 800b1f0:	b2d2      	uxtb	r2, r2
 800b1f2:	701a      	strb	r2, [r3, #0]
 800b1f4:	887b      	ldrh	r3, [r7, #2]
 800b1f6:	0a1b      	lsrs	r3, r3, #8
 800b1f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	1c5a      	adds	r2, r3, #1
 800b1fe:	607a      	str	r2, [r7, #4]
 800b200:	887a      	ldrh	r2, [r7, #2]
 800b202:	b2d2      	uxtb	r2, r2
 800b204:	701a      	strb	r2, [r3, #0]
}
 800b206:	bf00      	nop
 800b208:	370c      	adds	r7, #12
 800b20a:	46bd      	mov	sp, r7
 800b20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b210:	4770      	bx	lr

0800b212 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b212:	b480      	push	{r7}
 800b214:	b083      	sub	sp, #12
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
 800b21a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	1c5a      	adds	r2, r3, #1
 800b220:	607a      	str	r2, [r7, #4]
 800b222:	683a      	ldr	r2, [r7, #0]
 800b224:	b2d2      	uxtb	r2, r2
 800b226:	701a      	strb	r2, [r3, #0]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	0a1b      	lsrs	r3, r3, #8
 800b22c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	1c5a      	adds	r2, r3, #1
 800b232:	607a      	str	r2, [r7, #4]
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	b2d2      	uxtb	r2, r2
 800b238:	701a      	strb	r2, [r3, #0]
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	0a1b      	lsrs	r3, r3, #8
 800b23e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	1c5a      	adds	r2, r3, #1
 800b244:	607a      	str	r2, [r7, #4]
 800b246:	683a      	ldr	r2, [r7, #0]
 800b248:	b2d2      	uxtb	r2, r2
 800b24a:	701a      	strb	r2, [r3, #0]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	0a1b      	lsrs	r3, r3, #8
 800b250:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	1c5a      	adds	r2, r3, #1
 800b256:	607a      	str	r2, [r7, #4]
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	b2d2      	uxtb	r2, r2
 800b25c:	701a      	strb	r2, [r3, #0]
}
 800b25e:	bf00      	nop
 800b260:	370c      	adds	r7, #12
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr

0800b26a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b26a:	b480      	push	{r7}
 800b26c:	b087      	sub	sp, #28
 800b26e:	af00      	add	r7, sp, #0
 800b270:	60f8      	str	r0, [r7, #12]
 800b272:	60b9      	str	r1, [r7, #8]
 800b274:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d00d      	beq.n	800b2a0 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b284:	693a      	ldr	r2, [r7, #16]
 800b286:	1c53      	adds	r3, r2, #1
 800b288:	613b      	str	r3, [r7, #16]
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	1c59      	adds	r1, r3, #1
 800b28e:	6179      	str	r1, [r7, #20]
 800b290:	7812      	ldrb	r2, [r2, #0]
 800b292:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	3b01      	subs	r3, #1
 800b298:	607b      	str	r3, [r7, #4]
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1f1      	bne.n	800b284 <mem_cpy+0x1a>
	}
}
 800b2a0:	bf00      	nop
 800b2a2:	371c      	adds	r7, #28
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr

0800b2ac <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b2ac:	b480      	push	{r7}
 800b2ae:	b087      	sub	sp, #28
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	1c5a      	adds	r2, r3, #1
 800b2c0:	617a      	str	r2, [r7, #20]
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	b2d2      	uxtb	r2, r2
 800b2c6:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	607b      	str	r3, [r7, #4]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1f3      	bne.n	800b2bc <mem_set+0x10>
}
 800b2d4:	bf00      	nop
 800b2d6:	bf00      	nop
 800b2d8:	371c      	adds	r7, #28
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b2e2:	b480      	push	{r7}
 800b2e4:	b089      	sub	sp, #36	@ 0x24
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	60f8      	str	r0, [r7, #12]
 800b2ea:	60b9      	str	r1, [r7, #8]
 800b2ec:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	61fb      	str	r3, [r7, #28]
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	1c5a      	adds	r2, r3, #1
 800b2fe:	61fa      	str	r2, [r7, #28]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	4619      	mov	r1, r3
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	1c5a      	adds	r2, r3, #1
 800b308:	61ba      	str	r2, [r7, #24]
 800b30a:	781b      	ldrb	r3, [r3, #0]
 800b30c:	1acb      	subs	r3, r1, r3
 800b30e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	3b01      	subs	r3, #1
 800b314:	607b      	str	r3, [r7, #4]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d002      	beq.n	800b322 <mem_cmp+0x40>
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d0eb      	beq.n	800b2fa <mem_cmp+0x18>

	return r;
 800b322:	697b      	ldr	r3, [r7, #20]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3724      	adds	r7, #36	@ 0x24
 800b328:	46bd      	mov	sp, r7
 800b32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32e:	4770      	bx	lr

0800b330 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b33a:	e002      	b.n	800b342 <chk_chr+0x12>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	3301      	adds	r3, #1
 800b340:	607b      	str	r3, [r7, #4]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d005      	beq.n	800b356 <chk_chr+0x26>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	461a      	mov	r2, r3
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	4293      	cmp	r3, r2
 800b354:	d1f2      	bne.n	800b33c <chk_chr+0xc>
	return *str;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	781b      	ldrb	r3, [r3, #0]
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b364:	4770      	bx	lr
	...

0800b368 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b368:	b480      	push	{r7}
 800b36a:	b085      	sub	sp, #20
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b372:	2300      	movs	r3, #0
 800b374:	60bb      	str	r3, [r7, #8]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	60fb      	str	r3, [r7, #12]
 800b37a:	e029      	b.n	800b3d0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b37c:	4a27      	ldr	r2, [pc, #156]	@ (800b41c <chk_lock+0xb4>)
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	011b      	lsls	r3, r3, #4
 800b382:	4413      	add	r3, r2
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d01d      	beq.n	800b3c6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b38a:	4a24      	ldr	r2, [pc, #144]	@ (800b41c <chk_lock+0xb4>)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	011b      	lsls	r3, r3, #4
 800b390:	4413      	add	r3, r2
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	429a      	cmp	r2, r3
 800b39a:	d116      	bne.n	800b3ca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b39c:	4a1f      	ldr	r2, [pc, #124]	@ (800b41c <chk_lock+0xb4>)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	011b      	lsls	r3, r3, #4
 800b3a2:	4413      	add	r3, r2
 800b3a4:	3304      	adds	r3, #4
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d10c      	bne.n	800b3ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b3b0:	4a1a      	ldr	r2, [pc, #104]	@ (800b41c <chk_lock+0xb4>)
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	011b      	lsls	r3, r3, #4
 800b3b6:	4413      	add	r3, r2
 800b3b8:	3308      	adds	r3, #8
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d102      	bne.n	800b3ca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b3c4:	e007      	b.n	800b3d6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	60fb      	str	r3, [r7, #12]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d9d2      	bls.n	800b37c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	d109      	bne.n	800b3f0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d102      	bne.n	800b3e8 <chk_lock+0x80>
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	2b02      	cmp	r3, #2
 800b3e6:	d101      	bne.n	800b3ec <chk_lock+0x84>
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	e010      	b.n	800b40e <chk_lock+0xa6>
 800b3ec:	2312      	movs	r3, #18
 800b3ee:	e00e      	b.n	800b40e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d108      	bne.n	800b408 <chk_lock+0xa0>
 800b3f6:	4a09      	ldr	r2, [pc, #36]	@ (800b41c <chk_lock+0xb4>)
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	011b      	lsls	r3, r3, #4
 800b3fc:	4413      	add	r3, r2
 800b3fe:	330c      	adds	r3, #12
 800b400:	881b      	ldrh	r3, [r3, #0]
 800b402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b406:	d101      	bne.n	800b40c <chk_lock+0xa4>
 800b408:	2310      	movs	r3, #16
 800b40a:	e000      	b.n	800b40e <chk_lock+0xa6>
 800b40c:	2300      	movs	r3, #0
}
 800b40e:	4618      	mov	r0, r3
 800b410:	3714      	adds	r7, #20
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	20000304 	.word	0x20000304

0800b420 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b426:	2300      	movs	r3, #0
 800b428:	607b      	str	r3, [r7, #4]
 800b42a:	e002      	b.n	800b432 <enq_lock+0x12>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	3301      	adds	r3, #1
 800b430:	607b      	str	r3, [r7, #4]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2b01      	cmp	r3, #1
 800b436:	d806      	bhi.n	800b446 <enq_lock+0x26>
 800b438:	4a09      	ldr	r2, [pc, #36]	@ (800b460 <enq_lock+0x40>)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	011b      	lsls	r3, r3, #4
 800b43e:	4413      	add	r3, r2
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1f2      	bne.n	800b42c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b02      	cmp	r3, #2
 800b44a:	bf14      	ite	ne
 800b44c:	2301      	movne	r3, #1
 800b44e:	2300      	moveq	r3, #0
 800b450:	b2db      	uxtb	r3, r3
}
 800b452:	4618      	mov	r0, r3
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr
 800b45e:	bf00      	nop
 800b460:	20000304 	.word	0x20000304

0800b464 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b46e:	2300      	movs	r3, #0
 800b470:	60fb      	str	r3, [r7, #12]
 800b472:	e01f      	b.n	800b4b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b474:	4a41      	ldr	r2, [pc, #260]	@ (800b57c <inc_lock+0x118>)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	011b      	lsls	r3, r3, #4
 800b47a:	4413      	add	r3, r2
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	429a      	cmp	r2, r3
 800b484:	d113      	bne.n	800b4ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b486:	4a3d      	ldr	r2, [pc, #244]	@ (800b57c <inc_lock+0x118>)
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	011b      	lsls	r3, r3, #4
 800b48c:	4413      	add	r3, r2
 800b48e:	3304      	adds	r3, #4
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b496:	429a      	cmp	r2, r3
 800b498:	d109      	bne.n	800b4ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b49a:	4a38      	ldr	r2, [pc, #224]	@ (800b57c <inc_lock+0x118>)
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	011b      	lsls	r3, r3, #4
 800b4a0:	4413      	add	r3, r2
 800b4a2:	3308      	adds	r3, #8
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d006      	beq.n	800b4bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3301      	adds	r3, #1
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2b01      	cmp	r3, #1
 800b4b8:	d9dc      	bls.n	800b474 <inc_lock+0x10>
 800b4ba:	e000      	b.n	800b4be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b4bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2b02      	cmp	r3, #2
 800b4c2:	d132      	bne.n	800b52a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	60fb      	str	r3, [r7, #12]
 800b4c8:	e002      	b.n	800b4d0 <inc_lock+0x6c>
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	60fb      	str	r3, [r7, #12]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d806      	bhi.n	800b4e4 <inc_lock+0x80>
 800b4d6:	4a29      	ldr	r2, [pc, #164]	@ (800b57c <inc_lock+0x118>)
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	011b      	lsls	r3, r3, #4
 800b4dc:	4413      	add	r3, r2
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1f2      	bne.n	800b4ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	d101      	bne.n	800b4ee <inc_lock+0x8a>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	e040      	b.n	800b570 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681a      	ldr	r2, [r3, #0]
 800b4f2:	4922      	ldr	r1, [pc, #136]	@ (800b57c <inc_lock+0x118>)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	011b      	lsls	r3, r3, #4
 800b4f8:	440b      	add	r3, r1
 800b4fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	689a      	ldr	r2, [r3, #8]
 800b500:	491e      	ldr	r1, [pc, #120]	@ (800b57c <inc_lock+0x118>)
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	011b      	lsls	r3, r3, #4
 800b506:	440b      	add	r3, r1
 800b508:	3304      	adds	r3, #4
 800b50a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	695a      	ldr	r2, [r3, #20]
 800b510:	491a      	ldr	r1, [pc, #104]	@ (800b57c <inc_lock+0x118>)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	011b      	lsls	r3, r3, #4
 800b516:	440b      	add	r3, r1
 800b518:	3308      	adds	r3, #8
 800b51a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b51c:	4a17      	ldr	r2, [pc, #92]	@ (800b57c <inc_lock+0x118>)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	011b      	lsls	r3, r3, #4
 800b522:	4413      	add	r3, r2
 800b524:	330c      	adds	r3, #12
 800b526:	2200      	movs	r2, #0
 800b528:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d009      	beq.n	800b544 <inc_lock+0xe0>
 800b530:	4a12      	ldr	r2, [pc, #72]	@ (800b57c <inc_lock+0x118>)
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	011b      	lsls	r3, r3, #4
 800b536:	4413      	add	r3, r2
 800b538:	330c      	adds	r3, #12
 800b53a:	881b      	ldrh	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d001      	beq.n	800b544 <inc_lock+0xe0>
 800b540:	2300      	movs	r3, #0
 800b542:	e015      	b.n	800b570 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d108      	bne.n	800b55c <inc_lock+0xf8>
 800b54a:	4a0c      	ldr	r2, [pc, #48]	@ (800b57c <inc_lock+0x118>)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	011b      	lsls	r3, r3, #4
 800b550:	4413      	add	r3, r2
 800b552:	330c      	adds	r3, #12
 800b554:	881b      	ldrh	r3, [r3, #0]
 800b556:	3301      	adds	r3, #1
 800b558:	b29a      	uxth	r2, r3
 800b55a:	e001      	b.n	800b560 <inc_lock+0xfc>
 800b55c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b560:	4906      	ldr	r1, [pc, #24]	@ (800b57c <inc_lock+0x118>)
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	011b      	lsls	r3, r3, #4
 800b566:	440b      	add	r3, r1
 800b568:	330c      	adds	r3, #12
 800b56a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3301      	adds	r3, #1
}
 800b570:	4618      	mov	r0, r3
 800b572:	3714      	adds	r7, #20
 800b574:	46bd      	mov	sp, r7
 800b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57a:	4770      	bx	lr
 800b57c:	20000304 	.word	0x20000304

0800b580 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	3b01      	subs	r3, #1
 800b58c:	607b      	str	r3, [r7, #4]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d825      	bhi.n	800b5e0 <dec_lock+0x60>
		n = Files[i].ctr;
 800b594:	4a17      	ldr	r2, [pc, #92]	@ (800b5f4 <dec_lock+0x74>)
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	011b      	lsls	r3, r3, #4
 800b59a:	4413      	add	r3, r2
 800b59c:	330c      	adds	r3, #12
 800b59e:	881b      	ldrh	r3, [r3, #0]
 800b5a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b5a2:	89fb      	ldrh	r3, [r7, #14]
 800b5a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5a8:	d101      	bne.n	800b5ae <dec_lock+0x2e>
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b5ae:	89fb      	ldrh	r3, [r7, #14]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <dec_lock+0x3a>
 800b5b4:	89fb      	ldrh	r3, [r7, #14]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b5ba:	4a0e      	ldr	r2, [pc, #56]	@ (800b5f4 <dec_lock+0x74>)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	011b      	lsls	r3, r3, #4
 800b5c0:	4413      	add	r3, r2
 800b5c2:	330c      	adds	r3, #12
 800b5c4:	89fa      	ldrh	r2, [r7, #14]
 800b5c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b5c8:	89fb      	ldrh	r3, [r7, #14]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d105      	bne.n	800b5da <dec_lock+0x5a>
 800b5ce:	4a09      	ldr	r2, [pc, #36]	@ (800b5f4 <dec_lock+0x74>)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	011b      	lsls	r3, r3, #4
 800b5d4:	4413      	add	r3, r2
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	737b      	strb	r3, [r7, #13]
 800b5de:	e001      	b.n	800b5e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b5e0:	2302      	movs	r3, #2
 800b5e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b5e4:	7b7b      	ldrb	r3, [r7, #13]
}
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	3714      	adds	r7, #20
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr
 800b5f2:	bf00      	nop
 800b5f4:	20000304 	.word	0x20000304

0800b5f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b600:	2300      	movs	r3, #0
 800b602:	60fb      	str	r3, [r7, #12]
 800b604:	e010      	b.n	800b628 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b606:	4a0d      	ldr	r2, [pc, #52]	@ (800b63c <clear_lock+0x44>)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	011b      	lsls	r3, r3, #4
 800b60c:	4413      	add	r3, r2
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	687a      	ldr	r2, [r7, #4]
 800b612:	429a      	cmp	r2, r3
 800b614:	d105      	bne.n	800b622 <clear_lock+0x2a>
 800b616:	4a09      	ldr	r2, [pc, #36]	@ (800b63c <clear_lock+0x44>)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	011b      	lsls	r3, r3, #4
 800b61c:	4413      	add	r3, r2
 800b61e:	2200      	movs	r2, #0
 800b620:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3301      	adds	r3, #1
 800b626:	60fb      	str	r3, [r7, #12]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d9eb      	bls.n	800b606 <clear_lock+0xe>
	}
}
 800b62e:	bf00      	nop
 800b630:	bf00      	nop
 800b632:	3714      	adds	r7, #20
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr
 800b63c:	20000304 	.word	0x20000304

0800b640 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b648:	2300      	movs	r3, #0
 800b64a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	78db      	ldrb	r3, [r3, #3]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d034      	beq.n	800b6be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b658:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	7858      	ldrb	r0, [r3, #1]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b664:	2301      	movs	r3, #1
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	f7ff fd3e 	bl	800b0e8 <disk_write>
 800b66c:	4603      	mov	r3, r0
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d002      	beq.n	800b678 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b672:	2301      	movs	r3, #1
 800b674:	73fb      	strb	r3, [r7, #15]
 800b676:	e022      	b.n	800b6be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2200      	movs	r2, #0
 800b67c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6a1b      	ldr	r3, [r3, #32]
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	1ad2      	subs	r2, r2, r3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	699b      	ldr	r3, [r3, #24]
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d217      	bcs.n	800b6be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	789b      	ldrb	r3, [r3, #2]
 800b692:	613b      	str	r3, [r7, #16]
 800b694:	e010      	b.n	800b6b8 <sync_window+0x78>
					wsect += fs->fsize;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	699b      	ldr	r3, [r3, #24]
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	4413      	add	r3, r2
 800b69e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	7858      	ldrb	r0, [r3, #1]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	697a      	ldr	r2, [r7, #20]
 800b6ae:	f7ff fd1b 	bl	800b0e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	613b      	str	r3, [r7, #16]
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d8eb      	bhi.n	800b696 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3718      	adds	r7, #24
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}

0800b6c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
 800b6d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6da:	683a      	ldr	r2, [r7, #0]
 800b6dc:	429a      	cmp	r2, r3
 800b6de:	d01b      	beq.n	800b718 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f7ff ffad 	bl	800b640 <sync_window>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b6ea:	7bfb      	ldrb	r3, [r7, #15]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d113      	bne.n	800b718 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	7858      	ldrb	r0, [r3, #1]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	683a      	ldr	r2, [r7, #0]
 800b6fe:	f7ff fcd3 	bl	800b0a8 <disk_read>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d004      	beq.n	800b712 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b708:	f04f 33ff 	mov.w	r3, #4294967295
 800b70c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b70e:	2301      	movs	r3, #1
 800b710:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800b718:	7bfb      	ldrb	r3, [r7, #15]
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
	...

0800b724 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f7ff ff87 	bl	800b640 <sync_window>
 800b732:	4603      	mov	r3, r0
 800b734:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b736:	7bfb      	ldrb	r3, [r7, #15]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d158      	bne.n	800b7ee <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	2b03      	cmp	r3, #3
 800b742:	d148      	bne.n	800b7d6 <sync_fs+0xb2>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	791b      	ldrb	r3, [r3, #4]
 800b748:	2b01      	cmp	r3, #1
 800b74a:	d144      	bne.n	800b7d6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	3330      	adds	r3, #48	@ 0x30
 800b750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b754:	2100      	movs	r1, #0
 800b756:	4618      	mov	r0, r3
 800b758:	f7ff fda8 	bl	800b2ac <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3330      	adds	r3, #48	@ 0x30
 800b760:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b764:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b768:	4618      	mov	r0, r3
 800b76a:	f7ff fd37 	bl	800b1dc <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	3330      	adds	r3, #48	@ 0x30
 800b772:	4921      	ldr	r1, [pc, #132]	@ (800b7f8 <sync_fs+0xd4>)
 800b774:	4618      	mov	r0, r3
 800b776:	f7ff fd4c 	bl	800b212 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	3330      	adds	r3, #48	@ 0x30
 800b77e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b782:	491e      	ldr	r1, [pc, #120]	@ (800b7fc <sync_fs+0xd8>)
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff fd44 	bl	800b212 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	3330      	adds	r3, #48	@ 0x30
 800b78e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	691b      	ldr	r3, [r3, #16]
 800b796:	4619      	mov	r1, r3
 800b798:	4610      	mov	r0, r2
 800b79a:	f7ff fd3a 	bl	800b212 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	3330      	adds	r3, #48	@ 0x30
 800b7a2:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	4610      	mov	r0, r2
 800b7ae:	f7ff fd30 	bl	800b212 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	69db      	ldr	r3, [r3, #28]
 800b7b6:	1c5a      	adds	r2, r3, #1
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	7858      	ldrb	r0, [r3, #1]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	f7ff fc8c 	bl	800b0e8 <disk_write>
			fs->fsi_flag = 0;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	785b      	ldrb	r3, [r3, #1]
 800b7da:	2200      	movs	r2, #0
 800b7dc:	2100      	movs	r1, #0
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f7ff fca2 	bl	800b128 <disk_ioctl>
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d001      	beq.n	800b7ee <sync_fs+0xca>
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	41615252 	.word	0x41615252
 800b7fc:	61417272 	.word	0x61417272

0800b800 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b800:	b480      	push	{r7}
 800b802:	b083      	sub	sp, #12
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	3b02      	subs	r3, #2
 800b80e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	695b      	ldr	r3, [r3, #20]
 800b814:	3b02      	subs	r3, #2
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d301      	bcc.n	800b820 <clust2sect+0x20>
 800b81c:	2300      	movs	r3, #0
 800b81e:	e008      	b.n	800b832 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	895b      	ldrh	r3, [r3, #10]
 800b824:	461a      	mov	r2, r3
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	fb03 f202 	mul.w	r2, r3, r2
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b830:	4413      	add	r3, r2
}
 800b832:	4618      	mov	r0, r3
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b83e:	b580      	push	{r7, lr}
 800b840:	b086      	sub	sp, #24
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d904      	bls.n	800b85e <get_fat+0x20>
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	695b      	ldr	r3, [r3, #20]
 800b858:	683a      	ldr	r2, [r7, #0]
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d302      	bcc.n	800b864 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b85e:	2301      	movs	r3, #1
 800b860:	617b      	str	r3, [r7, #20]
 800b862:	e08e      	b.n	800b982 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b864:	f04f 33ff 	mov.w	r3, #4294967295
 800b868:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	2b03      	cmp	r3, #3
 800b870:	d061      	beq.n	800b936 <get_fat+0xf8>
 800b872:	2b03      	cmp	r3, #3
 800b874:	dc7b      	bgt.n	800b96e <get_fat+0x130>
 800b876:	2b01      	cmp	r3, #1
 800b878:	d002      	beq.n	800b880 <get_fat+0x42>
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d041      	beq.n	800b902 <get_fat+0xc4>
 800b87e:	e076      	b.n	800b96e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	60fb      	str	r3, [r7, #12]
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	085b      	lsrs	r3, r3, #1
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	4413      	add	r3, r2
 800b88c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	6a1a      	ldr	r2, [r3, #32]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	0a5b      	lsrs	r3, r3, #9
 800b896:	4413      	add	r3, r2
 800b898:	4619      	mov	r1, r3
 800b89a:	6938      	ldr	r0, [r7, #16]
 800b89c:	f7ff ff14 	bl	800b6c8 <move_window>
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d166      	bne.n	800b974 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	1c5a      	adds	r2, r3, #1
 800b8aa:	60fa      	str	r2, [r7, #12]
 800b8ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8b0:	693a      	ldr	r2, [r7, #16]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8b8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	6a1a      	ldr	r2, [r3, #32]
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	0a5b      	lsrs	r3, r3, #9
 800b8c2:	4413      	add	r3, r2
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	6938      	ldr	r0, [r7, #16]
 800b8c8:	f7ff fefe 	bl	800b6c8 <move_window>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d152      	bne.n	800b978 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	4413      	add	r3, r2
 800b8dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8e0:	021b      	lsls	r3, r3, #8
 800b8e2:	68ba      	ldr	r2, [r7, #8]
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	f003 0301 	and.w	r3, r3, #1
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d002      	beq.n	800b8f8 <get_fat+0xba>
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	091b      	lsrs	r3, r3, #4
 800b8f6:	e002      	b.n	800b8fe <get_fat+0xc0>
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8fe:	617b      	str	r3, [r7, #20]
			break;
 800b900:	e03f      	b.n	800b982 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	6a1a      	ldr	r2, [r3, #32]
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	0a1b      	lsrs	r3, r3, #8
 800b90a:	4413      	add	r3, r2
 800b90c:	4619      	mov	r1, r3
 800b90e:	6938      	ldr	r0, [r7, #16]
 800b910:	f7ff feda 	bl	800b6c8 <move_window>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d130      	bne.n	800b97c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	005b      	lsls	r3, r3, #1
 800b924:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b928:	4413      	add	r3, r2
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7ff fc1a 	bl	800b164 <ld_word>
 800b930:	4603      	mov	r3, r0
 800b932:	617b      	str	r3, [r7, #20]
			break;
 800b934:	e025      	b.n	800b982 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	6a1a      	ldr	r2, [r3, #32]
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	09db      	lsrs	r3, r3, #7
 800b93e:	4413      	add	r3, r2
 800b940:	4619      	mov	r1, r3
 800b942:	6938      	ldr	r0, [r7, #16]
 800b944:	f7ff fec0 	bl	800b6c8 <move_window>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d118      	bne.n	800b980 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b94e:	693b      	ldr	r3, [r7, #16]
 800b950:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b95c:	4413      	add	r3, r2
 800b95e:	4618      	mov	r0, r3
 800b960:	f7ff fc19 	bl	800b196 <ld_dword>
 800b964:	4603      	mov	r3, r0
 800b966:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b96a:	617b      	str	r3, [r7, #20]
			break;
 800b96c:	e009      	b.n	800b982 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b96e:	2301      	movs	r3, #1
 800b970:	617b      	str	r3, [r7, #20]
 800b972:	e006      	b.n	800b982 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b974:	bf00      	nop
 800b976:	e004      	b.n	800b982 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b978:	bf00      	nop
 800b97a:	e002      	b.n	800b982 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b97c:	bf00      	nop
 800b97e:	e000      	b.n	800b982 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b980:	bf00      	nop
		}
	}

	return val;
 800b982:	697b      	ldr	r3, [r7, #20]
}
 800b984:	4618      	mov	r0, r3
 800b986:	3718      	adds	r7, #24
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b98c:	b590      	push	{r4, r7, lr}
 800b98e:	b089      	sub	sp, #36	@ 0x24
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b998:	2302      	movs	r3, #2
 800b99a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	f240 80d9 	bls.w	800bb56 <put_fat+0x1ca>
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	695b      	ldr	r3, [r3, #20]
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	f080 80d3 	bcs.w	800bb56 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	f000 8096 	beq.w	800bae6 <put_fat+0x15a>
 800b9ba:	2b03      	cmp	r3, #3
 800b9bc:	f300 80cb 	bgt.w	800bb56 <put_fat+0x1ca>
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d002      	beq.n	800b9ca <put_fat+0x3e>
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d06e      	beq.n	800baa6 <put_fat+0x11a>
 800b9c8:	e0c5      	b.n	800bb56 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	61bb      	str	r3, [r7, #24]
 800b9ce:	69bb      	ldr	r3, [r7, #24]
 800b9d0:	085b      	lsrs	r3, r3, #1
 800b9d2:	69ba      	ldr	r2, [r7, #24]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6a1a      	ldr	r2, [r3, #32]
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	0a5b      	lsrs	r3, r3, #9
 800b9e0:	4413      	add	r3, r2
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f7ff fe6f 	bl	800b6c8 <move_window>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b9ee:	7ffb      	ldrb	r3, [r7, #31]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f040 80a9 	bne.w	800bb48 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b9fc:	69bb      	ldr	r3, [r7, #24]
 800b9fe:	1c59      	adds	r1, r3, #1
 800ba00:	61b9      	str	r1, [r7, #24]
 800ba02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba06:	4413      	add	r3, r2
 800ba08:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	f003 0301 	and.w	r3, r3, #1
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00d      	beq.n	800ba30 <put_fat+0xa4>
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	b25b      	sxtb	r3, r3
 800ba1a:	f003 030f 	and.w	r3, r3, #15
 800ba1e:	b25a      	sxtb	r2, r3
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	b25b      	sxtb	r3, r3
 800ba24:	011b      	lsls	r3, r3, #4
 800ba26:	b25b      	sxtb	r3, r3
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	b25b      	sxtb	r3, r3
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	e001      	b.n	800ba34 <put_fat+0xa8>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	697a      	ldr	r2, [r7, #20]
 800ba36:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6a1a      	ldr	r2, [r3, #32]
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	0a5b      	lsrs	r3, r3, #9
 800ba46:	4413      	add	r3, r2
 800ba48:	4619      	mov	r1, r3
 800ba4a:	68f8      	ldr	r0, [r7, #12]
 800ba4c:	f7ff fe3c 	bl	800b6c8 <move_window>
 800ba50:	4603      	mov	r3, r0
 800ba52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba54:	7ffb      	ldrb	r3, [r7, #31]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d178      	bne.n	800bb4c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba66:	4413      	add	r3, r2
 800ba68:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	f003 0301 	and.w	r3, r3, #1
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d003      	beq.n	800ba7c <put_fat+0xf0>
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	091b      	lsrs	r3, r3, #4
 800ba78:	b2db      	uxtb	r3, r3
 800ba7a:	e00e      	b.n	800ba9a <put_fat+0x10e>
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	b25b      	sxtb	r3, r3
 800ba82:	f023 030f 	bic.w	r3, r3, #15
 800ba86:	b25a      	sxtb	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	0a1b      	lsrs	r3, r3, #8
 800ba8c:	b25b      	sxtb	r3, r3
 800ba8e:	f003 030f 	and.w	r3, r3, #15
 800ba92:	b25b      	sxtb	r3, r3
 800ba94:	4313      	orrs	r3, r2
 800ba96:	b25b      	sxtb	r3, r3
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	697a      	ldr	r2, [r7, #20]
 800ba9c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2201      	movs	r2, #1
 800baa2:	70da      	strb	r2, [r3, #3]
			break;
 800baa4:	e057      	b.n	800bb56 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	6a1a      	ldr	r2, [r3, #32]
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	0a1b      	lsrs	r3, r3, #8
 800baae:	4413      	add	r3, r2
 800bab0:	4619      	mov	r1, r3
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	f7ff fe08 	bl	800b6c8 <move_window>
 800bab8:	4603      	mov	r3, r0
 800baba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800babc:	7ffb      	ldrb	r3, [r7, #31]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d146      	bne.n	800bb50 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	005b      	lsls	r3, r3, #1
 800bacc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800bad0:	4413      	add	r3, r2
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	b292      	uxth	r2, r2
 800bad6:	4611      	mov	r1, r2
 800bad8:	4618      	mov	r0, r3
 800bada:	f7ff fb7f 	bl	800b1dc <st_word>
			fs->wflag = 1;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2201      	movs	r2, #1
 800bae2:	70da      	strb	r2, [r3, #3]
			break;
 800bae4:	e037      	b.n	800bb56 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	6a1a      	ldr	r2, [r3, #32]
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	09db      	lsrs	r3, r3, #7
 800baee:	4413      	add	r3, r2
 800baf0:	4619      	mov	r1, r3
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f7ff fde8 	bl	800b6c8 <move_window>
 800baf8:	4603      	mov	r3, r0
 800bafa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bafc:	7ffb      	ldrb	r3, [r7, #31]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d128      	bne.n	800bb54 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bb16:	4413      	add	r3, r2
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7ff fb3c 	bl	800b196 <ld_dword>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bb24:	4323      	orrs	r3, r4
 800bb26:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bb36:	4413      	add	r3, r2
 800bb38:	6879      	ldr	r1, [r7, #4]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7ff fb69 	bl	800b212 <st_dword>
			fs->wflag = 1;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2201      	movs	r2, #1
 800bb44:	70da      	strb	r2, [r3, #3]
			break;
 800bb46:	e006      	b.n	800bb56 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb48:	bf00      	nop
 800bb4a:	e004      	b.n	800bb56 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb4c:	bf00      	nop
 800bb4e:	e002      	b.n	800bb56 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb50:	bf00      	nop
 800bb52:	e000      	b.n	800bb56 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb54:	bf00      	nop
		}
	}
	return res;
 800bb56:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3724      	adds	r7, #36	@ 0x24
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd90      	pop	{r4, r7, pc}

0800bb60 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b088      	sub	sp, #32
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d904      	bls.n	800bb86 <remove_chain+0x26>
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	695b      	ldr	r3, [r3, #20]
 800bb80:	68ba      	ldr	r2, [r7, #8]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d301      	bcc.n	800bb8a <remove_chain+0x2a>
 800bb86:	2302      	movs	r3, #2
 800bb88:	e04b      	b.n	800bc22 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00c      	beq.n	800bbaa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bb90:	f04f 32ff 	mov.w	r2, #4294967295
 800bb94:	6879      	ldr	r1, [r7, #4]
 800bb96:	69b8      	ldr	r0, [r7, #24]
 800bb98:	f7ff fef8 	bl	800b98c <put_fat>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bba0:	7ffb      	ldrb	r3, [r7, #31]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d001      	beq.n	800bbaa <remove_chain+0x4a>
 800bba6:	7ffb      	ldrb	r3, [r7, #31]
 800bba8:	e03b      	b.n	800bc22 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bbaa:	68b9      	ldr	r1, [r7, #8]
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	f7ff fe46 	bl	800b83e <get_fat>
 800bbb2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d031      	beq.n	800bc1e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d101      	bne.n	800bbc4 <remove_chain+0x64>
 800bbc0:	2302      	movs	r3, #2
 800bbc2:	e02e      	b.n	800bc22 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbca:	d101      	bne.n	800bbd0 <remove_chain+0x70>
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e028      	b.n	800bc22 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	68b9      	ldr	r1, [r7, #8]
 800bbd4:	69b8      	ldr	r0, [r7, #24]
 800bbd6:	f7ff fed9 	bl	800b98c <put_fat>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bbde:	7ffb      	ldrb	r3, [r7, #31]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d001      	beq.n	800bbe8 <remove_chain+0x88>
 800bbe4:	7ffb      	ldrb	r3, [r7, #31]
 800bbe6:	e01c      	b.n	800bc22 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	691a      	ldr	r2, [r3, #16]
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	695b      	ldr	r3, [r3, #20]
 800bbf0:	3b02      	subs	r3, #2
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d20b      	bcs.n	800bc0e <remove_chain+0xae>
			fs->free_clst++;
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	1c5a      	adds	r2, r3, #1
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bc00:	69bb      	ldr	r3, [r7, #24]
 800bc02:	791b      	ldrb	r3, [r3, #4]
 800bc04:	f043 0301 	orr.w	r3, r3, #1
 800bc08:	b2da      	uxtb	r2, r3
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	695b      	ldr	r3, [r3, #20]
 800bc16:	68ba      	ldr	r2, [r7, #8]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d3c6      	bcc.n	800bbaa <remove_chain+0x4a>
 800bc1c:	e000      	b.n	800bc20 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bc1e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bc20:	2300      	movs	r3, #0
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3720      	adds	r7, #32
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b088      	sub	sp, #32
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
 800bc32:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d10d      	bne.n	800bc5c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d004      	beq.n	800bc56 <create_chain+0x2c>
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	695b      	ldr	r3, [r3, #20]
 800bc50:	69ba      	ldr	r2, [r7, #24]
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d31b      	bcc.n	800bc8e <create_chain+0x64>
 800bc56:	2301      	movs	r3, #1
 800bc58:	61bb      	str	r3, [r7, #24]
 800bc5a:	e018      	b.n	800bc8e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f7ff fded 	bl	800b83e <get_fat>
 800bc64:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2b01      	cmp	r3, #1
 800bc6a:	d801      	bhi.n	800bc70 <create_chain+0x46>
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e070      	b.n	800bd52 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc76:	d101      	bne.n	800bc7c <create_chain+0x52>
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	e06a      	b.n	800bd52 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	695b      	ldr	r3, [r3, #20]
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d201      	bcs.n	800bc8a <create_chain+0x60>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	e063      	b.n	800bd52 <create_chain+0x128>
		scl = clst;
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	3301      	adds	r3, #1
 800bc96:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	695b      	ldr	r3, [r3, #20]
 800bc9c:	69fa      	ldr	r2, [r7, #28]
 800bc9e:	429a      	cmp	r2, r3
 800bca0:	d307      	bcc.n	800bcb2 <create_chain+0x88>
				ncl = 2;
 800bca2:	2302      	movs	r3, #2
 800bca4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bca6:	69fa      	ldr	r2, [r7, #28]
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d901      	bls.n	800bcb2 <create_chain+0x88>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	e04f      	b.n	800bd52 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bcb2:	69f9      	ldr	r1, [r7, #28]
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f7ff fdc2 	bl	800b83e <get_fat>
 800bcba:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d00e      	beq.n	800bce0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d003      	beq.n	800bcd0 <create_chain+0xa6>
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcce:	d101      	bne.n	800bcd4 <create_chain+0xaa>
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	e03e      	b.n	800bd52 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bcd4:	69fa      	ldr	r2, [r7, #28]
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	429a      	cmp	r2, r3
 800bcda:	d1da      	bne.n	800bc92 <create_chain+0x68>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	e038      	b.n	800bd52 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bce0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bce2:	f04f 32ff 	mov.w	r2, #4294967295
 800bce6:	69f9      	ldr	r1, [r7, #28]
 800bce8:	6938      	ldr	r0, [r7, #16]
 800bcea:	f7ff fe4f 	bl	800b98c <put_fat>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bcf2:	7dfb      	ldrb	r3, [r7, #23]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d109      	bne.n	800bd0c <create_chain+0xe2>
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d006      	beq.n	800bd0c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bcfe:	69fa      	ldr	r2, [r7, #28]
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6938      	ldr	r0, [r7, #16]
 800bd04:	f7ff fe42 	bl	800b98c <put_fat>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bd0c:	7dfb      	ldrb	r3, [r7, #23]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d116      	bne.n	800bd40 <create_chain+0x116>
		fs->last_clst = ncl;
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	69fa      	ldr	r2, [r7, #28]
 800bd16:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	691a      	ldr	r2, [r3, #16]
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	695b      	ldr	r3, [r3, #20]
 800bd20:	3b02      	subs	r3, #2
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d804      	bhi.n	800bd30 <create_chain+0x106>
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	1e5a      	subs	r2, r3, #1
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	791b      	ldrb	r3, [r3, #4]
 800bd34:	f043 0301 	orr.w	r3, r3, #1
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	711a      	strb	r2, [r3, #4]
 800bd3e:	e007      	b.n	800bd50 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bd40:	7dfb      	ldrb	r3, [r7, #23]
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d102      	bne.n	800bd4c <create_chain+0x122>
 800bd46:	f04f 33ff 	mov.w	r3, #4294967295
 800bd4a:	e000      	b.n	800bd4e <create_chain+0x124>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bd50:	69fb      	ldr	r3, [r7, #28]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3720      	adds	r7, #32
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bd5a:	b480      	push	{r7}
 800bd5c:	b087      	sub	sp, #28
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
 800bd62:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd6e:	3304      	adds	r3, #4
 800bd70:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	0a5b      	lsrs	r3, r3, #9
 800bd76:	68fa      	ldr	r2, [r7, #12]
 800bd78:	8952      	ldrh	r2, [r2, #10]
 800bd7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd7e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bd80:	693b      	ldr	r3, [r7, #16]
 800bd82:	1d1a      	adds	r2, r3, #4
 800bd84:	613a      	str	r2, [r7, #16]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d101      	bne.n	800bd94 <clmt_clust+0x3a>
 800bd90:	2300      	movs	r3, #0
 800bd92:	e010      	b.n	800bdb6 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bd94:	697a      	ldr	r2, [r7, #20]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d307      	bcc.n	800bdac <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bd9c:	697a      	ldr	r2, [r7, #20]
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	1ad3      	subs	r3, r2, r3
 800bda2:	617b      	str	r3, [r7, #20]
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	3304      	adds	r3, #4
 800bda8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bdaa:	e7e9      	b.n	800bd80 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bdac:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	4413      	add	r3, r2
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	371c      	adds	r7, #28
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr

0800bdc2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b086      	sub	sp, #24
 800bdc6:	af00      	add	r7, sp, #0
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bdd8:	d204      	bcs.n	800bde4 <dir_sdi+0x22>
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	f003 031f 	and.w	r3, r3, #31
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d001      	beq.n	800bde8 <dir_sdi+0x26>
		return FR_INT_ERR;
 800bde4:	2302      	movs	r3, #2
 800bde6:	e063      	b.n	800beb0 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	683a      	ldr	r2, [r7, #0]
 800bdec:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d106      	bne.n	800be08 <dir_sdi+0x46>
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	2b02      	cmp	r3, #2
 800be00:	d902      	bls.n	800be08 <dir_sdi+0x46>
		clst = fs->dirbase;
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be06:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10c      	bne.n	800be28 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	095b      	lsrs	r3, r3, #5
 800be12:	693a      	ldr	r2, [r7, #16]
 800be14:	8912      	ldrh	r2, [r2, #8]
 800be16:	4293      	cmp	r3, r2
 800be18:	d301      	bcc.n	800be1e <dir_sdi+0x5c>
 800be1a:	2302      	movs	r3, #2
 800be1c:	e048      	b.n	800beb0 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	61da      	str	r2, [r3, #28]
 800be26:	e029      	b.n	800be7c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	895b      	ldrh	r3, [r3, #10]
 800be2c:	025b      	lsls	r3, r3, #9
 800be2e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800be30:	e019      	b.n	800be66 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6979      	ldr	r1, [r7, #20]
 800be36:	4618      	mov	r0, r3
 800be38:	f7ff fd01 	bl	800b83e <get_fat>
 800be3c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be44:	d101      	bne.n	800be4a <dir_sdi+0x88>
 800be46:	2301      	movs	r3, #1
 800be48:	e032      	b.n	800beb0 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d904      	bls.n	800be5a <dir_sdi+0x98>
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	695b      	ldr	r3, [r3, #20]
 800be54:	697a      	ldr	r2, [r7, #20]
 800be56:	429a      	cmp	r2, r3
 800be58:	d301      	bcc.n	800be5e <dir_sdi+0x9c>
 800be5a:	2302      	movs	r3, #2
 800be5c:	e028      	b.n	800beb0 <dir_sdi+0xee>
			ofs -= csz;
 800be5e:	683a      	ldr	r2, [r7, #0]
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	1ad3      	subs	r3, r2, r3
 800be64:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d2e1      	bcs.n	800be32 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800be6e:	6979      	ldr	r1, [r7, #20]
 800be70:	6938      	ldr	r0, [r7, #16]
 800be72:	f7ff fcc5 	bl	800b800 <clust2sect>
 800be76:	4602      	mov	r2, r0
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	69db      	ldr	r3, [r3, #28]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d101      	bne.n	800be8e <dir_sdi+0xcc>
 800be8a:	2302      	movs	r3, #2
 800be8c:	e010      	b.n	800beb0 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	69da      	ldr	r2, [r3, #28]
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	0a5b      	lsrs	r3, r3, #9
 800be96:	441a      	add	r2, r3
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bea8:	441a      	add	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800beae:	2300      	movs	r3, #0
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3718      	adds	r7, #24
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b086      	sub	sp, #24
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	695b      	ldr	r3, [r3, #20]
 800becc:	3320      	adds	r3, #32
 800bece:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	69db      	ldr	r3, [r3, #28]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d003      	beq.n	800bee0 <dir_next+0x28>
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bede:	d301      	bcc.n	800bee4 <dir_next+0x2c>
 800bee0:	2304      	movs	r3, #4
 800bee2:	e0aa      	b.n	800c03a <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beea:	2b00      	cmp	r3, #0
 800beec:	f040 8098 	bne.w	800c020 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	69db      	ldr	r3, [r3, #28]
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	699b      	ldr	r3, [r3, #24]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10b      	bne.n	800bf1a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	095b      	lsrs	r3, r3, #5
 800bf06:	68fa      	ldr	r2, [r7, #12]
 800bf08:	8912      	ldrh	r2, [r2, #8]
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	f0c0 8088 	bcc.w	800c020 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	61da      	str	r2, [r3, #28]
 800bf16:	2304      	movs	r3, #4
 800bf18:	e08f      	b.n	800c03a <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	0a5b      	lsrs	r3, r3, #9
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	8952      	ldrh	r2, [r2, #10]
 800bf22:	3a01      	subs	r2, #1
 800bf24:	4013      	ands	r3, r2
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d17a      	bne.n	800c020 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	4619      	mov	r1, r3
 800bf32:	4610      	mov	r0, r2
 800bf34:	f7ff fc83 	bl	800b83e <get_fat>
 800bf38:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d801      	bhi.n	800bf44 <dir_next+0x8c>
 800bf40:	2302      	movs	r3, #2
 800bf42:	e07a      	b.n	800c03a <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4a:	d101      	bne.n	800bf50 <dir_next+0x98>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e074      	b.n	800c03a <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	697a      	ldr	r2, [r7, #20]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d358      	bcc.n	800c00c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d104      	bne.n	800bf6a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	61da      	str	r2, [r3, #28]
 800bf66:	2304      	movs	r3, #4
 800bf68:	e067      	b.n	800c03a <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	699b      	ldr	r3, [r3, #24]
 800bf70:	4619      	mov	r1, r3
 800bf72:	4610      	mov	r0, r2
 800bf74:	f7ff fe59 	bl	800bc2a <create_chain>
 800bf78:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d101      	bne.n	800bf84 <dir_next+0xcc>
 800bf80:	2307      	movs	r3, #7
 800bf82:	e05a      	b.n	800c03a <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d101      	bne.n	800bf8e <dir_next+0xd6>
 800bf8a:	2302      	movs	r3, #2
 800bf8c:	e055      	b.n	800c03a <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf94:	d101      	bne.n	800bf9a <dir_next+0xe2>
 800bf96:	2301      	movs	r3, #1
 800bf98:	e04f      	b.n	800c03a <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f7ff fb50 	bl	800b640 <sync_window>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <dir_next+0xf2>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e047      	b.n	800c03a <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	3330      	adds	r3, #48	@ 0x30
 800bfae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7ff f979 	bl	800b2ac <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bfba:	2300      	movs	r3, #0
 800bfbc:	613b      	str	r3, [r7, #16]
 800bfbe:	6979      	ldr	r1, [r7, #20]
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f7ff fc1d 	bl	800b800 <clust2sect>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bfcc:	e012      	b.n	800bff4 <dir_next+0x13c>
						fs->wflag = 1;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bfd4:	68f8      	ldr	r0, [r7, #12]
 800bfd6:	f7ff fb33 	bl	800b640 <sync_window>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d001      	beq.n	800bfe4 <dir_next+0x12c>
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e02a      	b.n	800c03a <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	613b      	str	r3, [r7, #16]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfee:	1c5a      	adds	r2, r3, #1
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	895b      	ldrh	r3, [r3, #10]
 800bff8:	461a      	mov	r2, r3
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d3e6      	bcc.n	800bfce <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	1ad2      	subs	r2, r2, r3
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c012:	6979      	ldr	r1, [r7, #20]
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f7ff fbf3 	bl	800b800 <clust2sect>
 800c01a:	4602      	mov	r2, r0
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c032:	441a      	add	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c038:	2300      	movs	r3, #0
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3718      	adds	r7, #24
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b086      	sub	sp, #24
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c052:	2100      	movs	r1, #0
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f7ff feb4 	bl	800bdc2 <dir_sdi>
 800c05a:	4603      	mov	r3, r0
 800c05c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c05e:	7dfb      	ldrb	r3, [r7, #23]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d12b      	bne.n	800c0bc <dir_alloc+0x7a>
		n = 0;
 800c064:	2300      	movs	r3, #0
 800c066:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	69db      	ldr	r3, [r3, #28]
 800c06c:	4619      	mov	r1, r3
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f7ff fb2a 	bl	800b6c8 <move_window>
 800c074:	4603      	mov	r3, r0
 800c076:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c078:	7dfb      	ldrb	r3, [r7, #23]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d11d      	bne.n	800c0ba <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	6a1b      	ldr	r3, [r3, #32]
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	2be5      	cmp	r3, #229	@ 0xe5
 800c086:	d004      	beq.n	800c092 <dir_alloc+0x50>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a1b      	ldr	r3, [r3, #32]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d107      	bne.n	800c0a2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	3301      	adds	r3, #1
 800c096:	613b      	str	r3, [r7, #16]
 800c098:	693a      	ldr	r2, [r7, #16]
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	d102      	bne.n	800c0a6 <dir_alloc+0x64>
 800c0a0:	e00c      	b.n	800c0bc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c0a6:	2101      	movs	r1, #1
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f7ff ff05 	bl	800beb8 <dir_next>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c0b2:	7dfb      	ldrb	r3, [r7, #23]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d0d7      	beq.n	800c068 <dir_alloc+0x26>
 800c0b8:	e000      	b.n	800c0bc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c0ba:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c0bc:	7dfb      	ldrb	r3, [r7, #23]
 800c0be:	2b04      	cmp	r3, #4
 800c0c0:	d101      	bne.n	800c0c6 <dir_alloc+0x84>
 800c0c2:	2307      	movs	r3, #7
 800c0c4:	75fb      	strb	r3, [r7, #23]
	return res;
 800c0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3718      	adds	r7, #24
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	331a      	adds	r3, #26
 800c0de:	4618      	mov	r0, r3
 800c0e0:	f7ff f840 	bl	800b164 <ld_word>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	2b03      	cmp	r3, #3
 800c0ee:	d109      	bne.n	800c104 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	3314      	adds	r3, #20
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7ff f835 	bl	800b164 <ld_word>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	041b      	lsls	r3, r3, #16
 800c0fe:	68fa      	ldr	r2, [r7, #12]
 800c100:	4313      	orrs	r3, r2
 800c102:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c104:	68fb      	ldr	r3, [r7, #12]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b084      	sub	sp, #16
 800c112:	af00      	add	r7, sp, #0
 800c114:	60f8      	str	r0, [r7, #12]
 800c116:	60b9      	str	r1, [r7, #8]
 800c118:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	331a      	adds	r3, #26
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	b292      	uxth	r2, r2
 800c122:	4611      	mov	r1, r2
 800c124:	4618      	mov	r0, r3
 800c126:	f7ff f859 	bl	800b1dc <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	2b03      	cmp	r3, #3
 800c130:	d109      	bne.n	800c146 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c132:	68bb      	ldr	r3, [r7, #8]
 800c134:	f103 0214 	add.w	r2, r3, #20
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	0c1b      	lsrs	r3, r3, #16
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	4619      	mov	r1, r3
 800c140:	4610      	mov	r0, r2
 800c142:	f7ff f84b 	bl	800b1dc <st_word>
	}
}
 800c146:	bf00      	nop
 800c148:	3710      	adds	r7, #16
 800c14a:	46bd      	mov	sp, r7
 800c14c:	bd80      	pop	{r7, pc}

0800c14e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c14e:	b580      	push	{r7, lr}
 800c150:	b086      	sub	sp, #24
 800c152:	af00      	add	r7, sp, #0
 800c154:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c15c:	2100      	movs	r1, #0
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7ff fe2f 	bl	800bdc2 <dir_sdi>
 800c164:	4603      	mov	r3, r0
 800c166:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c168:	7dfb      	ldrb	r3, [r7, #23]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d001      	beq.n	800c172 <dir_find+0x24>
 800c16e:	7dfb      	ldrb	r3, [r7, #23]
 800c170:	e03e      	b.n	800c1f0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	69db      	ldr	r3, [r3, #28]
 800c176:	4619      	mov	r1, r3
 800c178:	6938      	ldr	r0, [r7, #16]
 800c17a:	f7ff faa5 	bl	800b6c8 <move_window>
 800c17e:	4603      	mov	r3, r0
 800c180:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c182:	7dfb      	ldrb	r3, [r7, #23]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d12f      	bne.n	800c1e8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6a1b      	ldr	r3, [r3, #32]
 800c18c:	781b      	ldrb	r3, [r3, #0]
 800c18e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c190:	7bfb      	ldrb	r3, [r7, #15]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d102      	bne.n	800c19c <dir_find+0x4e>
 800c196:	2304      	movs	r3, #4
 800c198:	75fb      	strb	r3, [r7, #23]
 800c19a:	e028      	b.n	800c1ee <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6a1b      	ldr	r3, [r3, #32]
 800c1a0:	330b      	adds	r3, #11
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6a1b      	ldr	r3, [r3, #32]
 800c1b2:	330b      	adds	r3, #11
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	f003 0308 	and.w	r3, r3, #8
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d10a      	bne.n	800c1d4 <dir_find+0x86>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6a18      	ldr	r0, [r3, #32]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	3324      	adds	r3, #36	@ 0x24
 800c1c6:	220b      	movs	r2, #11
 800c1c8:	4619      	mov	r1, r3
 800c1ca:	f7ff f88a 	bl	800b2e2 <mem_cmp>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00b      	beq.n	800c1ec <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f7ff fe6e 	bl	800beb8 <dir_next>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c1e0:	7dfb      	ldrb	r3, [r7, #23]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d0c5      	beq.n	800c172 <dir_find+0x24>
 800c1e6:	e002      	b.n	800c1ee <dir_find+0xa0>
		if (res != FR_OK) break;
 800c1e8:	bf00      	nop
 800c1ea:	e000      	b.n	800c1ee <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c1ec:	bf00      	nop

	return res;
 800c1ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3718      	adds	r7, #24
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c206:	2101      	movs	r1, #1
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f7ff ff1a 	bl	800c042 <dir_alloc>
 800c20e:	4603      	mov	r3, r0
 800c210:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c212:	7bfb      	ldrb	r3, [r7, #15]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d11c      	bne.n	800c252 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	69db      	ldr	r3, [r3, #28]
 800c21c:	4619      	mov	r1, r3
 800c21e:	68b8      	ldr	r0, [r7, #8]
 800c220:	f7ff fa52 	bl	800b6c8 <move_window>
 800c224:	4603      	mov	r3, r0
 800c226:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c228:	7bfb      	ldrb	r3, [r7, #15]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d111      	bne.n	800c252 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	2220      	movs	r2, #32
 800c234:	2100      	movs	r1, #0
 800c236:	4618      	mov	r0, r3
 800c238:	f7ff f838 	bl	800b2ac <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a18      	ldr	r0, [r3, #32]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	3324      	adds	r3, #36	@ 0x24
 800c244:	220b      	movs	r2, #11
 800c246:	4619      	mov	r1, r3
 800c248:	f7ff f80f 	bl	800b26a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	2201      	movs	r2, #1
 800c250:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c252:	7bfb      	ldrb	r3, [r7, #15]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b088      	sub	sp, #32
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	60fb      	str	r3, [r7, #12]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	3324      	adds	r3, #36	@ 0x24
 800c270:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c272:	220b      	movs	r2, #11
 800c274:	2120      	movs	r1, #32
 800c276:	68b8      	ldr	r0, [r7, #8]
 800c278:	f7ff f818 	bl	800b2ac <mem_set>
	si = i = 0; ni = 8;
 800c27c:	2300      	movs	r3, #0
 800c27e:	613b      	str	r3, [r7, #16]
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	61fb      	str	r3, [r7, #28]
 800c284:	2308      	movs	r3, #8
 800c286:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	1c5a      	adds	r2, r3, #1
 800c28c:	61fa      	str	r2, [r7, #28]
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	4413      	add	r3, r2
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c296:	7efb      	ldrb	r3, [r7, #27]
 800c298:	2b20      	cmp	r3, #32
 800c29a:	d94e      	bls.n	800c33a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c29c:	7efb      	ldrb	r3, [r7, #27]
 800c29e:	2b2f      	cmp	r3, #47	@ 0x2f
 800c2a0:	d006      	beq.n	800c2b0 <create_name+0x54>
 800c2a2:	7efb      	ldrb	r3, [r7, #27]
 800c2a4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c2a6:	d110      	bne.n	800c2ca <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c2a8:	e002      	b.n	800c2b0 <create_name+0x54>
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	61fb      	str	r3, [r7, #28]
 800c2b0:	68fa      	ldr	r2, [r7, #12]
 800c2b2:	69fb      	ldr	r3, [r7, #28]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	2b2f      	cmp	r3, #47	@ 0x2f
 800c2ba:	d0f6      	beq.n	800c2aa <create_name+0x4e>
 800c2bc:	68fa      	ldr	r2, [r7, #12]
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	781b      	ldrb	r3, [r3, #0]
 800c2c4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c2c6:	d0f0      	beq.n	800c2aa <create_name+0x4e>
			break;
 800c2c8:	e038      	b.n	800c33c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c2ca:	7efb      	ldrb	r3, [r7, #27]
 800c2cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2ce:	d003      	beq.n	800c2d8 <create_name+0x7c>
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d30c      	bcc.n	800c2f2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	2b0b      	cmp	r3, #11
 800c2dc:	d002      	beq.n	800c2e4 <create_name+0x88>
 800c2de:	7efb      	ldrb	r3, [r7, #27]
 800c2e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2e2:	d001      	beq.n	800c2e8 <create_name+0x8c>
 800c2e4:	2306      	movs	r3, #6
 800c2e6:	e044      	b.n	800c372 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c2e8:	2308      	movs	r3, #8
 800c2ea:	613b      	str	r3, [r7, #16]
 800c2ec:	230b      	movs	r3, #11
 800c2ee:	617b      	str	r3, [r7, #20]
			continue;
 800c2f0:	e022      	b.n	800c338 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c2f2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	da04      	bge.n	800c304 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c2fa:	7efb      	ldrb	r3, [r7, #27]
 800c2fc:	3b80      	subs	r3, #128	@ 0x80
 800c2fe:	4a1f      	ldr	r2, [pc, #124]	@ (800c37c <create_name+0x120>)
 800c300:	5cd3      	ldrb	r3, [r2, r3]
 800c302:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c304:	7efb      	ldrb	r3, [r7, #27]
 800c306:	4619      	mov	r1, r3
 800c308:	481d      	ldr	r0, [pc, #116]	@ (800c380 <create_name+0x124>)
 800c30a:	f7ff f811 	bl	800b330 <chk_chr>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d001      	beq.n	800c318 <create_name+0xbc>
 800c314:	2306      	movs	r3, #6
 800c316:	e02c      	b.n	800c372 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c318:	7efb      	ldrb	r3, [r7, #27]
 800c31a:	2b60      	cmp	r3, #96	@ 0x60
 800c31c:	d905      	bls.n	800c32a <create_name+0xce>
 800c31e:	7efb      	ldrb	r3, [r7, #27]
 800c320:	2b7a      	cmp	r3, #122	@ 0x7a
 800c322:	d802      	bhi.n	800c32a <create_name+0xce>
 800c324:	7efb      	ldrb	r3, [r7, #27]
 800c326:	3b20      	subs	r3, #32
 800c328:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	1c5a      	adds	r2, r3, #1
 800c32e:	613a      	str	r2, [r7, #16]
 800c330:	68ba      	ldr	r2, [r7, #8]
 800c332:	4413      	add	r3, r2
 800c334:	7efa      	ldrb	r2, [r7, #27]
 800c336:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c338:	e7a6      	b.n	800c288 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c33a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	441a      	add	r2, r3
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d101      	bne.n	800c350 <create_name+0xf4>
 800c34c:	2306      	movs	r3, #6
 800c34e:	e010      	b.n	800c372 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c350:	68bb      	ldr	r3, [r7, #8]
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	2be5      	cmp	r3, #229	@ 0xe5
 800c356:	d102      	bne.n	800c35e <create_name+0x102>
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	2205      	movs	r2, #5
 800c35c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c35e:	7efb      	ldrb	r3, [r7, #27]
 800c360:	2b20      	cmp	r3, #32
 800c362:	d801      	bhi.n	800c368 <create_name+0x10c>
 800c364:	2204      	movs	r2, #4
 800c366:	e000      	b.n	800c36a <create_name+0x10e>
 800c368:	2200      	movs	r2, #0
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	330b      	adds	r3, #11
 800c36e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c370:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c372:	4618      	mov	r0, r3
 800c374:	3720      	adds	r7, #32
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	0800e074 	.word	0x0800e074
 800c380:	0800de28 	.word	0x0800de28

0800c384 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b086      	sub	sp, #24
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c398:	e002      	b.n	800c3a0 <follow_path+0x1c>
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	3301      	adds	r3, #1
 800c39e:	603b      	str	r3, [r7, #0]
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	2b2f      	cmp	r3, #47	@ 0x2f
 800c3a6:	d0f8      	beq.n	800c39a <follow_path+0x16>
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	2b5c      	cmp	r3, #92	@ 0x5c
 800c3ae:	d0f4      	beq.n	800c39a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	2b1f      	cmp	r3, #31
 800c3bc:	d80a      	bhi.n	800c3d4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2280      	movs	r2, #128	@ 0x80
 800c3c2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c3c6:	2100      	movs	r1, #0
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f7ff fcfa 	bl	800bdc2 <dir_sdi>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	75fb      	strb	r3, [r7, #23]
 800c3d2:	e043      	b.n	800c45c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c3d4:	463b      	mov	r3, r7
 800c3d6:	4619      	mov	r1, r3
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f7ff ff3f 	bl	800c25c <create_name>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c3e2:	7dfb      	ldrb	r3, [r7, #23]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d134      	bne.n	800c452 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f7ff feb0 	bl	800c14e <dir_find>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c3f8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c3fa:	7dfb      	ldrb	r3, [r7, #23]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00a      	beq.n	800c416 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c400:	7dfb      	ldrb	r3, [r7, #23]
 800c402:	2b04      	cmp	r3, #4
 800c404:	d127      	bne.n	800c456 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c406:	7afb      	ldrb	r3, [r7, #11]
 800c408:	f003 0304 	and.w	r3, r3, #4
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d122      	bne.n	800c456 <follow_path+0xd2>
 800c410:	2305      	movs	r3, #5
 800c412:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c414:	e01f      	b.n	800c456 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c416:	7afb      	ldrb	r3, [r7, #11]
 800c418:	f003 0304 	and.w	r3, r3, #4
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d11c      	bne.n	800c45a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	799b      	ldrb	r3, [r3, #6]
 800c424:	f003 0310 	and.w	r3, r3, #16
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d102      	bne.n	800c432 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c42c:	2305      	movs	r3, #5
 800c42e:	75fb      	strb	r3, [r7, #23]
 800c430:	e014      	b.n	800c45c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	695b      	ldr	r3, [r3, #20]
 800c43c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c440:	4413      	add	r3, r2
 800c442:	4619      	mov	r1, r3
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f7ff fe43 	bl	800c0d0 <ld_clust>
 800c44a:	4602      	mov	r2, r0
 800c44c:	693b      	ldr	r3, [r7, #16]
 800c44e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c450:	e7c0      	b.n	800c3d4 <follow_path+0x50>
			if (res != FR_OK) break;
 800c452:	bf00      	nop
 800c454:	e002      	b.n	800c45c <follow_path+0xd8>
				break;
 800c456:	bf00      	nop
 800c458:	e000      	b.n	800c45c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c45a:	bf00      	nop
			}
		}
	}

	return res;
 800c45c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3718      	adds	r7, #24
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}

0800c466 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c466:	b480      	push	{r7}
 800c468:	b087      	sub	sp, #28
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c46e:	f04f 33ff 	mov.w	r3, #4294967295
 800c472:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d031      	beq.n	800c4e0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	617b      	str	r3, [r7, #20]
 800c482:	e002      	b.n	800c48a <get_ldnumber+0x24>
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	3301      	adds	r3, #1
 800c488:	617b      	str	r3, [r7, #20]
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	781b      	ldrb	r3, [r3, #0]
 800c48e:	2b20      	cmp	r3, #32
 800c490:	d903      	bls.n	800c49a <get_ldnumber+0x34>
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	2b3a      	cmp	r3, #58	@ 0x3a
 800c498:	d1f4      	bne.n	800c484 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	2b3a      	cmp	r3, #58	@ 0x3a
 800c4a0:	d11c      	bne.n	800c4dc <get_ldnumber+0x76>
			tp = *path;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	1c5a      	adds	r2, r3, #1
 800c4ac:	60fa      	str	r2, [r7, #12]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	3b30      	subs	r3, #48	@ 0x30
 800c4b2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c4b4:	68bb      	ldr	r3, [r7, #8]
 800c4b6:	2b09      	cmp	r3, #9
 800c4b8:	d80e      	bhi.n	800c4d8 <get_ldnumber+0x72>
 800c4ba:	68fa      	ldr	r2, [r7, #12]
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	429a      	cmp	r2, r3
 800c4c0:	d10a      	bne.n	800c4d8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d107      	bne.n	800c4d8 <get_ldnumber+0x72>
					vol = (int)i;
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	617b      	str	r3, [r7, #20]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	697a      	ldr	r2, [r7, #20]
 800c4d6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	e002      	b.n	800c4e2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c4dc:	2300      	movs	r3, #0
 800c4de:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c4e0:	693b      	ldr	r3, [r7, #16]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	371c      	adds	r7, #28
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ec:	4770      	bx	lr
	...

0800c4f0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	70da      	strb	r2, [r3, #3]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f04f 32ff 	mov.w	r2, #4294967295
 800c506:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f7ff f8dc 	bl	800b6c8 <move_window>
 800c510:	4603      	mov	r3, r0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d001      	beq.n	800c51a <check_fs+0x2a>
 800c516:	2304      	movs	r3, #4
 800c518:	e038      	b.n	800c58c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	3330      	adds	r3, #48	@ 0x30
 800c51e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c522:	4618      	mov	r0, r3
 800c524:	f7fe fe1e 	bl	800b164 <ld_word>
 800c528:	4603      	mov	r3, r0
 800c52a:	461a      	mov	r2, r3
 800c52c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c530:	429a      	cmp	r2, r3
 800c532:	d001      	beq.n	800c538 <check_fs+0x48>
 800c534:	2303      	movs	r3, #3
 800c536:	e029      	b.n	800c58c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c53e:	2be9      	cmp	r3, #233	@ 0xe9
 800c540:	d009      	beq.n	800c556 <check_fs+0x66>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c548:	2beb      	cmp	r3, #235	@ 0xeb
 800c54a:	d11e      	bne.n	800c58a <check_fs+0x9a>
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c552:	2b90      	cmp	r3, #144	@ 0x90
 800c554:	d119      	bne.n	800c58a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	3330      	adds	r3, #48	@ 0x30
 800c55a:	3336      	adds	r3, #54	@ 0x36
 800c55c:	4618      	mov	r0, r3
 800c55e:	f7fe fe1a 	bl	800b196 <ld_dword>
 800c562:	4603      	mov	r3, r0
 800c564:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c568:	4a0a      	ldr	r2, [pc, #40]	@ (800c594 <check_fs+0xa4>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d101      	bne.n	800c572 <check_fs+0x82>
 800c56e:	2300      	movs	r3, #0
 800c570:	e00c      	b.n	800c58c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	3330      	adds	r3, #48	@ 0x30
 800c576:	3352      	adds	r3, #82	@ 0x52
 800c578:	4618      	mov	r0, r3
 800c57a:	f7fe fe0c 	bl	800b196 <ld_dword>
 800c57e:	4603      	mov	r3, r0
 800c580:	4a05      	ldr	r2, [pc, #20]	@ (800c598 <check_fs+0xa8>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d101      	bne.n	800c58a <check_fs+0x9a>
 800c586:	2300      	movs	r3, #0
 800c588:	e000      	b.n	800c58c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c58a:	2302      	movs	r3, #2
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3708      	adds	r7, #8
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	00544146 	.word	0x00544146
 800c598:	33544146 	.word	0x33544146

0800c59c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b096      	sub	sp, #88	@ 0x58
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	4613      	mov	r3, r2
 800c5a8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c5aa:	68bb      	ldr	r3, [r7, #8]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f7ff ff58 	bl	800c466 <get_ldnumber>
 800c5b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c5b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	da01      	bge.n	800c5c2 <find_volume+0x26>
 800c5be:	230b      	movs	r3, #11
 800c5c0:	e22d      	b.n	800ca1e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c5c2:	4aa1      	ldr	r2, [pc, #644]	@ (800c848 <find_volume+0x2ac>)
 800c5c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5ca:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d101      	bne.n	800c5d6 <find_volume+0x3a>
 800c5d2:	230c      	movs	r3, #12
 800c5d4:	e223      	b.n	800ca1e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5da:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c5dc:	79fb      	ldrb	r3, [r7, #7]
 800c5de:	f023 0301 	bic.w	r3, r3, #1
 800c5e2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c5e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d01a      	beq.n	800c622 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c5ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ee:	785b      	ldrb	r3, [r3, #1]
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f7fe fd17 	bl	800b024 <disk_status>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c5fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c600:	f003 0301 	and.w	r3, r3, #1
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10c      	bne.n	800c622 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c608:	79fb      	ldrb	r3, [r7, #7]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d007      	beq.n	800c61e <find_volume+0x82>
 800c60e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c612:	f003 0304 	and.w	r3, r3, #4
 800c616:	2b00      	cmp	r3, #0
 800c618:	d001      	beq.n	800c61e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c61a:	230a      	movs	r3, #10
 800c61c:	e1ff      	b.n	800ca1e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c61e:	2300      	movs	r3, #0
 800c620:	e1fd      	b.n	800ca1e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c624:	2200      	movs	r2, #0
 800c626:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c62a:	b2da      	uxtb	r2, r3
 800c62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c62e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c632:	785b      	ldrb	r3, [r3, #1]
 800c634:	4618      	mov	r0, r3
 800c636:	f7fe fd0f 	bl	800b058 <disk_initialize>
 800c63a:	4603      	mov	r3, r0
 800c63c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c640:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c644:	f003 0301 	and.w	r3, r3, #1
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d001      	beq.n	800c650 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c64c:	2303      	movs	r3, #3
 800c64e:	e1e6      	b.n	800ca1e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c650:	79fb      	ldrb	r3, [r7, #7]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d007      	beq.n	800c666 <find_volume+0xca>
 800c656:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c65a:	f003 0304 	and.w	r3, r3, #4
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d001      	beq.n	800c666 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c662:	230a      	movs	r3, #10
 800c664:	e1db      	b.n	800ca1e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c666:	2300      	movs	r3, #0
 800c668:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c66a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c66c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c66e:	f7ff ff3f 	bl	800c4f0 <check_fs>
 800c672:	4603      	mov	r3, r0
 800c674:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c678:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c67c:	2b02      	cmp	r3, #2
 800c67e:	d149      	bne.n	800c714 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c680:	2300      	movs	r3, #0
 800c682:	643b      	str	r3, [r7, #64]	@ 0x40
 800c684:	e01e      	b.n	800c6c4 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c688:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c68c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c68e:	011b      	lsls	r3, r3, #4
 800c690:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c694:	4413      	add	r3, r2
 800c696:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c69a:	3304      	adds	r3, #4
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d006      	beq.n	800c6b0 <find_volume+0x114>
 800c6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a4:	3308      	adds	r3, #8
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fe fd75 	bl	800b196 <ld_dword>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	e000      	b.n	800c6b2 <find_volume+0x116>
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6b4:	009b      	lsls	r3, r3, #2
 800c6b6:	3358      	adds	r3, #88	@ 0x58
 800c6b8:	443b      	add	r3, r7
 800c6ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c6be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6c6:	2b03      	cmp	r3, #3
 800c6c8:	d9dd      	bls.n	800c686 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c6ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d002      	beq.n	800c6da <find_volume+0x13e>
 800c6d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6d6:	3b01      	subs	r3, #1
 800c6d8:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c6da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	3358      	adds	r3, #88	@ 0x58
 800c6e0:	443b      	add	r3, r7
 800c6e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c6e6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c6e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d005      	beq.n	800c6fa <find_volume+0x15e>
 800c6ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c6f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c6f2:	f7ff fefd 	bl	800c4f0 <check_fs>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	e000      	b.n	800c6fc <find_volume+0x160>
 800c6fa:	2303      	movs	r3, #3
 800c6fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c700:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c704:	2b01      	cmp	r3, #1
 800c706:	d905      	bls.n	800c714 <find_volume+0x178>
 800c708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c70a:	3301      	adds	r3, #1
 800c70c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c70e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c710:	2b03      	cmp	r3, #3
 800c712:	d9e2      	bls.n	800c6da <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c714:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c718:	2b04      	cmp	r3, #4
 800c71a:	d101      	bne.n	800c720 <find_volume+0x184>
 800c71c:	2301      	movs	r3, #1
 800c71e:	e17e      	b.n	800ca1e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c720:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c724:	2b01      	cmp	r3, #1
 800c726:	d901      	bls.n	800c72c <find_volume+0x190>
 800c728:	230d      	movs	r3, #13
 800c72a:	e178      	b.n	800ca1e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c72e:	3330      	adds	r3, #48	@ 0x30
 800c730:	330b      	adds	r3, #11
 800c732:	4618      	mov	r0, r3
 800c734:	f7fe fd16 	bl	800b164 <ld_word>
 800c738:	4603      	mov	r3, r0
 800c73a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c73e:	d001      	beq.n	800c744 <find_volume+0x1a8>
 800c740:	230d      	movs	r3, #13
 800c742:	e16c      	b.n	800ca1e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c746:	3330      	adds	r3, #48	@ 0x30
 800c748:	3316      	adds	r3, #22
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fe fd0a 	bl	800b164 <ld_word>
 800c750:	4603      	mov	r3, r0
 800c752:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c754:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c756:	2b00      	cmp	r3, #0
 800c758:	d106      	bne.n	800c768 <find_volume+0x1cc>
 800c75a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c75c:	3330      	adds	r3, #48	@ 0x30
 800c75e:	3324      	adds	r3, #36	@ 0x24
 800c760:	4618      	mov	r0, r3
 800c762:	f7fe fd18 	bl	800b196 <ld_dword>
 800c766:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c76c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c76e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c770:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c776:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c77a:	789b      	ldrb	r3, [r3, #2]
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d005      	beq.n	800c78c <find_volume+0x1f0>
 800c780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c782:	789b      	ldrb	r3, [r3, #2]
 800c784:	2b02      	cmp	r3, #2
 800c786:	d001      	beq.n	800c78c <find_volume+0x1f0>
 800c788:	230d      	movs	r3, #13
 800c78a:	e148      	b.n	800ca1e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c78e:	789b      	ldrb	r3, [r3, #2]
 800c790:	461a      	mov	r2, r3
 800c792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c794:	fb02 f303 	mul.w	r3, r2, r3
 800c798:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c7a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a8:	895b      	ldrh	r3, [r3, #10]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d008      	beq.n	800c7c0 <find_volume+0x224>
 800c7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b0:	895b      	ldrh	r3, [r3, #10]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b6:	895b      	ldrh	r3, [r3, #10]
 800c7b8:	3b01      	subs	r3, #1
 800c7ba:	4013      	ands	r3, r2
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d001      	beq.n	800c7c4 <find_volume+0x228>
 800c7c0:	230d      	movs	r3, #13
 800c7c2:	e12c      	b.n	800ca1e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c6:	3330      	adds	r3, #48	@ 0x30
 800c7c8:	3311      	adds	r3, #17
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7fe fcca 	bl	800b164 <ld_word>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7da:	891b      	ldrh	r3, [r3, #8]
 800c7dc:	f003 030f 	and.w	r3, r3, #15
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <find_volume+0x24e>
 800c7e6:	230d      	movs	r3, #13
 800c7e8:	e119      	b.n	800ca1e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c7ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ec:	3330      	adds	r3, #48	@ 0x30
 800c7ee:	3313      	adds	r3, #19
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f7fe fcb7 	bl	800b164 <ld_word>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c7fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d106      	bne.n	800c80e <find_volume+0x272>
 800c800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c802:	3330      	adds	r3, #48	@ 0x30
 800c804:	3320      	adds	r3, #32
 800c806:	4618      	mov	r0, r3
 800c808:	f7fe fcc5 	bl	800b196 <ld_dword>
 800c80c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c80e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c810:	3330      	adds	r3, #48	@ 0x30
 800c812:	330e      	adds	r3, #14
 800c814:	4618      	mov	r0, r3
 800c816:	f7fe fca5 	bl	800b164 <ld_word>
 800c81a:	4603      	mov	r3, r0
 800c81c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c81e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c820:	2b00      	cmp	r3, #0
 800c822:	d101      	bne.n	800c828 <find_volume+0x28c>
 800c824:	230d      	movs	r3, #13
 800c826:	e0fa      	b.n	800ca1e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c828:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c82a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c82c:	4413      	add	r3, r2
 800c82e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c830:	8912      	ldrh	r2, [r2, #8]
 800c832:	0912      	lsrs	r2, r2, #4
 800c834:	b292      	uxth	r2, r2
 800c836:	4413      	add	r3, r2
 800c838:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c83a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c83e:	429a      	cmp	r2, r3
 800c840:	d204      	bcs.n	800c84c <find_volume+0x2b0>
 800c842:	230d      	movs	r3, #13
 800c844:	e0eb      	b.n	800ca1e <find_volume+0x482>
 800c846:	bf00      	nop
 800c848:	200002fc 	.word	0x200002fc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c84c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c850:	1ad3      	subs	r3, r2, r3
 800c852:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c854:	8952      	ldrh	r2, [r2, #10]
 800c856:	fbb3 f3f2 	udiv	r3, r3, r2
 800c85a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d101      	bne.n	800c866 <find_volume+0x2ca>
 800c862:	230d      	movs	r3, #13
 800c864:	e0db      	b.n	800ca1e <find_volume+0x482>
		fmt = FS_FAT32;
 800c866:	2303      	movs	r3, #3
 800c868:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c86e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c872:	4293      	cmp	r3, r2
 800c874:	d802      	bhi.n	800c87c <find_volume+0x2e0>
 800c876:	2302      	movs	r3, #2
 800c878:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c87e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c882:	4293      	cmp	r3, r2
 800c884:	d802      	bhi.n	800c88c <find_volume+0x2f0>
 800c886:	2301      	movs	r3, #1
 800c888:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88e:	1c9a      	adds	r2, r3, #2
 800c890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c892:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c896:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c898:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c89a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c89c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c89e:	441a      	add	r2, r3
 800c8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a2:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c8a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8a8:	441a      	add	r2, r3
 800c8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ac:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800c8ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c8b2:	2b03      	cmp	r3, #3
 800c8b4:	d11e      	bne.n	800c8f4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b8:	3330      	adds	r3, #48	@ 0x30
 800c8ba:	332a      	adds	r3, #42	@ 0x2a
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7fe fc51 	bl	800b164 <ld_word>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d001      	beq.n	800c8cc <find_volume+0x330>
 800c8c8:	230d      	movs	r3, #13
 800c8ca:	e0a8      	b.n	800ca1e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ce:	891b      	ldrh	r3, [r3, #8]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d001      	beq.n	800c8d8 <find_volume+0x33c>
 800c8d4:	230d      	movs	r3, #13
 800c8d6:	e0a2      	b.n	800ca1e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8da:	3330      	adds	r3, #48	@ 0x30
 800c8dc:	332c      	adds	r3, #44	@ 0x2c
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fe fc59 	bl	800b196 <ld_dword>
 800c8e4:	4602      	mov	r2, r0
 800c8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c8ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ec:	695b      	ldr	r3, [r3, #20]
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8f2:	e01f      	b.n	800c934 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f6:	891b      	ldrh	r3, [r3, #8]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d101      	bne.n	800c900 <find_volume+0x364>
 800c8fc:	230d      	movs	r3, #13
 800c8fe:	e08e      	b.n	800ca1e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c902:	6a1a      	ldr	r2, [r3, #32]
 800c904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c906:	441a      	add	r2, r3
 800c908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c90a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c90c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c910:	2b02      	cmp	r3, #2
 800c912:	d103      	bne.n	800c91c <find_volume+0x380>
 800c914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c916:	695b      	ldr	r3, [r3, #20]
 800c918:	005b      	lsls	r3, r3, #1
 800c91a:	e00a      	b.n	800c932 <find_volume+0x396>
 800c91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91e:	695a      	ldr	r2, [r3, #20]
 800c920:	4613      	mov	r3, r2
 800c922:	005b      	lsls	r3, r3, #1
 800c924:	4413      	add	r3, r2
 800c926:	085a      	lsrs	r2, r3, #1
 800c928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c92a:	695b      	ldr	r3, [r3, #20]
 800c92c:	f003 0301 	and.w	r3, r3, #1
 800c930:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c932:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c936:	699a      	ldr	r2, [r3, #24]
 800c938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c93a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c93e:	0a5b      	lsrs	r3, r3, #9
 800c940:	429a      	cmp	r2, r3
 800c942:	d201      	bcs.n	800c948 <find_volume+0x3ac>
 800c944:	230d      	movs	r3, #13
 800c946:	e06a      	b.n	800ca1e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c94a:	f04f 32ff 	mov.w	r2, #4294967295
 800c94e:	611a      	str	r2, [r3, #16]
 800c950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c952:	691a      	ldr	r2, [r3, #16]
 800c954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c956:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c95a:	2280      	movs	r2, #128	@ 0x80
 800c95c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c95e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c962:	2b03      	cmp	r3, #3
 800c964:	d149      	bne.n	800c9fa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c968:	3330      	adds	r3, #48	@ 0x30
 800c96a:	3330      	adds	r3, #48	@ 0x30
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7fe fbf9 	bl	800b164 <ld_word>
 800c972:	4603      	mov	r3, r0
 800c974:	2b01      	cmp	r3, #1
 800c976:	d140      	bne.n	800c9fa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c97a:	3301      	adds	r3, #1
 800c97c:	4619      	mov	r1, r3
 800c97e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c980:	f7fe fea2 	bl	800b6c8 <move_window>
 800c984:	4603      	mov	r3, r0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d137      	bne.n	800c9fa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c98c:	2200      	movs	r2, #0
 800c98e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c992:	3330      	adds	r3, #48	@ 0x30
 800c994:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c998:	4618      	mov	r0, r3
 800c99a:	f7fe fbe3 	bl	800b164 <ld_word>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	461a      	mov	r2, r3
 800c9a2:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d127      	bne.n	800c9fa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ac:	3330      	adds	r3, #48	@ 0x30
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fe fbf1 	bl	800b196 <ld_dword>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	4a1c      	ldr	r2, [pc, #112]	@ (800ca28 <find_volume+0x48c>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d11e      	bne.n	800c9fa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9be:	3330      	adds	r3, #48	@ 0x30
 800c9c0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7fe fbe6 	bl	800b196 <ld_dword>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	4a17      	ldr	r2, [pc, #92]	@ (800ca2c <find_volume+0x490>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d113      	bne.n	800c9fa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d4:	3330      	adds	r3, #48	@ 0x30
 800c9d6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fe fbdb 	bl	800b196 <ld_dword>
 800c9e0:	4602      	mov	r2, r0
 800c9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9e4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9e8:	3330      	adds	r3, #48	@ 0x30
 800c9ea:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fe fbd1 	bl	800b196 <ld_dword>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9f8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9fc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ca00:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ca02:	4b0b      	ldr	r3, [pc, #44]	@ (800ca30 <find_volume+0x494>)
 800ca04:	881b      	ldrh	r3, [r3, #0]
 800ca06:	3301      	adds	r3, #1
 800ca08:	b29a      	uxth	r2, r3
 800ca0a:	4b09      	ldr	r3, [pc, #36]	@ (800ca30 <find_volume+0x494>)
 800ca0c:	801a      	strh	r2, [r3, #0]
 800ca0e:	4b08      	ldr	r3, [pc, #32]	@ (800ca30 <find_volume+0x494>)
 800ca10:	881a      	ldrh	r2, [r3, #0]
 800ca12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca14:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ca16:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ca18:	f7fe fdee 	bl	800b5f8 <clear_lock>
#endif
	return FR_OK;
 800ca1c:	2300      	movs	r3, #0
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3758      	adds	r7, #88	@ 0x58
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	41615252 	.word	0x41615252
 800ca2c:	61417272 	.word	0x61417272
 800ca30:	20000300 	.word	0x20000300

0800ca34 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ca3e:	2309      	movs	r3, #9
 800ca40:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d01c      	beq.n	800ca82 <validate+0x4e>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d018      	beq.n	800ca82 <validate+0x4e>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d013      	beq.n	800ca82 <validate+0x4e>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	889a      	ldrh	r2, [r3, #4]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	88db      	ldrh	r3, [r3, #6]
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d10c      	bne.n	800ca82 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	785b      	ldrb	r3, [r3, #1]
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7fe fad8 	bl	800b024 <disk_status>
 800ca74:	4603      	mov	r3, r0
 800ca76:	f003 0301 	and.w	r3, r3, #1
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d101      	bne.n	800ca82 <validate+0x4e>
			res = FR_OK;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ca82:	7bfb      	ldrb	r3, [r7, #15]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d102      	bne.n	800ca8e <validate+0x5a>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	e000      	b.n	800ca90 <validate+0x5c>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	683a      	ldr	r2, [r7, #0]
 800ca92:	6013      	str	r3, [r2, #0]
	return res;
 800ca94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
	...

0800caa0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b088      	sub	sp, #32
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	60f8      	str	r0, [r7, #12]
 800caa8:	60b9      	str	r1, [r7, #8]
 800caaa:	4613      	mov	r3, r2
 800caac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cab2:	f107 0310 	add.w	r3, r7, #16
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7ff fcd5 	bl	800c466 <get_ldnumber>
 800cabc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	da01      	bge.n	800cac8 <f_mount+0x28>
 800cac4:	230b      	movs	r3, #11
 800cac6:	e02b      	b.n	800cb20 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cac8:	4a17      	ldr	r2, [pc, #92]	@ (800cb28 <f_mount+0x88>)
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cad0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cad2:	69bb      	ldr	r3, [r7, #24]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d005      	beq.n	800cae4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cad8:	69b8      	ldr	r0, [r7, #24]
 800cada:	f7fe fd8d 	bl	800b5f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	2200      	movs	r2, #0
 800cae2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d002      	beq.n	800caf0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2200      	movs	r2, #0
 800caee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	490d      	ldr	r1, [pc, #52]	@ (800cb28 <f_mount+0x88>)
 800caf4:	69fb      	ldr	r3, [r7, #28]
 800caf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d002      	beq.n	800cb06 <f_mount+0x66>
 800cb00:	79fb      	ldrb	r3, [r7, #7]
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d001      	beq.n	800cb0a <f_mount+0x6a>
 800cb06:	2300      	movs	r3, #0
 800cb08:	e00a      	b.n	800cb20 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cb0a:	f107 010c 	add.w	r1, r7, #12
 800cb0e:	f107 0308 	add.w	r3, r7, #8
 800cb12:	2200      	movs	r2, #0
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7ff fd41 	bl	800c59c <find_volume>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cb1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3720      	adds	r7, #32
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	200002fc 	.word	0x200002fc

0800cb2c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b098      	sub	sp, #96	@ 0x60
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	60f8      	str	r0, [r7, #12]
 800cb34:	60b9      	str	r1, [r7, #8]
 800cb36:	4613      	mov	r3, r2
 800cb38:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d101      	bne.n	800cb44 <f_open+0x18>
 800cb40:	2309      	movs	r3, #9
 800cb42:	e1a9      	b.n	800ce98 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cb44:	79fb      	ldrb	r3, [r7, #7]
 800cb46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb4a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cb4c:	79fa      	ldrb	r2, [r7, #7]
 800cb4e:	f107 0110 	add.w	r1, r7, #16
 800cb52:	f107 0308 	add.w	r3, r7, #8
 800cb56:	4618      	mov	r0, r3
 800cb58:	f7ff fd20 	bl	800c59c <find_volume>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800cb62:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f040 818d 	bne.w	800ce86 <f_open+0x35a>
		dj.obj.fs = fs;
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cb70:	68ba      	ldr	r2, [r7, #8]
 800cb72:	f107 0314 	add.w	r3, r7, #20
 800cb76:	4611      	mov	r1, r2
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f7ff fc03 	bl	800c384 <follow_path>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cb84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d118      	bne.n	800cbbe <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cb8c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cb90:	b25b      	sxtb	r3, r3
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	da03      	bge.n	800cb9e <f_open+0x72>
				res = FR_INVALID_NAME;
 800cb96:	2306      	movs	r3, #6
 800cb98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cb9c:	e00f      	b.n	800cbbe <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cb9e:	79fb      	ldrb	r3, [r7, #7]
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	bf8c      	ite	hi
 800cba4:	2301      	movhi	r3, #1
 800cba6:	2300      	movls	r3, #0
 800cba8:	b2db      	uxtb	r3, r3
 800cbaa:	461a      	mov	r2, r3
 800cbac:	f107 0314 	add.w	r3, r7, #20
 800cbb0:	4611      	mov	r1, r2
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fe fbd8 	bl	800b368 <chk_lock>
 800cbb8:	4603      	mov	r3, r0
 800cbba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cbbe:	79fb      	ldrb	r3, [r7, #7]
 800cbc0:	f003 031c 	and.w	r3, r3, #28
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d07f      	beq.n	800ccc8 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800cbc8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d017      	beq.n	800cc00 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cbd0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbd4:	2b04      	cmp	r3, #4
 800cbd6:	d10e      	bne.n	800cbf6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cbd8:	f7fe fc22 	bl	800b420 <enq_lock>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d006      	beq.n	800cbf0 <f_open+0xc4>
 800cbe2:	f107 0314 	add.w	r3, r7, #20
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7ff fb06 	bl	800c1f8 <dir_register>
 800cbec:	4603      	mov	r3, r0
 800cbee:	e000      	b.n	800cbf2 <f_open+0xc6>
 800cbf0:	2312      	movs	r3, #18
 800cbf2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cbf6:	79fb      	ldrb	r3, [r7, #7]
 800cbf8:	f043 0308 	orr.w	r3, r3, #8
 800cbfc:	71fb      	strb	r3, [r7, #7]
 800cbfe:	e010      	b.n	800cc22 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cc00:	7ebb      	ldrb	r3, [r7, #26]
 800cc02:	f003 0311 	and.w	r3, r3, #17
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d003      	beq.n	800cc12 <f_open+0xe6>
					res = FR_DENIED;
 800cc0a:	2307      	movs	r3, #7
 800cc0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cc10:	e007      	b.n	800cc22 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cc12:	79fb      	ldrb	r3, [r7, #7]
 800cc14:	f003 0304 	and.w	r3, r3, #4
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d002      	beq.n	800cc22 <f_open+0xf6>
 800cc1c:	2308      	movs	r3, #8
 800cc1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cc22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d168      	bne.n	800ccfc <f_open+0x1d0>
 800cc2a:	79fb      	ldrb	r3, [r7, #7]
 800cc2c:	f003 0308 	and.w	r3, r3, #8
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d063      	beq.n	800ccfc <f_open+0x1d0>
				dw = GET_FATTIME();
 800cc34:	f7fe f83c 	bl	800acb0 <get_fattime>
 800cc38:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cc3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc3c:	330e      	adds	r3, #14
 800cc3e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7fe fae6 	bl	800b212 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cc46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc48:	3316      	adds	r3, #22
 800cc4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7fe fae0 	bl	800b212 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cc52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc54:	330b      	adds	r3, #11
 800cc56:	2220      	movs	r2, #32
 800cc58:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc5e:	4611      	mov	r1, r2
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7ff fa35 	bl	800c0d0 <ld_clust>
 800cc66:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7ff fa4d 	bl	800c10e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cc74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc76:	331c      	adds	r3, #28
 800cc78:	2100      	movs	r1, #0
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7fe fac9 	bl	800b212 <st_dword>
					fs->wflag = 1;
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	2201      	movs	r2, #1
 800cc84:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cc86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d037      	beq.n	800ccfc <f_open+0x1d0>
						dw = fs->winsect;
 800cc8c:	693b      	ldr	r3, [r7, #16]
 800cc8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc90:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cc92:	f107 0314 	add.w	r3, r7, #20
 800cc96:	2200      	movs	r2, #0
 800cc98:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fe ff60 	bl	800bb60 <remove_chain>
 800cca0:	4603      	mov	r3, r0
 800cca2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800cca6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d126      	bne.n	800ccfc <f_open+0x1d0>
							res = move_window(fs, dw);
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f7fe fd08 	bl	800b6c8 <move_window>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ccc2:	3a01      	subs	r2, #1
 800ccc4:	60da      	str	r2, [r3, #12]
 800ccc6:	e019      	b.n	800ccfc <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ccc8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d115      	bne.n	800ccfc <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ccd0:	7ebb      	ldrb	r3, [r7, #26]
 800ccd2:	f003 0310 	and.w	r3, r3, #16
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d003      	beq.n	800cce2 <f_open+0x1b6>
					res = FR_NO_FILE;
 800ccda:	2304      	movs	r3, #4
 800ccdc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cce0:	e00c      	b.n	800ccfc <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cce2:	79fb      	ldrb	r3, [r7, #7]
 800cce4:	f003 0302 	and.w	r3, r3, #2
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d007      	beq.n	800ccfc <f_open+0x1d0>
 800ccec:	7ebb      	ldrb	r3, [r7, #26]
 800ccee:	f003 0301 	and.w	r3, r3, #1
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d002      	beq.n	800ccfc <f_open+0x1d0>
						res = FR_DENIED;
 800ccf6:	2307      	movs	r3, #7
 800ccf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ccfc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d126      	bne.n	800cd52 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cd04:	79fb      	ldrb	r3, [r7, #7]
 800cd06:	f003 0308 	and.w	r3, r3, #8
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d003      	beq.n	800cd16 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800cd0e:	79fb      	ldrb	r3, [r7, #7]
 800cd10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd14:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800cd1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cd24:	79fb      	ldrb	r3, [r7, #7]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	bf8c      	ite	hi
 800cd2a:	2301      	movhi	r3, #1
 800cd2c:	2300      	movls	r3, #0
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	461a      	mov	r2, r3
 800cd32:	f107 0314 	add.w	r3, r7, #20
 800cd36:	4611      	mov	r1, r2
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7fe fb93 	bl	800b464 <inc_lock>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	691b      	ldr	r3, [r3, #16]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d102      	bne.n	800cd52 <f_open+0x226>
 800cd4c:	2302      	movs	r3, #2
 800cd4e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cd52:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	f040 8095 	bne.w	800ce86 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cd5c:	693b      	ldr	r3, [r7, #16]
 800cd5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd60:	4611      	mov	r1, r2
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7ff f9b4 	bl	800c0d0 <ld_clust>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cd6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd70:	331c      	adds	r3, #28
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7fe fa0f 	bl	800b196 <ld_dword>
 800cd78:	4602      	mov	r2, r0
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2200      	movs	r2, #0
 800cd82:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cd84:	693a      	ldr	r2, [r7, #16]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	88da      	ldrh	r2, [r3, #6]
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	79fa      	ldrb	r2, [r7, #7]
 800cd96:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	2200      	movs	r2, #0
 800cda2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2200      	movs	r2, #0
 800cda8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	3330      	adds	r3, #48	@ 0x30
 800cdae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	f7fe fa79 	bl	800b2ac <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cdba:	79fb      	ldrb	r3, [r7, #7]
 800cdbc:	f003 0320 	and.w	r3, r3, #32
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d060      	beq.n	800ce86 <f_open+0x35a>
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	68db      	ldr	r3, [r3, #12]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d05c      	beq.n	800ce86 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	68da      	ldr	r2, [r3, #12]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cdd4:	693b      	ldr	r3, [r7, #16]
 800cdd6:	895b      	ldrh	r3, [r3, #10]
 800cdd8:	025b      	lsls	r3, r3, #9
 800cdda:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	689b      	ldr	r3, [r3, #8]
 800cde0:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	68db      	ldr	r3, [r3, #12]
 800cde6:	657b      	str	r3, [r7, #84]	@ 0x54
 800cde8:	e016      	b.n	800ce18 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7fe fd25 	bl	800b83e <get_fat>
 800cdf4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800cdf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cdf8:	2b01      	cmp	r3, #1
 800cdfa:	d802      	bhi.n	800ce02 <f_open+0x2d6>
 800cdfc:	2302      	movs	r3, #2
 800cdfe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ce02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce08:	d102      	bne.n	800ce10 <f_open+0x2e4>
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ce10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce14:	1ad3      	subs	r3, r2, r3
 800ce16:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d103      	bne.n	800ce28 <f_open+0x2fc>
 800ce20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d8e0      	bhi.n	800cdea <f_open+0x2be>
				}
				fp->clust = clst;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ce2c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ce2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d127      	bne.n	800ce86 <f_open+0x35a>
 800ce36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d022      	beq.n	800ce86 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ce40:	693b      	ldr	r3, [r7, #16]
 800ce42:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7fe fcdb 	bl	800b800 <clust2sect>
 800ce4a:	6478      	str	r0, [r7, #68]	@ 0x44
 800ce4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d103      	bne.n	800ce5a <f_open+0x32e>
						res = FR_INT_ERR;
 800ce52:	2302      	movs	r3, #2
 800ce54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ce58:	e015      	b.n	800ce86 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ce5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce5c:	0a5a      	lsrs	r2, r3, #9
 800ce5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce60:	441a      	add	r2, r3
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	7858      	ldrb	r0, [r3, #1]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	6a1a      	ldr	r2, [r3, #32]
 800ce74:	2301      	movs	r3, #1
 800ce76:	f7fe f917 	bl	800b0a8 <disk_read>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d002      	beq.n	800ce86 <f_open+0x35a>
 800ce80:	2301      	movs	r3, #1
 800ce82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ce86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d002      	beq.n	800ce94 <f_open+0x368>
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2200      	movs	r2, #0
 800ce92:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ce94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3760      	adds	r7, #96	@ 0x60
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b08e      	sub	sp, #56	@ 0x38
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
 800ceac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f107 0214 	add.w	r2, r7, #20
 800cebe:	4611      	mov	r1, r2
 800cec0:	4618      	mov	r0, r3
 800cec2:	f7ff fdb7 	bl	800ca34 <validate>
 800cec6:	4603      	mov	r3, r0
 800cec8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cecc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d107      	bne.n	800cee4 <f_read+0x44>
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	7d5b      	ldrb	r3, [r3, #21]
 800ced8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cedc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d002      	beq.n	800ceea <f_read+0x4a>
 800cee4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cee8:	e115      	b.n	800d116 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	7d1b      	ldrb	r3, [r3, #20]
 800ceee:	f003 0301 	and.w	r3, r3, #1
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d101      	bne.n	800cefa <f_read+0x5a>
 800cef6:	2307      	movs	r3, #7
 800cef8:	e10d      	b.n	800d116 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	68da      	ldr	r2, [r3, #12]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	699b      	ldr	r3, [r3, #24]
 800cf02:	1ad3      	subs	r3, r2, r3
 800cf04:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cf06:	687a      	ldr	r2, [r7, #4]
 800cf08:	6a3b      	ldr	r3, [r7, #32]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	f240 80fe 	bls.w	800d10c <f_read+0x26c>
 800cf10:	6a3b      	ldr	r3, [r7, #32]
 800cf12:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cf14:	e0fa      	b.n	800d10c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	699b      	ldr	r3, [r3, #24]
 800cf1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	f040 80c6 	bne.w	800d0b0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	699b      	ldr	r3, [r3, #24]
 800cf28:	0a5b      	lsrs	r3, r3, #9
 800cf2a:	697a      	ldr	r2, [r7, #20]
 800cf2c:	8952      	ldrh	r2, [r2, #10]
 800cf2e:	3a01      	subs	r2, #1
 800cf30:	4013      	ands	r3, r2
 800cf32:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d12f      	bne.n	800cf9a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	699b      	ldr	r3, [r3, #24]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d103      	bne.n	800cf4a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf48:	e013      	b.n	800cf72 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d007      	beq.n	800cf62 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	699b      	ldr	r3, [r3, #24]
 800cf56:	4619      	mov	r1, r3
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f7fe fefe 	bl	800bd5a <clmt_clust>
 800cf5e:	6338      	str	r0, [r7, #48]	@ 0x30
 800cf60:	e007      	b.n	800cf72 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cf62:	68fa      	ldr	r2, [r7, #12]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	69db      	ldr	r3, [r3, #28]
 800cf68:	4619      	mov	r1, r3
 800cf6a:	4610      	mov	r0, r2
 800cf6c:	f7fe fc67 	bl	800b83e <get_fat>
 800cf70:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cf72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d804      	bhi.n	800cf82 <f_read+0xe2>
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2202      	movs	r2, #2
 800cf7c:	755a      	strb	r2, [r3, #21]
 800cf7e:	2302      	movs	r3, #2
 800cf80:	e0c9      	b.n	800d116 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cf82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf88:	d104      	bne.n	800cf94 <f_read+0xf4>
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	755a      	strb	r2, [r3, #21]
 800cf90:	2301      	movs	r3, #1
 800cf92:	e0c0      	b.n	800d116 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf98:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cf9a:	697a      	ldr	r2, [r7, #20]
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	69db      	ldr	r3, [r3, #28]
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	4610      	mov	r0, r2
 800cfa4:	f7fe fc2c 	bl	800b800 <clust2sect>
 800cfa8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d104      	bne.n	800cfba <f_read+0x11a>
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2202      	movs	r2, #2
 800cfb4:	755a      	strb	r2, [r3, #21]
 800cfb6:	2302      	movs	r3, #2
 800cfb8:	e0ad      	b.n	800d116 <f_read+0x276>
			sect += csect;
 800cfba:	69ba      	ldr	r2, [r7, #24]
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	0a5b      	lsrs	r3, r3, #9
 800cfc6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cfc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d039      	beq.n	800d042 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cfce:	69fa      	ldr	r2, [r7, #28]
 800cfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd2:	4413      	add	r3, r2
 800cfd4:	697a      	ldr	r2, [r7, #20]
 800cfd6:	8952      	ldrh	r2, [r2, #10]
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d905      	bls.n	800cfe8 <f_read+0x148>
					cc = fs->csize - csect;
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	895b      	ldrh	r3, [r3, #10]
 800cfe0:	461a      	mov	r2, r3
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	7858      	ldrb	r0, [r3, #1]
 800cfec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfee:	69ba      	ldr	r2, [r7, #24]
 800cff0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800cff2:	f7fe f859 	bl	800b0a8 <disk_read>
 800cff6:	4603      	mov	r3, r0
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d004      	beq.n	800d006 <f_read+0x166>
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2201      	movs	r2, #1
 800d000:	755a      	strb	r2, [r3, #21]
 800d002:	2301      	movs	r3, #1
 800d004:	e087      	b.n	800d116 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	7d1b      	ldrb	r3, [r3, #20]
 800d00a:	b25b      	sxtb	r3, r3
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	da14      	bge.n	800d03a <f_read+0x19a>
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6a1a      	ldr	r2, [r3, #32]
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	1ad3      	subs	r3, r2, r3
 800d018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d90d      	bls.n	800d03a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6a1a      	ldr	r2, [r3, #32]
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	1ad3      	subs	r3, r2, r3
 800d026:	025b      	lsls	r3, r3, #9
 800d028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d02a:	18d0      	adds	r0, r2, r3
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	3330      	adds	r3, #48	@ 0x30
 800d030:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d034:	4619      	mov	r1, r3
 800d036:	f7fe f918 	bl	800b26a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d03c:	025b      	lsls	r3, r3, #9
 800d03e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d040:	e050      	b.n	800d0e4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6a1b      	ldr	r3, [r3, #32]
 800d046:	69ba      	ldr	r2, [r7, #24]
 800d048:	429a      	cmp	r2, r3
 800d04a:	d02e      	beq.n	800d0aa <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	7d1b      	ldrb	r3, [r3, #20]
 800d050:	b25b      	sxtb	r3, r3
 800d052:	2b00      	cmp	r3, #0
 800d054:	da18      	bge.n	800d088 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	7858      	ldrb	r0, [r3, #1]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	6a1a      	ldr	r2, [r3, #32]
 800d064:	2301      	movs	r3, #1
 800d066:	f7fe f83f 	bl	800b0e8 <disk_write>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d004      	beq.n	800d07a <f_read+0x1da>
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2201      	movs	r2, #1
 800d074:	755a      	strb	r2, [r3, #21]
 800d076:	2301      	movs	r3, #1
 800d078:	e04d      	b.n	800d116 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	7d1b      	ldrb	r3, [r3, #20]
 800d07e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d082:	b2da      	uxtb	r2, r3
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	7858      	ldrb	r0, [r3, #1]
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d092:	2301      	movs	r3, #1
 800d094:	69ba      	ldr	r2, [r7, #24]
 800d096:	f7fe f807 	bl	800b0a8 <disk_read>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d004      	beq.n	800d0aa <f_read+0x20a>
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	755a      	strb	r2, [r3, #21]
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	e035      	b.n	800d116 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	69ba      	ldr	r2, [r7, #24]
 800d0ae:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	699b      	ldr	r3, [r3, #24]
 800d0b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0b8:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d0bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d0be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d901      	bls.n	800d0ca <f_read+0x22a>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	699b      	ldr	r3, [r3, #24]
 800d0d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0d8:	4413      	add	r3, r2
 800d0da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0dc:	4619      	mov	r1, r3
 800d0de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d0e0:	f7fe f8c3 	bl	800b26a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d0e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0e8:	4413      	add	r3, r2
 800d0ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	699a      	ldr	r2, [r3, #24]
 800d0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0f2:	441a      	add	r2, r3
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	619a      	str	r2, [r3, #24]
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0fe:	441a      	add	r2, r3
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	601a      	str	r2, [r3, #0]
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d108:	1ad3      	subs	r3, r2, r3
 800d10a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	f47f af01 	bne.w	800cf16 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d114:	2300      	movs	r3, #0
}
 800d116:	4618      	mov	r0, r3
 800d118:	3738      	adds	r7, #56	@ 0x38
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}

0800d11e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d11e:	b580      	push	{r7, lr}
 800d120:	b086      	sub	sp, #24
 800d122:	af00      	add	r7, sp, #0
 800d124:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f107 0208 	add.w	r2, r7, #8
 800d12c:	4611      	mov	r1, r2
 800d12e:	4618      	mov	r0, r3
 800d130:	f7ff fc80 	bl	800ca34 <validate>
 800d134:	4603      	mov	r3, r0
 800d136:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d138:	7dfb      	ldrb	r3, [r7, #23]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d168      	bne.n	800d210 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	7d1b      	ldrb	r3, [r3, #20]
 800d142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d146:	2b00      	cmp	r3, #0
 800d148:	d062      	beq.n	800d210 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	7d1b      	ldrb	r3, [r3, #20]
 800d14e:	b25b      	sxtb	r3, r3
 800d150:	2b00      	cmp	r3, #0
 800d152:	da15      	bge.n	800d180 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	7858      	ldrb	r0, [r3, #1]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6a1a      	ldr	r2, [r3, #32]
 800d162:	2301      	movs	r3, #1
 800d164:	f7fd ffc0 	bl	800b0e8 <disk_write>
 800d168:	4603      	mov	r3, r0
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d001      	beq.n	800d172 <f_sync+0x54>
 800d16e:	2301      	movs	r3, #1
 800d170:	e04f      	b.n	800d212 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	7d1b      	ldrb	r3, [r3, #20]
 800d176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d17a:	b2da      	uxtb	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d180:	f7fd fd96 	bl	800acb0 <get_fattime>
 800d184:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d186:	68ba      	ldr	r2, [r7, #8]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d18c:	4619      	mov	r1, r3
 800d18e:	4610      	mov	r0, r2
 800d190:	f7fe fa9a 	bl	800b6c8 <move_window>
 800d194:	4603      	mov	r3, r0
 800d196:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d198:	7dfb      	ldrb	r3, [r7, #23]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d138      	bne.n	800d210 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1a2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	330b      	adds	r3, #11
 800d1a8:	781a      	ldrb	r2, [r3, #0]
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	330b      	adds	r3, #11
 800d1ae:	f042 0220 	orr.w	r2, r2, #32
 800d1b2:	b2d2      	uxtb	r2, r2
 800d1b4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6818      	ldr	r0, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	689b      	ldr	r3, [r3, #8]
 800d1be:	461a      	mov	r2, r3
 800d1c0:	68f9      	ldr	r1, [r7, #12]
 800d1c2:	f7fe ffa4 	bl	800c10e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	f103 021c 	add.w	r2, r3, #28
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	4610      	mov	r0, r2
 800d1d4:	f7fe f81d 	bl	800b212 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	3316      	adds	r3, #22
 800d1dc:	6939      	ldr	r1, [r7, #16]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f7fe f817 	bl	800b212 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	3312      	adds	r3, #18
 800d1e8:	2100      	movs	r1, #0
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7fd fff6 	bl	800b1dc <st_word>
					fs->wflag = 1;
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fe fa93 	bl	800b724 <sync_fs>
 800d1fe:	4603      	mov	r3, r0
 800d200:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	7d1b      	ldrb	r3, [r3, #20]
 800d206:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d20a:	b2da      	uxtb	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d210:	7dfb      	ldrb	r3, [r7, #23]
}
 800d212:	4618      	mov	r0, r3
 800d214:	3718      	adds	r7, #24
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b084      	sub	sp, #16
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f7ff ff7b 	bl	800d11e <f_sync>
 800d228:	4603      	mov	r3, r0
 800d22a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d22c:	7bfb      	ldrb	r3, [r7, #15]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d118      	bne.n	800d264 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f107 0208 	add.w	r2, r7, #8
 800d238:	4611      	mov	r1, r2
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7ff fbfa 	bl	800ca34 <validate>
 800d240:	4603      	mov	r3, r0
 800d242:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d244:	7bfb      	ldrb	r3, [r7, #15]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10c      	bne.n	800d264 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fe f996 	bl	800b580 <dec_lock>
 800d254:	4603      	mov	r3, r0
 800d256:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d258:	7bfb      	ldrb	r3, [r7, #15]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d102      	bne.n	800d264 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2200      	movs	r2, #0
 800d262:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d264:	7bfb      	ldrb	r3, [r7, #15]
}
 800d266:	4618      	mov	r0, r3
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
	...

0800d270 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d270:	b480      	push	{r7}
 800d272:	b087      	sub	sp, #28
 800d274:	af00      	add	r7, sp, #0
 800d276:	60f8      	str	r0, [r7, #12]
 800d278:	60b9      	str	r1, [r7, #8]
 800d27a:	4613      	mov	r3, r2
 800d27c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d27e:	2301      	movs	r3, #1
 800d280:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d282:	2300      	movs	r3, #0
 800d284:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d286:	4b1f      	ldr	r3, [pc, #124]	@ (800d304 <FATFS_LinkDriverEx+0x94>)
 800d288:	7a5b      	ldrb	r3, [r3, #9]
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d131      	bne.n	800d2f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d290:	4b1c      	ldr	r3, [pc, #112]	@ (800d304 <FATFS_LinkDriverEx+0x94>)
 800d292:	7a5b      	ldrb	r3, [r3, #9]
 800d294:	b2db      	uxtb	r3, r3
 800d296:	461a      	mov	r2, r3
 800d298:	4b1a      	ldr	r3, [pc, #104]	@ (800d304 <FATFS_LinkDriverEx+0x94>)
 800d29a:	2100      	movs	r1, #0
 800d29c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d29e:	4b19      	ldr	r3, [pc, #100]	@ (800d304 <FATFS_LinkDriverEx+0x94>)
 800d2a0:	7a5b      	ldrb	r3, [r3, #9]
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	4a17      	ldr	r2, [pc, #92]	@ (800d304 <FATFS_LinkDriverEx+0x94>)
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	4413      	add	r3, r2
 800d2aa:	68fa      	ldr	r2, [r7, #12]
 800d2ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d2ae:	4b15      	ldr	r3, [pc, #84]	@ (800d304 <FATFS_LinkDriverEx+0x94>)
 800d2b0:	7a5b      	ldrb	r3, [r3, #9]
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	4b13      	ldr	r3, [pc, #76]	@ (800d304 <FATFS_LinkDriverEx+0x94>)
 800d2b8:	4413      	add	r3, r2
 800d2ba:	79fa      	ldrb	r2, [r7, #7]
 800d2bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d2be:	4b11      	ldr	r3, [pc, #68]	@ (800d304 <FATFS_LinkDriverEx+0x94>)
 800d2c0:	7a5b      	ldrb	r3, [r3, #9]
 800d2c2:	b2db      	uxtb	r3, r3
 800d2c4:	1c5a      	adds	r2, r3, #1
 800d2c6:	b2d1      	uxtb	r1, r2
 800d2c8:	4a0e      	ldr	r2, [pc, #56]	@ (800d304 <FATFS_LinkDriverEx+0x94>)
 800d2ca:	7251      	strb	r1, [r2, #9]
 800d2cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d2ce:	7dbb      	ldrb	r3, [r7, #22]
 800d2d0:	3330      	adds	r3, #48	@ 0x30
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	223a      	movs	r2, #58	@ 0x3a
 800d2de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	3302      	adds	r3, #2
 800d2e4:	222f      	movs	r2, #47	@ 0x2f
 800d2e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	3303      	adds	r3, #3
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d2f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	371c      	adds	r7, #28
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	20000324 	.word	0x20000324

0800d308 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d312:	2200      	movs	r2, #0
 800d314:	6839      	ldr	r1, [r7, #0]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f7ff ffaa 	bl	800d270 <FATFS_LinkDriverEx>
 800d31c:	4603      	mov	r3, r0
}
 800d31e:	4618      	mov	r0, r3
 800d320:	3708      	adds	r7, #8
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
	...

0800d328 <siprintf>:
 800d328:	b40e      	push	{r1, r2, r3}
 800d32a:	b510      	push	{r4, lr}
 800d32c:	b09d      	sub	sp, #116	@ 0x74
 800d32e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d330:	9002      	str	r0, [sp, #8]
 800d332:	9006      	str	r0, [sp, #24]
 800d334:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d338:	480a      	ldr	r0, [pc, #40]	@ (800d364 <siprintf+0x3c>)
 800d33a:	9107      	str	r1, [sp, #28]
 800d33c:	9104      	str	r1, [sp, #16]
 800d33e:	490a      	ldr	r1, [pc, #40]	@ (800d368 <siprintf+0x40>)
 800d340:	f853 2b04 	ldr.w	r2, [r3], #4
 800d344:	9105      	str	r1, [sp, #20]
 800d346:	2400      	movs	r4, #0
 800d348:	a902      	add	r1, sp, #8
 800d34a:	6800      	ldr	r0, [r0, #0]
 800d34c:	9301      	str	r3, [sp, #4]
 800d34e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d350:	f000 f99c 	bl	800d68c <_svfiprintf_r>
 800d354:	9b02      	ldr	r3, [sp, #8]
 800d356:	701c      	strb	r4, [r3, #0]
 800d358:	b01d      	add	sp, #116	@ 0x74
 800d35a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d35e:	b003      	add	sp, #12
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	20000010 	.word	0x20000010
 800d368:	ffff0208 	.word	0xffff0208

0800d36c <memset>:
 800d36c:	4402      	add	r2, r0
 800d36e:	4603      	mov	r3, r0
 800d370:	4293      	cmp	r3, r2
 800d372:	d100      	bne.n	800d376 <memset+0xa>
 800d374:	4770      	bx	lr
 800d376:	f803 1b01 	strb.w	r1, [r3], #1
 800d37a:	e7f9      	b.n	800d370 <memset+0x4>

0800d37c <__errno>:
 800d37c:	4b01      	ldr	r3, [pc, #4]	@ (800d384 <__errno+0x8>)
 800d37e:	6818      	ldr	r0, [r3, #0]
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	20000010 	.word	0x20000010

0800d388 <__libc_init_array>:
 800d388:	b570      	push	{r4, r5, r6, lr}
 800d38a:	4d0d      	ldr	r5, [pc, #52]	@ (800d3c0 <__libc_init_array+0x38>)
 800d38c:	4c0d      	ldr	r4, [pc, #52]	@ (800d3c4 <__libc_init_array+0x3c>)
 800d38e:	1b64      	subs	r4, r4, r5
 800d390:	10a4      	asrs	r4, r4, #2
 800d392:	2600      	movs	r6, #0
 800d394:	42a6      	cmp	r6, r4
 800d396:	d109      	bne.n	800d3ac <__libc_init_array+0x24>
 800d398:	4d0b      	ldr	r5, [pc, #44]	@ (800d3c8 <__libc_init_array+0x40>)
 800d39a:	4c0c      	ldr	r4, [pc, #48]	@ (800d3cc <__libc_init_array+0x44>)
 800d39c:	f000 fc6c 	bl	800dc78 <_init>
 800d3a0:	1b64      	subs	r4, r4, r5
 800d3a2:	10a4      	asrs	r4, r4, #2
 800d3a4:	2600      	movs	r6, #0
 800d3a6:	42a6      	cmp	r6, r4
 800d3a8:	d105      	bne.n	800d3b6 <__libc_init_array+0x2e>
 800d3aa:	bd70      	pop	{r4, r5, r6, pc}
 800d3ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3b0:	4798      	blx	r3
 800d3b2:	3601      	adds	r6, #1
 800d3b4:	e7ee      	b.n	800d394 <__libc_init_array+0xc>
 800d3b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3ba:	4798      	blx	r3
 800d3bc:	3601      	adds	r6, #1
 800d3be:	e7f2      	b.n	800d3a6 <__libc_init_array+0x1e>
 800d3c0:	0800e130 	.word	0x0800e130
 800d3c4:	0800e130 	.word	0x0800e130
 800d3c8:	0800e130 	.word	0x0800e130
 800d3cc:	0800e134 	.word	0x0800e134

0800d3d0 <__retarget_lock_acquire_recursive>:
 800d3d0:	4770      	bx	lr

0800d3d2 <__retarget_lock_release_recursive>:
 800d3d2:	4770      	bx	lr

0800d3d4 <strcpy>:
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d3da:	f803 2b01 	strb.w	r2, [r3], #1
 800d3de:	2a00      	cmp	r2, #0
 800d3e0:	d1f9      	bne.n	800d3d6 <strcpy+0x2>
 800d3e2:	4770      	bx	lr

0800d3e4 <_free_r>:
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	4605      	mov	r5, r0
 800d3e8:	2900      	cmp	r1, #0
 800d3ea:	d041      	beq.n	800d470 <_free_r+0x8c>
 800d3ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3f0:	1f0c      	subs	r4, r1, #4
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	bfb8      	it	lt
 800d3f6:	18e4      	addlt	r4, r4, r3
 800d3f8:	f000 f8e0 	bl	800d5bc <__malloc_lock>
 800d3fc:	4a1d      	ldr	r2, [pc, #116]	@ (800d474 <_free_r+0x90>)
 800d3fe:	6813      	ldr	r3, [r2, #0]
 800d400:	b933      	cbnz	r3, 800d410 <_free_r+0x2c>
 800d402:	6063      	str	r3, [r4, #4]
 800d404:	6014      	str	r4, [r2, #0]
 800d406:	4628      	mov	r0, r5
 800d408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d40c:	f000 b8dc 	b.w	800d5c8 <__malloc_unlock>
 800d410:	42a3      	cmp	r3, r4
 800d412:	d908      	bls.n	800d426 <_free_r+0x42>
 800d414:	6820      	ldr	r0, [r4, #0]
 800d416:	1821      	adds	r1, r4, r0
 800d418:	428b      	cmp	r3, r1
 800d41a:	bf01      	itttt	eq
 800d41c:	6819      	ldreq	r1, [r3, #0]
 800d41e:	685b      	ldreq	r3, [r3, #4]
 800d420:	1809      	addeq	r1, r1, r0
 800d422:	6021      	streq	r1, [r4, #0]
 800d424:	e7ed      	b.n	800d402 <_free_r+0x1e>
 800d426:	461a      	mov	r2, r3
 800d428:	685b      	ldr	r3, [r3, #4]
 800d42a:	b10b      	cbz	r3, 800d430 <_free_r+0x4c>
 800d42c:	42a3      	cmp	r3, r4
 800d42e:	d9fa      	bls.n	800d426 <_free_r+0x42>
 800d430:	6811      	ldr	r1, [r2, #0]
 800d432:	1850      	adds	r0, r2, r1
 800d434:	42a0      	cmp	r0, r4
 800d436:	d10b      	bne.n	800d450 <_free_r+0x6c>
 800d438:	6820      	ldr	r0, [r4, #0]
 800d43a:	4401      	add	r1, r0
 800d43c:	1850      	adds	r0, r2, r1
 800d43e:	4283      	cmp	r3, r0
 800d440:	6011      	str	r1, [r2, #0]
 800d442:	d1e0      	bne.n	800d406 <_free_r+0x22>
 800d444:	6818      	ldr	r0, [r3, #0]
 800d446:	685b      	ldr	r3, [r3, #4]
 800d448:	6053      	str	r3, [r2, #4]
 800d44a:	4408      	add	r0, r1
 800d44c:	6010      	str	r0, [r2, #0]
 800d44e:	e7da      	b.n	800d406 <_free_r+0x22>
 800d450:	d902      	bls.n	800d458 <_free_r+0x74>
 800d452:	230c      	movs	r3, #12
 800d454:	602b      	str	r3, [r5, #0]
 800d456:	e7d6      	b.n	800d406 <_free_r+0x22>
 800d458:	6820      	ldr	r0, [r4, #0]
 800d45a:	1821      	adds	r1, r4, r0
 800d45c:	428b      	cmp	r3, r1
 800d45e:	bf04      	itt	eq
 800d460:	6819      	ldreq	r1, [r3, #0]
 800d462:	685b      	ldreq	r3, [r3, #4]
 800d464:	6063      	str	r3, [r4, #4]
 800d466:	bf04      	itt	eq
 800d468:	1809      	addeq	r1, r1, r0
 800d46a:	6021      	streq	r1, [r4, #0]
 800d46c:	6054      	str	r4, [r2, #4]
 800d46e:	e7ca      	b.n	800d406 <_free_r+0x22>
 800d470:	bd38      	pop	{r3, r4, r5, pc}
 800d472:	bf00      	nop
 800d474:	20000474 	.word	0x20000474

0800d478 <sbrk_aligned>:
 800d478:	b570      	push	{r4, r5, r6, lr}
 800d47a:	4e0f      	ldr	r6, [pc, #60]	@ (800d4b8 <sbrk_aligned+0x40>)
 800d47c:	460c      	mov	r4, r1
 800d47e:	6831      	ldr	r1, [r6, #0]
 800d480:	4605      	mov	r5, r0
 800d482:	b911      	cbnz	r1, 800d48a <sbrk_aligned+0x12>
 800d484:	f000 fba4 	bl	800dbd0 <_sbrk_r>
 800d488:	6030      	str	r0, [r6, #0]
 800d48a:	4621      	mov	r1, r4
 800d48c:	4628      	mov	r0, r5
 800d48e:	f000 fb9f 	bl	800dbd0 <_sbrk_r>
 800d492:	1c43      	adds	r3, r0, #1
 800d494:	d103      	bne.n	800d49e <sbrk_aligned+0x26>
 800d496:	f04f 34ff 	mov.w	r4, #4294967295
 800d49a:	4620      	mov	r0, r4
 800d49c:	bd70      	pop	{r4, r5, r6, pc}
 800d49e:	1cc4      	adds	r4, r0, #3
 800d4a0:	f024 0403 	bic.w	r4, r4, #3
 800d4a4:	42a0      	cmp	r0, r4
 800d4a6:	d0f8      	beq.n	800d49a <sbrk_aligned+0x22>
 800d4a8:	1a21      	subs	r1, r4, r0
 800d4aa:	4628      	mov	r0, r5
 800d4ac:	f000 fb90 	bl	800dbd0 <_sbrk_r>
 800d4b0:	3001      	adds	r0, #1
 800d4b2:	d1f2      	bne.n	800d49a <sbrk_aligned+0x22>
 800d4b4:	e7ef      	b.n	800d496 <sbrk_aligned+0x1e>
 800d4b6:	bf00      	nop
 800d4b8:	20000470 	.word	0x20000470

0800d4bc <_malloc_r>:
 800d4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4c0:	1ccd      	adds	r5, r1, #3
 800d4c2:	f025 0503 	bic.w	r5, r5, #3
 800d4c6:	3508      	adds	r5, #8
 800d4c8:	2d0c      	cmp	r5, #12
 800d4ca:	bf38      	it	cc
 800d4cc:	250c      	movcc	r5, #12
 800d4ce:	2d00      	cmp	r5, #0
 800d4d0:	4606      	mov	r6, r0
 800d4d2:	db01      	blt.n	800d4d8 <_malloc_r+0x1c>
 800d4d4:	42a9      	cmp	r1, r5
 800d4d6:	d904      	bls.n	800d4e2 <_malloc_r+0x26>
 800d4d8:	230c      	movs	r3, #12
 800d4da:	6033      	str	r3, [r6, #0]
 800d4dc:	2000      	movs	r0, #0
 800d4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d5b8 <_malloc_r+0xfc>
 800d4e6:	f000 f869 	bl	800d5bc <__malloc_lock>
 800d4ea:	f8d8 3000 	ldr.w	r3, [r8]
 800d4ee:	461c      	mov	r4, r3
 800d4f0:	bb44      	cbnz	r4, 800d544 <_malloc_r+0x88>
 800d4f2:	4629      	mov	r1, r5
 800d4f4:	4630      	mov	r0, r6
 800d4f6:	f7ff ffbf 	bl	800d478 <sbrk_aligned>
 800d4fa:	1c43      	adds	r3, r0, #1
 800d4fc:	4604      	mov	r4, r0
 800d4fe:	d158      	bne.n	800d5b2 <_malloc_r+0xf6>
 800d500:	f8d8 4000 	ldr.w	r4, [r8]
 800d504:	4627      	mov	r7, r4
 800d506:	2f00      	cmp	r7, #0
 800d508:	d143      	bne.n	800d592 <_malloc_r+0xd6>
 800d50a:	2c00      	cmp	r4, #0
 800d50c:	d04b      	beq.n	800d5a6 <_malloc_r+0xea>
 800d50e:	6823      	ldr	r3, [r4, #0]
 800d510:	4639      	mov	r1, r7
 800d512:	4630      	mov	r0, r6
 800d514:	eb04 0903 	add.w	r9, r4, r3
 800d518:	f000 fb5a 	bl	800dbd0 <_sbrk_r>
 800d51c:	4581      	cmp	r9, r0
 800d51e:	d142      	bne.n	800d5a6 <_malloc_r+0xea>
 800d520:	6821      	ldr	r1, [r4, #0]
 800d522:	1a6d      	subs	r5, r5, r1
 800d524:	4629      	mov	r1, r5
 800d526:	4630      	mov	r0, r6
 800d528:	f7ff ffa6 	bl	800d478 <sbrk_aligned>
 800d52c:	3001      	adds	r0, #1
 800d52e:	d03a      	beq.n	800d5a6 <_malloc_r+0xea>
 800d530:	6823      	ldr	r3, [r4, #0]
 800d532:	442b      	add	r3, r5
 800d534:	6023      	str	r3, [r4, #0]
 800d536:	f8d8 3000 	ldr.w	r3, [r8]
 800d53a:	685a      	ldr	r2, [r3, #4]
 800d53c:	bb62      	cbnz	r2, 800d598 <_malloc_r+0xdc>
 800d53e:	f8c8 7000 	str.w	r7, [r8]
 800d542:	e00f      	b.n	800d564 <_malloc_r+0xa8>
 800d544:	6822      	ldr	r2, [r4, #0]
 800d546:	1b52      	subs	r2, r2, r5
 800d548:	d420      	bmi.n	800d58c <_malloc_r+0xd0>
 800d54a:	2a0b      	cmp	r2, #11
 800d54c:	d917      	bls.n	800d57e <_malloc_r+0xc2>
 800d54e:	1961      	adds	r1, r4, r5
 800d550:	42a3      	cmp	r3, r4
 800d552:	6025      	str	r5, [r4, #0]
 800d554:	bf18      	it	ne
 800d556:	6059      	strne	r1, [r3, #4]
 800d558:	6863      	ldr	r3, [r4, #4]
 800d55a:	bf08      	it	eq
 800d55c:	f8c8 1000 	streq.w	r1, [r8]
 800d560:	5162      	str	r2, [r4, r5]
 800d562:	604b      	str	r3, [r1, #4]
 800d564:	4630      	mov	r0, r6
 800d566:	f000 f82f 	bl	800d5c8 <__malloc_unlock>
 800d56a:	f104 000b 	add.w	r0, r4, #11
 800d56e:	1d23      	adds	r3, r4, #4
 800d570:	f020 0007 	bic.w	r0, r0, #7
 800d574:	1ac2      	subs	r2, r0, r3
 800d576:	bf1c      	itt	ne
 800d578:	1a1b      	subne	r3, r3, r0
 800d57a:	50a3      	strne	r3, [r4, r2]
 800d57c:	e7af      	b.n	800d4de <_malloc_r+0x22>
 800d57e:	6862      	ldr	r2, [r4, #4]
 800d580:	42a3      	cmp	r3, r4
 800d582:	bf0c      	ite	eq
 800d584:	f8c8 2000 	streq.w	r2, [r8]
 800d588:	605a      	strne	r2, [r3, #4]
 800d58a:	e7eb      	b.n	800d564 <_malloc_r+0xa8>
 800d58c:	4623      	mov	r3, r4
 800d58e:	6864      	ldr	r4, [r4, #4]
 800d590:	e7ae      	b.n	800d4f0 <_malloc_r+0x34>
 800d592:	463c      	mov	r4, r7
 800d594:	687f      	ldr	r7, [r7, #4]
 800d596:	e7b6      	b.n	800d506 <_malloc_r+0x4a>
 800d598:	461a      	mov	r2, r3
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	42a3      	cmp	r3, r4
 800d59e:	d1fb      	bne.n	800d598 <_malloc_r+0xdc>
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	6053      	str	r3, [r2, #4]
 800d5a4:	e7de      	b.n	800d564 <_malloc_r+0xa8>
 800d5a6:	230c      	movs	r3, #12
 800d5a8:	6033      	str	r3, [r6, #0]
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	f000 f80c 	bl	800d5c8 <__malloc_unlock>
 800d5b0:	e794      	b.n	800d4dc <_malloc_r+0x20>
 800d5b2:	6005      	str	r5, [r0, #0]
 800d5b4:	e7d6      	b.n	800d564 <_malloc_r+0xa8>
 800d5b6:	bf00      	nop
 800d5b8:	20000474 	.word	0x20000474

0800d5bc <__malloc_lock>:
 800d5bc:	4801      	ldr	r0, [pc, #4]	@ (800d5c4 <__malloc_lock+0x8>)
 800d5be:	f7ff bf07 	b.w	800d3d0 <__retarget_lock_acquire_recursive>
 800d5c2:	bf00      	nop
 800d5c4:	2000046c 	.word	0x2000046c

0800d5c8 <__malloc_unlock>:
 800d5c8:	4801      	ldr	r0, [pc, #4]	@ (800d5d0 <__malloc_unlock+0x8>)
 800d5ca:	f7ff bf02 	b.w	800d3d2 <__retarget_lock_release_recursive>
 800d5ce:	bf00      	nop
 800d5d0:	2000046c 	.word	0x2000046c

0800d5d4 <__ssputs_r>:
 800d5d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d8:	688e      	ldr	r6, [r1, #8]
 800d5da:	461f      	mov	r7, r3
 800d5dc:	42be      	cmp	r6, r7
 800d5de:	680b      	ldr	r3, [r1, #0]
 800d5e0:	4682      	mov	sl, r0
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	4690      	mov	r8, r2
 800d5e6:	d82d      	bhi.n	800d644 <__ssputs_r+0x70>
 800d5e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d5f0:	d026      	beq.n	800d640 <__ssputs_r+0x6c>
 800d5f2:	6965      	ldr	r5, [r4, #20]
 800d5f4:	6909      	ldr	r1, [r1, #16]
 800d5f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5fa:	eba3 0901 	sub.w	r9, r3, r1
 800d5fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d602:	1c7b      	adds	r3, r7, #1
 800d604:	444b      	add	r3, r9
 800d606:	106d      	asrs	r5, r5, #1
 800d608:	429d      	cmp	r5, r3
 800d60a:	bf38      	it	cc
 800d60c:	461d      	movcc	r5, r3
 800d60e:	0553      	lsls	r3, r2, #21
 800d610:	d527      	bpl.n	800d662 <__ssputs_r+0x8e>
 800d612:	4629      	mov	r1, r5
 800d614:	f7ff ff52 	bl	800d4bc <_malloc_r>
 800d618:	4606      	mov	r6, r0
 800d61a:	b360      	cbz	r0, 800d676 <__ssputs_r+0xa2>
 800d61c:	6921      	ldr	r1, [r4, #16]
 800d61e:	464a      	mov	r2, r9
 800d620:	f000 fae6 	bl	800dbf0 <memcpy>
 800d624:	89a3      	ldrh	r3, [r4, #12]
 800d626:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d62a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d62e:	81a3      	strh	r3, [r4, #12]
 800d630:	6126      	str	r6, [r4, #16]
 800d632:	6165      	str	r5, [r4, #20]
 800d634:	444e      	add	r6, r9
 800d636:	eba5 0509 	sub.w	r5, r5, r9
 800d63a:	6026      	str	r6, [r4, #0]
 800d63c:	60a5      	str	r5, [r4, #8]
 800d63e:	463e      	mov	r6, r7
 800d640:	42be      	cmp	r6, r7
 800d642:	d900      	bls.n	800d646 <__ssputs_r+0x72>
 800d644:	463e      	mov	r6, r7
 800d646:	6820      	ldr	r0, [r4, #0]
 800d648:	4632      	mov	r2, r6
 800d64a:	4641      	mov	r1, r8
 800d64c:	f000 faa6 	bl	800db9c <memmove>
 800d650:	68a3      	ldr	r3, [r4, #8]
 800d652:	1b9b      	subs	r3, r3, r6
 800d654:	60a3      	str	r3, [r4, #8]
 800d656:	6823      	ldr	r3, [r4, #0]
 800d658:	4433      	add	r3, r6
 800d65a:	6023      	str	r3, [r4, #0]
 800d65c:	2000      	movs	r0, #0
 800d65e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d662:	462a      	mov	r2, r5
 800d664:	f000 fad2 	bl	800dc0c <_realloc_r>
 800d668:	4606      	mov	r6, r0
 800d66a:	2800      	cmp	r0, #0
 800d66c:	d1e0      	bne.n	800d630 <__ssputs_r+0x5c>
 800d66e:	6921      	ldr	r1, [r4, #16]
 800d670:	4650      	mov	r0, sl
 800d672:	f7ff feb7 	bl	800d3e4 <_free_r>
 800d676:	230c      	movs	r3, #12
 800d678:	f8ca 3000 	str.w	r3, [sl]
 800d67c:	89a3      	ldrh	r3, [r4, #12]
 800d67e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d682:	81a3      	strh	r3, [r4, #12]
 800d684:	f04f 30ff 	mov.w	r0, #4294967295
 800d688:	e7e9      	b.n	800d65e <__ssputs_r+0x8a>
	...

0800d68c <_svfiprintf_r>:
 800d68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d690:	4698      	mov	r8, r3
 800d692:	898b      	ldrh	r3, [r1, #12]
 800d694:	061b      	lsls	r3, r3, #24
 800d696:	b09d      	sub	sp, #116	@ 0x74
 800d698:	4607      	mov	r7, r0
 800d69a:	460d      	mov	r5, r1
 800d69c:	4614      	mov	r4, r2
 800d69e:	d510      	bpl.n	800d6c2 <_svfiprintf_r+0x36>
 800d6a0:	690b      	ldr	r3, [r1, #16]
 800d6a2:	b973      	cbnz	r3, 800d6c2 <_svfiprintf_r+0x36>
 800d6a4:	2140      	movs	r1, #64	@ 0x40
 800d6a6:	f7ff ff09 	bl	800d4bc <_malloc_r>
 800d6aa:	6028      	str	r0, [r5, #0]
 800d6ac:	6128      	str	r0, [r5, #16]
 800d6ae:	b930      	cbnz	r0, 800d6be <_svfiprintf_r+0x32>
 800d6b0:	230c      	movs	r3, #12
 800d6b2:	603b      	str	r3, [r7, #0]
 800d6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b8:	b01d      	add	sp, #116	@ 0x74
 800d6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6be:	2340      	movs	r3, #64	@ 0x40
 800d6c0:	616b      	str	r3, [r5, #20]
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6c6:	2320      	movs	r3, #32
 800d6c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6d0:	2330      	movs	r3, #48	@ 0x30
 800d6d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d870 <_svfiprintf_r+0x1e4>
 800d6d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d6da:	f04f 0901 	mov.w	r9, #1
 800d6de:	4623      	mov	r3, r4
 800d6e0:	469a      	mov	sl, r3
 800d6e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6e6:	b10a      	cbz	r2, 800d6ec <_svfiprintf_r+0x60>
 800d6e8:	2a25      	cmp	r2, #37	@ 0x25
 800d6ea:	d1f9      	bne.n	800d6e0 <_svfiprintf_r+0x54>
 800d6ec:	ebba 0b04 	subs.w	fp, sl, r4
 800d6f0:	d00b      	beq.n	800d70a <_svfiprintf_r+0x7e>
 800d6f2:	465b      	mov	r3, fp
 800d6f4:	4622      	mov	r2, r4
 800d6f6:	4629      	mov	r1, r5
 800d6f8:	4638      	mov	r0, r7
 800d6fa:	f7ff ff6b 	bl	800d5d4 <__ssputs_r>
 800d6fe:	3001      	adds	r0, #1
 800d700:	f000 80a7 	beq.w	800d852 <_svfiprintf_r+0x1c6>
 800d704:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d706:	445a      	add	r2, fp
 800d708:	9209      	str	r2, [sp, #36]	@ 0x24
 800d70a:	f89a 3000 	ldrb.w	r3, [sl]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f000 809f 	beq.w	800d852 <_svfiprintf_r+0x1c6>
 800d714:	2300      	movs	r3, #0
 800d716:	f04f 32ff 	mov.w	r2, #4294967295
 800d71a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d71e:	f10a 0a01 	add.w	sl, sl, #1
 800d722:	9304      	str	r3, [sp, #16]
 800d724:	9307      	str	r3, [sp, #28]
 800d726:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d72a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d72c:	4654      	mov	r4, sl
 800d72e:	2205      	movs	r2, #5
 800d730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d734:	484e      	ldr	r0, [pc, #312]	@ (800d870 <_svfiprintf_r+0x1e4>)
 800d736:	f7f2 fd63 	bl	8000200 <memchr>
 800d73a:	9a04      	ldr	r2, [sp, #16]
 800d73c:	b9d8      	cbnz	r0, 800d776 <_svfiprintf_r+0xea>
 800d73e:	06d0      	lsls	r0, r2, #27
 800d740:	bf44      	itt	mi
 800d742:	2320      	movmi	r3, #32
 800d744:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d748:	0711      	lsls	r1, r2, #28
 800d74a:	bf44      	itt	mi
 800d74c:	232b      	movmi	r3, #43	@ 0x2b
 800d74e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d752:	f89a 3000 	ldrb.w	r3, [sl]
 800d756:	2b2a      	cmp	r3, #42	@ 0x2a
 800d758:	d015      	beq.n	800d786 <_svfiprintf_r+0xfa>
 800d75a:	9a07      	ldr	r2, [sp, #28]
 800d75c:	4654      	mov	r4, sl
 800d75e:	2000      	movs	r0, #0
 800d760:	f04f 0c0a 	mov.w	ip, #10
 800d764:	4621      	mov	r1, r4
 800d766:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d76a:	3b30      	subs	r3, #48	@ 0x30
 800d76c:	2b09      	cmp	r3, #9
 800d76e:	d94b      	bls.n	800d808 <_svfiprintf_r+0x17c>
 800d770:	b1b0      	cbz	r0, 800d7a0 <_svfiprintf_r+0x114>
 800d772:	9207      	str	r2, [sp, #28]
 800d774:	e014      	b.n	800d7a0 <_svfiprintf_r+0x114>
 800d776:	eba0 0308 	sub.w	r3, r0, r8
 800d77a:	fa09 f303 	lsl.w	r3, r9, r3
 800d77e:	4313      	orrs	r3, r2
 800d780:	9304      	str	r3, [sp, #16]
 800d782:	46a2      	mov	sl, r4
 800d784:	e7d2      	b.n	800d72c <_svfiprintf_r+0xa0>
 800d786:	9b03      	ldr	r3, [sp, #12]
 800d788:	1d19      	adds	r1, r3, #4
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	9103      	str	r1, [sp, #12]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	bfbb      	ittet	lt
 800d792:	425b      	neglt	r3, r3
 800d794:	f042 0202 	orrlt.w	r2, r2, #2
 800d798:	9307      	strge	r3, [sp, #28]
 800d79a:	9307      	strlt	r3, [sp, #28]
 800d79c:	bfb8      	it	lt
 800d79e:	9204      	strlt	r2, [sp, #16]
 800d7a0:	7823      	ldrb	r3, [r4, #0]
 800d7a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7a4:	d10a      	bne.n	800d7bc <_svfiprintf_r+0x130>
 800d7a6:	7863      	ldrb	r3, [r4, #1]
 800d7a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7aa:	d132      	bne.n	800d812 <_svfiprintf_r+0x186>
 800d7ac:	9b03      	ldr	r3, [sp, #12]
 800d7ae:	1d1a      	adds	r2, r3, #4
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	9203      	str	r2, [sp, #12]
 800d7b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7b8:	3402      	adds	r4, #2
 800d7ba:	9305      	str	r3, [sp, #20]
 800d7bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d880 <_svfiprintf_r+0x1f4>
 800d7c0:	7821      	ldrb	r1, [r4, #0]
 800d7c2:	2203      	movs	r2, #3
 800d7c4:	4650      	mov	r0, sl
 800d7c6:	f7f2 fd1b 	bl	8000200 <memchr>
 800d7ca:	b138      	cbz	r0, 800d7dc <_svfiprintf_r+0x150>
 800d7cc:	9b04      	ldr	r3, [sp, #16]
 800d7ce:	eba0 000a 	sub.w	r0, r0, sl
 800d7d2:	2240      	movs	r2, #64	@ 0x40
 800d7d4:	4082      	lsls	r2, r0
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	3401      	adds	r4, #1
 800d7da:	9304      	str	r3, [sp, #16]
 800d7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7e0:	4824      	ldr	r0, [pc, #144]	@ (800d874 <_svfiprintf_r+0x1e8>)
 800d7e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d7e6:	2206      	movs	r2, #6
 800d7e8:	f7f2 fd0a 	bl	8000200 <memchr>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	d036      	beq.n	800d85e <_svfiprintf_r+0x1d2>
 800d7f0:	4b21      	ldr	r3, [pc, #132]	@ (800d878 <_svfiprintf_r+0x1ec>)
 800d7f2:	bb1b      	cbnz	r3, 800d83c <_svfiprintf_r+0x1b0>
 800d7f4:	9b03      	ldr	r3, [sp, #12]
 800d7f6:	3307      	adds	r3, #7
 800d7f8:	f023 0307 	bic.w	r3, r3, #7
 800d7fc:	3308      	adds	r3, #8
 800d7fe:	9303      	str	r3, [sp, #12]
 800d800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d802:	4433      	add	r3, r6
 800d804:	9309      	str	r3, [sp, #36]	@ 0x24
 800d806:	e76a      	b.n	800d6de <_svfiprintf_r+0x52>
 800d808:	fb0c 3202 	mla	r2, ip, r2, r3
 800d80c:	460c      	mov	r4, r1
 800d80e:	2001      	movs	r0, #1
 800d810:	e7a8      	b.n	800d764 <_svfiprintf_r+0xd8>
 800d812:	2300      	movs	r3, #0
 800d814:	3401      	adds	r4, #1
 800d816:	9305      	str	r3, [sp, #20]
 800d818:	4619      	mov	r1, r3
 800d81a:	f04f 0c0a 	mov.w	ip, #10
 800d81e:	4620      	mov	r0, r4
 800d820:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d824:	3a30      	subs	r2, #48	@ 0x30
 800d826:	2a09      	cmp	r2, #9
 800d828:	d903      	bls.n	800d832 <_svfiprintf_r+0x1a6>
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d0c6      	beq.n	800d7bc <_svfiprintf_r+0x130>
 800d82e:	9105      	str	r1, [sp, #20]
 800d830:	e7c4      	b.n	800d7bc <_svfiprintf_r+0x130>
 800d832:	fb0c 2101 	mla	r1, ip, r1, r2
 800d836:	4604      	mov	r4, r0
 800d838:	2301      	movs	r3, #1
 800d83a:	e7f0      	b.n	800d81e <_svfiprintf_r+0x192>
 800d83c:	ab03      	add	r3, sp, #12
 800d83e:	9300      	str	r3, [sp, #0]
 800d840:	462a      	mov	r2, r5
 800d842:	4b0e      	ldr	r3, [pc, #56]	@ (800d87c <_svfiprintf_r+0x1f0>)
 800d844:	a904      	add	r1, sp, #16
 800d846:	4638      	mov	r0, r7
 800d848:	f3af 8000 	nop.w
 800d84c:	1c42      	adds	r2, r0, #1
 800d84e:	4606      	mov	r6, r0
 800d850:	d1d6      	bne.n	800d800 <_svfiprintf_r+0x174>
 800d852:	89ab      	ldrh	r3, [r5, #12]
 800d854:	065b      	lsls	r3, r3, #25
 800d856:	f53f af2d 	bmi.w	800d6b4 <_svfiprintf_r+0x28>
 800d85a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d85c:	e72c      	b.n	800d6b8 <_svfiprintf_r+0x2c>
 800d85e:	ab03      	add	r3, sp, #12
 800d860:	9300      	str	r3, [sp, #0]
 800d862:	462a      	mov	r2, r5
 800d864:	4b05      	ldr	r3, [pc, #20]	@ (800d87c <_svfiprintf_r+0x1f0>)
 800d866:	a904      	add	r1, sp, #16
 800d868:	4638      	mov	r0, r7
 800d86a:	f000 f879 	bl	800d960 <_printf_i>
 800d86e:	e7ed      	b.n	800d84c <_svfiprintf_r+0x1c0>
 800d870:	0800e0f4 	.word	0x0800e0f4
 800d874:	0800e0fe 	.word	0x0800e0fe
 800d878:	00000000 	.word	0x00000000
 800d87c:	0800d5d5 	.word	0x0800d5d5
 800d880:	0800e0fa 	.word	0x0800e0fa

0800d884 <_printf_common>:
 800d884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d888:	4616      	mov	r6, r2
 800d88a:	4698      	mov	r8, r3
 800d88c:	688a      	ldr	r2, [r1, #8]
 800d88e:	690b      	ldr	r3, [r1, #16]
 800d890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d894:	4293      	cmp	r3, r2
 800d896:	bfb8      	it	lt
 800d898:	4613      	movlt	r3, r2
 800d89a:	6033      	str	r3, [r6, #0]
 800d89c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d8a0:	4607      	mov	r7, r0
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	b10a      	cbz	r2, 800d8aa <_printf_common+0x26>
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	6033      	str	r3, [r6, #0]
 800d8aa:	6823      	ldr	r3, [r4, #0]
 800d8ac:	0699      	lsls	r1, r3, #26
 800d8ae:	bf42      	ittt	mi
 800d8b0:	6833      	ldrmi	r3, [r6, #0]
 800d8b2:	3302      	addmi	r3, #2
 800d8b4:	6033      	strmi	r3, [r6, #0]
 800d8b6:	6825      	ldr	r5, [r4, #0]
 800d8b8:	f015 0506 	ands.w	r5, r5, #6
 800d8bc:	d106      	bne.n	800d8cc <_printf_common+0x48>
 800d8be:	f104 0a19 	add.w	sl, r4, #25
 800d8c2:	68e3      	ldr	r3, [r4, #12]
 800d8c4:	6832      	ldr	r2, [r6, #0]
 800d8c6:	1a9b      	subs	r3, r3, r2
 800d8c8:	42ab      	cmp	r3, r5
 800d8ca:	dc26      	bgt.n	800d91a <_printf_common+0x96>
 800d8cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d8d0:	6822      	ldr	r2, [r4, #0]
 800d8d2:	3b00      	subs	r3, #0
 800d8d4:	bf18      	it	ne
 800d8d6:	2301      	movne	r3, #1
 800d8d8:	0692      	lsls	r2, r2, #26
 800d8da:	d42b      	bmi.n	800d934 <_printf_common+0xb0>
 800d8dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d8e0:	4641      	mov	r1, r8
 800d8e2:	4638      	mov	r0, r7
 800d8e4:	47c8      	blx	r9
 800d8e6:	3001      	adds	r0, #1
 800d8e8:	d01e      	beq.n	800d928 <_printf_common+0xa4>
 800d8ea:	6823      	ldr	r3, [r4, #0]
 800d8ec:	6922      	ldr	r2, [r4, #16]
 800d8ee:	f003 0306 	and.w	r3, r3, #6
 800d8f2:	2b04      	cmp	r3, #4
 800d8f4:	bf02      	ittt	eq
 800d8f6:	68e5      	ldreq	r5, [r4, #12]
 800d8f8:	6833      	ldreq	r3, [r6, #0]
 800d8fa:	1aed      	subeq	r5, r5, r3
 800d8fc:	68a3      	ldr	r3, [r4, #8]
 800d8fe:	bf0c      	ite	eq
 800d900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d904:	2500      	movne	r5, #0
 800d906:	4293      	cmp	r3, r2
 800d908:	bfc4      	itt	gt
 800d90a:	1a9b      	subgt	r3, r3, r2
 800d90c:	18ed      	addgt	r5, r5, r3
 800d90e:	2600      	movs	r6, #0
 800d910:	341a      	adds	r4, #26
 800d912:	42b5      	cmp	r5, r6
 800d914:	d11a      	bne.n	800d94c <_printf_common+0xc8>
 800d916:	2000      	movs	r0, #0
 800d918:	e008      	b.n	800d92c <_printf_common+0xa8>
 800d91a:	2301      	movs	r3, #1
 800d91c:	4652      	mov	r2, sl
 800d91e:	4641      	mov	r1, r8
 800d920:	4638      	mov	r0, r7
 800d922:	47c8      	blx	r9
 800d924:	3001      	adds	r0, #1
 800d926:	d103      	bne.n	800d930 <_printf_common+0xac>
 800d928:	f04f 30ff 	mov.w	r0, #4294967295
 800d92c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d930:	3501      	adds	r5, #1
 800d932:	e7c6      	b.n	800d8c2 <_printf_common+0x3e>
 800d934:	18e1      	adds	r1, r4, r3
 800d936:	1c5a      	adds	r2, r3, #1
 800d938:	2030      	movs	r0, #48	@ 0x30
 800d93a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d93e:	4422      	add	r2, r4
 800d940:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d944:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d948:	3302      	adds	r3, #2
 800d94a:	e7c7      	b.n	800d8dc <_printf_common+0x58>
 800d94c:	2301      	movs	r3, #1
 800d94e:	4622      	mov	r2, r4
 800d950:	4641      	mov	r1, r8
 800d952:	4638      	mov	r0, r7
 800d954:	47c8      	blx	r9
 800d956:	3001      	adds	r0, #1
 800d958:	d0e6      	beq.n	800d928 <_printf_common+0xa4>
 800d95a:	3601      	adds	r6, #1
 800d95c:	e7d9      	b.n	800d912 <_printf_common+0x8e>
	...

0800d960 <_printf_i>:
 800d960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d964:	7e0f      	ldrb	r7, [r1, #24]
 800d966:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d968:	2f78      	cmp	r7, #120	@ 0x78
 800d96a:	4691      	mov	r9, r2
 800d96c:	4680      	mov	r8, r0
 800d96e:	460c      	mov	r4, r1
 800d970:	469a      	mov	sl, r3
 800d972:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d976:	d807      	bhi.n	800d988 <_printf_i+0x28>
 800d978:	2f62      	cmp	r7, #98	@ 0x62
 800d97a:	d80a      	bhi.n	800d992 <_printf_i+0x32>
 800d97c:	2f00      	cmp	r7, #0
 800d97e:	f000 80d1 	beq.w	800db24 <_printf_i+0x1c4>
 800d982:	2f58      	cmp	r7, #88	@ 0x58
 800d984:	f000 80b8 	beq.w	800daf8 <_printf_i+0x198>
 800d988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d98c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d990:	e03a      	b.n	800da08 <_printf_i+0xa8>
 800d992:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d996:	2b15      	cmp	r3, #21
 800d998:	d8f6      	bhi.n	800d988 <_printf_i+0x28>
 800d99a:	a101      	add	r1, pc, #4	@ (adr r1, 800d9a0 <_printf_i+0x40>)
 800d99c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9a0:	0800d9f9 	.word	0x0800d9f9
 800d9a4:	0800da0d 	.word	0x0800da0d
 800d9a8:	0800d989 	.word	0x0800d989
 800d9ac:	0800d989 	.word	0x0800d989
 800d9b0:	0800d989 	.word	0x0800d989
 800d9b4:	0800d989 	.word	0x0800d989
 800d9b8:	0800da0d 	.word	0x0800da0d
 800d9bc:	0800d989 	.word	0x0800d989
 800d9c0:	0800d989 	.word	0x0800d989
 800d9c4:	0800d989 	.word	0x0800d989
 800d9c8:	0800d989 	.word	0x0800d989
 800d9cc:	0800db0b 	.word	0x0800db0b
 800d9d0:	0800da37 	.word	0x0800da37
 800d9d4:	0800dac5 	.word	0x0800dac5
 800d9d8:	0800d989 	.word	0x0800d989
 800d9dc:	0800d989 	.word	0x0800d989
 800d9e0:	0800db2d 	.word	0x0800db2d
 800d9e4:	0800d989 	.word	0x0800d989
 800d9e8:	0800da37 	.word	0x0800da37
 800d9ec:	0800d989 	.word	0x0800d989
 800d9f0:	0800d989 	.word	0x0800d989
 800d9f4:	0800dacd 	.word	0x0800dacd
 800d9f8:	6833      	ldr	r3, [r6, #0]
 800d9fa:	1d1a      	adds	r2, r3, #4
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	6032      	str	r2, [r6, #0]
 800da00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800da08:	2301      	movs	r3, #1
 800da0a:	e09c      	b.n	800db46 <_printf_i+0x1e6>
 800da0c:	6833      	ldr	r3, [r6, #0]
 800da0e:	6820      	ldr	r0, [r4, #0]
 800da10:	1d19      	adds	r1, r3, #4
 800da12:	6031      	str	r1, [r6, #0]
 800da14:	0606      	lsls	r6, r0, #24
 800da16:	d501      	bpl.n	800da1c <_printf_i+0xbc>
 800da18:	681d      	ldr	r5, [r3, #0]
 800da1a:	e003      	b.n	800da24 <_printf_i+0xc4>
 800da1c:	0645      	lsls	r5, r0, #25
 800da1e:	d5fb      	bpl.n	800da18 <_printf_i+0xb8>
 800da20:	f9b3 5000 	ldrsh.w	r5, [r3]
 800da24:	2d00      	cmp	r5, #0
 800da26:	da03      	bge.n	800da30 <_printf_i+0xd0>
 800da28:	232d      	movs	r3, #45	@ 0x2d
 800da2a:	426d      	negs	r5, r5
 800da2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da30:	4858      	ldr	r0, [pc, #352]	@ (800db94 <_printf_i+0x234>)
 800da32:	230a      	movs	r3, #10
 800da34:	e011      	b.n	800da5a <_printf_i+0xfa>
 800da36:	6821      	ldr	r1, [r4, #0]
 800da38:	6833      	ldr	r3, [r6, #0]
 800da3a:	0608      	lsls	r0, r1, #24
 800da3c:	f853 5b04 	ldr.w	r5, [r3], #4
 800da40:	d402      	bmi.n	800da48 <_printf_i+0xe8>
 800da42:	0649      	lsls	r1, r1, #25
 800da44:	bf48      	it	mi
 800da46:	b2ad      	uxthmi	r5, r5
 800da48:	2f6f      	cmp	r7, #111	@ 0x6f
 800da4a:	4852      	ldr	r0, [pc, #328]	@ (800db94 <_printf_i+0x234>)
 800da4c:	6033      	str	r3, [r6, #0]
 800da4e:	bf14      	ite	ne
 800da50:	230a      	movne	r3, #10
 800da52:	2308      	moveq	r3, #8
 800da54:	2100      	movs	r1, #0
 800da56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800da5a:	6866      	ldr	r6, [r4, #4]
 800da5c:	60a6      	str	r6, [r4, #8]
 800da5e:	2e00      	cmp	r6, #0
 800da60:	db05      	blt.n	800da6e <_printf_i+0x10e>
 800da62:	6821      	ldr	r1, [r4, #0]
 800da64:	432e      	orrs	r6, r5
 800da66:	f021 0104 	bic.w	r1, r1, #4
 800da6a:	6021      	str	r1, [r4, #0]
 800da6c:	d04b      	beq.n	800db06 <_printf_i+0x1a6>
 800da6e:	4616      	mov	r6, r2
 800da70:	fbb5 f1f3 	udiv	r1, r5, r3
 800da74:	fb03 5711 	mls	r7, r3, r1, r5
 800da78:	5dc7      	ldrb	r7, [r0, r7]
 800da7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da7e:	462f      	mov	r7, r5
 800da80:	42bb      	cmp	r3, r7
 800da82:	460d      	mov	r5, r1
 800da84:	d9f4      	bls.n	800da70 <_printf_i+0x110>
 800da86:	2b08      	cmp	r3, #8
 800da88:	d10b      	bne.n	800daa2 <_printf_i+0x142>
 800da8a:	6823      	ldr	r3, [r4, #0]
 800da8c:	07df      	lsls	r7, r3, #31
 800da8e:	d508      	bpl.n	800daa2 <_printf_i+0x142>
 800da90:	6923      	ldr	r3, [r4, #16]
 800da92:	6861      	ldr	r1, [r4, #4]
 800da94:	4299      	cmp	r1, r3
 800da96:	bfde      	ittt	le
 800da98:	2330      	movle	r3, #48	@ 0x30
 800da9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800da9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800daa2:	1b92      	subs	r2, r2, r6
 800daa4:	6122      	str	r2, [r4, #16]
 800daa6:	f8cd a000 	str.w	sl, [sp]
 800daaa:	464b      	mov	r3, r9
 800daac:	aa03      	add	r2, sp, #12
 800daae:	4621      	mov	r1, r4
 800dab0:	4640      	mov	r0, r8
 800dab2:	f7ff fee7 	bl	800d884 <_printf_common>
 800dab6:	3001      	adds	r0, #1
 800dab8:	d14a      	bne.n	800db50 <_printf_i+0x1f0>
 800daba:	f04f 30ff 	mov.w	r0, #4294967295
 800dabe:	b004      	add	sp, #16
 800dac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dac4:	6823      	ldr	r3, [r4, #0]
 800dac6:	f043 0320 	orr.w	r3, r3, #32
 800daca:	6023      	str	r3, [r4, #0]
 800dacc:	4832      	ldr	r0, [pc, #200]	@ (800db98 <_printf_i+0x238>)
 800dace:	2778      	movs	r7, #120	@ 0x78
 800dad0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dad4:	6823      	ldr	r3, [r4, #0]
 800dad6:	6831      	ldr	r1, [r6, #0]
 800dad8:	061f      	lsls	r7, r3, #24
 800dada:	f851 5b04 	ldr.w	r5, [r1], #4
 800dade:	d402      	bmi.n	800dae6 <_printf_i+0x186>
 800dae0:	065f      	lsls	r7, r3, #25
 800dae2:	bf48      	it	mi
 800dae4:	b2ad      	uxthmi	r5, r5
 800dae6:	6031      	str	r1, [r6, #0]
 800dae8:	07d9      	lsls	r1, r3, #31
 800daea:	bf44      	itt	mi
 800daec:	f043 0320 	orrmi.w	r3, r3, #32
 800daf0:	6023      	strmi	r3, [r4, #0]
 800daf2:	b11d      	cbz	r5, 800dafc <_printf_i+0x19c>
 800daf4:	2310      	movs	r3, #16
 800daf6:	e7ad      	b.n	800da54 <_printf_i+0xf4>
 800daf8:	4826      	ldr	r0, [pc, #152]	@ (800db94 <_printf_i+0x234>)
 800dafa:	e7e9      	b.n	800dad0 <_printf_i+0x170>
 800dafc:	6823      	ldr	r3, [r4, #0]
 800dafe:	f023 0320 	bic.w	r3, r3, #32
 800db02:	6023      	str	r3, [r4, #0]
 800db04:	e7f6      	b.n	800daf4 <_printf_i+0x194>
 800db06:	4616      	mov	r6, r2
 800db08:	e7bd      	b.n	800da86 <_printf_i+0x126>
 800db0a:	6833      	ldr	r3, [r6, #0]
 800db0c:	6825      	ldr	r5, [r4, #0]
 800db0e:	6961      	ldr	r1, [r4, #20]
 800db10:	1d18      	adds	r0, r3, #4
 800db12:	6030      	str	r0, [r6, #0]
 800db14:	062e      	lsls	r6, r5, #24
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	d501      	bpl.n	800db1e <_printf_i+0x1be>
 800db1a:	6019      	str	r1, [r3, #0]
 800db1c:	e002      	b.n	800db24 <_printf_i+0x1c4>
 800db1e:	0668      	lsls	r0, r5, #25
 800db20:	d5fb      	bpl.n	800db1a <_printf_i+0x1ba>
 800db22:	8019      	strh	r1, [r3, #0]
 800db24:	2300      	movs	r3, #0
 800db26:	6123      	str	r3, [r4, #16]
 800db28:	4616      	mov	r6, r2
 800db2a:	e7bc      	b.n	800daa6 <_printf_i+0x146>
 800db2c:	6833      	ldr	r3, [r6, #0]
 800db2e:	1d1a      	adds	r2, r3, #4
 800db30:	6032      	str	r2, [r6, #0]
 800db32:	681e      	ldr	r6, [r3, #0]
 800db34:	6862      	ldr	r2, [r4, #4]
 800db36:	2100      	movs	r1, #0
 800db38:	4630      	mov	r0, r6
 800db3a:	f7f2 fb61 	bl	8000200 <memchr>
 800db3e:	b108      	cbz	r0, 800db44 <_printf_i+0x1e4>
 800db40:	1b80      	subs	r0, r0, r6
 800db42:	6060      	str	r0, [r4, #4]
 800db44:	6863      	ldr	r3, [r4, #4]
 800db46:	6123      	str	r3, [r4, #16]
 800db48:	2300      	movs	r3, #0
 800db4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db4e:	e7aa      	b.n	800daa6 <_printf_i+0x146>
 800db50:	6923      	ldr	r3, [r4, #16]
 800db52:	4632      	mov	r2, r6
 800db54:	4649      	mov	r1, r9
 800db56:	4640      	mov	r0, r8
 800db58:	47d0      	blx	sl
 800db5a:	3001      	adds	r0, #1
 800db5c:	d0ad      	beq.n	800daba <_printf_i+0x15a>
 800db5e:	6823      	ldr	r3, [r4, #0]
 800db60:	079b      	lsls	r3, r3, #30
 800db62:	d413      	bmi.n	800db8c <_printf_i+0x22c>
 800db64:	68e0      	ldr	r0, [r4, #12]
 800db66:	9b03      	ldr	r3, [sp, #12]
 800db68:	4298      	cmp	r0, r3
 800db6a:	bfb8      	it	lt
 800db6c:	4618      	movlt	r0, r3
 800db6e:	e7a6      	b.n	800dabe <_printf_i+0x15e>
 800db70:	2301      	movs	r3, #1
 800db72:	4632      	mov	r2, r6
 800db74:	4649      	mov	r1, r9
 800db76:	4640      	mov	r0, r8
 800db78:	47d0      	blx	sl
 800db7a:	3001      	adds	r0, #1
 800db7c:	d09d      	beq.n	800daba <_printf_i+0x15a>
 800db7e:	3501      	adds	r5, #1
 800db80:	68e3      	ldr	r3, [r4, #12]
 800db82:	9903      	ldr	r1, [sp, #12]
 800db84:	1a5b      	subs	r3, r3, r1
 800db86:	42ab      	cmp	r3, r5
 800db88:	dcf2      	bgt.n	800db70 <_printf_i+0x210>
 800db8a:	e7eb      	b.n	800db64 <_printf_i+0x204>
 800db8c:	2500      	movs	r5, #0
 800db8e:	f104 0619 	add.w	r6, r4, #25
 800db92:	e7f5      	b.n	800db80 <_printf_i+0x220>
 800db94:	0800e105 	.word	0x0800e105
 800db98:	0800e116 	.word	0x0800e116

0800db9c <memmove>:
 800db9c:	4288      	cmp	r0, r1
 800db9e:	b510      	push	{r4, lr}
 800dba0:	eb01 0402 	add.w	r4, r1, r2
 800dba4:	d902      	bls.n	800dbac <memmove+0x10>
 800dba6:	4284      	cmp	r4, r0
 800dba8:	4623      	mov	r3, r4
 800dbaa:	d807      	bhi.n	800dbbc <memmove+0x20>
 800dbac:	1e43      	subs	r3, r0, #1
 800dbae:	42a1      	cmp	r1, r4
 800dbb0:	d008      	beq.n	800dbc4 <memmove+0x28>
 800dbb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbba:	e7f8      	b.n	800dbae <memmove+0x12>
 800dbbc:	4402      	add	r2, r0
 800dbbe:	4601      	mov	r1, r0
 800dbc0:	428a      	cmp	r2, r1
 800dbc2:	d100      	bne.n	800dbc6 <memmove+0x2a>
 800dbc4:	bd10      	pop	{r4, pc}
 800dbc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbce:	e7f7      	b.n	800dbc0 <memmove+0x24>

0800dbd0 <_sbrk_r>:
 800dbd0:	b538      	push	{r3, r4, r5, lr}
 800dbd2:	4d06      	ldr	r5, [pc, #24]	@ (800dbec <_sbrk_r+0x1c>)
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	4604      	mov	r4, r0
 800dbd8:	4608      	mov	r0, r1
 800dbda:	602b      	str	r3, [r5, #0]
 800dbdc:	f7f5 fb52 	bl	8003284 <_sbrk>
 800dbe0:	1c43      	adds	r3, r0, #1
 800dbe2:	d102      	bne.n	800dbea <_sbrk_r+0x1a>
 800dbe4:	682b      	ldr	r3, [r5, #0]
 800dbe6:	b103      	cbz	r3, 800dbea <_sbrk_r+0x1a>
 800dbe8:	6023      	str	r3, [r4, #0]
 800dbea:	bd38      	pop	{r3, r4, r5, pc}
 800dbec:	20000468 	.word	0x20000468

0800dbf0 <memcpy>:
 800dbf0:	440a      	add	r2, r1
 800dbf2:	4291      	cmp	r1, r2
 800dbf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbf8:	d100      	bne.n	800dbfc <memcpy+0xc>
 800dbfa:	4770      	bx	lr
 800dbfc:	b510      	push	{r4, lr}
 800dbfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc06:	4291      	cmp	r1, r2
 800dc08:	d1f9      	bne.n	800dbfe <memcpy+0xe>
 800dc0a:	bd10      	pop	{r4, pc}

0800dc0c <_realloc_r>:
 800dc0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc10:	4607      	mov	r7, r0
 800dc12:	4614      	mov	r4, r2
 800dc14:	460d      	mov	r5, r1
 800dc16:	b921      	cbnz	r1, 800dc22 <_realloc_r+0x16>
 800dc18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc1c:	4611      	mov	r1, r2
 800dc1e:	f7ff bc4d 	b.w	800d4bc <_malloc_r>
 800dc22:	b92a      	cbnz	r2, 800dc30 <_realloc_r+0x24>
 800dc24:	f7ff fbde 	bl	800d3e4 <_free_r>
 800dc28:	4625      	mov	r5, r4
 800dc2a:	4628      	mov	r0, r5
 800dc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc30:	f000 f81a 	bl	800dc68 <_malloc_usable_size_r>
 800dc34:	4284      	cmp	r4, r0
 800dc36:	4606      	mov	r6, r0
 800dc38:	d802      	bhi.n	800dc40 <_realloc_r+0x34>
 800dc3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc3e:	d8f4      	bhi.n	800dc2a <_realloc_r+0x1e>
 800dc40:	4621      	mov	r1, r4
 800dc42:	4638      	mov	r0, r7
 800dc44:	f7ff fc3a 	bl	800d4bc <_malloc_r>
 800dc48:	4680      	mov	r8, r0
 800dc4a:	b908      	cbnz	r0, 800dc50 <_realloc_r+0x44>
 800dc4c:	4645      	mov	r5, r8
 800dc4e:	e7ec      	b.n	800dc2a <_realloc_r+0x1e>
 800dc50:	42b4      	cmp	r4, r6
 800dc52:	4622      	mov	r2, r4
 800dc54:	4629      	mov	r1, r5
 800dc56:	bf28      	it	cs
 800dc58:	4632      	movcs	r2, r6
 800dc5a:	f7ff ffc9 	bl	800dbf0 <memcpy>
 800dc5e:	4629      	mov	r1, r5
 800dc60:	4638      	mov	r0, r7
 800dc62:	f7ff fbbf 	bl	800d3e4 <_free_r>
 800dc66:	e7f1      	b.n	800dc4c <_realloc_r+0x40>

0800dc68 <_malloc_usable_size_r>:
 800dc68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc6c:	1f18      	subs	r0, r3, #4
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	bfbc      	itt	lt
 800dc72:	580b      	ldrlt	r3, [r1, r0]
 800dc74:	18c0      	addlt	r0, r0, r3
 800dc76:	4770      	bx	lr

0800dc78 <_init>:
 800dc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7a:	bf00      	nop
 800dc7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc7e:	bc08      	pop	{r3}
 800dc80:	469e      	mov	lr, r3
 800dc82:	4770      	bx	lr

0800dc84 <_fini>:
 800dc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc86:	bf00      	nop
 800dc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc8a:	bc08      	pop	{r3}
 800dc8c:	469e      	mov	lr, r3
 800dc8e:	4770      	bx	lr
