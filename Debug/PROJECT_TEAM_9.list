
PROJECT_TEAM_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800dcb8  0800dcb8  0000ecb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e100  0800e100  00010060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e100  0800e100  0000f100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e108  0800e108  00010060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e108  0800e108  0000f108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e10c  0800e10c  0000f10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800e110  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010060  2**0
                  CONTENTS
 10 .bss          00000b24  20000060  20000060  00010060  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000b84  20000b84  00010060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017784  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b16  00000000  00000000  00027814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  0002b330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b7d  00000000  00000000  0002c7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d076  00000000  00000000  00050325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d127e  00000000  00000000  0006d39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e619  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000f92  00000000  00000000  0013e65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b6c  00000000  00000000  0013f5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0014515c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dca0 	.word	0x0800dca0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800dca0 	.word	0x0800dca0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b988 	b.w	8000eb4 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	468e      	mov	lr, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	4688      	mov	r8, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4617      	mov	r7, r2
 8000bd0:	d962      	bls.n	8000c98 <__udivmoddi4+0xdc>
 8000bd2:	fab2 f682 	clz	r6, r2
 8000bd6:	b14e      	cbz	r6, 8000bec <__udivmoddi4+0x30>
 8000bd8:	f1c6 0320 	rsb	r3, r6, #32
 8000bdc:	fa01 f806 	lsl.w	r8, r1, r6
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	40b7      	lsls	r7, r6
 8000be6:	ea43 0808 	orr.w	r8, r3, r8
 8000bea:	40b4      	lsls	r4, r6
 8000bec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf0:	fa1f fc87 	uxth.w	ip, r7
 8000bf4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bf8:	0c23      	lsrs	r3, r4, #16
 8000bfa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fb01 f20c 	mul.w	r2, r1, ip
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c10:	f080 80ea 	bcs.w	8000de8 <__udivmoddi4+0x22c>
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f240 80e7 	bls.w	8000de8 <__udivmoddi4+0x22c>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	443b      	add	r3, r7
 8000c1e:	1a9a      	subs	r2, r3, r2
 8000c20:	b2a3      	uxth	r3, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c2e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c32:	459c      	cmp	ip, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x8e>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3c:	f080 80d6 	bcs.w	8000dec <__udivmoddi4+0x230>
 8000c40:	459c      	cmp	ip, r3
 8000c42:	f240 80d3 	bls.w	8000dec <__udivmoddi4+0x230>
 8000c46:	443b      	add	r3, r7
 8000c48:	3802      	subs	r0, #2
 8000c4a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c4e:	eba3 030c 	sub.w	r3, r3, ip
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11d      	cbz	r5, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40f3      	lsrs	r3, r6
 8000c58:	2200      	movs	r2, #0
 8000c5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d905      	bls.n	8000c72 <__udivmoddi4+0xb6>
 8000c66:	b10d      	cbz	r5, 8000c6c <__udivmoddi4+0xb0>
 8000c68:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e7f5      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c72:	fab3 f183 	clz	r1, r3
 8000c76:	2900      	cmp	r1, #0
 8000c78:	d146      	bne.n	8000d08 <__udivmoddi4+0x14c>
 8000c7a:	4573      	cmp	r3, lr
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xc8>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 8105 	bhi.w	8000e8e <__udivmoddi4+0x2d2>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	4690      	mov	r8, r2
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e5      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c92:	e9c5 4800 	strd	r4, r8, [r5]
 8000c96:	e7e2      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f000 8090 	beq.w	8000dbe <__udivmoddi4+0x202>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f040 80a4 	bne.w	8000df0 <__udivmoddi4+0x234>
 8000ca8:	1a8a      	subs	r2, r1, r2
 8000caa:	0c03      	lsrs	r3, r0, #16
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	b280      	uxth	r0, r0
 8000cb2:	b2bc      	uxth	r4, r7
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cba:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cc2:	fb04 f20c 	mul.w	r2, r4, ip
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x11e>
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x11c>
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	f200 80e0 	bhi.w	8000e98 <__udivmoddi4+0x2dc>
 8000cd8:	46c4      	mov	ip, r8
 8000cda:	1a9b      	subs	r3, r3, r2
 8000cdc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ce0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ce4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ce8:	fb02 f404 	mul.w	r4, r2, r4
 8000cec:	429c      	cmp	r4, r3
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x144>
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x142>
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	f200 80ca 	bhi.w	8000e92 <__udivmoddi4+0x2d6>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	1b1b      	subs	r3, r3, r4
 8000d02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d06:	e7a5      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d08:	f1c1 0620 	rsb	r6, r1, #32
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d12:	431f      	orrs	r7, r3
 8000d14:	fa0e f401 	lsl.w	r4, lr, r1
 8000d18:	fa20 f306 	lsr.w	r3, r0, r6
 8000d1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d24:	4323      	orrs	r3, r4
 8000d26:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2a:	fa1f fc87 	uxth.w	ip, r7
 8000d2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d32:	0c1c      	lsrs	r4, r3, #16
 8000d34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	fa02 f201 	lsl.w	r2, r2, r1
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x1a0>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d4e:	f080 809c 	bcs.w	8000e8a <__udivmoddi4+0x2ce>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f240 8099 	bls.w	8000e8a <__udivmoddi4+0x2ce>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	443c      	add	r4, r7
 8000d5c:	eba4 040e 	sub.w	r4, r4, lr
 8000d60:	fa1f fe83 	uxth.w	lr, r3
 8000d64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d68:	fb09 4413 	mls	r4, r9, r3, r4
 8000d6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d74:	45a4      	cmp	ip, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1ce>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d7e:	f080 8082 	bcs.w	8000e86 <__udivmoddi4+0x2ca>
 8000d82:	45a4      	cmp	ip, r4
 8000d84:	d97f      	bls.n	8000e86 <__udivmoddi4+0x2ca>
 8000d86:	3b02      	subs	r3, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d8e:	eba4 040c 	sub.w	r4, r4, ip
 8000d92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d96:	4564      	cmp	r4, ip
 8000d98:	4673      	mov	r3, lr
 8000d9a:	46e1      	mov	r9, ip
 8000d9c:	d362      	bcc.n	8000e64 <__udivmoddi4+0x2a8>
 8000d9e:	d05f      	beq.n	8000e60 <__udivmoddi4+0x2a4>
 8000da0:	b15d      	cbz	r5, 8000dba <__udivmoddi4+0x1fe>
 8000da2:	ebb8 0203 	subs.w	r2, r8, r3
 8000da6:	eb64 0409 	sbc.w	r4, r4, r9
 8000daa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dae:	fa22 f301 	lsr.w	r3, r2, r1
 8000db2:	431e      	orrs	r6, r3
 8000db4:	40cc      	lsrs	r4, r1
 8000db6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dba:	2100      	movs	r1, #0
 8000dbc:	e74f      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000dbe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dc2:	0c01      	lsrs	r1, r0, #16
 8000dc4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dc8:	b280      	uxth	r0, r0
 8000dca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	463c      	mov	r4, r7
 8000dd4:	46b8      	mov	r8, r7
 8000dd6:	46be      	mov	lr, r7
 8000dd8:	2620      	movs	r6, #32
 8000dda:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dde:	eba2 0208 	sub.w	r2, r2, r8
 8000de2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000de6:	e766      	b.n	8000cb6 <__udivmoddi4+0xfa>
 8000de8:	4601      	mov	r1, r0
 8000dea:	e718      	b.n	8000c1e <__udivmoddi4+0x62>
 8000dec:	4610      	mov	r0, r2
 8000dee:	e72c      	b.n	8000c4a <__udivmoddi4+0x8e>
 8000df0:	f1c6 0220 	rsb	r2, r6, #32
 8000df4:	fa2e f302 	lsr.w	r3, lr, r2
 8000df8:	40b7      	lsls	r7, r6
 8000dfa:	40b1      	lsls	r1, r6
 8000dfc:	fa20 f202 	lsr.w	r2, r0, r2
 8000e00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e04:	430a      	orrs	r2, r1
 8000e06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e0a:	b2bc      	uxth	r4, r7
 8000e0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb08 f904 	mul.w	r9, r8, r4
 8000e1a:	40b0      	lsls	r0, r6
 8000e1c:	4589      	cmp	r9, r1
 8000e1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e22:	b280      	uxth	r0, r0
 8000e24:	d93e      	bls.n	8000ea4 <__udivmoddi4+0x2e8>
 8000e26:	1879      	adds	r1, r7, r1
 8000e28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e2c:	d201      	bcs.n	8000e32 <__udivmoddi4+0x276>
 8000e2e:	4589      	cmp	r9, r1
 8000e30:	d81f      	bhi.n	8000e72 <__udivmoddi4+0x2b6>
 8000e32:	eba1 0109 	sub.w	r1, r1, r9
 8000e36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3a:	fb09 f804 	mul.w	r8, r9, r4
 8000e3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e42:	b292      	uxth	r2, r2
 8000e44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e48:	4542      	cmp	r2, r8
 8000e4a:	d229      	bcs.n	8000ea0 <__udivmoddi4+0x2e4>
 8000e4c:	18ba      	adds	r2, r7, r2
 8000e4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e52:	d2c4      	bcs.n	8000dde <__udivmoddi4+0x222>
 8000e54:	4542      	cmp	r2, r8
 8000e56:	d2c2      	bcs.n	8000dde <__udivmoddi4+0x222>
 8000e58:	f1a9 0102 	sub.w	r1, r9, #2
 8000e5c:	443a      	add	r2, r7
 8000e5e:	e7be      	b.n	8000dde <__udivmoddi4+0x222>
 8000e60:	45f0      	cmp	r8, lr
 8000e62:	d29d      	bcs.n	8000da0 <__udivmoddi4+0x1e4>
 8000e64:	ebbe 0302 	subs.w	r3, lr, r2
 8000e68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	46e1      	mov	r9, ip
 8000e70:	e796      	b.n	8000da0 <__udivmoddi4+0x1e4>
 8000e72:	eba7 0909 	sub.w	r9, r7, r9
 8000e76:	4449      	add	r1, r9
 8000e78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e80:	fb09 f804 	mul.w	r8, r9, r4
 8000e84:	e7db      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e86:	4673      	mov	r3, lr
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1ce>
 8000e8a:	4650      	mov	r0, sl
 8000e8c:	e766      	b.n	8000d5c <__udivmoddi4+0x1a0>
 8000e8e:	4608      	mov	r0, r1
 8000e90:	e6fd      	b.n	8000c8e <__udivmoddi4+0xd2>
 8000e92:	443b      	add	r3, r7
 8000e94:	3a02      	subs	r2, #2
 8000e96:	e733      	b.n	8000d00 <__udivmoddi4+0x144>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	443b      	add	r3, r7
 8000e9e:	e71c      	b.n	8000cda <__udivmoddi4+0x11e>
 8000ea0:	4649      	mov	r1, r9
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x222>
 8000ea4:	eba1 0109 	sub.w	r1, r1, r9
 8000ea8:	46c4      	mov	ip, r8
 8000eaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eae:	fb09 f804 	mul.w	r8, r9, r4
 8000eb2:	e7c4      	b.n	8000e3e <__udivmoddi4+0x282>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <FRAM_WriteBytes>:

/**
  * @brief Ghi một mảng byte vào FRAM từ một địa chỉ.
  */
HAL_StatusTypeDef FRAM_WriteBytes(I2C_HandleTypeDef *hi2c, uint16_t memAddress, uint8_t *pData, uint16_t size)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af04      	add	r7, sp, #16
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	607a      	str	r2, [r7, #4]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	817b      	strh	r3, [r7, #10]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	813b      	strh	r3, [r7, #8]
  if ((memAddress + size - 1) > FRAM_MAX_MEMORY_ADDRESS) {
 8000ecc:	897a      	ldrh	r2, [r7, #10]
 8000ece:	893b      	ldrh	r3, [r7, #8]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ed6:	dd01      	ble.n	8000edc <FRAM_WriteBytes+0x24>
      return HAL_ERROR; // Ghi vượt quá giới hạn bộ nhớ
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e00c      	b.n	8000ef6 <FRAM_WriteBytes+0x3e>
  }
  return HAL_I2C_Mem_Write(hi2c, FRAM_I2C_DEVICE_ADDRESS, memAddress, I2C_MEMADD_SIZE_16BIT, pData, size, FRAM_DEFAULT_TIMEOUT);
 8000edc:	897a      	ldrh	r2, [r7, #10]
 8000ede:	2364      	movs	r3, #100	@ 0x64
 8000ee0:	9302      	str	r3, [sp, #8]
 8000ee2:	893b      	ldrh	r3, [r7, #8]
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2310      	movs	r3, #16
 8000eec:	21a0      	movs	r1, #160	@ 0xa0
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f004 faa6 	bl	8005440 <HAL_I2C_Mem_Write>
 8000ef4:	4603      	mov	r3, r0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <FRAM_ReadBytes>:

/**
  * @brief Đọc một mảng byte từ FRAM bắt đầu từ một địa chỉ.
  */
HAL_StatusTypeDef FRAM_ReadBytes(I2C_HandleTypeDef *hi2c, uint16_t memAddress, uint8_t *pData, uint16_t size)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b088      	sub	sp, #32
 8000f02:	af04      	add	r7, sp, #16
 8000f04:	60f8      	str	r0, [r7, #12]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	817b      	strh	r3, [r7, #10]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	813b      	strh	r3, [r7, #8]
  if ((memAddress + size - 1) > FRAM_MAX_MEMORY_ADDRESS) {
 8000f12:	897a      	ldrh	r2, [r7, #10]
 8000f14:	893b      	ldrh	r3, [r7, #8]
 8000f16:	4413      	add	r3, r2
 8000f18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000f1c:	dd01      	ble.n	8000f22 <FRAM_ReadBytes+0x24>
      return HAL_ERROR; // Đọc vượt quá giới hạn bộ nhớ
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00c      	b.n	8000f3c <FRAM_ReadBytes+0x3e>
  }
  return HAL_I2C_Mem_Read(hi2c, FRAM_I2C_DEVICE_ADDRESS, memAddress, I2C_MEMADD_SIZE_16BIT, pData, size, FRAM_DEFAULT_TIMEOUT);
 8000f22:	897a      	ldrh	r2, [r7, #10]
 8000f24:	2364      	movs	r3, #100	@ 0x64
 8000f26:	9302      	str	r3, [sp, #8]
 8000f28:	893b      	ldrh	r3, [r7, #8]
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2310      	movs	r3, #16
 8000f32:	21a0      	movs	r1, #160	@ 0xa0
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f004 fb7d 	bl	8005634 <HAL_I2C_Mem_Read>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b0c0      	sub	sp, #256	@ 0x100
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  // Task Box Definitions
  uint16_t start_y_tasks_row1 = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 8000f4a:	233c      	movs	r3, #60	@ 0x3c
 8000f4c:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
  uint16_t start_y_tasks_row2 = start_y_tasks_row1 + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8000f50:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8000f54:	3350      	adds	r3, #80	@ 0x50
 8000f56:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc

  // Initialize task boxes (now global)
  task_boxes[0] = (TaskBox_t){MARGIN, start_y_tasks_row1, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-1"};
 8000f5a:	4bac      	ldr	r3, [pc, #688]	@ (800120c <main+0x2c8>)
 8000f5c:	220a      	movs	r2, #10
 8000f5e:	801a      	strh	r2, [r3, #0]
 8000f60:	4aaa      	ldr	r2, [pc, #680]	@ (800120c <main+0x2c8>)
 8000f62:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8000f66:	8053      	strh	r3, [r2, #2]
 8000f68:	4ba8      	ldr	r3, [pc, #672]	@ (800120c <main+0x2c8>)
 8000f6a:	2269      	movs	r2, #105	@ 0x69
 8000f6c:	809a      	strh	r2, [r3, #4]
 8000f6e:	4ba7      	ldr	r3, [pc, #668]	@ (800120c <main+0x2c8>)
 8000f70:	2246      	movs	r2, #70	@ 0x46
 8000f72:	80da      	strh	r2, [r3, #6]
 8000f74:	4ba5      	ldr	r3, [pc, #660]	@ (800120c <main+0x2c8>)
 8000f76:	4aa6      	ldr	r2, [pc, #664]	@ (8001210 <main+0x2cc>)
 8000f78:	609a      	str	r2, [r3, #8]
  task_boxes[1] = (TaskBox_t){(uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES), start_y_tasks_row1, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-2"};
 8000f7a:	4ba4      	ldr	r3, [pc, #656]	@ (800120c <main+0x2c8>)
 8000f7c:	227d      	movs	r2, #125	@ 0x7d
 8000f7e:	819a      	strh	r2, [r3, #12]
 8000f80:	4aa2      	ldr	r2, [pc, #648]	@ (800120c <main+0x2c8>)
 8000f82:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 8000f86:	81d3      	strh	r3, [r2, #14]
 8000f88:	4ba0      	ldr	r3, [pc, #640]	@ (800120c <main+0x2c8>)
 8000f8a:	2269      	movs	r2, #105	@ 0x69
 8000f8c:	821a      	strh	r2, [r3, #16]
 8000f8e:	4b9f      	ldr	r3, [pc, #636]	@ (800120c <main+0x2c8>)
 8000f90:	2246      	movs	r2, #70	@ 0x46
 8000f92:	825a      	strh	r2, [r3, #18]
 8000f94:	4b9d      	ldr	r3, [pc, #628]	@ (800120c <main+0x2c8>)
 8000f96:	4a9f      	ldr	r2, [pc, #636]	@ (8001214 <main+0x2d0>)
 8000f98:	615a      	str	r2, [r3, #20]
  task_boxes[2] = (TaskBox_t){MARGIN, start_y_tasks_row2, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-3"};
 8000f9a:	4b9c      	ldr	r3, [pc, #624]	@ (800120c <main+0x2c8>)
 8000f9c:	220a      	movs	r2, #10
 8000f9e:	831a      	strh	r2, [r3, #24]
 8000fa0:	4a9a      	ldr	r2, [pc, #616]	@ (800120c <main+0x2c8>)
 8000fa2:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8000fa6:	8353      	strh	r3, [r2, #26]
 8000fa8:	4b98      	ldr	r3, [pc, #608]	@ (800120c <main+0x2c8>)
 8000faa:	2269      	movs	r2, #105	@ 0x69
 8000fac:	839a      	strh	r2, [r3, #28]
 8000fae:	4b97      	ldr	r3, [pc, #604]	@ (800120c <main+0x2c8>)
 8000fb0:	2246      	movs	r2, #70	@ 0x46
 8000fb2:	83da      	strh	r2, [r3, #30]
 8000fb4:	4b95      	ldr	r3, [pc, #596]	@ (800120c <main+0x2c8>)
 8000fb6:	4a98      	ldr	r2, [pc, #608]	@ (8001218 <main+0x2d4>)
 8000fb8:	621a      	str	r2, [r3, #32]
  task_boxes[3] = (TaskBox_t){(uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES), start_y_tasks_row2, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-4"};
 8000fba:	4b94      	ldr	r3, [pc, #592]	@ (800120c <main+0x2c8>)
 8000fbc:	227d      	movs	r2, #125	@ 0x7d
 8000fbe:	849a      	strh	r2, [r3, #36]	@ 0x24
 8000fc0:	4a92      	ldr	r2, [pc, #584]	@ (800120c <main+0x2c8>)
 8000fc2:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8000fc6:	84d3      	strh	r3, [r2, #38]	@ 0x26
 8000fc8:	4b90      	ldr	r3, [pc, #576]	@ (800120c <main+0x2c8>)
 8000fca:	2269      	movs	r2, #105	@ 0x69
 8000fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8000fce:	4b8f      	ldr	r3, [pc, #572]	@ (800120c <main+0x2c8>)
 8000fd0:	2246      	movs	r2, #70	@ 0x46
 8000fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8000fd4:	4b8d      	ldr	r3, [pc, #564]	@ (800120c <main+0x2c8>)
 8000fd6:	4a91      	ldr	r2, [pc, #580]	@ (800121c <main+0x2d8>)
 8000fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  num_tasks = 4; // Set global count
 8000fda:	4b91      	ldr	r3, [pc, #580]	@ (8001220 <main+0x2dc>)
 8000fdc:	2204      	movs	r2, #4
 8000fde:	601a      	str	r2, [r3, #0]
  Coordinate rawPoint, displayPoint;

  // Define the Back Button Box (now global)
  back_button_box = (TaskBox_t){
      (uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES),              // x: same margin as tasks
      (uint16_t)(start_y_tasks_row2 + TASK_BOX_H + TASK_TO_BACK_BUTTON_SPACING), // y: towards the bottom
 8000fe0:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 8000fe4:	335a      	adds	r3, #90	@ 0x5a
 8000fe6:	b29a      	uxth	r2, r3
  back_button_box = (TaskBox_t){
 8000fe8:	4b8e      	ldr	r3, [pc, #568]	@ (8001224 <main+0x2e0>)
 8000fea:	217d      	movs	r1, #125	@ 0x7d
 8000fec:	8019      	strh	r1, [r3, #0]
 8000fee:	4b8d      	ldr	r3, [pc, #564]	@ (8001224 <main+0x2e0>)
 8000ff0:	805a      	strh	r2, [r3, #2]
 8000ff2:	4b8c      	ldr	r3, [pc, #560]	@ (8001224 <main+0x2e0>)
 8000ff4:	225a      	movs	r2, #90	@ 0x5a
 8000ff6:	809a      	strh	r2, [r3, #4]
 8000ff8:	4b8a      	ldr	r3, [pc, #552]	@ (8001224 <main+0x2e0>)
 8000ffa:	222d      	movs	r2, #45	@ 0x2d
 8000ffc:	80da      	strh	r2, [r3, #6]
 8000ffe:	4b89      	ldr	r3, [pc, #548]	@ (8001224 <main+0x2e0>)
 8001000:	4a89      	ldr	r2, [pc, #548]	@ (8001228 <main+0x2e4>)
 8001002:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001004:	f002 fa52 	bl	80034ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001008:	f000 f9d4 	bl	80013b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100c:	f000 fb84 	bl	8001718 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001010:	f000 fb4c 	bl	80016ac <MX_SPI1_Init>
  MX_I2C2_Init();
 8001014:	f000 fafc 	bl	8001610 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001018:	f000 fb28 	bl	800166c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800101c:	f009 fe4a 	bl	800acb4 <MX_FATFS_Init>
  MX_ADC1_Init();
 8001020:	f000 fa30 	bl	8001484 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001024:	f000 fa80 	bl	8001528 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001028:	f000 fab4 	bl	8001594 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  // Bật backlight trước khi khởi tạo LCD
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	2140      	movs	r1, #64	@ 0x40
 8001030:	487e      	ldr	r0, [pc, #504]	@ (800122c <main+0x2e8>)
 8001032:	f004 f85f 	bl	80050f4 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001036:	2064      	movs	r0, #100	@ 0x64
 8001038:	f002 faaa 	bl	8003590 <HAL_Delay>
  //   Error_Handler();
  // }

  // Cấu hình filter cho CAN2
  CAN_FilterTypeDef sFilterConfig2;
  sFilterConfig2.FilterBank = 14; // CAN2 sử dụng từ bank 14-27
 800103c:	230e      	movs	r3, #14
 800103e:	657b      	str	r3, [r7, #84]	@ 0x54
  sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8001040:	2300      	movs	r3, #0
 8001042:	65bb      	str	r3, [r7, #88]	@ 0x58
  sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8001044:	2301      	movs	r3, #1
 8001046:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sFilterConfig2.FilterIdHigh = 0x0000;
 8001048:	2300      	movs	r3, #0
 800104a:	643b      	str	r3, [r7, #64]	@ 0x40
  sFilterConfig2.FilterIdLow = 0x0000;
 800104c:	2300      	movs	r3, #0
 800104e:	647b      	str	r3, [r7, #68]	@ 0x44
  sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8001050:	2300      	movs	r3, #0
 8001052:	64bb      	str	r3, [r7, #72]	@ 0x48
  sFilterConfig2.FilterMaskIdLow = 0x0000;
 8001054:	2300      	movs	r3, #0
 8001056:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001058:	2300      	movs	r3, #0
 800105a:	653b      	str	r3, [r7, #80]	@ 0x50
  sFilterConfig2.FilterActivation = ENABLE;
 800105c:	2301      	movs	r3, #1
 800105e:	663b      	str	r3, [r7, #96]	@ 0x60
  // Không cần đặt SlaveStartFilterBank ở đây

  if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2) != HAL_OK)
 8001060:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001064:	4619      	mov	r1, r3
 8001066:	4872      	ldr	r0, [pc, #456]	@ (8001230 <main+0x2ec>)
 8001068:	f002 ffb2 	bl	8003fd0 <HAL_CAN_ConfigFilter>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <main+0x132>
  {
    Error_Handler();
 8001072:	f000 fd33 	bl	8001adc <Error_Handler>
  }

  // Khởi động CAN1 và CAN2
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8001076:	486f      	ldr	r0, [pc, #444]	@ (8001234 <main+0x2f0>)
 8001078:	f003 f888 	bl	800418c <HAL_CAN_Start>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <main+0x142>
  {
    Error_Handler();
 8001082:	f000 fd2b 	bl	8001adc <Error_Handler>
  }

  if (HAL_CAN_Start(&hcan2) != HAL_OK)
 8001086:	486a      	ldr	r0, [pc, #424]	@ (8001230 <main+0x2ec>)
 8001088:	f003 f880 	bl	800418c <HAL_CAN_Start>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <main+0x152>
  {
    Error_Handler();
 8001092:	f000 fd23 	bl	8001adc <Error_Handler>
  }

  // Kích hoạt thông báo ngắt cho CAN2 RX FIFO0
  if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8001096:	2102      	movs	r1, #2
 8001098:	4865      	ldr	r0, [pc, #404]	@ (8001230 <main+0x2ec>)
 800109a:	f003 faad 	bl	80045f8 <HAL_CAN_ActivateNotification>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <main+0x164>
  {
    Error_Handler();
 80010a4:	f000 fd1a 	bl	8001adc <Error_Handler>
  }

  // Cấu hình thông điệp gửi từ CAN1
  TxHeader1.StdId = 0x124;
 80010a8:	4b63      	ldr	r3, [pc, #396]	@ (8001238 <main+0x2f4>)
 80010aa:	f44f 7292 	mov.w	r2, #292	@ 0x124
 80010ae:	601a      	str	r2, [r3, #0]
  TxHeader1.ExtId = 0x00;
 80010b0:	4b61      	ldr	r3, [pc, #388]	@ (8001238 <main+0x2f4>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	605a      	str	r2, [r3, #4]
  TxHeader1.RTR = CAN_RTR_DATA;
 80010b6:	4b60      	ldr	r3, [pc, #384]	@ (8001238 <main+0x2f4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  TxHeader1.IDE = CAN_ID_STD;
 80010bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001238 <main+0x2f4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  TxHeader1.DLC = 2;
 80010c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001238 <main+0x2f4>)
 80010c4:	2202      	movs	r2, #2
 80010c6:	611a      	str	r2, [r3, #16]
  TxHeader1.TransmitGlobalTime = DISABLE;
 80010c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001238 <main+0x2f4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	751a      	strb	r2, [r3, #20]

  // Khởi tạo LCD và Touch
  // disable touch interrupt
  HAL_NVIC_DisableIRQ(EXTI4_IRQn); // Tắt ngắt trước khi khởi tạo
 80010ce:	200a      	movs	r0, #10
 80010d0:	f003 fe11 	bl	8004cf6 <HAL_NVIC_DisableIRQ>

  Manual_LCD_Init();
 80010d4:	f000 fdd4 	bl	8001c80 <Manual_LCD_Init>
  Manual_Touch_Init(&hspi1);
 80010d8:	4858      	ldr	r0, [pc, #352]	@ (800123c <main+0x2f8>)
 80010da:	f001 fc8f 	bl	80029fc <Manual_Touch_Init>
  Manual_LCD_DrawLayout(); // This function should draw the tasks and the back button
 80010de:	f001 f9f9 	bl	80024d4 <Manual_LCD_DrawLayout>

  if (SD_Init())
 80010e2:	f001 fd8d 	bl	8002c00 <SD_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <main+0x1b6>
  {
	 sprintf(info_text_buffer, "SD OK");
 80010ec:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80010f0:	4953      	ldr	r1, [pc, #332]	@ (8001240 <main+0x2fc>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f00c f92c 	bl	800d350 <siprintf>
 80010f8:	e005      	b.n	8001106 <main+0x1c2>
//      sprintf(info_text_buffer, "SD OK, File error");
//    }
  }
  else
  {
    sprintf(info_text_buffer, "SD Init Failed");
 80010fa:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80010fe:	4951      	ldr	r1, [pc, #324]	@ (8001244 <main+0x300>)
 8001100:	4618      	mov	r0, r3
 8001102:	f00c f925 	bl	800d350 <siprintf>
  }

  Manual_LCD_UpdateInfoText(info_text_buffer);
 8001106:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fb76 	bl	80027fc <Manual_LCD_UpdateInfoText>

  __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
 8001110:	4b4d      	ldr	r3, [pc, #308]	@ (8001248 <main+0x304>)
 8001112:	2210      	movs	r2, #16
 8001114:	615a      	str	r2, [r3, #20]

  HAL_NVIC_EnableIRQ(EXTI4_IRQn); // Enable touch interrupt
 8001116:	200a      	movs	r0, #10
 8001118:	f003 fddf 	bl	8004cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN WHILE */
  int can2_received_temperature_int;
  while (1)
    {
      /* USER CODE END WHILE */
      if (current_task == 0)
 800111c:	4b4b      	ldr	r3, [pc, #300]	@ (800124c <main+0x308>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d106      	bne.n	8001132 <main+0x1ee>
      {
        // Task 02-1: Blink LED
        Task2_LedBlink(GPIOB, GPIO_PIN_1, BLINK_SPEED_1000_MS);
 8001124:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001128:	2102      	movs	r1, #2
 800112a:	4840      	ldr	r0, [pc, #256]	@ (800122c <main+0x2e8>)
 800112c:	f002 f906 	bl	800333c <Task2_LedBlink>
 8001130:	e7f4      	b.n	800111c <main+0x1d8>
      }
      else if (current_task == 1)
 8001132:	4b46      	ldr	r3, [pc, #280]	@ (800124c <main+0x308>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d149      	bne.n	80011ce <main+0x28a>
      {
        char temp_display_str[50];
        uint8_t current_temp_c = (uint8_t)Read_Internal_Temperature();
 800113a:	f002 f913 	bl	8003364 <Read_Internal_Temperature>
 800113e:	eef0 7a40 	vmov.f32	s15, s0
 8001142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001146:	edc7 7a01 	vstr	s15, [r7, #4]
 800114a:	793b      	ldrb	r3, [r7, #4]
 800114c:	f887 30fa 	strb.w	r3, [r7, #250]	@ 0xfa
        uint8_t temp_to_send = current_temp_c;
 8001150:	f897 30fa 	ldrb.w	r3, [r7, #250]	@ 0xfa
 8001154:	f887 30f9 	strb.w	r3, [r7, #249]	@ 0xf9
        TxData1[0] = GROUP_NUMBER;
 8001158:	4b3d      	ldr	r3, [pc, #244]	@ (8001250 <main+0x30c>)
 800115a:	2209      	movs	r2, #9
 800115c:	701a      	strb	r2, [r3, #0]
        TxData1[1] = temp_to_send;
 800115e:	4a3c      	ldr	r2, [pc, #240]	@ (8001250 <main+0x30c>)
 8001160:	f897 30f9 	ldrb.w	r3, [r7, #249]	@ 0xf9
 8001164:	7053      	strb	r3, [r2, #1]
        HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, TxData1, &TxMailbox1);
 8001166:	4b3b      	ldr	r3, [pc, #236]	@ (8001254 <main+0x310>)
 8001168:	4a39      	ldr	r2, [pc, #228]	@ (8001250 <main+0x30c>)
 800116a:	4933      	ldr	r1, [pc, #204]	@ (8001238 <main+0x2f4>)
 800116c:	4831      	ldr	r0, [pc, #196]	@ (8001234 <main+0x2f0>)
 800116e:	f003 f851 	bl	8004214 <HAL_CAN_AddTxMessage>
        while (!can2_received_data_flag)
 8001172:	e002      	b.n	800117a <main+0x236>
        {
          HAL_Delay(10);
 8001174:	200a      	movs	r0, #10
 8001176:	f002 fa0b 	bl	8003590 <HAL_Delay>
        while (!can2_received_data_flag)
 800117a:	4b37      	ldr	r3, [pc, #220]	@ (8001258 <main+0x314>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f7      	beq.n	8001174 <main+0x230>
        }
        can2_received_data_flag = 0; // Reset the flag for the next message
 8001184:	4b34      	ldr	r3, [pc, #208]	@ (8001258 <main+0x314>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
	    can2_received_temperature_int = (int)can2_received_temperature;
 800118a:	4b34      	ldr	r3, [pc, #208]	@ (800125c <main+0x318>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

        sprintf(temp_display_str, "Group: %d, temp: %d *C", can2_received_group, can2_received_temperature_int);
 8001194:	4b32      	ldr	r3, [pc, #200]	@ (8001260 <main+0x31c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	f107 000c 	add.w	r0, r7, #12
 80011a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80011a4:	492f      	ldr	r1, [pc, #188]	@ (8001264 <main+0x320>)
 80011a6:	f00c f8d3 	bl	800d350 <siprintf>
        // sprintf(temp_display_str, "Group: %d, temp: %d *C", GROUP_NUMBER, temp_to_send);
        strcpy(info_text_buffer, temp_display_str);
 80011aa:	f107 020c 	add.w	r2, r7, #12
 80011ae:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00c f921 	bl	800d3fc <strcpy>
        Manual_LCD_UpdateInfoText(info_text_buffer);
 80011ba:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fb1c 	bl	80027fc <Manual_LCD_UpdateInfoText>
        HAL_Delay(500); // Delay to avoid flooding the CAN bus
 80011c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011c8:	f002 f9e2 	bl	8003590 <HAL_Delay>
 80011cc:	e7a6      	b.n	800111c <main+0x1d8>
      }
      else if (current_task == 2)
 80011ce:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <main+0x308>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	f040 809c 	bne.w	8001310 <main+0x3cc>
      {
        byte_read = SD_ReadTeamFile(&read_data, sizeof(read_data));
 80011d8:	2132      	movs	r1, #50	@ 0x32
 80011da:	4823      	ldr	r0, [pc, #140]	@ (8001268 <main+0x324>)
 80011dc:	f001 fdc0 	bl	8002d60 <SD_ReadTeamFile>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b21      	ldr	r3, [pc, #132]	@ (800126c <main+0x328>)
 80011e6:	701a      	strb	r2, [r3, #0]

        if (byte_read > 0)
 80011e8:	4b20      	ldr	r3, [pc, #128]	@ (800126c <main+0x328>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d041      	beq.n	8001274 <main+0x330>
        {
          // Đọc thành công, hiển thị nội dung
          sprintf(info_text_buffer, "SD content: %s", read_data);
 80011f0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80011f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001268 <main+0x324>)
 80011f6:	491e      	ldr	r1, [pc, #120]	@ (8001270 <main+0x32c>)
 80011f8:	4618      	mov	r0, r3
 80011fa:	f00c f8a9 	bl	800d350 <siprintf>
          Manual_LCD_UpdateInfoText(info_text_buffer);
 80011fe:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001202:	4618      	mov	r0, r3
 8001204:	f001 fafa 	bl	80027fc <Manual_LCD_UpdateInfoText>
 8001208:	e07d      	b.n	8001306 <main+0x3c2>
 800120a:	bf00      	nop
 800120c:	2000047c 	.word	0x2000047c
 8001210:	0800dcb8 	.word	0x0800dcb8
 8001214:	0800dcc4 	.word	0x0800dcc4
 8001218:	0800dcd0 	.word	0x0800dcd0
 800121c:	0800dcdc 	.word	0x0800dcdc
 8001220:	20000518 	.word	0x20000518
 8001224:	2000070c 	.word	0x2000070c
 8001228:	0800dce8 	.word	0x0800dce8
 800122c:	40020400 	.word	0x40020400
 8001230:	200005a4 	.word	0x200005a4
 8001234:	200006e4 	.word	0x200006e4
 8001238:	20000500 	.word	0x20000500
 800123c:	20000688 	.word	0x20000688
 8001240:	0800dcf0 	.word	0x0800dcf0
 8001244:	0800dcf8 	.word	0x0800dcf8
 8001248:	40013c00 	.word	0x40013c00
 800124c:	20000000 	.word	0x20000000
 8001250:	2000051c 	.word	0x2000051c
 8001254:	200006e0 	.word	0x200006e0
 8001258:	2000007c 	.word	0x2000007c
 800125c:	20000685 	.word	0x20000685
 8001260:	200005fe 	.word	0x200005fe
 8001264:	0800dd08 	.word	0x0800dd08
 8001268:	200005cc 	.word	0x200005cc
 800126c:	20000684 	.word	0x20000684
 8001270:	0800dd20 	.word	0x0800dd20
        }
        else
        {
          // Đọc thất bại
          sprintf(info_text_buffer, "Read error (%d)", byte_read);
 8001274:	4b44      	ldr	r3, [pc, #272]	@ (8001388 <main+0x444>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800127e:	4943      	ldr	r1, [pc, #268]	@ (800138c <main+0x448>)
 8001280:	4618      	mov	r0, r3
 8001282:	f00c f865 	bl	800d350 <siprintf>
          Manual_LCD_UpdateInfoText(info_text_buffer);
 8001286:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800128a:	4618      	mov	r0, r3
 800128c:	f001 fab6 	bl	80027fc <Manual_LCD_UpdateInfoText>

          // Thử khởi tạo lại SD trong trường hợp bị ngắt kết nối
          if (SD_Init())
 8001290:	f001 fcb6 	bl	8002c00 <SD_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d035      	beq.n	8001306 <main+0x3c2>
          {
            sprintf(info_text_buffer, "SD reinitialized");
 800129a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800129e:	493c      	ldr	r1, [pc, #240]	@ (8001390 <main+0x44c>)
 80012a0:	4618      	mov	r0, r3
 80012a2:	f00c f855 	bl	800d350 <siprintf>
            Manual_LCD_UpdateInfoText(info_text_buffer);
 80012a6:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 faa6 	bl	80027fc <Manual_LCD_UpdateInfoText>
            HAL_Delay(1000);
 80012b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012b4:	f002 f96c 	bl	8003590 <HAL_Delay>

            // Thử đọc lại
            byte_read = SD_ReadTeamFile(read_data, sizeof(read_data));
 80012b8:	2132      	movs	r1, #50	@ 0x32
 80012ba:	4836      	ldr	r0, [pc, #216]	@ (8001394 <main+0x450>)
 80012bc:	f001 fd50 	bl	8002d60 <SD_ReadTeamFile>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	4b30      	ldr	r3, [pc, #192]	@ (8001388 <main+0x444>)
 80012c6:	701a      	strb	r2, [r3, #0]
            if (byte_read > 0)
 80012c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001388 <main+0x444>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00c      	beq.n	80012ea <main+0x3a6>
            {
              sprintf(info_text_buffer, "Content: %s", read_data);
 80012d0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80012d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001394 <main+0x450>)
 80012d6:	4930      	ldr	r1, [pc, #192]	@ (8001398 <main+0x454>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f00c f839 	bl	800d350 <siprintf>
              Manual_LCD_UpdateInfoText(info_text_buffer);
 80012de:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80012e2:	4618      	mov	r0, r3
 80012e4:	f001 fa8a 	bl	80027fc <Manual_LCD_UpdateInfoText>
 80012e8:	e00d      	b.n	8001306 <main+0x3c2>
            }
            else
            {
              sprintf(info_text_buffer, "Still error (%d)", byte_read);
 80012ea:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <main+0x444>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80012f4:	4929      	ldr	r1, [pc, #164]	@ (800139c <main+0x458>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f00c f82a 	bl	800d350 <siprintf>
              Manual_LCD_UpdateInfoText(info_text_buffer);
 80012fc:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fa7b 	bl	80027fc <Manual_LCD_UpdateInfoText>
            }
          }
        }

        HAL_Delay(500); // Delay to avoid flooding the LCD
 8001306:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800130a:	f002 f941 	bl	8003590 <HAL_Delay>
 800130e:	e705      	b.n	800111c <main+0x1d8>
      }
      else if (current_task == 3)
 8001310:	4b23      	ldr	r3, [pc, #140]	@ (80013a0 <main+0x45c>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b03      	cmp	r3, #3
 8001316:	f47f af01 	bne.w	800111c <main+0x1d8>
      {
        // Task 02-4: Read temperature from FRAM
        uint8_t read_value = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        // Đọc nhiệt độ từ FRAM
        GPIO_PinState prev_btn_state = current_button_state;
 8001320:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <main+0x460>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	f887 30fb 	strb.w	r3, [r7, #251]	@ 0xfb

        CheckUserButtonAndSaveTemp(&current_button_state);
 8001328:	481e      	ldr	r0, [pc, #120]	@ (80013a4 <main+0x460>)
 800132a:	f002 f863 	bl	80033f4 <CheckUserButtonAndSaveTemp>
        // Kiểm tra trạng thái nút và ghi nhiệt độ vào FRAM
        if (current_button_state == GPIO_PIN_SET && prev_btn_state == GPIO_PIN_RESET)
 800132e:	4b1d      	ldr	r3, [pc, #116]	@ (80013a4 <main+0x460>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d123      	bne.n	800137e <main+0x43a>
 8001336:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 800133a:	2b00      	cmp	r3, #0
 800133c:	d11f      	bne.n	800137e <main+0x43a>
        {
          // Nút vừa được nhấn xuống
          if (FRAM_ReadBytes(&hi2c2, USER_TEMP_ADDR, &read_value, 1) == HAL_OK)
 800133e:	f107 023f 	add.w	r2, r7, #63	@ 0x3f
 8001342:	2301      	movs	r3, #1
 8001344:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001348:	4817      	ldr	r0, [pc, #92]	@ (80013a8 <main+0x464>)
 800134a:	f7ff fdd8 	bl	8000efe <FRAM_ReadBytes>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d109      	bne.n	8001368 <main+0x424>
          {
            sprintf(info_text_buffer, "FRAM Read OK: %d", read_value);
 8001354:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001358:	461a      	mov	r2, r3
 800135a:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800135e:	4913      	ldr	r1, [pc, #76]	@ (80013ac <main+0x468>)
 8001360:	4618      	mov	r0, r3
 8001362:	f00b fff5 	bl	800d350 <siprintf>
 8001366:	e005      	b.n	8001374 <main+0x430>
          }
          else
          {
            sprintf(info_text_buffer, "FRAM Read ERROR");
 8001368:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800136c:	4910      	ldr	r1, [pc, #64]	@ (80013b0 <main+0x46c>)
 800136e:	4618      	mov	r0, r3
 8001370:	f00b ffee 	bl	800d350 <siprintf>
          }
          Manual_LCD_UpdateInfoText(info_text_buffer);
 8001374:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8001378:	4618      	mov	r0, r3
 800137a:	f001 fa3f 	bl	80027fc <Manual_LCD_UpdateInfoText>
        }

        HAL_Delay(10); // Delay to avoid flooding the LCD
 800137e:	200a      	movs	r0, #10
 8001380:	f002 f906 	bl	8003590 <HAL_Delay>
      if (current_task == 0)
 8001384:	e6ca      	b.n	800111c <main+0x1d8>
 8001386:	bf00      	nop
 8001388:	20000684 	.word	0x20000684
 800138c:	0800dd30 	.word	0x0800dd30
 8001390:	0800dd40 	.word	0x0800dd40
 8001394:	200005cc 	.word	0x200005cc
 8001398:	0800dd54 	.word	0x0800dd54
 800139c:	0800dd60 	.word	0x0800dd60
 80013a0:	20000000 	.word	0x20000000
 80013a4:	2000007d 	.word	0x2000007d
 80013a8:	200004ac 	.word	0x200004ac
 80013ac:	0800dd74 	.word	0x0800dd74
 80013b0:	0800dd88 	.word	0x0800dd88

080013b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b094      	sub	sp, #80	@ 0x50
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 0320 	add.w	r3, r7, #32
 80013be:	2230      	movs	r2, #48	@ 0x30
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00b ffe6 	bl	800d394 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	4b27      	ldr	r3, [pc, #156]	@ (800147c <SystemClock_Config+0xc8>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e0:	4a26      	ldr	r2, [pc, #152]	@ (800147c <SystemClock_Config+0xc8>)
 80013e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e8:	4b24      	ldr	r3, [pc, #144]	@ (800147c <SystemClock_Config+0xc8>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <SystemClock_Config+0xcc>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a20      	ldr	r2, [pc, #128]	@ (8001480 <SystemClock_Config+0xcc>)
 80013fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <SystemClock_Config+0xcc>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001410:	2301      	movs	r3, #1
 8001412:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001414:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141a:	2302      	movs	r3, #2
 800141c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001424:	2319      	movs	r3, #25
 8001426:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001428:	2390      	movs	r3, #144	@ 0x90
 800142a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800142c:	2302      	movs	r3, #2
 800142e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001430:	2304      	movs	r3, #4
 8001432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001434:	f107 0320 	add.w	r3, r7, #32
 8001438:	4618      	mov	r0, r3
 800143a:	f006 fabf 	bl	80079bc <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001444:	f000 fb4a 	bl	8001adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001448:	230f      	movs	r3, #15
 800144a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144c:	2302      	movs	r3, #2
 800144e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001454:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001458:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	2102      	movs	r1, #2
 8001464:	4618      	mov	r0, r3
 8001466:	f006 fd21 	bl	8007eac <HAL_RCC_ClockConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001470:	f000 fb34 	bl	8001adc <Error_Handler>
  }
}
 8001474:	bf00      	nop
 8001476:	3750      	adds	r7, #80	@ 0x50
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000

08001484 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001496:	4b21      	ldr	r3, [pc, #132]	@ (800151c <MX_ADC1_Init+0x98>)
 8001498:	4a21      	ldr	r2, [pc, #132]	@ (8001520 <MX_ADC1_Init+0x9c>)
 800149a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <MX_ADC1_Init+0x98>)
 800149e:	2200      	movs	r2, #0
 80014a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	@ (800151c <MX_ADC1_Init+0x98>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014a8:	4b1c      	ldr	r3, [pc, #112]	@ (800151c <MX_ADC1_Init+0x98>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014ae:	4b1b      	ldr	r3, [pc, #108]	@ (800151c <MX_ADC1_Init+0x98>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014b4:	4b19      	ldr	r3, [pc, #100]	@ (800151c <MX_ADC1_Init+0x98>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014bc:	4b17      	ldr	r3, [pc, #92]	@ (800151c <MX_ADC1_Init+0x98>)
 80014be:	2200      	movs	r2, #0
 80014c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014c2:	4b16      	ldr	r3, [pc, #88]	@ (800151c <MX_ADC1_Init+0x98>)
 80014c4:	4a17      	ldr	r2, [pc, #92]	@ (8001524 <MX_ADC1_Init+0xa0>)
 80014c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <MX_ADC1_Init+0x98>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <MX_ADC1_Init+0x98>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <MX_ADC1_Init+0x98>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014dc:	4b0f      	ldr	r3, [pc, #60]	@ (800151c <MX_ADC1_Init+0x98>)
 80014de:	2201      	movs	r2, #1
 80014e0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014e2:	480e      	ldr	r0, [pc, #56]	@ (800151c <MX_ADC1_Init+0x98>)
 80014e4:	f002 f878 	bl	80035d8 <HAL_ADC_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80014ee:	f000 faf5 	bl	8001adc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80014f2:	2310      	movs	r3, #16
 80014f4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014f6:	2301      	movs	r3, #1
 80014f8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014fe:	463b      	mov	r3, r7
 8001500:	4619      	mov	r1, r3
 8001502:	4806      	ldr	r0, [pc, #24]	@ (800151c <MX_ADC1_Init+0x98>)
 8001504:	f002 fa4a 	bl	800399c <HAL_ADC_ConfigChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800150e:	f000 fae5 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000055c 	.word	0x2000055c
 8001520:	40012000 	.word	0x40012000
 8001524:	0f000001 	.word	0x0f000001

08001528 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800152c:	4b17      	ldr	r3, [pc, #92]	@ (800158c <MX_CAN1_Init+0x64>)
 800152e:	4a18      	ldr	r2, [pc, #96]	@ (8001590 <MX_CAN1_Init+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 72;
 8001532:	4b16      	ldr	r3, [pc, #88]	@ (800158c <MX_CAN1_Init+0x64>)
 8001534:	2248      	movs	r2, #72	@ 0x48
 8001536:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <MX_CAN1_Init+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800153e:	4b13      	ldr	r3, [pc, #76]	@ (800158c <MX_CAN1_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <MX_CAN1_Init+0x64>)
 8001546:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800154a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800154c:	4b0f      	ldr	r3, [pc, #60]	@ (800158c <MX_CAN1_Init+0x64>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001552:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <MX_CAN1_Init+0x64>)
 8001554:	2200      	movs	r2, #0
 8001556:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001558:	4b0c      	ldr	r3, [pc, #48]	@ (800158c <MX_CAN1_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <MX_CAN1_Init+0x64>)
 8001560:	2200      	movs	r2, #0
 8001562:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001564:	4b09      	ldr	r3, [pc, #36]	@ (800158c <MX_CAN1_Init+0x64>)
 8001566:	2200      	movs	r2, #0
 8001568:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800156a:	4b08      	ldr	r3, [pc, #32]	@ (800158c <MX_CAN1_Init+0x64>)
 800156c:	2200      	movs	r2, #0
 800156e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001570:	4b06      	ldr	r3, [pc, #24]	@ (800158c <MX_CAN1_Init+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_CAN1_Init+0x64>)
 8001578:	f002 fc2e 	bl	8003dd8 <HAL_CAN_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001582:	f000 faab 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200006e4 	.word	0x200006e4
 8001590:	40006400 	.word	0x40006400

08001594 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001598:	4b1b      	ldr	r3, [pc, #108]	@ (8001608 <MX_CAN2_Init+0x74>)
 800159a:	4a1c      	ldr	r2, [pc, #112]	@ (800160c <MX_CAN2_Init+0x78>)
 800159c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 72;
 800159e:	4b1a      	ldr	r3, [pc, #104]	@ (8001608 <MX_CAN2_Init+0x74>)
 80015a0:	2248      	movs	r2, #72	@ 0x48
 80015a2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80015a4:	4b18      	ldr	r3, [pc, #96]	@ (8001608 <MX_CAN2_Init+0x74>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80015aa:	4b17      	ldr	r3, [pc, #92]	@ (8001608 <MX_CAN2_Init+0x74>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80015b0:	4b15      	ldr	r3, [pc, #84]	@ (8001608 <MX_CAN2_Init+0x74>)
 80015b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015b6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 80015b8:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <MX_CAN2_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80015be:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <MX_CAN2_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80015c4:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <MX_CAN2_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <MX_CAN2_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80015d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <MX_CAN2_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <MX_CAN2_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80015dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001608 <MX_CAN2_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80015e2:	4809      	ldr	r0, [pc, #36]	@ (8001608 <MX_CAN2_Init+0x74>)
 80015e4:	f002 fbf8 	bl	8003dd8 <HAL_CAN_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 80015ee:	f000 fa75 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	2040      	movs	r0, #64	@ 0x40
 80015f8:	f003 fb53 	bl	8004ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80015fc:	2040      	movs	r0, #64	@ 0x40
 80015fe:	f003 fb6c 	bl	8004cda <HAL_NVIC_EnableIRQ>
  /* USER CODE END CAN2_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200005a4 	.word	0x200005a4
 800160c:	40006800 	.word	0x40006800

08001610 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <MX_I2C2_Init+0x50>)
 8001616:	4a13      	ldr	r2, [pc, #76]	@ (8001664 <MX_I2C2_Init+0x54>)
 8001618:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <MX_I2C2_Init+0x50>)
 800161c:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <MX_I2C2_Init+0x58>)
 800161e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <MX_I2C2_Init+0x50>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001626:	4b0e      	ldr	r3, [pc, #56]	@ (8001660 <MX_I2C2_Init+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <MX_I2C2_Init+0x50>)
 800162e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001632:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001634:	4b0a      	ldr	r3, [pc, #40]	@ (8001660 <MX_I2C2_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800163a:	4b09      	ldr	r3, [pc, #36]	@ (8001660 <MX_I2C2_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001640:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <MX_I2C2_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001646:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <MX_I2C2_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800164c:	4804      	ldr	r0, [pc, #16]	@ (8001660 <MX_I2C2_Init+0x50>)
 800164e:	f003 fd9d 	bl	800518c <HAL_I2C_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001658:	f000 fa40 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	bd80      	pop	{r7, pc}
 8001660:	200004ac 	.word	0x200004ac
 8001664:	40005800 	.word	0x40005800
 8001668:	000186a0 	.word	0x000186a0

0800166c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <MX_SDIO_SD_Init+0x38>)
 8001672:	4a0d      	ldr	r2, [pc, #52]	@ (80016a8 <MX_SDIO_SD_Init+0x3c>)
 8001674:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <MX_SDIO_SD_Init+0x38>)
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800167c:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <MX_SDIO_SD_Init+0x38>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <MX_SDIO_SD_Init+0x38>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <MX_SDIO_SD_Init+0x38>)
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800168e:	4b05      	ldr	r3, [pc, #20]	@ (80016a4 <MX_SDIO_SD_Init+0x38>)
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001694:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <MX_SDIO_SD_Init+0x38>)
 8001696:	2200      	movs	r2, #0
 8001698:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	20000600 	.word	0x20000600
 80016a8:	40012c00 	.word	0x40012c00

080016ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016b0:	4b17      	ldr	r3, [pc, #92]	@ (8001710 <MX_SPI1_Init+0x64>)
 80016b2:	4a18      	ldr	r2, [pc, #96]	@ (8001714 <MX_SPI1_Init+0x68>)
 80016b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016b6:	4b16      	ldr	r3, [pc, #88]	@ (8001710 <MX_SPI1_Init+0x64>)
 80016b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016be:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <MX_SPI1_Init+0x64>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016c4:	4b12      	ldr	r3, [pc, #72]	@ (8001710 <MX_SPI1_Init+0x64>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ca:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <MX_SPI1_Init+0x64>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <MX_SPI1_Init+0x64>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001710 <MX_SPI1_Init+0x64>)
 80016d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80016de:	4b0c      	ldr	r3, [pc, #48]	@ (8001710 <MX_SPI1_Init+0x64>)
 80016e0:	2220      	movs	r2, #32
 80016e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001710 <MX_SPI1_Init+0x64>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016ea:	4b09      	ldr	r3, [pc, #36]	@ (8001710 <MX_SPI1_Init+0x64>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016f0:	4b07      	ldr	r3, [pc, #28]	@ (8001710 <MX_SPI1_Init+0x64>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016f6:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <MX_SPI1_Init+0x64>)
 80016f8:	220a      	movs	r2, #10
 80016fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	@ (8001710 <MX_SPI1_Init+0x64>)
 80016fe:	f007 ffd5 	bl	80096ac <HAL_SPI_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001708:	f000 f9e8 	bl	8001adc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000688 	.word	0x20000688
 8001714:	40013000 	.word	0x40013000

08001718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	@ 0x28
 800171c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
 8001732:	4b50      	ldr	r3, [pc, #320]	@ (8001874 <MX_GPIO_Init+0x15c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a4f      	ldr	r2, [pc, #316]	@ (8001874 <MX_GPIO_Init+0x15c>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b4d      	ldr	r3, [pc, #308]	@ (8001874 <MX_GPIO_Init+0x15c>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	4b49      	ldr	r3, [pc, #292]	@ (8001874 <MX_GPIO_Init+0x15c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	4a48      	ldr	r2, [pc, #288]	@ (8001874 <MX_GPIO_Init+0x15c>)
 8001754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001758:	6313      	str	r3, [r2, #48]	@ 0x30
 800175a:	4b46      	ldr	r3, [pc, #280]	@ (8001874 <MX_GPIO_Init+0x15c>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	4b42      	ldr	r3, [pc, #264]	@ (8001874 <MX_GPIO_Init+0x15c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	4a41      	ldr	r2, [pc, #260]	@ (8001874 <MX_GPIO_Init+0x15c>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	4b3f      	ldr	r3, [pc, #252]	@ (8001874 <MX_GPIO_Init+0x15c>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	4b3b      	ldr	r3, [pc, #236]	@ (8001874 <MX_GPIO_Init+0x15c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	4a3a      	ldr	r2, [pc, #232]	@ (8001874 <MX_GPIO_Init+0x15c>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6313      	str	r3, [r2, #48]	@ 0x30
 8001792:	4b38      	ldr	r3, [pc, #224]	@ (8001874 <MX_GPIO_Init+0x15c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	4b34      	ldr	r3, [pc, #208]	@ (8001874 <MX_GPIO_Init+0x15c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a33      	ldr	r2, [pc, #204]	@ (8001874 <MX_GPIO_Init+0x15c>)
 80017a8:	f043 0308 	orr.w	r3, r3, #8
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b31      	ldr	r3, [pc, #196]	@ (8001874 <MX_GPIO_Init+0x15c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	603b      	str	r3, [r7, #0]
 80017b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|LCD_RST_Pin|LCD_BL_Pin|LCD_CS_Pin
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 71e3 	mov.w	r1, #454	@ 0x1c6
 80017c0:	482d      	ldr	r0, [pc, #180]	@ (8001878 <MX_GPIO_Init+0x160>)
 80017c2:	f003 fc97 	bl	80050f4 <HAL_GPIO_WritePin>
                          |LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017cc:	482b      	ldr	r0, [pc, #172]	@ (800187c <MX_GPIO_Init+0x164>)
 80017ce:	f003 fc91 	bl	80050f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017dc:	2302      	movs	r3, #2
 80017de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	4826      	ldr	r0, [pc, #152]	@ (8001880 <MX_GPIO_Init+0x168>)
 80017e8:	f003 fad0 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017ec:	2302      	movs	r3, #2
 80017ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	4619      	mov	r1, r3
 80017fe:	481f      	ldr	r0, [pc, #124]	@ (800187c <MX_GPIO_Init+0x164>)
 8001800:	f003 fac4 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 LCD_RST_Pin LCD_BL_Pin LCD_CS_Pin
                           LCD_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LCD_RST_Pin|LCD_BL_Pin|LCD_CS_Pin
 8001804:	f44f 73e3 	mov.w	r3, #454	@ 0x1c6
 8001808:	617b      	str	r3, [r7, #20]
                          |LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	2301      	movs	r3, #1
 800180c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	4816      	ldr	r0, [pc, #88]	@ (8001878 <MX_GPIO_Init+0x160>)
 800181e:	f003 fab5 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 8001822:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001828:	2301      	movs	r3, #1
 800182a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4619      	mov	r1, r3
 800183a:	4810      	ldr	r0, [pc, #64]	@ (800187c <MX_GPIO_Init+0x164>)
 800183c:	f003 faa6 	bl	8004d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001840:	2310      	movs	r3, #16
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001844:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800184a:	2301      	movs	r3, #1
 800184c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	4808      	ldr	r0, [pc, #32]	@ (8001878 <MX_GPIO_Init+0x160>)
 8001856:	f003 fa99 	bl	8004d8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2100      	movs	r1, #0
 800185e:	200a      	movs	r0, #10
 8001860:	f003 fa1f 	bl	8004ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001864:	200a      	movs	r0, #10
 8001866:	f003 fa38 	bl	8004cda <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800186a:	bf00      	nop
 800186c:	3728      	adds	r7, #40	@ 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40020400 	.word	0x40020400
 800187c:	40020000 	.word	0x40020000
 8001880:	40020800 	.word	0x40020800

08001884 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == TP_IRQ_Pin)
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	2b10      	cmp	r3, #16
 8001892:	f040 80e1 	bne.w	8001a58 <HAL_GPIO_EXTI_Callback+0x1d4>
  {

    // Kiểm tra có phải là chạm không
    if (HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == GPIO_PIN_RESET)
 8001896:	2110      	movs	r1, #16
 8001898:	4871      	ldr	r0, [pc, #452]	@ (8001a60 <HAL_GPIO_EXTI_Callback+0x1dc>)
 800189a:	f003 fc13 	bl	80050c4 <HAL_GPIO_ReadPin>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f040 80d9 	bne.w	8001a58 <HAL_GPIO_EXTI_Callback+0x1d4>
    {
      Coordinate rawPoint, displayPoint;
      uint8_t old_task = current_task; // Lưu task cũ
 80018a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001a64 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	74fb      	strb	r3, [r7, #19]

      if (Manual_Touch_GetRawPoint(&rawPoint))
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	4618      	mov	r0, r3
 80018b2:	f001 f8b9 	bl	8002a28 <Manual_Touch_GetRawPoint>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 80cd 	beq.w	8001a58 <HAL_GPIO_EXTI_Callback+0x1d4>
      {
        Manual_Touch_ApplyCalibration(&displayPoint, &rawPoint);
 80018be:	f107 020c 	add.w	r2, r7, #12
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f001 f8c5 	bl	8002a58 <Manual_Touch_ApplyCalibration>

        // Kiểm tra xem có chạm vào task box nào không
        for (int i = 0; i < num_tasks; i++)
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e04c      	b.n	800196e <HAL_GPIO_EXTI_Callback+0xea>
        {
          if (displayPoint.x >= task_boxes[i].x &&
 80018d4:	8939      	ldrh	r1, [r7, #8]
 80018d6:	4864      	ldr	r0, [pc, #400]	@ (8001a68 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4403      	add	r3, r0
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	4299      	cmp	r1, r3
 80018e8:	d33e      	bcc.n	8001968 <HAL_GPIO_EXTI_Callback+0xe4>
              displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 80018ea:	893b      	ldrh	r3, [r7, #8]
 80018ec:	4618      	mov	r0, r3
 80018ee:	495e      	ldr	r1, [pc, #376]	@ (8001a68 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4613      	mov	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	440b      	add	r3, r1
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	461c      	mov	r4, r3
 8001900:	4959      	ldr	r1, [pc, #356]	@ (8001a68 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	3304      	adds	r3, #4
 8001910:	881b      	ldrh	r3, [r3, #0]
 8001912:	4423      	add	r3, r4
          if (displayPoint.x >= task_boxes[i].x &&
 8001914:	4298      	cmp	r0, r3
 8001916:	da27      	bge.n	8001968 <HAL_GPIO_EXTI_Callback+0xe4>
              displayPoint.y >= task_boxes[i].y &&
 8001918:	8979      	ldrh	r1, [r7, #10]
 800191a:	4853      	ldr	r0, [pc, #332]	@ (8001a68 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4403      	add	r3, r0
 8001928:	3302      	adds	r3, #2
 800192a:	881b      	ldrh	r3, [r3, #0]
              displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 800192c:	4299      	cmp	r1, r3
 800192e:	d31b      	bcc.n	8001968 <HAL_GPIO_EXTI_Callback+0xe4>
              displayPoint.y < (task_boxes[i].y + task_boxes[i].h))
 8001930:	897b      	ldrh	r3, [r7, #10]
 8001932:	4618      	mov	r0, r3
 8001934:	494c      	ldr	r1, [pc, #304]	@ (8001a68 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4613      	mov	r3, r2
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	4413      	add	r3, r2
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	3302      	adds	r3, #2
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	461c      	mov	r4, r3
 8001948:	4947      	ldr	r1, [pc, #284]	@ (8001a68 <HAL_GPIO_EXTI_Callback+0x1e4>)
 800194a:	697a      	ldr	r2, [r7, #20]
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	3306      	adds	r3, #6
 8001958:	881b      	ldrh	r3, [r3, #0]
 800195a:	4423      	add	r3, r4
              displayPoint.y >= task_boxes[i].y &&
 800195c:	4298      	cmp	r0, r3
 800195e:	da03      	bge.n	8001968 <HAL_GPIO_EXTI_Callback+0xe4>
          {
            current_task = i; // Đặt current_task thành index của task box
 8001960:	4a40      	ldr	r2, [pc, #256]	@ (8001a64 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	6013      	str	r3, [r2, #0]
            break;
 8001966:	e007      	b.n	8001978 <HAL_GPIO_EXTI_Callback+0xf4>
        for (int i = 0; i < num_tasks; i++)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3301      	adds	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a6c <HAL_GPIO_EXTI_Callback+0x1e8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	429a      	cmp	r2, r3
 8001976:	dbad      	blt.n	80018d4 <HAL_GPIO_EXTI_Callback+0x50>
          }
        }

        // Kiểm tra xem có chạm vào nút Back không
        if (displayPoint.x >= back_button_box.x &&
 8001978:	893a      	ldrh	r2, [r7, #8]
 800197a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a70 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d31b      	bcc.n	80019ba <HAL_GPIO_EXTI_Callback+0x136>
            displayPoint.x < (back_button_box.x + back_button_box.w) &&
 8001982:	893b      	ldrh	r3, [r7, #8]
 8001984:	461a      	mov	r2, r3
 8001986:	4b3a      	ldr	r3, [pc, #232]	@ (8001a70 <HAL_GPIO_EXTI_Callback+0x1ec>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	4619      	mov	r1, r3
 800198c:	4b38      	ldr	r3, [pc, #224]	@ (8001a70 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800198e:	889b      	ldrh	r3, [r3, #4]
 8001990:	440b      	add	r3, r1
        if (displayPoint.x >= back_button_box.x &&
 8001992:	429a      	cmp	r2, r3
 8001994:	da11      	bge.n	80019ba <HAL_GPIO_EXTI_Callback+0x136>
            displayPoint.y >= back_button_box.y &&
 8001996:	897a      	ldrh	r2, [r7, #10]
 8001998:	4b35      	ldr	r3, [pc, #212]	@ (8001a70 <HAL_GPIO_EXTI_Callback+0x1ec>)
 800199a:	885b      	ldrh	r3, [r3, #2]
            displayPoint.x < (back_button_box.x + back_button_box.w) &&
 800199c:	429a      	cmp	r2, r3
 800199e:	d30c      	bcc.n	80019ba <HAL_GPIO_EXTI_Callback+0x136>
            displayPoint.y < (back_button_box.y + back_button_box.h))
 80019a0:	897b      	ldrh	r3, [r7, #10]
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b32      	ldr	r3, [pc, #200]	@ (8001a70 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80019a6:	885b      	ldrh	r3, [r3, #2]
 80019a8:	4619      	mov	r1, r3
 80019aa:	4b31      	ldr	r3, [pc, #196]	@ (8001a70 <HAL_GPIO_EXTI_Callback+0x1ec>)
 80019ac:	88db      	ldrh	r3, [r3, #6]
 80019ae:	440b      	add	r3, r1
            displayPoint.y >= back_button_box.y &&
 80019b0:	429a      	cmp	r2, r3
 80019b2:	da02      	bge.n	80019ba <HAL_GPIO_EXTI_Callback+0x136>
        {
          current_task = 4; // Nút Back
 80019b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a64 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80019b6:	2204      	movs	r2, #4
 80019b8:	601a      	str	r2, [r3, #0]
        }

        // Nếu task thay đổi, vẽ lại màn hình ngay
        if (old_task != current_task)
 80019ba:	7cfa      	ldrb	r2, [r7, #19]
 80019bc:	4b29      	ldr	r3, [pc, #164]	@ (8001a64 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d049      	beq.n	8001a58 <HAL_GPIO_EXTI_Callback+0x1d4>
        {
          // Tắt ngắt trước khi vẽ
          HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80019c4:	200a      	movs	r0, #10
 80019c6:	f003 f996 	bl	8004cf6 <HAL_NVIC_DisableIRQ>

          // Xử lý riêng cho các task thông thường và nút back
          if (current_task >= 0 && current_task < num_tasks)
 80019ca:	4b26      	ldr	r3, [pc, #152]	@ (8001a64 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db27      	blt.n	8001a22 <HAL_GPIO_EXTI_Callback+0x19e>
 80019d2:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <HAL_GPIO_EXTI_Callback+0x1e0>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	4b25      	ldr	r3, [pc, #148]	@ (8001a6c <HAL_GPIO_EXTI_Callback+0x1e8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	da21      	bge.n	8001a22 <HAL_GPIO_EXTI_Callback+0x19e>
          {
            // Khôi phục màu của task cũ nếu có
            if (old_task >= 0 && old_task < num_tasks)
 80019de:	7cfa      	ldrb	r2, [r7, #19]
 80019e0:	4b22      	ldr	r3, [pc, #136]	@ (8001a6c <HAL_GPIO_EXTI_Callback+0x1e8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	da0c      	bge.n	8001a02 <HAL_GPIO_EXTI_Callback+0x17e>
            {
              Manual_LCD_RefillTaskBox(task_boxes[old_task].name, COLOR_BLACK);
 80019e8:	7cfa      	ldrb	r2, [r7, #19]
 80019ea:	491f      	ldr	r1, [pc, #124]	@ (8001a68 <HAL_GPIO_EXTI_Callback+0x1e4>)
 80019ec:	4613      	mov	r3, r2
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	3308      	adds	r3, #8
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 ff2f 	bl	8002860 <Manual_LCD_RefillTaskBox>
            }

            // Tô màu task mới được chọn
            Manual_LCD_RefillTaskBox(task_boxes[current_task].name, COLOR_MAGENTA);
 8001a02:	4b18      	ldr	r3, [pc, #96]	@ (8001a64 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4918      	ldr	r1, [pc, #96]	@ (8001a68 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	3308      	adds	r3, #8
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 ff20 	bl	8002860 <Manual_LCD_RefillTaskBox>
 8001a20:	e014      	b.n	8001a4c <HAL_GPIO_EXTI_Callback+0x1c8>
          }
          else if (current_task == 4 && old_task != -1) // Back button
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d110      	bne.n	8001a4c <HAL_GPIO_EXTI_Callback+0x1c8>
          {
            // Handle back button action here
            Manual_LCD_RefillTaskBox(task_boxes[old_task].name, COLOR_BLACK);
 8001a2a:	7cfa      	ldrb	r2, [r7, #19]
 8001a2c:	490e      	ldr	r1, [pc, #56]	@ (8001a68 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	3308      	adds	r3, #8
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 ff0e 	bl	8002860 <Manual_LCD_RefillTaskBox>
            current_task = -1; // Reset current task value
 8001a44:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8001a46:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4a:	601a      	str	r2, [r3, #0]
          // hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
          // hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
          // HAL_SPI_Init(&hspi1);

          // Xóa cờ ngắt và bật lại
          __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
 8001a4c:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8001a4e:	2210      	movs	r2, #16
 8001a50:	615a      	str	r2, [r3, #20]
          HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a52:	200a      	movs	r0, #10
 8001a54:	f003 f941 	bl	8004cda <HAL_NVIC_EnableIRQ>
        }
      }
    }
    // __HAL_GPIO_EXTI_CLEAR_IT(TP_IRQ_Pin);
  }
}
 8001a58:	bf00      	nop
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd90      	pop	{r4, r7, pc}
 8001a60:	40020400 	.word	0x40020400
 8001a64:	20000000 	.word	0x20000000
 8001a68:	2000047c 	.word	0x2000047c
 8001a6c:	20000518 	.word	0x20000518
 8001a70:	2000070c 	.word	0x2000070c
 8001a74:	40013c00 	.word	0x40013c00

08001a78 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if (hcan->Instance == CAN2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d117      	bne.n	8001aba <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
  {
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader2, RxData2) == HAL_OK)
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001a8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001acc <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001a8e:	2100      	movs	r1, #0
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f002 fc8f 	bl	80043b4 <HAL_CAN_GetRxMessage>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10e      	bne.n	8001aba <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
    {
      // Giải mã dữ liệu nhận được (Tùy chọn, để debug)
      if (RxHeader2.DLC >= 2) // Đảm bảo có đủ dữ liệu
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001acc <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d90a      	bls.n	8001aba <HAL_CAN_RxFifo0MsgPendingCallback+0x42>
      {
    	can2_received_group = RxData2[0];
 8001aa4:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001aa6:	781a      	ldrb	r2, [r3, #0]
 8001aa8:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8001aaa:	701a      	strb	r2, [r3, #0]
        can2_received_temperature = RxData2[1];
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8001aae:	785a      	ldrb	r2, [r3, #1]
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8001ab2:	701a      	strb	r2, [r3, #0]

        can2_received_data_flag = 1; // Đánh dấu đã nhận dữ liệu
 8001ab4:	4b08      	ldr	r3, [pc, #32]	@ (8001ad8 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
}
    }
  }
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40006800 	.word	0x40006800
 8001ac8:	20000478 	.word	0x20000478
 8001acc:	20000540 	.word	0x20000540
 8001ad0:	200005fe 	.word	0x200005fe
 8001ad4:	20000685 	.word	0x20000685
 8001ad8:	2000007c 	.word	0x2000007c

08001adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ae0:	b672      	cpsid	i
}
 8001ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8001ae4:	bf00      	nop
 8001ae6:	e7fd      	b.n	8001ae4 <Error_Handler+0x8>

08001ae8 <LCD_SPI_Send>:
// External SPI handle defined in main.c
extern SPI_HandleTypeDef hspi1;

// Low-level SPI communication functions
static void LCD_SPI_Send(uint8_t data)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8001af2:	1df9      	adds	r1, r7, #7
 8001af4:	f04f 33ff 	mov.w	r3, #4294967295
 8001af8:	2201      	movs	r2, #1
 8001afa:	4803      	ldr	r0, [pc, #12]	@ (8001b08 <LCD_SPI_Send+0x20>)
 8001afc:	f007 fe5f 	bl	80097be <HAL_SPI_Transmit>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000688 	.word	0x20000688

08001b0c <LCD_Write_Cmd>:

static void LCD_Write_Cmd(uint8_t cmd)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // DC low for command
 8001b16:	2200      	movs	r2, #0
 8001b18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b1c:	480a      	ldr	r0, [pc, #40]	@ (8001b48 <LCD_Write_Cmd+0x3c>)
 8001b1e:	f003 fae9 	bl	80050f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001b22:	2200      	movs	r2, #0
 8001b24:	2180      	movs	r1, #128	@ 0x80
 8001b26:	4808      	ldr	r0, [pc, #32]	@ (8001b48 <LCD_Write_Cmd+0x3c>)
 8001b28:	f003 fae4 	bl	80050f4 <HAL_GPIO_WritePin>
    LCD_SPI_Send(cmd);
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ffda 	bl	8001ae8 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001b34:	2201      	movs	r2, #1
 8001b36:	2180      	movs	r1, #128	@ 0x80
 8001b38:	4803      	ldr	r0, [pc, #12]	@ (8001b48 <LCD_Write_Cmd+0x3c>)
 8001b3a:	f003 fadb 	bl	80050f4 <HAL_GPIO_WritePin>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40020400 	.word	0x40020400

08001b4c <LCD_Write_Data>:

static void LCD_Write_Data(uint8_t data)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001b56:	2201      	movs	r2, #1
 8001b58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b5c:	480a      	ldr	r0, [pc, #40]	@ (8001b88 <LCD_Write_Data+0x3c>)
 8001b5e:	f003 fac9 	bl	80050f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001b62:	2200      	movs	r2, #0
 8001b64:	2180      	movs	r1, #128	@ 0x80
 8001b66:	4808      	ldr	r0, [pc, #32]	@ (8001b88 <LCD_Write_Data+0x3c>)
 8001b68:	f003 fac4 	bl	80050f4 <HAL_GPIO_WritePin>
    LCD_SPI_Send(data);
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ffba 	bl	8001ae8 <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001b74:	2201      	movs	r2, #1
 8001b76:	2180      	movs	r1, #128	@ 0x80
 8001b78:	4803      	ldr	r0, [pc, #12]	@ (8001b88 <LCD_Write_Data+0x3c>)
 8001b7a:	f003 fabb 	bl	80050f4 <HAL_GPIO_WritePin>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40020400 	.word	0x40020400

08001b8c <LCD_Write_Data16>:

static void LCD_Write_Data16(uint16_t data)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001b96:	2201      	movs	r2, #1
 8001b98:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b9c:	4810      	ldr	r0, [pc, #64]	@ (8001be0 <LCD_Write_Data16+0x54>)
 8001b9e:	f003 faa9 	bl	80050f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2180      	movs	r1, #128	@ 0x80
 8001ba6:	480e      	ldr	r0, [pc, #56]	@ (8001be0 <LCD_Write_Data16+0x54>)
 8001ba8:	f003 faa4 	bl	80050f4 <HAL_GPIO_WritePin>
    uint8_t bytes[2];
    bytes[0] = (data >> 8) & 0xFF;
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	733b      	strb	r3, [r7, #12]
    bytes[1] = data & 0xFF;
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, bytes, 2, HAL_MAX_DELAY);
 8001bbc:	f107 010c 	add.w	r1, r7, #12
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4807      	ldr	r0, [pc, #28]	@ (8001be4 <LCD_Write_Data16+0x58>)
 8001bc8:	f007 fdf9 	bl	80097be <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001bcc:	2201      	movs	r2, #1
 8001bce:	2180      	movs	r1, #128	@ 0x80
 8001bd0:	4803      	ldr	r0, [pc, #12]	@ (8001be0 <LCD_Write_Data16+0x54>)
 8001bd2:	f003 fa8f 	bl	80050f4 <HAL_GPIO_WritePin>
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40020400 	.word	0x40020400
 8001be4:	20000688 	.word	0x20000688

08001be8 <LCD_Set_Address_Window>:

// Set drawing window
static void LCD_Set_Address_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4604      	mov	r4, r0
 8001bf0:	4608      	mov	r0, r1
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4623      	mov	r3, r4
 8001bf8:	80fb      	strh	r3, [r7, #6]
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80bb      	strh	r3, [r7, #4]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	807b      	strh	r3, [r7, #2]
 8001c02:	4613      	mov	r3, r2
 8001c04:	803b      	strh	r3, [r7, #0]
    LCD_Write_Cmd(0x2A); // Column Address Set
 8001c06:	202a      	movs	r0, #42	@ 0x2a
 8001c08:	f7ff ff80 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(x1 >> 8);
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff ff99 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(x1 & 0xFF);
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff ff94 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(x2 >> 8);
 8001c24:	887b      	ldrh	r3, [r7, #2]
 8001c26:	0a1b      	lsrs	r3, r3, #8
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff8d 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(x2 & 0xFF);
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff ff88 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0x2B); // Page Address Set
 8001c3c:	202b      	movs	r0, #43	@ 0x2b
 8001c3e:	f7ff ff65 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(y1 >> 8);
 8001c42:	88bb      	ldrh	r3, [r7, #4]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff ff7e 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(y1 & 0xFF);
 8001c50:	88bb      	ldrh	r3, [r7, #4]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff79 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(y2 >> 8);
 8001c5a:	883b      	ldrh	r3, [r7, #0]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff ff72 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(y2 & 0xFF);
 8001c68:	883b      	ldrh	r3, [r7, #0]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff ff6d 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0x2C); // Memory Write
 8001c72:	202c      	movs	r0, #44	@ 0x2c
 8001c74:	f7ff ff4a 	bl	8001b0c <LCD_Write_Cmd>
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}

08001c80 <Manual_LCD_Init>:
        }
    }
}

void Manual_LCD_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0

    // Hardware Reset
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001c84:	2200      	movs	r2, #0
 8001c86:	2104      	movs	r1, #4
 8001c88:	4889      	ldr	r0, [pc, #548]	@ (8001eb0 <Manual_LCD_Init+0x230>)
 8001c8a:	f003 fa33 	bl	80050f4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001c8e:	2064      	movs	r0, #100	@ 0x64
 8001c90:	f001 fc7e 	bl	8003590 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	2104      	movs	r1, #4
 8001c98:	4885      	ldr	r0, [pc, #532]	@ (8001eb0 <Manual_LCD_Init+0x230>)
 8001c9a:	f003 fa2b 	bl	80050f4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001c9e:	2064      	movs	r0, #100	@ 0x64
 8001ca0:	f001 fc76 	bl	8003590 <HAL_Delay>

    // Backlight ON
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	2140      	movs	r1, #64	@ 0x40
 8001ca8:	4881      	ldr	r0, [pc, #516]	@ (8001eb0 <Manual_LCD_Init+0x230>)
 8001caa:	f003 fa23 	bl	80050f4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001cae:	200a      	movs	r0, #10
 8001cb0:	f001 fc6e 	bl	8003590 <HAL_Delay>

    // Initialization sequence (Example for ILI9341 - ADJUST FOR YOUR LCD)
    LCD_Write_Cmd(0xCF); // Power Control B
 8001cb4:	20cf      	movs	r0, #207	@ 0xcf
 8001cb6:	f7ff ff29 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f7ff ff46 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 8001cc0:	20c1      	movs	r0, #193	@ 0xc1
 8001cc2:	f7ff ff43 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x30);
 8001cc6:	2030      	movs	r0, #48	@ 0x30
 8001cc8:	f7ff ff40 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0xED); // Power on sequence control
 8001ccc:	20ed      	movs	r0, #237	@ 0xed
 8001cce:	f7ff ff1d 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x64);
 8001cd2:	2064      	movs	r0, #100	@ 0x64
 8001cd4:	f7ff ff3a 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001cd8:	2003      	movs	r0, #3
 8001cda:	f7ff ff37 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x12);
 8001cde:	2012      	movs	r0, #18
 8001ce0:	f7ff ff34 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x81);
 8001ce4:	2081      	movs	r0, #129	@ 0x81
 8001ce6:	f7ff ff31 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0xE8); // Driver timing control A
 8001cea:	20e8      	movs	r0, #232	@ 0xe8
 8001cec:	f7ff ff0e 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x85);
 8001cf0:	2085      	movs	r0, #133	@ 0x85
 8001cf2:	f7ff ff2b 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f7ff ff28 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x78);
 8001cfc:	2078      	movs	r0, #120	@ 0x78
 8001cfe:	f7ff ff25 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0xCB); // Power control A
 8001d02:	20cb      	movs	r0, #203	@ 0xcb
 8001d04:	f7ff ff02 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x39);
 8001d08:	2039      	movs	r0, #57	@ 0x39
 8001d0a:	f7ff ff1f 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x2C);
 8001d0e:	202c      	movs	r0, #44	@ 0x2c
 8001d10:	f7ff ff1c 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff ff19 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x34);
 8001d1a:	2034      	movs	r0, #52	@ 0x34
 8001d1c:	f7ff ff16 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x02);
 8001d20:	2002      	movs	r0, #2
 8001d22:	f7ff ff13 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0xF7); // Pump ratio control
 8001d26:	20f7      	movs	r0, #247	@ 0xf7
 8001d28:	f7ff fef0 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x20);
 8001d2c:	2020      	movs	r0, #32
 8001d2e:	f7ff ff0d 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0xEA); // Driver timing control B
 8001d32:	20ea      	movs	r0, #234	@ 0xea
 8001d34:	f7ff feea 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001d38:	2000      	movs	r0, #0
 8001d3a:	f7ff ff07 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff ff04 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0xC0);  // Power Control 1
 8001d44:	20c0      	movs	r0, #192	@ 0xc0
 8001d46:	f7ff fee1 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x23); // VRH[5:0]
 8001d4a:	2023      	movs	r0, #35	@ 0x23
 8001d4c:	f7ff fefe 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0xC1);  // Power Control 2
 8001d50:	20c1      	movs	r0, #193	@ 0xc1
 8001d52:	f7ff fedb 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x10); // SAP[2:0];BT[3:0]
 8001d56:	2010      	movs	r0, #16
 8001d58:	f7ff fef8 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0xC5);  // VCOM Control 1
 8001d5c:	20c5      	movs	r0, #197	@ 0xc5
 8001d5e:	f7ff fed5 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x3E); // Contrast
 8001d62:	203e      	movs	r0, #62	@ 0x3e
 8001d64:	f7ff fef2 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x28);
 8001d68:	2028      	movs	r0, #40	@ 0x28
 8001d6a:	f7ff feef 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0xC7);  // VCOM Control 2
 8001d6e:	20c7      	movs	r0, #199	@ 0xc7
 8001d70:	f7ff fecc 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x86); // --
 8001d74:	2086      	movs	r0, #134	@ 0x86
 8001d76:	f7ff fee9 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0x36); // Memory Access Control
 8001d7a:	2036      	movs	r0, #54	@ 0x36
 8001d7c:	f7ff fec6 	bl	8001b0c <LCD_Write_Cmd>
    // LCD_Write_Data(0x08); // Previous value
    LCD_Write_Data(0x28); // Try this: MV=1, MY=0, MX=0, BGR=1 (Landscape, X:T-B, Y:L-R)
 8001d80:	2028      	movs	r0, #40	@ 0x28
 8001d82:	f7ff fee3 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0x3A);  // Pixel Format Set
 8001d86:	203a      	movs	r0, #58	@ 0x3a
 8001d88:	f7ff fec0 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x55); // 16 bits/pixel
 8001d8c:	2055      	movs	r0, #85	@ 0x55
 8001d8e:	f7ff fedd 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0xB1); // Frame Rate Control (In Normal Mode/Full Colors)
 8001d92:	20b1      	movs	r0, #177	@ 0xb1
 8001d94:	f7ff feba 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f7ff fed7 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x18);
 8001d9e:	2018      	movs	r0, #24
 8001da0:	f7ff fed4 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0xB6); // Display Function Control
 8001da4:	20b6      	movs	r0, #182	@ 0xb6
 8001da6:	f7ff feb1 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x08);
 8001daa:	2008      	movs	r0, #8
 8001dac:	f7ff fece 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x82);
 8001db0:	2082      	movs	r0, #130	@ 0x82
 8001db2:	f7ff fecb 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x27);
 8001db6:	2027      	movs	r0, #39	@ 0x27
 8001db8:	f7ff fec8 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0xF2);  // Enable 3G
 8001dbc:	20f2      	movs	r0, #242	@ 0xf2
 8001dbe:	f7ff fea5 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x00); // 3Gamma Function Disable
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7ff fec2 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0x26);  // Gamma Set
 8001dc8:	2026      	movs	r0, #38	@ 0x26
 8001dca:	f7ff fe9f 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x01); // Gamma curve selected
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f7ff febc 	bl	8001b4c <LCD_Write_Data>

    // ... (Positive and Negative Gamma Correction remain the same) ...
    LCD_Write_Cmd(0xE0); // Positive Gamma Correction
 8001dd4:	20e0      	movs	r0, #224	@ 0xe0
 8001dd6:	f7ff fe99 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x0F);
 8001dda:	200f      	movs	r0, #15
 8001ddc:	f7ff feb6 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001de0:	2031      	movs	r0, #49	@ 0x31
 8001de2:	f7ff feb3 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x2B);
 8001de6:	202b      	movs	r0, #43	@ 0x2b
 8001de8:	f7ff feb0 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8001dec:	200c      	movs	r0, #12
 8001dee:	f7ff fead 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001df2:	200e      	movs	r0, #14
 8001df4:	f7ff feaa 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8001df8:	2008      	movs	r0, #8
 8001dfa:	f7ff fea7 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x4E);
 8001dfe:	204e      	movs	r0, #78	@ 0x4e
 8001e00:	f7ff fea4 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0xF1);
 8001e04:	20f1      	movs	r0, #241	@ 0xf1
 8001e06:	f7ff fea1 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x37);
 8001e0a:	2037      	movs	r0, #55	@ 0x37
 8001e0c:	f7ff fe9e 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x07);
 8001e10:	2007      	movs	r0, #7
 8001e12:	f7ff fe9b 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x10);
 8001e16:	2010      	movs	r0, #16
 8001e18:	f7ff fe98 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	f7ff fe95 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001e22:	200e      	movs	r0, #14
 8001e24:	f7ff fe92 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x09);
 8001e28:	2009      	movs	r0, #9
 8001e2a:	f7ff fe8f 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f7ff fe8c 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0xE1); // Negative Gamma Correction
 8001e34:	20e1      	movs	r0, #225	@ 0xe1
 8001e36:	f7ff fe69 	bl	8001b0c <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f7ff fe86 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001e40:	200e      	movs	r0, #14
 8001e42:	f7ff fe83 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x14);
 8001e46:	2014      	movs	r0, #20
 8001e48:	f7ff fe80 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f7ff fe7d 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x11);
 8001e52:	2011      	movs	r0, #17
 8001e54:	f7ff fe7a 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x07);
 8001e58:	2007      	movs	r0, #7
 8001e5a:	f7ff fe77 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001e5e:	2031      	movs	r0, #49	@ 0x31
 8001e60:	f7ff fe74 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 8001e64:	20c1      	movs	r0, #193	@ 0xc1
 8001e66:	f7ff fe71 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x48);
 8001e6a:	2048      	movs	r0, #72	@ 0x48
 8001e6c:	f7ff fe6e 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8001e70:	2008      	movs	r0, #8
 8001e72:	f7ff fe6b 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8001e76:	200f      	movs	r0, #15
 8001e78:	f7ff fe68 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8001e7c:	200c      	movs	r0, #12
 8001e7e:	f7ff fe65 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001e82:	2031      	movs	r0, #49	@ 0x31
 8001e84:	f7ff fe62 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x36);
 8001e88:	2036      	movs	r0, #54	@ 0x36
 8001e8a:	f7ff fe5f 	bl	8001b4c <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8001e8e:	200f      	movs	r0, #15
 8001e90:	f7ff fe5c 	bl	8001b4c <LCD_Write_Data>

    LCD_Write_Cmd(0x11); // Exit Sleep
 8001e94:	2011      	movs	r0, #17
 8001e96:	f7ff fe39 	bl	8001b0c <LCD_Write_Cmd>
    HAL_Delay(120);
 8001e9a:	2078      	movs	r0, #120	@ 0x78
 8001e9c:	f001 fb78 	bl	8003590 <HAL_Delay>
    LCD_Write_Cmd(0x29); // Display ON
 8001ea0:	2029      	movs	r0, #41	@ 0x29
 8001ea2:	f7ff fe33 	bl	8001b0c <LCD_Write_Cmd>

    Manual_LCD_Clear(COLOR_BLACK);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f000 f804 	bl	8001eb4 <Manual_LCD_Clear>

    // Enable touch interrupt
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40020400 	.word	0x40020400

08001eb4 <Manual_LCD_Clear>:

void Manual_LCD_Clear(uint16_t color)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	80fb      	strh	r3, [r7, #6]
    LCD_Set_Address_Window(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 8001ebe:	f240 133f 	movw	r3, #319	@ 0x13f
 8001ec2:	22ef      	movs	r2, #239	@ 0xef
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f7ff fe8e 	bl	8001be8 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ed2:	4815      	ldr	r0, [pc, #84]	@ (8001f28 <Manual_LCD_Clear+0x74>)
 8001ed4:	f003 f90e 	bl	80050f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2180      	movs	r1, #128	@ 0x80
 8001edc:	4812      	ldr	r0, [pc, #72]	@ (8001f28 <Manual_LCD_Clear+0x74>)
 8001ede:	f003 f909 	bl	80050f4 <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	723b      	strb	r3, [r7, #8]
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	e00a      	b.n	8001f0e <Manual_LCD_Clear+0x5a>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8001ef8:	f107 0108 	add.w	r1, r7, #8
 8001efc:	f04f 33ff 	mov.w	r3, #4294967295
 8001f00:	2202      	movs	r2, #2
 8001f02:	480a      	ldr	r0, [pc, #40]	@ (8001f2c <Manual_LCD_Clear+0x78>)
 8001f04:	f007 fc5b 	bl	80097be <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001f14:	d3f0      	bcc.n	8001ef8 <Manual_LCD_Clear+0x44>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001f16:	2201      	movs	r2, #1
 8001f18:	2180      	movs	r1, #128	@ 0x80
 8001f1a:	4803      	ldr	r0, [pc, #12]	@ (8001f28 <Manual_LCD_Clear+0x74>)
 8001f1c:	f003 f8ea 	bl	80050f4 <HAL_GPIO_WritePin>
}
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	20000688 	.word	0x20000688

08001f30 <Manual_LCD_DrawPixel>:

void Manual_LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	80fb      	strh	r3, [r7, #6]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	80bb      	strh	r3, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	807b      	strh	r3, [r7, #2]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	2bef      	cmp	r3, #239	@ 0xef
 8001f46:	d80e      	bhi.n	8001f66 <Manual_LCD_DrawPixel+0x36>
 8001f48:	88bb      	ldrh	r3, [r7, #4]
 8001f4a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001f4e:	d20a      	bcs.n	8001f66 <Manual_LCD_DrawPixel+0x36>
        return;
    LCD_Set_Address_Window(x, y, x, y);
 8001f50:	88bb      	ldrh	r3, [r7, #4]
 8001f52:	88fa      	ldrh	r2, [r7, #6]
 8001f54:	88b9      	ldrh	r1, [r7, #4]
 8001f56:	88f8      	ldrh	r0, [r7, #6]
 8001f58:	f7ff fe46 	bl	8001be8 <LCD_Set_Address_Window>
    LCD_Write_Data16(color);
 8001f5c:	887b      	ldrh	r3, [r7, #2]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fe14 	bl	8001b8c <LCD_Write_Data16>
 8001f64:	e000      	b.n	8001f68 <Manual_LCD_DrawPixel+0x38>
        return;
 8001f66:	bf00      	nop
}
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <Manual_LCD_DrawLine>:

void Manual_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8001f6e:	b590      	push	{r4, r7, lr}
 8001f70:	b087      	sub	sp, #28
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	4604      	mov	r4, r0
 8001f76:	4608      	mov	r0, r1
 8001f78:	4611      	mov	r1, r2
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	4623      	mov	r3, r4
 8001f7e:	80fb      	strh	r3, [r7, #6]
 8001f80:	4603      	mov	r3, r0
 8001f82:	80bb      	strh	r3, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001f8c:	883a      	ldrh	r2, [r7, #0]
 8001f8e:	88bb      	ldrh	r3, [r7, #4]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001f96:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001f9a:	8879      	ldrh	r1, [r7, #2]
 8001f9c:	88fb      	ldrh	r3, [r7, #6]
 8001f9e:	1acb      	subs	r3, r1, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	bfb8      	it	lt
 8001fa4:	425b      	neglt	r3, r3
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	bfcc      	ite	gt
 8001faa:	2301      	movgt	r3, #1
 8001fac:	2300      	movle	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	827b      	strh	r3, [r7, #18]
    if (steep)
 8001fb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00b      	beq.n	8001fd2 <Manual_LCD_DrawLine+0x64>
    {
        uint16_t temp;
        temp = x1;
 8001fba:	88fb      	ldrh	r3, [r7, #6]
 8001fbc:	823b      	strh	r3, [r7, #16]
        x1 = y1;
 8001fbe:	88bb      	ldrh	r3, [r7, #4]
 8001fc0:	80fb      	strh	r3, [r7, #6]
        y1 = temp;
 8001fc2:	8a3b      	ldrh	r3, [r7, #16]
 8001fc4:	80bb      	strh	r3, [r7, #4]
        temp = x2;
 8001fc6:	887b      	ldrh	r3, [r7, #2]
 8001fc8:	823b      	strh	r3, [r7, #16]
        x2 = y2;
 8001fca:	883b      	ldrh	r3, [r7, #0]
 8001fcc:	807b      	strh	r3, [r7, #2]
        y2 = temp;
 8001fce:	8a3b      	ldrh	r3, [r7, #16]
 8001fd0:	803b      	strh	r3, [r7, #0]
    }
    if (x1 > x2)
 8001fd2:	88fa      	ldrh	r2, [r7, #6]
 8001fd4:	887b      	ldrh	r3, [r7, #2]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d90b      	bls.n	8001ff2 <Manual_LCD_DrawLine+0x84>
    {
        uint16_t temp;
        temp = x1;
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	81fb      	strh	r3, [r7, #14]
        x1 = x2;
 8001fde:	887b      	ldrh	r3, [r7, #2]
 8001fe0:	80fb      	strh	r3, [r7, #6]
        x2 = temp;
 8001fe2:	89fb      	ldrh	r3, [r7, #14]
 8001fe4:	807b      	strh	r3, [r7, #2]
        temp = y1;
 8001fe6:	88bb      	ldrh	r3, [r7, #4]
 8001fe8:	81fb      	strh	r3, [r7, #14]
        y1 = y2;
 8001fea:	883b      	ldrh	r3, [r7, #0]
 8001fec:	80bb      	strh	r3, [r7, #4]
        y2 = temp;
 8001fee:	89fb      	ldrh	r3, [r7, #14]
 8001ff0:	803b      	strh	r3, [r7, #0]
    }
    int16_t dx = x2 - x1;
 8001ff2:	887a      	ldrh	r2, [r7, #2]
 8001ff4:	88fb      	ldrh	r3, [r7, #6]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	81bb      	strh	r3, [r7, #12]
    int16_t dy = abs(y2 - y1);
 8001ffc:	883a      	ldrh	r2, [r7, #0]
 8001ffe:	88bb      	ldrh	r3, [r7, #4]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	bfb8      	it	lt
 8002006:	425b      	neglt	r3, r3
 8002008:	817b      	strh	r3, [r7, #10]
    int16_t err = dx / 2;
 800200a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800200e:	0fda      	lsrs	r2, r3, #31
 8002010:	4413      	add	r3, r2
 8002012:	105b      	asrs	r3, r3, #1
 8002014:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;
    if (y1 < y2)
 8002016:	88ba      	ldrh	r2, [r7, #4]
 8002018:	883b      	ldrh	r3, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d202      	bcs.n	8002024 <Manual_LCD_DrawLine+0xb6>
        ystep = 1;
 800201e:	2301      	movs	r3, #1
 8002020:	82bb      	strh	r3, [r7, #20]
 8002022:	e029      	b.n	8002078 <Manual_LCD_DrawLine+0x10a>
    else
        ystep = -1;
 8002024:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002028:	82bb      	strh	r3, [r7, #20]

    for (; x1 <= x2; x1++)
 800202a:	e025      	b.n	8002078 <Manual_LCD_DrawLine+0x10a>
    {
        if (steep)
 800202c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <Manual_LCD_DrawLine+0xd4>
            Manual_LCD_DrawPixel(y1, x1, color);
 8002034:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002036:	88f9      	ldrh	r1, [r7, #6]
 8002038:	88bb      	ldrh	r3, [r7, #4]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff ff78 	bl	8001f30 <Manual_LCD_DrawPixel>
 8002040:	e005      	b.n	800204e <Manual_LCD_DrawLine+0xe0>
        else
            Manual_LCD_DrawPixel(x1, y1, color);
 8002042:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8002044:	88b9      	ldrh	r1, [r7, #4]
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff ff71 	bl	8001f30 <Manual_LCD_DrawPixel>
        err -= dy;
 800204e:	8afa      	ldrh	r2, [r7, #22]
 8002050:	897b      	ldrh	r3, [r7, #10]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	b29b      	uxth	r3, r3
 8002056:	82fb      	strh	r3, [r7, #22]
        if (err < 0)
 8002058:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800205c:	2b00      	cmp	r3, #0
 800205e:	da08      	bge.n	8002072 <Manual_LCD_DrawLine+0x104>
        {
            y1 += ystep;
 8002060:	8aba      	ldrh	r2, [r7, #20]
 8002062:	88bb      	ldrh	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8002068:	8afa      	ldrh	r2, [r7, #22]
 800206a:	89bb      	ldrh	r3, [r7, #12]
 800206c:	4413      	add	r3, r2
 800206e:	b29b      	uxth	r3, r3
 8002070:	82fb      	strh	r3, [r7, #22]
    for (; x1 <= x2; x1++)
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	3301      	adds	r3, #1
 8002076:	80fb      	strh	r3, [r7, #6]
 8002078:	88fa      	ldrh	r2, [r7, #6]
 800207a:	887b      	ldrh	r3, [r7, #2]
 800207c:	429a      	cmp	r2, r3
 800207e:	d9d5      	bls.n	800202c <Manual_LCD_DrawLine+0xbe>
        }
    }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	371c      	adds	r7, #28
 8002086:	46bd      	mov	sp, r7
 8002088:	bd90      	pop	{r4, r7, pc}

0800208a <Manual_LCD_DrawRectangle>:

void Manual_LCD_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 800208a:	b590      	push	{r4, r7, lr}
 800208c:	b085      	sub	sp, #20
 800208e:	af02      	add	r7, sp, #8
 8002090:	4604      	mov	r4, r0
 8002092:	4608      	mov	r0, r1
 8002094:	4611      	mov	r1, r2
 8002096:	461a      	mov	r2, r3
 8002098:	4623      	mov	r3, r4
 800209a:	80fb      	strh	r3, [r7, #6]
 800209c:	4603      	mov	r3, r0
 800209e:	80bb      	strh	r3, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
 80020a4:	4613      	mov	r3, r2
 80020a6:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	2bef      	cmp	r3, #239	@ 0xef
 80020ac:	d865      	bhi.n	800217a <Manual_LCD_DrawRectangle+0xf0>
 80020ae:	88bb      	ldrh	r3, [r7, #4]
 80020b0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80020b4:	d261      	bcs.n	800217a <Manual_LCD_DrawRectangle+0xf0>
        return;
    if ((x + width - 1) >= LCD_WIDTH)
 80020b6:	88fa      	ldrh	r2, [r7, #6]
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	4413      	add	r3, r2
 80020bc:	2bf0      	cmp	r3, #240	@ 0xf0
 80020be:	dd03      	ble.n	80020c8 <Manual_LCD_DrawRectangle+0x3e>
        width = LCD_WIDTH - x;
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80020c6:	807b      	strh	r3, [r7, #2]
    if ((y + height - 1) >= LCD_HEIGHT)
 80020c8:	88ba      	ldrh	r2, [r7, #4]
 80020ca:	883b      	ldrh	r3, [r7, #0]
 80020cc:	4413      	add	r3, r2
 80020ce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80020d2:	dd03      	ble.n	80020dc <Manual_LCD_DrawRectangle+0x52>
        height = LCD_HEIGHT - y;
 80020d4:	88bb      	ldrh	r3, [r7, #4]
 80020d6:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80020da:	803b      	strh	r3, [r7, #0]

    Manual_LCD_DrawLine(x, y, x + width - 1, y, color);
 80020dc:	88fa      	ldrh	r2, [r7, #6]
 80020de:	887b      	ldrh	r3, [r7, #2]
 80020e0:	4413      	add	r3, r2
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	3b01      	subs	r3, #1
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	88bc      	ldrh	r4, [r7, #4]
 80020ea:	88b9      	ldrh	r1, [r7, #4]
 80020ec:	88f8      	ldrh	r0, [r7, #6]
 80020ee:	8b3b      	ldrh	r3, [r7, #24]
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	4623      	mov	r3, r4
 80020f4:	f7ff ff3b 	bl	8001f6e <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y + height - 1, x + width - 1, y + height - 1, color);
 80020f8:	88ba      	ldrh	r2, [r7, #4]
 80020fa:	883b      	ldrh	r3, [r7, #0]
 80020fc:	4413      	add	r3, r2
 80020fe:	b29b      	uxth	r3, r3
 8002100:	3b01      	subs	r3, #1
 8002102:	b299      	uxth	r1, r3
 8002104:	88fa      	ldrh	r2, [r7, #6]
 8002106:	887b      	ldrh	r3, [r7, #2]
 8002108:	4413      	add	r3, r2
 800210a:	b29b      	uxth	r3, r3
 800210c:	3b01      	subs	r3, #1
 800210e:	b29c      	uxth	r4, r3
 8002110:	88ba      	ldrh	r2, [r7, #4]
 8002112:	883b      	ldrh	r3, [r7, #0]
 8002114:	4413      	add	r3, r2
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	88f8      	ldrh	r0, [r7, #6]
 800211e:	8b3b      	ldrh	r3, [r7, #24]
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	4613      	mov	r3, r2
 8002124:	4622      	mov	r2, r4
 8002126:	f7ff ff22 	bl	8001f6e <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y, x, y + height - 1, color);
 800212a:	88ba      	ldrh	r2, [r7, #4]
 800212c:	883b      	ldrh	r3, [r7, #0]
 800212e:	4413      	add	r3, r2
 8002130:	b29b      	uxth	r3, r3
 8002132:	3b01      	subs	r3, #1
 8002134:	b29c      	uxth	r4, r3
 8002136:	88fa      	ldrh	r2, [r7, #6]
 8002138:	88b9      	ldrh	r1, [r7, #4]
 800213a:	88f8      	ldrh	r0, [r7, #6]
 800213c:	8b3b      	ldrh	r3, [r7, #24]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	4623      	mov	r3, r4
 8002142:	f7ff ff14 	bl	8001f6e <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x + width - 1, y, x + width - 1, y + height - 1, color);
 8002146:	88fa      	ldrh	r2, [r7, #6]
 8002148:	887b      	ldrh	r3, [r7, #2]
 800214a:	4413      	add	r3, r2
 800214c:	b29b      	uxth	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b298      	uxth	r0, r3
 8002152:	88fa      	ldrh	r2, [r7, #6]
 8002154:	887b      	ldrh	r3, [r7, #2]
 8002156:	4413      	add	r3, r2
 8002158:	b29b      	uxth	r3, r3
 800215a:	3b01      	subs	r3, #1
 800215c:	b29c      	uxth	r4, r3
 800215e:	88ba      	ldrh	r2, [r7, #4]
 8002160:	883b      	ldrh	r3, [r7, #0]
 8002162:	4413      	add	r3, r2
 8002164:	b29b      	uxth	r3, r3
 8002166:	3b01      	subs	r3, #1
 8002168:	b29a      	uxth	r2, r3
 800216a:	88b9      	ldrh	r1, [r7, #4]
 800216c:	8b3b      	ldrh	r3, [r7, #24]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	4622      	mov	r2, r4
 8002174:	f7ff fefb 	bl	8001f6e <Manual_LCD_DrawLine>
 8002178:	e000      	b.n	800217c <Manual_LCD_DrawRectangle+0xf2>
        return;
 800217a:	bf00      	nop
}
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	bd90      	pop	{r4, r7, pc}
	...

08002184 <Manual_LCD_FillRectangle>:

void Manual_LCD_FillRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8002184:	b590      	push	{r4, r7, lr}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	4604      	mov	r4, r0
 800218c:	4608      	mov	r0, r1
 800218e:	4611      	mov	r1, r2
 8002190:	461a      	mov	r2, r3
 8002192:	4623      	mov	r3, r4
 8002194:	80fb      	strh	r3, [r7, #6]
 8002196:	4603      	mov	r3, r0
 8002198:	80bb      	strh	r3, [r7, #4]
 800219a:	460b      	mov	r3, r1
 800219c:	807b      	strh	r3, [r7, #2]
 800219e:	4613      	mov	r3, r2
 80021a0:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 80021a2:	88fb      	ldrh	r3, [r7, #6]
 80021a4:	2bef      	cmp	r3, #239	@ 0xef
 80021a6:	d855      	bhi.n	8002254 <Manual_LCD_FillRectangle+0xd0>
 80021a8:	88bb      	ldrh	r3, [r7, #4]
 80021aa:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80021ae:	d251      	bcs.n	8002254 <Manual_LCD_FillRectangle+0xd0>
        return;
    if ((x + width) > LCD_WIDTH)
 80021b0:	88fa      	ldrh	r2, [r7, #6]
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	4413      	add	r3, r2
 80021b6:	2bf0      	cmp	r3, #240	@ 0xf0
 80021b8:	dd03      	ble.n	80021c2 <Manual_LCD_FillRectangle+0x3e>
        width = LCD_WIDTH - x;
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80021c0:	807b      	strh	r3, [r7, #2]
    if ((y + height) > LCD_HEIGHT)
 80021c2:	88ba      	ldrh	r2, [r7, #4]
 80021c4:	883b      	ldrh	r3, [r7, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80021cc:	dd03      	ble.n	80021d6 <Manual_LCD_FillRectangle+0x52>
        height = LCD_HEIGHT - y;
 80021ce:	88bb      	ldrh	r3, [r7, #4]
 80021d0:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80021d4:	803b      	strh	r3, [r7, #0]

    LCD_Set_Address_Window(x, y, x + width - 1, y + height - 1);
 80021d6:	88fa      	ldrh	r2, [r7, #6]
 80021d8:	887b      	ldrh	r3, [r7, #2]
 80021da:	4413      	add	r3, r2
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29c      	uxth	r4, r3
 80021e2:	88ba      	ldrh	r2, [r7, #4]
 80021e4:	883b      	ldrh	r3, [r7, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	88b9      	ldrh	r1, [r7, #4]
 80021f0:	88f8      	ldrh	r0, [r7, #6]
 80021f2:	4622      	mov	r2, r4
 80021f4:	f7ff fcf8 	bl	8001be8 <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 80021f8:	2201      	movs	r2, #1
 80021fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80021fe:	4817      	ldr	r0, [pc, #92]	@ (800225c <Manual_LCD_FillRectangle+0xd8>)
 8002200:	f002 ff78 	bl	80050f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8002204:	2200      	movs	r2, #0
 8002206:	2180      	movs	r1, #128	@ 0x80
 8002208:	4814      	ldr	r0, [pc, #80]	@ (800225c <Manual_LCD_FillRectangle+0xd8>)
 800220a:	f002 ff73 	bl	80050f4 <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 800220e:	8c3b      	ldrh	r3, [r7, #32]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	b29b      	uxth	r3, r3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	723b      	strb	r3, [r7, #8]
 8002218:	8c3b      	ldrh	r3, [r7, #32]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	e00a      	b.n	800223a <Manual_LCD_FillRectangle+0xb6>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8002224:	f107 0108 	add.w	r1, r7, #8
 8002228:	f04f 33ff 	mov.w	r3, #4294967295
 800222c:	2202      	movs	r2, #2
 800222e:	480c      	ldr	r0, [pc, #48]	@ (8002260 <Manual_LCD_FillRectangle+0xdc>)
 8002230:	f007 fac5 	bl	80097be <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	3301      	adds	r3, #1
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	887b      	ldrh	r3, [r7, #2]
 800223c:	883a      	ldrh	r2, [r7, #0]
 800223e:	fb02 f303 	mul.w	r3, r2, r3
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	429a      	cmp	r2, r3
 8002246:	d3ed      	bcc.n	8002224 <Manual_LCD_FillRectangle+0xa0>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8002248:	2201      	movs	r2, #1
 800224a:	2180      	movs	r1, #128	@ 0x80
 800224c:	4803      	ldr	r0, [pc, #12]	@ (800225c <Manual_LCD_FillRectangle+0xd8>)
 800224e:	f002 ff51 	bl	80050f4 <HAL_GPIO_WritePin>
 8002252:	e000      	b.n	8002256 <Manual_LCD_FillRectangle+0xd2>
        return;
 8002254:	bf00      	nop
}
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	bd90      	pop	{r4, r7, pc}
 800225c:	40020400 	.word	0x40020400
 8002260:	20000688 	.word	0x20000688

08002264 <Manual_LCD_DrawChar>:
// A proper implementation would look up character data in a font table.
// Placeholder for font data - you need to define this
extern const unsigned char Font5x7[][5]; // Example: needs to be defined in font.c

void Manual_LCD_DrawChar(uint16_t x, uint16_t y, char c, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b087      	sub	sp, #28
 8002268:	af02      	add	r7, sp, #8
 800226a:	4604      	mov	r4, r0
 800226c:	4608      	mov	r0, r1
 800226e:	4611      	mov	r1, r2
 8002270:	461a      	mov	r2, r3
 8002272:	4623      	mov	r3, r4
 8002274:	80fb      	strh	r3, [r7, #6]
 8002276:	4603      	mov	r3, r0
 8002278:	80bb      	strh	r3, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	70fb      	strb	r3, [r7, #3]
 800227e:	4613      	mov	r3, r2
 8002280:	803b      	strh	r3, [r7, #0]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT || (x + 5 * size) > LCD_WIDTH || (y + 7 * size) > LCD_HEIGHT)
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	2bef      	cmp	r3, #239	@ 0xef
 8002286:	f200 80d1 	bhi.w	800242c <Manual_LCD_DrawChar+0x1c8>
 800228a:	88bb      	ldrh	r3, [r7, #4]
 800228c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002290:	f080 80cc 	bcs.w	800242c <Manual_LCD_DrawChar+0x1c8>
 8002294:	88f9      	ldrh	r1, [r7, #6]
 8002296:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	440b      	add	r3, r1
 80022a2:	2bf0      	cmp	r3, #240	@ 0xf0
 80022a4:	f300 80c2 	bgt.w	800242c <Manual_LCD_DrawChar+0x1c8>
 80022a8:	88b9      	ldrh	r1, [r7, #4]
 80022aa:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80022ae:	4613      	mov	r3, r2
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	440b      	add	r3, r1
 80022b6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80022ba:	f300 80b7 	bgt.w	800242c <Manual_LCD_DrawChar+0x1c8>
    {
        return; // Character won't fit
    }

    if (c < ' ' || c > '~')
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	2b1f      	cmp	r3, #31
 80022c2:	d902      	bls.n	80022ca <Manual_LCD_DrawChar+0x66>
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	2b7e      	cmp	r3, #126	@ 0x7e
 80022c8:	d901      	bls.n	80022ce <Manual_LCD_DrawChar+0x6a>
        c = '?'; // Handle non-printable characters
 80022ca:	233f      	movs	r3, #63	@ 0x3f
 80022cc:	70fb      	strb	r3, [r7, #3]

    for (uint8_t i = 0; i < 5; i++)
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
 80022d2:	e088      	b.n	80023e6 <Manual_LCD_DrawChar+0x182>
    { // Width of char
        uint8_t line = Font5x7[c - ' '][i];
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	f1a3 0220 	sub.w	r2, r3, #32
 80022da:	7bf9      	ldrb	r1, [r7, #15]
 80022dc:	4855      	ldr	r0, [pc, #340]	@ (8002434 <Manual_LCD_DrawChar+0x1d0>)
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	4403      	add	r3, r0
 80022e6:	440b      	add	r3, r1
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	737b      	strb	r3, [r7, #13]
 80022f0:	e073      	b.n	80023da <Manual_LCD_DrawChar+0x176>
        { // Height of char
            if (line & 0x01)
 80022f2:	7bbb      	ldrb	r3, [r7, #14]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d034      	beq.n	8002366 <Manual_LCD_DrawChar+0x102>
            { // Check bit
                if (size == 1)
 80022fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002300:	2b01      	cmp	r3, #1
 8002302:	d10e      	bne.n	8002322 <Manual_LCD_DrawChar+0xbe>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, charColor);
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	b29a      	uxth	r2, r3
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	4413      	add	r3, r2
 800230c:	b298      	uxth	r0, r3
 800230e:	7b7b      	ldrb	r3, [r7, #13]
 8002310:	b29a      	uxth	r2, r3
 8002312:	88bb      	ldrh	r3, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	b29b      	uxth	r3, r3
 8002318:	883a      	ldrh	r2, [r7, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	f7ff fe08 	bl	8001f30 <Manual_LCD_DrawPixel>
 8002320:	e055      	b.n	80023ce <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, charColor);
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	b29a      	uxth	r2, r3
 8002326:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800232a:	b29b      	uxth	r3, r3
 800232c:	fb12 f303 	smulbb	r3, r2, r3
 8002330:	b29a      	uxth	r2, r3
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	4413      	add	r3, r2
 8002336:	b298      	uxth	r0, r3
 8002338:	7b7b      	ldrb	r3, [r7, #13]
 800233a:	b29a      	uxth	r2, r3
 800233c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002340:	b29b      	uxth	r3, r3
 8002342:	fb12 f303 	smulbb	r3, r2, r3
 8002346:	b29a      	uxth	r2, r3
 8002348:	88bb      	ldrh	r3, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	b299      	uxth	r1, r3
 800234e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002352:	b29a      	uxth	r2, r3
 8002354:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002358:	b29c      	uxth	r4, r3
 800235a:	883b      	ldrh	r3, [r7, #0]
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	4623      	mov	r3, r4
 8002360:	f7ff ff10 	bl	8002184 <Manual_LCD_FillRectangle>
 8002364:	e033      	b.n	80023ce <Manual_LCD_DrawChar+0x16a>
                }
            }
            else
            {
                if (size == 1)
 8002366:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10e      	bne.n	800238c <Manual_LCD_DrawChar+0x128>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, bgColor);
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	b29a      	uxth	r2, r3
 8002372:	88fb      	ldrh	r3, [r7, #6]
 8002374:	4413      	add	r3, r2
 8002376:	b298      	uxth	r0, r3
 8002378:	7b7b      	ldrb	r3, [r7, #13]
 800237a:	b29a      	uxth	r2, r3
 800237c:	88bb      	ldrh	r3, [r7, #4]
 800237e:	4413      	add	r3, r2
 8002380:	b29b      	uxth	r3, r3
 8002382:	8c3a      	ldrh	r2, [r7, #32]
 8002384:	4619      	mov	r1, r3
 8002386:	f7ff fdd3 	bl	8001f30 <Manual_LCD_DrawPixel>
 800238a:	e020      	b.n	80023ce <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, bgColor);
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	b29a      	uxth	r2, r3
 8002390:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002394:	b29b      	uxth	r3, r3
 8002396:	fb12 f303 	smulbb	r3, r2, r3
 800239a:	b29a      	uxth	r2, r3
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	4413      	add	r3, r2
 80023a0:	b298      	uxth	r0, r3
 80023a2:	7b7b      	ldrb	r3, [r7, #13]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	fb12 f303 	smulbb	r3, r2, r3
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	88bb      	ldrh	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	b299      	uxth	r1, r3
 80023b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023bc:	b29a      	uxth	r2, r3
 80023be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023c2:	b29c      	uxth	r4, r3
 80023c4:	8c3b      	ldrh	r3, [r7, #32]
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	4623      	mov	r3, r4
 80023ca:	f7ff fedb 	bl	8002184 <Manual_LCD_FillRectangle>
                }
            }
            line >>= 1;
 80023ce:	7bbb      	ldrb	r3, [r7, #14]
 80023d0:	085b      	lsrs	r3, r3, #1
 80023d2:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 80023d4:	7b7b      	ldrb	r3, [r7, #13]
 80023d6:	3301      	adds	r3, #1
 80023d8:	737b      	strb	r3, [r7, #13]
 80023da:	7b7b      	ldrb	r3, [r7, #13]
 80023dc:	2b06      	cmp	r3, #6
 80023de:	d988      	bls.n	80022f2 <Manual_LCD_DrawChar+0x8e>
    for (uint8_t i = 0; i < 5; i++)
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	3301      	adds	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	f67f af73 	bls.w	80022d4 <Manual_LCD_DrawChar+0x70>
        }
    }
    // Draw a small gap for characters if size > 1 or if you want background fill for the gap
    if (size > 0)
 80023ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01b      	beq.n	800242e <Manual_LCD_DrawChar+0x1ca>
    { // Fill the column after the character (for spacing)
        Manual_LCD_FillRectangle(x + 5 * size, y, size, 7 * size, bgColor);
 80023f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	0092      	lsls	r2, r2, #2
 8002400:	4413      	add	r3, r2
 8002402:	b29a      	uxth	r2, r3
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	4413      	add	r3, r2
 8002408:	b298      	uxth	r0, r3
 800240a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800240e:	b29a      	uxth	r2, r3
 8002410:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002414:	b29b      	uxth	r3, r3
 8002416:	4619      	mov	r1, r3
 8002418:	00c9      	lsls	r1, r1, #3
 800241a:	1acb      	subs	r3, r1, r3
 800241c:	b29c      	uxth	r4, r3
 800241e:	88b9      	ldrh	r1, [r7, #4]
 8002420:	8c3b      	ldrh	r3, [r7, #32]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	4623      	mov	r3, r4
 8002426:	f7ff fead 	bl	8002184 <Manual_LCD_FillRectangle>
 800242a:	e000      	b.n	800242e <Manual_LCD_DrawChar+0x1ca>
        return; // Character won't fit
 800242c:	bf00      	nop
    }
}
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bd90      	pop	{r4, r7, pc}
 8002434:	0800de44 	.word	0x0800de44

08002438 <Manual_LCD_DrawString>:

void Manual_LCD_DrawString(uint16_t x, uint16_t y, const char *str, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b087      	sub	sp, #28
 800243c:	af02      	add	r7, sp, #8
 800243e:	60ba      	str	r2, [r7, #8]
 8002440:	461a      	mov	r2, r3
 8002442:	4603      	mov	r3, r0
 8002444:	81fb      	strh	r3, [r7, #14]
 8002446:	460b      	mov	r3, r1
 8002448:	81bb      	strh	r3, [r7, #12]
 800244a:	4613      	mov	r3, r2
 800244c:	80fb      	strh	r3, [r7, #6]
    while (*str)
 800244e:	e037      	b.n	80024c0 <Manual_LCD_DrawString+0x88>
    {
        Manual_LCD_DrawChar(x, y, *str, charColor, bgColor, size);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	781a      	ldrb	r2, [r3, #0]
 8002454:	88fc      	ldrh	r4, [r7, #6]
 8002456:	89b9      	ldrh	r1, [r7, #12]
 8002458:	89f8      	ldrh	r0, [r7, #14]
 800245a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	8c3b      	ldrh	r3, [r7, #32]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	4623      	mov	r3, r4
 8002466:	f7ff fefd 	bl	8002264 <Manual_LCD_DrawChar>
        x += 6 * size; // Advance X position (5 for char + 1 for spacing)
 800246a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800246e:	b29b      	uxth	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	0052      	lsls	r2, r2, #1
 8002474:	4413      	add	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	89fb      	ldrh	r3, [r7, #14]
 800247c:	4413      	add	r3, r2
 800247e:	81fb      	strh	r3, [r7, #14]
        if (x + 5 * size >= LCD_WIDTH)
 8002480:	89f9      	ldrh	r1, [r7, #14]
 8002482:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	440b      	add	r3, r1
 800248e:	2bef      	cmp	r3, #239	@ 0xef
 8002490:	dd09      	ble.n	80024a6 <Manual_LCD_DrawString+0x6e>
        { // Simple wrap
            x = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	81fb      	strh	r3, [r7, #14]
            y += 8 * size; // Advance Y position
 8002496:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800249a:	b29b      	uxth	r3, r3
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	b29a      	uxth	r2, r3
 80024a0:	89bb      	ldrh	r3, [r7, #12]
 80024a2:	4413      	add	r3, r2
 80024a4:	81bb      	strh	r3, [r7, #12]
        }
        if (y + 7 * size >= LCD_HEIGHT)
 80024a6:	89b9      	ldrh	r1, [r7, #12]
 80024a8:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80024ac:	4613      	mov	r3, r2
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	440b      	add	r3, r1
 80024b4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80024b8:	da07      	bge.n	80024ca <Manual_LCD_DrawString+0x92>
            break; // Out of screen
        str++;
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	3301      	adds	r3, #1
 80024be:	60bb      	str	r3, [r7, #8]
    while (*str)
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1c3      	bne.n	8002450 <Manual_LCD_DrawString+0x18>
    }
}
 80024c8:	e000      	b.n	80024cc <Manual_LCD_DrawString+0x94>
            break; // Out of screen
 80024ca:	bf00      	nop
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd90      	pop	{r4, r7, pc}

080024d4 <Manual_LCD_DrawLayout>:

void Manual_LCD_DrawLayout(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b09a      	sub	sp, #104	@ 0x68
 80024d8:	af02      	add	r7, sp, #8
    // Clear screen with blue background
    Manual_LCD_Clear(COLOR_BLUE);
 80024da:	201f      	movs	r0, #31
 80024dc:	f7ff fcea 	bl	8001eb4 <Manual_LCD_Clear>

    uint16_t text_color = COLOR_WHITE;
 80024e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024e4:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint16_t box_fill_color = COLOR_BLACK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    uint16_t box_border_color = COLOR_WHITE;
 80024ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024f2:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    uint8_t font_size = 1;
 80024f6:	2301      	movs	r3, #1
 80024f8:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
    uint8_t char_height = 7; // For 5x7 font at size 1
 80024fc:	2307      	movs	r3, #7
 80024fe:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
    // uint8_t char_width_with_spacing = 6; // For 5x7 font at size 1

    // 1. Top Info Box: "Nhom: [nhom 01]"
    const char *info_text = "Nhom: [nhom 01]";
 8002502:	4bb8      	ldr	r3, [pc, #736]	@ (80027e4 <Manual_LCD_DrawLayout+0x310>)
 8002504:	657b      	str	r3, [r7, #84]	@ 0x54
    uint16_t info_text_x = MARGIN + 5;
 8002506:	230f      	movs	r3, #15
 8002508:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t info_text_y = INFO_BOX_Y + (INFO_BOX_H - char_height * font_size) / 2;
 800250c:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002510:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8002514:	fb02 f303 	mul.w	r3, r2, r3
 8002518:	f1c3 031e 	rsb	r3, r3, #30
 800251c:	0fda      	lsrs	r2, r3, #31
 800251e:	4413      	add	r3, r2
 8002520:	105b      	asrs	r3, r3, #1
 8002522:	b29b      	uxth	r3, r3
 8002524:	330a      	adds	r3, #10
 8002526:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

    Manual_LCD_FillRectangle(MARGIN, INFO_BOX_Y, INFO_BOX_W, INFO_BOX_H, box_fill_color);
 800252a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	231e      	movs	r3, #30
 8002532:	2296      	movs	r2, #150	@ 0x96
 8002534:	210a      	movs	r1, #10
 8002536:	200a      	movs	r0, #10
 8002538:	f7ff fe24 	bl	8002184 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(MARGIN, INFO_BOX_Y, INFO_BOX_W, INFO_BOX_H, box_border_color);
 800253c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	231e      	movs	r3, #30
 8002544:	2296      	movs	r2, #150	@ 0x96
 8002546:	210a      	movs	r1, #10
 8002548:	200a      	movs	r0, #10
 800254a:	f7ff fd9e 	bl	800208a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(info_text_x, info_text_y, info_text, text_color, box_fill_color, font_size);
 800254e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002552:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 8002556:	f8b7 0052 	ldrh.w	r0, [r7, #82]	@ 0x52
 800255a:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	4613      	mov	r3, r2
 8002568:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800256a:	f7ff ff65 	bl	8002438 <Manual_LCD_DrawString>

    // 2. Task Boxes Grid
    uint16_t start_y_tasks_row1 = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 800256e:	233c      	movs	r3, #60	@ 0x3c
 8002570:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint16_t text_task_x_padding = 10; // Left padding for text inside task boxes
 8002574:	230a      	movs	r3, #10
 8002576:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    uint16_t text_task_y_offset = (TASK_BOX_H - char_height * font_size) / 2;
 800257a:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800257e:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8002582:	fb02 f303 	mul.w	r3, r2, r3
 8002586:	f1c3 0346 	rsb	r3, r3, #70	@ 0x46
 800258a:	0fda      	lsrs	r2, r3, #31
 800258c:	4413      	add	r3, r2
 800258e:	105b      	asrs	r3, r3, #1
 8002590:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

    // Task 02-1 (Top-Left)
    uint16_t task1_x = MARGIN;
 8002594:	230a      	movs	r3, #10
 8002596:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    uint16_t task1_y = start_y_tasks_row1;
 800259a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800259e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    const char *task1_text = "Task 02-1";
 80025a2:	4b91      	ldr	r3, [pc, #580]	@ (80027e8 <Manual_LCD_DrawLayout+0x314>)
 80025a4:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t text_task1_x = task1_x + text_task_x_padding;
 80025a6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80025aa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80025ae:	4413      	add	r3, r2
 80025b0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint16_t text_task1_y = task1_y + text_task_y_offset;
 80025b2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80025b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80025ba:	4413      	add	r3, r2
 80025bc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    Manual_LCD_FillRectangle(task1_x, task1_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 80025be:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80025c2:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 80025c6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2346      	movs	r3, #70	@ 0x46
 80025ce:	2269      	movs	r2, #105	@ 0x69
 80025d0:	f7ff fdd8 	bl	8002184 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task1_x, task1_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 80025d4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80025d8:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 80025dc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2346      	movs	r3, #70	@ 0x46
 80025e4:	2269      	movs	r2, #105	@ 0x69
 80025e6:	f7ff fd50 	bl	800208a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task1_x, text_task1_y, task1_text, text_color, box_fill_color, font_size);
 80025ea:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80025ee:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 80025f0:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 80025f2:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80025f6:	9301      	str	r3, [sp, #4]
 80025f8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	4613      	mov	r3, r2
 8002600:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002602:	f7ff ff19 	bl	8002438 <Manual_LCD_DrawString>

    // Task 02-2 (Top-Right)
    uint16_t task2_x = task1_x + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 8002606:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800260a:	3373      	adds	r3, #115	@ 0x73
 800260c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    uint16_t task2_y = start_y_tasks_row1;
 800260e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002612:	873b      	strh	r3, [r7, #56]	@ 0x38
    const char *task2_text = "Task 02-2";
 8002614:	4b75      	ldr	r3, [pc, #468]	@ (80027ec <Manual_LCD_DrawLayout+0x318>)
 8002616:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t text_task2_x = task2_x + text_task_x_padding;
 8002618:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800261a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800261e:	4413      	add	r3, r2
 8002620:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t text_task2_y = task2_y + text_task_y_offset;
 8002622:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002624:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002628:	4413      	add	r3, r2
 800262a:	863b      	strh	r3, [r7, #48]	@ 0x30
    Manual_LCD_FillRectangle(task2_x, task2_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 800262c:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800262e:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 8002630:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	2346      	movs	r3, #70	@ 0x46
 8002638:	2269      	movs	r2, #105	@ 0x69
 800263a:	f7ff fda3 	bl	8002184 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task2_x, task2_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 800263e:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002640:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 8002642:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2346      	movs	r3, #70	@ 0x46
 800264a:	2269      	movs	r2, #105	@ 0x69
 800264c:	f7ff fd1d 	bl	800208a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task2_x, text_task2_y, task2_text, text_color, box_fill_color, font_size);
 8002650:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002654:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8002656:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 8002658:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	4613      	mov	r3, r2
 8002666:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002668:	f7ff fee6 	bl	8002438 <Manual_LCD_DrawString>

    // Second row of task boxes
    uint16_t start_y_tasks_row2 = start_y_tasks_row1 + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 800266c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002670:	3350      	adds	r3, #80	@ 0x50
 8002672:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Task 02-3 (Bottom-Left)
    uint16_t task3_x = MARGIN;
 8002674:	230a      	movs	r3, #10
 8002676:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t task3_y = start_y_tasks_row2;
 8002678:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800267a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    const char *task3_text = "Task 02-3";
 800267c:	4b5c      	ldr	r3, [pc, #368]	@ (80027f0 <Manual_LCD_DrawLayout+0x31c>)
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t text_task3_x = task3_x + text_task_x_padding;
 8002680:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002682:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002686:	4413      	add	r3, r2
 8002688:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t text_task3_y = task3_y + text_task_y_offset;
 800268a:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 800268c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002690:	4413      	add	r3, r2
 8002692:	843b      	strh	r3, [r7, #32]
    Manual_LCD_FillRectangle(task3_x, task3_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 8002694:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8002696:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 8002698:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	2346      	movs	r3, #70	@ 0x46
 80026a0:	2269      	movs	r2, #105	@ 0x69
 80026a2:	f7ff fd6f 	bl	8002184 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task3_x, task3_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 80026a6:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80026a8:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 80026aa:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2346      	movs	r3, #70	@ 0x46
 80026b2:	2269      	movs	r2, #105	@ 0x69
 80026b4:	f7ff fce9 	bl	800208a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task3_x, text_task3_y, task3_text, text_color, box_fill_color, font_size);
 80026b8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80026bc:	8c39      	ldrh	r1, [r7, #32]
 80026be:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80026c0:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4613      	mov	r3, r2
 80026ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026d0:	f7ff feb2 	bl	8002438 <Manual_LCD_DrawString>

    // Task 02-4 (Bottom-Right)
    uint16_t task4_x = task1_x + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 80026d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80026d8:	3373      	adds	r3, #115	@ 0x73
 80026da:	83fb      	strh	r3, [r7, #30]
    uint16_t task4_y = start_y_tasks_row2;
 80026dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80026de:	83bb      	strh	r3, [r7, #28]
    const char *task4_text = "Task 02-4";
 80026e0:	4b44      	ldr	r3, [pc, #272]	@ (80027f4 <Manual_LCD_DrawLayout+0x320>)
 80026e2:	61bb      	str	r3, [r7, #24]
    uint16_t text_task4_x = task4_x + text_task_x_padding;
 80026e4:	8bfa      	ldrh	r2, [r7, #30]
 80026e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80026ea:	4413      	add	r3, r2
 80026ec:	82fb      	strh	r3, [r7, #22]
    uint16_t text_task4_y = task4_y + text_task_y_offset;
 80026ee:	8bba      	ldrh	r2, [r7, #28]
 80026f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80026f4:	4413      	add	r3, r2
 80026f6:	82bb      	strh	r3, [r7, #20]
    Manual_LCD_FillRectangle(task4_x, task4_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 80026f8:	8bb9      	ldrh	r1, [r7, #28]
 80026fa:	8bf8      	ldrh	r0, [r7, #30]
 80026fc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	2346      	movs	r3, #70	@ 0x46
 8002704:	2269      	movs	r2, #105	@ 0x69
 8002706:	f7ff fd3d 	bl	8002184 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task4_x, task4_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 800270a:	8bb9      	ldrh	r1, [r7, #28]
 800270c:	8bf8      	ldrh	r0, [r7, #30]
 800270e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	2346      	movs	r3, #70	@ 0x46
 8002716:	2269      	movs	r2, #105	@ 0x69
 8002718:	f7ff fcb7 	bl	800208a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task4_x, text_task4_y, task4_text, text_color, box_fill_color, font_size);
 800271c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002720:	8ab9      	ldrh	r1, [r7, #20]
 8002722:	8af8      	ldrh	r0, [r7, #22]
 8002724:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	4613      	mov	r3, r2
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	f7ff fe80 	bl	8002438 <Manual_LCD_DrawString>

    // 3. Back Button
    const char *back_button_text = "<<Back";
 8002738:	4b2f      	ldr	r3, [pc, #188]	@ (80027f8 <Manual_LCD_DrawLayout+0x324>)
 800273a:	613b      	str	r3, [r7, #16]
    uint16_t back_button_text_len = strlen(back_button_text);
 800273c:	6938      	ldr	r0, [r7, #16]
 800273e:	f7fd fd51 	bl	80001e4 <strlen>
 8002742:	4603      	mov	r3, r0
 8002744:	81fb      	strh	r3, [r7, #14]
    uint16_t back_button_text_pixel_width = back_button_text_len * 6 * font_size; // 6 is char width with spacing for 5x7 font
 8002746:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800274a:	b29b      	uxth	r3, r3
 800274c:	89fa      	ldrh	r2, [r7, #14]
 800274e:	fb12 f303 	smulbb	r3, r2, r3
 8002752:	b29b      	uxth	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	0052      	lsls	r2, r2, #1
 8002758:	4413      	add	r3, r2
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	81bb      	strh	r3, [r7, #12]

    uint16_t back_button_y = start_y_tasks_row2 + TASK_BOX_H + TASK_TO_BACK_BUTTON_SPACING;
 800275e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002760:	335a      	adds	r3, #90	@ 0x5a
 8002762:	817b      	strh	r3, [r7, #10]
    uint16_t back_button_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 8002764:	237d      	movs	r3, #125	@ 0x7d
 8002766:	813b      	strh	r3, [r7, #8]
    uint16_t text_button_x = back_button_x + (BACK_BUTTON_W - back_button_text_pixel_width) / 2;
 8002768:	89bb      	ldrh	r3, [r7, #12]
 800276a:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 800276e:	0fda      	lsrs	r2, r3, #31
 8002770:	4413      	add	r3, r2
 8002772:	105b      	asrs	r3, r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	893b      	ldrh	r3, [r7, #8]
 8002778:	4413      	add	r3, r2
 800277a:	80fb      	strh	r3, [r7, #6]
    uint16_t text_button_y = back_button_y + (BACK_BUTTON_H - char_height * font_size) / 2;
 800277c:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002780:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8002784:	fb02 f303 	mul.w	r3, r2, r3
 8002788:	f1c3 032d 	rsb	r3, r3, #45	@ 0x2d
 800278c:	0fda      	lsrs	r2, r3, #31
 800278e:	4413      	add	r3, r2
 8002790:	105b      	asrs	r3, r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	897b      	ldrh	r3, [r7, #10]
 8002796:	4413      	add	r3, r2
 8002798:	80bb      	strh	r3, [r7, #4]

    Manual_LCD_FillRectangle(back_button_x, back_button_y, BACK_BUTTON_W, BACK_BUTTON_H, box_fill_color);
 800279a:	8979      	ldrh	r1, [r7, #10]
 800279c:	8938      	ldrh	r0, [r7, #8]
 800279e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	232d      	movs	r3, #45	@ 0x2d
 80027a6:	225a      	movs	r2, #90	@ 0x5a
 80027a8:	f7ff fcec 	bl	8002184 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(back_button_x, back_button_y, BACK_BUTTON_W, BACK_BUTTON_H, box_border_color);
 80027ac:	8979      	ldrh	r1, [r7, #10]
 80027ae:	8938      	ldrh	r0, [r7, #8]
 80027b0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	232d      	movs	r3, #45	@ 0x2d
 80027b8:	225a      	movs	r2, #90	@ 0x5a
 80027ba:	f7ff fc66 	bl	800208a <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_button_x, text_button_y, back_button_text, text_color, box_fill_color, font_size);
 80027be:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80027c2:	88b9      	ldrh	r1, [r7, #4]
 80027c4:	88f8      	ldrh	r0, [r7, #6]
 80027c6:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80027ca:	9301      	str	r3, [sp, #4]
 80027cc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	4613      	mov	r3, r2
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	f7ff fe2f 	bl	8002438 <Manual_LCD_DrawString>
}
 80027da:	bf00      	nop
 80027dc:	3760      	adds	r7, #96	@ 0x60
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	0800dd98 	.word	0x0800dd98
 80027e8:	0800dda8 	.word	0x0800dda8
 80027ec:	0800ddb4 	.word	0x0800ddb4
 80027f0:	0800ddc0 	.word	0x0800ddc0
 80027f4:	0800ddcc 	.word	0x0800ddcc
 80027f8:	0800ddd8 	.word	0x0800ddd8

080027fc <Manual_LCD_UpdateInfoText>:

// New function to update the info text
void Manual_LCD_UpdateInfoText(const char *new_text)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8
 8002802:	6078      	str	r0, [r7, #4]
    uint8_t font_size = 1;
 8002804:	2301      	movs	r3, #1
 8002806:	75fb      	strb	r3, [r7, #23]
    uint8_t char_height = 7; // For 5x7 font at size 1
 8002808:	2307      	movs	r3, #7
 800280a:	75bb      	strb	r3, [r7, #22]

    uint16_t text_color = COLOR_WHITE;     // Original text color from DrawLayout
 800280c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002810:	82bb      	strh	r3, [r7, #20]
    uint16_t box_fill_color = COLOR_BLACK; // Original box fill color from DrawLayout
 8002812:	2300      	movs	r3, #0
 8002814:	827b      	strh	r3, [r7, #18]

    uint16_t info_text_x = MARGIN + 5;
 8002816:	230f      	movs	r3, #15
 8002818:	823b      	strh	r3, [r7, #16]
    uint16_t info_text_y = INFO_BOX_Y + (INFO_BOX_H - char_height * font_size) / 2;
 800281a:	7dbb      	ldrb	r3, [r7, #22]
 800281c:	7dfa      	ldrb	r2, [r7, #23]
 800281e:	fb02 f303 	mul.w	r3, r2, r3
 8002822:	f1c3 031e 	rsb	r3, r3, #30
 8002826:	0fda      	lsrs	r2, r3, #31
 8002828:	4413      	add	r3, r2
 800282a:	105b      	asrs	r3, r3, #1
 800282c:	b29b      	uxth	r3, r3
 800282e:	330a      	adds	r3, #10
 8002830:	81fb      	strh	r3, [r7, #14]

    // Clear the inner part of the info box where text resides
    // The border is 1px, so we fill from x+1, y+1 with width-2, height-2
    Manual_LCD_FillRectangle(MARGIN + 1, INFO_BOX_Y + 1, INFO_BOX_W - 2, INFO_BOX_H - 2, box_fill_color);
 8002832:	8a7b      	ldrh	r3, [r7, #18]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	231c      	movs	r3, #28
 8002838:	2294      	movs	r2, #148	@ 0x94
 800283a:	210b      	movs	r1, #11
 800283c:	200b      	movs	r0, #11
 800283e:	f7ff fca1 	bl	8002184 <Manual_LCD_FillRectangle>

    // Draw the new string with original text color and original box fill as background
    Manual_LCD_DrawString(info_text_x, info_text_y, new_text, text_color, box_fill_color, font_size);
 8002842:	8aba      	ldrh	r2, [r7, #20]
 8002844:	89f9      	ldrh	r1, [r7, #14]
 8002846:	8a38      	ldrh	r0, [r7, #16]
 8002848:	7dfb      	ldrb	r3, [r7, #23]
 800284a:	9301      	str	r3, [sp, #4]
 800284c:	8a7b      	ldrh	r3, [r7, #18]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	4613      	mov	r3, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	f7ff fdf0 	bl	8002438 <Manual_LCD_DrawString>
}
 8002858:	bf00      	nop
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <Manual_LCD_RefillTaskBox>:

// New function to refill a task box and redraw its text
void Manual_LCD_RefillTaskBox(const char *task_name, uint16_t new_fill_color)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	@ 0x28
 8002864:	af02      	add	r7, sp, #8
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
    uint16_t original_text_color = COLOR_WHITE;
 800286c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002870:	82fb      	strh	r3, [r7, #22]
    uint16_t original_box_border_color = COLOR_WHITE;
 8002872:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002876:	82bb      	strh	r3, [r7, #20]
    uint8_t font_size = 1;
 8002878:	2301      	movs	r3, #1
 800287a:	74fb      	strb	r3, [r7, #19]
    uint8_t char_height = 7; // For 5x7 font at size 1
 800287c:	2307      	movs	r3, #7
 800287e:	74bb      	strb	r3, [r7, #18]

    uint16_t text_task_x_padding = 10;
 8002880:	230a      	movs	r3, #10
 8002882:	823b      	strh	r3, [r7, #16]
    uint16_t text_task_y_offset = (TASK_BOX_H - char_height * font_size) / 2;
 8002884:	7cbb      	ldrb	r3, [r7, #18]
 8002886:	7cfa      	ldrb	r2, [r7, #19]
 8002888:	fb02 f303 	mul.w	r3, r2, r3
 800288c:	f1c3 0346 	rsb	r3, r3, #70	@ 0x46
 8002890:	0fda      	lsrs	r2, r3, #31
 8002892:	4413      	add	r3, r2
 8002894:	105b      	asrs	r3, r3, #1
 8002896:	81fb      	strh	r3, [r7, #14]

    uint16_t current_task_x = 0, current_task_y = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	83fb      	strh	r3, [r7, #30]
 800289c:	2300      	movs	r3, #0
 800289e:	83bb      	strh	r3, [r7, #28]
    uint16_t text_draw_x = 0, text_draw_y = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	81bb      	strh	r3, [r7, #12]
 80028a4:	2300      	movs	r3, #0
 80028a6:	817b      	strh	r3, [r7, #10]
    const char *original_task_text_content = "";
 80028a8:	4b30      	ldr	r3, [pc, #192]	@ (800296c <Manual_LCD_RefillTaskBox+0x10c>)
 80028aa:	61bb      	str	r3, [r7, #24]

    if (strcmp(task_name, "Task 02-1") == 0)
 80028ac:	4930      	ldr	r1, [pc, #192]	@ (8002970 <Manual_LCD_RefillTaskBox+0x110>)
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fd fc8e 	bl	80001d0 <strcmp>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <Manual_LCD_RefillTaskBox+0x68>
    {
        current_task_x = MARGIN;
 80028ba:	230a      	movs	r3, #10
 80028bc:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 80028be:	233c      	movs	r3, #60	@ 0x3c
 80028c0:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-1";
 80028c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002970 <Manual_LCD_RefillTaskBox+0x110>)
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	e028      	b.n	800291a <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-2") == 0)
 80028c8:	492a      	ldr	r1, [pc, #168]	@ (8002974 <Manual_LCD_RefillTaskBox+0x114>)
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7fd fc80 	bl	80001d0 <strcmp>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <Manual_LCD_RefillTaskBox+0x84>
    {
        current_task_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 80028d6:	237d      	movs	r3, #125	@ 0x7d
 80028d8:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 80028da:	233c      	movs	r3, #60	@ 0x3c
 80028dc:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-2";
 80028de:	4b25      	ldr	r3, [pc, #148]	@ (8002974 <Manual_LCD_RefillTaskBox+0x114>)
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	e01a      	b.n	800291a <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-3") == 0)
 80028e4:	4924      	ldr	r1, [pc, #144]	@ (8002978 <Manual_LCD_RefillTaskBox+0x118>)
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f7fd fc72 	bl	80001d0 <strcmp>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <Manual_LCD_RefillTaskBox+0xa0>
    {
        current_task_x = MARGIN;
 80028f2:	230a      	movs	r3, #10
 80028f4:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 80028f6:	238c      	movs	r3, #140	@ 0x8c
 80028f8:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-3";
 80028fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002978 <Manual_LCD_RefillTaskBox+0x118>)
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	e00c      	b.n	800291a <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-4") == 0)
 8002900:	491e      	ldr	r1, [pc, #120]	@ (800297c <Manual_LCD_RefillTaskBox+0x11c>)
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fd fc64 	bl	80001d0 <strcmp>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d129      	bne.n	8002962 <Manual_LCD_RefillTaskBox+0x102>
    {
        current_task_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 800290e:	237d      	movs	r3, #125	@ 0x7d
 8002910:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8002912:	238c      	movs	r3, #140	@ 0x8c
 8002914:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-4";
 8002916:	4b19      	ldr	r3, [pc, #100]	@ (800297c <Manual_LCD_RefillTaskBox+0x11c>)
 8002918:	61bb      	str	r3, [r7, #24]
    else
    {
        return; // Unknown task name, do nothing
    }

    text_draw_x = current_task_x + text_task_x_padding;
 800291a:	8bfa      	ldrh	r2, [r7, #30]
 800291c:	8a3b      	ldrh	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	81bb      	strh	r3, [r7, #12]
    text_draw_y = current_task_y + text_task_y_offset;
 8002922:	8bba      	ldrh	r2, [r7, #28]
 8002924:	89fb      	ldrh	r3, [r7, #14]
 8002926:	4413      	add	r3, r2
 8002928:	817b      	strh	r3, [r7, #10]

    // 1. Refill the entire task box with the new color
    Manual_LCD_FillRectangle(current_task_x, current_task_y, TASK_BOX_W_CALC, TASK_BOX_H, new_fill_color);
 800292a:	8bb9      	ldrh	r1, [r7, #28]
 800292c:	8bf8      	ldrh	r0, [r7, #30]
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2346      	movs	r3, #70	@ 0x46
 8002934:	2269      	movs	r2, #105	@ 0x69
 8002936:	f7ff fc25 	bl	8002184 <Manual_LCD_FillRectangle>

    // 2. Redraw the border
    Manual_LCD_DrawRectangle(current_task_x, current_task_y, TASK_BOX_W_CALC, TASK_BOX_H, original_box_border_color);
 800293a:	8bb9      	ldrh	r1, [r7, #28]
 800293c:	8bf8      	ldrh	r0, [r7, #30]
 800293e:	8abb      	ldrh	r3, [r7, #20]
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	2346      	movs	r3, #70	@ 0x46
 8002944:	2269      	movs	r2, #105	@ 0x69
 8002946:	f7ff fba0 	bl	800208a <Manual_LCD_DrawRectangle>

    // 3. Redraw the original text using the original text color and the new_fill_color as background
    Manual_LCD_DrawString(text_draw_x, text_draw_y, original_task_text_content, original_text_color, new_fill_color, font_size);
 800294a:	8afa      	ldrh	r2, [r7, #22]
 800294c:	8979      	ldrh	r1, [r7, #10]
 800294e:	89b8      	ldrh	r0, [r7, #12]
 8002950:	7cfb      	ldrb	r3, [r7, #19]
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	f7ff fd6c 	bl	8002438 <Manual_LCD_DrawString>
 8002960:	e000      	b.n	8002964 <Manual_LCD_RefillTaskBox+0x104>
        return; // Unknown task name, do nothing
 8002962:	bf00      	nop
 8002964:	3720      	adds	r7, #32
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	0800dde0 	.word	0x0800dde0
 8002970:	0800dda8 	.word	0x0800dda8
 8002974:	0800ddb4 	.word	0x0800ddb4
 8002978:	0800ddc0 	.word	0x0800ddc0
 800297c:	0800ddcc 	.word	0x0800ddcc

08002980 <TP_Read_ADC_Raw>:
Coordinate CalScreenSample[3]; // Raw ADC values from touch panel for calibration points

// Low-level SPI communication for touch
// Sends 1 byte command, receives 2 bytes data (12-bit ADC value)
static uint16_t TP_Read_ADC_Raw(uint8_t cmd)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_byte = cmd;
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buffer[2] = {0, 0};
 800298e:	2300      	movs	r3, #0
 8002990:	813b      	strh	r3, [r7, #8]
    uint16_t adc_val = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	81fb      	strh	r3, [r7, #14]

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET); // Select touch controller
 8002996:	2200      	movs	r2, #0
 8002998:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800299c:	4815      	ldr	r0, [pc, #84]	@ (80029f4 <TP_Read_ADC_Raw+0x74>)
 800299e:	f002 fba9 	bl	80050f4 <HAL_GPIO_WritePin>

    // Send command byte
    HAL_SPI_Transmit(g_hspi_touch_ptr, &tx_byte, 1, HAL_MAX_DELAY);
 80029a2:	4b15      	ldr	r3, [pc, #84]	@ (80029f8 <TP_Read_ADC_Raw+0x78>)
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	f107 010d 	add.w	r1, r7, #13
 80029aa:	f04f 33ff 	mov.w	r3, #4294967295
 80029ae:	2201      	movs	r2, #1
 80029b0:	f006 ff05 	bl	80097be <HAL_SPI_Transmit>

    // Receive 2 data bytes. Some controllers might need dummy clocks before data is valid.
    // For XPT2046/ADS7846, data usually follows directly.
    HAL_SPI_Receive(g_hspi_touch_ptr, rx_buffer, 2, HAL_MAX_DELAY);
 80029b4:	4b10      	ldr	r3, [pc, #64]	@ (80029f8 <TP_Read_ADC_Raw+0x78>)
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	f107 0108 	add.w	r1, r7, #8
 80029bc:	f04f 33ff 	mov.w	r3, #4294967295
 80029c0:	2202      	movs	r2, #2
 80029c2:	f007 f840 	bl	8009a46 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect
 80029c6:	2201      	movs	r2, #1
 80029c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029cc:	4809      	ldr	r0, [pc, #36]	@ (80029f4 <TP_Read_ADC_Raw+0x74>)
 80029ce:	f002 fb91 	bl	80050f4 <HAL_GPIO_WritePin>

    adc_val = (rx_buffer[0] << 8) | rx_buffer[1];
 80029d2:	7a3b      	ldrb	r3, [r7, #8]
 80029d4:	b21b      	sxth	r3, r3
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	b21a      	sxth	r2, r3
 80029da:	7a7b      	ldrb	r3, [r7, #9]
 80029dc:	b21b      	sxth	r3, r3
 80029de:	4313      	orrs	r3, r2
 80029e0:	b21b      	sxth	r3, r3
 80029e2:	81fb      	strh	r3, [r7, #14]
    adc_val >>= 3; // Keep the most significant 12 bits (XPT2046 specific, D0 is at bit 3 of second byte)
 80029e4:	89fb      	ldrh	r3, [r7, #14]
 80029e6:	08db      	lsrs	r3, r3, #3
 80029e8:	81fb      	strh	r3, [r7, #14]
                   // Original code used >>4, which might be for a different ADC alignment or resolution.
                   // If raw values are consistently too low or high, this shift might need adjustment.
    return adc_val;
 80029ea:	89fb      	ldrh	r3, [r7, #14]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40020000 	.word	0x40020000
 80029f8:	20000080 	.word	0x20000080

080029fc <Manual_Touch_Init>:

void Manual_Touch_Init(SPI_HandleTypeDef *hspi_touch)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
    g_hspi_touch_ptr = hspi_touch;
 8002a04:	4a06      	ldr	r2, [pc, #24]	@ (8002a20 <Manual_Touch_Init+0x24>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6013      	str	r3, [r2, #0]
    // GPIOs for TP_CS (PA9) and TP_IRQ (PB4) are assumed to be initialized
    // in main.c's MX_GPIO_Init() as Output PP and Input Pull-up respectively.
    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect touch controller initially
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a10:	4804      	ldr	r0, [pc, #16]	@ (8002a24 <Manual_Touch_Init+0x28>)
 8002a12:	f002 fb6f 	bl	80050f4 <HAL_GPIO_WritePin>
}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000080 	.word	0x20000080
 8002a24:	40020000 	.word	0x40020000

08002a28 <Manual_Touch_GetRawPoint>:
    // TP_IRQ_Pin is low when pressed (assuming pull-up resistor is enabled)
    return (HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == GPIO_PIN_RESET);
}

uint8_t Manual_Touch_GetRawPoint(Coordinate *rawPoint)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
    // Đọc một mẫu đơn giản để debug
    rawPoint->x = TP_Read_ADC_Raw(TP_CMD_READ_X);
 8002a30:	20d0      	movs	r0, #208	@ 0xd0
 8002a32:	f7ff ffa5 	bl	8002980 <TP_Read_ADC_Raw>
 8002a36:	4603      	mov	r3, r0
 8002a38:	461a      	mov	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	801a      	strh	r2, [r3, #0]
    rawPoint->y = TP_Read_ADC_Raw(TP_CMD_READ_Y);
 8002a3e:	2090      	movs	r0, #144	@ 0x90
 8002a40:	f7ff ff9e 	bl	8002980 <TP_Read_ADC_Raw>
 8002a44:	4603      	mov	r3, r0
 8002a46:	461a      	mov	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	805a      	strh	r2, [r3, #2]

    // Trả về thành công mà không kiểm tra
    return 1;
 8002a4c:	2301      	movs	r3, #1
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <Manual_Touch_ApplyCalibration>:
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    return 1; // Success
}

uint8_t Manual_Touch_ApplyCalibration(Coordinate *displayPoint, const Coordinate *screenPoint)
{
 8002a58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
    if (touchMatrix.Divider == 0)
 8002a64:	4b64      	ldr	r3, [pc, #400]	@ (8002bf8 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002a66:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	f7fe f839 	bl	8000ae8 <__aeabi_dcmpeq>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d023      	beq.n	8002ac4 <Manual_Touch_ApplyCalibration+0x6c>
    { // Not calibrated or calibration failed
        // Fallback: direct scaling (highly inaccurate without calibration)
        displayPoint->x = (uint16_t)(((long)screenPoint->x * LCD_WIDTH) / 4095);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	461a      	mov	r2, r3
 8002a82:	4613      	mov	r3, r2
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	4a5c      	ldr	r2, [pc, #368]	@ (8002bfc <Manual_Touch_ApplyCalibration+0x1a4>)
 8002a8c:	fb82 1203 	smull	r1, r2, r2, r3
 8002a90:	441a      	add	r2, r3
 8002a92:	12d2      	asrs	r2, r2, #11
 8002a94:	17db      	asrs	r3, r3, #31
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	801a      	strh	r2, [r3, #0]
        displayPoint->y = (uint16_t)(((long)screenPoint->y * LCD_HEIGHT) / 4095);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	885b      	ldrh	r3, [r3, #2]
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	019b      	lsls	r3, r3, #6
 8002aac:	4a53      	ldr	r2, [pc, #332]	@ (8002bfc <Manual_Touch_ApplyCalibration+0x1a4>)
 8002aae:	fb82 1203 	smull	r1, r2, r2, r3
 8002ab2:	441a      	add	r2, r3
 8002ab4:	12d2      	asrs	r2, r2, #11
 8002ab6:	17db      	asrs	r3, r3, #31
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	805a      	strh	r2, [r3, #2]
        return 0; // Indicated that calibration matrix was not used
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e094      	b.n	8002bee <Manual_Touch_ApplyCalibration+0x196>
    }

    // Apply calibration matrix
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002ac4:	4b4c      	ldr	r3, [pc, #304]	@ (8002bf8 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002ac6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fd fd38 	bl	8000544 <__aeabi_i2d>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4620      	mov	r0, r4
 8002ada:	4629      	mov	r1, r5
 8002adc:	f7fd fd9c 	bl	8000618 <__aeabi_dmul>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4690      	mov	r8, r2
 8002ae6:	4699      	mov	r9, r3
                                  (touchMatrix.Bn * screenPoint->y) +
 8002ae8:	4b43      	ldr	r3, [pc, #268]	@ (8002bf8 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002aea:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	885b      	ldrh	r3, [r3, #2]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd fd26 	bl	8000544 <__aeabi_i2d>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4620      	mov	r0, r4
 8002afe:	4629      	mov	r1, r5
 8002b00:	f7fd fd8a 	bl	8000618 <__aeabi_dmul>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002b08:	4640      	mov	r0, r8
 8002b0a:	4649      	mov	r1, r9
 8002b0c:	f7fd fbce 	bl	80002ac <__adddf3>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
                                  touchMatrix.Cn) /
 8002b18:	4b37      	ldr	r3, [pc, #220]	@ (8002bf8 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b1a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
                                  (touchMatrix.Bn * screenPoint->y) +
 8002b1e:	f7fd fbc5 	bl	80002ac <__adddf3>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 8002b2a:	4b33      	ldr	r3, [pc, #204]	@ (8002bf8 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b2c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Cn) /
 8002b30:	f7fd fe9c 	bl	800086c <__aeabi_ddiv>
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	f7fe f806 	bl	8000b4c <__aeabi_d2uiz>
 8002b40:	4603      	mov	r3, r0
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	801a      	strh	r2, [r3, #0]
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002b48:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b4a:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd fcf6 	bl	8000544 <__aeabi_i2d>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	4629      	mov	r1, r5
 8002b60:	f7fd fd5a 	bl	8000618 <__aeabi_dmul>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4690      	mov	r8, r2
 8002b6a:	4699      	mov	r9, r3
                                  (touchMatrix.En * screenPoint->y) +
 8002b6c:	4b22      	ldr	r3, [pc, #136]	@ (8002bf8 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b6e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	885b      	ldrh	r3, [r3, #2]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fce4 	bl	8000544 <__aeabi_i2d>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4620      	mov	r0, r4
 8002b82:	4629      	mov	r1, r5
 8002b84:	f7fd fd48 	bl	8000618 <__aeabi_dmul>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002b8c:	4640      	mov	r0, r8
 8002b8e:	4649      	mov	r1, r9
 8002b90:	f7fd fb8c 	bl	80002ac <__adddf3>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4619      	mov	r1, r3
                                  touchMatrix.Fn) /
 8002b9c:	4b16      	ldr	r3, [pc, #88]	@ (8002bf8 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002b9e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
                                  (touchMatrix.En * screenPoint->y) +
 8002ba2:	f7fd fb83 	bl	80002ac <__adddf3>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 8002bae:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002bb0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Fn) /
 8002bb4:	f7fd fe5a 	bl	800086c <__aeabi_ddiv>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002bbc:	4610      	mov	r0, r2
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	f7fd ffc4 	bl	8000b4c <__aeabi_d2uiz>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	805a      	strh	r2, [r3, #2]

    // Constrain to LCD boundaries
    if (displayPoint->x >= LCD_WIDTH)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	2bef      	cmp	r3, #239	@ 0xef
 8002bd2:	d902      	bls.n	8002bda <Manual_Touch_ApplyCalibration+0x182>
        displayPoint->x = LCD_WIDTH - 1;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	22ef      	movs	r2, #239	@ 0xef
 8002bd8:	801a      	strh	r2, [r3, #0]
    if (displayPoint->y >= LCD_HEIGHT)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	885b      	ldrh	r3, [r3, #2]
 8002bde:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002be2:	d303      	bcc.n	8002bec <Manual_Touch_ApplyCalibration+0x194>
        displayPoint->y = LCD_HEIGHT - 1;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f240 123f 	movw	r2, #319	@ 0x13f
 8002bea:	805a      	strh	r2, [r3, #2]
    // Note: long double might produce negative intermediate results if raw values are way off.
    // Casting to uint16_t will wrap. Consider clamping if signed intermediates are possible.
    // For typical touch values, this should be fine.

    return 1; // Calibration matrix used
 8002bec:	2301      	movs	r3, #1
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bf8:	20000088 	.word	0x20000088
 8002bfc:	80080081 	.word	0x80080081

08002c00 <SD_Init>:
/**
 * @brief  Khởi tạo SD Card và file system
 * @retval uint8_t: 1 nếu thành công, 0 nếu thất bại
 */
uint8_t SD_Init(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
    FRESULT fresult;

    // Nếu đã khởi tạo rồi thì không khởi tạo lại
    if (sd_initialized)
 8002c06:	4b10      	ldr	r3, [pc, #64]	@ (8002c48 <SD_Init+0x48>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <SD_Init+0x12>
    {
        return 1;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e016      	b.n	8002c40 <SD_Init+0x40>
    }

    // Khởi tạo SD Card qua giao diện SDIO
    if (BSP_SD_Init() != MSD_OK)
 8002c12:	f008 f869 	bl	800ace8 <BSP_SD_Init>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <SD_Init+0x20>
    {
        return 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e00f      	b.n	8002c40 <SD_Init+0x40>
    }

    // Mount file system
    fresult = f_mount(&sdFatFs, "", 1);
 8002c20:	2201      	movs	r2, #1
 8002c22:	490a      	ldr	r1, [pc, #40]	@ (8002c4c <SD_Init+0x4c>)
 8002c24:	480a      	ldr	r0, [pc, #40]	@ (8002c50 <SD_Init+0x50>)
 8002c26:	f009 ff4f 	bl	800cac8 <f_mount>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	71fb      	strb	r3, [r7, #7]
    if (fresult != FR_OK)
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <SD_Init+0x38>
    {
        return 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e003      	b.n	8002c40 <SD_Init+0x40>
    }

    sd_initialized = 1;
 8002c38:	4b03      	ldr	r3, [pc, #12]	@ (8002c48 <SD_Init+0x48>)
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	701a      	strb	r2, [r3, #0]
    return 1;
 8002c3e:	2301      	movs	r3, #1
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	200002f0 	.word	0x200002f0
 8002c4c:	0800dde4 	.word	0x0800dde4
 8002c50:	200000c0 	.word	0x200000c0

08002c54 <SD_ReadFile>:
 * @param  buffer: Buffer để lưu dữ liệu đọc được
 * @param  buffer_size: Kích thước của buffer
 * @retval int: Số byte đọc được, -1 nếu có lỗi
 */
int SD_ReadFile(const char *filename, char *buffer, uint32_t buffer_size)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002c60:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002c64:	6018      	str	r0, [r3, #0]
 8002c66:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002c6a:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002c6e:	6019      	str	r1, [r3, #0]
 8002c70:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002c74:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002c78:	601a      	str	r2, [r3, #0]
    FIL file;
    FRESULT fresult;
    UINT bytesRead = 0;
 8002c7a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002c7e:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]

    // Kiểm tra SD đã khởi tạo chưa
    if (!sd_initialized)
 8002c86:	4b35      	ldr	r3, [pc, #212]	@ (8002d5c <SD_ReadFile+0x108>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d107      	bne.n	8002c9e <SD_ReadFile+0x4a>
    {
        if (!SD_Init())
 8002c8e:	f7ff ffb7 	bl	8002c00 <SD_Init>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d102      	bne.n	8002c9e <SD_ReadFile+0x4a>
        {
            return -1;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9c:	e059      	b.n	8002d52 <SD_ReadFile+0xfe>
        }
    }

    // Mở file để đọc
    fresult = f_open(&file, filename, FA_READ);
 8002c9e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002ca2:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8002ca6:	f107 0018 	add.w	r0, r7, #24
 8002caa:	2201      	movs	r2, #1
 8002cac:	6819      	ldr	r1, [r3, #0]
 8002cae:	f009 ff51 	bl	800cb54 <f_open>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b
    if (fresult != FR_OK)
 8002cb8:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <SD_ReadFile+0x72>
    {
        return -1;
 8002cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc4:	e045      	b.n	8002d52 <SD_ReadFile+0xfe>
    }

    // Xác định kích thước cần đọc
    UINT size_to_read = f_size(&file);
 8002cc6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002cca:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    if (size_to_read >= buffer_size)
 8002cd4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002cd8:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002cdc:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d307      	bcc.n	8002cf6 <SD_ReadFile+0xa2>
    {
        size_to_read = buffer_size - 1;
 8002ce6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002cea:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
    }

    // Đọc dữ liệu từ file
    fresult = f_read(&file, buffer, size_to_read, &bytesRead);
 8002cf6:	f107 0314 	add.w	r3, r7, #20
 8002cfa:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8002cfe:	f5a2 7112 	sub.w	r1, r2, #584	@ 0x248
 8002d02:	f107 0018 	add.w	r0, r7, #24
 8002d06:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8002d0a:	6809      	ldr	r1, [r1, #0]
 8002d0c:	f00a f8dc 	bl	800cec8 <f_read>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f887 324b 	strb.w	r3, [r7, #587]	@ 0x24b

    // Đóng file
    f_close(&file);
 8002d16:	f107 0318 	add.w	r3, r7, #24
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f00a fa91 	bl	800d242 <f_close>

    if (fresult != FR_OK)
 8002d20:	f897 324b 	ldrb.w	r3, [r7, #587]	@ 0x24b
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <SD_ReadFile+0xda>
    {
        return -1;
 8002d28:	f04f 33ff 	mov.w	r3, #4294967295
 8002d2c:	e011      	b.n	8002d52 <SD_ReadFile+0xfe>
    }

    // Thêm null terminator nếu đọc chuỗi
    buffer[bytesRead] = '\0';
 8002d2e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002d32:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8002d3c:	f5a2 7212 	sub.w	r2, r2, #584	@ 0x248
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	4413      	add	r3, r2
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]

    return bytesRead;
 8002d48:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8002d4c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002d50:	681b      	ldr	r3, [r3, #0]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	200002f0 	.word	0x200002f0

08002d60 <SD_ReadTeamFile>:
 * @param  buffer: Buffer để lưu dữ liệu đọc được
 * @param  buffer_size: Kích thước buffer
 * @retval int: Số byte đọc được, -1 nếu có lỗi
 */
int SD_ReadTeamFile(char *buffer, uint32_t buffer_size)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
    return SD_ReadFile(FILE_NAME, buffer, buffer_size);
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	4804      	ldr	r0, [pc, #16]	@ (8002d80 <SD_ReadTeamFile+0x20>)
 8002d70:	f7ff ff70 	bl	8002c54 <SD_ReadFile>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4618      	mov	r0, r3
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	0800ddf4 	.word	0x0800ddf4

08002d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	607b      	str	r3, [r7, #4]
 8002d8e:	4b10      	ldr	r3, [pc, #64]	@ (8002dd0 <HAL_MspInit+0x4c>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d92:	4a0f      	ldr	r2, [pc, #60]	@ (8002dd0 <HAL_MspInit+0x4c>)
 8002d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd0 <HAL_MspInit+0x4c>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002da2:	607b      	str	r3, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	603b      	str	r3, [r7, #0]
 8002daa:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <HAL_MspInit+0x4c>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	4a08      	ldr	r2, [pc, #32]	@ (8002dd0 <HAL_MspInit+0x4c>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <HAL_MspInit+0x4c>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800

08002dd4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a0b      	ldr	r2, [pc, #44]	@ (8002e10 <HAL_ADC_MspInit+0x3c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d10d      	bne.n	8002e02 <HAL_ADC_MspInit+0x2e>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
 8002dea:	4b0a      	ldr	r3, [pc, #40]	@ (8002e14 <HAL_ADC_MspInit+0x40>)
 8002dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dee:	4a09      	ldr	r2, [pc, #36]	@ (8002e14 <HAL_ADC_MspInit+0x40>)
 8002df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002df6:	4b07      	ldr	r3, [pc, #28]	@ (8002e14 <HAL_ADC_MspInit+0x40>)
 8002df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002e02:	bf00      	nop
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	40012000 	.word	0x40012000
 8002e14:	40023800 	.word	0x40023800

08002e18 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08c      	sub	sp, #48	@ 0x30
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	f107 031c 	add.w	r3, r7, #28
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a4b      	ldr	r2, [pc, #300]	@ (8002f64 <HAL_CAN_MspInit+0x14c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d13e      	bne.n	8002eb8 <HAL_CAN_MspInit+0xa0>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002e3a:	4b4b      	ldr	r3, [pc, #300]	@ (8002f68 <HAL_CAN_MspInit+0x150>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	4a49      	ldr	r2, [pc, #292]	@ (8002f68 <HAL_CAN_MspInit+0x150>)
 8002e42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002e44:	4b48      	ldr	r3, [pc, #288]	@ (8002f68 <HAL_CAN_MspInit+0x150>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10d      	bne.n	8002e68 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61bb      	str	r3, [r7, #24]
 8002e50:	4b46      	ldr	r3, [pc, #280]	@ (8002f6c <HAL_CAN_MspInit+0x154>)
 8002e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e54:	4a45      	ldr	r2, [pc, #276]	@ (8002f6c <HAL_CAN_MspInit+0x154>)
 8002e56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e5c:	4b43      	ldr	r3, [pc, #268]	@ (8002f6c <HAL_CAN_MspInit+0x154>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8002f6c <HAL_CAN_MspInit+0x154>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e70:	4a3e      	ldr	r2, [pc, #248]	@ (8002f6c <HAL_CAN_MspInit+0x154>)
 8002e72:	f043 0301 	orr.w	r3, r3, #1
 8002e76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e78:	4b3c      	ldr	r3, [pc, #240]	@ (8002f6c <HAL_CAN_MspInit+0x154>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e84:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e92:	2303      	movs	r3, #3
 8002e94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002e96:	2309      	movs	r3, #9
 8002e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9a:	f107 031c 	add.w	r3, r7, #28
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4833      	ldr	r0, [pc, #204]	@ (8002f70 <HAL_CAN_MspInit+0x158>)
 8002ea2:	f001 ff73 	bl	8004d8c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	2013      	movs	r0, #19
 8002eac:	f001 fef9 	bl	8004ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002eb0:	2013      	movs	r0, #19
 8002eb2:	f001 ff12 	bl	8004cda <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002eb6:	e050      	b.n	8002f5a <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8002f74 <HAL_CAN_MspInit+0x15c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d14b      	bne.n	8002f5a <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	4b29      	ldr	r3, [pc, #164]	@ (8002f6c <HAL_CAN_MspInit+0x154>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	4a28      	ldr	r2, [pc, #160]	@ (8002f6c <HAL_CAN_MspInit+0x154>)
 8002ecc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ed2:	4b26      	ldr	r3, [pc, #152]	@ (8002f6c <HAL_CAN_MspInit+0x154>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002ede:	4b22      	ldr	r3, [pc, #136]	@ (8002f68 <HAL_CAN_MspInit+0x150>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	4a20      	ldr	r2, [pc, #128]	@ (8002f68 <HAL_CAN_MspInit+0x150>)
 8002ee6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002ee8:	4b1f      	ldr	r3, [pc, #124]	@ (8002f68 <HAL_CAN_MspInit+0x150>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d10d      	bne.n	8002f0c <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <HAL_CAN_MspInit+0x154>)
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f6c <HAL_CAN_MspInit+0x154>)
 8002efa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f00:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <HAL_CAN_MspInit+0x154>)
 8002f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	4b16      	ldr	r3, [pc, #88]	@ (8002f6c <HAL_CAN_MspInit+0x154>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f14:	4a15      	ldr	r2, [pc, #84]	@ (8002f6c <HAL_CAN_MspInit+0x154>)
 8002f16:	f043 0302 	orr.w	r3, r3, #2
 8002f1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1c:	4b13      	ldr	r3, [pc, #76]	@ (8002f6c <HAL_CAN_MspInit+0x154>)
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002f28:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f36:	2303      	movs	r3, #3
 8002f38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002f3a:	2309      	movs	r3, #9
 8002f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3e:	f107 031c 	add.w	r3, r7, #28
 8002f42:	4619      	mov	r1, r3
 8002f44:	480c      	ldr	r0, [pc, #48]	@ (8002f78 <HAL_CAN_MspInit+0x160>)
 8002f46:	f001 ff21 	bl	8004d8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	2040      	movs	r0, #64	@ 0x40
 8002f50:	f001 fea7 	bl	8004ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002f54:	2040      	movs	r0, #64	@ 0x40
 8002f56:	f001 fec0 	bl	8004cda <HAL_NVIC_EnableIRQ>
}
 8002f5a:	bf00      	nop
 8002f5c:	3730      	adds	r7, #48	@ 0x30
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40006400 	.word	0x40006400
 8002f68:	200002f4 	.word	0x200002f4
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40020000 	.word	0x40020000
 8002f74:	40006800 	.word	0x40006800
 8002f78:	40020400 	.word	0x40020400

08002f7c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	@ 0x28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a26      	ldr	r2, [pc, #152]	@ (8003034 <HAL_I2C_MspInit+0xb8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d145      	bne.n	800302a <HAL_I2C_MspInit+0xae>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	4b25      	ldr	r3, [pc, #148]	@ (8003038 <HAL_I2C_MspInit+0xbc>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	4a24      	ldr	r2, [pc, #144]	@ (8003038 <HAL_I2C_MspInit+0xbc>)
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fae:	4b22      	ldr	r3, [pc, #136]	@ (8003038 <HAL_I2C_MspInit+0xbc>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin;
 8002fba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fc0:	2312      	movs	r3, #18
 8002fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002fcc:	2304      	movs	r3, #4
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8002fd0:	f107 0314 	add.w	r3, r7, #20
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4819      	ldr	r0, [pc, #100]	@ (800303c <HAL_I2C_MspInit+0xc0>)
 8002fd8:	f001 fed8 	bl	8004d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDA_Pin;
 8002fdc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fe2:	2312      	movs	r3, #18
 8002fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fea:	2303      	movs	r3, #3
 8002fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002fee:	2304      	movs	r3, #4
 8002ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8002ff2:	f107 0314 	add.w	r3, r7, #20
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4810      	ldr	r0, [pc, #64]	@ (800303c <HAL_I2C_MspInit+0xc0>)
 8002ffa:	f001 fec7 	bl	8004d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60fb      	str	r3, [r7, #12]
 8003002:	4b0d      	ldr	r3, [pc, #52]	@ (8003038 <HAL_I2C_MspInit+0xbc>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003006:	4a0c      	ldr	r2, [pc, #48]	@ (8003038 <HAL_I2C_MspInit+0xbc>)
 8003008:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800300c:	6413      	str	r3, [r2, #64]	@ 0x40
 800300e:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <HAL_I2C_MspInit+0xbc>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800301a:	2200      	movs	r2, #0
 800301c:	2100      	movs	r1, #0
 800301e:	2021      	movs	r0, #33	@ 0x21
 8003020:	f001 fe3f 	bl	8004ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003024:	2021      	movs	r0, #33	@ 0x21
 8003026:	f001 fe58 	bl	8004cda <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800302a:	bf00      	nop
 800302c:	3728      	adds	r7, #40	@ 0x28
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40005800 	.word	0x40005800
 8003038:	40023800 	.word	0x40023800
 800303c:	40020400 	.word	0x40020400

08003040 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b08a      	sub	sp, #40	@ 0x28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a2c      	ldr	r2, [pc, #176]	@ (8003110 <HAL_SD_MspInit+0xd0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d152      	bne.n	8003108 <HAL_SD_MspInit+0xc8>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	4b2b      	ldr	r3, [pc, #172]	@ (8003114 <HAL_SD_MspInit+0xd4>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306a:	4a2a      	ldr	r2, [pc, #168]	@ (8003114 <HAL_SD_MspInit+0xd4>)
 800306c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003070:	6453      	str	r3, [r2, #68]	@ 0x44
 8003072:	4b28      	ldr	r3, [pc, #160]	@ (8003114 <HAL_SD_MspInit+0xd4>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	4b24      	ldr	r3, [pc, #144]	@ (8003114 <HAL_SD_MspInit+0xd4>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	4a23      	ldr	r2, [pc, #140]	@ (8003114 <HAL_SD_MspInit+0xd4>)
 8003088:	f043 0304 	orr.w	r3, r3, #4
 800308c:	6313      	str	r3, [r2, #48]	@ 0x30
 800308e:	4b21      	ldr	r3, [pc, #132]	@ (8003114 <HAL_SD_MspInit+0xd4>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	4b1d      	ldr	r3, [pc, #116]	@ (8003114 <HAL_SD_MspInit+0xd4>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003114 <HAL_SD_MspInit+0xd4>)
 80030a4:	f043 0308 	orr.w	r3, r3, #8
 80030a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80030aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003114 <HAL_SD_MspInit+0xd4>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80030b6:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80030ba:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030bc:	2302      	movs	r3, #2
 80030be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c0:	2300      	movs	r3, #0
 80030c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030c4:	2303      	movs	r3, #3
 80030c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80030c8:	230c      	movs	r3, #12
 80030ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030cc:	f107 0314 	add.w	r3, r7, #20
 80030d0:	4619      	mov	r1, r3
 80030d2:	4811      	ldr	r0, [pc, #68]	@ (8003118 <HAL_SD_MspInit+0xd8>)
 80030d4:	f001 fe5a 	bl	8004d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030d8:	2304      	movs	r3, #4
 80030da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030dc:	2302      	movs	r3, #2
 80030de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e4:	2303      	movs	r3, #3
 80030e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80030e8:	230c      	movs	r3, #12
 80030ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	4619      	mov	r1, r3
 80030f2:	480a      	ldr	r0, [pc, #40]	@ (800311c <HAL_SD_MspInit+0xdc>)
 80030f4:	f001 fe4a 	bl	8004d8c <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80030f8:	2200      	movs	r2, #0
 80030fa:	2100      	movs	r1, #0
 80030fc:	2031      	movs	r0, #49	@ 0x31
 80030fe:	f001 fdd0 	bl	8004ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003102:	2031      	movs	r0, #49	@ 0x31
 8003104:	f001 fde9 	bl	8004cda <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 8003108:	bf00      	nop
 800310a:	3728      	adds	r7, #40	@ 0x28
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40023800 	.word	0x40023800
 8003118:	40020800 	.word	0x40020800
 800311c:	40020c00 	.word	0x40020c00

08003120 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	@ 0x28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003128:	f107 0314 	add.w	r3, r7, #20
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a28      	ldr	r2, [pc, #160]	@ (80031e0 <HAL_SPI_MspInit+0xc0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d149      	bne.n	80031d6 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	4b27      	ldr	r3, [pc, #156]	@ (80031e4 <HAL_SPI_MspInit+0xc4>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314a:	4a26      	ldr	r2, [pc, #152]	@ (80031e4 <HAL_SPI_MspInit+0xc4>)
 800314c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003150:	6453      	str	r3, [r2, #68]	@ 0x44
 8003152:	4b24      	ldr	r3, [pc, #144]	@ (80031e4 <HAL_SPI_MspInit+0xc4>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003156:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	4b20      	ldr	r3, [pc, #128]	@ (80031e4 <HAL_SPI_MspInit+0xc4>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	4a1f      	ldr	r2, [pc, #124]	@ (80031e4 <HAL_SPI_MspInit+0xc4>)
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	6313      	str	r3, [r2, #48]	@ 0x30
 800316e:	4b1d      	ldr	r3, [pc, #116]	@ (80031e4 <HAL_SPI_MspInit+0xc4>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	4b19      	ldr	r3, [pc, #100]	@ (80031e4 <HAL_SPI_MspInit+0xc4>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	4a18      	ldr	r2, [pc, #96]	@ (80031e4 <HAL_SPI_MspInit+0xc4>)
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	6313      	str	r3, [r2, #48]	@ 0x30
 800318a:	4b16      	ldr	r3, [pc, #88]	@ (80031e4 <HAL_SPI_MspInit+0xc4>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin|MOSI_Pin;
 8003196:	23c0      	movs	r3, #192	@ 0xc0
 8003198:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2302      	movs	r3, #2
 800319c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031a2:	2303      	movs	r3, #3
 80031a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031a6:	2305      	movs	r3, #5
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031aa:	f107 0314 	add.w	r3, r7, #20
 80031ae:	4619      	mov	r1, r3
 80031b0:	480d      	ldr	r0, [pc, #52]	@ (80031e8 <HAL_SPI_MspInit+0xc8>)
 80031b2:	f001 fdeb 	bl	8004d8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCLK_Pin;
 80031b6:	2308      	movs	r3, #8
 80031b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ba:	2302      	movs	r3, #2
 80031bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031c2:	2303      	movs	r3, #3
 80031c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031c6:	2305      	movs	r3, #5
 80031c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCLK_GPIO_Port, &GPIO_InitStruct);
 80031ca:	f107 0314 	add.w	r3, r7, #20
 80031ce:	4619      	mov	r1, r3
 80031d0:	4806      	ldr	r0, [pc, #24]	@ (80031ec <HAL_SPI_MspInit+0xcc>)
 80031d2:	f001 fddb 	bl	8004d8c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80031d6:	bf00      	nop
 80031d8:	3728      	adds	r7, #40	@ 0x28
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40013000 	.word	0x40013000
 80031e4:	40023800 	.word	0x40023800
 80031e8:	40020000 	.word	0x40020000
 80031ec:	40020400 	.word	0x40020400

080031f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031f4:	bf00      	nop
 80031f6:	e7fd      	b.n	80031f4 <NMI_Handler+0x4>

080031f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031fc:	bf00      	nop
 80031fe:	e7fd      	b.n	80031fc <HardFault_Handler+0x4>

08003200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003204:	bf00      	nop
 8003206:	e7fd      	b.n	8003204 <MemManage_Handler+0x4>

08003208 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800320c:	bf00      	nop
 800320e:	e7fd      	b.n	800320c <BusFault_Handler+0x4>

08003210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003214:	bf00      	nop
 8003216:	e7fd      	b.n	8003214 <UsageFault_Handler+0x4>

08003218 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003226:	b480      	push	{r7}
 8003228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003246:	f000 f983 	bl	8003550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}

0800324e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8003252:	2010      	movs	r0, #16
 8003254:	f001 ff82 	bl	800515c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003258:	bf00      	nop
 800325a:	bd80      	pop	{r7, pc}

0800325c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003260:	4802      	ldr	r0, [pc, #8]	@ (800326c <CAN1_TX_IRQHandler+0x10>)
 8003262:	f001 f9ef 	bl	8004644 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	200006e4 	.word	0x200006e4

08003270 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003274:	4802      	ldr	r0, [pc, #8]	@ (8003280 <I2C2_EV_IRQHandler+0x10>)
 8003276:	f002 fc0f 	bl	8005a98 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800327a:	bf00      	nop
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	200004ac 	.word	0x200004ac

08003284 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003288:	4802      	ldr	r0, [pc, #8]	@ (8003294 <SDIO_IRQHandler+0x10>)
 800328a:	f005 fbf7 	bl	8008a7c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800328e:	bf00      	nop
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20000600 	.word	0x20000600

08003298 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800329c:	4802      	ldr	r0, [pc, #8]	@ (80032a8 <CAN2_RX0_IRQHandler+0x10>)
 800329e:	f001 f9d1 	bl	8004644 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80032a2:	bf00      	nop
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	200005a4 	.word	0x200005a4

080032ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032b4:	4a14      	ldr	r2, [pc, #80]	@ (8003308 <_sbrk+0x5c>)
 80032b6:	4b15      	ldr	r3, [pc, #84]	@ (800330c <_sbrk+0x60>)
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032c0:	4b13      	ldr	r3, [pc, #76]	@ (8003310 <_sbrk+0x64>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032c8:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <_sbrk+0x64>)
 80032ca:	4a12      	ldr	r2, [pc, #72]	@ (8003314 <_sbrk+0x68>)
 80032cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032ce:	4b10      	ldr	r3, [pc, #64]	@ (8003310 <_sbrk+0x64>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d207      	bcs.n	80032ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032dc:	f00a f862 	bl	800d3a4 <__errno>
 80032e0:	4603      	mov	r3, r0
 80032e2:	220c      	movs	r2, #12
 80032e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032e6:	f04f 33ff 	mov.w	r3, #4294967295
 80032ea:	e009      	b.n	8003300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032ec:	4b08      	ldr	r3, [pc, #32]	@ (8003310 <_sbrk+0x64>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032f2:	4b07      	ldr	r3, [pc, #28]	@ (8003310 <_sbrk+0x64>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	4a05      	ldr	r2, [pc, #20]	@ (8003310 <_sbrk+0x64>)
 80032fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032fe:	68fb      	ldr	r3, [r7, #12]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20020000 	.word	0x20020000
 800330c:	00000400 	.word	0x00000400
 8003310:	200002f8 	.word	0x200002f8
 8003314:	20000b88 	.word	0x20000b88

08003318 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800331c:	4b06      	ldr	r3, [pc, #24]	@ (8003338 <SystemInit+0x20>)
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003322:	4a05      	ldr	r2, [pc, #20]	@ (8003338 <SystemInit+0x20>)
 8003324:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003328:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <Task2_LedBlink>:

/**
 * @brief Thực hiện một lần nháy (toggle) LED và delay cho Task 2.
 */
void Task2_LedBlink(GPIO_TypeDef *ledPort, uint16_t ledPin, uint32_t blinkSpeed_ms) // Sử dụng tên hàm mới (nếu đổi)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	460b      	mov	r3, r1
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	817b      	strh	r3, [r7, #10]
  HAL_GPIO_TogglePin(ledPort, ledPin);
 800334a:	897b      	ldrh	r3, [r7, #10]
 800334c:	4619      	mov	r1, r3
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f001 fee9 	bl	8005126 <HAL_GPIO_TogglePin>
  HAL_Delay(blinkSpeed_ms);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 f91b 	bl	8003590 <HAL_Delay>
}
 800335a:	bf00      	nop
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <Read_Internal_Temperature>:

float Read_Internal_Temperature(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
  uint32_t adc_value = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	60fb      	str	r3, [r7, #12]
  float temperature_celsius = 0.0f;
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]

  HAL_ADC_Start(&hadc1);                                // Khởi động ADC1
 8003374:	481b      	ldr	r0, [pc, #108]	@ (80033e4 <Read_Internal_Temperature+0x80>)
 8003376:	f000 f973 	bl	8003660 <HAL_ADC_Start>
  if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) // Chờ chuyển đổi, timeout 100ms
 800337a:	2164      	movs	r1, #100	@ 0x64
 800337c:	4819      	ldr	r0, [pc, #100]	@ (80033e4 <Read_Internal_Temperature+0x80>)
 800337e:	f000 fa74 	bl	800386a <HAL_ADC_PollForConversion>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d103      	bne.n	8003390 <Read_Internal_Temperature+0x2c>
  {
    adc_value = HAL_ADC_GetValue(&hadc1); // Đọc giá trị ADC
 8003388:	4816      	ldr	r0, [pc, #88]	@ (80033e4 <Read_Internal_Temperature+0x80>)
 800338a:	f000 faf9 	bl	8003980 <HAL_ADC_GetValue>
 800338e:	60f8      	str	r0, [r7, #12]
  }
  HAL_ADC_Stop(&hadc1); // Dừng ADC1
 8003390:	4814      	ldr	r0, [pc, #80]	@ (80033e4 <Read_Internal_Temperature+0x80>)
 8003392:	f000 fa37 	bl	8003804 <HAL_ADC_Stop>

  // Công thức tính nhiệt độ từ datasheet (có thể cần điều chỉnh)
  // Temperature(in °C) = {(V SENSE – V 25 ) / Avg_Slope} + 25
  // V SENSE = adc_value * VREF_MV / ADC_MAX_VALUE
  float vsense_mv = ((float)adc_value * ADC_VREF_MV) / ADC_MAX_VALUE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	ee07 3a90 	vmov	s15, r3
 800339c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a0:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80033e8 <Read_Internal_Temperature+0x84>
 80033a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033a8:	eddf 6a10 	vldr	s13, [pc, #64]	@ 80033ec <Read_Internal_Temperature+0x88>
 80033ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033b0:	edc7 7a01 	vstr	s15, [r7, #4]
  temperature_celsius = (vsense_mv - TEMP_SENSOR_V25_MV) / TEMP_SENSOR_AVG_SLOPE_MV_PER_C + 25.0f;
 80033b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80033b8:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80033f0 <Read_Internal_Temperature+0x8c>
 80033bc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80033c0:	eef0 6a04 	vmov.f32	s13, #4	@ 0x40200000  2.5
 80033c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033c8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80033cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033d0:	edc7 7a02 	vstr	s15, [r7, #8]

  return temperature_celsius;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	ee07 3a90 	vmov	s15, r3
}
 80033da:	eeb0 0a67 	vmov.f32	s0, s15
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	2000055c 	.word	0x2000055c
 80033e8:	454e4000 	.word	0x454e4000
 80033ec:	457ff000 	.word	0x457ff000
 80033f0:	443e0000 	.word	0x443e0000

080033f4 <CheckUserButtonAndSaveTemp>:
 * @brief Kiểm tra nút User Button và ghi nhiệt độ vào FRAM ngay lập tức khi nút được nhấn
 * @param previous_state Con trỏ đến biến lưu trạng thái nút trước đó
 * @retval None
 */
void CheckUserButtonAndSaveTemp(GPIO_PinState *previous_state)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  // Đọc trạng thái hiện tại của nút
  GPIO_PinState current_button_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 80033fc:	2102      	movs	r1, #2
 80033fe:	4814      	ldr	r0, [pc, #80]	@ (8003450 <CheckUserButtonAndSaveTemp+0x5c>)
 8003400:	f001 fe60 	bl	80050c4 <HAL_GPIO_ReadPin>
 8003404:	4603      	mov	r3, r0
 8003406:	73fb      	strb	r3, [r7, #15]

  // Kiểm tra xem nút vừa được nhấn xuống (phát hiện cạnh xuống)
  if (current_button_state == GPIO_PIN_SET && *previous_state == GPIO_PIN_RESET)
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d118      	bne.n	8003440 <CheckUserButtonAndSaveTemp+0x4c>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d114      	bne.n	8003440 <CheckUserButtonAndSaveTemp+0x4c>
  {
    // Nút vừa được nhấn xuống
    // Đọc nhiệt độ từ cảm biến
    uint8_t current_temp = (uint8_t)Read_Internal_Temperature();
 8003416:	f7ff ffa5 	bl	8003364 <Read_Internal_Temperature>
 800341a:	eef0 7a40 	vmov.f32	s15, s0
 800341e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003422:	edc7 7a00 	vstr	s15, [r7]
 8003426:	783b      	ldrb	r3, [r7, #0]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	737b      	strb	r3, [r7, #13]

    // Ghi nhiệt độ vào FRAM tại địa chỉ cố định, ghi đè lên giá trị cũ
    HAL_StatusTypeDef status = FRAM_WriteBytes(&hi2c2, USER_TEMP_ADDR, &current_temp, 1);
 800342c:	f107 020d 	add.w	r2, r7, #13
 8003430:	2301      	movs	r3, #1
 8003432:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003436:	4807      	ldr	r0, [pc, #28]	@ (8003454 <CheckUserButtonAndSaveTemp+0x60>)
 8003438:	f7fd fd3e 	bl	8000eb8 <FRAM_WriteBytes>
 800343c:	4603      	mov	r3, r0
 800343e:	73bb      	strb	r3, [r7, #14]

  }

  // Cập nhật trạng thái nút trước đó
  *previous_state = current_button_state;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	701a      	strb	r2, [r3, #0]
}
 8003446:	bf00      	nop
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40020000 	.word	0x40020000
 8003454:	200004ac 	.word	0x200004ac

08003458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003458:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003490 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800345c:	f7ff ff5c 	bl	8003318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003460:	480c      	ldr	r0, [pc, #48]	@ (8003494 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003462:	490d      	ldr	r1, [pc, #52]	@ (8003498 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003464:	4a0d      	ldr	r2, [pc, #52]	@ (800349c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003468:	e002      	b.n	8003470 <LoopCopyDataInit>

0800346a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800346a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800346c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800346e:	3304      	adds	r3, #4

08003470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003474:	d3f9      	bcc.n	800346a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003476:	4a0a      	ldr	r2, [pc, #40]	@ (80034a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003478:	4c0a      	ldr	r4, [pc, #40]	@ (80034a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800347a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800347c:	e001      	b.n	8003482 <LoopFillZerobss>

0800347e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800347e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003480:	3204      	adds	r2, #4

08003482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003484:	d3fb      	bcc.n	800347e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003486:	f009 ff93 	bl	800d3b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800348a:	f7fd fd5b 	bl	8000f44 <main>
  bx  lr    
 800348e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003490:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003498:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800349c:	0800e110 	.word	0x0800e110
  ldr r2, =_sbss
 80034a0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80034a4:	20000b84 	.word	0x20000b84

080034a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034a8:	e7fe      	b.n	80034a8 <ADC_IRQHandler>
	...

080034ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034b0:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <HAL_Init+0x40>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a0d      	ldr	r2, [pc, #52]	@ (80034ec <HAL_Init+0x40>)
 80034b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034bc:	4b0b      	ldr	r3, [pc, #44]	@ (80034ec <HAL_Init+0x40>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a0a      	ldr	r2, [pc, #40]	@ (80034ec <HAL_Init+0x40>)
 80034c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034c8:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <HAL_Init+0x40>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a07      	ldr	r2, [pc, #28]	@ (80034ec <HAL_Init+0x40>)
 80034ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034d4:	2003      	movs	r0, #3
 80034d6:	f001 fbd9 	bl	8004c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034da:	200f      	movs	r0, #15
 80034dc:	f000 f808 	bl	80034f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034e0:	f7ff fc50 	bl	8002d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40023c00 	.word	0x40023c00

080034f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034f8:	4b12      	ldr	r3, [pc, #72]	@ (8003544 <HAL_InitTick+0x54>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4b12      	ldr	r3, [pc, #72]	@ (8003548 <HAL_InitTick+0x58>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	4619      	mov	r1, r3
 8003502:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003506:	fbb3 f3f1 	udiv	r3, r3, r1
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	4618      	mov	r0, r3
 8003510:	f001 fbff 	bl	8004d12 <HAL_SYSTICK_Config>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e00e      	b.n	800353c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b0f      	cmp	r3, #15
 8003522:	d80a      	bhi.n	800353a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003524:	2200      	movs	r2, #0
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	f001 fbb9 	bl	8004ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003530:	4a06      	ldr	r2, [pc, #24]	@ (800354c <HAL_InitTick+0x5c>)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e000      	b.n	800353c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	20000004 	.word	0x20000004
 8003548:	2000000c 	.word	0x2000000c
 800354c:	20000008 	.word	0x20000008

08003550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003554:	4b06      	ldr	r3, [pc, #24]	@ (8003570 <HAL_IncTick+0x20>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	4b06      	ldr	r3, [pc, #24]	@ (8003574 <HAL_IncTick+0x24>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4413      	add	r3, r2
 8003560:	4a04      	ldr	r2, [pc, #16]	@ (8003574 <HAL_IncTick+0x24>)
 8003562:	6013      	str	r3, [r2, #0]
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	2000000c 	.word	0x2000000c
 8003574:	20000718 	.word	0x20000718

08003578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return uwTick;
 800357c:	4b03      	ldr	r3, [pc, #12]	@ (800358c <HAL_GetTick+0x14>)
 800357e:	681b      	ldr	r3, [r3, #0]
}
 8003580:	4618      	mov	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	20000718 	.word	0x20000718

08003590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003598:	f7ff ffee 	bl	8003578 <HAL_GetTick>
 800359c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d005      	beq.n	80035b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035aa:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <HAL_Delay+0x44>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80035b6:	bf00      	nop
 80035b8:	f7ff ffde 	bl	8003578 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d8f7      	bhi.n	80035b8 <HAL_Delay+0x28>
  {
  }
}
 80035c8:	bf00      	nop
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	2000000c 	.word	0x2000000c

080035d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035e0:	2300      	movs	r3, #0
 80035e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e033      	b.n	8003656 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d109      	bne.n	800360a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff fbec 	bl	8002dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	f003 0310 	and.w	r3, r3, #16
 8003612:	2b00      	cmp	r3, #0
 8003614:	d118      	bne.n	8003648 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800361e:	f023 0302 	bic.w	r3, r3, #2
 8003622:	f043 0202 	orr.w	r2, r3, #2
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fad8 	bl	8003be0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	f043 0201 	orr.w	r2, r3, #1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	641a      	str	r2, [r3, #64]	@ 0x40
 8003646:	e001      	b.n	800364c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003654:	7bfb      	ldrb	r3, [r7, #15]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003668:	2300      	movs	r3, #0
 800366a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_ADC_Start+0x1a>
 8003676:	2302      	movs	r3, #2
 8003678:	e0b2      	b.n	80037e0 <HAL_ADC_Start+0x180>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	2b01      	cmp	r3, #1
 800368e:	d018      	beq.n	80036c2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0201 	orr.w	r2, r2, #1
 800369e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80036a0:	4b52      	ldr	r3, [pc, #328]	@ (80037ec <HAL_ADC_Start+0x18c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a52      	ldr	r2, [pc, #328]	@ (80037f0 <HAL_ADC_Start+0x190>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	0c9a      	lsrs	r2, r3, #18
 80036ac:	4613      	mov	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	4413      	add	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80036b4:	e002      	b.n	80036bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f9      	bne.n	80036b6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d17a      	bne.n	80037c6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80036fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800370a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800370e:	d106      	bne.n	800371e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003714:	f023 0206 	bic.w	r2, r3, #6
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	645a      	str	r2, [r3, #68]	@ 0x44
 800371c:	e002      	b.n	8003724 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800372c:	4b31      	ldr	r3, [pc, #196]	@ (80037f4 <HAL_ADC_Start+0x194>)
 800372e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003738:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	2b00      	cmp	r3, #0
 8003744:	d12a      	bne.n	800379c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2b      	ldr	r2, [pc, #172]	@ (80037f8 <HAL_ADC_Start+0x198>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d015      	beq.n	800377c <HAL_ADC_Start+0x11c>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a29      	ldr	r2, [pc, #164]	@ (80037fc <HAL_ADC_Start+0x19c>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d105      	bne.n	8003766 <HAL_ADC_Start+0x106>
 800375a:	4b26      	ldr	r3, [pc, #152]	@ (80037f4 <HAL_ADC_Start+0x194>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a25      	ldr	r2, [pc, #148]	@ (8003800 <HAL_ADC_Start+0x1a0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d136      	bne.n	80037de <HAL_ADC_Start+0x17e>
 8003770:	4b20      	ldr	r3, [pc, #128]	@ (80037f4 <HAL_ADC_Start+0x194>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b00      	cmp	r3, #0
 800377a:	d130      	bne.n	80037de <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d129      	bne.n	80037de <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003798:	609a      	str	r2, [r3, #8]
 800379a:	e020      	b.n	80037de <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a15      	ldr	r2, [pc, #84]	@ (80037f8 <HAL_ADC_Start+0x198>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d11b      	bne.n	80037de <HAL_ADC_Start+0x17e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d114      	bne.n	80037de <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	e00b      	b.n	80037de <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	f043 0210 	orr.w	r2, r3, #16
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d6:	f043 0201 	orr.w	r2, r3, #1
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	20000004 	.word	0x20000004
 80037f0:	431bde83 	.word	0x431bde83
 80037f4:	40012300 	.word	0x40012300
 80037f8:	40012000 	.word	0x40012000
 80037fc:	40012100 	.word	0x40012100
 8003800:	40012200 	.word	0x40012200

08003804 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_ADC_Stop+0x16>
 8003816:	2302      	movs	r3, #2
 8003818:	e021      	b.n	800385e <HAL_ADC_Stop+0x5a>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0201 	bic.w	r2, r2, #1
 8003830:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	f043 0201 	orr.w	r2, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
 8003872:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003882:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003886:	d113      	bne.n	80038b0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003896:	d10b      	bne.n	80038b0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e063      	b.n	8003978 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80038b0:	f7ff fe62 	bl	8003578 <HAL_GetTick>
 80038b4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038b6:	e021      	b.n	80038fc <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038be:	d01d      	beq.n	80038fc <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d007      	beq.n	80038d6 <HAL_ADC_PollForConversion+0x6c>
 80038c6:	f7ff fe57 	bl	8003578 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d212      	bcs.n	80038fc <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d00b      	beq.n	80038fc <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	f043 0204 	orr.w	r2, r3, #4
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e03d      	b.n	8003978 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b02      	cmp	r3, #2
 8003908:	d1d6      	bne.n	80038b8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f06f 0212 	mvn.w	r2, #18
 8003912:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d123      	bne.n	8003976 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003932:	2b00      	cmp	r3, #0
 8003934:	d11f      	bne.n	8003976 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003940:	2b00      	cmp	r3, #0
 8003942:	d006      	beq.n	8003952 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800394e:	2b00      	cmp	r3, #0
 8003950:	d111      	bne.n	8003976 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003956:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d105      	bne.n	8003976 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	f043 0201 	orr.w	r2, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x1c>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e105      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x228>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b09      	cmp	r3, #9
 80039c6:	d925      	bls.n	8003a14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68d9      	ldr	r1, [r3, #12]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	461a      	mov	r2, r3
 80039d6:	4613      	mov	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	4413      	add	r3, r2
 80039dc:	3b1e      	subs	r3, #30
 80039de:	2207      	movs	r2, #7
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43da      	mvns	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	400a      	ands	r2, r1
 80039ec:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68d9      	ldr	r1, [r3, #12]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	4618      	mov	r0, r3
 8003a00:	4603      	mov	r3, r0
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	4403      	add	r3, r0
 8003a06:	3b1e      	subs	r3, #30
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	e022      	b.n	8003a5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6919      	ldr	r1, [r3, #16]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	4613      	mov	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4413      	add	r3, r2
 8003a28:	2207      	movs	r2, #7
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	400a      	ands	r2, r1
 8003a36:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6919      	ldr	r1, [r3, #16]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	4618      	mov	r0, r3
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4403      	add	r3, r0
 8003a50:	409a      	lsls	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b06      	cmp	r3, #6
 8003a60:	d824      	bhi.n	8003aac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	3b05      	subs	r3, #5
 8003a74:	221f      	movs	r2, #31
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43da      	mvns	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	400a      	ands	r2, r1
 8003a82:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	4618      	mov	r0, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3b05      	subs	r3, #5
 8003a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003aaa:	e04c      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b0c      	cmp	r3, #12
 8003ab2:	d824      	bhi.n	8003afe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3b23      	subs	r3, #35	@ 0x23
 8003ac6:	221f      	movs	r2, #31
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43da      	mvns	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	3b23      	subs	r3, #35	@ 0x23
 8003af0:	fa00 f203 	lsl.w	r2, r0, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	631a      	str	r2, [r3, #48]	@ 0x30
 8003afc:	e023      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3b41      	subs	r3, #65	@ 0x41
 8003b10:	221f      	movs	r2, #31
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43da      	mvns	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	400a      	ands	r2, r1
 8003b1e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	3b41      	subs	r3, #65	@ 0x41
 8003b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b46:	4b22      	ldr	r3, [pc, #136]	@ (8003bd0 <HAL_ADC_ConfigChannel+0x234>)
 8003b48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a21      	ldr	r2, [pc, #132]	@ (8003bd4 <HAL_ADC_ConfigChannel+0x238>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d109      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x1cc>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b12      	cmp	r3, #18
 8003b5a:	d105      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a19      	ldr	r2, [pc, #100]	@ (8003bd4 <HAL_ADC_ConfigChannel+0x238>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d123      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x21e>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b10      	cmp	r3, #16
 8003b78:	d003      	beq.n	8003b82 <HAL_ADC_ConfigChannel+0x1e6>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b11      	cmp	r3, #17
 8003b80:	d11b      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d111      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b96:	4b10      	ldr	r3, [pc, #64]	@ (8003bd8 <HAL_ADC_ConfigChannel+0x23c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a10      	ldr	r2, [pc, #64]	@ (8003bdc <HAL_ADC_ConfigChannel+0x240>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	0c9a      	lsrs	r2, r3, #18
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003bac:	e002      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f9      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	40012300 	.word	0x40012300
 8003bd4:	40012000 	.word	0x40012000
 8003bd8:	20000004 	.word	0x20000004
 8003bdc:	431bde83 	.word	0x431bde83

08003be0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003be8:	4b79      	ldr	r3, [pc, #484]	@ (8003dd0 <ADC_Init+0x1f0>)
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	021a      	lsls	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003c38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6859      	ldr	r1, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6899      	ldr	r1, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	4a58      	ldr	r2, [pc, #352]	@ (8003dd4 <ADC_Init+0x1f4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d022      	beq.n	8003cbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6899      	ldr	r1, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ca8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6899      	ldr	r1, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	e00f      	b.n	8003cde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ccc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003cdc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0202 	bic.w	r2, r2, #2
 8003cec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6899      	ldr	r1, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	7e1b      	ldrb	r3, [r3, #24]
 8003cf8:	005a      	lsls	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01b      	beq.n	8003d44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d1a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003d2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6859      	ldr	r1, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	3b01      	subs	r3, #1
 8003d38:	035a      	lsls	r2, r3, #13
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	e007      	b.n	8003d54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d52:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003d62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	051a      	lsls	r2, r3, #20
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6899      	ldr	r1, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d96:	025a      	lsls	r2, r3, #9
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6899      	ldr	r1, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	029a      	lsls	r2, r3, #10
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40012300 	.word	0x40012300
 8003dd4:	0f000001 	.word	0x0f000001

08003dd8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e0ed      	b.n	8003fc6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d102      	bne.n	8003dfc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff f80e 	bl	8002e18 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e0c:	f7ff fbb4 	bl	8003578 <HAL_GetTick>
 8003e10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e12:	e012      	b.n	8003e3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e14:	f7ff fbb0 	bl	8003578 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b0a      	cmp	r3, #10
 8003e20:	d90b      	bls.n	8003e3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2205      	movs	r2, #5
 8003e32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e0c5      	b.n	8003fc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0e5      	beq.n	8003e14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0202 	bic.w	r2, r2, #2
 8003e56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e58:	f7ff fb8e 	bl	8003578 <HAL_GetTick>
 8003e5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e5e:	e012      	b.n	8003e86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e60:	f7ff fb8a 	bl	8003578 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b0a      	cmp	r3, #10
 8003e6c:	d90b      	bls.n	8003e86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2205      	movs	r2, #5
 8003e7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e09f      	b.n	8003fc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1e5      	bne.n	8003e60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	7e1b      	ldrb	r3, [r3, #24]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d108      	bne.n	8003eae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003eaa:	601a      	str	r2, [r3, #0]
 8003eac:	e007      	b.n	8003ebe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ebc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	7e5b      	ldrb	r3, [r3, #25]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d108      	bne.n	8003ed8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e007      	b.n	8003ee8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ee6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	7e9b      	ldrb	r3, [r3, #26]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d108      	bne.n	8003f02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0220 	orr.w	r2, r2, #32
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	e007      	b.n	8003f12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f022 0220 	bic.w	r2, r2, #32
 8003f10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	7edb      	ldrb	r3, [r3, #27]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d108      	bne.n	8003f2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0210 	bic.w	r2, r2, #16
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	e007      	b.n	8003f3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f042 0210 	orr.w	r2, r2, #16
 8003f3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	7f1b      	ldrb	r3, [r3, #28]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d108      	bne.n	8003f56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0208 	orr.w	r2, r2, #8
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	e007      	b.n	8003f66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0208 	bic.w	r2, r2, #8
 8003f64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	7f5b      	ldrb	r3, [r3, #29]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d108      	bne.n	8003f80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0204 	orr.w	r2, r2, #4
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	e007      	b.n	8003f90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f022 0204 	bic.w	r2, r2, #4
 8003f8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	ea42 0103 	orr.w	r1, r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	1e5a      	subs	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3710      	adds	r7, #16
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b087      	sub	sp, #28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fe0:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8003fe2:	7dfb      	ldrb	r3, [r7, #23]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d003      	beq.n	8003ff0 <HAL_CAN_ConfigFilter+0x20>
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	f040 80be 	bne.w	800416c <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8003ff0:	4b65      	ldr	r3, [pc, #404]	@ (8004188 <HAL_CAN_ConfigFilter+0x1b8>)
 8003ff2:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003ffa:	f043 0201 	orr.w	r2, r3, #1
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800400a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401e:	021b      	lsls	r3, r3, #8
 8004020:	431a      	orrs	r2, r3
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	2201      	movs	r2, #1
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	43db      	mvns	r3, r3
 8004042:	401a      	ands	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d123      	bne.n	800409a <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	43db      	mvns	r3, r3
 800405c:	401a      	ands	r2, r3
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004074:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	3248      	adds	r2, #72	@ 0x48
 800407a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800408e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004090:	6939      	ldr	r1, [r7, #16]
 8004092:	3348      	adds	r3, #72	@ 0x48
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	440b      	add	r3, r1
 8004098:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d122      	bne.n	80040e8 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	3248      	adds	r2, #72	@ 0x48
 80040c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040de:	6939      	ldr	r1, [r7, #16]
 80040e0:	3348      	adds	r3, #72	@ 0x48
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	440b      	add	r3, r1
 80040e6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d109      	bne.n	8004104 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	43db      	mvns	r3, r3
 80040fa:	401a      	ands	r2, r3
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004102:	e007      	b.n	8004114 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	431a      	orrs	r2, r3
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d109      	bne.n	8004130 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	43db      	mvns	r3, r3
 8004126:	401a      	ands	r2, r3
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800412e:	e007      	b.n	8004140 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	431a      	orrs	r2, r3
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d107      	bne.n	8004158 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	431a      	orrs	r2, r3
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800415e:	f023 0201 	bic.w	r2, r3, #1
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004168:	2300      	movs	r3, #0
 800416a:	e006      	b.n	800417a <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
  }
}
 800417a:	4618      	mov	r0, r3
 800417c:	371c      	adds	r7, #28
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40006400 	.word	0x40006400

0800418c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3020 	ldrb.w	r3, [r3, #32]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	d12e      	bne.n	80041fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041b8:	f7ff f9de 	bl	8003578 <HAL_GetTick>
 80041bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041be:	e012      	b.n	80041e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041c0:	f7ff f9da 	bl	8003578 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b0a      	cmp	r3, #10
 80041cc:	d90b      	bls.n	80041e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2205      	movs	r2, #5
 80041de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e012      	b.n	800420c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e5      	bne.n	80041c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e006      	b.n	800420c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
  }
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	@ 0x24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004228:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004232:	7ffb      	ldrb	r3, [r7, #31]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d003      	beq.n	8004240 <HAL_CAN_AddTxMessage+0x2c>
 8004238:	7ffb      	ldrb	r3, [r7, #31]
 800423a:	2b02      	cmp	r3, #2
 800423c:	f040 80ad 	bne.w	800439a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10a      	bne.n	8004260 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004250:	2b00      	cmp	r3, #0
 8004252:	d105      	bne.n	8004260 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8095 	beq.w	800438a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	0e1b      	lsrs	r3, r3, #24
 8004264:	f003 0303 	and.w	r3, r3, #3
 8004268:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800426a:	2201      	movs	r2, #1
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	409a      	lsls	r2, r3
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d10d      	bne.n	8004298 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004286:	68f9      	ldr	r1, [r7, #12]
 8004288:	6809      	ldr	r1, [r1, #0]
 800428a:	431a      	orrs	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	3318      	adds	r3, #24
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	440b      	add	r3, r1
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	e00f      	b.n	80042b8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042a2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042a8:	68f9      	ldr	r1, [r7, #12]
 80042aa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80042ac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	3318      	adds	r3, #24
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	440b      	add	r3, r1
 80042b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6819      	ldr	r1, [r3, #0]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	3318      	adds	r3, #24
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	440b      	add	r3, r1
 80042c8:	3304      	adds	r3, #4
 80042ca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	7d1b      	ldrb	r3, [r3, #20]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d111      	bne.n	80042f8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3318      	adds	r3, #24
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	4413      	add	r3, r2
 80042e0:	3304      	adds	r3, #4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	6811      	ldr	r1, [r2, #0]
 80042e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	3318      	adds	r3, #24
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	440b      	add	r3, r1
 80042f4:	3304      	adds	r3, #4
 80042f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	3307      	adds	r3, #7
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	061a      	lsls	r2, r3, #24
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3306      	adds	r3, #6
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	431a      	orrs	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	3305      	adds	r3, #5
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	4313      	orrs	r3, r2
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	3204      	adds	r2, #4
 8004318:	7812      	ldrb	r2, [r2, #0]
 800431a:	4610      	mov	r0, r2
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	6811      	ldr	r1, [r2, #0]
 8004320:	ea43 0200 	orr.w	r2, r3, r0
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	011b      	lsls	r3, r3, #4
 8004328:	440b      	add	r3, r1
 800432a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800432e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3303      	adds	r3, #3
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	061a      	lsls	r2, r3, #24
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3302      	adds	r3, #2
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	3301      	adds	r3, #1
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	021b      	lsls	r3, r3, #8
 800434a:	4313      	orrs	r3, r2
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	7812      	ldrb	r2, [r2, #0]
 8004350:	4610      	mov	r0, r2
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	6811      	ldr	r1, [r2, #0]
 8004356:	ea43 0200 	orr.w	r2, r3, r0
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	440b      	add	r3, r1
 8004360:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004364:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	3318      	adds	r3, #24
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	4413      	add	r3, r2
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	6811      	ldr	r1, [r2, #0]
 8004378:	f043 0201 	orr.w	r2, r3, #1
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	3318      	adds	r3, #24
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	440b      	add	r3, r1
 8004384:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004386:	2300      	movs	r3, #0
 8004388:	e00e      	b.n	80043a8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e006      	b.n	80043a8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
  }
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3724      	adds	r7, #36	@ 0x24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043c8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80043ca:	7dfb      	ldrb	r3, [r7, #23]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d003      	beq.n	80043d8 <HAL_CAN_GetRxMessage+0x24>
 80043d0:	7dfb      	ldrb	r3, [r7, #23]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	f040 8103 	bne.w	80045de <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10e      	bne.n	80043fc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d116      	bne.n	800441a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0f7      	b.n	80045ec <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d107      	bne.n	800441a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e0e8      	b.n	80045ec <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	331b      	adds	r3, #27
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	4413      	add	r3, r2
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0204 	and.w	r2, r3, #4
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d10c      	bne.n	8004452 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	331b      	adds	r3, #27
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	4413      	add	r3, r2
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	0d5b      	lsrs	r3, r3, #21
 8004448:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	e00b      	b.n	800446a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	331b      	adds	r3, #27
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	4413      	add	r3, r2
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	08db      	lsrs	r3, r3, #3
 8004462:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	331b      	adds	r3, #27
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	4413      	add	r3, r2
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0202 	and.w	r2, r3, #2
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	331b      	adds	r3, #27
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	4413      	add	r3, r2
 800448c:	3304      	adds	r3, #4
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0308 	and.w	r3, r3, #8
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2208      	movs	r2, #8
 800449c:	611a      	str	r2, [r3, #16]
 800449e:	e00b      	b.n	80044b8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	331b      	adds	r3, #27
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	4413      	add	r3, r2
 80044ac:	3304      	adds	r3, #4
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 020f 	and.w	r2, r3, #15
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	331b      	adds	r3, #27
 80044c0:	011b      	lsls	r3, r3, #4
 80044c2:	4413      	add	r3, r2
 80044c4:	3304      	adds	r3, #4
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	0a1b      	lsrs	r3, r3, #8
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	331b      	adds	r3, #27
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	4413      	add	r3, r2
 80044dc:	3304      	adds	r3, #4
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	0c1b      	lsrs	r3, r3, #16
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	4413      	add	r3, r2
 8004508:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	0a1a      	lsrs	r2, r3, #8
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	3301      	adds	r3, #1
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	4413      	add	r3, r2
 8004522:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	0c1a      	lsrs	r2, r3, #16
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	3302      	adds	r3, #2
 800452e:	b2d2      	uxtb	r2, r2
 8004530:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	4413      	add	r3, r2
 800453c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	0e1a      	lsrs	r2, r3, #24
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	3303      	adds	r3, #3
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	4413      	add	r3, r2
 8004556:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	3304      	adds	r3, #4
 8004560:	b2d2      	uxtb	r2, r2
 8004562:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	4413      	add	r3, r2
 800456e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	0a1a      	lsrs	r2, r3, #8
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	3305      	adds	r3, #5
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	4413      	add	r3, r2
 8004588:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	0c1a      	lsrs	r2, r3, #16
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	3306      	adds	r3, #6
 8004594:	b2d2      	uxtb	r2, r2
 8004596:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0e1a      	lsrs	r2, r3, #24
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	3307      	adds	r3, #7
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d108      	bne.n	80045ca <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0220 	orr.w	r2, r2, #32
 80045c6:	60da      	str	r2, [r3, #12]
 80045c8:	e007      	b.n	80045da <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	691a      	ldr	r2, [r3, #16]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0220 	orr.w	r2, r2, #32
 80045d8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e006      	b.n	80045ec <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
  }
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	371c      	adds	r7, #28
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004608:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d002      	beq.n	8004616 <HAL_CAN_ActivateNotification+0x1e>
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d109      	bne.n	800462a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6959      	ldr	r1, [r3, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	e006      	b.n	8004638 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
  }
}
 8004638:	4618      	mov	r0, r3
 800463a:	3714      	adds	r7, #20
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08a      	sub	sp, #40	@ 0x28
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800464c:	2300      	movs	r3, #0
 800464e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004680:	6a3b      	ldr	r3, [r7, #32]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d07c      	beq.n	8004784 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d023      	beq.n	80046dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2201      	movs	r2, #1
 800469a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f983 	bl	80049b2 <HAL_CAN_TxMailbox0CompleteCallback>
 80046ac:	e016      	b.n	80046dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c0:	e00c      	b.n	80046dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d004      	beq.n	80046d6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80046cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80046d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d4:	e002      	b.n	80046dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f989 	bl	80049ee <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d024      	beq.n	8004730 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80046ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f963 	bl	80049c6 <HAL_CAN_TxMailbox1CompleteCallback>
 8004700:	e016      	b.n	8004730 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004708:	2b00      	cmp	r3, #0
 800470a:	d004      	beq.n	8004716 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004712:	627b      	str	r3, [r7, #36]	@ 0x24
 8004714:	e00c      	b.n	8004730 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004722:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004726:	627b      	str	r3, [r7, #36]	@ 0x24
 8004728:	e002      	b.n	8004730 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f969 	bl	8004a02 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d024      	beq.n	8004784 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004742:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f943 	bl	80049da <HAL_CAN_TxMailbox2CompleteCallback>
 8004754:	e016      	b.n	8004784 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d004      	beq.n	800476a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
 8004768:	e00c      	b.n	8004784 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d004      	beq.n	800477e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800477a:	627b      	str	r3, [r7, #36]	@ 0x24
 800477c:	e002      	b.n	8004784 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f949 	bl	8004a16 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00c      	beq.n	80047a8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800479e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2210      	movs	r2, #16
 80047a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00b      	beq.n	80047ca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d006      	beq.n	80047ca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2208      	movs	r2, #8
 80047c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 f930 	bl	8004a2a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d009      	beq.n	80047e8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d002      	beq.n	80047e8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fd f948 	bl	8001a78 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00c      	beq.n	800480c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d007      	beq.n	800480c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004802:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2210      	movs	r2, #16
 800480a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00b      	beq.n	800482e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	f003 0308 	and.w	r3, r3, #8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d006      	beq.n	800482e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2208      	movs	r2, #8
 8004826:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f912 	bl	8004a52 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b00      	cmp	r3, #0
 8004836:	d009      	beq.n	800484c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f8f9 	bl	8004a3e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00b      	beq.n	800486e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	d006      	beq.n	800486e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2210      	movs	r2, #16
 8004866:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f8fc 	bl	8004a66 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00b      	beq.n	8004890 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d006      	beq.n	8004890 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2208      	movs	r2, #8
 8004888:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f8f5 	bl	8004a7a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d07b      	beq.n	8004992 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d072      	beq.n	800498a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80048a4:	6a3b      	ldr	r3, [r7, #32]
 80048a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d008      	beq.n	80048c0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d003      	beq.n	80048c0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80048c0:	6a3b      	ldr	r3, [r7, #32]
 80048c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d008      	beq.n	80048dc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80048d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d6:	f043 0302 	orr.w	r3, r3, #2
 80048da:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d008      	beq.n	80048f8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d003      	beq.n	80048f8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80048f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f2:	f043 0304 	orr.w	r3, r3, #4
 80048f6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d043      	beq.n	800498a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004908:	2b00      	cmp	r3, #0
 800490a:	d03e      	beq.n	800498a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004912:	2b60      	cmp	r3, #96	@ 0x60
 8004914:	d02b      	beq.n	800496e <HAL_CAN_IRQHandler+0x32a>
 8004916:	2b60      	cmp	r3, #96	@ 0x60
 8004918:	d82e      	bhi.n	8004978 <HAL_CAN_IRQHandler+0x334>
 800491a:	2b50      	cmp	r3, #80	@ 0x50
 800491c:	d022      	beq.n	8004964 <HAL_CAN_IRQHandler+0x320>
 800491e:	2b50      	cmp	r3, #80	@ 0x50
 8004920:	d82a      	bhi.n	8004978 <HAL_CAN_IRQHandler+0x334>
 8004922:	2b40      	cmp	r3, #64	@ 0x40
 8004924:	d019      	beq.n	800495a <HAL_CAN_IRQHandler+0x316>
 8004926:	2b40      	cmp	r3, #64	@ 0x40
 8004928:	d826      	bhi.n	8004978 <HAL_CAN_IRQHandler+0x334>
 800492a:	2b30      	cmp	r3, #48	@ 0x30
 800492c:	d010      	beq.n	8004950 <HAL_CAN_IRQHandler+0x30c>
 800492e:	2b30      	cmp	r3, #48	@ 0x30
 8004930:	d822      	bhi.n	8004978 <HAL_CAN_IRQHandler+0x334>
 8004932:	2b10      	cmp	r3, #16
 8004934:	d002      	beq.n	800493c <HAL_CAN_IRQHandler+0x2f8>
 8004936:	2b20      	cmp	r3, #32
 8004938:	d005      	beq.n	8004946 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800493a:	e01d      	b.n	8004978 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	f043 0308 	orr.w	r3, r3, #8
 8004942:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004944:	e019      	b.n	800497a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	f043 0310 	orr.w	r3, r3, #16
 800494c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800494e:	e014      	b.n	800497a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	f043 0320 	orr.w	r3, r3, #32
 8004956:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004958:	e00f      	b.n	800497a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004962:	e00a      	b.n	800497a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800496a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800496c:	e005      	b.n	800497a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004974:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004976:	e000      	b.n	800497a <HAL_CAN_IRQHandler+0x336>
            break;
 8004978:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699a      	ldr	r2, [r3, #24]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004988:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2204      	movs	r2, #4
 8004990:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	d008      	beq.n	80049aa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f872 	bl	8004a8e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80049aa:	bf00      	nop
 80049ac:	3728      	adds	r7, #40	@ 0x28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80049ce:	bf00      	nop
 80049d0:	370c      	adds	r7, #12
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004a6e:	bf00      	nop
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004acc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ad0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ad4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ad6:	4a04      	ldr	r2, [pc, #16]	@ (8004ae8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	60d3      	str	r3, [r2, #12]
}
 8004adc:	bf00      	nop
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	e000ed00 	.word	0xe000ed00

08004aec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aec:	b480      	push	{r7}
 8004aee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004af0:	4b04      	ldr	r3, [pc, #16]	@ (8004b04 <__NVIC_GetPriorityGrouping+0x18>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	0a1b      	lsrs	r3, r3, #8
 8004af6:	f003 0307 	and.w	r3, r3, #7
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	e000ed00 	.word	0xe000ed00

08004b08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	db0b      	blt.n	8004b32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b1a:	79fb      	ldrb	r3, [r7, #7]
 8004b1c:	f003 021f 	and.w	r2, r3, #31
 8004b20:	4907      	ldr	r1, [pc, #28]	@ (8004b40 <__NVIC_EnableIRQ+0x38>)
 8004b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b26:	095b      	lsrs	r3, r3, #5
 8004b28:	2001      	movs	r0, #1
 8004b2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	e000e100 	.word	0xe000e100

08004b44 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	db12      	blt.n	8004b7c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b56:	79fb      	ldrb	r3, [r7, #7]
 8004b58:	f003 021f 	and.w	r2, r3, #31
 8004b5c:	490a      	ldr	r1, [pc, #40]	@ (8004b88 <__NVIC_DisableIRQ+0x44>)
 8004b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b62:	095b      	lsrs	r3, r3, #5
 8004b64:	2001      	movs	r0, #1
 8004b66:	fa00 f202 	lsl.w	r2, r0, r2
 8004b6a:	3320      	adds	r3, #32
 8004b6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004b70:	f3bf 8f4f 	dsb	sy
}
 8004b74:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004b76:	f3bf 8f6f 	isb	sy
}
 8004b7a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000e100 	.word	0xe000e100

08004b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	6039      	str	r1, [r7, #0]
 8004b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	db0a      	blt.n	8004bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	490c      	ldr	r1, [pc, #48]	@ (8004bd8 <__NVIC_SetPriority+0x4c>)
 8004ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004baa:	0112      	lsls	r2, r2, #4
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	440b      	add	r3, r1
 8004bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bb4:	e00a      	b.n	8004bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	4908      	ldr	r1, [pc, #32]	@ (8004bdc <__NVIC_SetPriority+0x50>)
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	3b04      	subs	r3, #4
 8004bc4:	0112      	lsls	r2, r2, #4
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	440b      	add	r3, r1
 8004bca:	761a      	strb	r2, [r3, #24]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	e000e100 	.word	0xe000e100
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	@ 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f1c3 0307 	rsb	r3, r3, #7
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	bf28      	it	cs
 8004bfe:	2304      	movcs	r3, #4
 8004c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	3304      	adds	r3, #4
 8004c06:	2b06      	cmp	r3, #6
 8004c08:	d902      	bls.n	8004c10 <NVIC_EncodePriority+0x30>
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	3b03      	subs	r3, #3
 8004c0e:	e000      	b.n	8004c12 <NVIC_EncodePriority+0x32>
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c14:	f04f 32ff 	mov.w	r2, #4294967295
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43da      	mvns	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	401a      	ands	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c28:	f04f 31ff 	mov.w	r1, #4294967295
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	43d9      	mvns	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c38:	4313      	orrs	r3, r2
         );
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3724      	adds	r7, #36	@ 0x24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c58:	d301      	bcc.n	8004c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e00f      	b.n	8004c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004c88 <SysTick_Config+0x40>)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c66:	210f      	movs	r1, #15
 8004c68:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6c:	f7ff ff8e 	bl	8004b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c70:	4b05      	ldr	r3, [pc, #20]	@ (8004c88 <SysTick_Config+0x40>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c76:	4b04      	ldr	r3, [pc, #16]	@ (8004c88 <SysTick_Config+0x40>)
 8004c78:	2207      	movs	r2, #7
 8004c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	e000e010 	.word	0xe000e010

08004c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff ff05 	bl	8004aa4 <__NVIC_SetPriorityGrouping>
}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b086      	sub	sp, #24
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	4603      	mov	r3, r0
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cb4:	f7ff ff1a 	bl	8004aec <__NVIC_GetPriorityGrouping>
 8004cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	6978      	ldr	r0, [r7, #20]
 8004cc0:	f7ff ff8e 	bl	8004be0 <NVIC_EncodePriority>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cca:	4611      	mov	r1, r2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff ff5d 	bl	8004b8c <__NVIC_SetPriority>
}
 8004cd2:	bf00      	nop
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff ff0d 	bl	8004b08 <__NVIC_EnableIRQ>
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff ff1d 	bl	8004b44 <__NVIC_DisableIRQ>
}
 8004d0a:	bf00      	nop
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff ff94 	bl	8004c48 <SysTick_Config>
 8004d20:	4603      	mov	r3, r0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d004      	beq.n	8004d48 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2280      	movs	r2, #128	@ 0x80
 8004d42:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e00c      	b.n	8004d62 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2205      	movs	r2, #5
 8004d4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0201 	bic.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	370c      	adds	r7, #12
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b083      	sub	sp, #12
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d7c:	b2db      	uxtb	r3, r3
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
	...

08004d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b089      	sub	sp, #36	@ 0x24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004da2:	2300      	movs	r3, #0
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	e16b      	b.n	8005080 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004da8:	2201      	movs	r2, #1
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	fa02 f303 	lsl.w	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4013      	ands	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	f040 815a 	bne.w	800507a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d005      	beq.n	8004dde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d130      	bne.n	8004e40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	005b      	lsls	r3, r3, #1
 8004de8:	2203      	movs	r2, #3
 8004dea:	fa02 f303 	lsl.w	r3, r2, r3
 8004dee:	43db      	mvns	r3, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4013      	ands	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69ba      	ldr	r2, [r7, #24]
 8004e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e14:	2201      	movs	r2, #1
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	f003 0201 	and.w	r2, r3, #1
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f003 0303 	and.w	r3, r3, #3
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d017      	beq.n	8004e7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	005b      	lsls	r3, r3, #1
 8004e56:	2203      	movs	r2, #3
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	4013      	ands	r3, r2
 8004e62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689a      	ldr	r2, [r3, #8]
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d123      	bne.n	8004ed0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	08da      	lsrs	r2, r3, #3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3208      	adds	r2, #8
 8004e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	220f      	movs	r2, #15
 8004ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	08da      	lsrs	r2, r3, #3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	3208      	adds	r2, #8
 8004eca:	69b9      	ldr	r1, [r7, #24]
 8004ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	2203      	movs	r2, #3
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 0203 	and.w	r2, r3, #3
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 80b4 	beq.w	800507a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	4b60      	ldr	r3, [pc, #384]	@ (8005098 <HAL_GPIO_Init+0x30c>)
 8004f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1a:	4a5f      	ldr	r2, [pc, #380]	@ (8005098 <HAL_GPIO_Init+0x30c>)
 8004f1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f22:	4b5d      	ldr	r3, [pc, #372]	@ (8005098 <HAL_GPIO_Init+0x30c>)
 8004f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f2e:	4a5b      	ldr	r2, [pc, #364]	@ (800509c <HAL_GPIO_Init+0x310>)
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	089b      	lsrs	r3, r3, #2
 8004f34:	3302      	adds	r3, #2
 8004f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f003 0303 	and.w	r3, r3, #3
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	220f      	movs	r2, #15
 8004f46:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	4013      	ands	r3, r2
 8004f50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a52      	ldr	r2, [pc, #328]	@ (80050a0 <HAL_GPIO_Init+0x314>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d02b      	beq.n	8004fb2 <HAL_GPIO_Init+0x226>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a51      	ldr	r2, [pc, #324]	@ (80050a4 <HAL_GPIO_Init+0x318>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d025      	beq.n	8004fae <HAL_GPIO_Init+0x222>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a50      	ldr	r2, [pc, #320]	@ (80050a8 <HAL_GPIO_Init+0x31c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01f      	beq.n	8004faa <HAL_GPIO_Init+0x21e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a4f      	ldr	r2, [pc, #316]	@ (80050ac <HAL_GPIO_Init+0x320>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d019      	beq.n	8004fa6 <HAL_GPIO_Init+0x21a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a4e      	ldr	r2, [pc, #312]	@ (80050b0 <HAL_GPIO_Init+0x324>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d013      	beq.n	8004fa2 <HAL_GPIO_Init+0x216>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a4d      	ldr	r2, [pc, #308]	@ (80050b4 <HAL_GPIO_Init+0x328>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00d      	beq.n	8004f9e <HAL_GPIO_Init+0x212>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a4c      	ldr	r2, [pc, #304]	@ (80050b8 <HAL_GPIO_Init+0x32c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d007      	beq.n	8004f9a <HAL_GPIO_Init+0x20e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a4b      	ldr	r2, [pc, #300]	@ (80050bc <HAL_GPIO_Init+0x330>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d101      	bne.n	8004f96 <HAL_GPIO_Init+0x20a>
 8004f92:	2307      	movs	r3, #7
 8004f94:	e00e      	b.n	8004fb4 <HAL_GPIO_Init+0x228>
 8004f96:	2308      	movs	r3, #8
 8004f98:	e00c      	b.n	8004fb4 <HAL_GPIO_Init+0x228>
 8004f9a:	2306      	movs	r3, #6
 8004f9c:	e00a      	b.n	8004fb4 <HAL_GPIO_Init+0x228>
 8004f9e:	2305      	movs	r3, #5
 8004fa0:	e008      	b.n	8004fb4 <HAL_GPIO_Init+0x228>
 8004fa2:	2304      	movs	r3, #4
 8004fa4:	e006      	b.n	8004fb4 <HAL_GPIO_Init+0x228>
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e004      	b.n	8004fb4 <HAL_GPIO_Init+0x228>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e002      	b.n	8004fb4 <HAL_GPIO_Init+0x228>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <HAL_GPIO_Init+0x228>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	f002 0203 	and.w	r2, r2, #3
 8004fba:	0092      	lsls	r2, r2, #2
 8004fbc:	4093      	lsls	r3, r2
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fc4:	4935      	ldr	r1, [pc, #212]	@ (800509c <HAL_GPIO_Init+0x310>)
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	089b      	lsrs	r3, r3, #2
 8004fca:	3302      	adds	r3, #2
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80050c0 <HAL_GPIO_Init+0x334>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	43db      	mvns	r3, r3
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4013      	ands	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004fee:	69ba      	ldr	r2, [r7, #24]
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ff6:	4a32      	ldr	r2, [pc, #200]	@ (80050c0 <HAL_GPIO_Init+0x334>)
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ffc:	4b30      	ldr	r3, [pc, #192]	@ (80050c0 <HAL_GPIO_Init+0x334>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	43db      	mvns	r3, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	4013      	ands	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d003      	beq.n	8005020 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005020:	4a27      	ldr	r2, [pc, #156]	@ (80050c0 <HAL_GPIO_Init+0x334>)
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005026:	4b26      	ldr	r3, [pc, #152]	@ (80050c0 <HAL_GPIO_Init+0x334>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	43db      	mvns	r3, r3
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	4013      	ands	r3, r2
 8005034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d003      	beq.n	800504a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800504a:	4a1d      	ldr	r2, [pc, #116]	@ (80050c0 <HAL_GPIO_Init+0x334>)
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005050:	4b1b      	ldr	r3, [pc, #108]	@ (80050c0 <HAL_GPIO_Init+0x334>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	43db      	mvns	r3, r3
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	4013      	ands	r3, r2
 800505e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4313      	orrs	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005074:	4a12      	ldr	r2, [pc, #72]	@ (80050c0 <HAL_GPIO_Init+0x334>)
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	3301      	adds	r3, #1
 800507e:	61fb      	str	r3, [r7, #28]
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	2b0f      	cmp	r3, #15
 8005084:	f67f ae90 	bls.w	8004da8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005088:	bf00      	nop
 800508a:	bf00      	nop
 800508c:	3724      	adds	r7, #36	@ 0x24
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40023800 	.word	0x40023800
 800509c:	40013800 	.word	0x40013800
 80050a0:	40020000 	.word	0x40020000
 80050a4:	40020400 	.word	0x40020400
 80050a8:	40020800 	.word	0x40020800
 80050ac:	40020c00 	.word	0x40020c00
 80050b0:	40021000 	.word	0x40021000
 80050b4:	40021400 	.word	0x40021400
 80050b8:	40021800 	.word	0x40021800
 80050bc:	40021c00 	.word	0x40021c00
 80050c0:	40013c00 	.word	0x40013c00

080050c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691a      	ldr	r2, [r3, #16]
 80050d4:	887b      	ldrh	r3, [r7, #2]
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050dc:	2301      	movs	r3, #1
 80050de:	73fb      	strb	r3, [r7, #15]
 80050e0:	e001      	b.n	80050e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050e2:	2300      	movs	r3, #0
 80050e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	807b      	strh	r3, [r7, #2]
 8005100:	4613      	mov	r3, r2
 8005102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005104:	787b      	ldrb	r3, [r7, #1]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800510a:	887a      	ldrh	r2, [r7, #2]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005110:	e003      	b.n	800511a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005112:	887b      	ldrh	r3, [r7, #2]
 8005114:	041a      	lsls	r2, r3, #16
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	619a      	str	r2, [r3, #24]
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr

08005126 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005126:	b480      	push	{r7}
 8005128:	b085      	sub	sp, #20
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
 800512e:	460b      	mov	r3, r1
 8005130:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005138:	887a      	ldrh	r2, [r7, #2]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4013      	ands	r3, r2
 800513e:	041a      	lsls	r2, r3, #16
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	43d9      	mvns	r1, r3
 8005144:	887b      	ldrh	r3, [r7, #2]
 8005146:	400b      	ands	r3, r1
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	619a      	str	r2, [r3, #24]
}
 800514e:	bf00      	nop
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005166:	4b08      	ldr	r3, [pc, #32]	@ (8005188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005168:	695a      	ldr	r2, [r3, #20]
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	4013      	ands	r3, r2
 800516e:	2b00      	cmp	r3, #0
 8005170:	d006      	beq.n	8005180 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005172:	4a05      	ldr	r2, [pc, #20]	@ (8005188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005174:	88fb      	ldrh	r3, [r7, #6]
 8005176:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005178:	88fb      	ldrh	r3, [r7, #6]
 800517a:	4618      	mov	r0, r3
 800517c:	f7fc fb82 	bl	8001884 <HAL_GPIO_EXTI_Callback>
  }
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40013c00 	.word	0x40013c00

0800518c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e12b      	b.n	80053f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d106      	bne.n	80051b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f7fd fee2 	bl	8002f7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2224      	movs	r2, #36	@ 0x24
 80051bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 0201 	bic.w	r2, r2, #1
 80051ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80051ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051f0:	f003 f814 	bl	800821c <HAL_RCC_GetPCLK1Freq>
 80051f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	4a81      	ldr	r2, [pc, #516]	@ (8005400 <HAL_I2C_Init+0x274>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d807      	bhi.n	8005210 <HAL_I2C_Init+0x84>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	4a80      	ldr	r2, [pc, #512]	@ (8005404 <HAL_I2C_Init+0x278>)
 8005204:	4293      	cmp	r3, r2
 8005206:	bf94      	ite	ls
 8005208:	2301      	movls	r3, #1
 800520a:	2300      	movhi	r3, #0
 800520c:	b2db      	uxtb	r3, r3
 800520e:	e006      	b.n	800521e <HAL_I2C_Init+0x92>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4a7d      	ldr	r2, [pc, #500]	@ (8005408 <HAL_I2C_Init+0x27c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	bf94      	ite	ls
 8005218:	2301      	movls	r3, #1
 800521a:	2300      	movhi	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e0e7      	b.n	80053f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	4a78      	ldr	r2, [pc, #480]	@ (800540c <HAL_I2C_Init+0x280>)
 800522a:	fba2 2303 	umull	r2, r3, r2, r3
 800522e:	0c9b      	lsrs	r3, r3, #18
 8005230:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	4a6a      	ldr	r2, [pc, #424]	@ (8005400 <HAL_I2C_Init+0x274>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d802      	bhi.n	8005260 <HAL_I2C_Init+0xd4>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	3301      	adds	r3, #1
 800525e:	e009      	b.n	8005274 <HAL_I2C_Init+0xe8>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005266:	fb02 f303 	mul.w	r3, r2, r3
 800526a:	4a69      	ldr	r2, [pc, #420]	@ (8005410 <HAL_I2C_Init+0x284>)
 800526c:	fba2 2303 	umull	r2, r3, r2, r3
 8005270:	099b      	lsrs	r3, r3, #6
 8005272:	3301      	adds	r3, #1
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	430b      	orrs	r3, r1
 800527a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005286:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	495c      	ldr	r1, [pc, #368]	@ (8005400 <HAL_I2C_Init+0x274>)
 8005290:	428b      	cmp	r3, r1
 8005292:	d819      	bhi.n	80052c8 <HAL_I2C_Init+0x13c>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	1e59      	subs	r1, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	fbb1 f3f3 	udiv	r3, r1, r3
 80052a2:	1c59      	adds	r1, r3, #1
 80052a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80052a8:	400b      	ands	r3, r1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <HAL_I2C_Init+0x138>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1e59      	subs	r1, r3, #1
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80052bc:	3301      	adds	r3, #1
 80052be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c2:	e051      	b.n	8005368 <HAL_I2C_Init+0x1dc>
 80052c4:	2304      	movs	r3, #4
 80052c6:	e04f      	b.n	8005368 <HAL_I2C_Init+0x1dc>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d111      	bne.n	80052f4 <HAL_I2C_Init+0x168>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	1e58      	subs	r0, r3, #1
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6859      	ldr	r1, [r3, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	440b      	add	r3, r1
 80052de:	fbb0 f3f3 	udiv	r3, r0, r3
 80052e2:	3301      	adds	r3, #1
 80052e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf0c      	ite	eq
 80052ec:	2301      	moveq	r3, #1
 80052ee:	2300      	movne	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	e012      	b.n	800531a <HAL_I2C_Init+0x18e>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	1e58      	subs	r0, r3, #1
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6859      	ldr	r1, [r3, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	0099      	lsls	r1, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	fbb0 f3f3 	udiv	r3, r0, r3
 800530a:	3301      	adds	r3, #1
 800530c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf0c      	ite	eq
 8005314:	2301      	moveq	r3, #1
 8005316:	2300      	movne	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_I2C_Init+0x196>
 800531e:	2301      	movs	r3, #1
 8005320:	e022      	b.n	8005368 <HAL_I2C_Init+0x1dc>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10e      	bne.n	8005348 <HAL_I2C_Init+0x1bc>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1e58      	subs	r0, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6859      	ldr	r1, [r3, #4]
 8005332:	460b      	mov	r3, r1
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	440b      	add	r3, r1
 8005338:	fbb0 f3f3 	udiv	r3, r0, r3
 800533c:	3301      	adds	r3, #1
 800533e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005346:	e00f      	b.n	8005368 <HAL_I2C_Init+0x1dc>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	1e58      	subs	r0, r3, #1
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6859      	ldr	r1, [r3, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	0099      	lsls	r1, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	fbb0 f3f3 	udiv	r3, r0, r3
 800535e:	3301      	adds	r3, #1
 8005360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005364:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	6809      	ldr	r1, [r1, #0]
 800536c:	4313      	orrs	r3, r2
 800536e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005396:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6911      	ldr	r1, [r2, #16]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	68d2      	ldr	r2, [r2, #12]
 80053a2:	4311      	orrs	r1, r2
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	430b      	orrs	r3, r1
 80053aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695a      	ldr	r2, [r3, #20]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	430a      	orrs	r2, r1
 80053c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f042 0201 	orr.w	r2, r2, #1
 80053d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2220      	movs	r2, #32
 80053e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	000186a0 	.word	0x000186a0
 8005404:	001e847f 	.word	0x001e847f
 8005408:	003d08ff 	.word	0x003d08ff
 800540c:	431bde83 	.word	0x431bde83
 8005410:	10624dd3 	.word	0x10624dd3

08005414 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8005414:	b480      	push	{r7}
 8005416:	b083      	sub	sp, #12
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005426:	2b80      	cmp	r3, #128	@ 0x80
 8005428:	d103      	bne.n	8005432 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2200      	movs	r2, #0
 8005430:	611a      	str	r2, [r3, #16]
  }
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
	...

08005440 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af02      	add	r7, sp, #8
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	4608      	mov	r0, r1
 800544a:	4611      	mov	r1, r2
 800544c:	461a      	mov	r2, r3
 800544e:	4603      	mov	r3, r0
 8005450:	817b      	strh	r3, [r7, #10]
 8005452:	460b      	mov	r3, r1
 8005454:	813b      	strh	r3, [r7, #8]
 8005456:	4613      	mov	r3, r2
 8005458:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800545a:	f7fe f88d 	bl	8003578 <HAL_GetTick>
 800545e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b20      	cmp	r3, #32
 800546a:	f040 80d9 	bne.w	8005620 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	2319      	movs	r3, #25
 8005474:	2201      	movs	r2, #1
 8005476:	496d      	ldr	r1, [pc, #436]	@ (800562c <HAL_I2C_Mem_Write+0x1ec>)
 8005478:	68f8      	ldr	r0, [r7, #12]
 800547a:	f002 f81b 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005484:	2302      	movs	r3, #2
 8005486:	e0cc      	b.n	8005622 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <HAL_I2C_Mem_Write+0x56>
 8005492:	2302      	movs	r3, #2
 8005494:	e0c5      	b.n	8005622 <HAL_I2C_Mem_Write+0x1e2>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0301 	and.w	r3, r3, #1
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d007      	beq.n	80054bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0201 	orr.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2221      	movs	r2, #33	@ 0x21
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2240      	movs	r2, #64	@ 0x40
 80054d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6a3a      	ldr	r2, [r7, #32]
 80054e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80054ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4a4d      	ldr	r2, [pc, #308]	@ (8005630 <HAL_I2C_Mem_Write+0x1f0>)
 80054fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80054fe:	88f8      	ldrh	r0, [r7, #6]
 8005500:	893a      	ldrh	r2, [r7, #8]
 8005502:	8979      	ldrh	r1, [r7, #10]
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	4603      	mov	r3, r0
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f001 fdaa 	bl	8007068 <I2C_RequestMemoryWrite>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d052      	beq.n	80055c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e081      	b.n	8005622 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f002 f8e0 	bl	80076e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00d      	beq.n	800554a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	2b04      	cmp	r3, #4
 8005534:	d107      	bne.n	8005546 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005544:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e06b      	b.n	8005622 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	781a      	ldrb	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555a:	1c5a      	adds	r2, r3, #1
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005564:	3b01      	subs	r3, #1
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b04      	cmp	r3, #4
 8005586:	d11b      	bne.n	80055c0 <HAL_I2C_Mem_Write+0x180>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558c:	2b00      	cmp	r3, #0
 800558e:	d017      	beq.n	80055c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005594:	781a      	ldrb	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055aa:	3b01      	subs	r3, #1
 80055ac:	b29a      	uxth	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	3b01      	subs	r3, #1
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1aa      	bne.n	800551e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f002 f8d3 	bl	8007778 <I2C_WaitOnBTFFlagUntilTimeout>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00d      	beq.n	80055f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d107      	bne.n	80055f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e016      	b.n	8005622 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800561c:	2300      	movs	r3, #0
 800561e:	e000      	b.n	8005622 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005620:	2302      	movs	r3, #2
  }
}
 8005622:	4618      	mov	r0, r3
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	00100002 	.word	0x00100002
 8005630:	ffff0000 	.word	0xffff0000

08005634 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08c      	sub	sp, #48	@ 0x30
 8005638:	af02      	add	r7, sp, #8
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	4608      	mov	r0, r1
 800563e:	4611      	mov	r1, r2
 8005640:	461a      	mov	r2, r3
 8005642:	4603      	mov	r3, r0
 8005644:	817b      	strh	r3, [r7, #10]
 8005646:	460b      	mov	r3, r1
 8005648:	813b      	strh	r3, [r7, #8]
 800564a:	4613      	mov	r3, r2
 800564c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800564e:	f7fd ff93 	bl	8003578 <HAL_GetTick>
 8005652:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b20      	cmp	r3, #32
 800565e:	f040 8214 	bne.w	8005a8a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	2319      	movs	r3, #25
 8005668:	2201      	movs	r2, #1
 800566a:	497b      	ldr	r1, [pc, #492]	@ (8005858 <HAL_I2C_Mem_Read+0x224>)
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f001 ff21 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005678:	2302      	movs	r3, #2
 800567a:	e207      	b.n	8005a8c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005682:	2b01      	cmp	r3, #1
 8005684:	d101      	bne.n	800568a <HAL_I2C_Mem_Read+0x56>
 8005686:	2302      	movs	r3, #2
 8005688:	e200      	b.n	8005a8c <HAL_I2C_Mem_Read+0x458>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b01      	cmp	r3, #1
 800569e:	d007      	beq.n	80056b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0201 	orr.w	r2, r2, #1
 80056ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2222      	movs	r2, #34	@ 0x22
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2240      	movs	r2, #64	@ 0x40
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80056e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4a5b      	ldr	r2, [pc, #364]	@ (800585c <HAL_I2C_Mem_Read+0x228>)
 80056f0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056f2:	88f8      	ldrh	r0, [r7, #6]
 80056f4:	893a      	ldrh	r2, [r7, #8]
 80056f6:	8979      	ldrh	r1, [r7, #10]
 80056f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fa:	9301      	str	r3, [sp, #4]
 80056fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	4603      	mov	r3, r0
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f001 fd46 	bl	8007194 <I2C_RequestMemoryRead>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e1bc      	b.n	8005a8c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005716:	2b00      	cmp	r3, #0
 8005718:	d113      	bne.n	8005742 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800571a:	2300      	movs	r3, #0
 800571c:	623b      	str	r3, [r7, #32]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	623b      	str	r3, [r7, #32]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	623b      	str	r3, [r7, #32]
 800572e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	e190      	b.n	8005a64 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005746:	2b01      	cmp	r3, #1
 8005748:	d11b      	bne.n	8005782 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800575a:	2300      	movs	r3, #0
 800575c:	61fb      	str	r3, [r7, #28]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	61fb      	str	r3, [r7, #28]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	61fb      	str	r3, [r7, #28]
 800576e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	e170      	b.n	8005a64 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005786:	2b02      	cmp	r3, #2
 8005788:	d11b      	bne.n	80057c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005798:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057aa:	2300      	movs	r3, #0
 80057ac:	61bb      	str	r3, [r7, #24]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	e150      	b.n	8005a64 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	617b      	str	r3, [r7, #20]
 80057d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80057d8:	e144      	b.n	8005a64 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057de:	2b03      	cmp	r3, #3
 80057e0:	f200 80f1 	bhi.w	80059c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d123      	bne.n	8005834 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f002 f83b 	bl	800786c <I2C_WaitOnRXNEFlagUntilTimeout>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e145      	b.n	8005a8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005828:	b29b      	uxth	r3, r3
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005832:	e117      	b.n	8005a64 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005838:	2b02      	cmp	r3, #2
 800583a:	d14e      	bne.n	80058da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005842:	2200      	movs	r2, #0
 8005844:	4906      	ldr	r1, [pc, #24]	@ (8005860 <HAL_I2C_Mem_Read+0x22c>)
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f001 fe34 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d008      	beq.n	8005864 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e11a      	b.n	8005a8c <HAL_I2C_Mem_Read+0x458>
 8005856:	bf00      	nop
 8005858:	00100002 	.word	0x00100002
 800585c:	ffff0000 	.word	0xffff0000
 8005860:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	691a      	ldr	r2, [r3, #16]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005886:	1c5a      	adds	r2, r3, #1
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800589c:	b29b      	uxth	r3, r3
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b8:	1c5a      	adds	r2, r3, #1
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c2:	3b01      	subs	r3, #1
 80058c4:	b29a      	uxth	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	3b01      	subs	r3, #1
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058d8:	e0c4      	b.n	8005a64 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e0:	2200      	movs	r2, #0
 80058e2:	496c      	ldr	r1, [pc, #432]	@ (8005a94 <HAL_I2C_Mem_Read+0x460>)
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f001 fde5 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0cb      	b.n	8005a8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005902:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691a      	ldr	r2, [r3, #16]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590e:	b2d2      	uxtb	r2, r2
 8005910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005920:	3b01      	subs	r3, #1
 8005922:	b29a      	uxth	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800592c:	b29b      	uxth	r3, r3
 800592e:	3b01      	subs	r3, #1
 8005930:	b29a      	uxth	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593c:	2200      	movs	r2, #0
 800593e:	4955      	ldr	r1, [pc, #340]	@ (8005a94 <HAL_I2C_Mem_Read+0x460>)
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f001 fdb7 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e09d      	b.n	8005a8c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800595e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800597c:	3b01      	subs	r3, #1
 800597e:	b29a      	uxth	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b29a      	uxth	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800599c:	b2d2      	uxtb	r2, r2
 800599e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	1c5a      	adds	r2, r3, #1
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059c4:	e04e      	b.n	8005a64 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f001 ff4e 	bl	800786c <I2C_WaitOnRXNEFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e058      	b.n	8005a8c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691a      	ldr	r2, [r3, #16]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f003 0304 	and.w	r3, r3, #4
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	d124      	bne.n	8005a64 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a1e:	2b03      	cmp	r3, #3
 8005a20:	d107      	bne.n	8005a32 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a30:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	691a      	ldr	r2, [r3, #16]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f47f aeb6 	bne.w	80057da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	e000      	b.n	8005a8c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005a8a:	2302      	movs	r3, #2
  }
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3728      	adds	r7, #40	@ 0x28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	00010004 	.word	0x00010004

08005a98 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b088      	sub	sp, #32
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ab8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ac0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
 8005ac4:	2b10      	cmp	r3, #16
 8005ac6:	d003      	beq.n	8005ad0 <HAL_I2C_EV_IRQHandler+0x38>
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	2b40      	cmp	r3, #64	@ 0x40
 8005acc:	f040 80c1 	bne.w	8005c52 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695b      	ldr	r3, [r3, #20]
 8005ade:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10d      	bne.n	8005b06 <HAL_I2C_EV_IRQHandler+0x6e>
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005af0:	d003      	beq.n	8005afa <HAL_I2C_EV_IRQHandler+0x62>
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005af8:	d101      	bne.n	8005afe <HAL_I2C_EV_IRQHandler+0x66>
 8005afa:	2301      	movs	r3, #1
 8005afc:	e000      	b.n	8005b00 <HAL_I2C_EV_IRQHandler+0x68>
 8005afe:	2300      	movs	r3, #0
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	f000 8132 	beq.w	8005d6a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00c      	beq.n	8005b2a <HAL_I2C_EV_IRQHandler+0x92>
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	0a5b      	lsrs	r3, r3, #9
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d006      	beq.n	8005b2a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f001 ff31 	bl	8007984 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fcf4 	bl	8006510 <I2C_Master_SB>
 8005b28:	e092      	b.n	8005c50 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	08db      	lsrs	r3, r3, #3
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d009      	beq.n	8005b4a <HAL_I2C_EV_IRQHandler+0xb2>
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	0a5b      	lsrs	r3, r3, #9
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fd6a 	bl	800661c <I2C_Master_ADD10>
 8005b48:	e082      	b.n	8005c50 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	085b      	lsrs	r3, r3, #1
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d009      	beq.n	8005b6a <HAL_I2C_EV_IRQHandler+0xd2>
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	0a5b      	lsrs	r3, r3, #9
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fd84 	bl	8006670 <I2C_Master_ADDR>
 8005b68:	e072      	b.n	8005c50 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	089b      	lsrs	r3, r3, #2
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d03b      	beq.n	8005bee <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b84:	f000 80f3 	beq.w	8005d6e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	09db      	lsrs	r3, r3, #7
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00f      	beq.n	8005bb4 <HAL_I2C_EV_IRQHandler+0x11c>
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	0a9b      	lsrs	r3, r3, #10
 8005b98:	f003 0301 	and.w	r3, r3, #1
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d009      	beq.n	8005bb4 <HAL_I2C_EV_IRQHandler+0x11c>
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	089b      	lsrs	r3, r3, #2
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d103      	bne.n	8005bb4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f94c 	bl	8005e4a <I2C_MasterTransmit_TXE>
 8005bb2:	e04d      	b.n	8005c50 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	089b      	lsrs	r3, r3, #2
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 80d6 	beq.w	8005d6e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	0a5b      	lsrs	r3, r3, #9
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 80cf 	beq.w	8005d6e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005bd0:	7bbb      	ldrb	r3, [r7, #14]
 8005bd2:	2b21      	cmp	r3, #33	@ 0x21
 8005bd4:	d103      	bne.n	8005bde <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 f9d3 	bl	8005f82 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bdc:	e0c7      	b.n	8005d6e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005bde:	7bfb      	ldrb	r3, [r7, #15]
 8005be0:	2b40      	cmp	r3, #64	@ 0x40
 8005be2:	f040 80c4 	bne.w	8005d6e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fa41 	bl	800606e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bec:	e0bf      	b.n	8005d6e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bf8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bfc:	f000 80b7 	beq.w	8005d6e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	099b      	lsrs	r3, r3, #6
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00f      	beq.n	8005c2c <HAL_I2C_EV_IRQHandler+0x194>
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	0a9b      	lsrs	r3, r3, #10
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d009      	beq.n	8005c2c <HAL_I2C_EV_IRQHandler+0x194>
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	089b      	lsrs	r3, r3, #2
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d103      	bne.n	8005c2c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 faba 	bl	800619e <I2C_MasterReceive_RXNE>
 8005c2a:	e011      	b.n	8005c50 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	089b      	lsrs	r3, r3, #2
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 809a 	beq.w	8005d6e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	0a5b      	lsrs	r3, r3, #9
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 8093 	beq.w	8005d6e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fb70 	bl	800632e <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c4e:	e08e      	b.n	8005d6e <HAL_I2C_EV_IRQHandler+0x2d6>
 8005c50:	e08d      	b.n	8005d6e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d004      	beq.n	8005c64 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	e007      	b.n	8005c74 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	f003 0301 	and.w	r3, r3, #1
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d012      	beq.n	8005ca6 <HAL_I2C_EV_IRQHandler+0x20e>
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	0a5b      	lsrs	r3, r3, #9
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00c      	beq.n	8005ca6 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005c9c:	69b9      	ldr	r1, [r7, #24]
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 ff35 	bl	8006b0e <I2C_Slave_ADDR>
 8005ca4:	e066      	b.n	8005d74 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	091b      	lsrs	r3, r3, #4
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <HAL_I2C_EV_IRQHandler+0x22e>
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	0a5b      	lsrs	r3, r3, #9
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 ff70 	bl	8006ba4 <I2C_Slave_STOPF>
 8005cc4:	e056      	b.n	8005d74 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	2b21      	cmp	r3, #33	@ 0x21
 8005cca:	d002      	beq.n	8005cd2 <HAL_I2C_EV_IRQHandler+0x23a>
 8005ccc:	7bbb      	ldrb	r3, [r7, #14]
 8005cce:	2b29      	cmp	r3, #41	@ 0x29
 8005cd0:	d125      	bne.n	8005d1e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	09db      	lsrs	r3, r3, #7
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00f      	beq.n	8005cfe <HAL_I2C_EV_IRQHandler+0x266>
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	0a9b      	lsrs	r3, r3, #10
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d009      	beq.n	8005cfe <HAL_I2C_EV_IRQHandler+0x266>
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	089b      	lsrs	r3, r3, #2
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d103      	bne.n	8005cfe <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 fe4b 	bl	8006992 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005cfc:	e039      	b.n	8005d72 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	089b      	lsrs	r3, r3, #2
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d033      	beq.n	8005d72 <HAL_I2C_EV_IRQHandler+0x2da>
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	0a5b      	lsrs	r3, r3, #9
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d02d      	beq.n	8005d72 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fe78 	bl	8006a0c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d1c:	e029      	b.n	8005d72 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	099b      	lsrs	r3, r3, #6
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d00f      	beq.n	8005d4a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	0a9b      	lsrs	r3, r3, #10
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d009      	beq.n	8005d4a <HAL_I2C_EV_IRQHandler+0x2b2>
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	089b      	lsrs	r3, r3, #2
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d103      	bne.n	8005d4a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 fe83 	bl	8006a4e <I2C_SlaveReceive_RXNE>
 8005d48:	e014      	b.n	8005d74 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	089b      	lsrs	r3, r3, #2
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00e      	beq.n	8005d74 <HAL_I2C_EV_IRQHandler+0x2dc>
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	0a5b      	lsrs	r3, r3, #9
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d008      	beq.n	8005d74 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 feb1 	bl	8006aca <I2C_SlaveReceive_BTF>
 8005d68:	e004      	b.n	8005d74 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005d6a:	bf00      	nop
 8005d6c:	e002      	b.n	8005d74 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005d6e:	bf00      	nop
 8005d70:	e000      	b.n	8005d74 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005d72:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005d74:	3720      	adds	r7, #32
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	b083      	sub	sp, #12
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005d82:	bf00      	nop
 8005d84:	370c      	adds	r7, #12
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	70fb      	strb	r3, [r7, #3]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b083      	sub	sp, #12
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005dee:	bf00      	nop
 8005df0:	370c      	adds	r7, #12
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e60:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e66:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d150      	bne.n	8005f12 <I2C_MasterTransmit_TXE+0xc8>
 8005e70:	7bfb      	ldrb	r3, [r7, #15]
 8005e72:	2b21      	cmp	r3, #33	@ 0x21
 8005e74:	d14d      	bne.n	8005f12 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d01d      	beq.n	8005eb8 <I2C_MasterTransmit_TXE+0x6e>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b20      	cmp	r3, #32
 8005e80:	d01a      	beq.n	8005eb8 <I2C_MasterTransmit_TXE+0x6e>
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e88:	d016      	beq.n	8005eb8 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e98:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2211      	movs	r2, #17
 8005e9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7ff ff62 	bl	8005d7a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005eb6:	e060      	b.n	8005f7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ec6:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ed6:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b40      	cmp	r3, #64	@ 0x40
 8005ef0:	d107      	bne.n	8005f02 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f7ff ff7d 	bl	8005dfa <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f00:	e03b      	b.n	8005f7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff ff35 	bl	8005d7a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f10:	e033      	b.n	8005f7a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005f12:	7bfb      	ldrb	r3, [r7, #15]
 8005f14:	2b21      	cmp	r3, #33	@ 0x21
 8005f16:	d005      	beq.n	8005f24 <I2C_MasterTransmit_TXE+0xda>
 8005f18:	7bbb      	ldrb	r3, [r7, #14]
 8005f1a:	2b40      	cmp	r3, #64	@ 0x40
 8005f1c:	d12d      	bne.n	8005f7a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	2b22      	cmp	r3, #34	@ 0x22
 8005f22:	d12a      	bne.n	8005f7a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d108      	bne.n	8005f40 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f3c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005f3e:	e01c      	b.n	8005f7a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b40      	cmp	r3, #64	@ 0x40
 8005f4a:	d103      	bne.n	8005f54 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f88e 	bl	800606e <I2C_MemoryTransmit_TXE_BTF>
}
 8005f52:	e012      	b.n	8005f7a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f58:	781a      	ldrb	r2, [r3, #0]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005f78:	e7ff      	b.n	8005f7a <I2C_MasterTransmit_TXE+0x130>
 8005f7a:	bf00      	nop
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f8e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b21      	cmp	r3, #33	@ 0x21
 8005f9a:	d164      	bne.n	8006066 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d012      	beq.n	8005fcc <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005faa:	781a      	ldrb	r2, [r3, #0]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb6:	1c5a      	adds	r2, r3, #1
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	3b01      	subs	r3, #1
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005fca:	e04c      	b.n	8006066 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d01d      	beq.n	800600e <I2C_MasterTransmit_BTF+0x8c>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d01a      	beq.n	800600e <I2C_MasterTransmit_BTF+0x8c>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fde:	d016      	beq.n	800600e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005fee:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2211      	movs	r2, #17
 8005ff4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2220      	movs	r2, #32
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7ff feb7 	bl	8005d7a <HAL_I2C_MasterTxCpltCallback>
}
 800600c:	e02b      	b.n	8006066 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800601c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800602c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006042:	b2db      	uxtb	r3, r3
 8006044:	2b40      	cmp	r3, #64	@ 0x40
 8006046:	d107      	bne.n	8006058 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7ff fed2 	bl	8005dfa <HAL_I2C_MemTxCpltCallback>
}
 8006056:	e006      	b.n	8006066 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff fe8a 	bl	8005d7a <HAL_I2C_MasterTxCpltCallback>
}
 8006066:	bf00      	nop
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800606e:	b580      	push	{r7, lr}
 8006070:	b084      	sub	sp, #16
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800607c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006082:	2b00      	cmp	r3, #0
 8006084:	d11d      	bne.n	80060c2 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800608a:	2b01      	cmp	r3, #1
 800608c:	d10b      	bne.n	80060a6 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006092:	b2da      	uxtb	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800609e:	1c9a      	adds	r2, r3, #2
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80060a4:	e077      	b.n	8006196 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	121b      	asrs	r3, r3, #8
 80060ae:	b2da      	uxtb	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80060c0:	e069      	b.n	8006196 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d10b      	bne.n	80060e2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80060e0:	e059      	b.n	8006196 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d152      	bne.n	8006190 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
 80060ec:	2b22      	cmp	r3, #34	@ 0x22
 80060ee:	d10d      	bne.n	800610c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060fe:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800610a:	e044      	b.n	8006196 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d015      	beq.n	8006142 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	2b21      	cmp	r3, #33	@ 0x21
 800611a:	d112      	bne.n	8006142 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006120:	781a      	ldrb	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006140:	e029      	b.n	8006196 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006146:	b29b      	uxth	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d124      	bne.n	8006196 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	2b21      	cmp	r3, #33	@ 0x21
 8006150:	d121      	bne.n	8006196 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685a      	ldr	r2, [r3, #4]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006160:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006170:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2220      	movs	r2, #32
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f7ff fe36 	bl	8005dfa <HAL_I2C_MemTxCpltCallback>
}
 800618e:	e002      	b.n	8006196 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff f93f 	bl	8005414 <I2C_Flush_DR>
}
 8006196:	bf00      	nop
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b22      	cmp	r3, #34	@ 0x22
 80061b0:	f040 80b9 	bne.w	8006326 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b8:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061be:	b29b      	uxth	r3, r3
 80061c0:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d921      	bls.n	800620c <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	3b01      	subs	r3, #1
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	2b03      	cmp	r3, #3
 80061f6:	f040 8096 	bne.w	8006326 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006208:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800620a:	e08c      	b.n	8006326 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006210:	2b02      	cmp	r3, #2
 8006212:	d07f      	beq.n	8006314 <I2C_MasterReceive_RXNE+0x176>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d002      	beq.n	8006220 <I2C_MasterReceive_RXNE+0x82>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d179      	bne.n	8006314 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f001 faf1 	bl	8007808 <I2C_WaitOnSTOPRequestThroughIT>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d14c      	bne.n	80062c6 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800623a:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800624a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691a      	ldr	r2, [r3, #16]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b40      	cmp	r3, #64	@ 0x40
 8006284:	d10a      	bne.n	800629c <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7ff fdba 	bl	8005e0e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800629a:	e044      	b.n	8006326 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b08      	cmp	r3, #8
 80062a8:	d002      	beq.n	80062b0 <I2C_MasterReceive_RXNE+0x112>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d103      	bne.n	80062b8 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	631a      	str	r2, [r3, #48]	@ 0x30
 80062b6:	e002      	b.n	80062be <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2212      	movs	r2, #18
 80062bc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f7ff fd65 	bl	8005d8e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80062c4:	e02f      	b.n	8006326 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685a      	ldr	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062d4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	3b01      	subs	r3, #1
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff fd88 	bl	8005e22 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006312:	e008      	b.n	8006326 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006322:	605a      	str	r2, [r3, #4]
}
 8006324:	e7ff      	b.n	8006326 <I2C_MasterReceive_RXNE+0x188>
 8006326:	bf00      	nop
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b084      	sub	sp, #16
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800633a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006340:	b29b      	uxth	r3, r3
 8006342:	2b04      	cmp	r3, #4
 8006344:	d11b      	bne.n	800637e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006354:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006372:	b29b      	uxth	r3, r3
 8006374:	3b01      	subs	r3, #1
 8006376:	b29a      	uxth	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800637c:	e0c4      	b.n	8006508 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b03      	cmp	r3, #3
 8006386:	d129      	bne.n	80063dc <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006396:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b04      	cmp	r3, #4
 800639c:	d00a      	beq.n	80063b4 <I2C_MasterReceive_BTF+0x86>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d007      	beq.n	80063b4 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063be:	b2d2      	uxtb	r2, r2
 80063c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	3b01      	subs	r3, #1
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80063da:	e095      	b.n	8006508 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d17d      	bne.n	80064e2 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d002      	beq.n	80063f2 <I2C_MasterReceive_BTF+0xc4>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b10      	cmp	r3, #16
 80063f0:	d108      	bne.n	8006404 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	e016      	b.n	8006432 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b04      	cmp	r3, #4
 8006408:	d002      	beq.n	8006410 <I2C_MasterReceive_BTF+0xe2>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d108      	bne.n	8006422 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	e007      	b.n	8006432 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006430:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	691a      	ldr	r2, [r3, #16]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800644e:	b29b      	uxth	r3, r3
 8006450:	3b01      	subs	r3, #1
 8006452:	b29a      	uxth	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	691a      	ldr	r2, [r3, #16]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006462:	b2d2      	uxtb	r2, r2
 8006464:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646a:	1c5a      	adds	r2, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006474:	b29b      	uxth	r3, r3
 8006476:	3b01      	subs	r3, #1
 8006478:	b29a      	uxth	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800648c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b40      	cmp	r3, #64	@ 0x40
 80064a0:	d10a      	bne.n	80064b8 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7ff fcac 	bl	8005e0e <HAL_I2C_MemRxCpltCallback>
}
 80064b6:	e027      	b.n	8006508 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b08      	cmp	r3, #8
 80064c4:	d002      	beq.n	80064cc <I2C_MasterReceive_BTF+0x19e>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b20      	cmp	r3, #32
 80064ca:	d103      	bne.n	80064d4 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80064d2:	e002      	b.n	80064da <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2212      	movs	r2, #18
 80064d8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7ff fc57 	bl	8005d8e <HAL_I2C_MasterRxCpltCallback>
}
 80064e0:	e012      	b.n	8006508 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	691a      	ldr	r2, [r3, #16]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ec:	b2d2      	uxtb	r2, r2
 80064ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064fe:	b29b      	uxth	r3, r3
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006508:	bf00      	nop
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b40      	cmp	r3, #64	@ 0x40
 8006522:	d117      	bne.n	8006554 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006528:	2b00      	cmp	r3, #0
 800652a:	d109      	bne.n	8006540 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006530:	b2db      	uxtb	r3, r3
 8006532:	461a      	mov	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800653c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800653e:	e067      	b.n	8006610 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006544:	b2db      	uxtb	r3, r3
 8006546:	f043 0301 	orr.w	r3, r3, #1
 800654a:	b2da      	uxtb	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	611a      	str	r2, [r3, #16]
}
 8006552:	e05d      	b.n	8006610 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800655c:	d133      	bne.n	80065c6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b21      	cmp	r3, #33	@ 0x21
 8006568:	d109      	bne.n	800657e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656e:	b2db      	uxtb	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800657a:	611a      	str	r2, [r3, #16]
 800657c:	e008      	b.n	8006590 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	b2da      	uxtb	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006594:	2b00      	cmp	r3, #0
 8006596:	d004      	beq.n	80065a2 <I2C_Master_SB+0x92>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800659c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d108      	bne.n	80065b4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d032      	beq.n	8006610 <I2C_Master_SB+0x100>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d02d      	beq.n	8006610 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065c2:	605a      	str	r2, [r3, #4]
}
 80065c4:	e024      	b.n	8006610 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10e      	bne.n	80065ec <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	11db      	asrs	r3, r3, #7
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	f003 0306 	and.w	r3, r3, #6
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	f063 030f 	orn	r3, r3, #15
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	611a      	str	r2, [r3, #16]
}
 80065ea:	e011      	b.n	8006610 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d10d      	bne.n	8006610 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	11db      	asrs	r3, r3, #7
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	f003 0306 	and.w	r3, r3, #6
 8006602:	b2db      	uxtb	r3, r3
 8006604:	f063 030e 	orn	r3, r3, #14
 8006608:	b2da      	uxtb	r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	611a      	str	r2, [r3, #16]
}
 8006610:	bf00      	nop
 8006612:	370c      	adds	r7, #12
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800661c:	b480      	push	{r7}
 800661e:	b083      	sub	sp, #12
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006628:	b2da      	uxtb	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <I2C_Master_ADD10+0x26>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800663c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800663e:	2b00      	cmp	r3, #0
 8006640:	d108      	bne.n	8006654 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00c      	beq.n	8006664 <I2C_Master_ADD10+0x48>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006650:	2b00      	cmp	r3, #0
 8006652:	d007      	beq.n	8006664 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006662:	605a      	str	r2, [r3, #4]
  }
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006670:	b480      	push	{r7}
 8006672:	b091      	sub	sp, #68	@ 0x44
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800667e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006686:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668c:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b22      	cmp	r3, #34	@ 0x22
 8006698:	f040 8169 	bne.w	800696e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10f      	bne.n	80066c4 <I2C_Master_ADDR+0x54>
 80066a4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80066a8:	2b40      	cmp	r3, #64	@ 0x40
 80066aa:	d10b      	bne.n	80066c4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ac:	2300      	movs	r3, #0
 80066ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	633b      	str	r3, [r7, #48]	@ 0x30
 80066c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c2:	e160      	b.n	8006986 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d11d      	bne.n	8006708 <I2C_Master_ADDR+0x98>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80066d4:	d118      	bne.n	8006708 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066d6:	2300      	movs	r3, #0
 80066d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	699b      	ldr	r3, [r3, #24]
 80066e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066fa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	651a      	str	r2, [r3, #80]	@ 0x50
 8006706:	e13e      	b.n	8006986 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d113      	bne.n	800673a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006712:	2300      	movs	r3, #0
 8006714:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	695b      	ldr	r3, [r3, #20]
 800671c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006726:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	e115      	b.n	8006966 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800673e:	b29b      	uxth	r3, r3
 8006740:	2b01      	cmp	r3, #1
 8006742:	f040 808a 	bne.w	800685a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006748:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800674c:	d137      	bne.n	80067be <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800675c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800676c:	d113      	bne.n	8006796 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800677c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800677e:	2300      	movs	r3, #0
 8006780:	627b      	str	r3, [r7, #36]	@ 0x24
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	627b      	str	r3, [r7, #36]	@ 0x24
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	627b      	str	r3, [r7, #36]	@ 0x24
 8006792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006794:	e0e7      	b.n	8006966 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006796:	2300      	movs	r3, #0
 8006798:	623b      	str	r3, [r7, #32]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	623b      	str	r3, [r7, #32]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	623b      	str	r3, [r7, #32]
 80067aa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	e0d3      	b.n	8006966 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80067be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c0:	2b08      	cmp	r3, #8
 80067c2:	d02e      	beq.n	8006822 <I2C_Master_ADDR+0x1b2>
 80067c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067c6:	2b20      	cmp	r3, #32
 80067c8:	d02b      	beq.n	8006822 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80067ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067cc:	2b12      	cmp	r3, #18
 80067ce:	d102      	bne.n	80067d6 <I2C_Master_ADDR+0x166>
 80067d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d125      	bne.n	8006822 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80067d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d8:	2b04      	cmp	r3, #4
 80067da:	d00e      	beq.n	80067fa <I2C_Master_ADDR+0x18a>
 80067dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d00b      	beq.n	80067fa <I2C_Master_ADDR+0x18a>
 80067e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d008      	beq.n	80067fa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	e007      	b.n	800680a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006808:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800680a:	2300      	movs	r3, #0
 800680c:	61fb      	str	r3, [r7, #28]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	61fb      	str	r3, [r7, #28]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	699b      	ldr	r3, [r3, #24]
 800681c:	61fb      	str	r3, [r7, #28]
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	e0a1      	b.n	8006966 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006830:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006832:	2300      	movs	r3, #0
 8006834:	61bb      	str	r3, [r7, #24]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	61bb      	str	r3, [r7, #24]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	61bb      	str	r3, [r7, #24]
 8006846:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	e085      	b.n	8006966 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800685e:	b29b      	uxth	r3, r3
 8006860:	2b02      	cmp	r3, #2
 8006862:	d14d      	bne.n	8006900 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006866:	2b04      	cmp	r3, #4
 8006868:	d016      	beq.n	8006898 <I2C_Master_ADDR+0x228>
 800686a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800686c:	2b02      	cmp	r3, #2
 800686e:	d013      	beq.n	8006898 <I2C_Master_ADDR+0x228>
 8006870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006872:	2b10      	cmp	r3, #16
 8006874:	d010      	beq.n	8006898 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006884:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	e007      	b.n	80068a8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068a6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068b6:	d117      	bne.n	80068e8 <I2C_Master_ADDR+0x278>
 80068b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068be:	d00b      	beq.n	80068d8 <I2C_Master_ADDR+0x268>
 80068c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d008      	beq.n	80068d8 <I2C_Master_ADDR+0x268>
 80068c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c8:	2b08      	cmp	r3, #8
 80068ca:	d005      	beq.n	80068d8 <I2C_Master_ADDR+0x268>
 80068cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068ce:	2b10      	cmp	r3, #16
 80068d0:	d002      	beq.n	80068d8 <I2C_Master_ADDR+0x268>
 80068d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d4:	2b20      	cmp	r3, #32
 80068d6:	d107      	bne.n	80068e8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80068e6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	617b      	str	r3, [r7, #20]
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	e032      	b.n	8006966 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800690e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800691a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800691e:	d117      	bne.n	8006950 <I2C_Master_ADDR+0x2e0>
 8006920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006922:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006926:	d00b      	beq.n	8006940 <I2C_Master_ADDR+0x2d0>
 8006928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800692a:	2b01      	cmp	r3, #1
 800692c:	d008      	beq.n	8006940 <I2C_Master_ADDR+0x2d0>
 800692e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006930:	2b08      	cmp	r3, #8
 8006932:	d005      	beq.n	8006940 <I2C_Master_ADDR+0x2d0>
 8006934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006936:	2b10      	cmp	r3, #16
 8006938:	d002      	beq.n	8006940 <I2C_Master_ADDR+0x2d0>
 800693a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800693c:	2b20      	cmp	r3, #32
 800693e:	d107      	bne.n	8006950 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800694e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006950:	2300      	movs	r3, #0
 8006952:	613b      	str	r3, [r7, #16]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	613b      	str	r3, [r7, #16]
 8006964:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800696c:	e00b      	b.n	8006986 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	699b      	ldr	r3, [r3, #24]
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	68fb      	ldr	r3, [r7, #12]
}
 8006984:	e7ff      	b.n	8006986 <I2C_Master_ADDR+0x316>
 8006986:	bf00      	nop
 8006988:	3744      	adds	r7, #68	@ 0x44
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr

08006992 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d02b      	beq.n	8006a04 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b0:	781a      	ldrb	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	3b01      	subs	r3, #1
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d114      	bne.n	8006a04 <I2C_SlaveTransmit_TXE+0x72>
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	2b29      	cmp	r3, #41	@ 0x29
 80069de:	d111      	bne.n	8006a04 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2221      	movs	r2, #33	@ 0x21
 80069f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2228      	movs	r2, #40	@ 0x28
 80069fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f7ff f9cf 	bl	8005da2 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006a04:	bf00      	nop
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d011      	beq.n	8006a42 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a22:	781a      	ldrb	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr

08006a4e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b084      	sub	sp, #16
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a5c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d02c      	beq.n	8006ac2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691a      	ldr	r2, [r3, #16]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d114      	bne.n	8006ac2 <I2C_SlaveReceive_RXNE+0x74>
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
 8006a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a9c:	d111      	bne.n	8006ac2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	685a      	ldr	r2, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2222      	movs	r2, #34	@ 0x22
 8006ab2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2228      	movs	r2, #40	@ 0x28
 8006ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff f97a 	bl	8005db6 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006ac2:	bf00      	nop
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d012      	beq.n	8006b02 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691a      	ldr	r2, [r3, #16]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae6:	b2d2      	uxtb	r2, r2
 8006ae8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aee:	1c5a      	adds	r2, r3, #1
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	3b01      	subs	r3, #1
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006b02:	bf00      	nop
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr

08006b0e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b084      	sub	sp, #16
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b28:	2b28      	cmp	r3, #40	@ 0x28
 8006b2a:	d127      	bne.n	8006b7c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b3a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	089b      	lsrs	r3, r3, #2
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	09db      	lsrs	r3, r3, #7
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d103      	bne.n	8006b60 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	81bb      	strh	r3, [r7, #12]
 8006b5e:	e002      	b.n	8006b66 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006b6e:	89ba      	ldrh	r2, [r7, #12]
 8006b70:	7bfb      	ldrb	r3, [r7, #15]
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7ff f928 	bl	8005dca <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006b7a:	e00e      	b.n	8006b9a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60bb      	str	r3, [r7, #8]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	60bb      	str	r3, [r7, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	60bb      	str	r3, [r7, #8]
 8006b90:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006b9a:	bf00      	nop
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bb2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685a      	ldr	r2, [r3, #4]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006bc2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	60bb      	str	r3, [r7, #8]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	60bb      	str	r3, [r7, #8]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0201 	orr.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bf0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c00:	d172      	bne.n	8006ce8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	2b22      	cmp	r3, #34	@ 0x22
 8006c06:	d002      	beq.n	8006c0e <I2C_Slave_STOPF+0x6a>
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
 8006c0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c0c:	d135      	bne.n	8006c7a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d005      	beq.n	8006c32 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2a:	f043 0204 	orr.w	r2, r3, #4
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe f891 	bl	8004d6e <HAL_DMA_GetState>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d049      	beq.n	8006ce6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c56:	4a69      	ldr	r2, [pc, #420]	@ (8006dfc <I2C_Slave_STOPF+0x258>)
 8006c58:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fe f863 	bl	8004d2a <HAL_DMA_Abort_IT>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d03d      	beq.n	8006ce6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006c74:	4610      	mov	r0, r2
 8006c76:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c78:	e035      	b.n	8006ce6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d005      	beq.n	8006c9e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c96:	f043 0204 	orr.w	r2, r3, #4
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fe f85b 	bl	8004d6e <HAL_DMA_GetState>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d014      	beq.n	8006ce8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc2:	4a4e      	ldr	r2, [pc, #312]	@ (8006dfc <I2C_Slave_STOPF+0x258>)
 8006cc4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fe f82d 	bl	8004d2a <HAL_DMA_Abort_IT>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d008      	beq.n	8006ce8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	4798      	blx	r3
 8006ce4:	e000      	b.n	8006ce8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ce6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d03e      	beq.n	8006d70 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d112      	bne.n	8006d26 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	691a      	ldr	r2, [r3, #16]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d12:	1c5a      	adds	r2, r3, #1
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d30:	2b40      	cmp	r3, #64	@ 0x40
 8006d32:	d112      	bne.n	8006d5a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	691a      	ldr	r2, [r3, #16]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d46:	1c5a      	adds	r2, r3, #1
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	3b01      	subs	r3, #1
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d005      	beq.n	8006d70 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d68:	f043 0204 	orr.w	r2, r3, #4
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f843 	bl	8006e04 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006d7e:	e039      	b.n	8006df4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d84:	d109      	bne.n	8006d9a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2228      	movs	r2, #40	@ 0x28
 8006d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff f80e 	bl	8005db6 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b28      	cmp	r3, #40	@ 0x28
 8006da4:	d111      	bne.n	8006dca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a15      	ldr	r2, [pc, #84]	@ (8006e00 <I2C_Slave_STOPF+0x25c>)
 8006daa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2220      	movs	r2, #32
 8006db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7ff f80f 	bl	8005de6 <HAL_I2C_ListenCpltCallback>
}
 8006dc8:	e014      	b.n	8006df4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dce:	2b22      	cmp	r3, #34	@ 0x22
 8006dd0:	d002      	beq.n	8006dd8 <I2C_Slave_STOPF+0x234>
 8006dd2:	7bfb      	ldrb	r3, [r7, #15]
 8006dd4:	2b22      	cmp	r3, #34	@ 0x22
 8006dd6:	d10d      	bne.n	8006df4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fe ffe1 	bl	8005db6 <HAL_I2C_SlaveRxCpltCallback>
}
 8006df4:	bf00      	nop
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	08007365 	.word	0x08007365
 8006e00:	ffff0000 	.word	0xffff0000

08006e04 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	2b10      	cmp	r3, #16
 8006e20:	d002      	beq.n	8006e28 <I2C_ITError+0x24>
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	2b40      	cmp	r3, #64	@ 0x40
 8006e26:	d10a      	bne.n	8006e3e <I2C_ITError+0x3a>
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	2b22      	cmp	r3, #34	@ 0x22
 8006e2c:	d107      	bne.n	8006e3e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e3c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
 8006e40:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006e44:	2b28      	cmp	r3, #40	@ 0x28
 8006e46:	d107      	bne.n	8006e58 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2228      	movs	r2, #40	@ 0x28
 8006e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006e56:	e015      	b.n	8006e84 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e66:	d00a      	beq.n	8006e7e <I2C_ITError+0x7a>
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	2b60      	cmp	r3, #96	@ 0x60
 8006e6c:	d007      	beq.n	8006e7e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006e92:	d162      	bne.n	8006f5a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	685a      	ldr	r2, [r3, #4]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ea2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d020      	beq.n	8006ef4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eb6:	4a6a      	ldr	r2, [pc, #424]	@ (8007060 <I2C_ITError+0x25c>)
 8006eb8:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fd ff33 	bl	8004d2a <HAL_DMA_Abort_IT>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 8089 	beq.w	8006fde <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f022 0201 	bic.w	r2, r2, #1
 8006eda:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006eee:	4610      	mov	r0, r2
 8006ef0:	4798      	blx	r3
 8006ef2:	e074      	b.n	8006fde <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef8:	4a59      	ldr	r2, [pc, #356]	@ (8007060 <I2C_ITError+0x25c>)
 8006efa:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fd ff12 	bl	8004d2a <HAL_DMA_Abort_IT>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d068      	beq.n	8006fde <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f16:	2b40      	cmp	r3, #64	@ 0x40
 8006f18:	d10b      	bne.n	8006f32 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f24:	b2d2      	uxtb	r2, r2
 8006f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2c:	1c5a      	adds	r2, r3, #1
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0201 	bic.w	r2, r2, #1
 8006f40:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f54:	4610      	mov	r0, r2
 8006f56:	4798      	blx	r3
 8006f58:	e041      	b.n	8006fde <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b60      	cmp	r3, #96	@ 0x60
 8006f64:	d125      	bne.n	8006fb2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f7e:	2b40      	cmp	r3, #64	@ 0x40
 8006f80:	d10b      	bne.n	8006f9a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8c:	b2d2      	uxtb	r2, r2
 8006f8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 0201 	bic.w	r2, r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f7fe ff43 	bl	8005e36 <HAL_I2C_AbortCpltCallback>
 8006fb0:	e015      	b.n	8006fde <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	695b      	ldr	r3, [r3, #20]
 8006fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fbc:	2b40      	cmp	r3, #64	@ 0x40
 8006fbe:	d10b      	bne.n	8006fd8 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	691a      	ldr	r2, [r3, #16]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd2:	1c5a      	adds	r2, r3, #1
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7fe ff22 	bl	8005e22 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fe2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10e      	bne.n	800700c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d109      	bne.n	800700c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d104      	bne.n	800700c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007008:	2b00      	cmp	r3, #0
 800700a:	d007      	beq.n	800701c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800701a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007022:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007028:	f003 0304 	and.w	r3, r3, #4
 800702c:	2b04      	cmp	r3, #4
 800702e:	d113      	bne.n	8007058 <I2C_ITError+0x254>
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	2b28      	cmp	r3, #40	@ 0x28
 8007034:	d110      	bne.n	8007058 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	4a0a      	ldr	r2, [pc, #40]	@ (8007064 <I2C_ITError+0x260>)
 800703a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2220      	movs	r2, #32
 8007046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7fe fec7 	bl	8005de6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007058:	bf00      	nop
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	08007365 	.word	0x08007365
 8007064:	ffff0000 	.word	0xffff0000

08007068 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af02      	add	r7, sp, #8
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	4608      	mov	r0, r1
 8007072:	4611      	mov	r1, r2
 8007074:	461a      	mov	r2, r3
 8007076:	4603      	mov	r3, r0
 8007078:	817b      	strh	r3, [r7, #10]
 800707a:	460b      	mov	r3, r1
 800707c:	813b      	strh	r3, [r7, #8]
 800707e:	4613      	mov	r3, r2
 8007080:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007090:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	2200      	movs	r2, #0
 800709a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 fa08 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00d      	beq.n	80070c6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070b8:	d103      	bne.n	80070c2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e05f      	b.n	8007186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070c6:	897b      	ldrh	r3, [r7, #10]
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	461a      	mov	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80070d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80070d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d8:	6a3a      	ldr	r2, [r7, #32]
 80070da:	492d      	ldr	r1, [pc, #180]	@ (8007190 <I2C_RequestMemoryWrite+0x128>)
 80070dc:	68f8      	ldr	r0, [r7, #12]
 80070de:	f000 fa63 	bl	80075a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	e04c      	b.n	8007186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80070ec:	2300      	movs	r3, #0
 80070ee:	617b      	str	r3, [r7, #20]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	617b      	str	r3, [r7, #20]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007104:	6a39      	ldr	r1, [r7, #32]
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 faee 	bl	80076e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00d      	beq.n	800712e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007116:	2b04      	cmp	r3, #4
 8007118:	d107      	bne.n	800712a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007128:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e02b      	b.n	8007186 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800712e:	88fb      	ldrh	r3, [r7, #6]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d105      	bne.n	8007140 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007134:	893b      	ldrh	r3, [r7, #8]
 8007136:	b2da      	uxtb	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	611a      	str	r2, [r3, #16]
 800713e:	e021      	b.n	8007184 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007140:	893b      	ldrh	r3, [r7, #8]
 8007142:	0a1b      	lsrs	r3, r3, #8
 8007144:	b29b      	uxth	r3, r3
 8007146:	b2da      	uxtb	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800714e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007150:	6a39      	ldr	r1, [r7, #32]
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f000 fac8 	bl	80076e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00d      	beq.n	800717a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007162:	2b04      	cmp	r3, #4
 8007164:	d107      	bne.n	8007176 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007174:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e005      	b.n	8007186 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800717a:	893b      	ldrh	r3, [r7, #8]
 800717c:	b2da      	uxtb	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	00010002 	.word	0x00010002

08007194 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af02      	add	r7, sp, #8
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	4608      	mov	r0, r1
 800719e:	4611      	mov	r1, r2
 80071a0:	461a      	mov	r2, r3
 80071a2:	4603      	mov	r3, r0
 80071a4:	817b      	strh	r3, [r7, #10]
 80071a6:	460b      	mov	r3, r1
 80071a8:	813b      	strh	r3, [r7, #8]
 80071aa:	4613      	mov	r3, r2
 80071ac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80071bc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681a      	ldr	r2, [r3, #0]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d0:	9300      	str	r3, [sp, #0]
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f000 f96a 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00d      	beq.n	8007202 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071f4:	d103      	bne.n	80071fe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e0aa      	b.n	8007358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007202:	897b      	ldrh	r3, [r7, #10]
 8007204:	b2db      	uxtb	r3, r3
 8007206:	461a      	mov	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007210:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	6a3a      	ldr	r2, [r7, #32]
 8007216:	4952      	ldr	r1, [pc, #328]	@ (8007360 <I2C_RequestMemoryRead+0x1cc>)
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 f9c5 	bl	80075a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e097      	b.n	8007358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007228:	2300      	movs	r3, #0
 800722a:	617b      	str	r3, [r7, #20]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	617b      	str	r3, [r7, #20]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	617b      	str	r3, [r7, #20]
 800723c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800723e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007240:	6a39      	ldr	r1, [r7, #32]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 fa50 	bl	80076e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00d      	beq.n	800726a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	2b04      	cmp	r3, #4
 8007254:	d107      	bne.n	8007266 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007264:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e076      	b.n	8007358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800726a:	88fb      	ldrh	r3, [r7, #6]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d105      	bne.n	800727c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007270:	893b      	ldrh	r3, [r7, #8]
 8007272:	b2da      	uxtb	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	611a      	str	r2, [r3, #16]
 800727a:	e021      	b.n	80072c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800727c:	893b      	ldrh	r3, [r7, #8]
 800727e:	0a1b      	lsrs	r3, r3, #8
 8007280:	b29b      	uxth	r3, r3
 8007282:	b2da      	uxtb	r2, r3
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800728a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800728c:	6a39      	ldr	r1, [r7, #32]
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f000 fa2a 	bl	80076e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00d      	beq.n	80072b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800729e:	2b04      	cmp	r3, #4
 80072a0:	d107      	bne.n	80072b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e050      	b.n	8007358 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80072b6:	893b      	ldrh	r3, [r7, #8]
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072c2:	6a39      	ldr	r1, [r7, #32]
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 fa0f 	bl	80076e8 <I2C_WaitOnTXEFlagUntilTimeout>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00d      	beq.n	80072ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d4:	2b04      	cmp	r3, #4
 80072d6:	d107      	bne.n	80072e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	681a      	ldr	r2, [r3, #0]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80072e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e035      	b.n	8007358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fe:	9300      	str	r3, [sp, #0]
 8007300:	6a3b      	ldr	r3, [r7, #32]
 8007302:	2200      	movs	r2, #0
 8007304:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f8d3 	bl	80074b4 <I2C_WaitOnFlagUntilTimeout>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00d      	beq.n	8007330 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800731e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007322:	d103      	bne.n	800732c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800732a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800732c:	2303      	movs	r3, #3
 800732e:	e013      	b.n	8007358 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007330:	897b      	ldrh	r3, [r7, #10]
 8007332:	b2db      	uxtb	r3, r3
 8007334:	f043 0301 	orr.w	r3, r3, #1
 8007338:	b2da      	uxtb	r2, r3
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007342:	6a3a      	ldr	r2, [r7, #32]
 8007344:	4906      	ldr	r1, [pc, #24]	@ (8007360 <I2C_RequestMemoryRead+0x1cc>)
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f000 f92e 	bl	80075a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e000      	b.n	8007358 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3718      	adds	r7, #24
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	00010002 	.word	0x00010002

08007364 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007374:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800737c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800737e:	4b4b      	ldr	r3, [pc, #300]	@ (80074ac <I2C_DMAAbort+0x148>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	08db      	lsrs	r3, r3, #3
 8007384:	4a4a      	ldr	r2, [pc, #296]	@ (80074b0 <I2C_DMAAbort+0x14c>)
 8007386:	fba2 2303 	umull	r2, r3, r2, r3
 800738a:	0a1a      	lsrs	r2, r3, #8
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	00da      	lsls	r2, r3, #3
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d106      	bne.n	80073ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a2:	f043 0220 	orr.w	r2, r3, #32
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80073aa:	e00a      	b.n	80073c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073c0:	d0ea      	beq.n	8007398 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ce:	2200      	movs	r2, #0
 80073d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073de:	2200      	movs	r2, #0
 80073e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80073f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2200      	movs	r2, #0
 80073f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007404:	2200      	movs	r2, #0
 8007406:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007414:	2200      	movs	r2, #0
 8007416:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 0201 	bic.w	r2, r2, #1
 8007426:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800742e:	b2db      	uxtb	r3, r3
 8007430:	2b60      	cmp	r3, #96	@ 0x60
 8007432:	d10e      	bne.n	8007452 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	2220      	movs	r2, #32
 8007438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	2200      	movs	r2, #0
 8007448:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800744a:	6978      	ldr	r0, [r7, #20]
 800744c:	f7fe fcf3 	bl	8005e36 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007450:	e027      	b.n	80074a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007452:	7cfb      	ldrb	r3, [r7, #19]
 8007454:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007458:	2b28      	cmp	r3, #40	@ 0x28
 800745a:	d117      	bne.n	800748c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0201 	orr.w	r2, r2, #1
 800746a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800747a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	2200      	movs	r2, #0
 8007480:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2228      	movs	r2, #40	@ 0x28
 8007486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800748a:	e007      	b.n	800749c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2220      	movs	r2, #32
 8007490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800749c:	6978      	ldr	r0, [r7, #20]
 800749e:	f7fe fcc0 	bl	8005e22 <HAL_I2C_ErrorCallback>
}
 80074a2:	bf00      	nop
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20000004 	.word	0x20000004
 80074b0:	14f8b589 	.word	0x14f8b589

080074b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	4613      	mov	r3, r2
 80074c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074c4:	e048      	b.n	8007558 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074cc:	d044      	beq.n	8007558 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ce:	f7fc f853 	bl	8003578 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d302      	bcc.n	80074e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d139      	bne.n	8007558 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	0c1b      	lsrs	r3, r3, #16
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d10d      	bne.n	800750a <I2C_WaitOnFlagUntilTimeout+0x56>
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	43da      	mvns	r2, r3
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	4013      	ands	r3, r2
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	bf0c      	ite	eq
 8007500:	2301      	moveq	r3, #1
 8007502:	2300      	movne	r3, #0
 8007504:	b2db      	uxtb	r3, r3
 8007506:	461a      	mov	r2, r3
 8007508:	e00c      	b.n	8007524 <I2C_WaitOnFlagUntilTimeout+0x70>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	43da      	mvns	r2, r3
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	4013      	ands	r3, r2
 8007516:	b29b      	uxth	r3, r3
 8007518:	2b00      	cmp	r3, #0
 800751a:	bf0c      	ite	eq
 800751c:	2301      	moveq	r3, #1
 800751e:	2300      	movne	r3, #0
 8007520:	b2db      	uxtb	r3, r3
 8007522:	461a      	mov	r2, r3
 8007524:	79fb      	ldrb	r3, [r7, #7]
 8007526:	429a      	cmp	r2, r3
 8007528:	d116      	bne.n	8007558 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2220      	movs	r2, #32
 8007534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007544:	f043 0220 	orr.w	r2, r3, #32
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e023      	b.n	80075a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	0c1b      	lsrs	r3, r3, #16
 800755c:	b2db      	uxtb	r3, r3
 800755e:	2b01      	cmp	r3, #1
 8007560:	d10d      	bne.n	800757e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	43da      	mvns	r2, r3
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	4013      	ands	r3, r2
 800756e:	b29b      	uxth	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	bf0c      	ite	eq
 8007574:	2301      	moveq	r3, #1
 8007576:	2300      	movne	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	461a      	mov	r2, r3
 800757c:	e00c      	b.n	8007598 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	43da      	mvns	r2, r3
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	4013      	ands	r3, r2
 800758a:	b29b      	uxth	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	bf0c      	ite	eq
 8007590:	2301      	moveq	r3, #1
 8007592:	2300      	movne	r3, #0
 8007594:	b2db      	uxtb	r3, r3
 8007596:	461a      	mov	r2, r3
 8007598:	79fb      	ldrb	r3, [r7, #7]
 800759a:	429a      	cmp	r2, r3
 800759c:	d093      	beq.n	80074c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
 80075b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075b6:	e071      	b.n	800769c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075c6:	d123      	bne.n	8007610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	681a      	ldr	r2, [r3, #0]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80075e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075fc:	f043 0204 	orr.w	r2, r3, #4
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e067      	b.n	80076e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007616:	d041      	beq.n	800769c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007618:	f7fb ffae 	bl	8003578 <HAL_GetTick>
 800761c:	4602      	mov	r2, r0
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	429a      	cmp	r2, r3
 8007626:	d302      	bcc.n	800762e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d136      	bne.n	800769c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	0c1b      	lsrs	r3, r3, #16
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b01      	cmp	r3, #1
 8007636:	d10c      	bne.n	8007652 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	43da      	mvns	r2, r3
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	4013      	ands	r3, r2
 8007644:	b29b      	uxth	r3, r3
 8007646:	2b00      	cmp	r3, #0
 8007648:	bf14      	ite	ne
 800764a:	2301      	movne	r3, #1
 800764c:	2300      	moveq	r3, #0
 800764e:	b2db      	uxtb	r3, r3
 8007650:	e00b      	b.n	800766a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	43da      	mvns	r2, r3
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	4013      	ands	r3, r2
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	bf14      	ite	ne
 8007664:	2301      	movne	r3, #1
 8007666:	2300      	moveq	r3, #0
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d016      	beq.n	800769c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2200      	movs	r2, #0
 8007680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007688:	f043 0220 	orr.w	r2, r3, #32
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007698:	2301      	movs	r3, #1
 800769a:	e021      	b.n	80076e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	0c1b      	lsrs	r3, r3, #16
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d10c      	bne.n	80076c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	43da      	mvns	r2, r3
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	4013      	ands	r3, r2
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	bf14      	ite	ne
 80076b8:	2301      	movne	r3, #1
 80076ba:	2300      	moveq	r3, #0
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	e00b      	b.n	80076d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	43da      	mvns	r2, r3
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	4013      	ands	r3, r2
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	bf14      	ite	ne
 80076d2:	2301      	movne	r3, #1
 80076d4:	2300      	moveq	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f47f af6d 	bne.w	80075b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076f4:	e034      	b.n	8007760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 f915 	bl	8007926 <I2C_IsAcknowledgeFailed>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e034      	b.n	8007770 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800770c:	d028      	beq.n	8007760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800770e:	f7fb ff33 	bl	8003578 <HAL_GetTick>
 8007712:	4602      	mov	r2, r0
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	1ad3      	subs	r3, r2, r3
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	429a      	cmp	r2, r3
 800771c:	d302      	bcc.n	8007724 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d11d      	bne.n	8007760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800772e:	2b80      	cmp	r3, #128	@ 0x80
 8007730:	d016      	beq.n	8007760 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2200      	movs	r2, #0
 8007736:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2220      	movs	r2, #32
 800773c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800774c:	f043 0220 	orr.w	r2, r3, #32
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e007      	b.n	8007770 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800776a:	2b80      	cmp	r3, #128	@ 0x80
 800776c:	d1c3      	bne.n	80076f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007784:	e034      	b.n	80077f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 f8cd 	bl	8007926 <I2C_IsAcknowledgeFailed>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e034      	b.n	8007800 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800779c:	d028      	beq.n	80077f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800779e:	f7fb feeb 	bl	8003578 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d302      	bcc.n	80077b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d11d      	bne.n	80077f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	695b      	ldr	r3, [r3, #20]
 80077ba:	f003 0304 	and.w	r3, r3, #4
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d016      	beq.n	80077f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2200      	movs	r2, #0
 80077c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2220      	movs	r2, #32
 80077cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077dc:	f043 0220 	orr.w	r2, r3, #32
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e007      	b.n	8007800 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	f003 0304 	and.w	r3, r3, #4
 80077fa:	2b04      	cmp	r3, #4
 80077fc:	d1c3      	bne.n	8007786 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007814:	4b13      	ldr	r3, [pc, #76]	@ (8007864 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	08db      	lsrs	r3, r3, #3
 800781a:	4a13      	ldr	r2, [pc, #76]	@ (8007868 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800781c:	fba2 2303 	umull	r2, r3, r2, r3
 8007820:	0a1a      	lsrs	r2, r3, #8
 8007822:	4613      	mov	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	3b01      	subs	r3, #1
 800782e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d107      	bne.n	8007846 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800783a:	f043 0220 	orr.w	r2, r3, #32
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e008      	b.n	8007858 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007854:	d0e9      	beq.n	800782a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	20000004 	.word	0x20000004
 8007868:	14f8b589 	.word	0x14f8b589

0800786c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007878:	e049      	b.n	800790e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	695b      	ldr	r3, [r3, #20]
 8007880:	f003 0310 	and.w	r3, r3, #16
 8007884:	2b10      	cmp	r3, #16
 8007886:	d119      	bne.n	80078bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f06f 0210 	mvn.w	r2, #16
 8007890:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e030      	b.n	800791e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078bc:	f7fb fe5c 	bl	8003578 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	68ba      	ldr	r2, [r7, #8]
 80078c8:	429a      	cmp	r2, r3
 80078ca:	d302      	bcc.n	80078d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d11d      	bne.n	800790e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078dc:	2b40      	cmp	r3, #64	@ 0x40
 80078de:	d016      	beq.n	800790e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fa:	f043 0220 	orr.w	r2, r3, #32
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e007      	b.n	800791e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	695b      	ldr	r3, [r3, #20]
 8007914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007918:	2b40      	cmp	r3, #64	@ 0x40
 800791a:	d1ae      	bne.n	800787a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	3710      	adds	r7, #16
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007926:	b480      	push	{r7}
 8007928:	b083      	sub	sp, #12
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800793c:	d11b      	bne.n	8007976 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007946:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2220      	movs	r2, #32
 8007952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007962:	f043 0204 	orr.w	r2, r3, #4
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e000      	b.n	8007978 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007990:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007994:	d103      	bne.n	800799e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800799c:	e007      	b.n	80079ae <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80079a6:	d102      	bne.n	80079ae <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2208      	movs	r2, #8
 80079ac:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80079ae:	bf00      	nop
 80079b0:	370c      	adds	r7, #12
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
	...

080079bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d101      	bne.n	80079ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e267      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 0301 	and.w	r3, r3, #1
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d075      	beq.n	8007ac6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80079da:	4b88      	ldr	r3, [pc, #544]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f003 030c 	and.w	r3, r3, #12
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d00c      	beq.n	8007a00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079e6:	4b85      	ldr	r3, [pc, #532]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d112      	bne.n	8007a18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079f2:	4b82      	ldr	r3, [pc, #520]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079fe:	d10b      	bne.n	8007a18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a00:	4b7e      	ldr	r3, [pc, #504]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d05b      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x108>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d157      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e242      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a20:	d106      	bne.n	8007a30 <HAL_RCC_OscConfig+0x74>
 8007a22:	4b76      	ldr	r3, [pc, #472]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a75      	ldr	r2, [pc, #468]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007a28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	e01d      	b.n	8007a6c <HAL_RCC_OscConfig+0xb0>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a38:	d10c      	bne.n	8007a54 <HAL_RCC_OscConfig+0x98>
 8007a3a:	4b70      	ldr	r3, [pc, #448]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a6f      	ldr	r2, [pc, #444]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007a40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a44:	6013      	str	r3, [r2, #0]
 8007a46:	4b6d      	ldr	r3, [pc, #436]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a6c      	ldr	r2, [pc, #432]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007a4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a50:	6013      	str	r3, [r2, #0]
 8007a52:	e00b      	b.n	8007a6c <HAL_RCC_OscConfig+0xb0>
 8007a54:	4b69      	ldr	r3, [pc, #420]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a68      	ldr	r2, [pc, #416]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a5e:	6013      	str	r3, [r2, #0]
 8007a60:	4b66      	ldr	r3, [pc, #408]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a65      	ldr	r2, [pc, #404]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007a66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d013      	beq.n	8007a9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a74:	f7fb fd80 	bl	8003578 <HAL_GetTick>
 8007a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a7a:	e008      	b.n	8007a8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a7c:	f7fb fd7c 	bl	8003578 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	2b64      	cmp	r3, #100	@ 0x64
 8007a88:	d901      	bls.n	8007a8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a8a:	2303      	movs	r3, #3
 8007a8c:	e207      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a8e:	4b5b      	ldr	r3, [pc, #364]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d0f0      	beq.n	8007a7c <HAL_RCC_OscConfig+0xc0>
 8007a9a:	e014      	b.n	8007ac6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a9c:	f7fb fd6c 	bl	8003578 <HAL_GetTick>
 8007aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aa2:	e008      	b.n	8007ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007aa4:	f7fb fd68 	bl	8003578 <HAL_GetTick>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	1ad3      	subs	r3, r2, r3
 8007aae:	2b64      	cmp	r3, #100	@ 0x64
 8007ab0:	d901      	bls.n	8007ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	e1f3      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ab6:	4b51      	ldr	r3, [pc, #324]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1f0      	bne.n	8007aa4 <HAL_RCC_OscConfig+0xe8>
 8007ac2:	e000      	b.n	8007ac6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0302 	and.w	r3, r3, #2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d063      	beq.n	8007b9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	f003 030c 	and.w	r3, r3, #12
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00b      	beq.n	8007af6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ade:	4b47      	ldr	r3, [pc, #284]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007ae6:	2b08      	cmp	r3, #8
 8007ae8:	d11c      	bne.n	8007b24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007aea:	4b44      	ldr	r3, [pc, #272]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d116      	bne.n	8007b24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007af6:	4b41      	ldr	r3, [pc, #260]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d005      	beq.n	8007b0e <HAL_RCC_OscConfig+0x152>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d001      	beq.n	8007b0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e1c7      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	00db      	lsls	r3, r3, #3
 8007b1c:	4937      	ldr	r1, [pc, #220]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b22:	e03a      	b.n	8007b9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d020      	beq.n	8007b6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b2c:	4b34      	ldr	r3, [pc, #208]	@ (8007c00 <HAL_RCC_OscConfig+0x244>)
 8007b2e:	2201      	movs	r2, #1
 8007b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b32:	f7fb fd21 	bl	8003578 <HAL_GetTick>
 8007b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b38:	e008      	b.n	8007b4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b3a:	f7fb fd1d 	bl	8003578 <HAL_GetTick>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	1ad3      	subs	r3, r2, r3
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d901      	bls.n	8007b4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e1a8      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d0f0      	beq.n	8007b3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b58:	4b28      	ldr	r3, [pc, #160]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	00db      	lsls	r3, r3, #3
 8007b66:	4925      	ldr	r1, [pc, #148]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	600b      	str	r3, [r1, #0]
 8007b6c:	e015      	b.n	8007b9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b6e:	4b24      	ldr	r3, [pc, #144]	@ (8007c00 <HAL_RCC_OscConfig+0x244>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b74:	f7fb fd00 	bl	8003578 <HAL_GetTick>
 8007b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b7a:	e008      	b.n	8007b8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b7c:	f7fb fcfc 	bl	8003578 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e187      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0302 	and.w	r3, r3, #2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1f0      	bne.n	8007b7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f003 0308 	and.w	r3, r3, #8
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d036      	beq.n	8007c14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	695b      	ldr	r3, [r3, #20]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d016      	beq.n	8007bdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bae:	4b15      	ldr	r3, [pc, #84]	@ (8007c04 <HAL_RCC_OscConfig+0x248>)
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bb4:	f7fb fce0 	bl	8003578 <HAL_GetTick>
 8007bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bba:	e008      	b.n	8007bce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bbc:	f7fb fcdc 	bl	8003578 <HAL_GetTick>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d901      	bls.n	8007bce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e167      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bce:	4b0b      	ldr	r3, [pc, #44]	@ (8007bfc <HAL_RCC_OscConfig+0x240>)
 8007bd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bd2:	f003 0302 	and.w	r3, r3, #2
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d0f0      	beq.n	8007bbc <HAL_RCC_OscConfig+0x200>
 8007bda:	e01b      	b.n	8007c14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bdc:	4b09      	ldr	r3, [pc, #36]	@ (8007c04 <HAL_RCC_OscConfig+0x248>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007be2:	f7fb fcc9 	bl	8003578 <HAL_GetTick>
 8007be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007be8:	e00e      	b.n	8007c08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bea:	f7fb fcc5 	bl	8003578 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d907      	bls.n	8007c08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e150      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
 8007bfc:	40023800 	.word	0x40023800
 8007c00:	42470000 	.word	0x42470000
 8007c04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c08:	4b88      	ldr	r3, [pc, #544]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007c0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d1ea      	bne.n	8007bea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f003 0304 	and.w	r3, r3, #4
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 8097 	beq.w	8007d50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c22:	2300      	movs	r3, #0
 8007c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c26:	4b81      	ldr	r3, [pc, #516]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10f      	bne.n	8007c52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c32:	2300      	movs	r3, #0
 8007c34:	60bb      	str	r3, [r7, #8]
 8007c36:	4b7d      	ldr	r3, [pc, #500]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c3a:	4a7c      	ldr	r2, [pc, #496]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c42:	4b7a      	ldr	r3, [pc, #488]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c4a:	60bb      	str	r3, [r7, #8]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c52:	4b77      	ldr	r3, [pc, #476]	@ (8007e30 <HAL_RCC_OscConfig+0x474>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d118      	bne.n	8007c90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c5e:	4b74      	ldr	r3, [pc, #464]	@ (8007e30 <HAL_RCC_OscConfig+0x474>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a73      	ldr	r2, [pc, #460]	@ (8007e30 <HAL_RCC_OscConfig+0x474>)
 8007c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c6a:	f7fb fc85 	bl	8003578 <HAL_GetTick>
 8007c6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c70:	e008      	b.n	8007c84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c72:	f7fb fc81 	bl	8003578 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d901      	bls.n	8007c84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e10c      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c84:	4b6a      	ldr	r3, [pc, #424]	@ (8007e30 <HAL_RCC_OscConfig+0x474>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d0f0      	beq.n	8007c72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d106      	bne.n	8007ca6 <HAL_RCC_OscConfig+0x2ea>
 8007c98:	4b64      	ldr	r3, [pc, #400]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c9c:	4a63      	ldr	r2, [pc, #396]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007c9e:	f043 0301 	orr.w	r3, r3, #1
 8007ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ca4:	e01c      	b.n	8007ce0 <HAL_RCC_OscConfig+0x324>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	2b05      	cmp	r3, #5
 8007cac:	d10c      	bne.n	8007cc8 <HAL_RCC_OscConfig+0x30c>
 8007cae:	4b5f      	ldr	r3, [pc, #380]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb2:	4a5e      	ldr	r2, [pc, #376]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007cb4:	f043 0304 	orr.w	r3, r3, #4
 8007cb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cba:	4b5c      	ldr	r3, [pc, #368]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cbe:	4a5b      	ldr	r2, [pc, #364]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007cc0:	f043 0301 	orr.w	r3, r3, #1
 8007cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cc6:	e00b      	b.n	8007ce0 <HAL_RCC_OscConfig+0x324>
 8007cc8:	4b58      	ldr	r3, [pc, #352]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ccc:	4a57      	ldr	r2, [pc, #348]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007cce:	f023 0301 	bic.w	r3, r3, #1
 8007cd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cd4:	4b55      	ldr	r3, [pc, #340]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cd8:	4a54      	ldr	r2, [pc, #336]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007cda:	f023 0304 	bic.w	r3, r3, #4
 8007cde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d015      	beq.n	8007d14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ce8:	f7fb fc46 	bl	8003578 <HAL_GetTick>
 8007cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cee:	e00a      	b.n	8007d06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cf0:	f7fb fc42 	bl	8003578 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d901      	bls.n	8007d06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e0cb      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d06:	4b49      	ldr	r3, [pc, #292]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d0ee      	beq.n	8007cf0 <HAL_RCC_OscConfig+0x334>
 8007d12:	e014      	b.n	8007d3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d14:	f7fb fc30 	bl	8003578 <HAL_GetTick>
 8007d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d1a:	e00a      	b.n	8007d32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d1c:	f7fb fc2c 	bl	8003578 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d901      	bls.n	8007d32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e0b5      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d32:	4b3e      	ldr	r3, [pc, #248]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1ee      	bne.n	8007d1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d105      	bne.n	8007d50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d44:	4b39      	ldr	r3, [pc, #228]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d48:	4a38      	ldr	r2, [pc, #224]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007d4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 80a1 	beq.w	8007e9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d5a:	4b34      	ldr	r3, [pc, #208]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f003 030c 	and.w	r3, r3, #12
 8007d62:	2b08      	cmp	r3, #8
 8007d64:	d05c      	beq.n	8007e20 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	699b      	ldr	r3, [r3, #24]
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d141      	bne.n	8007df2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d6e:	4b31      	ldr	r3, [pc, #196]	@ (8007e34 <HAL_RCC_OscConfig+0x478>)
 8007d70:	2200      	movs	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d74:	f7fb fc00 	bl	8003578 <HAL_GetTick>
 8007d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d7a:	e008      	b.n	8007d8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d7c:	f7fb fbfc 	bl	8003578 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e087      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d8e:	4b27      	ldr	r3, [pc, #156]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1f0      	bne.n	8007d7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	69da      	ldr	r2, [r3, #28]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a1b      	ldr	r3, [r3, #32]
 8007da2:	431a      	orrs	r2, r3
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007da8:	019b      	lsls	r3, r3, #6
 8007daa:	431a      	orrs	r2, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db0:	085b      	lsrs	r3, r3, #1
 8007db2:	3b01      	subs	r3, #1
 8007db4:	041b      	lsls	r3, r3, #16
 8007db6:	431a      	orrs	r2, r3
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dbc:	061b      	lsls	r3, r3, #24
 8007dbe:	491b      	ldr	r1, [pc, #108]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8007e34 <HAL_RCC_OscConfig+0x478>)
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dca:	f7fb fbd5 	bl	8003578 <HAL_GetTick>
 8007dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dd0:	e008      	b.n	8007de4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dd2:	f7fb fbd1 	bl	8003578 <HAL_GetTick>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	1ad3      	subs	r3, r2, r3
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d901      	bls.n	8007de4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e05c      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007de4:	4b11      	ldr	r3, [pc, #68]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d0f0      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x416>
 8007df0:	e054      	b.n	8007e9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007df2:	4b10      	ldr	r3, [pc, #64]	@ (8007e34 <HAL_RCC_OscConfig+0x478>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007df8:	f7fb fbbe 	bl	8003578 <HAL_GetTick>
 8007dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dfe:	e008      	b.n	8007e12 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e00:	f7fb fbba 	bl	8003578 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d901      	bls.n	8007e12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007e0e:	2303      	movs	r3, #3
 8007e10:	e045      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e12:	4b06      	ldr	r3, [pc, #24]	@ (8007e2c <HAL_RCC_OscConfig+0x470>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1f0      	bne.n	8007e00 <HAL_RCC_OscConfig+0x444>
 8007e1e:	e03d      	b.n	8007e9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d107      	bne.n	8007e38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	e038      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
 8007e2c:	40023800 	.word	0x40023800
 8007e30:	40007000 	.word	0x40007000
 8007e34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e38:	4b1b      	ldr	r3, [pc, #108]	@ (8007ea8 <HAL_RCC_OscConfig+0x4ec>)
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d028      	beq.n	8007e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d121      	bne.n	8007e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d11a      	bne.n	8007e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007e68:	4013      	ands	r3, r2
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d111      	bne.n	8007e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e7e:	085b      	lsrs	r3, r3, #1
 8007e80:	3b01      	subs	r3, #1
 8007e82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d107      	bne.n	8007e98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d001      	beq.n	8007e9c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e000      	b.n	8007e9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3718      	adds	r7, #24
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	40023800 	.word	0x40023800

08007eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e0cc      	b.n	800805a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ec0:	4b68      	ldr	r3, [pc, #416]	@ (8008064 <HAL_RCC_ClockConfig+0x1b8>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0307 	and.w	r3, r3, #7
 8007ec8:	683a      	ldr	r2, [r7, #0]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d90c      	bls.n	8007ee8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ece:	4b65      	ldr	r3, [pc, #404]	@ (8008064 <HAL_RCC_ClockConfig+0x1b8>)
 8007ed0:	683a      	ldr	r2, [r7, #0]
 8007ed2:	b2d2      	uxtb	r2, r2
 8007ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ed6:	4b63      	ldr	r3, [pc, #396]	@ (8008064 <HAL_RCC_ClockConfig+0x1b8>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0307 	and.w	r3, r3, #7
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d001      	beq.n	8007ee8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e0b8      	b.n	800805a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 0302 	and.w	r3, r3, #2
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d020      	beq.n	8007f36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0304 	and.w	r3, r3, #4
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d005      	beq.n	8007f0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f00:	4b59      	ldr	r3, [pc, #356]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	4a58      	ldr	r2, [pc, #352]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 8007f06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007f0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0308 	and.w	r3, r3, #8
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d005      	beq.n	8007f24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f18:	4b53      	ldr	r3, [pc, #332]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	4a52      	ldr	r2, [pc, #328]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 8007f1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007f22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f24:	4b50      	ldr	r3, [pc, #320]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	494d      	ldr	r1, [pc, #308]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d044      	beq.n	8007fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d107      	bne.n	8007f5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f4a:	4b47      	ldr	r3, [pc, #284]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d119      	bne.n	8007f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e07f      	b.n	800805a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	2b02      	cmp	r3, #2
 8007f60:	d003      	beq.n	8007f6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d107      	bne.n	8007f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d109      	bne.n	8007f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e06f      	b.n	800805a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e067      	b.n	800805a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f8a:	4b37      	ldr	r3, [pc, #220]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f023 0203 	bic.w	r2, r3, #3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	4934      	ldr	r1, [pc, #208]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f9c:	f7fb faec 	bl	8003578 <HAL_GetTick>
 8007fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fa2:	e00a      	b.n	8007fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fa4:	f7fb fae8 	bl	8003578 <HAL_GetTick>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	1ad3      	subs	r3, r2, r3
 8007fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d901      	bls.n	8007fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e04f      	b.n	800805a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fba:	4b2b      	ldr	r3, [pc, #172]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	f003 020c 	and.w	r2, r3, #12
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d1eb      	bne.n	8007fa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fcc:	4b25      	ldr	r3, [pc, #148]	@ (8008064 <HAL_RCC_ClockConfig+0x1b8>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0307 	and.w	r3, r3, #7
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d20c      	bcs.n	8007ff4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fda:	4b22      	ldr	r3, [pc, #136]	@ (8008064 <HAL_RCC_ClockConfig+0x1b8>)
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	b2d2      	uxtb	r2, r2
 8007fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fe2:	4b20      	ldr	r3, [pc, #128]	@ (8008064 <HAL_RCC_ClockConfig+0x1b8>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0307 	and.w	r3, r3, #7
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d001      	beq.n	8007ff4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e032      	b.n	800805a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d008      	beq.n	8008012 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008000:	4b19      	ldr	r3, [pc, #100]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	4916      	ldr	r1, [pc, #88]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 800800e:	4313      	orrs	r3, r2
 8008010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0308 	and.w	r3, r3, #8
 800801a:	2b00      	cmp	r3, #0
 800801c:	d009      	beq.n	8008032 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800801e:	4b12      	ldr	r3, [pc, #72]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	691b      	ldr	r3, [r3, #16]
 800802a:	00db      	lsls	r3, r3, #3
 800802c:	490e      	ldr	r1, [pc, #56]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 800802e:	4313      	orrs	r3, r2
 8008030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008032:	f000 f821 	bl	8008078 <HAL_RCC_GetSysClockFreq>
 8008036:	4602      	mov	r2, r0
 8008038:	4b0b      	ldr	r3, [pc, #44]	@ (8008068 <HAL_RCC_ClockConfig+0x1bc>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	091b      	lsrs	r3, r3, #4
 800803e:	f003 030f 	and.w	r3, r3, #15
 8008042:	490a      	ldr	r1, [pc, #40]	@ (800806c <HAL_RCC_ClockConfig+0x1c0>)
 8008044:	5ccb      	ldrb	r3, [r1, r3]
 8008046:	fa22 f303 	lsr.w	r3, r2, r3
 800804a:	4a09      	ldr	r2, [pc, #36]	@ (8008070 <HAL_RCC_ClockConfig+0x1c4>)
 800804c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800804e:	4b09      	ldr	r3, [pc, #36]	@ (8008074 <HAL_RCC_ClockConfig+0x1c8>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4618      	mov	r0, r3
 8008054:	f7fb fa4c 	bl	80034f0 <HAL_InitTick>

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	40023c00 	.word	0x40023c00
 8008068:	40023800 	.word	0x40023800
 800806c:	0800e020 	.word	0x0800e020
 8008070:	20000004 	.word	0x20000004
 8008074:	20000008 	.word	0x20000008

08008078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800807c:	b090      	sub	sp, #64	@ 0x40
 800807e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800808c:	2300      	movs	r3, #0
 800808e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008090:	4b59      	ldr	r3, [pc, #356]	@ (80081f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f003 030c 	and.w	r3, r3, #12
 8008098:	2b08      	cmp	r3, #8
 800809a:	d00d      	beq.n	80080b8 <HAL_RCC_GetSysClockFreq+0x40>
 800809c:	2b08      	cmp	r3, #8
 800809e:	f200 80a1 	bhi.w	80081e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d002      	beq.n	80080ac <HAL_RCC_GetSysClockFreq+0x34>
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	d003      	beq.n	80080b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80080aa:	e09b      	b.n	80081e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080ac:	4b53      	ldr	r3, [pc, #332]	@ (80081fc <HAL_RCC_GetSysClockFreq+0x184>)
 80080ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80080b0:	e09b      	b.n	80081ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080b2:	4b53      	ldr	r3, [pc, #332]	@ (8008200 <HAL_RCC_GetSysClockFreq+0x188>)
 80080b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80080b6:	e098      	b.n	80081ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080b8:	4b4f      	ldr	r3, [pc, #316]	@ (80081f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080c2:	4b4d      	ldr	r3, [pc, #308]	@ (80081f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d028      	beq.n	8008120 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080ce:	4b4a      	ldr	r3, [pc, #296]	@ (80081f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	099b      	lsrs	r3, r3, #6
 80080d4:	2200      	movs	r2, #0
 80080d6:	623b      	str	r3, [r7, #32]
 80080d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80080e0:	2100      	movs	r1, #0
 80080e2:	4b47      	ldr	r3, [pc, #284]	@ (8008200 <HAL_RCC_GetSysClockFreq+0x188>)
 80080e4:	fb03 f201 	mul.w	r2, r3, r1
 80080e8:	2300      	movs	r3, #0
 80080ea:	fb00 f303 	mul.w	r3, r0, r3
 80080ee:	4413      	add	r3, r2
 80080f0:	4a43      	ldr	r2, [pc, #268]	@ (8008200 <HAL_RCC_GetSysClockFreq+0x188>)
 80080f2:	fba0 1202 	umull	r1, r2, r0, r2
 80080f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080f8:	460a      	mov	r2, r1
 80080fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80080fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080fe:	4413      	add	r3, r2
 8008100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008104:	2200      	movs	r2, #0
 8008106:	61bb      	str	r3, [r7, #24]
 8008108:	61fa      	str	r2, [r7, #28]
 800810a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800810e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008112:	f7f8 fd3b 	bl	8000b8c <__aeabi_uldivmod>
 8008116:	4602      	mov	r2, r0
 8008118:	460b      	mov	r3, r1
 800811a:	4613      	mov	r3, r2
 800811c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800811e:	e053      	b.n	80081c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008120:	4b35      	ldr	r3, [pc, #212]	@ (80081f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	099b      	lsrs	r3, r3, #6
 8008126:	2200      	movs	r2, #0
 8008128:	613b      	str	r3, [r7, #16]
 800812a:	617a      	str	r2, [r7, #20]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008132:	f04f 0b00 	mov.w	fp, #0
 8008136:	4652      	mov	r2, sl
 8008138:	465b      	mov	r3, fp
 800813a:	f04f 0000 	mov.w	r0, #0
 800813e:	f04f 0100 	mov.w	r1, #0
 8008142:	0159      	lsls	r1, r3, #5
 8008144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008148:	0150      	lsls	r0, r2, #5
 800814a:	4602      	mov	r2, r0
 800814c:	460b      	mov	r3, r1
 800814e:	ebb2 080a 	subs.w	r8, r2, sl
 8008152:	eb63 090b 	sbc.w	r9, r3, fp
 8008156:	f04f 0200 	mov.w	r2, #0
 800815a:	f04f 0300 	mov.w	r3, #0
 800815e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008162:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008166:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800816a:	ebb2 0408 	subs.w	r4, r2, r8
 800816e:	eb63 0509 	sbc.w	r5, r3, r9
 8008172:	f04f 0200 	mov.w	r2, #0
 8008176:	f04f 0300 	mov.w	r3, #0
 800817a:	00eb      	lsls	r3, r5, #3
 800817c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008180:	00e2      	lsls	r2, r4, #3
 8008182:	4614      	mov	r4, r2
 8008184:	461d      	mov	r5, r3
 8008186:	eb14 030a 	adds.w	r3, r4, sl
 800818a:	603b      	str	r3, [r7, #0]
 800818c:	eb45 030b 	adc.w	r3, r5, fp
 8008190:	607b      	str	r3, [r7, #4]
 8008192:	f04f 0200 	mov.w	r2, #0
 8008196:	f04f 0300 	mov.w	r3, #0
 800819a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800819e:	4629      	mov	r1, r5
 80081a0:	028b      	lsls	r3, r1, #10
 80081a2:	4621      	mov	r1, r4
 80081a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80081a8:	4621      	mov	r1, r4
 80081aa:	028a      	lsls	r2, r1, #10
 80081ac:	4610      	mov	r0, r2
 80081ae:	4619      	mov	r1, r3
 80081b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081b2:	2200      	movs	r2, #0
 80081b4:	60bb      	str	r3, [r7, #8]
 80081b6:	60fa      	str	r2, [r7, #12]
 80081b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081bc:	f7f8 fce6 	bl	8000b8c <__aeabi_uldivmod>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4613      	mov	r3, r2
 80081c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80081c8:	4b0b      	ldr	r3, [pc, #44]	@ (80081f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	0c1b      	lsrs	r3, r3, #16
 80081ce:	f003 0303 	and.w	r3, r3, #3
 80081d2:	3301      	adds	r3, #1
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80081d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80081da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80081e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80081e2:	e002      	b.n	80081ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081e4:	4b05      	ldr	r3, [pc, #20]	@ (80081fc <HAL_RCC_GetSysClockFreq+0x184>)
 80081e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80081e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3740      	adds	r7, #64	@ 0x40
 80081f0:	46bd      	mov	sp, r7
 80081f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081f6:	bf00      	nop
 80081f8:	40023800 	.word	0x40023800
 80081fc:	00f42400 	.word	0x00f42400
 8008200:	017d7840 	.word	0x017d7840

08008204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008204:	b480      	push	{r7}
 8008206:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008208:	4b03      	ldr	r3, [pc, #12]	@ (8008218 <HAL_RCC_GetHCLKFreq+0x14>)
 800820a:	681b      	ldr	r3, [r3, #0]
}
 800820c:	4618      	mov	r0, r3
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr
 8008216:	bf00      	nop
 8008218:	20000004 	.word	0x20000004

0800821c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008220:	f7ff fff0 	bl	8008204 <HAL_RCC_GetHCLKFreq>
 8008224:	4602      	mov	r2, r0
 8008226:	4b05      	ldr	r3, [pc, #20]	@ (800823c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	0a9b      	lsrs	r3, r3, #10
 800822c:	f003 0307 	and.w	r3, r3, #7
 8008230:	4903      	ldr	r1, [pc, #12]	@ (8008240 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008232:	5ccb      	ldrb	r3, [r1, r3]
 8008234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008238:	4618      	mov	r0, r3
 800823a:	bd80      	pop	{r7, pc}
 800823c:	40023800 	.word	0x40023800
 8008240:	0800e030 	.word	0x0800e030

08008244 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e022      	b.n	800829c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d105      	bne.n	800826e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f7fa fee9 	bl	8003040 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2203      	movs	r2, #3
 8008272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f814 	bl	80082a4 <HAL_SD_InitCard>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e00a      	b.n	800829c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082a4:	b5b0      	push	{r4, r5, r7, lr}
 80082a6:	b08e      	sub	sp, #56	@ 0x38
 80082a8:	af04      	add	r7, sp, #16
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80082ac:	2300      	movs	r3, #0
 80082ae:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80082b0:	2300      	movs	r3, #0
 80082b2:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80082b4:	2300      	movs	r3, #0
 80082b6:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80082b8:	2300      	movs	r3, #0
 80082ba:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80082bc:	2300      	movs	r3, #0
 80082be:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80082c0:	2376      	movs	r3, #118	@ 0x76
 80082c2:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681d      	ldr	r5, [r3, #0]
 80082c8:	466c      	mov	r4, sp
 80082ca:	f107 0318 	add.w	r3, r7, #24
 80082ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082d6:	f107 030c 	add.w	r3, r7, #12
 80082da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082dc:	4628      	mov	r0, r5
 80082de:	f001 ffb7 	bl	800a250 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80082e2:	4b2a      	ldr	r3, [pc, #168]	@ (800838c <HAL_SD_InitCard+0xe8>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f001 fff8 	bl	800a2e2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80082f2:	4b26      	ldr	r3, [pc, #152]	@ (800838c <HAL_SD_InitCard+0xe8>)
 80082f4:	2201      	movs	r2, #1
 80082f6:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80082f8:	2002      	movs	r0, #2
 80082fa:	f7fb f949 	bl	8003590 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 f878 	bl	80093f4 <SD_PowerON>
 8008304:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8008306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831a:	431a      	orrs	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e02e      	b.n	8008382 <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 ff97 	bl	8009258 <SD_InitCard>
 800832a:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800832c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00b      	beq.n	800834a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800833e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008340:	431a      	orrs	r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e01b      	b.n	8008382 <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008352:	4618      	mov	r0, r3
 8008354:	f002 f857 	bl	800a406 <SDMMC_CmdBlockLength>
 8008358:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800835a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00f      	beq.n	8008380 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a0a      	ldr	r2, [pc, #40]	@ (8008390 <HAL_SD_InitCard+0xec>)
 8008366:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800836c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800836e:	431a      	orrs	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e000      	b.n	8008382 <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	3728      	adds	r7, #40	@ 0x28
 8008386:	46bd      	mov	sp, r7
 8008388:	bdb0      	pop	{r4, r5, r7, pc}
 800838a:	bf00      	nop
 800838c:	422580a0 	.word	0x422580a0
 8008390:	004005ff 	.word	0x004005ff

08008394 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b092      	sub	sp, #72	@ 0x48
 8008398:	af00      	add	r7, sp, #0
 800839a:	60f8      	str	r0, [r7, #12]
 800839c:	60b9      	str	r1, [r7, #8]
 800839e:	607a      	str	r2, [r7, #4]
 80083a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80083a2:	f7fb f8e9 	bl	8003578 <HAL_GetTick>
 80083a6:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d107      	bne.n	80083c6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e1c5      	b.n	8008752 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	f040 81b8 	bne.w	8008744 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80083da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	441a      	add	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d907      	bls.n	80083f8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083ec:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	e1ac      	b.n	8008752 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2203      	movs	r2, #3
 80083fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2200      	movs	r2, #0
 8008406:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800840c:	2b01      	cmp	r3, #1
 800840e:	d002      	beq.n	8008416 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008412:	025b      	lsls	r3, r3, #9
 8008414:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008416:	f04f 33ff 	mov.w	r3, #4294967295
 800841a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	025b      	lsls	r3, r3, #9
 8008420:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008422:	2390      	movs	r3, #144	@ 0x90
 8008424:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008426:	2302      	movs	r3, #2
 8008428:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800842a:	2300      	movs	r3, #0
 800842c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800842e:	2301      	movs	r3, #1
 8008430:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f107 0214 	add.w	r2, r7, #20
 800843a:	4611      	mov	r1, r2
 800843c:	4618      	mov	r0, r3
 800843e:	f001 ffb6 	bl	800a3ae <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b01      	cmp	r3, #1
 8008446:	d90a      	bls.n	800845e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2202      	movs	r2, #2
 800844c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008454:	4618      	mov	r0, r3
 8008456:	f002 f81a 	bl	800a48e <SDMMC_CmdReadMultiBlock>
 800845a:	6478      	str	r0, [r7, #68]	@ 0x44
 800845c:	e009      	b.n	8008472 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2201      	movs	r2, #1
 8008462:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800846a:	4618      	mov	r0, r3
 800846c:	f001 ffed 	bl	800a44a <SDMMC_CmdReadSingleBlock>
 8008470:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008474:	2b00      	cmp	r3, #0
 8008476:	d012      	beq.n	800849e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a7e      	ldr	r2, [pc, #504]	@ (8008678 <HAL_SD_ReadBlocks+0x2e4>)
 800847e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008484:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008486:	431a      	orrs	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800849a:	2301      	movs	r3, #1
 800849c:	e159      	b.n	8008752 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800849e:	69bb      	ldr	r3, [r7, #24]
 80084a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80084a2:	e061      	b.n	8008568 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d03c      	beq.n	800852c <HAL_SD_ReadBlocks+0x198>
 80084b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d039      	beq.n	800852c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80084b8:	2300      	movs	r3, #0
 80084ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80084bc:	e033      	b.n	8008526 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f001 feef 	bl	800a2a6 <SDIO_ReadFIFO>
 80084c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80084ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80084d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084d4:	3301      	adds	r3, #1
 80084d6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80084d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084da:	3b01      	subs	r3, #1
 80084dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80084de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084e0:	0a1b      	lsrs	r3, r3, #8
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084e6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80084e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ea:	3301      	adds	r3, #1
 80084ec:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80084ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084f0:	3b01      	subs	r3, #1
 80084f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80084f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084f6:	0c1b      	lsrs	r3, r3, #16
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084fc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80084fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008500:	3301      	adds	r3, #1
 8008502:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008506:	3b01      	subs	r3, #1
 8008508:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800850a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850c:	0e1b      	lsrs	r3, r3, #24
 800850e:	b2da      	uxtb	r2, r3
 8008510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008512:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008516:	3301      	adds	r3, #1
 8008518:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800851a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800851c:	3b01      	subs	r3, #1
 800851e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8008520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008522:	3301      	adds	r3, #1
 8008524:	643b      	str	r3, [r7, #64]	@ 0x40
 8008526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008528:	2b07      	cmp	r3, #7
 800852a:	d9c8      	bls.n	80084be <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800852c:	f7fb f824 	bl	8003578 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008538:	429a      	cmp	r2, r3
 800853a:	d902      	bls.n	8008542 <HAL_SD_ReadBlocks+0x1ae>
 800853c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800853e:	2b00      	cmp	r3, #0
 8008540:	d112      	bne.n	8008568 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a4c      	ldr	r2, [pc, #304]	@ (8008678 <HAL_SD_ReadBlocks+0x2e4>)
 8008548:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800854e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e0f4      	b.n	8008752 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800856e:	f240 332a 	movw	r3, #810	@ 0x32a
 8008572:	4013      	ands	r3, r2
 8008574:	2b00      	cmp	r3, #0
 8008576:	d095      	beq.n	80084a4 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800857e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008582:	2b00      	cmp	r3, #0
 8008584:	d022      	beq.n	80085cc <HAL_SD_ReadBlocks+0x238>
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d91f      	bls.n	80085cc <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008590:	2b03      	cmp	r3, #3
 8008592:	d01b      	beq.n	80085cc <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4618      	mov	r0, r3
 800859a:	f001 ffdf 	bl	800a55c <SDMMC_CmdStopTransfer>
 800859e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80085a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d012      	beq.n	80085cc <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a33      	ldr	r2, [pc, #204]	@ (8008678 <HAL_SD_ReadBlocks+0x2e4>)
 80085ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085b4:	431a      	orrs	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e0c2      	b.n	8008752 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085d2:	f003 0308 	and.w	r3, r3, #8
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d106      	bne.n	80085e8 <HAL_SD_ReadBlocks+0x254>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d012      	beq.n	800860e <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a22      	ldr	r2, [pc, #136]	@ (8008678 <HAL_SD_ReadBlocks+0x2e4>)
 80085ee:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085f4:	f043 0208 	orr.w	r2, r3, #8
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e0a1      	b.n	8008752 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008614:	f003 0302 	and.w	r3, r3, #2
 8008618:	2b00      	cmp	r3, #0
 800861a:	d012      	beq.n	8008642 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a15      	ldr	r2, [pc, #84]	@ (8008678 <HAL_SD_ReadBlocks+0x2e4>)
 8008622:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008628:	f043 0202 	orr.w	r2, r3, #2
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	e087      	b.n	8008752 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d064      	beq.n	800871a <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a08      	ldr	r2, [pc, #32]	@ (8008678 <HAL_SD_ReadBlocks+0x2e4>)
 8008656:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800865c:	f043 0220 	orr.w	r2, r3, #32
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	e06d      	b.n	8008752 <HAL_SD_ReadBlocks+0x3be>
 8008676:	bf00      	nop
 8008678:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4618      	mov	r0, r3
 8008682:	f001 fe10 	bl	800a2a6 <SDIO_ReadFIFO>
 8008686:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8008688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868a:	b2da      	uxtb	r2, r3
 800868c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800868e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008692:	3301      	adds	r3, #1
 8008694:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8008696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008698:	3b01      	subs	r3, #1
 800869a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800869c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869e:	0a1b      	lsrs	r3, r3, #8
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80086a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a8:	3301      	adds	r3, #1
 80086aa:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80086ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ae:	3b01      	subs	r3, #1
 80086b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80086b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b4:	0c1b      	lsrs	r3, r3, #16
 80086b6:	b2da      	uxtb	r2, r3
 80086b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086ba:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80086bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086be:	3301      	adds	r3, #1
 80086c0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80086c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086c4:	3b01      	subs	r3, #1
 80086c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80086c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ca:	0e1b      	lsrs	r3, r3, #24
 80086cc:	b2da      	uxtb	r2, r3
 80086ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80086d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d4:	3301      	adds	r3, #1
 80086d6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80086d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086da:	3b01      	subs	r3, #1
 80086dc:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80086de:	f7fa ff4b 	bl	8003578 <HAL_GetTick>
 80086e2:	4602      	mov	r2, r0
 80086e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e6:	1ad3      	subs	r3, r2, r3
 80086e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d902      	bls.n	80086f4 <HAL_SD_ReadBlocks+0x360>
 80086ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d112      	bne.n	800871a <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a18      	ldr	r2, [pc, #96]	@ (800875c <HAL_SD_ReadBlocks+0x3c8>)
 80086fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008700:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e01b      	b.n	8008752 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <HAL_SD_ReadBlocks+0x39a>
 8008728:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1a6      	bne.n	800867c <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008736:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008740:	2300      	movs	r3, #0
 8008742:	e006      	b.n	8008752 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008748:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008750:	2301      	movs	r3, #1
  }
}
 8008752:	4618      	mov	r0, r3
 8008754:	3748      	adds	r7, #72	@ 0x48
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	004005ff 	.word	0x004005ff

08008760 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b092      	sub	sp, #72	@ 0x48
 8008764:	af00      	add	r7, sp, #0
 8008766:	60f8      	str	r0, [r7, #12]
 8008768:	60b9      	str	r1, [r7, #8]
 800876a:	607a      	str	r2, [r7, #4]
 800876c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800876e:	f7fa ff03 	bl	8003578 <HAL_GetTick>
 8008772:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d107      	bne.n	8008792 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008786:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e16d      	b.n	8008a6e <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b01      	cmp	r3, #1
 800879c:	f040 8160 	bne.w	8008a60 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80087a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	441a      	add	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d907      	bls.n	80087c4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	e154      	b.n	8008a6e <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2203      	movs	r2, #3
 80087c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2200      	movs	r2, #0
 80087d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087d8:	2b01      	cmp	r3, #1
 80087da:	d002      	beq.n	80087e2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80087dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087de:	025b      	lsls	r3, r3, #9
 80087e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80087e2:	f04f 33ff 	mov.w	r3, #4294967295
 80087e6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	025b      	lsls	r3, r3, #9
 80087ec:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80087ee:	2390      	movs	r3, #144	@ 0x90
 80087f0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80087f2:	2300      	movs	r3, #0
 80087f4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80087fa:	2301      	movs	r3, #1
 80087fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f107 0218 	add.w	r2, r7, #24
 8008806:	4611      	mov	r1, r2
 8008808:	4618      	mov	r0, r3
 800880a:	f001 fdd0 	bl	800a3ae <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d90a      	bls.n	800882a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	2220      	movs	r2, #32
 8008818:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008820:	4618      	mov	r0, r3
 8008822:	f001 fe78 	bl	800a516 <SDMMC_CmdWriteMultiBlock>
 8008826:	6478      	str	r0, [r7, #68]	@ 0x44
 8008828:	e009      	b.n	800883e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2210      	movs	r2, #16
 800882e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008836:	4618      	mov	r0, r3
 8008838:	f001 fe4b 	bl	800a4d2 <SDMMC_CmdWriteSingleBlock>
 800883c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800883e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008840:	2b00      	cmp	r3, #0
 8008842:	d012      	beq.n	800886a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a8b      	ldr	r2, [pc, #556]	@ (8008a78 <HAL_SD_WriteBlocks+0x318>)
 800884a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008852:	431a      	orrs	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e101      	b.n	8008a6e <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800886e:	e065      	b.n	800893c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d040      	beq.n	8008900 <HAL_SD_WriteBlocks+0x1a0>
 800887e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008880:	2b00      	cmp	r3, #0
 8008882:	d03d      	beq.n	8008900 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8008884:	2300      	movs	r3, #0
 8008886:	643b      	str	r3, [r7, #64]	@ 0x40
 8008888:	e037      	b.n	80088fa <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800888a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008892:	3301      	adds	r3, #1
 8008894:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8008896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008898:	3b01      	subs	r3, #1
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800889c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	021a      	lsls	r2, r3, #8
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80088a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088aa:	3301      	adds	r3, #1
 80088ac:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80088ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088b0:	3b01      	subs	r3, #1
 80088b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80088b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	041a      	lsls	r2, r3, #16
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	4313      	orrs	r3, r2
 80088be:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80088c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088c2:	3301      	adds	r3, #1
 80088c4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80088c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088c8:	3b01      	subs	r3, #1
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80088cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	061a      	lsls	r2, r3, #24
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80088d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088da:	3301      	adds	r3, #1
 80088dc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80088de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088e0:	3b01      	subs	r3, #1
 80088e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f107 0214 	add.w	r2, r7, #20
 80088ec:	4611      	mov	r1, r2
 80088ee:	4618      	mov	r0, r3
 80088f0:	f001 fce6 	bl	800a2c0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80088f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088f6:	3301      	adds	r3, #1
 80088f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80088fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088fc:	2b07      	cmp	r3, #7
 80088fe:	d9c4      	bls.n	800888a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008900:	f7fa fe3a 	bl	8003578 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800890c:	429a      	cmp	r2, r3
 800890e:	d902      	bls.n	8008916 <HAL_SD_WriteBlocks+0x1b6>
 8008910:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008912:	2b00      	cmp	r3, #0
 8008914:	d112      	bne.n	800893c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a57      	ldr	r2, [pc, #348]	@ (8008a78 <HAL_SD_WriteBlocks+0x318>)
 800891c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008922:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008924:	431a      	orrs	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8008938:	2303      	movs	r3, #3
 800893a:	e098      	b.n	8008a6e <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008942:	f240 331a 	movw	r3, #794	@ 0x31a
 8008946:	4013      	ands	r3, r2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d091      	beq.n	8008870 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008956:	2b00      	cmp	r3, #0
 8008958:	d022      	beq.n	80089a0 <HAL_SD_WriteBlocks+0x240>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d91f      	bls.n	80089a0 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008964:	2b03      	cmp	r3, #3
 8008966:	d01b      	beq.n	80089a0 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4618      	mov	r0, r3
 800896e:	f001 fdf5 	bl	800a55c <SDMMC_CmdStopTransfer>
 8008972:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008976:	2b00      	cmp	r3, #0
 8008978:	d012      	beq.n	80089a0 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a3e      	ldr	r2, [pc, #248]	@ (8008a78 <HAL_SD_WriteBlocks+0x318>)
 8008980:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008988:	431a      	orrs	r2, r3
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e066      	b.n	8008a6e <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089a6:	f003 0308 	and.w	r3, r3, #8
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d106      	bne.n	80089bc <HAL_SD_WriteBlocks+0x25c>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d012      	beq.n	80089e2 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008a78 <HAL_SD_WriteBlocks+0x318>)
 80089c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c8:	f043 0208 	orr.w	r2, r3, #8
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2200      	movs	r2, #0
 80089dc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e045      	b.n	8008a6e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089e8:	f003 0302 	and.w	r3, r3, #2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d012      	beq.n	8008a16 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a20      	ldr	r2, [pc, #128]	@ (8008a78 <HAL_SD_WriteBlocks+0x318>)
 80089f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089fc:	f043 0202 	orr.w	r2, r3, #2
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e02b      	b.n	8008a6e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a1c:	f003 0310 	and.w	r3, r3, #16
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d012      	beq.n	8008a4a <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a13      	ldr	r2, [pc, #76]	@ (8008a78 <HAL_SD_WriteBlocks+0x318>)
 8008a2a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a30:	f043 0210 	orr.w	r2, r3, #16
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e011      	b.n	8008a6e <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008a52:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	e006      	b.n	8008a6e <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a64:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
  }
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3748      	adds	r7, #72	@ 0x48
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	004005ff 	.word	0x004005ff

08008a7c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a88:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d008      	beq.n	8008aaa <HAL_SD_IRQHandler+0x2e>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f003 0308 	and.w	r3, r3, #8
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d003      	beq.n	8008aaa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fd5c 	bl	8009560 <SD_Read_IT>
 8008aa8:	e165      	b.n	8008d76 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	f000 808f 	beq.w	8008bd8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ac2:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	6812      	ldr	r2, [r2, #0]
 8008ace:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 8008ad2:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8008ad6:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f022 0201 	bic.w	r2, r2, #1
 8008ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f003 0308 	and.w	r3, r3, #8
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d039      	beq.n	8008b66 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f003 0302 	and.w	r3, r3, #2
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d104      	bne.n	8008b06 <HAL_SD_IRQHandler+0x8a>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f003 0320 	and.w	r3, r3, #32
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d011      	beq.n	8008b2a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f001 fd26 	bl	800a55c <SDMMC_CmdStopTransfer>
 8008b10:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d008      	beq.n	8008b2a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	431a      	orrs	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f92f 	bl	8008d88 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8008b32:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d104      	bne.n	8008b56 <HAL_SD_IRQHandler+0xda>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d003      	beq.n	8008b5e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f002 f94c 	bl	800adf4 <HAL_SD_RxCpltCallback>
 8008b5c:	e10b      	b.n	8008d76 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f002 f93e 	bl	800ade0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b64:	e107      	b.n	8008d76 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	f000 8102 	beq.w	8008d76 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f003 0320 	and.w	r3, r3, #32
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d011      	beq.n	8008ba0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f001 fceb 	bl	800a55c <SDMMC_CmdStopTransfer>
 8008b86:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d008      	beq.n	8008ba0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	431a      	orrs	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 f8f4 	bl	8008d88 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f003 0301 	and.w	r3, r3, #1
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f040 80e5 	bne.w	8008d76 <HAL_SD_IRQHandler+0x2fa>
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f003 0302 	and.w	r3, r3, #2
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	f040 80df 	bne.w	8008d76 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f022 0208 	bic.w	r2, r2, #8
 8008bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f002 f905 	bl	800ade0 <HAL_SD_TxCpltCallback>
}
 8008bd6:	e0ce      	b.n	8008d76 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d008      	beq.n	8008bf8 <HAL_SD_IRQHandler+0x17c>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f003 0308 	and.w	r3, r3, #8
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d003      	beq.n	8008bf8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 fd06 	bl	8009602 <SD_Write_IT>
 8008bf6:	e0be      	b.n	8008d76 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bfe:	f240 233a 	movw	r3, #570	@ 0x23a
 8008c02:	4013      	ands	r3, r2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 80b6 	beq.w	8008d76 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c10:	f003 0302 	and.w	r3, r3, #2
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d005      	beq.n	8008c24 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c1c:	f043 0202 	orr.w	r2, r3, #2
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c2a:	f003 0308 	and.w	r3, r3, #8
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d005      	beq.n	8008c3e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c36:	f043 0208 	orr.w	r2, r3, #8
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c44:	f003 0320 	and.w	r3, r3, #32
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d005      	beq.n	8008c58 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c50:	f043 0220 	orr.w	r2, r3, #32
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c5e:	f003 0310 	and.w	r3, r3, #16
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d005      	beq.n	8008c72 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6a:	f043 0210 	orr.w	r2, r3, #16
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d005      	beq.n	8008c8c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c84:	f043 0208 	orr.w	r2, r3, #8
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f240 723a 	movw	r2, #1850	@ 0x73a
 8008c94:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	6812      	ldr	r2, [r2, #0]
 8008ca0:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8008ca4:	f023 0302 	bic.w	r3, r3, #2
 8008ca8:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f001 fc54 	bl	800a55c <SDMMC_CmdStopTransfer>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cba:	431a      	orrs	r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f003 0308 	and.w	r3, r3, #8
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00a      	beq.n	8008ce0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 f855 	bl	8008d88 <HAL_SD_ErrorCallback>
}
 8008cde:	e04a      	b.n	8008d76 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d045      	beq.n	8008d76 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f003 0310 	and.w	r3, r3, #16
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d104      	bne.n	8008cfe <HAL_SD_IRQHandler+0x282>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f003 0320 	and.w	r3, r3, #32
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d011      	beq.n	8008d22 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d02:	4a1f      	ldr	r2, [pc, #124]	@ (8008d80 <HAL_SD_IRQHandler+0x304>)
 8008d04:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fc f80d 	bl	8004d2a <HAL_DMA_Abort_IT>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d02f      	beq.n	8008d76 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 fa2e 	bl	800917c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008d20:	e029      	b.n	8008d76 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f003 0301 	and.w	r3, r3, #1
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d104      	bne.n	8008d36 <HAL_SD_IRQHandler+0x2ba>
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d011      	beq.n	8008d5a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d3a:	4a12      	ldr	r2, [pc, #72]	@ (8008d84 <HAL_SD_IRQHandler+0x308>)
 8008d3c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7fb fff1 	bl	8004d2a <HAL_DMA_Abort_IT>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d013      	beq.n	8008d76 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d52:	4618      	mov	r0, r3
 8008d54:	f000 fa49 	bl	80091ea <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008d58:	e00d      	b.n	8008d76 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f002 f82c 	bl	800adcc <HAL_SD_AbortCallback>
}
 8008d74:	e7ff      	b.n	8008d76 <HAL_SD_IRQHandler+0x2fa>
 8008d76:	bf00      	nop
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	0800917d 	.word	0x0800917d
 8008d84:	080091eb 	.word	0x080091eb

08008d88 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008daa:	0f9b      	lsrs	r3, r3, #30
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008db6:	0e9b      	lsrs	r3, r3, #26
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	f003 030f 	and.w	r3, r3, #15
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dc8:	0e1b      	lsrs	r3, r3, #24
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	f003 0303 	and.w	r3, r3, #3
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dda:	0c1b      	lsrs	r3, r3, #16
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008de6:	0a1b      	lsrs	r3, r3, #8
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008df2:	b2da      	uxtb	r2, r3
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008dfc:	0d1b      	lsrs	r3, r3, #20
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e08:	0c1b      	lsrs	r3, r3, #16
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	f003 030f 	and.w	r3, r3, #15
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e1a:	0bdb      	lsrs	r3, r3, #15
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e2c:	0b9b      	lsrs	r3, r3, #14
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	f003 0301 	and.w	r3, r3, #1
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e3e:	0b5b      	lsrs	r3, r3, #13
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e50:	0b1b      	lsrs	r3, r3, #12
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	f003 0301 	and.w	r3, r3, #1
 8008e58:	b2da      	uxtb	r2, r3
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	2200      	movs	r2, #0
 8008e62:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d163      	bne.n	8008f34 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e70:	009a      	lsls	r2, r3, #2
 8008e72:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008e76:	4013      	ands	r3, r2
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8008e7c:	0f92      	lsrs	r2, r2, #30
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e88:	0edb      	lsrs	r3, r3, #27
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	f003 0307 	and.w	r3, r3, #7
 8008e90:	b2da      	uxtb	r2, r3
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e9a:	0e1b      	lsrs	r3, r3, #24
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	f003 0307 	and.w	r3, r3, #7
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008eac:	0d5b      	lsrs	r3, r3, #21
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	f003 0307 	and.w	r3, r3, #7
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ebe:	0c9b      	lsrs	r3, r3, #18
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	f003 0307 	and.w	r3, r3, #7
 8008ec6:	b2da      	uxtb	r2, r3
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ed0:	0bdb      	lsrs	r3, r3, #15
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	f003 0307 	and.w	r3, r3, #7
 8008ed8:	b2da      	uxtb	r2, r3
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	1c5a      	adds	r2, r3, #1
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	7e1b      	ldrb	r3, [r3, #24]
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	f003 0307 	and.w	r3, r3, #7
 8008ef2:	3302      	adds	r3, #2
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008efe:	fb03 f202 	mul.w	r2, r3, r2
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	7a1b      	ldrb	r3, [r3, #8]
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	2201      	movs	r2, #1
 8008f12:	409a      	lsls	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8008f20:	0a52      	lsrs	r2, r2, #9
 8008f22:	fb03 f202 	mul.w	r2, r3, r2
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f30:	661a      	str	r2, [r3, #96]	@ 0x60
 8008f32:	e031      	b.n	8008f98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d11d      	bne.n	8008f78 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f40:	041b      	lsls	r3, r3, #16
 8008f42:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f4a:	0c1b      	lsrs	r3, r3, #16
 8008f4c:	431a      	orrs	r2, r3
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	3301      	adds	r3, #1
 8008f58:	029a      	lsls	r2, r3, #10
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f6c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	661a      	str	r2, [r3, #96]	@ 0x60
 8008f76:	e00f      	b.n	8008f98 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a58      	ldr	r2, [pc, #352]	@ (80090e0 <HAL_SD_GetCardCSD+0x344>)
 8008f7e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e09d      	b.n	80090d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f9c:	0b9b      	lsrs	r3, r3, #14
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	b2da      	uxtb	r2, r3
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fae:	09db      	lsrs	r3, r3, #7
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fb6:	b2da      	uxtb	r2, r3
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fd0:	0fdb      	lsrs	r3, r3, #31
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fdc:	0f5b      	lsrs	r3, r3, #29
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	f003 0303 	and.w	r3, r3, #3
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008fee:	0e9b      	lsrs	r3, r3, #26
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	f003 0307 	and.w	r3, r3, #7
 8008ff6:	b2da      	uxtb	r2, r3
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009000:	0d9b      	lsrs	r3, r3, #22
 8009002:	b2db      	uxtb	r3, r3
 8009004:	f003 030f 	and.w	r3, r3, #15
 8009008:	b2da      	uxtb	r2, r3
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009012:	0d5b      	lsrs	r3, r3, #21
 8009014:	b2db      	uxtb	r3, r3
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	b2da      	uxtb	r2, r3
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800902e:	0c1b      	lsrs	r3, r3, #16
 8009030:	b2db      	uxtb	r3, r3
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	b2da      	uxtb	r2, r3
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009042:	0bdb      	lsrs	r3, r3, #15
 8009044:	b2db      	uxtb	r3, r3
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	b2da      	uxtb	r2, r3
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009056:	0b9b      	lsrs	r3, r3, #14
 8009058:	b2db      	uxtb	r3, r3
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	b2da      	uxtb	r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800906a:	0b5b      	lsrs	r3, r3, #13
 800906c:	b2db      	uxtb	r3, r3
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	b2da      	uxtb	r2, r3
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800907e:	0b1b      	lsrs	r3, r3, #12
 8009080:	b2db      	uxtb	r3, r3
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	b2da      	uxtb	r2, r3
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009092:	0a9b      	lsrs	r3, r3, #10
 8009094:	b2db      	uxtb	r3, r3
 8009096:	f003 0303 	and.w	r3, r3, #3
 800909a:	b2da      	uxtb	r2, r3
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090a6:	0a1b      	lsrs	r3, r3, #8
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	f003 0303 	and.w	r3, r3, #3
 80090ae:	b2da      	uxtb	r2, r3
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090ba:	085b      	lsrs	r3, r3, #1
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80090d2:	2300      	movs	r3, #0
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	004005ff 	.word	0x004005ff

080090e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800912e:	2300      	movs	r3, #0
}
 8009130:	4618      	mov	r0, r3
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b086      	sub	sp, #24
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009148:	f107 030c 	add.w	r3, r7, #12
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f9de 	bl	8009510 <SD_SendStatus>
 8009154:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d005      	beq.n	8009168 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	431a      	orrs	r2, r3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	0a5b      	lsrs	r3, r3, #9
 800916c:	f003 030f 	and.w	r3, r3, #15
 8009170:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009172:	693b      	ldr	r3, [r7, #16]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009188:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009192:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f7ff ffd1 	bl	800913c <HAL_SD_GetCardState>
 800919a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2200      	movs	r2, #0
 80091a8:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	2b06      	cmp	r3, #6
 80091ae:	d002      	beq.n	80091b6 <SD_DMATxAbort+0x3a>
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	2b05      	cmp	r3, #5
 80091b4:	d10a      	bne.n	80091cc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f001 f9ce 	bl	800a55c <SDMMC_CmdStopTransfer>
 80091c0:	4602      	mov	r2, r0
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091c6:	431a      	orrs	r2, r3
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d103      	bne.n	80091dc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f001 fdf9 	bl	800adcc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80091da:	e002      	b.n	80091e2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f7ff fdd3 	bl	8008d88 <HAL_SD_ErrorCallback>
}
 80091e2:	bf00      	nop
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b084      	sub	sp, #16
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009200:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f7ff ff9a 	bl	800913c <HAL_SD_GetCardState>
 8009208:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	2b06      	cmp	r3, #6
 800921c:	d002      	beq.n	8009224 <SD_DMARxAbort+0x3a>
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2b05      	cmp	r3, #5
 8009222:	d10a      	bne.n	800923a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4618      	mov	r0, r3
 800922a:	f001 f997 	bl	800a55c <SDMMC_CmdStopTransfer>
 800922e:	4602      	mov	r2, r0
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009234:	431a      	orrs	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800923e:	2b00      	cmp	r3, #0
 8009240:	d103      	bne.n	800924a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f001 fdc2 	bl	800adcc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009248:	e002      	b.n	8009250 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f7ff fd9c 	bl	8008d88 <HAL_SD_ErrorCallback>
}
 8009250:	bf00      	nop
 8009252:	3710      	adds	r7, #16
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009258:	b5b0      	push	{r4, r5, r7, lr}
 800925a:	b094      	sub	sp, #80	@ 0x50
 800925c:	af04      	add	r7, sp, #16
 800925e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009260:	2301      	movs	r3, #1
 8009262:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4618      	mov	r0, r3
 800926a:	f001 f848 	bl	800a2fe <SDIO_GetPowerState>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d102      	bne.n	800927a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009274:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009278:	e0b8      	b.n	80093ec <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800927e:	2b03      	cmp	r3, #3
 8009280:	d02f      	beq.n	80092e2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f001 fa2f 	bl	800a6ea <SDMMC_CmdSendCID>
 800928c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800928e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <SD_InitCard+0x40>
    {
      return errorstate;
 8009294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009296:	e0a9      	b.n	80093ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2100      	movs	r1, #0
 800929e:	4618      	mov	r0, r3
 80092a0:	f001 f872 	bl	800a388 <SDIO_GetResponse>
 80092a4:	4602      	mov	r2, r0
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2104      	movs	r1, #4
 80092b0:	4618      	mov	r0, r3
 80092b2:	f001 f869 	bl	800a388 <SDIO_GetResponse>
 80092b6:	4602      	mov	r2, r0
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2108      	movs	r1, #8
 80092c2:	4618      	mov	r0, r3
 80092c4:	f001 f860 	bl	800a388 <SDIO_GetResponse>
 80092c8:	4602      	mov	r2, r0
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	210c      	movs	r1, #12
 80092d4:	4618      	mov	r0, r3
 80092d6:	f001 f857 	bl	800a388 <SDIO_GetResponse>
 80092da:	4602      	mov	r2, r0
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	d00d      	beq.n	8009306 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f107 020e 	add.w	r2, r7, #14
 80092f2:	4611      	mov	r1, r2
 80092f4:	4618      	mov	r0, r3
 80092f6:	f001 fa35 	bl	800a764 <SDMMC_CmdSetRelAdd>
 80092fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80092fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <SD_InitCard+0xae>
    {
      return errorstate;
 8009302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009304:	e072      	b.n	80093ec <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800930a:	2b03      	cmp	r3, #3
 800930c:	d036      	beq.n	800937c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800930e:	89fb      	ldrh	r3, [r7, #14]
 8009310:	461a      	mov	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800931e:	041b      	lsls	r3, r3, #16
 8009320:	4619      	mov	r1, r3
 8009322:	4610      	mov	r0, r2
 8009324:	f001 f9ff 	bl	800a726 <SDMMC_CmdSendCSD>
 8009328:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800932a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009332:	e05b      	b.n	80093ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2100      	movs	r1, #0
 800933a:	4618      	mov	r0, r3
 800933c:	f001 f824 	bl	800a388 <SDIO_GetResponse>
 8009340:	4602      	mov	r2, r0
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2104      	movs	r1, #4
 800934c:	4618      	mov	r0, r3
 800934e:	f001 f81b 	bl	800a388 <SDIO_GetResponse>
 8009352:	4602      	mov	r2, r0
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2108      	movs	r1, #8
 800935e:	4618      	mov	r0, r3
 8009360:	f001 f812 	bl	800a388 <SDIO_GetResponse>
 8009364:	4602      	mov	r2, r0
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	210c      	movs	r1, #12
 8009370:	4618      	mov	r0, r3
 8009372:	f001 f809 	bl	800a388 <SDIO_GetResponse>
 8009376:	4602      	mov	r2, r0
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2104      	movs	r1, #4
 8009382:	4618      	mov	r0, r3
 8009384:	f001 f800 	bl	800a388 <SDIO_GetResponse>
 8009388:	4603      	mov	r3, r0
 800938a:	0d1a      	lsrs	r2, r3, #20
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009390:	f107 0310 	add.w	r3, r7, #16
 8009394:	4619      	mov	r1, r3
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f7ff fd00 	bl	8008d9c <HAL_SD_GetCardCSD>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d002      	beq.n	80093a8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80093a6:	e021      	b.n	80093ec <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6819      	ldr	r1, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093b0:	041b      	lsls	r3, r3, #16
 80093b2:	2200      	movs	r2, #0
 80093b4:	461c      	mov	r4, r3
 80093b6:	4615      	mov	r5, r2
 80093b8:	4622      	mov	r2, r4
 80093ba:	462b      	mov	r3, r5
 80093bc:	4608      	mov	r0, r1
 80093be:	f001 f8ef 	bl	800a5a0 <SDMMC_CmdSelDesel>
 80093c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80093c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <SD_InitCard+0x176>
  {
    return errorstate;
 80093ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093cc:	e00e      	b.n	80093ec <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681d      	ldr	r5, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	466c      	mov	r4, sp
 80093d6:	f103 0210 	add.w	r2, r3, #16
 80093da:	ca07      	ldmia	r2, {r0, r1, r2}
 80093dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80093e0:	3304      	adds	r3, #4
 80093e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093e4:	4628      	mov	r0, r5
 80093e6:	f000 ff33 	bl	800a250 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3740      	adds	r7, #64	@ 0x40
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bdb0      	pop	{r4, r5, r7, pc}

080093f4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093fc:	2300      	movs	r3, #0
 80093fe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	617b      	str	r3, [r7, #20]
 8009404:	2300      	movs	r3, #0
 8009406:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4618      	mov	r0, r3
 800940e:	f001 f8ea 	bl	800a5e6 <SDMMC_CmdGoIdleState>
 8009412:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <SD_PowerON+0x2a>
  {
    return errorstate;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	e072      	b.n	8009504 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4618      	mov	r0, r3
 8009424:	f001 f8fd 	bl	800a622 <SDMMC_CmdOperCond>
 8009428:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00d      	beq.n	800944c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4618      	mov	r0, r3
 800943c:	f001 f8d3 	bl	800a5e6 <SDMMC_CmdGoIdleState>
 8009440:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d004      	beq.n	8009452 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	e05b      	b.n	8009504 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2201      	movs	r2, #1
 8009450:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009456:	2b01      	cmp	r3, #1
 8009458:	d137      	bne.n	80094ca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2100      	movs	r1, #0
 8009460:	4618      	mov	r0, r3
 8009462:	f001 f8fd 	bl	800a660 <SDMMC_CmdAppCommand>
 8009466:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d02d      	beq.n	80094ca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800946e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009472:	e047      	b.n	8009504 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2100      	movs	r1, #0
 800947a:	4618      	mov	r0, r3
 800947c:	f001 f8f0 	bl	800a660 <SDMMC_CmdAppCommand>
 8009480:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d001      	beq.n	800948c <SD_PowerON+0x98>
    {
      return errorstate;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	e03b      	b.n	8009504 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	491e      	ldr	r1, [pc, #120]	@ (800950c <SD_PowerON+0x118>)
 8009492:	4618      	mov	r0, r3
 8009494:	f001 f906 	bl	800a6a4 <SDMMC_CmdAppOperCommand>
 8009498:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094a0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80094a4:	e02e      	b.n	8009504 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	2100      	movs	r1, #0
 80094ac:	4618      	mov	r0, r3
 80094ae:	f000 ff6b 	bl	800a388 <SDIO_GetResponse>
 80094b2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	0fdb      	lsrs	r3, r3, #31
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d101      	bne.n	80094c0 <SD_PowerON+0xcc>
 80094bc:	2301      	movs	r3, #1
 80094be:	e000      	b.n	80094c2 <SD_PowerON+0xce>
 80094c0:	2300      	movs	r3, #0
 80094c2:	613b      	str	r3, [r7, #16]

    count++;
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	3301      	adds	r3, #1
 80094c8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d802      	bhi.n	80094da <SD_PowerON+0xe6>
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0cc      	beq.n	8009474 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d902      	bls.n	80094ea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80094e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80094e8:	e00c      	b.n	8009504 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d003      	beq.n	80094fc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80094fa:	e002      	b.n	8009502 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3718      	adds	r7, #24
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	c1100000 	.word	0xc1100000

08009510 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d102      	bne.n	8009526 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009520:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009524:	e018      	b.n	8009558 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800952e:	041b      	lsls	r3, r3, #16
 8009530:	4619      	mov	r1, r3
 8009532:	4610      	mov	r0, r2
 8009534:	f001 f937 	bl	800a7a6 <SDMMC_CmdSendStatus>
 8009538:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d001      	beq.n	8009544 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	e009      	b.n	8009558 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2100      	movs	r1, #0
 800954a:	4618      	mov	r0, r3
 800954c:	f000 ff1c 	bl	800a388 <SDIO_GetResponse>
 8009550:	4602      	mov	r2, r0
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800956c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009572:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d03f      	beq.n	80095fa <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800957a:	2300      	movs	r3, #0
 800957c:	617b      	str	r3, [r7, #20]
 800957e:	e033      	b.n	80095e8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 fe8e 	bl	800a2a6 <SDIO_ReadFIFO>
 800958a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	b2da      	uxtb	r2, r3
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	3301      	adds	r3, #1
 8009598:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800959a:	693b      	ldr	r3, [r7, #16]
 800959c:	3b01      	subs	r3, #1
 800959e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	0a1b      	lsrs	r3, r3, #8
 80095a4:	b2da      	uxtb	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	3301      	adds	r3, #1
 80095ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	3b01      	subs	r3, #1
 80095b4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	0c1b      	lsrs	r3, r3, #16
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	3301      	adds	r3, #1
 80095c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	3b01      	subs	r3, #1
 80095ca:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	0e1b      	lsrs	r3, r3, #24
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	3301      	adds	r3, #1
 80095da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	3b01      	subs	r3, #1
 80095e0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	3301      	adds	r3, #1
 80095e6:	617b      	str	r3, [r7, #20]
 80095e8:	697b      	ldr	r3, [r7, #20]
 80095ea:	2b07      	cmp	r3, #7
 80095ec:	d9c8      	bls.n	8009580 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	693a      	ldr	r2, [r7, #16]
 80095f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 80095fa:	bf00      	nop
 80095fc:	3718      	adds	r7, #24
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}

08009602 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009602:	b580      	push	{r7, lr}
 8009604:	b086      	sub	sp, #24
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009614:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009616:	693b      	ldr	r3, [r7, #16]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d043      	beq.n	80096a4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]
 8009620:	e037      	b.n	8009692 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3301      	adds	r3, #1
 800962c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	3b01      	subs	r3, #1
 8009632:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	021a      	lsls	r2, r3, #8
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	4313      	orrs	r3, r2
 800963e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3301      	adds	r3, #1
 8009644:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	3b01      	subs	r3, #1
 800964a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	041a      	lsls	r2, r3, #16
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	4313      	orrs	r3, r2
 8009656:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	3301      	adds	r3, #1
 800965c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	3b01      	subs	r3, #1
 8009662:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	061a      	lsls	r2, r3, #24
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	4313      	orrs	r3, r2
 800966e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	3301      	adds	r3, #1
 8009674:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	3b01      	subs	r3, #1
 800967a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f107 0208 	add.w	r2, r7, #8
 8009684:	4611      	mov	r1, r2
 8009686:	4618      	mov	r0, r3
 8009688:	f000 fe1a 	bl	800a2c0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	3301      	adds	r3, #1
 8009690:	617b      	str	r3, [r7, #20]
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2b07      	cmp	r3, #7
 8009696:	d9c4      	bls.n	8009622 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80096a4:	bf00      	nop
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e07b      	b.n	80097b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d108      	bne.n	80096d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096ce:	d009      	beq.n	80096e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	61da      	str	r2, [r3, #28]
 80096d6:	e005      	b.n	80096e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2200      	movs	r2, #0
 80096e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d106      	bne.n	8009704 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7f9 fd0e 	bl	8003120 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2202      	movs	r2, #2
 8009708:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800971a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800972c:	431a      	orrs	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68db      	ldr	r3, [r3, #12]
 8009732:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009736:	431a      	orrs	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	691b      	ldr	r3, [r3, #16]
 800973c:	f003 0302 	and.w	r3, r3, #2
 8009740:	431a      	orrs	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	f003 0301 	and.w	r3, r3, #1
 800974a:	431a      	orrs	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	699b      	ldr	r3, [r3, #24]
 8009750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009754:	431a      	orrs	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	69db      	ldr	r3, [r3, #28]
 800975a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800975e:	431a      	orrs	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6a1b      	ldr	r3, [r3, #32]
 8009764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009768:	ea42 0103 	orr.w	r1, r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009770:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	430a      	orrs	r2, r1
 800977a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	0c1b      	lsrs	r3, r3, #16
 8009782:	f003 0104 	and.w	r1, r3, #4
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978a:	f003 0210 	and.w	r2, r3, #16
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	430a      	orrs	r2, r1
 8009794:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	69da      	ldr	r2, [r3, #28]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80097a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b088      	sub	sp, #32
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	60f8      	str	r0, [r7, #12]
 80097c6:	60b9      	str	r1, [r7, #8]
 80097c8:	603b      	str	r3, [r7, #0]
 80097ca:	4613      	mov	r3, r2
 80097cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097ce:	f7f9 fed3 	bl	8003578 <HAL_GetTick>
 80097d2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80097d4:	88fb      	ldrh	r3, [r7, #6]
 80097d6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d001      	beq.n	80097e8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80097e4:	2302      	movs	r3, #2
 80097e6:	e12a      	b.n	8009a3e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d002      	beq.n	80097f4 <HAL_SPI_Transmit+0x36>
 80097ee:	88fb      	ldrh	r3, [r7, #6]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d101      	bne.n	80097f8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	e122      	b.n	8009a3e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d101      	bne.n	8009806 <HAL_SPI_Transmit+0x48>
 8009802:	2302      	movs	r3, #2
 8009804:	e11b      	b.n	8009a3e <HAL_SPI_Transmit+0x280>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2201      	movs	r2, #1
 800980a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2203      	movs	r2, #3
 8009812:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2200      	movs	r2, #0
 800981a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	88fa      	ldrh	r2, [r7, #6]
 8009826:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	88fa      	ldrh	r2, [r7, #6]
 800982c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2200      	movs	r2, #0
 8009832:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2200      	movs	r2, #0
 800983e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2200      	movs	r2, #0
 8009844:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009854:	d10f      	bne.n	8009876 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009864:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009874:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009880:	2b40      	cmp	r3, #64	@ 0x40
 8009882:	d007      	beq.n	8009894 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009892:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800989c:	d152      	bne.n	8009944 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <HAL_SPI_Transmit+0xee>
 80098a6:	8b7b      	ldrh	r3, [r7, #26]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d145      	bne.n	8009938 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098b0:	881a      	ldrh	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098bc:	1c9a      	adds	r2, r3, #2
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	3b01      	subs	r3, #1
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80098d0:	e032      	b.n	8009938 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f003 0302 	and.w	r3, r3, #2
 80098dc:	2b02      	cmp	r3, #2
 80098de:	d112      	bne.n	8009906 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098e4:	881a      	ldrh	r2, [r3, #0]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098f0:	1c9a      	adds	r2, r3, #2
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	3b01      	subs	r3, #1
 80098fe:	b29a      	uxth	r2, r3
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009904:	e018      	b.n	8009938 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009906:	f7f9 fe37 	bl	8003578 <HAL_GetTick>
 800990a:	4602      	mov	r2, r0
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	1ad3      	subs	r3, r2, r3
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	429a      	cmp	r2, r3
 8009914:	d803      	bhi.n	800991e <HAL_SPI_Transmit+0x160>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800991c:	d102      	bne.n	8009924 <HAL_SPI_Transmit+0x166>
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d109      	bne.n	8009938 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e082      	b.n	8009a3e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800993c:	b29b      	uxth	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1c7      	bne.n	80098d2 <HAL_SPI_Transmit+0x114>
 8009942:	e053      	b.n	80099ec <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d002      	beq.n	8009952 <HAL_SPI_Transmit+0x194>
 800994c:	8b7b      	ldrh	r3, [r7, #26]
 800994e:	2b01      	cmp	r3, #1
 8009950:	d147      	bne.n	80099e2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	330c      	adds	r3, #12
 800995c:	7812      	ldrb	r2, [r2, #0]
 800995e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009964:	1c5a      	adds	r2, r3, #1
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800996e:	b29b      	uxth	r3, r3
 8009970:	3b01      	subs	r3, #1
 8009972:	b29a      	uxth	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009978:	e033      	b.n	80099e2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	f003 0302 	and.w	r3, r3, #2
 8009984:	2b02      	cmp	r3, #2
 8009986:	d113      	bne.n	80099b0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	330c      	adds	r3, #12
 8009992:	7812      	ldrb	r2, [r2, #0]
 8009994:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800999a:	1c5a      	adds	r2, r3, #1
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	3b01      	subs	r3, #1
 80099a8:	b29a      	uxth	r2, r3
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80099ae:	e018      	b.n	80099e2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099b0:	f7f9 fde2 	bl	8003578 <HAL_GetTick>
 80099b4:	4602      	mov	r2, r0
 80099b6:	69fb      	ldr	r3, [r7, #28]
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	683a      	ldr	r2, [r7, #0]
 80099bc:	429a      	cmp	r2, r3
 80099be:	d803      	bhi.n	80099c8 <HAL_SPI_Transmit+0x20a>
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099c6:	d102      	bne.n	80099ce <HAL_SPI_Transmit+0x210>
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d109      	bne.n	80099e2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80099de:	2303      	movs	r3, #3
 80099e0:	e02d      	b.n	8009a3e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1c6      	bne.n	800997a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80099ec:	69fa      	ldr	r2, [r7, #28]
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	68f8      	ldr	r0, [r7, #12]
 80099f2:	f000 fbd9 	bl	800a1a8 <SPI_EndRxTxTransaction>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d002      	beq.n	8009a02 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2220      	movs	r2, #32
 8009a00:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10a      	bne.n	8009a20 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	617b      	str	r3, [r7, #20]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	617b      	str	r3, [r7, #20]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	617b      	str	r3, [r7, #20]
 8009a1e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2201      	movs	r2, #1
 8009a24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d001      	beq.n	8009a3c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	e000      	b.n	8009a3e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
  }
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3720      	adds	r7, #32
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b088      	sub	sp, #32
 8009a4a:	af02      	add	r7, sp, #8
 8009a4c:	60f8      	str	r0, [r7, #12]
 8009a4e:	60b9      	str	r1, [r7, #8]
 8009a50:	603b      	str	r3, [r7, #0]
 8009a52:	4613      	mov	r3, r2
 8009a54:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d001      	beq.n	8009a66 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8009a62:	2302      	movs	r3, #2
 8009a64:	e104      	b.n	8009c70 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d002      	beq.n	8009a72 <HAL_SPI_Receive+0x2c>
 8009a6c:	88fb      	ldrh	r3, [r7, #6]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e0fc      	b.n	8009c70 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a7e:	d112      	bne.n	8009aa6 <HAL_SPI_Receive+0x60>
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10e      	bne.n	8009aa6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	2204      	movs	r2, #4
 8009a8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009a90:	88fa      	ldrh	r2, [r7, #6]
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	4613      	mov	r3, r2
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	68b9      	ldr	r1, [r7, #8]
 8009a9c:	68f8      	ldr	r0, [r7, #12]
 8009a9e:	f000 f8eb 	bl	8009c78 <HAL_SPI_TransmitReceive>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	e0e4      	b.n	8009c70 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009aa6:	f7f9 fd67 	bl	8003578 <HAL_GetTick>
 8009aaa:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d101      	bne.n	8009aba <HAL_SPI_Receive+0x74>
 8009ab6:	2302      	movs	r3, #2
 8009ab8:	e0da      	b.n	8009c70 <HAL_SPI_Receive+0x22a>
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2204      	movs	r2, #4
 8009ac6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	88fa      	ldrh	r2, [r7, #6]
 8009ada:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	88fa      	ldrh	r2, [r7, #6]
 8009ae0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2200      	movs	r2, #0
 8009af8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b08:	d10f      	bne.n	8009b2a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009b28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b34:	2b40      	cmp	r3, #64	@ 0x40
 8009b36:	d007      	beq.n	8009b48 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d170      	bne.n	8009c32 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009b50:	e035      	b.n	8009bbe <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	f003 0301 	and.w	r3, r3, #1
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d115      	bne.n	8009b8c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f103 020c 	add.w	r2, r3, #12
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b6c:	7812      	ldrb	r2, [r2, #0]
 8009b6e:	b2d2      	uxtb	r2, r2
 8009b70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b76:	1c5a      	adds	r2, r3, #1
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	3b01      	subs	r3, #1
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009b8a:	e018      	b.n	8009bbe <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b8c:	f7f9 fcf4 	bl	8003578 <HAL_GetTick>
 8009b90:	4602      	mov	r2, r0
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	1ad3      	subs	r3, r2, r3
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d803      	bhi.n	8009ba4 <HAL_SPI_Receive+0x15e>
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba2:	d102      	bne.n	8009baa <HAL_SPI_Receive+0x164>
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d109      	bne.n	8009bbe <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2201      	movs	r2, #1
 8009bae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009bba:	2303      	movs	r3, #3
 8009bbc:	e058      	b.n	8009c70 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1c4      	bne.n	8009b52 <HAL_SPI_Receive+0x10c>
 8009bc8:	e038      	b.n	8009c3c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d113      	bne.n	8009c00 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	68da      	ldr	r2, [r3, #12]
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009be2:	b292      	uxth	r2, r2
 8009be4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bea:	1c9a      	adds	r2, r3, #2
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009bfe:	e018      	b.n	8009c32 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c00:	f7f9 fcba 	bl	8003578 <HAL_GetTick>
 8009c04:	4602      	mov	r2, r0
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d803      	bhi.n	8009c18 <HAL_SPI_Receive+0x1d2>
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c16:	d102      	bne.n	8009c1e <HAL_SPI_Receive+0x1d8>
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d109      	bne.n	8009c32 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	e01e      	b.n	8009c70 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1c6      	bne.n	8009bca <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	6839      	ldr	r1, [r7, #0]
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 fa4b 	bl	800a0dc <SPI_EndRxTransaction>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2220      	movs	r2, #32
 8009c50:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e000      	b.n	8009c70 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
  }
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3718      	adds	r7, #24
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08a      	sub	sp, #40	@ 0x28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
 8009c84:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009c86:	2301      	movs	r3, #1
 8009c88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c8a:	f7f9 fc75 	bl	8003578 <HAL_GetTick>
 8009c8e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009c96:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	685b      	ldr	r3, [r3, #4]
 8009c9c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009c9e:	887b      	ldrh	r3, [r7, #2]
 8009ca0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ca2:	7ffb      	ldrb	r3, [r7, #31]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d00c      	beq.n	8009cc2 <HAL_SPI_TransmitReceive+0x4a>
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009cae:	d106      	bne.n	8009cbe <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	689b      	ldr	r3, [r3, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d102      	bne.n	8009cbe <HAL_SPI_TransmitReceive+0x46>
 8009cb8:	7ffb      	ldrb	r3, [r7, #31]
 8009cba:	2b04      	cmp	r3, #4
 8009cbc:	d001      	beq.n	8009cc2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009cbe:	2302      	movs	r3, #2
 8009cc0:	e17f      	b.n	8009fc2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d005      	beq.n	8009cd4 <HAL_SPI_TransmitReceive+0x5c>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d002      	beq.n	8009cd4 <HAL_SPI_TransmitReceive+0x5c>
 8009cce:	887b      	ldrh	r3, [r7, #2]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e174      	b.n	8009fc2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d101      	bne.n	8009ce6 <HAL_SPI_TransmitReceive+0x6e>
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	e16d      	b.n	8009fc2 <HAL_SPI_TransmitReceive+0x34a>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	2b04      	cmp	r3, #4
 8009cf8:	d003      	beq.n	8009d02 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2205      	movs	r2, #5
 8009cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	887a      	ldrh	r2, [r7, #2]
 8009d12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	887a      	ldrh	r2, [r7, #2]
 8009d18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	887a      	ldrh	r2, [r7, #2]
 8009d24:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	887a      	ldrh	r2, [r7, #2]
 8009d2a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2200      	movs	r2, #0
 8009d36:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d42:	2b40      	cmp	r3, #64	@ 0x40
 8009d44:	d007      	beq.n	8009d56 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009d5e:	d17e      	bne.n	8009e5e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <HAL_SPI_TransmitReceive+0xf6>
 8009d68:	8afb      	ldrh	r3, [r7, #22]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d16c      	bne.n	8009e48 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d72:	881a      	ldrh	r2, [r3, #0]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d7e:	1c9a      	adds	r2, r3, #2
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d92:	e059      	b.n	8009e48 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	f003 0302 	and.w	r3, r3, #2
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d11b      	bne.n	8009dda <HAL_SPI_TransmitReceive+0x162>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d016      	beq.n	8009dda <HAL_SPI_TransmitReceive+0x162>
 8009dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d113      	bne.n	8009dda <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009db6:	881a      	ldrh	r2, [r3, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dc2:	1c9a      	adds	r2, r3, #2
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	3b01      	subs	r3, #1
 8009dd0:	b29a      	uxth	r2, r3
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d119      	bne.n	8009e1c <HAL_SPI_TransmitReceive+0x1a4>
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d014      	beq.n	8009e1c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68da      	ldr	r2, [r3, #12]
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dfc:	b292      	uxth	r2, r2
 8009dfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e04:	1c9a      	adds	r2, r3, #2
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	3b01      	subs	r3, #1
 8009e12:	b29a      	uxth	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009e1c:	f7f9 fbac 	bl	8003578 <HAL_GetTick>
 8009e20:	4602      	mov	r2, r0
 8009e22:	6a3b      	ldr	r3, [r7, #32]
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d80d      	bhi.n	8009e48 <HAL_SPI_TransmitReceive+0x1d0>
 8009e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e32:	d009      	beq.n	8009e48 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e0bc      	b.n	8009fc2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d1a0      	bne.n	8009d94 <HAL_SPI_TransmitReceive+0x11c>
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d19b      	bne.n	8009d94 <HAL_SPI_TransmitReceive+0x11c>
 8009e5c:	e082      	b.n	8009f64 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d002      	beq.n	8009e6c <HAL_SPI_TransmitReceive+0x1f4>
 8009e66:	8afb      	ldrh	r3, [r7, #22]
 8009e68:	2b01      	cmp	r3, #1
 8009e6a:	d171      	bne.n	8009f50 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	330c      	adds	r3, #12
 8009e76:	7812      	ldrb	r2, [r2, #0]
 8009e78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e7e:	1c5a      	adds	r2, r3, #1
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009e92:	e05d      	b.n	8009f50 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	f003 0302 	and.w	r3, r3, #2
 8009e9e:	2b02      	cmp	r3, #2
 8009ea0:	d11c      	bne.n	8009edc <HAL_SPI_TransmitReceive+0x264>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d017      	beq.n	8009edc <HAL_SPI_TransmitReceive+0x264>
 8009eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d114      	bne.n	8009edc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	330c      	adds	r3, #12
 8009ebc:	7812      	ldrb	r2, [r2, #0]
 8009ebe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ec4:	1c5a      	adds	r2, r3, #1
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	f003 0301 	and.w	r3, r3, #1
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d119      	bne.n	8009f1e <HAL_SPI_TransmitReceive+0x2a6>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d014      	beq.n	8009f1e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68da      	ldr	r2, [r3, #12]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009efe:	b2d2      	uxtb	r2, r2
 8009f00:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f06:	1c5a      	adds	r2, r3, #1
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	3b01      	subs	r3, #1
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009f1e:	f7f9 fb2b 	bl	8003578 <HAL_GetTick>
 8009f22:	4602      	mov	r2, r0
 8009f24:	6a3b      	ldr	r3, [r7, #32]
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d803      	bhi.n	8009f36 <HAL_SPI_TransmitReceive+0x2be>
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f34:	d102      	bne.n	8009f3c <HAL_SPI_TransmitReceive+0x2c4>
 8009f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d109      	bne.n	8009f50 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e038      	b.n	8009fc2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d19c      	bne.n	8009e94 <HAL_SPI_TransmitReceive+0x21c>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d197      	bne.n	8009e94 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f64:	6a3a      	ldr	r2, [r7, #32]
 8009f66:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 f91d 	bl	800a1a8 <SPI_EndRxTxTransaction>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d008      	beq.n	8009f86 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2220      	movs	r2, #32
 8009f78:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e01d      	b.n	8009fc2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	689b      	ldr	r3, [r3, #8]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10a      	bne.n	8009fa4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f8e:	2300      	movs	r3, #0
 8009f90:	613b      	str	r3, [r7, #16]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	613b      	str	r3, [r7, #16]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	613b      	str	r3, [r7, #16]
 8009fa2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d001      	beq.n	8009fc0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009fbc:	2301      	movs	r3, #1
 8009fbe:	e000      	b.n	8009fc2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
  }
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3728      	adds	r7, #40	@ 0x28
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
	...

08009fcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b088      	sub	sp, #32
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	4613      	mov	r3, r2
 8009fda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009fdc:	f7f9 facc 	bl	8003578 <HAL_GetTick>
 8009fe0:	4602      	mov	r2, r0
 8009fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe4:	1a9b      	subs	r3, r3, r2
 8009fe6:	683a      	ldr	r2, [r7, #0]
 8009fe8:	4413      	add	r3, r2
 8009fea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009fec:	f7f9 fac4 	bl	8003578 <HAL_GetTick>
 8009ff0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009ff2:	4b39      	ldr	r3, [pc, #228]	@ (800a0d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	015b      	lsls	r3, r3, #5
 8009ff8:	0d1b      	lsrs	r3, r3, #20
 8009ffa:	69fa      	ldr	r2, [r7, #28]
 8009ffc:	fb02 f303 	mul.w	r3, r2, r3
 800a000:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a002:	e055      	b.n	800a0b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00a:	d051      	beq.n	800a0b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a00c:	f7f9 fab4 	bl	8003578 <HAL_GetTick>
 800a010:	4602      	mov	r2, r0
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	1ad3      	subs	r3, r2, r3
 800a016:	69fa      	ldr	r2, [r7, #28]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d902      	bls.n	800a022 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d13d      	bne.n	800a09e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	685a      	ldr	r2, [r3, #4]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a030:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	685b      	ldr	r3, [r3, #4]
 800a036:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a03a:	d111      	bne.n	800a060 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a044:	d004      	beq.n	800a050 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	689b      	ldr	r3, [r3, #8]
 800a04a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a04e:	d107      	bne.n	800a060 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a05e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a068:	d10f      	bne.n	800a08a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a078:	601a      	str	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a088:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a09a:	2303      	movs	r3, #3
 800a09c:	e018      	b.n	800a0d0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d102      	bne.n	800a0aa <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	61fb      	str	r3, [r7, #28]
 800a0a8:	e002      	b.n	800a0b0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	689a      	ldr	r2, [r3, #8]
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	bf0c      	ite	eq
 800a0c0:	2301      	moveq	r3, #1
 800a0c2:	2300      	movne	r3, #0
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	79fb      	ldrb	r3, [r7, #7]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d19a      	bne.n	800a004 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3720      	adds	r7, #32
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	20000004 	.word	0x20000004

0800a0dc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b086      	sub	sp, #24
 800a0e0:	af02      	add	r7, sp, #8
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a0f0:	d111      	bne.n	800a116 <SPI_EndRxTransaction+0x3a>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0fa:	d004      	beq.n	800a106 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a104:	d107      	bne.n	800a116 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a114:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a11e:	d12a      	bne.n	800a176 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a128:	d012      	beq.n	800a150 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	9300      	str	r3, [sp, #0]
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	2200      	movs	r2, #0
 800a132:	2180      	movs	r1, #128	@ 0x80
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f7ff ff49 	bl	8009fcc <SPI_WaitFlagStateUntilTimeout>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d02d      	beq.n	800a19c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a144:	f043 0220 	orr.w	r2, r3, #32
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800a14c:	2303      	movs	r3, #3
 800a14e:	e026      	b.n	800a19e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2200      	movs	r2, #0
 800a158:	2101      	movs	r1, #1
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	f7ff ff36 	bl	8009fcc <SPI_WaitFlagStateUntilTimeout>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d01a      	beq.n	800a19c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a16a:	f043 0220 	orr.w	r2, r3, #32
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800a172:	2303      	movs	r3, #3
 800a174:	e013      	b.n	800a19e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2200      	movs	r2, #0
 800a17e:	2101      	movs	r1, #1
 800a180:	68f8      	ldr	r0, [r7, #12]
 800a182:	f7ff ff23 	bl	8009fcc <SPI_WaitFlagStateUntilTimeout>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d007      	beq.n	800a19c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a190:	f043 0220 	orr.w	r2, r3, #32
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a198:	2303      	movs	r3, #3
 800a19a:	e000      	b.n	800a19e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
	...

0800a1a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b088      	sub	sp, #32
 800a1ac:	af02      	add	r7, sp, #8
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	9300      	str	r3, [sp, #0]
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	2102      	movs	r1, #2
 800a1be:	68f8      	ldr	r0, [r7, #12]
 800a1c0:	f7ff ff04 	bl	8009fcc <SPI_WaitFlagStateUntilTimeout>
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d007      	beq.n	800a1da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ce:	f043 0220 	orr.w	r2, r3, #32
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800a1d6:	2303      	movs	r3, #3
 800a1d8:	e032      	b.n	800a240 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a1da:	4b1b      	ldr	r3, [pc, #108]	@ (800a248 <SPI_EndRxTxTransaction+0xa0>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a1b      	ldr	r2, [pc, #108]	@ (800a24c <SPI_EndRxTxTransaction+0xa4>)
 800a1e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1e4:	0d5b      	lsrs	r3, r3, #21
 800a1e6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a1ea:	fb02 f303 	mul.w	r3, r2, r3
 800a1ee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a1f8:	d112      	bne.n	800a220 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2200      	movs	r2, #0
 800a202:	2180      	movs	r1, #128	@ 0x80
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7ff fee1 	bl	8009fcc <SPI_WaitFlagStateUntilTimeout>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d016      	beq.n	800a23e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a214:	f043 0220 	orr.w	r2, r3, #32
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a21c:	2303      	movs	r3, #3
 800a21e:	e00f      	b.n	800a240 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00a      	beq.n	800a23c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	3b01      	subs	r3, #1
 800a22a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a236:	2b80      	cmp	r3, #128	@ 0x80
 800a238:	d0f2      	beq.n	800a220 <SPI_EndRxTxTransaction+0x78>
 800a23a:	e000      	b.n	800a23e <SPI_EndRxTxTransaction+0x96>
        break;
 800a23c:	bf00      	nop
  }

  return HAL_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3718      	adds	r7, #24
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	20000004 	.word	0x20000004
 800a24c:	165e9f81 	.word	0x165e9f81

0800a250 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a250:	b084      	sub	sp, #16
 800a252:	b480      	push	{r7}
 800a254:	b085      	sub	sp, #20
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	f107 001c 	add.w	r0, r7, #28
 800a25e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a262:	2300      	movs	r3, #0
 800a264:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a266:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a268:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a26a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800a26e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800a272:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800a276:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800a27a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	4313      	orrs	r3, r2
 800a280:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800a28a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	431a      	orrs	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	b004      	add	sp, #16
 800a2a4:	4770      	bx	lr

0800a2a6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b083      	sub	sp, #12
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
 800a2c8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800a2d4:	2300      	movs	r3, #0
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	370c      	adds	r7, #12
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a2e2:	b480      	push	{r7}
 800a2e4:	b083      	sub	sp, #12
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2203      	movs	r2, #3
 800a2ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a2f0:	2300      	movs	r3, #0
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a2fe:	b480      	push	{r7}
 800a300:	b083      	sub	sp, #12
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 0303 	and.w	r3, r3, #3
}
 800a30e:	4618      	mov	r0, r3
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b085      	sub	sp, #20
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a324:	2300      	movs	r3, #0
 800a326:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a338:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a33e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a344:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	4313      	orrs	r3, r2
 800a34a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800a354:	f023 030f 	bic.w	r3, r3, #15
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	431a      	orrs	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a36e:	b480      	push	{r7}
 800a370:	b083      	sub	sp, #12
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	691b      	ldr	r3, [r3, #16]
 800a37a:	b2db      	uxtb	r3, r3
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	370c      	adds	r7, #12
 800a380:	46bd      	mov	sp, r7
 800a382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a386:	4770      	bx	lr

0800a388 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
 800a390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	3314      	adds	r3, #20
 800a396:	461a      	mov	r2, r3
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	4413      	add	r3, r2
 800a39c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
}  
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3714      	adds	r7, #20
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a3ae:	b480      	push	{r7}
 800a3b0:	b085      	sub	sp, #20
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3d4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a3da:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a3e0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ec:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	431a      	orrs	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0

}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3714      	adds	r7, #20
 800a3fe:	46bd      	mov	sp, r7
 800a400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a404:	4770      	bx	lr

0800a406 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a406:	b580      	push	{r7, lr}
 800a408:	b088      	sub	sp, #32
 800a40a:	af00      	add	r7, sp, #0
 800a40c:	6078      	str	r0, [r7, #4]
 800a40e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a414:	2310      	movs	r3, #16
 800a416:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a418:	2340      	movs	r3, #64	@ 0x40
 800a41a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a41c:	2300      	movs	r3, #0
 800a41e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a420:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a424:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a426:	f107 0308 	add.w	r3, r7, #8
 800a42a:	4619      	mov	r1, r3
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f7ff ff74 	bl	800a31a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a432:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a436:	2110      	movs	r1, #16
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f000 f9d7 	bl	800a7ec <SDMMC_GetCmdResp1>
 800a43e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a440:	69fb      	ldr	r3, [r7, #28]
}
 800a442:	4618      	mov	r0, r3
 800a444:	3720      	adds	r7, #32
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b088      	sub	sp, #32
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a458:	2311      	movs	r3, #17
 800a45a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a45c:	2340      	movs	r3, #64	@ 0x40
 800a45e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a460:	2300      	movs	r3, #0
 800a462:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a468:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a46a:	f107 0308 	add.w	r3, r7, #8
 800a46e:	4619      	mov	r1, r3
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f7ff ff52 	bl	800a31a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a47a:	2111      	movs	r1, #17
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f9b5 	bl	800a7ec <SDMMC_GetCmdResp1>
 800a482:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a484:	69fb      	ldr	r3, [r7, #28]
}
 800a486:	4618      	mov	r0, r3
 800a488:	3720      	adds	r7, #32
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b088      	sub	sp, #32
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
 800a496:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a49c:	2312      	movs	r3, #18
 800a49e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4a0:	2340      	movs	r3, #64	@ 0x40
 800a4a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4ae:	f107 0308 	add.w	r3, r7, #8
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7ff ff30 	bl	800a31a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a4ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a4be:	2112      	movs	r1, #18
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f993 	bl	800a7ec <SDMMC_GetCmdResp1>
 800a4c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4c8:	69fb      	ldr	r3, [r7, #28]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3720      	adds	r7, #32
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b088      	sub	sp, #32
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a4e0:	2318      	movs	r3, #24
 800a4e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4e4:	2340      	movs	r3, #64	@ 0x40
 800a4e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4f2:	f107 0308 	add.w	r3, r7, #8
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f7ff ff0e 	bl	800a31a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a4fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a502:	2118      	movs	r1, #24
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 f971 	bl	800a7ec <SDMMC_GetCmdResp1>
 800a50a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a50c:	69fb      	ldr	r3, [r7, #28]
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3720      	adds	r7, #32
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a516:	b580      	push	{r7, lr}
 800a518:	b088      	sub	sp, #32
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a524:	2319      	movs	r3, #25
 800a526:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a528:	2340      	movs	r3, #64	@ 0x40
 800a52a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a52c:	2300      	movs	r3, #0
 800a52e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a530:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a534:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a536:	f107 0308 	add.w	r3, r7, #8
 800a53a:	4619      	mov	r1, r3
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f7ff feec 	bl	800a31a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a542:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a546:	2119      	movs	r1, #25
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 f94f 	bl	800a7ec <SDMMC_GetCmdResp1>
 800a54e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a550:	69fb      	ldr	r3, [r7, #28]
}
 800a552:	4618      	mov	r0, r3
 800a554:	3720      	adds	r7, #32
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
	...

0800a55c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b088      	sub	sp, #32
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a564:	2300      	movs	r3, #0
 800a566:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a568:	230c      	movs	r3, #12
 800a56a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a56c:	2340      	movs	r3, #64	@ 0x40
 800a56e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a570:	2300      	movs	r3, #0
 800a572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a574:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a578:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a57a:	f107 0308 	add.w	r3, r7, #8
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7ff feca 	bl	800a31a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a586:	4a05      	ldr	r2, [pc, #20]	@ (800a59c <SDMMC_CmdStopTransfer+0x40>)
 800a588:	210c      	movs	r1, #12
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f000 f92e 	bl	800a7ec <SDMMC_GetCmdResp1>
 800a590:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a592:	69fb      	ldr	r3, [r7, #28]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3720      	adds	r7, #32
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	05f5e100 	.word	0x05f5e100

0800a5a0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b08a      	sub	sp, #40	@ 0x28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60f8      	str	r0, [r7, #12]
 800a5a8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a5b0:	2307      	movs	r3, #7
 800a5b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a5b4:	2340      	movs	r3, #64	@ 0x40
 800a5b6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a5c0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5c2:	f107 0310 	add.w	r3, r7, #16
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	f7ff fea6 	bl	800a31a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a5ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a5d2:	2107      	movs	r1, #7
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 f909 	bl	800a7ec <SDMMC_GetCmdResp1>
 800a5da:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3728      	adds	r7, #40	@ 0x28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b088      	sub	sp, #32
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a602:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a604:	f107 0308 	add.w	r3, r7, #8
 800a608:	4619      	mov	r1, r3
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f7ff fe85 	bl	800a31a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fb23 	bl	800ac5c <SDMMC_GetCmdError>
 800a616:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a618:	69fb      	ldr	r3, [r7, #28]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3720      	adds	r7, #32
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b088      	sub	sp, #32
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a62a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800a62e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a630:	2308      	movs	r3, #8
 800a632:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a634:	2340      	movs	r3, #64	@ 0x40
 800a636:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a638:	2300      	movs	r3, #0
 800a63a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a63c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a640:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a642:	f107 0308 	add.w	r3, r7, #8
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f7ff fe66 	bl	800a31a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fab6 	bl	800abc0 <SDMMC_GetCmdResp7>
 800a654:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a656:	69fb      	ldr	r3, [r7, #28]
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3720      	adds	r7, #32
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b088      	sub	sp, #32
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a66e:	2337      	movs	r3, #55	@ 0x37
 800a670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a672:	2340      	movs	r3, #64	@ 0x40
 800a674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a676:	2300      	movs	r3, #0
 800a678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a67a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a67e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a680:	f107 0308 	add.w	r3, r7, #8
 800a684:	4619      	mov	r1, r3
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff fe47 	bl	800a31a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a68c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a690:	2137      	movs	r1, #55	@ 0x37
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f8aa 	bl	800a7ec <SDMMC_GetCmdResp1>
 800a698:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a69a:	69fb      	ldr	r3, [r7, #28]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3720      	adds	r7, #32
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b088      	sub	sp, #32
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a6b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a6ba:	2329      	movs	r3, #41	@ 0x29
 800a6bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a6be:	2340      	movs	r3, #64	@ 0x40
 800a6c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a6c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a6cc:	f107 0308 	add.w	r3, r7, #8
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff fe21 	bl	800a31a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f000 f9bd 	bl	800aa58 <SDMMC_GetCmdResp3>
 800a6de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6e0:	69fb      	ldr	r3, [r7, #28]
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3720      	adds	r7, #32
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}

0800a6ea <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a6ea:	b580      	push	{r7, lr}
 800a6ec:	b088      	sub	sp, #32
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a6f6:	2302      	movs	r3, #2
 800a6f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a6fa:	23c0      	movs	r3, #192	@ 0xc0
 800a6fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a6fe:	2300      	movs	r3, #0
 800a700:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a706:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a708:	f107 0308 	add.w	r3, r7, #8
 800a70c:	4619      	mov	r1, r3
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7ff fe03 	bl	800a31a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f957 	bl	800a9c8 <SDMMC_GetCmdResp2>
 800a71a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a71c:	69fb      	ldr	r3, [r7, #28]
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3720      	adds	r7, #32
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b088      	sub	sp, #32
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a734:	2309      	movs	r3, #9
 800a736:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a738:	23c0      	movs	r3, #192	@ 0xc0
 800a73a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a73c:	2300      	movs	r3, #0
 800a73e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a740:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a744:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a746:	f107 0308 	add.w	r3, r7, #8
 800a74a:	4619      	mov	r1, r3
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f7ff fde4 	bl	800a31a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 f938 	bl	800a9c8 <SDMMC_GetCmdResp2>
 800a758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a75a:	69fb      	ldr	r3, [r7, #28]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3720      	adds	r7, #32
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b088      	sub	sp, #32
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a76e:	2300      	movs	r3, #0
 800a770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a772:	2303      	movs	r3, #3
 800a774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a776:	2340      	movs	r3, #64	@ 0x40
 800a778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a77a:	2300      	movs	r3, #0
 800a77c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a77e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a782:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a784:	f107 0308 	add.w	r3, r7, #8
 800a788:	4619      	mov	r1, r3
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7ff fdc5 	bl	800a31a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	2103      	movs	r1, #3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f99d 	bl	800aad4 <SDMMC_GetCmdResp6>
 800a79a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a79c:	69fb      	ldr	r3, [r7, #28]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3720      	adds	r7, #32
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b088      	sub	sp, #32
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
 800a7ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a7b4:	230d      	movs	r3, #13
 800a7b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a7b8:	2340      	movs	r3, #64	@ 0x40
 800a7ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a7c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a7c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a7c6:	f107 0308 	add.w	r3, r7, #8
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff fda4 	bl	800a31a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a7d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a7d6:	210d      	movs	r1, #13
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f807 	bl	800a7ec <SDMMC_GetCmdResp1>
 800a7de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a7e0:	69fb      	ldr	r3, [r7, #28]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3720      	adds	r7, #32
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b088      	sub	sp, #32
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	607a      	str	r2, [r7, #4]
 800a7f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a7fa:	4b70      	ldr	r3, [pc, #448]	@ (800a9bc <SDMMC_GetCmdResp1+0x1d0>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a70      	ldr	r2, [pc, #448]	@ (800a9c0 <SDMMC_GetCmdResp1+0x1d4>)
 800a800:	fba2 2303 	umull	r2, r3, r2, r3
 800a804:	0a5a      	lsrs	r2, r3, #9
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	fb02 f303 	mul.w	r3, r2, r3
 800a80c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	1e5a      	subs	r2, r3, #1
 800a812:	61fa      	str	r2, [r7, #28]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d102      	bne.n	800a81e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a818:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a81c:	e0c9      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a822:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d0ef      	beq.n	800a80e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1ea      	bne.n	800a80e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a83c:	f003 0304 	and.w	r3, r3, #4
 800a840:	2b00      	cmp	r3, #0
 800a842:	d004      	beq.n	800a84e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2204      	movs	r2, #4
 800a848:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a84a:	2304      	movs	r3, #4
 800a84c:	e0b1      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a852:	f003 0301 	and.w	r3, r3, #1
 800a856:	2b00      	cmp	r3, #0
 800a858:	d004      	beq.n	800a864 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2201      	movs	r2, #1
 800a85e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a860:	2301      	movs	r3, #1
 800a862:	e0a6      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	22c5      	movs	r2, #197	@ 0xc5
 800a868:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f7ff fd7f 	bl	800a36e <SDIO_GetCommandResponse>
 800a870:	4603      	mov	r3, r0
 800a872:	461a      	mov	r2, r3
 800a874:	7afb      	ldrb	r3, [r7, #11]
 800a876:	4293      	cmp	r3, r2
 800a878:	d001      	beq.n	800a87e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a87a:	2301      	movs	r3, #1
 800a87c:	e099      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a87e:	2100      	movs	r1, #0
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f7ff fd81 	bl	800a388 <SDIO_GetResponse>
 800a886:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a888:	697a      	ldr	r2, [r7, #20]
 800a88a:	4b4e      	ldr	r3, [pc, #312]	@ (800a9c4 <SDMMC_GetCmdResp1+0x1d8>)
 800a88c:	4013      	ands	r3, r2
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d101      	bne.n	800a896 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a892:	2300      	movs	r3, #0
 800a894:	e08d      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	da02      	bge.n	800a8a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a89c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a8a0:	e087      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a8ac:	2340      	movs	r3, #64	@ 0x40
 800a8ae:	e080      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d001      	beq.n	800a8be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a8ba:	2380      	movs	r3, #128	@ 0x80
 800a8bc:	e079      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d002      	beq.n	800a8ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a8c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a8cc:	e071      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a8d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a8dc:	e069      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a8e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a8ec:	e061      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d002      	beq.n	800a8fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a8f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a8fc:	e059      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d002      	beq.n	800a90e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a90c:	e051      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a914:	2b00      	cmp	r3, #0
 800a916:	d002      	beq.n	800a91e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a918:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a91c:	e049      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a928:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a92c:	e041      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a934:	2b00      	cmp	r3, #0
 800a936:	d002      	beq.n	800a93e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a938:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a93c:	e039      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a948:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800a94c:	e031      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d002      	beq.n	800a95e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a958:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800a95c:	e029      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a964:	2b00      	cmp	r3, #0
 800a966:	d002      	beq.n	800a96e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a968:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a96c:	e021      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a978:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a97c:	e019      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a984:	2b00      	cmp	r3, #0
 800a986:	d002      	beq.n	800a98e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a988:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800a98c:	e011      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d002      	beq.n	800a99e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a998:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a99c:	e009      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f003 0308 	and.w	r3, r3, #8
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d002      	beq.n	800a9ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a9a8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800a9ac:	e001      	b.n	800a9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a9ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3720      	adds	r7, #32
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	20000004 	.word	0x20000004
 800a9c0:	10624dd3 	.word	0x10624dd3
 800a9c4:	fdffe008 	.word	0xfdffe008

0800a9c8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9d0:	4b1f      	ldr	r3, [pc, #124]	@ (800aa50 <SDMMC_GetCmdResp2+0x88>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a1f      	ldr	r2, [pc, #124]	@ (800aa54 <SDMMC_GetCmdResp2+0x8c>)
 800a9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9da:	0a5b      	lsrs	r3, r3, #9
 800a9dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a9e0:	fb02 f303 	mul.w	r3, r2, r3
 800a9e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	1e5a      	subs	r2, r3, #1
 800a9ea:	60fa      	str	r2, [r7, #12]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d102      	bne.n	800a9f6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a9f0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a9f4:	e026      	b.n	800aa44 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d0ef      	beq.n	800a9e6 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d1ea      	bne.n	800a9e6 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa14:	f003 0304 	and.w	r3, r3, #4
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d004      	beq.n	800aa26 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2204      	movs	r2, #4
 800aa20:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa22:	2304      	movs	r3, #4
 800aa24:	e00e      	b.n	800aa44 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa2a:	f003 0301 	and.w	r3, r3, #1
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d004      	beq.n	800aa3c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e003      	b.n	800aa44 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	22c5      	movs	r2, #197	@ 0xc5
 800aa40:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3714      	adds	r7, #20
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr
 800aa50:	20000004 	.word	0x20000004
 800aa54:	10624dd3 	.word	0x10624dd3

0800aa58 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa60:	4b1a      	ldr	r3, [pc, #104]	@ (800aacc <SDMMC_GetCmdResp3+0x74>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a1a      	ldr	r2, [pc, #104]	@ (800aad0 <SDMMC_GetCmdResp3+0x78>)
 800aa66:	fba2 2303 	umull	r2, r3, r2, r3
 800aa6a:	0a5b      	lsrs	r3, r3, #9
 800aa6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aa70:	fb02 f303 	mul.w	r3, r2, r3
 800aa74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	1e5a      	subs	r2, r3, #1
 800aa7a:	60fa      	str	r2, [r7, #12]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d102      	bne.n	800aa86 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800aa84:	e01b      	b.n	800aabe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d0ef      	beq.n	800aa76 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d1ea      	bne.n	800aa76 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaa4:	f003 0304 	and.w	r3, r3, #4
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d004      	beq.n	800aab6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2204      	movs	r2, #4
 800aab0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aab2:	2304      	movs	r3, #4
 800aab4:	e003      	b.n	800aabe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	22c5      	movs	r2, #197	@ 0xc5
 800aaba:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	20000004 	.word	0x20000004
 800aad0:	10624dd3 	.word	0x10624dd3

0800aad4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b088      	sub	sp, #32
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	460b      	mov	r3, r1
 800aade:	607a      	str	r2, [r7, #4]
 800aae0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aae2:	4b35      	ldr	r3, [pc, #212]	@ (800abb8 <SDMMC_GetCmdResp6+0xe4>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a35      	ldr	r2, [pc, #212]	@ (800abbc <SDMMC_GetCmdResp6+0xe8>)
 800aae8:	fba2 2303 	umull	r2, r3, r2, r3
 800aaec:	0a5b      	lsrs	r3, r3, #9
 800aaee:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aaf2:	fb02 f303 	mul.w	r3, r2, r3
 800aaf6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	1e5a      	subs	r2, r3, #1
 800aafc:	61fa      	str	r2, [r7, #28]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d102      	bne.n	800ab08 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab02:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ab06:	e052      	b.n	800abae <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab0c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d0ef      	beq.n	800aaf8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ab18:	69bb      	ldr	r3, [r7, #24]
 800ab1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1ea      	bne.n	800aaf8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab26:	f003 0304 	and.w	r3, r3, #4
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d004      	beq.n	800ab38 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2204      	movs	r2, #4
 800ab32:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab34:	2304      	movs	r3, #4
 800ab36:	e03a      	b.n	800abae <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab3c:	f003 0301 	and.w	r3, r3, #1
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d004      	beq.n	800ab4e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2201      	movs	r2, #1
 800ab48:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e02f      	b.n	800abae <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7ff fc0d 	bl	800a36e <SDIO_GetCommandResponse>
 800ab54:	4603      	mov	r3, r0
 800ab56:	461a      	mov	r2, r3
 800ab58:	7afb      	ldrb	r3, [r7, #11]
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d001      	beq.n	800ab62 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e025      	b.n	800abae <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	22c5      	movs	r2, #197	@ 0xc5
 800ab66:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ab68:	2100      	movs	r1, #0
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f7ff fc0c 	bl	800a388 <SDIO_GetResponse>
 800ab70:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d106      	bne.n	800ab8a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	0c1b      	lsrs	r3, r3, #16
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ab86:	2300      	movs	r3, #0
 800ab88:	e011      	b.n	800abae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ab94:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ab98:	e009      	b.n	800abae <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d002      	beq.n	800abaa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aba8:	e001      	b.n	800abae <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800abaa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3720      	adds	r7, #32
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	20000004 	.word	0x20000004
 800abbc:	10624dd3 	.word	0x10624dd3

0800abc0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800abc8:	4b22      	ldr	r3, [pc, #136]	@ (800ac54 <SDMMC_GetCmdResp7+0x94>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a22      	ldr	r2, [pc, #136]	@ (800ac58 <SDMMC_GetCmdResp7+0x98>)
 800abce:	fba2 2303 	umull	r2, r3, r2, r3
 800abd2:	0a5b      	lsrs	r3, r3, #9
 800abd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abd8:	fb02 f303 	mul.w	r3, r2, r3
 800abdc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	1e5a      	subs	r2, r3, #1
 800abe2:	60fa      	str	r2, [r7, #12]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d102      	bne.n	800abee <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abe8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800abec:	e02c      	b.n	800ac48 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abf2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0ef      	beq.n	800abde <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1ea      	bne.n	800abde <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac0c:	f003 0304 	and.w	r3, r3, #4
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d004      	beq.n	800ac1e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2204      	movs	r2, #4
 800ac18:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ac1a:	2304      	movs	r3, #4
 800ac1c:	e014      	b.n	800ac48 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac22:	f003 0301 	and.w	r3, r3, #1
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d004      	beq.n	800ac34 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2201      	movs	r2, #1
 800ac2e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ac30:	2301      	movs	r3, #1
 800ac32:	e009      	b.n	800ac48 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d002      	beq.n	800ac46 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2240      	movs	r2, #64	@ 0x40
 800ac44:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ac46:	2300      	movs	r3, #0
  
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3714      	adds	r7, #20
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr
 800ac54:	20000004 	.word	0x20000004
 800ac58:	10624dd3 	.word	0x10624dd3

0800ac5c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ac64:	4b11      	ldr	r3, [pc, #68]	@ (800acac <SDMMC_GetCmdError+0x50>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a11      	ldr	r2, [pc, #68]	@ (800acb0 <SDMMC_GetCmdError+0x54>)
 800ac6a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac6e:	0a5b      	lsrs	r3, r3, #9
 800ac70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac74:	fb02 f303 	mul.w	r3, r2, r3
 800ac78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	1e5a      	subs	r2, r3, #1
 800ac7e:	60fa      	str	r2, [r7, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d102      	bne.n	800ac8a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ac84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ac88:	e009      	b.n	800ac9e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d0f1      	beq.n	800ac7a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	22c5      	movs	r2, #197	@ 0xc5
 800ac9a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ac9c:	2300      	movs	r3, #0
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3714      	adds	r7, #20
 800aca2:	46bd      	mov	sp, r7
 800aca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca8:	4770      	bx	lr
 800acaa:	bf00      	nop
 800acac:	20000004 	.word	0x20000004
 800acb0:	10624dd3 	.word	0x10624dd3

0800acb4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800acb8:	4904      	ldr	r1, [pc, #16]	@ (800accc <MX_FATFS_Init+0x18>)
 800acba:	4805      	ldr	r0, [pc, #20]	@ (800acd0 <MX_FATFS_Init+0x1c>)
 800acbc:	f002 fb38 	bl	800d330 <FATFS_LinkDriver>
 800acc0:	4603      	mov	r3, r0
 800acc2:	461a      	mov	r2, r3
 800acc4:	4b03      	ldr	r3, [pc, #12]	@ (800acd4 <MX_FATFS_Init+0x20>)
 800acc6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800acc8:	bf00      	nop
 800acca:	bd80      	pop	{r7, pc}
 800accc:	20000720 	.word	0x20000720
 800acd0:	0800e038 	.word	0x0800e038
 800acd4:	2000071c 	.word	0x2000071c

0800acd8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800acd8:	b480      	push	{r7}
 800acda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800acdc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800acde:	4618      	mov	r0, r3
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800acee:	2300      	movs	r3, #0
 800acf0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800acf2:	f000 f89e 	bl	800ae32 <BSP_SD_IsDetected>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d001      	beq.n	800ad00 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e005      	b.n	800ad0c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ad00:	4804      	ldr	r0, [pc, #16]	@ (800ad14 <BSP_SD_Init+0x2c>)
 800ad02:	f7fd fa9f 	bl	8008244 <HAL_SD_Init>
 800ad06:	4603      	mov	r3, r0
 800ad08:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ad0a:	79fb      	ldrb	r3, [r7, #7]
}
 800ad0c:	4618      	mov	r0, r3
 800ad0e:	3708      	adds	r7, #8
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	20000600 	.word	0x20000600

0800ad18 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b088      	sub	sp, #32
 800ad1c:	af02      	add	r7, sp, #8
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
 800ad24:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	68f9      	ldr	r1, [r7, #12]
 800ad34:	4806      	ldr	r0, [pc, #24]	@ (800ad50 <BSP_SD_ReadBlocks+0x38>)
 800ad36:	f7fd fb2d 	bl	8008394 <HAL_SD_ReadBlocks>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d001      	beq.n	800ad44 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ad44:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3718      	adds	r7, #24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	20000600 	.word	0x20000600

0800ad54 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b088      	sub	sp, #32
 800ad58:	af02      	add	r7, sp, #8
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
 800ad60:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ad62:	2300      	movs	r3, #0
 800ad64:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	68ba      	ldr	r2, [r7, #8]
 800ad6e:	68f9      	ldr	r1, [r7, #12]
 800ad70:	4806      	ldr	r0, [pc, #24]	@ (800ad8c <BSP_SD_WriteBlocks+0x38>)
 800ad72:	f7fd fcf5 	bl	8008760 <HAL_SD_WriteBlocks>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d001      	beq.n	800ad80 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ad80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	20000600 	.word	0x20000600

0800ad90 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ad94:	4805      	ldr	r0, [pc, #20]	@ (800adac <BSP_SD_GetCardState+0x1c>)
 800ad96:	f7fe f9d1 	bl	800913c <HAL_SD_GetCardState>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b04      	cmp	r3, #4
 800ad9e:	bf14      	ite	ne
 800ada0:	2301      	movne	r3, #1
 800ada2:	2300      	moveq	r3, #0
 800ada4:	b2db      	uxtb	r3, r3
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	20000600 	.word	0x20000600

0800adb0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800adb8:	6879      	ldr	r1, [r7, #4]
 800adba:	4803      	ldr	r0, [pc, #12]	@ (800adc8 <BSP_SD_GetCardInfo+0x18>)
 800adbc:	f7fe f992 	bl	80090e4 <HAL_SD_GetCardInfo>
}
 800adc0:	bf00      	nop
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	20000600 	.word	0x20000600

0800adcc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800add4:	f000 f818 	bl	800ae08 <BSP_SD_AbortCallback>
}
 800add8:	bf00      	nop
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b082      	sub	sp, #8
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800ade8:	f000 f815 	bl	800ae16 <BSP_SD_WriteCpltCallback>
}
 800adec:	bf00      	nop
 800adee:	3708      	adds	r7, #8
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd80      	pop	{r7, pc}

0800adf4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800adfc:	f000 f812 	bl	800ae24 <BSP_SD_ReadCpltCallback>
}
 800ae00:	bf00      	nop
 800ae02:	3708      	adds	r7, #8
 800ae04:	46bd      	mov	sp, r7
 800ae06:	bd80      	pop	{r7, pc}

0800ae08 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	af00      	add	r7, sp, #0

}
 800ae0c:	bf00      	nop
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800ae16:	b480      	push	{r7}
 800ae18:	af00      	add	r7, sp, #0

}
 800ae1a:	bf00      	nop
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800ae24:	b480      	push	{r7}
 800ae26:	af00      	add	r7, sp, #0

}
 800ae28:	bf00      	nop
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ae32:	b580      	push	{r7, lr}
 800ae34:	b082      	sub	sp, #8
 800ae36:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ae3c:	f000 f80c 	bl	800ae58 <BSP_PlatformIsDetected>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d101      	bne.n	800ae4a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ae46:	2300      	movs	r3, #0
 800ae48:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ae4a:	79fb      	ldrb	r3, [r7, #7]
 800ae4c:	b2db      	uxtb	r3, r3
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3708      	adds	r7, #8
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
	...

0800ae58 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ae5e:	2301      	movs	r3, #1
 800ae60:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ae62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800ae66:	4806      	ldr	r0, [pc, #24]	@ (800ae80 <BSP_PlatformIsDetected+0x28>)
 800ae68:	f7fa f92c 	bl	80050c4 <HAL_GPIO_ReadPin>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d001      	beq.n	800ae76 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ae72:	2300      	movs	r3, #0
 800ae74:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ae76:	79fb      	ldrb	r3, [r7, #7]
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3708      	adds	r7, #8
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	40020800 	.word	0x40020800

0800ae84 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b082      	sub	sp, #8
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ae8e:	4b0b      	ldr	r3, [pc, #44]	@ (800aebc <SD_CheckStatus+0x38>)
 800ae90:	2201      	movs	r2, #1
 800ae92:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ae94:	f7ff ff7c 	bl	800ad90 <BSP_SD_GetCardState>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d107      	bne.n	800aeae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ae9e:	4b07      	ldr	r3, [pc, #28]	@ (800aebc <SD_CheckStatus+0x38>)
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	f023 0301 	bic.w	r3, r3, #1
 800aea8:	b2da      	uxtb	r2, r3
 800aeaa:	4b04      	ldr	r3, [pc, #16]	@ (800aebc <SD_CheckStatus+0x38>)
 800aeac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800aeae:	4b03      	ldr	r3, [pc, #12]	@ (800aebc <SD_CheckStatus+0x38>)
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	b2db      	uxtb	r3, r3
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3708      	adds	r7, #8
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	2000000d 	.word	0x2000000d

0800aec0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b082      	sub	sp, #8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	4603      	mov	r3, r0
 800aec8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800aeca:	4b0b      	ldr	r3, [pc, #44]	@ (800aef8 <SD_initialize+0x38>)
 800aecc:	2201      	movs	r2, #1
 800aece:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800aed0:	f7ff ff0a 	bl	800ace8 <BSP_SD_Init>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d107      	bne.n	800aeea <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800aeda:	79fb      	ldrb	r3, [r7, #7]
 800aedc:	4618      	mov	r0, r3
 800aede:	f7ff ffd1 	bl	800ae84 <SD_CheckStatus>
 800aee2:	4603      	mov	r3, r0
 800aee4:	461a      	mov	r2, r3
 800aee6:	4b04      	ldr	r3, [pc, #16]	@ (800aef8 <SD_initialize+0x38>)
 800aee8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800aeea:	4b03      	ldr	r3, [pc, #12]	@ (800aef8 <SD_initialize+0x38>)
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	b2db      	uxtb	r3, r3
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	2000000d 	.word	0x2000000d

0800aefc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	4603      	mov	r3, r0
 800af04:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800af06:	79fb      	ldrb	r3, [r7, #7]
 800af08:	4618      	mov	r0, r3
 800af0a:	f7ff ffbb 	bl	800ae84 <SD_CheckStatus>
 800af0e:	4603      	mov	r3, r0
}
 800af10:	4618      	mov	r0, r3
 800af12:	3708      	adds	r7, #8
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}

0800af18 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b086      	sub	sp, #24
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60b9      	str	r1, [r7, #8]
 800af20:	607a      	str	r2, [r7, #4]
 800af22:	603b      	str	r3, [r7, #0]
 800af24:	4603      	mov	r3, r0
 800af26:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800af2c:	f04f 33ff 	mov.w	r3, #4294967295
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	6879      	ldr	r1, [r7, #4]
 800af34:	68b8      	ldr	r0, [r7, #8]
 800af36:	f7ff feef 	bl	800ad18 <BSP_SD_ReadBlocks>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d107      	bne.n	800af50 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800af40:	bf00      	nop
 800af42:	f7ff ff25 	bl	800ad90 <BSP_SD_GetCardState>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1fa      	bne.n	800af42 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800af4c:	2300      	movs	r3, #0
 800af4e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800af50:	7dfb      	ldrb	r3, [r7, #23]
}
 800af52:	4618      	mov	r0, r3
 800af54:	3718      	adds	r7, #24
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b086      	sub	sp, #24
 800af5e:	af00      	add	r7, sp, #0
 800af60:	60b9      	str	r1, [r7, #8]
 800af62:	607a      	str	r2, [r7, #4]
 800af64:	603b      	str	r3, [r7, #0]
 800af66:	4603      	mov	r3, r0
 800af68:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800af6a:	2301      	movs	r3, #1
 800af6c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800af6e:	f04f 33ff 	mov.w	r3, #4294967295
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	6879      	ldr	r1, [r7, #4]
 800af76:	68b8      	ldr	r0, [r7, #8]
 800af78:	f7ff feec 	bl	800ad54 <BSP_SD_WriteBlocks>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d107      	bne.n	800af92 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800af82:	bf00      	nop
 800af84:	f7ff ff04 	bl	800ad90 <BSP_SD_GetCardState>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d1fa      	bne.n	800af84 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800af8e:	2300      	movs	r3, #0
 800af90:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800af92:	7dfb      	ldrb	r3, [r7, #23]
}
 800af94:	4618      	mov	r0, r3
 800af96:	3718      	adds	r7, #24
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b08c      	sub	sp, #48	@ 0x30
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	4603      	mov	r3, r0
 800afa4:	603a      	str	r2, [r7, #0]
 800afa6:	71fb      	strb	r3, [r7, #7]
 800afa8:	460b      	mov	r3, r1
 800afaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800afac:	2301      	movs	r3, #1
 800afae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800afb2:	4b25      	ldr	r3, [pc, #148]	@ (800b048 <SD_ioctl+0xac>)
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	f003 0301 	and.w	r3, r3, #1
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <SD_ioctl+0x28>
 800afc0:	2303      	movs	r3, #3
 800afc2:	e03c      	b.n	800b03e <SD_ioctl+0xa2>

  switch (cmd)
 800afc4:	79bb      	ldrb	r3, [r7, #6]
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d834      	bhi.n	800b034 <SD_ioctl+0x98>
 800afca:	a201      	add	r2, pc, #4	@ (adr r2, 800afd0 <SD_ioctl+0x34>)
 800afcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd0:	0800afe1 	.word	0x0800afe1
 800afd4:	0800afe9 	.word	0x0800afe9
 800afd8:	0800b001 	.word	0x0800b001
 800afdc:	0800b01b 	.word	0x0800b01b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800afe0:	2300      	movs	r3, #0
 800afe2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800afe6:	e028      	b.n	800b03a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800afe8:	f107 030c 	add.w	r3, r7, #12
 800afec:	4618      	mov	r0, r3
 800afee:	f7ff fedf 	bl	800adb0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800aff2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800aff8:	2300      	movs	r3, #0
 800affa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800affe:	e01c      	b.n	800b03a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b000:	f107 030c 	add.w	r3, r7, #12
 800b004:	4618      	mov	r0, r3
 800b006:	f7ff fed3 	bl	800adb0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00c:	b29a      	uxth	r2, r3
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b012:	2300      	movs	r3, #0
 800b014:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b018:	e00f      	b.n	800b03a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b01a:	f107 030c 	add.w	r3, r7, #12
 800b01e:	4618      	mov	r0, r3
 800b020:	f7ff fec6 	bl	800adb0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b026:	0a5a      	lsrs	r2, r3, #9
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b02c:	2300      	movs	r3, #0
 800b02e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800b032:	e002      	b.n	800b03a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b034:	2304      	movs	r3, #4
 800b036:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800b03a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b03e:	4618      	mov	r0, r3
 800b040:	3730      	adds	r7, #48	@ 0x30
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	2000000d 	.word	0x2000000d

0800b04c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	4603      	mov	r3, r0
 800b054:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b056:	79fb      	ldrb	r3, [r7, #7]
 800b058:	4a08      	ldr	r2, [pc, #32]	@ (800b07c <disk_status+0x30>)
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	4413      	add	r3, r2
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	685b      	ldr	r3, [r3, #4]
 800b062:	79fa      	ldrb	r2, [r7, #7]
 800b064:	4905      	ldr	r1, [pc, #20]	@ (800b07c <disk_status+0x30>)
 800b066:	440a      	add	r2, r1
 800b068:	7a12      	ldrb	r2, [r2, #8]
 800b06a:	4610      	mov	r0, r2
 800b06c:	4798      	blx	r3
 800b06e:	4603      	mov	r3, r0
 800b070:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b072:	7bfb      	ldrb	r3, [r7, #15]
}
 800b074:	4618      	mov	r0, r3
 800b076:	3710      	adds	r7, #16
 800b078:	46bd      	mov	sp, r7
 800b07a:	bd80      	pop	{r7, pc}
 800b07c:	20000324 	.word	0x20000324

0800b080 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	4603      	mov	r3, r0
 800b088:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b08a:	2300      	movs	r3, #0
 800b08c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b08e:	79fb      	ldrb	r3, [r7, #7]
 800b090:	4a0e      	ldr	r2, [pc, #56]	@ (800b0cc <disk_initialize+0x4c>)
 800b092:	5cd3      	ldrb	r3, [r2, r3]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d114      	bne.n	800b0c2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b098:	79fb      	ldrb	r3, [r7, #7]
 800b09a:	4a0c      	ldr	r2, [pc, #48]	@ (800b0cc <disk_initialize+0x4c>)
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	4413      	add	r3, r2
 800b0a0:	685b      	ldr	r3, [r3, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	79fa      	ldrb	r2, [r7, #7]
 800b0a6:	4909      	ldr	r1, [pc, #36]	@ (800b0cc <disk_initialize+0x4c>)
 800b0a8:	440a      	add	r2, r1
 800b0aa:	7a12      	ldrb	r2, [r2, #8]
 800b0ac:	4610      	mov	r0, r2
 800b0ae:	4798      	blx	r3
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800b0b4:	7bfb      	ldrb	r3, [r7, #15]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d103      	bne.n	800b0c2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800b0ba:	79fb      	ldrb	r3, [r7, #7]
 800b0bc:	4a03      	ldr	r2, [pc, #12]	@ (800b0cc <disk_initialize+0x4c>)
 800b0be:	2101      	movs	r1, #1
 800b0c0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800b0c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	20000324 	.word	0x20000324

0800b0d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b0d0:	b590      	push	{r4, r7, lr}
 800b0d2:	b087      	sub	sp, #28
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60b9      	str	r1, [r7, #8]
 800b0d8:	607a      	str	r2, [r7, #4]
 800b0da:	603b      	str	r3, [r7, #0]
 800b0dc:	4603      	mov	r3, r0
 800b0de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b0e0:	7bfb      	ldrb	r3, [r7, #15]
 800b0e2:	4a0a      	ldr	r2, [pc, #40]	@ (800b10c <disk_read+0x3c>)
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	4413      	add	r3, r2
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	689c      	ldr	r4, [r3, #8]
 800b0ec:	7bfb      	ldrb	r3, [r7, #15]
 800b0ee:	4a07      	ldr	r2, [pc, #28]	@ (800b10c <disk_read+0x3c>)
 800b0f0:	4413      	add	r3, r2
 800b0f2:	7a18      	ldrb	r0, [r3, #8]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	68b9      	ldr	r1, [r7, #8]
 800b0fa:	47a0      	blx	r4
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800b100:	7dfb      	ldrb	r3, [r7, #23]
}
 800b102:	4618      	mov	r0, r3
 800b104:	371c      	adds	r7, #28
 800b106:	46bd      	mov	sp, r7
 800b108:	bd90      	pop	{r4, r7, pc}
 800b10a:	bf00      	nop
 800b10c:	20000324 	.word	0x20000324

0800b110 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b110:	b590      	push	{r4, r7, lr}
 800b112:	b087      	sub	sp, #28
 800b114:	af00      	add	r7, sp, #0
 800b116:	60b9      	str	r1, [r7, #8]
 800b118:	607a      	str	r2, [r7, #4]
 800b11a:	603b      	str	r3, [r7, #0]
 800b11c:	4603      	mov	r3, r0
 800b11e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b120:	7bfb      	ldrb	r3, [r7, #15]
 800b122:	4a0a      	ldr	r2, [pc, #40]	@ (800b14c <disk_write+0x3c>)
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4413      	add	r3, r2
 800b128:	685b      	ldr	r3, [r3, #4]
 800b12a:	68dc      	ldr	r4, [r3, #12]
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
 800b12e:	4a07      	ldr	r2, [pc, #28]	@ (800b14c <disk_write+0x3c>)
 800b130:	4413      	add	r3, r2
 800b132:	7a18      	ldrb	r0, [r3, #8]
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	68b9      	ldr	r1, [r7, #8]
 800b13a:	47a0      	blx	r4
 800b13c:	4603      	mov	r3, r0
 800b13e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b140:	7dfb      	ldrb	r3, [r7, #23]
}
 800b142:	4618      	mov	r0, r3
 800b144:	371c      	adds	r7, #28
 800b146:	46bd      	mov	sp, r7
 800b148:	bd90      	pop	{r4, r7, pc}
 800b14a:	bf00      	nop
 800b14c:	20000324 	.word	0x20000324

0800b150 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	603a      	str	r2, [r7, #0]
 800b15a:	71fb      	strb	r3, [r7, #7]
 800b15c:	460b      	mov	r3, r1
 800b15e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b160:	79fb      	ldrb	r3, [r7, #7]
 800b162:	4a09      	ldr	r2, [pc, #36]	@ (800b188 <disk_ioctl+0x38>)
 800b164:	009b      	lsls	r3, r3, #2
 800b166:	4413      	add	r3, r2
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	691b      	ldr	r3, [r3, #16]
 800b16c:	79fa      	ldrb	r2, [r7, #7]
 800b16e:	4906      	ldr	r1, [pc, #24]	@ (800b188 <disk_ioctl+0x38>)
 800b170:	440a      	add	r2, r1
 800b172:	7a10      	ldrb	r0, [r2, #8]
 800b174:	79b9      	ldrb	r1, [r7, #6]
 800b176:	683a      	ldr	r2, [r7, #0]
 800b178:	4798      	blx	r3
 800b17a:	4603      	mov	r3, r0
 800b17c:	73fb      	strb	r3, [r7, #15]
  return res;
 800b17e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	20000324 	.word	0x20000324

0800b18c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b18c:	b480      	push	{r7}
 800b18e:	b085      	sub	sp, #20
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	3301      	adds	r3, #1
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b19c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b1a0:	021b      	lsls	r3, r3, #8
 800b1a2:	b21a      	sxth	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	b21b      	sxth	r3, r3
 800b1aa:	4313      	orrs	r3, r2
 800b1ac:	b21b      	sxth	r3, r3
 800b1ae:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b1b0:	89fb      	ldrh	r3, [r7, #14]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3714      	adds	r7, #20
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr

0800b1be <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b1be:	b480      	push	{r7}
 800b1c0:	b085      	sub	sp, #20
 800b1c2:	af00      	add	r7, sp, #0
 800b1c4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	3303      	adds	r3, #3
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	021b      	lsls	r3, r3, #8
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	3202      	adds	r2, #2
 800b1d6:	7812      	ldrb	r2, [r2, #0]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	021b      	lsls	r3, r3, #8
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	3201      	adds	r2, #1
 800b1e4:	7812      	ldrb	r2, [r2, #0]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	021b      	lsls	r3, r3, #8
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	7812      	ldrb	r2, [r2, #0]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	60fb      	str	r3, [r7, #12]
	return rv;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3714      	adds	r7, #20
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	460b      	mov	r3, r1
 800b20e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	1c5a      	adds	r2, r3, #1
 800b214:	607a      	str	r2, [r7, #4]
 800b216:	887a      	ldrh	r2, [r7, #2]
 800b218:	b2d2      	uxtb	r2, r2
 800b21a:	701a      	strb	r2, [r3, #0]
 800b21c:	887b      	ldrh	r3, [r7, #2]
 800b21e:	0a1b      	lsrs	r3, r3, #8
 800b220:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	1c5a      	adds	r2, r3, #1
 800b226:	607a      	str	r2, [r7, #4]
 800b228:	887a      	ldrh	r2, [r7, #2]
 800b22a:	b2d2      	uxtb	r2, r2
 800b22c:	701a      	strb	r2, [r3, #0]
}
 800b22e:	bf00      	nop
 800b230:	370c      	adds	r7, #12
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr

0800b23a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b23a:	b480      	push	{r7}
 800b23c:	b083      	sub	sp, #12
 800b23e:	af00      	add	r7, sp, #0
 800b240:	6078      	str	r0, [r7, #4]
 800b242:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	1c5a      	adds	r2, r3, #1
 800b248:	607a      	str	r2, [r7, #4]
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	b2d2      	uxtb	r2, r2
 800b24e:	701a      	strb	r2, [r3, #0]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	0a1b      	lsrs	r3, r3, #8
 800b254:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	1c5a      	adds	r2, r3, #1
 800b25a:	607a      	str	r2, [r7, #4]
 800b25c:	683a      	ldr	r2, [r7, #0]
 800b25e:	b2d2      	uxtb	r2, r2
 800b260:	701a      	strb	r2, [r3, #0]
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	0a1b      	lsrs	r3, r3, #8
 800b266:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	607a      	str	r2, [r7, #4]
 800b26e:	683a      	ldr	r2, [r7, #0]
 800b270:	b2d2      	uxtb	r2, r2
 800b272:	701a      	strb	r2, [r3, #0]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	0a1b      	lsrs	r3, r3, #8
 800b278:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	1c5a      	adds	r2, r3, #1
 800b27e:	607a      	str	r2, [r7, #4]
 800b280:	683a      	ldr	r2, [r7, #0]
 800b282:	b2d2      	uxtb	r2, r2
 800b284:	701a      	strb	r2, [r3, #0]
}
 800b286:	bf00      	nop
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr

0800b292 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b292:	b480      	push	{r7}
 800b294:	b087      	sub	sp, #28
 800b296:	af00      	add	r7, sp, #0
 800b298:	60f8      	str	r0, [r7, #12]
 800b29a:	60b9      	str	r1, [r7, #8]
 800b29c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d00d      	beq.n	800b2c8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	1c53      	adds	r3, r2, #1
 800b2b0:	613b      	str	r3, [r7, #16]
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	1c59      	adds	r1, r3, #1
 800b2b6:	6179      	str	r1, [r7, #20]
 800b2b8:	7812      	ldrb	r2, [r2, #0]
 800b2ba:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	3b01      	subs	r3, #1
 800b2c0:	607b      	str	r3, [r7, #4]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d1f1      	bne.n	800b2ac <mem_cpy+0x1a>
	}
}
 800b2c8:	bf00      	nop
 800b2ca:	371c      	adds	r7, #28
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b2d4:	b480      	push	{r7}
 800b2d6:	b087      	sub	sp, #28
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	60f8      	str	r0, [r7, #12]
 800b2dc:	60b9      	str	r1, [r7, #8]
 800b2de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	1c5a      	adds	r2, r3, #1
 800b2e8:	617a      	str	r2, [r7, #20]
 800b2ea:	68ba      	ldr	r2, [r7, #8]
 800b2ec:	b2d2      	uxtb	r2, r2
 800b2ee:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	607b      	str	r3, [r7, #4]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1f3      	bne.n	800b2e4 <mem_set+0x10>
}
 800b2fc:	bf00      	nop
 800b2fe:	bf00      	nop
 800b300:	371c      	adds	r7, #28
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr

0800b30a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b30a:	b480      	push	{r7}
 800b30c:	b089      	sub	sp, #36	@ 0x24
 800b30e:	af00      	add	r7, sp, #0
 800b310:	60f8      	str	r0, [r7, #12]
 800b312:	60b9      	str	r1, [r7, #8]
 800b314:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	61fb      	str	r3, [r7, #28]
 800b31a:	68bb      	ldr	r3, [r7, #8]
 800b31c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b31e:	2300      	movs	r3, #0
 800b320:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	1c5a      	adds	r2, r3, #1
 800b326:	61fa      	str	r2, [r7, #28]
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	4619      	mov	r1, r3
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	1c5a      	adds	r2, r3, #1
 800b330:	61ba      	str	r2, [r7, #24]
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	1acb      	subs	r3, r1, r3
 800b336:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	3b01      	subs	r3, #1
 800b33c:	607b      	str	r3, [r7, #4]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d002      	beq.n	800b34a <mem_cmp+0x40>
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d0eb      	beq.n	800b322 <mem_cmp+0x18>

	return r;
 800b34a:	697b      	ldr	r3, [r7, #20]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3724      	adds	r7, #36	@ 0x24
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b362:	e002      	b.n	800b36a <chk_chr+0x12>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	3301      	adds	r3, #1
 800b368:	607b      	str	r3, [r7, #4]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d005      	beq.n	800b37e <chk_chr+0x26>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	461a      	mov	r2, r3
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d1f2      	bne.n	800b364 <chk_chr+0xc>
	return *str;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	781b      	ldrb	r3, [r3, #0]
}
 800b382:	4618      	mov	r0, r3
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
	...

0800b390 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b390:	b480      	push	{r7}
 800b392:	b085      	sub	sp, #20
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b39a:	2300      	movs	r3, #0
 800b39c:	60bb      	str	r3, [r7, #8]
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	60fb      	str	r3, [r7, #12]
 800b3a2:	e029      	b.n	800b3f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b3a4:	4a27      	ldr	r2, [pc, #156]	@ (800b444 <chk_lock+0xb4>)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	011b      	lsls	r3, r3, #4
 800b3aa:	4413      	add	r3, r2
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d01d      	beq.n	800b3ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b3b2:	4a24      	ldr	r2, [pc, #144]	@ (800b444 <chk_lock+0xb4>)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	011b      	lsls	r3, r3, #4
 800b3b8:	4413      	add	r3, r2
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d116      	bne.n	800b3f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b3c4:	4a1f      	ldr	r2, [pc, #124]	@ (800b444 <chk_lock+0xb4>)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	011b      	lsls	r3, r3, #4
 800b3ca:	4413      	add	r3, r2
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d10c      	bne.n	800b3f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b3d8:	4a1a      	ldr	r2, [pc, #104]	@ (800b444 <chk_lock+0xb4>)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	011b      	lsls	r3, r3, #4
 800b3de:	4413      	add	r3, r2
 800b3e0:	3308      	adds	r3, #8
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d102      	bne.n	800b3f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b3ec:	e007      	b.n	800b3fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	3301      	adds	r3, #1
 800b3f6:	60fb      	str	r3, [r7, #12]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	2b01      	cmp	r3, #1
 800b3fc:	d9d2      	bls.n	800b3a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2b02      	cmp	r3, #2
 800b402:	d109      	bne.n	800b418 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d102      	bne.n	800b410 <chk_lock+0x80>
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	2b02      	cmp	r3, #2
 800b40e:	d101      	bne.n	800b414 <chk_lock+0x84>
 800b410:	2300      	movs	r3, #0
 800b412:	e010      	b.n	800b436 <chk_lock+0xa6>
 800b414:	2312      	movs	r3, #18
 800b416:	e00e      	b.n	800b436 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d108      	bne.n	800b430 <chk_lock+0xa0>
 800b41e:	4a09      	ldr	r2, [pc, #36]	@ (800b444 <chk_lock+0xb4>)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	011b      	lsls	r3, r3, #4
 800b424:	4413      	add	r3, r2
 800b426:	330c      	adds	r3, #12
 800b428:	881b      	ldrh	r3, [r3, #0]
 800b42a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b42e:	d101      	bne.n	800b434 <chk_lock+0xa4>
 800b430:	2310      	movs	r3, #16
 800b432:	e000      	b.n	800b436 <chk_lock+0xa6>
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
 800b442:	bf00      	nop
 800b444:	20000304 	.word	0x20000304

0800b448 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b44e:	2300      	movs	r3, #0
 800b450:	607b      	str	r3, [r7, #4]
 800b452:	e002      	b.n	800b45a <enq_lock+0x12>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	3301      	adds	r3, #1
 800b458:	607b      	str	r3, [r7, #4]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2b01      	cmp	r3, #1
 800b45e:	d806      	bhi.n	800b46e <enq_lock+0x26>
 800b460:	4a09      	ldr	r2, [pc, #36]	@ (800b488 <enq_lock+0x40>)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	011b      	lsls	r3, r3, #4
 800b466:	4413      	add	r3, r2
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1f2      	bne.n	800b454 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b02      	cmp	r3, #2
 800b472:	bf14      	ite	ne
 800b474:	2301      	movne	r3, #1
 800b476:	2300      	moveq	r3, #0
 800b478:	b2db      	uxtb	r3, r3
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	370c      	adds	r7, #12
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	20000304 	.word	0x20000304

0800b48c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b496:	2300      	movs	r3, #0
 800b498:	60fb      	str	r3, [r7, #12]
 800b49a:	e01f      	b.n	800b4dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b49c:	4a41      	ldr	r2, [pc, #260]	@ (800b5a4 <inc_lock+0x118>)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	011b      	lsls	r3, r3, #4
 800b4a2:	4413      	add	r3, r2
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d113      	bne.n	800b4d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b4ae:	4a3d      	ldr	r2, [pc, #244]	@ (800b5a4 <inc_lock+0x118>)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	011b      	lsls	r3, r3, #4
 800b4b4:	4413      	add	r3, r2
 800b4b6:	3304      	adds	r3, #4
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d109      	bne.n	800b4d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b4c2:	4a38      	ldr	r2, [pc, #224]	@ (800b5a4 <inc_lock+0x118>)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	011b      	lsls	r3, r3, #4
 800b4c8:	4413      	add	r3, r2
 800b4ca:	3308      	adds	r3, #8
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d006      	beq.n	800b4e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	60fb      	str	r3, [r7, #12]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2b01      	cmp	r3, #1
 800b4e0:	d9dc      	bls.n	800b49c <inc_lock+0x10>
 800b4e2:	e000      	b.n	800b4e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b4e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2b02      	cmp	r3, #2
 800b4ea:	d132      	bne.n	800b552 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	60fb      	str	r3, [r7, #12]
 800b4f0:	e002      	b.n	800b4f8 <inc_lock+0x6c>
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	60fb      	str	r3, [r7, #12]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2b01      	cmp	r3, #1
 800b4fc:	d806      	bhi.n	800b50c <inc_lock+0x80>
 800b4fe:	4a29      	ldr	r2, [pc, #164]	@ (800b5a4 <inc_lock+0x118>)
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	011b      	lsls	r3, r3, #4
 800b504:	4413      	add	r3, r2
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d1f2      	bne.n	800b4f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	d101      	bne.n	800b516 <inc_lock+0x8a>
 800b512:	2300      	movs	r3, #0
 800b514:	e040      	b.n	800b598 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	4922      	ldr	r1, [pc, #136]	@ (800b5a4 <inc_lock+0x118>)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	011b      	lsls	r3, r3, #4
 800b520:	440b      	add	r3, r1
 800b522:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	689a      	ldr	r2, [r3, #8]
 800b528:	491e      	ldr	r1, [pc, #120]	@ (800b5a4 <inc_lock+0x118>)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	011b      	lsls	r3, r3, #4
 800b52e:	440b      	add	r3, r1
 800b530:	3304      	adds	r3, #4
 800b532:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	695a      	ldr	r2, [r3, #20]
 800b538:	491a      	ldr	r1, [pc, #104]	@ (800b5a4 <inc_lock+0x118>)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	011b      	lsls	r3, r3, #4
 800b53e:	440b      	add	r3, r1
 800b540:	3308      	adds	r3, #8
 800b542:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b544:	4a17      	ldr	r2, [pc, #92]	@ (800b5a4 <inc_lock+0x118>)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	011b      	lsls	r3, r3, #4
 800b54a:	4413      	add	r3, r2
 800b54c:	330c      	adds	r3, #12
 800b54e:	2200      	movs	r2, #0
 800b550:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d009      	beq.n	800b56c <inc_lock+0xe0>
 800b558:	4a12      	ldr	r2, [pc, #72]	@ (800b5a4 <inc_lock+0x118>)
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	011b      	lsls	r3, r3, #4
 800b55e:	4413      	add	r3, r2
 800b560:	330c      	adds	r3, #12
 800b562:	881b      	ldrh	r3, [r3, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d001      	beq.n	800b56c <inc_lock+0xe0>
 800b568:	2300      	movs	r3, #0
 800b56a:	e015      	b.n	800b598 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d108      	bne.n	800b584 <inc_lock+0xf8>
 800b572:	4a0c      	ldr	r2, [pc, #48]	@ (800b5a4 <inc_lock+0x118>)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	011b      	lsls	r3, r3, #4
 800b578:	4413      	add	r3, r2
 800b57a:	330c      	adds	r3, #12
 800b57c:	881b      	ldrh	r3, [r3, #0]
 800b57e:	3301      	adds	r3, #1
 800b580:	b29a      	uxth	r2, r3
 800b582:	e001      	b.n	800b588 <inc_lock+0xfc>
 800b584:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b588:	4906      	ldr	r1, [pc, #24]	@ (800b5a4 <inc_lock+0x118>)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	011b      	lsls	r3, r3, #4
 800b58e:	440b      	add	r3, r1
 800b590:	330c      	adds	r3, #12
 800b592:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	3301      	adds	r3, #1
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3714      	adds	r7, #20
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	20000304 	.word	0x20000304

0800b5a8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b085      	sub	sp, #20
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	3b01      	subs	r3, #1
 800b5b4:	607b      	str	r3, [r7, #4]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d825      	bhi.n	800b608 <dec_lock+0x60>
		n = Files[i].ctr;
 800b5bc:	4a17      	ldr	r2, [pc, #92]	@ (800b61c <dec_lock+0x74>)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	011b      	lsls	r3, r3, #4
 800b5c2:	4413      	add	r3, r2
 800b5c4:	330c      	adds	r3, #12
 800b5c6:	881b      	ldrh	r3, [r3, #0]
 800b5c8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b5ca:	89fb      	ldrh	r3, [r7, #14]
 800b5cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b5d0:	d101      	bne.n	800b5d6 <dec_lock+0x2e>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b5d6:	89fb      	ldrh	r3, [r7, #14]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d002      	beq.n	800b5e2 <dec_lock+0x3a>
 800b5dc:	89fb      	ldrh	r3, [r7, #14]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b5e2:	4a0e      	ldr	r2, [pc, #56]	@ (800b61c <dec_lock+0x74>)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	011b      	lsls	r3, r3, #4
 800b5e8:	4413      	add	r3, r2
 800b5ea:	330c      	adds	r3, #12
 800b5ec:	89fa      	ldrh	r2, [r7, #14]
 800b5ee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b5f0:	89fb      	ldrh	r3, [r7, #14]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d105      	bne.n	800b602 <dec_lock+0x5a>
 800b5f6:	4a09      	ldr	r2, [pc, #36]	@ (800b61c <dec_lock+0x74>)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	011b      	lsls	r3, r3, #4
 800b5fc:	4413      	add	r3, r2
 800b5fe:	2200      	movs	r2, #0
 800b600:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b602:	2300      	movs	r3, #0
 800b604:	737b      	strb	r3, [r7, #13]
 800b606:	e001      	b.n	800b60c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b608:	2302      	movs	r3, #2
 800b60a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b60c:	7b7b      	ldrb	r3, [r7, #13]
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3714      	adds	r7, #20
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop
 800b61c:	20000304 	.word	0x20000304

0800b620 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b620:	b480      	push	{r7}
 800b622:	b085      	sub	sp, #20
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b628:	2300      	movs	r3, #0
 800b62a:	60fb      	str	r3, [r7, #12]
 800b62c:	e010      	b.n	800b650 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b62e:	4a0d      	ldr	r2, [pc, #52]	@ (800b664 <clear_lock+0x44>)
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	011b      	lsls	r3, r3, #4
 800b634:	4413      	add	r3, r2
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d105      	bne.n	800b64a <clear_lock+0x2a>
 800b63e:	4a09      	ldr	r2, [pc, #36]	@ (800b664 <clear_lock+0x44>)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	011b      	lsls	r3, r3, #4
 800b644:	4413      	add	r3, r2
 800b646:	2200      	movs	r2, #0
 800b648:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	3301      	adds	r3, #1
 800b64e:	60fb      	str	r3, [r7, #12]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2b01      	cmp	r3, #1
 800b654:	d9eb      	bls.n	800b62e <clear_lock+0xe>
	}
}
 800b656:	bf00      	nop
 800b658:	bf00      	nop
 800b65a:	3714      	adds	r7, #20
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr
 800b664:	20000304 	.word	0x20000304

0800b668 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b086      	sub	sp, #24
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b670:	2300      	movs	r3, #0
 800b672:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	78db      	ldrb	r3, [r3, #3]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d034      	beq.n	800b6e6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b680:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	7858      	ldrb	r0, [r3, #1]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b68c:	2301      	movs	r3, #1
 800b68e:	697a      	ldr	r2, [r7, #20]
 800b690:	f7ff fd3e 	bl	800b110 <disk_write>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d002      	beq.n	800b6a0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	73fb      	strb	r3, [r7, #15]
 800b69e:	e022      	b.n	800b6e6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6a1b      	ldr	r3, [r3, #32]
 800b6aa:	697a      	ldr	r2, [r7, #20]
 800b6ac:	1ad2      	subs	r2, r2, r3
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d217      	bcs.n	800b6e6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	789b      	ldrb	r3, [r3, #2]
 800b6ba:	613b      	str	r3, [r7, #16]
 800b6bc:	e010      	b.n	800b6e0 <sync_window+0x78>
					wsect += fs->fsize;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	699b      	ldr	r3, [r3, #24]
 800b6c2:	697a      	ldr	r2, [r7, #20]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	7858      	ldrb	r0, [r3, #1]
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	697a      	ldr	r2, [r7, #20]
 800b6d6:	f7ff fd1b 	bl	800b110 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	613b      	str	r3, [r7, #16]
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d8eb      	bhi.n	800b6be <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3718      	adds	r7, #24
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b702:	683a      	ldr	r2, [r7, #0]
 800b704:	429a      	cmp	r2, r3
 800b706:	d01b      	beq.n	800b740 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f7ff ffad 	bl	800b668 <sync_window>
 800b70e:	4603      	mov	r3, r0
 800b710:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b712:	7bfb      	ldrb	r3, [r7, #15]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d113      	bne.n	800b740 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	7858      	ldrb	r0, [r3, #1]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b722:	2301      	movs	r3, #1
 800b724:	683a      	ldr	r2, [r7, #0]
 800b726:	f7ff fcd3 	bl	800b0d0 <disk_read>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d004      	beq.n	800b73a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b730:	f04f 33ff 	mov.w	r3, #4294967295
 800b734:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b736:	2301      	movs	r3, #1
 800b738:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	683a      	ldr	r2, [r7, #0]
 800b73e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800b740:	7bfb      	ldrb	r3, [r7, #15]
}
 800b742:	4618      	mov	r0, r3
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
	...

0800b74c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7ff ff87 	bl	800b668 <sync_window>
 800b75a:	4603      	mov	r3, r0
 800b75c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b75e:	7bfb      	ldrb	r3, [r7, #15]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d158      	bne.n	800b816 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	2b03      	cmp	r3, #3
 800b76a:	d148      	bne.n	800b7fe <sync_fs+0xb2>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	791b      	ldrb	r3, [r3, #4]
 800b770:	2b01      	cmp	r3, #1
 800b772:	d144      	bne.n	800b7fe <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	3330      	adds	r3, #48	@ 0x30
 800b778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b77c:	2100      	movs	r1, #0
 800b77e:	4618      	mov	r0, r3
 800b780:	f7ff fda8 	bl	800b2d4 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	3330      	adds	r3, #48	@ 0x30
 800b788:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b78c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800b790:	4618      	mov	r0, r3
 800b792:	f7ff fd37 	bl	800b204 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3330      	adds	r3, #48	@ 0x30
 800b79a:	4921      	ldr	r1, [pc, #132]	@ (800b820 <sync_fs+0xd4>)
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7ff fd4c 	bl	800b23a <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	3330      	adds	r3, #48	@ 0x30
 800b7a6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b7aa:	491e      	ldr	r1, [pc, #120]	@ (800b824 <sync_fs+0xd8>)
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7ff fd44 	bl	800b23a <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	3330      	adds	r3, #48	@ 0x30
 800b7b6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	691b      	ldr	r3, [r3, #16]
 800b7be:	4619      	mov	r1, r3
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	f7ff fd3a 	bl	800b23a <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	3330      	adds	r3, #48	@ 0x30
 800b7ca:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	4610      	mov	r0, r2
 800b7d6:	f7ff fd30 	bl	800b23a <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	1c5a      	adds	r2, r3, #1
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	7858      	ldrb	r0, [r3, #1]
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	f7ff fc8c 	bl	800b110 <disk_write>
			fs->fsi_flag = 0;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	785b      	ldrb	r3, [r3, #1]
 800b802:	2200      	movs	r2, #0
 800b804:	2100      	movs	r1, #0
 800b806:	4618      	mov	r0, r3
 800b808:	f7ff fca2 	bl	800b150 <disk_ioctl>
 800b80c:	4603      	mov	r3, r0
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d001      	beq.n	800b816 <sync_fs+0xca>
 800b812:	2301      	movs	r3, #1
 800b814:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b816:	7bfb      	ldrb	r3, [r7, #15]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3710      	adds	r7, #16
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}
 800b820:	41615252 	.word	0x41615252
 800b824:	61417272 	.word	0x61417272

0800b828 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b828:	b480      	push	{r7}
 800b82a:	b083      	sub	sp, #12
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
 800b830:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	3b02      	subs	r3, #2
 800b836:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	695b      	ldr	r3, [r3, #20]
 800b83c:	3b02      	subs	r3, #2
 800b83e:	683a      	ldr	r2, [r7, #0]
 800b840:	429a      	cmp	r2, r3
 800b842:	d301      	bcc.n	800b848 <clust2sect+0x20>
 800b844:	2300      	movs	r3, #0
 800b846:	e008      	b.n	800b85a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	895b      	ldrh	r3, [r3, #10]
 800b84c:	461a      	mov	r2, r3
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	fb03 f202 	mul.w	r2, r3, r2
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b858:	4413      	add	r3, r2
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	370c      	adds	r7, #12
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b086      	sub	sp, #24
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d904      	bls.n	800b886 <get_fat+0x20>
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	695b      	ldr	r3, [r3, #20]
 800b880:	683a      	ldr	r2, [r7, #0]
 800b882:	429a      	cmp	r2, r3
 800b884:	d302      	bcc.n	800b88c <get_fat+0x26>
		val = 1;	/* Internal error */
 800b886:	2301      	movs	r3, #1
 800b888:	617b      	str	r3, [r7, #20]
 800b88a:	e08e      	b.n	800b9aa <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b88c:	f04f 33ff 	mov.w	r3, #4294967295
 800b890:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	2b03      	cmp	r3, #3
 800b898:	d061      	beq.n	800b95e <get_fat+0xf8>
 800b89a:	2b03      	cmp	r3, #3
 800b89c:	dc7b      	bgt.n	800b996 <get_fat+0x130>
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d002      	beq.n	800b8a8 <get_fat+0x42>
 800b8a2:	2b02      	cmp	r3, #2
 800b8a4:	d041      	beq.n	800b92a <get_fat+0xc4>
 800b8a6:	e076      	b.n	800b996 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	60fb      	str	r3, [r7, #12]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	085b      	lsrs	r3, r3, #1
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	6a1a      	ldr	r2, [r3, #32]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	0a5b      	lsrs	r3, r3, #9
 800b8be:	4413      	add	r3, r2
 800b8c0:	4619      	mov	r1, r3
 800b8c2:	6938      	ldr	r0, [r7, #16]
 800b8c4:	f7ff ff14 	bl	800b6f0 <move_window>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d166      	bne.n	800b99c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	1c5a      	adds	r2, r3, #1
 800b8d2:	60fa      	str	r2, [r7, #12]
 800b8d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	4413      	add	r3, r2
 800b8dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b8e0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	6a1a      	ldr	r2, [r3, #32]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	0a5b      	lsrs	r3, r3, #9
 800b8ea:	4413      	add	r3, r2
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	6938      	ldr	r0, [r7, #16]
 800b8f0:	f7ff fefe 	bl	800b6f0 <move_window>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d152      	bne.n	800b9a0 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b900:	693a      	ldr	r2, [r7, #16]
 800b902:	4413      	add	r3, r2
 800b904:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b908:	021b      	lsls	r3, r3, #8
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	f003 0301 	and.w	r3, r3, #1
 800b916:	2b00      	cmp	r3, #0
 800b918:	d002      	beq.n	800b920 <get_fat+0xba>
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	091b      	lsrs	r3, r3, #4
 800b91e:	e002      	b.n	800b926 <get_fat+0xc0>
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b926:	617b      	str	r3, [r7, #20]
			break;
 800b928:	e03f      	b.n	800b9aa <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	6a1a      	ldr	r2, [r3, #32]
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	0a1b      	lsrs	r3, r3, #8
 800b932:	4413      	add	r3, r2
 800b934:	4619      	mov	r1, r3
 800b936:	6938      	ldr	r0, [r7, #16]
 800b938:	f7ff feda 	bl	800b6f0 <move_window>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d130      	bne.n	800b9a4 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	005b      	lsls	r3, r3, #1
 800b94c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800b950:	4413      	add	r3, r2
 800b952:	4618      	mov	r0, r3
 800b954:	f7ff fc1a 	bl	800b18c <ld_word>
 800b958:	4603      	mov	r3, r0
 800b95a:	617b      	str	r3, [r7, #20]
			break;
 800b95c:	e025      	b.n	800b9aa <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	6a1a      	ldr	r2, [r3, #32]
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	09db      	lsrs	r3, r3, #7
 800b966:	4413      	add	r3, r2
 800b968:	4619      	mov	r1, r3
 800b96a:	6938      	ldr	r0, [r7, #16]
 800b96c:	f7ff fec0 	bl	800b6f0 <move_window>
 800b970:	4603      	mov	r3, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d118      	bne.n	800b9a8 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800b984:	4413      	add	r3, r2
 800b986:	4618      	mov	r0, r3
 800b988:	f7ff fc19 	bl	800b1be <ld_dword>
 800b98c:	4603      	mov	r3, r0
 800b98e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b992:	617b      	str	r3, [r7, #20]
			break;
 800b994:	e009      	b.n	800b9aa <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b996:	2301      	movs	r3, #1
 800b998:	617b      	str	r3, [r7, #20]
 800b99a:	e006      	b.n	800b9aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b99c:	bf00      	nop
 800b99e:	e004      	b.n	800b9aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b9a0:	bf00      	nop
 800b9a2:	e002      	b.n	800b9aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b9a4:	bf00      	nop
 800b9a6:	e000      	b.n	800b9aa <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b9a8:	bf00      	nop
		}
	}

	return val;
 800b9aa:	697b      	ldr	r3, [r7, #20]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3718      	adds	r7, #24
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b9b4:	b590      	push	{r4, r7, lr}
 800b9b6:	b089      	sub	sp, #36	@ 0x24
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b9c0:	2302      	movs	r3, #2
 800b9c2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	f240 80d9 	bls.w	800bb7e <put_fat+0x1ca>
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	695b      	ldr	r3, [r3, #20]
 800b9d0:	68ba      	ldr	r2, [r7, #8]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	f080 80d3 	bcs.w	800bb7e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	2b03      	cmp	r3, #3
 800b9de:	f000 8096 	beq.w	800bb0e <put_fat+0x15a>
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	f300 80cb 	bgt.w	800bb7e <put_fat+0x1ca>
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d002      	beq.n	800b9f2 <put_fat+0x3e>
 800b9ec:	2b02      	cmp	r3, #2
 800b9ee:	d06e      	beq.n	800bace <put_fat+0x11a>
 800b9f0:	e0c5      	b.n	800bb7e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	61bb      	str	r3, [r7, #24]
 800b9f6:	69bb      	ldr	r3, [r7, #24]
 800b9f8:	085b      	lsrs	r3, r3, #1
 800b9fa:	69ba      	ldr	r2, [r7, #24]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	6a1a      	ldr	r2, [r3, #32]
 800ba04:	69bb      	ldr	r3, [r7, #24]
 800ba06:	0a5b      	lsrs	r3, r3, #9
 800ba08:	4413      	add	r3, r2
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	68f8      	ldr	r0, [r7, #12]
 800ba0e:	f7ff fe6f 	bl	800b6f0 <move_window>
 800ba12:	4603      	mov	r3, r0
 800ba14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba16:	7ffb      	ldrb	r3, [r7, #31]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	f040 80a9 	bne.w	800bb70 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	1c59      	adds	r1, r3, #1
 800ba28:	61b9      	str	r1, [r7, #24]
 800ba2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba2e:	4413      	add	r3, r2
 800ba30:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	f003 0301 	and.w	r3, r3, #1
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d00d      	beq.n	800ba58 <put_fat+0xa4>
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	b25b      	sxtb	r3, r3
 800ba42:	f003 030f 	and.w	r3, r3, #15
 800ba46:	b25a      	sxtb	r2, r3
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	b25b      	sxtb	r3, r3
 800ba4c:	011b      	lsls	r3, r3, #4
 800ba4e:	b25b      	sxtb	r3, r3
 800ba50:	4313      	orrs	r3, r2
 800ba52:	b25b      	sxtb	r3, r3
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	e001      	b.n	800ba5c <put_fat+0xa8>
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	b2db      	uxtb	r3, r3
 800ba5c:	697a      	ldr	r2, [r7, #20]
 800ba5e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2201      	movs	r2, #1
 800ba64:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6a1a      	ldr	r2, [r3, #32]
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	0a5b      	lsrs	r3, r3, #9
 800ba6e:	4413      	add	r3, r2
 800ba70:	4619      	mov	r1, r3
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f7ff fe3c 	bl	800b6f0 <move_window>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ba7c:	7ffb      	ldrb	r3, [r7, #31]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d178      	bne.n	800bb74 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba8e:	4413      	add	r3, r2
 800ba90:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	f003 0301 	and.w	r3, r3, #1
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <put_fat+0xf0>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	091b      	lsrs	r3, r3, #4
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	e00e      	b.n	800bac2 <put_fat+0x10e>
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	b25b      	sxtb	r3, r3
 800baaa:	f023 030f 	bic.w	r3, r3, #15
 800baae:	b25a      	sxtb	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	0a1b      	lsrs	r3, r3, #8
 800bab4:	b25b      	sxtb	r3, r3
 800bab6:	f003 030f 	and.w	r3, r3, #15
 800baba:	b25b      	sxtb	r3, r3
 800babc:	4313      	orrs	r3, r2
 800babe:	b25b      	sxtb	r3, r3
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	697a      	ldr	r2, [r7, #20]
 800bac4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2201      	movs	r2, #1
 800baca:	70da      	strb	r2, [r3, #3]
			break;
 800bacc:	e057      	b.n	800bb7e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6a1a      	ldr	r2, [r3, #32]
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	0a1b      	lsrs	r3, r3, #8
 800bad6:	4413      	add	r3, r2
 800bad8:	4619      	mov	r1, r3
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f7ff fe08 	bl	800b6f0 <move_window>
 800bae0:	4603      	mov	r3, r0
 800bae2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bae4:	7ffb      	ldrb	r3, [r7, #31]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d146      	bne.n	800bb78 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	005b      	lsls	r3, r3, #1
 800baf4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800baf8:	4413      	add	r3, r2
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	b292      	uxth	r2, r2
 800bafe:	4611      	mov	r1, r2
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7ff fb7f 	bl	800b204 <st_word>
			fs->wflag = 1;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2201      	movs	r2, #1
 800bb0a:	70da      	strb	r2, [r3, #3]
			break;
 800bb0c:	e037      	b.n	800bb7e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6a1a      	ldr	r2, [r3, #32]
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	09db      	lsrs	r3, r3, #7
 800bb16:	4413      	add	r3, r2
 800bb18:	4619      	mov	r1, r3
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f7ff fde8 	bl	800b6f0 <move_window>
 800bb20:	4603      	mov	r3, r0
 800bb22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bb24:	7ffb      	ldrb	r3, [r7, #31]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d128      	bne.n	800bb7c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bb3e:	4413      	add	r3, r2
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7ff fb3c 	bl	800b1be <ld_dword>
 800bb46:	4603      	mov	r3, r0
 800bb48:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800bb4c:	4323      	orrs	r3, r4
 800bb4e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800bb5e:	4413      	add	r3, r2
 800bb60:	6879      	ldr	r1, [r7, #4]
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7ff fb69 	bl	800b23a <st_dword>
			fs->wflag = 1;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	70da      	strb	r2, [r3, #3]
			break;
 800bb6e:	e006      	b.n	800bb7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb70:	bf00      	nop
 800bb72:	e004      	b.n	800bb7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb74:	bf00      	nop
 800bb76:	e002      	b.n	800bb7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb78:	bf00      	nop
 800bb7a:	e000      	b.n	800bb7e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bb7c:	bf00      	nop
		}
	}
	return res;
 800bb7e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3724      	adds	r7, #36	@ 0x24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd90      	pop	{r4, r7, pc}

0800bb88 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b088      	sub	sp, #32
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bb94:	2300      	movs	r3, #0
 800bb96:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d904      	bls.n	800bbae <remove_chain+0x26>
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	695b      	ldr	r3, [r3, #20]
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d301      	bcc.n	800bbb2 <remove_chain+0x2a>
 800bbae:	2302      	movs	r3, #2
 800bbb0:	e04b      	b.n	800bc4a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00c      	beq.n	800bbd2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bbb8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbbc:	6879      	ldr	r1, [r7, #4]
 800bbbe:	69b8      	ldr	r0, [r7, #24]
 800bbc0:	f7ff fef8 	bl	800b9b4 <put_fat>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bbc8:	7ffb      	ldrb	r3, [r7, #31]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <remove_chain+0x4a>
 800bbce:	7ffb      	ldrb	r3, [r7, #31]
 800bbd0:	e03b      	b.n	800bc4a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bbd2:	68b9      	ldr	r1, [r7, #8]
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	f7ff fe46 	bl	800b866 <get_fat>
 800bbda:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d031      	beq.n	800bc46 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d101      	bne.n	800bbec <remove_chain+0x64>
 800bbe8:	2302      	movs	r3, #2
 800bbea:	e02e      	b.n	800bc4a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf2:	d101      	bne.n	800bbf8 <remove_chain+0x70>
 800bbf4:	2301      	movs	r3, #1
 800bbf6:	e028      	b.n	800bc4a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	68b9      	ldr	r1, [r7, #8]
 800bbfc:	69b8      	ldr	r0, [r7, #24]
 800bbfe:	f7ff fed9 	bl	800b9b4 <put_fat>
 800bc02:	4603      	mov	r3, r0
 800bc04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bc06:	7ffb      	ldrb	r3, [r7, #31]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d001      	beq.n	800bc10 <remove_chain+0x88>
 800bc0c:	7ffb      	ldrb	r3, [r7, #31]
 800bc0e:	e01c      	b.n	800bc4a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bc10:	69bb      	ldr	r3, [r7, #24]
 800bc12:	691a      	ldr	r2, [r3, #16]
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	695b      	ldr	r3, [r3, #20]
 800bc18:	3b02      	subs	r3, #2
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d20b      	bcs.n	800bc36 <remove_chain+0xae>
			fs->free_clst++;
 800bc1e:	69bb      	ldr	r3, [r7, #24]
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	1c5a      	adds	r2, r3, #1
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	791b      	ldrb	r3, [r3, #4]
 800bc2c:	f043 0301 	orr.w	r3, r3, #1
 800bc30:	b2da      	uxtb	r2, r3
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d3c6      	bcc.n	800bbd2 <remove_chain+0x4a>
 800bc44:	e000      	b.n	800bc48 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bc46:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3720      	adds	r7, #32
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bc52:	b580      	push	{r7, lr}
 800bc54:	b088      	sub	sp, #32
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10d      	bne.n	800bc84 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bc6e:	69bb      	ldr	r3, [r7, #24]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d004      	beq.n	800bc7e <create_chain+0x2c>
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	695b      	ldr	r3, [r3, #20]
 800bc78:	69ba      	ldr	r2, [r7, #24]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d31b      	bcc.n	800bcb6 <create_chain+0x64>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	61bb      	str	r3, [r7, #24]
 800bc82:	e018      	b.n	800bcb6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bc84:	6839      	ldr	r1, [r7, #0]
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7ff fded 	bl	800b866 <get_fat>
 800bc8c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d801      	bhi.n	800bc98 <create_chain+0x46>
 800bc94:	2301      	movs	r3, #1
 800bc96:	e070      	b.n	800bd7a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc9e:	d101      	bne.n	800bca4 <create_chain+0x52>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	e06a      	b.n	800bd7a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	695b      	ldr	r3, [r3, #20]
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d201      	bcs.n	800bcb2 <create_chain+0x60>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	e063      	b.n	800bd7a <create_chain+0x128>
		scl = clst;
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bcba:	69fb      	ldr	r3, [r7, #28]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	695b      	ldr	r3, [r3, #20]
 800bcc4:	69fa      	ldr	r2, [r7, #28]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d307      	bcc.n	800bcda <create_chain+0x88>
				ncl = 2;
 800bcca:	2302      	movs	r3, #2
 800bccc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bcce:	69fa      	ldr	r2, [r7, #28]
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d901      	bls.n	800bcda <create_chain+0x88>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	e04f      	b.n	800bd7a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bcda:	69f9      	ldr	r1, [r7, #28]
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	f7ff fdc2 	bl	800b866 <get_fat>
 800bce2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d00e      	beq.n	800bd08 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d003      	beq.n	800bcf8 <create_chain+0xa6>
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcf6:	d101      	bne.n	800bcfc <create_chain+0xaa>
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	e03e      	b.n	800bd7a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bcfc:	69fa      	ldr	r2, [r7, #28]
 800bcfe:	69bb      	ldr	r3, [r7, #24]
 800bd00:	429a      	cmp	r2, r3
 800bd02:	d1da      	bne.n	800bcba <create_chain+0x68>
 800bd04:	2300      	movs	r3, #0
 800bd06:	e038      	b.n	800bd7a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bd08:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bd0a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd0e:	69f9      	ldr	r1, [r7, #28]
 800bd10:	6938      	ldr	r0, [r7, #16]
 800bd12:	f7ff fe4f 	bl	800b9b4 <put_fat>
 800bd16:	4603      	mov	r3, r0
 800bd18:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bd1a:	7dfb      	ldrb	r3, [r7, #23]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d109      	bne.n	800bd34 <create_chain+0xe2>
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d006      	beq.n	800bd34 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bd26:	69fa      	ldr	r2, [r7, #28]
 800bd28:	6839      	ldr	r1, [r7, #0]
 800bd2a:	6938      	ldr	r0, [r7, #16]
 800bd2c:	f7ff fe42 	bl	800b9b4 <put_fat>
 800bd30:	4603      	mov	r3, r0
 800bd32:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bd34:	7dfb      	ldrb	r3, [r7, #23]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d116      	bne.n	800bd68 <create_chain+0x116>
		fs->last_clst = ncl;
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	69fa      	ldr	r2, [r7, #28]
 800bd3e:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	691a      	ldr	r2, [r3, #16]
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	695b      	ldr	r3, [r3, #20]
 800bd48:	3b02      	subs	r3, #2
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d804      	bhi.n	800bd58 <create_chain+0x106>
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	691b      	ldr	r3, [r3, #16]
 800bd52:	1e5a      	subs	r2, r3, #1
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	791b      	ldrb	r3, [r3, #4]
 800bd5c:	f043 0301 	orr.w	r3, r3, #1
 800bd60:	b2da      	uxtb	r2, r3
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	711a      	strb	r2, [r3, #4]
 800bd66:	e007      	b.n	800bd78 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bd68:	7dfb      	ldrb	r3, [r7, #23]
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d102      	bne.n	800bd74 <create_chain+0x122>
 800bd6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd72:	e000      	b.n	800bd76 <create_chain+0x124>
 800bd74:	2301      	movs	r3, #1
 800bd76:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bd78:	69fb      	ldr	r3, [r7, #28]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3720      	adds	r7, #32
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bd82:	b480      	push	{r7}
 800bd84:	b087      	sub	sp, #28
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
 800bd8a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd96:	3304      	adds	r3, #4
 800bd98:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	0a5b      	lsrs	r3, r3, #9
 800bd9e:	68fa      	ldr	r2, [r7, #12]
 800bda0:	8952      	ldrh	r2, [r2, #10]
 800bda2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bda6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	1d1a      	adds	r2, r3, #4
 800bdac:	613a      	str	r2, [r7, #16]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d101      	bne.n	800bdbc <clmt_clust+0x3a>
 800bdb8:	2300      	movs	r3, #0
 800bdba:	e010      	b.n	800bdde <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800bdbc:	697a      	ldr	r2, [r7, #20]
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d307      	bcc.n	800bdd4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800bdc4:	697a      	ldr	r2, [r7, #20]
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	617b      	str	r3, [r7, #20]
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	3304      	adds	r3, #4
 800bdd0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bdd2:	e7e9      	b.n	800bda8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800bdd4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	4413      	add	r3, r2
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	371c      	adds	r7, #28
 800bde2:	46bd      	mov	sp, r7
 800bde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde8:	4770      	bx	lr

0800bdea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b086      	sub	sp, #24
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
 800bdf2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800be00:	d204      	bcs.n	800be0c <dir_sdi+0x22>
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	f003 031f 	and.w	r3, r3, #31
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d001      	beq.n	800be10 <dir_sdi+0x26>
		return FR_INT_ERR;
 800be0c:	2302      	movs	r3, #2
 800be0e:	e063      	b.n	800bed8 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	683a      	ldr	r2, [r7, #0]
 800be14:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	689b      	ldr	r3, [r3, #8]
 800be1a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800be1c:	697b      	ldr	r3, [r7, #20]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d106      	bne.n	800be30 <dir_sdi+0x46>
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	2b02      	cmp	r3, #2
 800be28:	d902      	bls.n	800be30 <dir_sdi+0x46>
		clst = fs->dirbase;
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be2e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10c      	bne.n	800be50 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	095b      	lsrs	r3, r3, #5
 800be3a:	693a      	ldr	r2, [r7, #16]
 800be3c:	8912      	ldrh	r2, [r2, #8]
 800be3e:	4293      	cmp	r3, r2
 800be40:	d301      	bcc.n	800be46 <dir_sdi+0x5c>
 800be42:	2302      	movs	r3, #2
 800be44:	e048      	b.n	800bed8 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	61da      	str	r2, [r3, #28]
 800be4e:	e029      	b.n	800bea4 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	895b      	ldrh	r3, [r3, #10]
 800be54:	025b      	lsls	r3, r3, #9
 800be56:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800be58:	e019      	b.n	800be8e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6979      	ldr	r1, [r7, #20]
 800be5e:	4618      	mov	r0, r3
 800be60:	f7ff fd01 	bl	800b866 <get_fat>
 800be64:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800be66:	697b      	ldr	r3, [r7, #20]
 800be68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be6c:	d101      	bne.n	800be72 <dir_sdi+0x88>
 800be6e:	2301      	movs	r3, #1
 800be70:	e032      	b.n	800bed8 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d904      	bls.n	800be82 <dir_sdi+0x98>
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	695b      	ldr	r3, [r3, #20]
 800be7c:	697a      	ldr	r2, [r7, #20]
 800be7e:	429a      	cmp	r2, r3
 800be80:	d301      	bcc.n	800be86 <dir_sdi+0x9c>
 800be82:	2302      	movs	r3, #2
 800be84:	e028      	b.n	800bed8 <dir_sdi+0xee>
			ofs -= csz;
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800be8e:	683a      	ldr	r2, [r7, #0]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	429a      	cmp	r2, r3
 800be94:	d2e1      	bcs.n	800be5a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800be96:	6979      	ldr	r1, [r7, #20]
 800be98:	6938      	ldr	r0, [r7, #16]
 800be9a:	f7ff fcc5 	bl	800b828 <clust2sect>
 800be9e:	4602      	mov	r2, r0
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	69db      	ldr	r3, [r3, #28]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d101      	bne.n	800beb6 <dir_sdi+0xcc>
 800beb2:	2302      	movs	r3, #2
 800beb4:	e010      	b.n	800bed8 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	69da      	ldr	r2, [r3, #28]
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	0a5b      	lsrs	r3, r3, #9
 800bebe:	441a      	add	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bed0:	441a      	add	r2, r3
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bed6:	2300      	movs	r3, #0
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3718      	adds	r7, #24
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b086      	sub	sp, #24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	695b      	ldr	r3, [r3, #20]
 800bef4:	3320      	adds	r3, #32
 800bef6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	69db      	ldr	r3, [r3, #28]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d003      	beq.n	800bf08 <dir_next+0x28>
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf06:	d301      	bcc.n	800bf0c <dir_next+0x2c>
 800bf08:	2304      	movs	r3, #4
 800bf0a:	e0aa      	b.n	800c062 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	f040 8098 	bne.w	800c048 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	69db      	ldr	r3, [r3, #28]
 800bf1c:	1c5a      	adds	r2, r3, #1
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	699b      	ldr	r3, [r3, #24]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10b      	bne.n	800bf42 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	095b      	lsrs	r3, r3, #5
 800bf2e:	68fa      	ldr	r2, [r7, #12]
 800bf30:	8912      	ldrh	r2, [r2, #8]
 800bf32:	4293      	cmp	r3, r2
 800bf34:	f0c0 8088 	bcc.w	800c048 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	61da      	str	r2, [r3, #28]
 800bf3e:	2304      	movs	r3, #4
 800bf40:	e08f      	b.n	800c062 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	0a5b      	lsrs	r3, r3, #9
 800bf46:	68fa      	ldr	r2, [r7, #12]
 800bf48:	8952      	ldrh	r2, [r2, #10]
 800bf4a:	3a01      	subs	r2, #1
 800bf4c:	4013      	ands	r3, r2
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d17a      	bne.n	800c048 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	699b      	ldr	r3, [r3, #24]
 800bf58:	4619      	mov	r1, r3
 800bf5a:	4610      	mov	r0, r2
 800bf5c:	f7ff fc83 	bl	800b866 <get_fat>
 800bf60:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d801      	bhi.n	800bf6c <dir_next+0x8c>
 800bf68:	2302      	movs	r3, #2
 800bf6a:	e07a      	b.n	800c062 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf72:	d101      	bne.n	800bf78 <dir_next+0x98>
 800bf74:	2301      	movs	r3, #1
 800bf76:	e074      	b.n	800c062 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	695b      	ldr	r3, [r3, #20]
 800bf7c:	697a      	ldr	r2, [r7, #20]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d358      	bcc.n	800c034 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d104      	bne.n	800bf92 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	61da      	str	r2, [r3, #28]
 800bf8e:	2304      	movs	r3, #4
 800bf90:	e067      	b.n	800c062 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	699b      	ldr	r3, [r3, #24]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	4610      	mov	r0, r2
 800bf9c:	f7ff fe59 	bl	800bc52 <create_chain>
 800bfa0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d101      	bne.n	800bfac <dir_next+0xcc>
 800bfa8:	2307      	movs	r3, #7
 800bfaa:	e05a      	b.n	800c062 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d101      	bne.n	800bfb6 <dir_next+0xd6>
 800bfb2:	2302      	movs	r3, #2
 800bfb4:	e055      	b.n	800c062 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfbc:	d101      	bne.n	800bfc2 <dir_next+0xe2>
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	e04f      	b.n	800c062 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bfc2:	68f8      	ldr	r0, [r7, #12]
 800bfc4:	f7ff fb50 	bl	800b668 <sync_window>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d001      	beq.n	800bfd2 <dir_next+0xf2>
 800bfce:	2301      	movs	r3, #1
 800bfd0:	e047      	b.n	800c062 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	3330      	adds	r3, #48	@ 0x30
 800bfd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bfda:	2100      	movs	r1, #0
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7ff f979 	bl	800b2d4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	613b      	str	r3, [r7, #16]
 800bfe6:	6979      	ldr	r1, [r7, #20]
 800bfe8:	68f8      	ldr	r0, [r7, #12]
 800bfea:	f7ff fc1d 	bl	800b828 <clust2sect>
 800bfee:	4602      	mov	r2, r0
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bff4:	e012      	b.n	800c01c <dir_next+0x13c>
						fs->wflag = 1;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	2201      	movs	r2, #1
 800bffa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bffc:	68f8      	ldr	r0, [r7, #12]
 800bffe:	f7ff fb33 	bl	800b668 <sync_window>
 800c002:	4603      	mov	r3, r0
 800c004:	2b00      	cmp	r3, #0
 800c006:	d001      	beq.n	800c00c <dir_next+0x12c>
 800c008:	2301      	movs	r3, #1
 800c00a:	e02a      	b.n	800c062 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	3301      	adds	r3, #1
 800c010:	613b      	str	r3, [r7, #16]
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c016:	1c5a      	adds	r2, r3, #1
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	895b      	ldrh	r3, [r3, #10]
 800c020:	461a      	mov	r2, r3
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	4293      	cmp	r3, r2
 800c026:	d3e6      	bcc.n	800bff6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	1ad2      	subs	r2, r2, r3
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	697a      	ldr	r2, [r7, #20]
 800c038:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c03a:	6979      	ldr	r1, [r7, #20]
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	f7ff fbf3 	bl	800b828 <clust2sect>
 800c042:	4602      	mov	r2, r0
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	68ba      	ldr	r2, [r7, #8]
 800c04c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c05a:	441a      	add	r2, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c060:	2300      	movs	r3, #0
}
 800c062:	4618      	mov	r0, r3
 800c064:	3718      	adds	r7, #24
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}

0800c06a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b086      	sub	sp, #24
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c07a:	2100      	movs	r1, #0
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f7ff feb4 	bl	800bdea <dir_sdi>
 800c082:	4603      	mov	r3, r0
 800c084:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c086:	7dfb      	ldrb	r3, [r7, #23]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d12b      	bne.n	800c0e4 <dir_alloc+0x7a>
		n = 0;
 800c08c:	2300      	movs	r3, #0
 800c08e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	69db      	ldr	r3, [r3, #28]
 800c094:	4619      	mov	r1, r3
 800c096:	68f8      	ldr	r0, [r7, #12]
 800c098:	f7ff fb2a 	bl	800b6f0 <move_window>
 800c09c:	4603      	mov	r3, r0
 800c09e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c0a0:	7dfb      	ldrb	r3, [r7, #23]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d11d      	bne.n	800c0e2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6a1b      	ldr	r3, [r3, #32]
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	2be5      	cmp	r3, #229	@ 0xe5
 800c0ae:	d004      	beq.n	800c0ba <dir_alloc+0x50>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	6a1b      	ldr	r3, [r3, #32]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d107      	bne.n	800c0ca <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	613b      	str	r3, [r7, #16]
 800c0c0:	693a      	ldr	r2, [r7, #16]
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d102      	bne.n	800c0ce <dir_alloc+0x64>
 800c0c8:	e00c      	b.n	800c0e4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c0ce:	2101      	movs	r1, #1
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f7ff ff05 	bl	800bee0 <dir_next>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c0da:	7dfb      	ldrb	r3, [r7, #23]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d0d7      	beq.n	800c090 <dir_alloc+0x26>
 800c0e0:	e000      	b.n	800c0e4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c0e2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c0e4:	7dfb      	ldrb	r3, [r7, #23]
 800c0e6:	2b04      	cmp	r3, #4
 800c0e8:	d101      	bne.n	800c0ee <dir_alloc+0x84>
 800c0ea:	2307      	movs	r3, #7
 800c0ec:	75fb      	strb	r3, [r7, #23]
	return res;
 800c0ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3718      	adds	r7, #24
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}

0800c0f8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b084      	sub	sp, #16
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
 800c100:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	331a      	adds	r3, #26
 800c106:	4618      	mov	r0, r3
 800c108:	f7ff f840 	bl	800b18c <ld_word>
 800c10c:	4603      	mov	r3, r0
 800c10e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	2b03      	cmp	r3, #3
 800c116:	d109      	bne.n	800c12c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	3314      	adds	r3, #20
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7ff f835 	bl	800b18c <ld_word>
 800c122:	4603      	mov	r3, r0
 800c124:	041b      	lsls	r3, r3, #16
 800c126:	68fa      	ldr	r2, [r7, #12]
 800c128:	4313      	orrs	r3, r2
 800c12a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c12c:	68fb      	ldr	r3, [r7, #12]
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}

0800c136 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c136:	b580      	push	{r7, lr}
 800c138:	b084      	sub	sp, #16
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	60f8      	str	r0, [r7, #12]
 800c13e:	60b9      	str	r1, [r7, #8]
 800c140:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	331a      	adds	r3, #26
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	b292      	uxth	r2, r2
 800c14a:	4611      	mov	r1, r2
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7ff f859 	bl	800b204 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	2b03      	cmp	r3, #3
 800c158:	d109      	bne.n	800c16e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	f103 0214 	add.w	r2, r3, #20
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	0c1b      	lsrs	r3, r3, #16
 800c164:	b29b      	uxth	r3, r3
 800c166:	4619      	mov	r1, r3
 800c168:	4610      	mov	r0, r2
 800c16a:	f7ff f84b 	bl	800b204 <st_word>
	}
}
 800c16e:	bf00      	nop
 800c170:	3710      	adds	r7, #16
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b086      	sub	sp, #24
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c184:	2100      	movs	r1, #0
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f7ff fe2f 	bl	800bdea <dir_sdi>
 800c18c:	4603      	mov	r3, r0
 800c18e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c190:	7dfb      	ldrb	r3, [r7, #23]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d001      	beq.n	800c19a <dir_find+0x24>
 800c196:	7dfb      	ldrb	r3, [r7, #23]
 800c198:	e03e      	b.n	800c218 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	69db      	ldr	r3, [r3, #28]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	6938      	ldr	r0, [r7, #16]
 800c1a2:	f7ff faa5 	bl	800b6f0 <move_window>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c1aa:	7dfb      	ldrb	r3, [r7, #23]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d12f      	bne.n	800c210 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6a1b      	ldr	r3, [r3, #32]
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d102      	bne.n	800c1c4 <dir_find+0x4e>
 800c1be:	2304      	movs	r3, #4
 800c1c0:	75fb      	strb	r3, [r7, #23]
 800c1c2:	e028      	b.n	800c216 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6a1b      	ldr	r3, [r3, #32]
 800c1c8:	330b      	adds	r3, #11
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6a1b      	ldr	r3, [r3, #32]
 800c1da:	330b      	adds	r3, #11
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	f003 0308 	and.w	r3, r3, #8
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10a      	bne.n	800c1fc <dir_find+0x86>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6a18      	ldr	r0, [r3, #32]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	3324      	adds	r3, #36	@ 0x24
 800c1ee:	220b      	movs	r2, #11
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	f7ff f88a 	bl	800b30a <mem_cmp>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d00b      	beq.n	800c214 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f7ff fe6e 	bl	800bee0 <dir_next>
 800c204:	4603      	mov	r3, r0
 800c206:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c208:	7dfb      	ldrb	r3, [r7, #23]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d0c5      	beq.n	800c19a <dir_find+0x24>
 800c20e:	e002      	b.n	800c216 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c210:	bf00      	nop
 800c212:	e000      	b.n	800c216 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c214:	bf00      	nop

	return res;
 800c216:	7dfb      	ldrb	r3, [r7, #23]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3718      	adds	r7, #24
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c22e:	2101      	movs	r1, #1
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f7ff ff1a 	bl	800c06a <dir_alloc>
 800c236:	4603      	mov	r3, r0
 800c238:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c23a:	7bfb      	ldrb	r3, [r7, #15]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d11c      	bne.n	800c27a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	69db      	ldr	r3, [r3, #28]
 800c244:	4619      	mov	r1, r3
 800c246:	68b8      	ldr	r0, [r7, #8]
 800c248:	f7ff fa52 	bl	800b6f0 <move_window>
 800c24c:	4603      	mov	r3, r0
 800c24e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c250:	7bfb      	ldrb	r3, [r7, #15]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d111      	bne.n	800c27a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a1b      	ldr	r3, [r3, #32]
 800c25a:	2220      	movs	r2, #32
 800c25c:	2100      	movs	r1, #0
 800c25e:	4618      	mov	r0, r3
 800c260:	f7ff f838 	bl	800b2d4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6a18      	ldr	r0, [r3, #32]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	3324      	adds	r3, #36	@ 0x24
 800c26c:	220b      	movs	r2, #11
 800c26e:	4619      	mov	r1, r3
 800c270:	f7ff f80f 	bl	800b292 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	2201      	movs	r2, #1
 800c278:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b088      	sub	sp, #32
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	60fb      	str	r3, [r7, #12]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	3324      	adds	r3, #36	@ 0x24
 800c298:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c29a:	220b      	movs	r2, #11
 800c29c:	2120      	movs	r1, #32
 800c29e:	68b8      	ldr	r0, [r7, #8]
 800c2a0:	f7ff f818 	bl	800b2d4 <mem_set>
	si = i = 0; ni = 8;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	613b      	str	r3, [r7, #16]
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	61fb      	str	r3, [r7, #28]
 800c2ac:	2308      	movs	r3, #8
 800c2ae:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	1c5a      	adds	r2, r3, #1
 800c2b4:	61fa      	str	r2, [r7, #28]
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c2be:	7efb      	ldrb	r3, [r7, #27]
 800c2c0:	2b20      	cmp	r3, #32
 800c2c2:	d94e      	bls.n	800c362 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c2c4:	7efb      	ldrb	r3, [r7, #27]
 800c2c6:	2b2f      	cmp	r3, #47	@ 0x2f
 800c2c8:	d006      	beq.n	800c2d8 <create_name+0x54>
 800c2ca:	7efb      	ldrb	r3, [r7, #27]
 800c2cc:	2b5c      	cmp	r3, #92	@ 0x5c
 800c2ce:	d110      	bne.n	800c2f2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c2d0:	e002      	b.n	800c2d8 <create_name+0x54>
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	61fb      	str	r3, [r7, #28]
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	69fb      	ldr	r3, [r7, #28]
 800c2dc:	4413      	add	r3, r2
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	2b2f      	cmp	r3, #47	@ 0x2f
 800c2e2:	d0f6      	beq.n	800c2d2 <create_name+0x4e>
 800c2e4:	68fa      	ldr	r2, [r7, #12]
 800c2e6:	69fb      	ldr	r3, [r7, #28]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	2b5c      	cmp	r3, #92	@ 0x5c
 800c2ee:	d0f0      	beq.n	800c2d2 <create_name+0x4e>
			break;
 800c2f0:	e038      	b.n	800c364 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c2f2:	7efb      	ldrb	r3, [r7, #27]
 800c2f4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c2f6:	d003      	beq.n	800c300 <create_name+0x7c>
 800c2f8:	693a      	ldr	r2, [r7, #16]
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	d30c      	bcc.n	800c31a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	2b0b      	cmp	r3, #11
 800c304:	d002      	beq.n	800c30c <create_name+0x88>
 800c306:	7efb      	ldrb	r3, [r7, #27]
 800c308:	2b2e      	cmp	r3, #46	@ 0x2e
 800c30a:	d001      	beq.n	800c310 <create_name+0x8c>
 800c30c:	2306      	movs	r3, #6
 800c30e:	e044      	b.n	800c39a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c310:	2308      	movs	r3, #8
 800c312:	613b      	str	r3, [r7, #16]
 800c314:	230b      	movs	r3, #11
 800c316:	617b      	str	r3, [r7, #20]
			continue;
 800c318:	e022      	b.n	800c360 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c31a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	da04      	bge.n	800c32c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c322:	7efb      	ldrb	r3, [r7, #27]
 800c324:	3b80      	subs	r3, #128	@ 0x80
 800c326:	4a1f      	ldr	r2, [pc, #124]	@ (800c3a4 <create_name+0x120>)
 800c328:	5cd3      	ldrb	r3, [r2, r3]
 800c32a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c32c:	7efb      	ldrb	r3, [r7, #27]
 800c32e:	4619      	mov	r1, r3
 800c330:	481d      	ldr	r0, [pc, #116]	@ (800c3a8 <create_name+0x124>)
 800c332:	f7ff f811 	bl	800b358 <chk_chr>
 800c336:	4603      	mov	r3, r0
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d001      	beq.n	800c340 <create_name+0xbc>
 800c33c:	2306      	movs	r3, #6
 800c33e:	e02c      	b.n	800c39a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c340:	7efb      	ldrb	r3, [r7, #27]
 800c342:	2b60      	cmp	r3, #96	@ 0x60
 800c344:	d905      	bls.n	800c352 <create_name+0xce>
 800c346:	7efb      	ldrb	r3, [r7, #27]
 800c348:	2b7a      	cmp	r3, #122	@ 0x7a
 800c34a:	d802      	bhi.n	800c352 <create_name+0xce>
 800c34c:	7efb      	ldrb	r3, [r7, #27]
 800c34e:	3b20      	subs	r3, #32
 800c350:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	1c5a      	adds	r2, r3, #1
 800c356:	613a      	str	r2, [r7, #16]
 800c358:	68ba      	ldr	r2, [r7, #8]
 800c35a:	4413      	add	r3, r2
 800c35c:	7efa      	ldrb	r2, [r7, #27]
 800c35e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c360:	e7a6      	b.n	800c2b0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c362:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c364:	68fa      	ldr	r2, [r7, #12]
 800c366:	69fb      	ldr	r3, [r7, #28]
 800c368:	441a      	add	r2, r3
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d101      	bne.n	800c378 <create_name+0xf4>
 800c374:	2306      	movs	r3, #6
 800c376:	e010      	b.n	800c39a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	2be5      	cmp	r3, #229	@ 0xe5
 800c37e:	d102      	bne.n	800c386 <create_name+0x102>
 800c380:	68bb      	ldr	r3, [r7, #8]
 800c382:	2205      	movs	r2, #5
 800c384:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c386:	7efb      	ldrb	r3, [r7, #27]
 800c388:	2b20      	cmp	r3, #32
 800c38a:	d801      	bhi.n	800c390 <create_name+0x10c>
 800c38c:	2204      	movs	r2, #4
 800c38e:	e000      	b.n	800c392 <create_name+0x10e>
 800c390:	2200      	movs	r2, #0
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	330b      	adds	r3, #11
 800c396:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c398:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3720      	adds	r7, #32
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	0800e04c 	.word	0x0800e04c
 800c3a8:	0800de00 	.word	0x0800de00

0800c3ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b086      	sub	sp, #24
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c3c0:	e002      	b.n	800c3c8 <follow_path+0x1c>
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	603b      	str	r3, [r7, #0]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	2b2f      	cmp	r3, #47	@ 0x2f
 800c3ce:	d0f8      	beq.n	800c3c2 <follow_path+0x16>
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	2b5c      	cmp	r3, #92	@ 0x5c
 800c3d6:	d0f4      	beq.n	800c3c2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	2b1f      	cmp	r3, #31
 800c3e4:	d80a      	bhi.n	800c3fc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2280      	movs	r2, #128	@ 0x80
 800c3ea:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	6878      	ldr	r0, [r7, #4]
 800c3f2:	f7ff fcfa 	bl	800bdea <dir_sdi>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	75fb      	strb	r3, [r7, #23]
 800c3fa:	e043      	b.n	800c484 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c3fc:	463b      	mov	r3, r7
 800c3fe:	4619      	mov	r1, r3
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f7ff ff3f 	bl	800c284 <create_name>
 800c406:	4603      	mov	r3, r0
 800c408:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c40a:	7dfb      	ldrb	r3, [r7, #23]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d134      	bne.n	800c47a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f7ff feb0 	bl	800c176 <dir_find>
 800c416:	4603      	mov	r3, r0
 800c418:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800c420:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c422:	7dfb      	ldrb	r3, [r7, #23]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d00a      	beq.n	800c43e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c428:	7dfb      	ldrb	r3, [r7, #23]
 800c42a:	2b04      	cmp	r3, #4
 800c42c:	d127      	bne.n	800c47e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c42e:	7afb      	ldrb	r3, [r7, #11]
 800c430:	f003 0304 	and.w	r3, r3, #4
 800c434:	2b00      	cmp	r3, #0
 800c436:	d122      	bne.n	800c47e <follow_path+0xd2>
 800c438:	2305      	movs	r3, #5
 800c43a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c43c:	e01f      	b.n	800c47e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c43e:	7afb      	ldrb	r3, [r7, #11]
 800c440:	f003 0304 	and.w	r3, r3, #4
 800c444:	2b00      	cmp	r3, #0
 800c446:	d11c      	bne.n	800c482 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	799b      	ldrb	r3, [r3, #6]
 800c44c:	f003 0310 	and.w	r3, r3, #16
 800c450:	2b00      	cmp	r3, #0
 800c452:	d102      	bne.n	800c45a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c454:	2305      	movs	r3, #5
 800c456:	75fb      	strb	r3, [r7, #23]
 800c458:	e014      	b.n	800c484 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	695b      	ldr	r3, [r3, #20]
 800c464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c468:	4413      	add	r3, r2
 800c46a:	4619      	mov	r1, r3
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f7ff fe43 	bl	800c0f8 <ld_clust>
 800c472:	4602      	mov	r2, r0
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c478:	e7c0      	b.n	800c3fc <follow_path+0x50>
			if (res != FR_OK) break;
 800c47a:	bf00      	nop
 800c47c:	e002      	b.n	800c484 <follow_path+0xd8>
				break;
 800c47e:	bf00      	nop
 800c480:	e000      	b.n	800c484 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c482:	bf00      	nop
			}
		}
	}

	return res;
 800c484:	7dfb      	ldrb	r3, [r7, #23]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3718      	adds	r7, #24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c48e:	b480      	push	{r7}
 800c490:	b087      	sub	sp, #28
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c496:	f04f 33ff 	mov.w	r3, #4294967295
 800c49a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d031      	beq.n	800c508 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	617b      	str	r3, [r7, #20]
 800c4aa:	e002      	b.n	800c4b2 <get_ldnumber+0x24>
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	3301      	adds	r3, #1
 800c4b0:	617b      	str	r3, [r7, #20]
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	2b20      	cmp	r3, #32
 800c4b8:	d903      	bls.n	800c4c2 <get_ldnumber+0x34>
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	2b3a      	cmp	r3, #58	@ 0x3a
 800c4c0:	d1f4      	bne.n	800c4ac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	2b3a      	cmp	r3, #58	@ 0x3a
 800c4c8:	d11c      	bne.n	800c504 <get_ldnumber+0x76>
			tp = *path;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	1c5a      	adds	r2, r3, #1
 800c4d4:	60fa      	str	r2, [r7, #12]
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	3b30      	subs	r3, #48	@ 0x30
 800c4da:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	2b09      	cmp	r3, #9
 800c4e0:	d80e      	bhi.n	800c500 <get_ldnumber+0x72>
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d10a      	bne.n	800c500 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d107      	bne.n	800c500 <get_ldnumber+0x72>
					vol = (int)i;
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	617b      	str	r3, [r7, #20]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	697a      	ldr	r2, [r7, #20]
 800c4fe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	e002      	b.n	800c50a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c504:	2300      	movs	r3, #0
 800c506:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c508:	693b      	ldr	r3, [r7, #16]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	371c      	adds	r7, #28
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr
	...

0800c518 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	70da      	strb	r2, [r3, #3]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	f04f 32ff 	mov.w	r2, #4294967295
 800c52e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c530:	6839      	ldr	r1, [r7, #0]
 800c532:	6878      	ldr	r0, [r7, #4]
 800c534:	f7ff f8dc 	bl	800b6f0 <move_window>
 800c538:	4603      	mov	r3, r0
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d001      	beq.n	800c542 <check_fs+0x2a>
 800c53e:	2304      	movs	r3, #4
 800c540:	e038      	b.n	800c5b4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	3330      	adds	r3, #48	@ 0x30
 800c546:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7fe fe1e 	bl	800b18c <ld_word>
 800c550:	4603      	mov	r3, r0
 800c552:	461a      	mov	r2, r3
 800c554:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c558:	429a      	cmp	r2, r3
 800c55a:	d001      	beq.n	800c560 <check_fs+0x48>
 800c55c:	2303      	movs	r3, #3
 800c55e:	e029      	b.n	800c5b4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c566:	2be9      	cmp	r3, #233	@ 0xe9
 800c568:	d009      	beq.n	800c57e <check_fs+0x66>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c570:	2beb      	cmp	r3, #235	@ 0xeb
 800c572:	d11e      	bne.n	800c5b2 <check_fs+0x9a>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800c57a:	2b90      	cmp	r3, #144	@ 0x90
 800c57c:	d119      	bne.n	800c5b2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	3330      	adds	r3, #48	@ 0x30
 800c582:	3336      	adds	r3, #54	@ 0x36
 800c584:	4618      	mov	r0, r3
 800c586:	f7fe fe1a 	bl	800b1be <ld_dword>
 800c58a:	4603      	mov	r3, r0
 800c58c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c590:	4a0a      	ldr	r2, [pc, #40]	@ (800c5bc <check_fs+0xa4>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d101      	bne.n	800c59a <check_fs+0x82>
 800c596:	2300      	movs	r3, #0
 800c598:	e00c      	b.n	800c5b4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	3330      	adds	r3, #48	@ 0x30
 800c59e:	3352      	adds	r3, #82	@ 0x52
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7fe fe0c 	bl	800b1be <ld_dword>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	4a05      	ldr	r2, [pc, #20]	@ (800c5c0 <check_fs+0xa8>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d101      	bne.n	800c5b2 <check_fs+0x9a>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	e000      	b.n	800c5b4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c5b2:	2302      	movs	r3, #2
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}
 800c5bc:	00544146 	.word	0x00544146
 800c5c0:	33544146 	.word	0x33544146

0800c5c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b096      	sub	sp, #88	@ 0x58
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f7ff ff58 	bl	800c48e <get_ldnumber>
 800c5de:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c5e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	da01      	bge.n	800c5ea <find_volume+0x26>
 800c5e6:	230b      	movs	r3, #11
 800c5e8:	e22d      	b.n	800ca46 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c5ea:	4aa1      	ldr	r2, [pc, #644]	@ (800c870 <find_volume+0x2ac>)
 800c5ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c5f2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d101      	bne.n	800c5fe <find_volume+0x3a>
 800c5fa:	230c      	movs	r3, #12
 800c5fc:	e223      	b.n	800ca46 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c602:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c604:	79fb      	ldrb	r3, [r7, #7]
 800c606:	f023 0301 	bic.w	r3, r3, #1
 800c60a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d01a      	beq.n	800c64a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c616:	785b      	ldrb	r3, [r3, #1]
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fe fd17 	bl	800b04c <disk_status>
 800c61e:	4603      	mov	r3, r0
 800c620:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c624:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c628:	f003 0301 	and.w	r3, r3, #1
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10c      	bne.n	800c64a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c630:	79fb      	ldrb	r3, [r7, #7]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d007      	beq.n	800c646 <find_volume+0x82>
 800c636:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c63a:	f003 0304 	and.w	r3, r3, #4
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d001      	beq.n	800c646 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c642:	230a      	movs	r3, #10
 800c644:	e1ff      	b.n	800ca46 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c646:	2300      	movs	r3, #0
 800c648:	e1fd      	b.n	800ca46 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c64a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c64c:	2200      	movs	r2, #0
 800c64e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c652:	b2da      	uxtb	r2, r3
 800c654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c656:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c65a:	785b      	ldrb	r3, [r3, #1]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7fe fd0f 	bl	800b080 <disk_initialize>
 800c662:	4603      	mov	r3, r0
 800c664:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c668:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c66c:	f003 0301 	and.w	r3, r3, #1
 800c670:	2b00      	cmp	r3, #0
 800c672:	d001      	beq.n	800c678 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c674:	2303      	movs	r3, #3
 800c676:	e1e6      	b.n	800ca46 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c678:	79fb      	ldrb	r3, [r7, #7]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d007      	beq.n	800c68e <find_volume+0xca>
 800c67e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c682:	f003 0304 	and.w	r3, r3, #4
 800c686:	2b00      	cmp	r3, #0
 800c688:	d001      	beq.n	800c68e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c68a:	230a      	movs	r3, #10
 800c68c:	e1db      	b.n	800ca46 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c68e:	2300      	movs	r3, #0
 800c690:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c692:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c694:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c696:	f7ff ff3f 	bl	800c518 <check_fs>
 800c69a:	4603      	mov	r3, r0
 800c69c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c6a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c6a4:	2b02      	cmp	r3, #2
 800c6a6:	d149      	bne.n	800c73c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6ac:	e01e      	b.n	800c6ec <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6b0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c6b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6b6:	011b      	lsls	r3, r3, #4
 800c6b8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800c6bc:	4413      	add	r3, r2
 800c6be:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c2:	3304      	adds	r3, #4
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d006      	beq.n	800c6d8 <find_volume+0x114>
 800c6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6cc:	3308      	adds	r3, #8
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7fe fd75 	bl	800b1be <ld_dword>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	e000      	b.n	800c6da <find_volume+0x116>
 800c6d8:	2200      	movs	r2, #0
 800c6da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6dc:	009b      	lsls	r3, r3, #2
 800c6de:	3358      	adds	r3, #88	@ 0x58
 800c6e0:	443b      	add	r3, r7
 800c6e2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c6e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6ee:	2b03      	cmp	r3, #3
 800c6f0:	d9dd      	bls.n	800c6ae <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800c6f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d002      	beq.n	800c702 <find_volume+0x13e>
 800c6fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6fe:	3b01      	subs	r3, #1
 800c700:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c704:	009b      	lsls	r3, r3, #2
 800c706:	3358      	adds	r3, #88	@ 0x58
 800c708:	443b      	add	r3, r7
 800c70a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c70e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c712:	2b00      	cmp	r3, #0
 800c714:	d005      	beq.n	800c722 <find_volume+0x15e>
 800c716:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c718:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c71a:	f7ff fefd 	bl	800c518 <check_fs>
 800c71e:	4603      	mov	r3, r0
 800c720:	e000      	b.n	800c724 <find_volume+0x160>
 800c722:	2303      	movs	r3, #3
 800c724:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c728:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d905      	bls.n	800c73c <find_volume+0x178>
 800c730:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c732:	3301      	adds	r3, #1
 800c734:	643b      	str	r3, [r7, #64]	@ 0x40
 800c736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c738:	2b03      	cmp	r3, #3
 800c73a:	d9e2      	bls.n	800c702 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c73c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c740:	2b04      	cmp	r3, #4
 800c742:	d101      	bne.n	800c748 <find_volume+0x184>
 800c744:	2301      	movs	r3, #1
 800c746:	e17e      	b.n	800ca46 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c748:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d901      	bls.n	800c754 <find_volume+0x190>
 800c750:	230d      	movs	r3, #13
 800c752:	e178      	b.n	800ca46 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c756:	3330      	adds	r3, #48	@ 0x30
 800c758:	330b      	adds	r3, #11
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7fe fd16 	bl	800b18c <ld_word>
 800c760:	4603      	mov	r3, r0
 800c762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c766:	d001      	beq.n	800c76c <find_volume+0x1a8>
 800c768:	230d      	movs	r3, #13
 800c76a:	e16c      	b.n	800ca46 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76e:	3330      	adds	r3, #48	@ 0x30
 800c770:	3316      	adds	r3, #22
 800c772:	4618      	mov	r0, r3
 800c774:	f7fe fd0a 	bl	800b18c <ld_word>
 800c778:	4603      	mov	r3, r0
 800c77a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c77c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d106      	bne.n	800c790 <find_volume+0x1cc>
 800c782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c784:	3330      	adds	r3, #48	@ 0x30
 800c786:	3324      	adds	r3, #36	@ 0x24
 800c788:	4618      	mov	r0, r3
 800c78a:	f7fe fd18 	bl	800b1be <ld_dword>
 800c78e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800c790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c792:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c794:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c798:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a2:	789b      	ldrb	r3, [r3, #2]
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d005      	beq.n	800c7b4 <find_volume+0x1f0>
 800c7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7aa:	789b      	ldrb	r3, [r3, #2]
 800c7ac:	2b02      	cmp	r3, #2
 800c7ae:	d001      	beq.n	800c7b4 <find_volume+0x1f0>
 800c7b0:	230d      	movs	r3, #13
 800c7b2:	e148      	b.n	800ca46 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7b6:	789b      	ldrb	r3, [r3, #2]
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7bc:	fb02 f303 	mul.w	r3, r2, r3
 800c7c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d0:	895b      	ldrh	r3, [r3, #10]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d008      	beq.n	800c7e8 <find_volume+0x224>
 800c7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d8:	895b      	ldrh	r3, [r3, #10]
 800c7da:	461a      	mov	r2, r3
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7de:	895b      	ldrh	r3, [r3, #10]
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	4013      	ands	r3, r2
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d001      	beq.n	800c7ec <find_volume+0x228>
 800c7e8:	230d      	movs	r3, #13
 800c7ea:	e12c      	b.n	800ca46 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ee:	3330      	adds	r3, #48	@ 0x30
 800c7f0:	3311      	adds	r3, #17
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7fe fcca 	bl	800b18c <ld_word>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c802:	891b      	ldrh	r3, [r3, #8]
 800c804:	f003 030f 	and.w	r3, r3, #15
 800c808:	b29b      	uxth	r3, r3
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d001      	beq.n	800c812 <find_volume+0x24e>
 800c80e:	230d      	movs	r3, #13
 800c810:	e119      	b.n	800ca46 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c814:	3330      	adds	r3, #48	@ 0x30
 800c816:	3313      	adds	r3, #19
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fe fcb7 	bl	800b18c <ld_word>
 800c81e:	4603      	mov	r3, r0
 800c820:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c824:	2b00      	cmp	r3, #0
 800c826:	d106      	bne.n	800c836 <find_volume+0x272>
 800c828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c82a:	3330      	adds	r3, #48	@ 0x30
 800c82c:	3320      	adds	r3, #32
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fe fcc5 	bl	800b1be <ld_dword>
 800c834:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c838:	3330      	adds	r3, #48	@ 0x30
 800c83a:	330e      	adds	r3, #14
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7fe fca5 	bl	800b18c <ld_word>
 800c842:	4603      	mov	r3, r0
 800c844:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c846:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d101      	bne.n	800c850 <find_volume+0x28c>
 800c84c:	230d      	movs	r3, #13
 800c84e:	e0fa      	b.n	800ca46 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c850:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c854:	4413      	add	r3, r2
 800c856:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c858:	8912      	ldrh	r2, [r2, #8]
 800c85a:	0912      	lsrs	r2, r2, #4
 800c85c:	b292      	uxth	r2, r2
 800c85e:	4413      	add	r3, r2
 800c860:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c862:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c866:	429a      	cmp	r2, r3
 800c868:	d204      	bcs.n	800c874 <find_volume+0x2b0>
 800c86a:	230d      	movs	r3, #13
 800c86c:	e0eb      	b.n	800ca46 <find_volume+0x482>
 800c86e:	bf00      	nop
 800c870:	200002fc 	.word	0x200002fc
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c874:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c87c:	8952      	ldrh	r2, [r2, #10]
 800c87e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c882:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c886:	2b00      	cmp	r3, #0
 800c888:	d101      	bne.n	800c88e <find_volume+0x2ca>
 800c88a:	230d      	movs	r3, #13
 800c88c:	e0db      	b.n	800ca46 <find_volume+0x482>
		fmt = FS_FAT32;
 800c88e:	2303      	movs	r3, #3
 800c890:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c896:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d802      	bhi.n	800c8a4 <find_volume+0x2e0>
 800c89e:	2302      	movs	r3, #2
 800c8a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	d802      	bhi.n	800c8b4 <find_volume+0x2f0>
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b6:	1c9a      	adds	r2, r3, #2
 800c8b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ba:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c8c0:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c8c2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c8c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8c6:	441a      	add	r2, r3
 800c8c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8ca:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c8cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d0:	441a      	add	r2, r3
 800c8d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8d4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800c8d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c8da:	2b03      	cmp	r3, #3
 800c8dc:	d11e      	bne.n	800c91c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8e0:	3330      	adds	r3, #48	@ 0x30
 800c8e2:	332a      	adds	r3, #42	@ 0x2a
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7fe fc51 	bl	800b18c <ld_word>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d001      	beq.n	800c8f4 <find_volume+0x330>
 800c8f0:	230d      	movs	r3, #13
 800c8f2:	e0a8      	b.n	800ca46 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8f6:	891b      	ldrh	r3, [r3, #8]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d001      	beq.n	800c900 <find_volume+0x33c>
 800c8fc:	230d      	movs	r3, #13
 800c8fe:	e0a2      	b.n	800ca46 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c902:	3330      	adds	r3, #48	@ 0x30
 800c904:	332c      	adds	r3, #44	@ 0x2c
 800c906:	4618      	mov	r0, r3
 800c908:	f7fe fc59 	bl	800b1be <ld_dword>
 800c90c:	4602      	mov	r2, r0
 800c90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c910:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c914:	695b      	ldr	r3, [r3, #20]
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	647b      	str	r3, [r7, #68]	@ 0x44
 800c91a:	e01f      	b.n	800c95c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91e:	891b      	ldrh	r3, [r3, #8]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d101      	bne.n	800c928 <find_volume+0x364>
 800c924:	230d      	movs	r3, #13
 800c926:	e08e      	b.n	800ca46 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c92a:	6a1a      	ldr	r2, [r3, #32]
 800c92c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c92e:	441a      	add	r2, r3
 800c930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c932:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c934:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c938:	2b02      	cmp	r3, #2
 800c93a:	d103      	bne.n	800c944 <find_volume+0x380>
 800c93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c93e:	695b      	ldr	r3, [r3, #20]
 800c940:	005b      	lsls	r3, r3, #1
 800c942:	e00a      	b.n	800c95a <find_volume+0x396>
 800c944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c946:	695a      	ldr	r2, [r3, #20]
 800c948:	4613      	mov	r3, r2
 800c94a:	005b      	lsls	r3, r3, #1
 800c94c:	4413      	add	r3, r2
 800c94e:	085a      	lsrs	r2, r3, #1
 800c950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c952:	695b      	ldr	r3, [r3, #20]
 800c954:	f003 0301 	and.w	r3, r3, #1
 800c958:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c95a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c95e:	699a      	ldr	r2, [r3, #24]
 800c960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c962:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800c966:	0a5b      	lsrs	r3, r3, #9
 800c968:	429a      	cmp	r2, r3
 800c96a:	d201      	bcs.n	800c970 <find_volume+0x3ac>
 800c96c:	230d      	movs	r3, #13
 800c96e:	e06a      	b.n	800ca46 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c972:	f04f 32ff 	mov.w	r2, #4294967295
 800c976:	611a      	str	r2, [r3, #16]
 800c978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c97a:	691a      	ldr	r2, [r3, #16]
 800c97c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c97e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c982:	2280      	movs	r2, #128	@ 0x80
 800c984:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c986:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800c98a:	2b03      	cmp	r3, #3
 800c98c:	d149      	bne.n	800ca22 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c98e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c990:	3330      	adds	r3, #48	@ 0x30
 800c992:	3330      	adds	r3, #48	@ 0x30
 800c994:	4618      	mov	r0, r3
 800c996:	f7fe fbf9 	bl	800b18c <ld_word>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d140      	bne.n	800ca22 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c9a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c9a8:	f7fe fea2 	bl	800b6f0 <move_window>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d137      	bne.n	800ca22 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c9b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9ba:	3330      	adds	r3, #48	@ 0x30
 800c9bc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fe fbe3 	bl	800b18c <ld_word>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	461a      	mov	r2, r3
 800c9ca:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d127      	bne.n	800ca22 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d4:	3330      	adds	r3, #48	@ 0x30
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fe fbf1 	bl	800b1be <ld_dword>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	4a1c      	ldr	r2, [pc, #112]	@ (800ca50 <find_volume+0x48c>)
 800c9e0:	4293      	cmp	r3, r2
 800c9e2:	d11e      	bne.n	800ca22 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c9e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9e6:	3330      	adds	r3, #48	@ 0x30
 800c9e8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fe fbe6 	bl	800b1be <ld_dword>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	4a17      	ldr	r2, [pc, #92]	@ (800ca54 <find_volume+0x490>)
 800c9f6:	4293      	cmp	r3, r2
 800c9f8:	d113      	bne.n	800ca22 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c9fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9fc:	3330      	adds	r3, #48	@ 0x30
 800c9fe:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fe fbdb 	bl	800b1be <ld_dword>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca0c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ca0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca10:	3330      	adds	r3, #48	@ 0x30
 800ca12:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7fe fbd1 	bl	800b1be <ld_dword>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca20:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ca22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca24:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ca28:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ca2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ca58 <find_volume+0x494>)
 800ca2c:	881b      	ldrh	r3, [r3, #0]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	4b09      	ldr	r3, [pc, #36]	@ (800ca58 <find_volume+0x494>)
 800ca34:	801a      	strh	r2, [r3, #0]
 800ca36:	4b08      	ldr	r3, [pc, #32]	@ (800ca58 <find_volume+0x494>)
 800ca38:	881a      	ldrh	r2, [r3, #0]
 800ca3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca3c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ca3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ca40:	f7fe fdee 	bl	800b620 <clear_lock>
#endif
	return FR_OK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3758      	adds	r7, #88	@ 0x58
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	41615252 	.word	0x41615252
 800ca54:	61417272 	.word	0x61417272
 800ca58:	20000300 	.word	0x20000300

0800ca5c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ca66:	2309      	movs	r3, #9
 800ca68:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d01c      	beq.n	800caaa <validate+0x4e>
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d018      	beq.n	800caaa <validate+0x4e>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d013      	beq.n	800caaa <validate+0x4e>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	889a      	ldrh	r2, [r3, #4]
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	88db      	ldrh	r3, [r3, #6]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d10c      	bne.n	800caaa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	785b      	ldrb	r3, [r3, #1]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7fe fad8 	bl	800b04c <disk_status>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	f003 0301 	and.w	r3, r3, #1
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d101      	bne.n	800caaa <validate+0x4e>
			res = FR_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800caaa:	7bfb      	ldrb	r3, [r7, #15]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d102      	bne.n	800cab6 <validate+0x5a>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	e000      	b.n	800cab8 <validate+0x5c>
 800cab6:	2300      	movs	r3, #0
 800cab8:	683a      	ldr	r2, [r7, #0]
 800caba:	6013      	str	r3, [r2, #0]
	return res;
 800cabc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
	...

0800cac8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b088      	sub	sp, #32
 800cacc:	af00      	add	r7, sp, #0
 800cace:	60f8      	str	r0, [r7, #12]
 800cad0:	60b9      	str	r1, [r7, #8]
 800cad2:	4613      	mov	r3, r2
 800cad4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cada:	f107 0310 	add.w	r3, r7, #16
 800cade:	4618      	mov	r0, r3
 800cae0:	f7ff fcd5 	bl	800c48e <get_ldnumber>
 800cae4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	da01      	bge.n	800caf0 <f_mount+0x28>
 800caec:	230b      	movs	r3, #11
 800caee:	e02b      	b.n	800cb48 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800caf0:	4a17      	ldr	r2, [pc, #92]	@ (800cb50 <f_mount+0x88>)
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caf8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cafa:	69bb      	ldr	r3, [r7, #24]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d005      	beq.n	800cb0c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cb00:	69b8      	ldr	r0, [r7, #24]
 800cb02:	f7fe fd8d 	bl	800b620 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cb06:	69bb      	ldr	r3, [r7, #24]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d002      	beq.n	800cb18 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2200      	movs	r2, #0
 800cb16:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	490d      	ldr	r1, [pc, #52]	@ (800cb50 <f_mount+0x88>)
 800cb1c:	69fb      	ldr	r3, [r7, #28]
 800cb1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d002      	beq.n	800cb2e <f_mount+0x66>
 800cb28:	79fb      	ldrb	r3, [r7, #7]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d001      	beq.n	800cb32 <f_mount+0x6a>
 800cb2e:	2300      	movs	r3, #0
 800cb30:	e00a      	b.n	800cb48 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cb32:	f107 010c 	add.w	r1, r7, #12
 800cb36:	f107 0308 	add.w	r3, r7, #8
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f7ff fd41 	bl	800c5c4 <find_volume>
 800cb42:	4603      	mov	r3, r0
 800cb44:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cb46:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3720      	adds	r7, #32
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	200002fc 	.word	0x200002fc

0800cb54 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b098      	sub	sp, #96	@ 0x60
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	60f8      	str	r0, [r7, #12]
 800cb5c:	60b9      	str	r1, [r7, #8]
 800cb5e:	4613      	mov	r3, r2
 800cb60:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d101      	bne.n	800cb6c <f_open+0x18>
 800cb68:	2309      	movs	r3, #9
 800cb6a:	e1a9      	b.n	800cec0 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cb6c:	79fb      	ldrb	r3, [r7, #7]
 800cb6e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800cb72:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cb74:	79fa      	ldrb	r2, [r7, #7]
 800cb76:	f107 0110 	add.w	r1, r7, #16
 800cb7a:	f107 0308 	add.w	r3, r7, #8
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7ff fd20 	bl	800c5c4 <find_volume>
 800cb84:	4603      	mov	r3, r0
 800cb86:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800cb8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	f040 818d 	bne.w	800ceae <f_open+0x35a>
		dj.obj.fs = fs;
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cb98:	68ba      	ldr	r2, [r7, #8]
 800cb9a:	f107 0314 	add.w	r3, r7, #20
 800cb9e:	4611      	mov	r1, r2
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7ff fc03 	bl	800c3ac <follow_path>
 800cba6:	4603      	mov	r3, r0
 800cba8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cbac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d118      	bne.n	800cbe6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cbb4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cbb8:	b25b      	sxtb	r3, r3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	da03      	bge.n	800cbc6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800cbbe:	2306      	movs	r3, #6
 800cbc0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cbc4:	e00f      	b.n	800cbe6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cbc6:	79fb      	ldrb	r3, [r7, #7]
 800cbc8:	2b01      	cmp	r3, #1
 800cbca:	bf8c      	ite	hi
 800cbcc:	2301      	movhi	r3, #1
 800cbce:	2300      	movls	r3, #0
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	f107 0314 	add.w	r3, r7, #20
 800cbd8:	4611      	mov	r1, r2
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fe fbd8 	bl	800b390 <chk_lock>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cbe6:	79fb      	ldrb	r3, [r7, #7]
 800cbe8:	f003 031c 	and.w	r3, r3, #28
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d07f      	beq.n	800ccf0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800cbf0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d017      	beq.n	800cc28 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cbf8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cbfc:	2b04      	cmp	r3, #4
 800cbfe:	d10e      	bne.n	800cc1e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cc00:	f7fe fc22 	bl	800b448 <enq_lock>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d006      	beq.n	800cc18 <f_open+0xc4>
 800cc0a:	f107 0314 	add.w	r3, r7, #20
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7ff fb06 	bl	800c220 <dir_register>
 800cc14:	4603      	mov	r3, r0
 800cc16:	e000      	b.n	800cc1a <f_open+0xc6>
 800cc18:	2312      	movs	r3, #18
 800cc1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cc1e:	79fb      	ldrb	r3, [r7, #7]
 800cc20:	f043 0308 	orr.w	r3, r3, #8
 800cc24:	71fb      	strb	r3, [r7, #7]
 800cc26:	e010      	b.n	800cc4a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cc28:	7ebb      	ldrb	r3, [r7, #26]
 800cc2a:	f003 0311 	and.w	r3, r3, #17
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d003      	beq.n	800cc3a <f_open+0xe6>
					res = FR_DENIED;
 800cc32:	2307      	movs	r3, #7
 800cc34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cc38:	e007      	b.n	800cc4a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cc3a:	79fb      	ldrb	r3, [r7, #7]
 800cc3c:	f003 0304 	and.w	r3, r3, #4
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d002      	beq.n	800cc4a <f_open+0xf6>
 800cc44:	2308      	movs	r3, #8
 800cc46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cc4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d168      	bne.n	800cd24 <f_open+0x1d0>
 800cc52:	79fb      	ldrb	r3, [r7, #7]
 800cc54:	f003 0308 	and.w	r3, r3, #8
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d063      	beq.n	800cd24 <f_open+0x1d0>
				dw = GET_FATTIME();
 800cc5c:	f7fe f83c 	bl	800acd8 <get_fattime>
 800cc60:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cc62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc64:	330e      	adds	r3, #14
 800cc66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7fe fae6 	bl	800b23a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cc6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc70:	3316      	adds	r3, #22
 800cc72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7fe fae0 	bl	800b23a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cc7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc7c:	330b      	adds	r3, #11
 800cc7e:	2220      	movs	r2, #32
 800cc80:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cc86:	4611      	mov	r1, r2
 800cc88:	4618      	mov	r0, r3
 800cc8a:	f7ff fa35 	bl	800c0f8 <ld_clust>
 800cc8e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cc94:	2200      	movs	r2, #0
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7ff fa4d 	bl	800c136 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cc9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc9e:	331c      	adds	r3, #28
 800cca0:	2100      	movs	r1, #0
 800cca2:	4618      	mov	r0, r3
 800cca4:	f7fe fac9 	bl	800b23a <st_dword>
					fs->wflag = 1;
 800cca8:	693b      	ldr	r3, [r7, #16]
 800ccaa:	2201      	movs	r2, #1
 800ccac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ccae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d037      	beq.n	800cd24 <f_open+0x1d0>
						dw = fs->winsect;
 800ccb4:	693b      	ldr	r3, [r7, #16]
 800ccb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccb8:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ccba:	f107 0314 	add.w	r3, r7, #20
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f7fe ff60 	bl	800bb88 <remove_chain>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800ccce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d126      	bne.n	800cd24 <f_open+0x1d0>
							res = move_window(fs, dw);
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fe fd08 	bl	800b6f0 <move_window>
 800cce0:	4603      	mov	r3, r0
 800cce2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ccea:	3a01      	subs	r2, #1
 800ccec:	60da      	str	r2, [r3, #12]
 800ccee:	e019      	b.n	800cd24 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ccf0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d115      	bne.n	800cd24 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ccf8:	7ebb      	ldrb	r3, [r7, #26]
 800ccfa:	f003 0310 	and.w	r3, r3, #16
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d003      	beq.n	800cd0a <f_open+0x1b6>
					res = FR_NO_FILE;
 800cd02:	2304      	movs	r3, #4
 800cd04:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800cd08:	e00c      	b.n	800cd24 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cd0a:	79fb      	ldrb	r3, [r7, #7]
 800cd0c:	f003 0302 	and.w	r3, r3, #2
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d007      	beq.n	800cd24 <f_open+0x1d0>
 800cd14:	7ebb      	ldrb	r3, [r7, #26]
 800cd16:	f003 0301 	and.w	r3, r3, #1
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d002      	beq.n	800cd24 <f_open+0x1d0>
						res = FR_DENIED;
 800cd1e:	2307      	movs	r3, #7
 800cd20:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cd24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d126      	bne.n	800cd7a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cd2c:	79fb      	ldrb	r3, [r7, #7]
 800cd2e:	f003 0308 	and.w	r3, r3, #8
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d003      	beq.n	800cd3e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800cd36:	79fb      	ldrb	r3, [r7, #7]
 800cd38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd3c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800cd46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cd4c:	79fb      	ldrb	r3, [r7, #7]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	bf8c      	ite	hi
 800cd52:	2301      	movhi	r3, #1
 800cd54:	2300      	movls	r3, #0
 800cd56:	b2db      	uxtb	r3, r3
 800cd58:	461a      	mov	r2, r3
 800cd5a:	f107 0314 	add.w	r3, r7, #20
 800cd5e:	4611      	mov	r1, r2
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7fe fb93 	bl	800b48c <inc_lock>
 800cd66:	4602      	mov	r2, r0
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	691b      	ldr	r3, [r3, #16]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d102      	bne.n	800cd7a <f_open+0x226>
 800cd74:	2302      	movs	r3, #2
 800cd76:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800cd7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f040 8095 	bne.w	800ceae <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd88:	4611      	mov	r1, r2
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7ff f9b4 	bl	800c0f8 <ld_clust>
 800cd90:	4602      	mov	r2, r0
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800cd96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd98:	331c      	adds	r3, #28
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f7fe fa0f 	bl	800b1be <ld_dword>
 800cda0:	4602      	mov	r2, r0
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800cdac:	693a      	ldr	r2, [r7, #16]
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	88da      	ldrh	r2, [r3, #6]
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	79fa      	ldrb	r2, [r7, #7]
 800cdbe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	3330      	adds	r3, #48	@ 0x30
 800cdd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cdda:	2100      	movs	r1, #0
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7fe fa79 	bl	800b2d4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800cde2:	79fb      	ldrb	r3, [r7, #7]
 800cde4:	f003 0320 	and.w	r3, r3, #32
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d060      	beq.n	800ceae <f_open+0x35a>
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	68db      	ldr	r3, [r3, #12]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d05c      	beq.n	800ceae <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	68da      	ldr	r2, [r3, #12]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800cdfc:	693b      	ldr	r3, [r7, #16]
 800cdfe:	895b      	ldrh	r3, [r3, #10]
 800ce00:	025b      	lsls	r3, r3, #9
 800ce02:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	689b      	ldr	r3, [r3, #8]
 800ce08:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	68db      	ldr	r3, [r3, #12]
 800ce0e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce10:	e016      	b.n	800ce40 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fe fd25 	bl	800b866 <get_fat>
 800ce1c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ce1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d802      	bhi.n	800ce2a <f_open+0x2d6>
 800ce24:	2302      	movs	r3, #2
 800ce26:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ce2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce30:	d102      	bne.n	800ce38 <f_open+0x2e4>
 800ce32:	2301      	movs	r3, #1
 800ce34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ce38:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce3c:	1ad3      	subs	r3, r2, r3
 800ce3e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d103      	bne.n	800ce50 <f_open+0x2fc>
 800ce48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ce4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce4c:	429a      	cmp	r2, r3
 800ce4e:	d8e0      	bhi.n	800ce12 <f_open+0x2be>
				}
				fp->clust = clst;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ce54:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ce56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d127      	bne.n	800ceae <f_open+0x35a>
 800ce5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d022      	beq.n	800ceae <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fe fcdb 	bl	800b828 <clust2sect>
 800ce72:	6478      	str	r0, [r7, #68]	@ 0x44
 800ce74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d103      	bne.n	800ce82 <f_open+0x32e>
						res = FR_INT_ERR;
 800ce7a:	2302      	movs	r3, #2
 800ce7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ce80:	e015      	b.n	800ceae <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ce82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce84:	0a5a      	lsrs	r2, r3, #9
 800ce86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce88:	441a      	add	r2, r3
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	7858      	ldrb	r0, [r3, #1]
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6a1a      	ldr	r2, [r3, #32]
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	f7fe f917 	bl	800b0d0 <disk_read>
 800cea2:	4603      	mov	r3, r0
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d002      	beq.n	800ceae <f_open+0x35a>
 800cea8:	2301      	movs	r3, #1
 800ceaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ceae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d002      	beq.n	800cebc <f_open+0x368>
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cebc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3760      	adds	r7, #96	@ 0x60
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b08e      	sub	sp, #56	@ 0x38
 800cecc:	af00      	add	r7, sp, #0
 800cece:	60f8      	str	r0, [r7, #12]
 800ced0:	60b9      	str	r1, [r7, #8]
 800ced2:	607a      	str	r2, [r7, #4]
 800ced4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ced6:	68bb      	ldr	r3, [r7, #8]
 800ced8:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	2200      	movs	r2, #0
 800cede:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f107 0214 	add.w	r2, r7, #20
 800cee6:	4611      	mov	r1, r2
 800cee8:	4618      	mov	r0, r3
 800ceea:	f7ff fdb7 	bl	800ca5c <validate>
 800ceee:	4603      	mov	r3, r0
 800cef0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cef4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d107      	bne.n	800cf0c <f_read+0x44>
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	7d5b      	ldrb	r3, [r3, #21]
 800cf00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cf04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d002      	beq.n	800cf12 <f_read+0x4a>
 800cf0c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf10:	e115      	b.n	800d13e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	7d1b      	ldrb	r3, [r3, #20]
 800cf16:	f003 0301 	and.w	r3, r3, #1
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d101      	bne.n	800cf22 <f_read+0x5a>
 800cf1e:	2307      	movs	r3, #7
 800cf20:	e10d      	b.n	800d13e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	68da      	ldr	r2, [r3, #12]
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	699b      	ldr	r3, [r3, #24]
 800cf2a:	1ad3      	subs	r3, r2, r3
 800cf2c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	6a3b      	ldr	r3, [r7, #32]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	f240 80fe 	bls.w	800d134 <f_read+0x26c>
 800cf38:	6a3b      	ldr	r3, [r7, #32]
 800cf3a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cf3c:	e0fa      	b.n	800d134 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	699b      	ldr	r3, [r3, #24]
 800cf42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f040 80c6 	bne.w	800d0d8 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	699b      	ldr	r3, [r3, #24]
 800cf50:	0a5b      	lsrs	r3, r3, #9
 800cf52:	697a      	ldr	r2, [r7, #20]
 800cf54:	8952      	ldrh	r2, [r2, #10]
 800cf56:	3a01      	subs	r2, #1
 800cf58:	4013      	ands	r3, r2
 800cf5a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d12f      	bne.n	800cfc2 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	699b      	ldr	r3, [r3, #24]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d103      	bne.n	800cf72 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cf70:	e013      	b.n	800cf9a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d007      	beq.n	800cf8a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	699b      	ldr	r3, [r3, #24]
 800cf7e:	4619      	mov	r1, r3
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f7fe fefe 	bl	800bd82 <clmt_clust>
 800cf86:	6338      	str	r0, [r7, #48]	@ 0x30
 800cf88:	e007      	b.n	800cf9a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cf8a:	68fa      	ldr	r2, [r7, #12]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	69db      	ldr	r3, [r3, #28]
 800cf90:	4619      	mov	r1, r3
 800cf92:	4610      	mov	r0, r2
 800cf94:	f7fe fc67 	bl	800b866 <get_fat>
 800cf98:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cf9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf9c:	2b01      	cmp	r3, #1
 800cf9e:	d804      	bhi.n	800cfaa <f_read+0xe2>
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2202      	movs	r2, #2
 800cfa4:	755a      	strb	r2, [r3, #21]
 800cfa6:	2302      	movs	r3, #2
 800cfa8:	e0c9      	b.n	800d13e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb0:	d104      	bne.n	800cfbc <f_read+0xf4>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	755a      	strb	r2, [r3, #21]
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e0c0      	b.n	800d13e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfc0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cfc2:	697a      	ldr	r2, [r7, #20]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	69db      	ldr	r3, [r3, #28]
 800cfc8:	4619      	mov	r1, r3
 800cfca:	4610      	mov	r0, r2
 800cfcc:	f7fe fc2c 	bl	800b828 <clust2sect>
 800cfd0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d104      	bne.n	800cfe2 <f_read+0x11a>
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2202      	movs	r2, #2
 800cfdc:	755a      	strb	r2, [r3, #21]
 800cfde:	2302      	movs	r3, #2
 800cfe0:	e0ad      	b.n	800d13e <f_read+0x276>
			sect += csect;
 800cfe2:	69ba      	ldr	r2, [r7, #24]
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	4413      	add	r3, r2
 800cfe8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	0a5b      	lsrs	r3, r3, #9
 800cfee:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d039      	beq.n	800d06a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cff6:	69fa      	ldr	r2, [r7, #28]
 800cff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cffa:	4413      	add	r3, r2
 800cffc:	697a      	ldr	r2, [r7, #20]
 800cffe:	8952      	ldrh	r2, [r2, #10]
 800d000:	4293      	cmp	r3, r2
 800d002:	d905      	bls.n	800d010 <f_read+0x148>
					cc = fs->csize - csect;
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	895b      	ldrh	r3, [r3, #10]
 800d008:	461a      	mov	r2, r3
 800d00a:	69fb      	ldr	r3, [r7, #28]
 800d00c:	1ad3      	subs	r3, r2, r3
 800d00e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	7858      	ldrb	r0, [r3, #1]
 800d014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d016:	69ba      	ldr	r2, [r7, #24]
 800d018:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d01a:	f7fe f859 	bl	800b0d0 <disk_read>
 800d01e:	4603      	mov	r3, r0
 800d020:	2b00      	cmp	r3, #0
 800d022:	d004      	beq.n	800d02e <f_read+0x166>
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	2201      	movs	r2, #1
 800d028:	755a      	strb	r2, [r3, #21]
 800d02a:	2301      	movs	r3, #1
 800d02c:	e087      	b.n	800d13e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	7d1b      	ldrb	r3, [r3, #20]
 800d032:	b25b      	sxtb	r3, r3
 800d034:	2b00      	cmp	r3, #0
 800d036:	da14      	bge.n	800d062 <f_read+0x19a>
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6a1a      	ldr	r2, [r3, #32]
 800d03c:	69bb      	ldr	r3, [r7, #24]
 800d03e:	1ad3      	subs	r3, r2, r3
 800d040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d042:	429a      	cmp	r2, r3
 800d044:	d90d      	bls.n	800d062 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6a1a      	ldr	r2, [r3, #32]
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	025b      	lsls	r3, r3, #9
 800d050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d052:	18d0      	adds	r0, r2, r3
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	3330      	adds	r3, #48	@ 0x30
 800d058:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d05c:	4619      	mov	r1, r3
 800d05e:	f7fe f918 	bl	800b292 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d064:	025b      	lsls	r3, r3, #9
 800d066:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800d068:	e050      	b.n	800d10c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	6a1b      	ldr	r3, [r3, #32]
 800d06e:	69ba      	ldr	r2, [r7, #24]
 800d070:	429a      	cmp	r2, r3
 800d072:	d02e      	beq.n	800d0d2 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	7d1b      	ldrb	r3, [r3, #20]
 800d078:	b25b      	sxtb	r3, r3
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	da18      	bge.n	800d0b0 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	7858      	ldrb	r0, [r3, #1]
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	6a1a      	ldr	r2, [r3, #32]
 800d08c:	2301      	movs	r3, #1
 800d08e:	f7fe f83f 	bl	800b110 <disk_write>
 800d092:	4603      	mov	r3, r0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d004      	beq.n	800d0a2 <f_read+0x1da>
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2201      	movs	r2, #1
 800d09c:	755a      	strb	r2, [r3, #21]
 800d09e:	2301      	movs	r3, #1
 800d0a0:	e04d      	b.n	800d13e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	7d1b      	ldrb	r3, [r3, #20]
 800d0a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0aa:	b2da      	uxtb	r2, r3
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	7858      	ldrb	r0, [r3, #1]
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	69ba      	ldr	r2, [r7, #24]
 800d0be:	f7fe f807 	bl	800b0d0 <disk_read>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d004      	beq.n	800d0d2 <f_read+0x20a>
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	755a      	strb	r2, [r3, #21]
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e035      	b.n	800d13e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	69ba      	ldr	r2, [r7, #24]
 800d0d6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	699b      	ldr	r3, [r3, #24]
 800d0dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0e0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800d0e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d0e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d901      	bls.n	800d0f2 <f_read+0x22a>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	699b      	ldr	r3, [r3, #24]
 800d0fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d100:	4413      	add	r3, r2
 800d102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d104:	4619      	mov	r1, r3
 800d106:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d108:	f7fe f8c3 	bl	800b292 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d10c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d110:	4413      	add	r3, r2
 800d112:	627b      	str	r3, [r7, #36]	@ 0x24
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	699a      	ldr	r2, [r3, #24]
 800d118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d11a:	441a      	add	r2, r3
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	619a      	str	r2, [r3, #24]
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	681a      	ldr	r2, [r3, #0]
 800d124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d126:	441a      	add	r2, r3
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	601a      	str	r2, [r3, #0]
 800d12c:	687a      	ldr	r2, [r7, #4]
 800d12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d130:	1ad3      	subs	r3, r2, r3
 800d132:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	f47f af01 	bne.w	800cf3e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3738      	adds	r7, #56	@ 0x38
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}

0800d146 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d146:	b580      	push	{r7, lr}
 800d148:	b086      	sub	sp, #24
 800d14a:	af00      	add	r7, sp, #0
 800d14c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f107 0208 	add.w	r2, r7, #8
 800d154:	4611      	mov	r1, r2
 800d156:	4618      	mov	r0, r3
 800d158:	f7ff fc80 	bl	800ca5c <validate>
 800d15c:	4603      	mov	r3, r0
 800d15e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d160:	7dfb      	ldrb	r3, [r7, #23]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d168      	bne.n	800d238 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	7d1b      	ldrb	r3, [r3, #20]
 800d16a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d062      	beq.n	800d238 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	7d1b      	ldrb	r3, [r3, #20]
 800d176:	b25b      	sxtb	r3, r3
 800d178:	2b00      	cmp	r3, #0
 800d17a:	da15      	bge.n	800d1a8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	7858      	ldrb	r0, [r3, #1]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6a1a      	ldr	r2, [r3, #32]
 800d18a:	2301      	movs	r3, #1
 800d18c:	f7fd ffc0 	bl	800b110 <disk_write>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d001      	beq.n	800d19a <f_sync+0x54>
 800d196:	2301      	movs	r3, #1
 800d198:	e04f      	b.n	800d23a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	7d1b      	ldrb	r3, [r3, #20]
 800d19e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1a2:	b2da      	uxtb	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d1a8:	f7fd fd96 	bl	800acd8 <get_fattime>
 800d1ac:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d1ae:	68ba      	ldr	r2, [r7, #8]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	4610      	mov	r0, r2
 800d1b8:	f7fe fa9a 	bl	800b6f0 <move_window>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d1c0:	7dfb      	ldrb	r3, [r7, #23]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d138      	bne.n	800d238 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1ca:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	330b      	adds	r3, #11
 800d1d0:	781a      	ldrb	r2, [r3, #0]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	330b      	adds	r3, #11
 800d1d6:	f042 0220 	orr.w	r2, r2, #32
 800d1da:	b2d2      	uxtb	r2, r2
 800d1dc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6818      	ldr	r0, [r3, #0]
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	68f9      	ldr	r1, [r7, #12]
 800d1ea:	f7fe ffa4 	bl	800c136 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	f103 021c 	add.w	r2, r3, #28
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	4610      	mov	r0, r2
 800d1fc:	f7fe f81d 	bl	800b23a <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	3316      	adds	r3, #22
 800d204:	6939      	ldr	r1, [r7, #16]
 800d206:	4618      	mov	r0, r3
 800d208:	f7fe f817 	bl	800b23a <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	3312      	adds	r3, #18
 800d210:	2100      	movs	r1, #0
 800d212:	4618      	mov	r0, r3
 800d214:	f7fd fff6 	bl	800b204 <st_word>
					fs->wflag = 1;
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	2201      	movs	r2, #1
 800d21c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d21e:	68bb      	ldr	r3, [r7, #8]
 800d220:	4618      	mov	r0, r3
 800d222:	f7fe fa93 	bl	800b74c <sync_fs>
 800d226:	4603      	mov	r3, r0
 800d228:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	7d1b      	ldrb	r3, [r3, #20]
 800d22e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d232:	b2da      	uxtb	r2, r3
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d238:	7dfb      	ldrb	r3, [r7, #23]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3718      	adds	r7, #24
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d242:	b580      	push	{r7, lr}
 800d244:	b084      	sub	sp, #16
 800d246:	af00      	add	r7, sp, #0
 800d248:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f7ff ff7b 	bl	800d146 <f_sync>
 800d250:	4603      	mov	r3, r0
 800d252:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d254:	7bfb      	ldrb	r3, [r7, #15]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d118      	bne.n	800d28c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f107 0208 	add.w	r2, r7, #8
 800d260:	4611      	mov	r1, r2
 800d262:	4618      	mov	r0, r3
 800d264:	f7ff fbfa 	bl	800ca5c <validate>
 800d268:	4603      	mov	r3, r0
 800d26a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d26c:	7bfb      	ldrb	r3, [r7, #15]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d10c      	bne.n	800d28c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	691b      	ldr	r3, [r3, #16]
 800d276:	4618      	mov	r0, r3
 800d278:	f7fe f996 	bl	800b5a8 <dec_lock>
 800d27c:	4603      	mov	r3, r0
 800d27e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d280:	7bfb      	ldrb	r3, [r7, #15]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d102      	bne.n	800d28c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2200      	movs	r2, #0
 800d28a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d28c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3710      	adds	r7, #16
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
	...

0800d298 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d298:	b480      	push	{r7}
 800d29a:	b087      	sub	sp, #28
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	60f8      	str	r0, [r7, #12]
 800d2a0:	60b9      	str	r1, [r7, #8]
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d2ae:	4b1f      	ldr	r3, [pc, #124]	@ (800d32c <FATFS_LinkDriverEx+0x94>)
 800d2b0:	7a5b      	ldrb	r3, [r3, #9]
 800d2b2:	b2db      	uxtb	r3, r3
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d131      	bne.n	800d31c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d2b8:	4b1c      	ldr	r3, [pc, #112]	@ (800d32c <FATFS_LinkDriverEx+0x94>)
 800d2ba:	7a5b      	ldrb	r3, [r3, #9]
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	461a      	mov	r2, r3
 800d2c0:	4b1a      	ldr	r3, [pc, #104]	@ (800d32c <FATFS_LinkDriverEx+0x94>)
 800d2c2:	2100      	movs	r1, #0
 800d2c4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d2c6:	4b19      	ldr	r3, [pc, #100]	@ (800d32c <FATFS_LinkDriverEx+0x94>)
 800d2c8:	7a5b      	ldrb	r3, [r3, #9]
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	4a17      	ldr	r2, [pc, #92]	@ (800d32c <FATFS_LinkDriverEx+0x94>)
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	4413      	add	r3, r2
 800d2d2:	68fa      	ldr	r2, [r7, #12]
 800d2d4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d2d6:	4b15      	ldr	r3, [pc, #84]	@ (800d32c <FATFS_LinkDriverEx+0x94>)
 800d2d8:	7a5b      	ldrb	r3, [r3, #9]
 800d2da:	b2db      	uxtb	r3, r3
 800d2dc:	461a      	mov	r2, r3
 800d2de:	4b13      	ldr	r3, [pc, #76]	@ (800d32c <FATFS_LinkDriverEx+0x94>)
 800d2e0:	4413      	add	r3, r2
 800d2e2:	79fa      	ldrb	r2, [r7, #7]
 800d2e4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d2e6:	4b11      	ldr	r3, [pc, #68]	@ (800d32c <FATFS_LinkDriverEx+0x94>)
 800d2e8:	7a5b      	ldrb	r3, [r3, #9]
 800d2ea:	b2db      	uxtb	r3, r3
 800d2ec:	1c5a      	adds	r2, r3, #1
 800d2ee:	b2d1      	uxtb	r1, r2
 800d2f0:	4a0e      	ldr	r2, [pc, #56]	@ (800d32c <FATFS_LinkDriverEx+0x94>)
 800d2f2:	7251      	strb	r1, [r2, #9]
 800d2f4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d2f6:	7dbb      	ldrb	r3, [r7, #22]
 800d2f8:	3330      	adds	r3, #48	@ 0x30
 800d2fa:	b2da      	uxtb	r2, r3
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	3301      	adds	r3, #1
 800d304:	223a      	movs	r2, #58	@ 0x3a
 800d306:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	3302      	adds	r3, #2
 800d30c:	222f      	movs	r2, #47	@ 0x2f
 800d30e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d310:	68bb      	ldr	r3, [r7, #8]
 800d312:	3303      	adds	r3, #3
 800d314:	2200      	movs	r2, #0
 800d316:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d318:	2300      	movs	r3, #0
 800d31a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d31c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d31e:	4618      	mov	r0, r3
 800d320:	371c      	adds	r7, #28
 800d322:	46bd      	mov	sp, r7
 800d324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d328:	4770      	bx	lr
 800d32a:	bf00      	nop
 800d32c:	20000324 	.word	0x20000324

0800d330 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b082      	sub	sp, #8
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d33a:	2200      	movs	r2, #0
 800d33c:	6839      	ldr	r1, [r7, #0]
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f7ff ffaa 	bl	800d298 <FATFS_LinkDriverEx>
 800d344:	4603      	mov	r3, r0
}
 800d346:	4618      	mov	r0, r3
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}
	...

0800d350 <siprintf>:
 800d350:	b40e      	push	{r1, r2, r3}
 800d352:	b510      	push	{r4, lr}
 800d354:	b09d      	sub	sp, #116	@ 0x74
 800d356:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d358:	9002      	str	r0, [sp, #8]
 800d35a:	9006      	str	r0, [sp, #24]
 800d35c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d360:	480a      	ldr	r0, [pc, #40]	@ (800d38c <siprintf+0x3c>)
 800d362:	9107      	str	r1, [sp, #28]
 800d364:	9104      	str	r1, [sp, #16]
 800d366:	490a      	ldr	r1, [pc, #40]	@ (800d390 <siprintf+0x40>)
 800d368:	f853 2b04 	ldr.w	r2, [r3], #4
 800d36c:	9105      	str	r1, [sp, #20]
 800d36e:	2400      	movs	r4, #0
 800d370:	a902      	add	r1, sp, #8
 800d372:	6800      	ldr	r0, [r0, #0]
 800d374:	9301      	str	r3, [sp, #4]
 800d376:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d378:	f000 f99c 	bl	800d6b4 <_svfiprintf_r>
 800d37c:	9b02      	ldr	r3, [sp, #8]
 800d37e:	701c      	strb	r4, [r3, #0]
 800d380:	b01d      	add	sp, #116	@ 0x74
 800d382:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d386:	b003      	add	sp, #12
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	20000010 	.word	0x20000010
 800d390:	ffff0208 	.word	0xffff0208

0800d394 <memset>:
 800d394:	4402      	add	r2, r0
 800d396:	4603      	mov	r3, r0
 800d398:	4293      	cmp	r3, r2
 800d39a:	d100      	bne.n	800d39e <memset+0xa>
 800d39c:	4770      	bx	lr
 800d39e:	f803 1b01 	strb.w	r1, [r3], #1
 800d3a2:	e7f9      	b.n	800d398 <memset+0x4>

0800d3a4 <__errno>:
 800d3a4:	4b01      	ldr	r3, [pc, #4]	@ (800d3ac <__errno+0x8>)
 800d3a6:	6818      	ldr	r0, [r3, #0]
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop
 800d3ac:	20000010 	.word	0x20000010

0800d3b0 <__libc_init_array>:
 800d3b0:	b570      	push	{r4, r5, r6, lr}
 800d3b2:	4d0d      	ldr	r5, [pc, #52]	@ (800d3e8 <__libc_init_array+0x38>)
 800d3b4:	4c0d      	ldr	r4, [pc, #52]	@ (800d3ec <__libc_init_array+0x3c>)
 800d3b6:	1b64      	subs	r4, r4, r5
 800d3b8:	10a4      	asrs	r4, r4, #2
 800d3ba:	2600      	movs	r6, #0
 800d3bc:	42a6      	cmp	r6, r4
 800d3be:	d109      	bne.n	800d3d4 <__libc_init_array+0x24>
 800d3c0:	4d0b      	ldr	r5, [pc, #44]	@ (800d3f0 <__libc_init_array+0x40>)
 800d3c2:	4c0c      	ldr	r4, [pc, #48]	@ (800d3f4 <__libc_init_array+0x44>)
 800d3c4:	f000 fc6c 	bl	800dca0 <_init>
 800d3c8:	1b64      	subs	r4, r4, r5
 800d3ca:	10a4      	asrs	r4, r4, #2
 800d3cc:	2600      	movs	r6, #0
 800d3ce:	42a6      	cmp	r6, r4
 800d3d0:	d105      	bne.n	800d3de <__libc_init_array+0x2e>
 800d3d2:	bd70      	pop	{r4, r5, r6, pc}
 800d3d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3d8:	4798      	blx	r3
 800d3da:	3601      	adds	r6, #1
 800d3dc:	e7ee      	b.n	800d3bc <__libc_init_array+0xc>
 800d3de:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3e2:	4798      	blx	r3
 800d3e4:	3601      	adds	r6, #1
 800d3e6:	e7f2      	b.n	800d3ce <__libc_init_array+0x1e>
 800d3e8:	0800e108 	.word	0x0800e108
 800d3ec:	0800e108 	.word	0x0800e108
 800d3f0:	0800e108 	.word	0x0800e108
 800d3f4:	0800e10c 	.word	0x0800e10c

0800d3f8 <__retarget_lock_acquire_recursive>:
 800d3f8:	4770      	bx	lr

0800d3fa <__retarget_lock_release_recursive>:
 800d3fa:	4770      	bx	lr

0800d3fc <strcpy>:
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d402:	f803 2b01 	strb.w	r2, [r3], #1
 800d406:	2a00      	cmp	r2, #0
 800d408:	d1f9      	bne.n	800d3fe <strcpy+0x2>
 800d40a:	4770      	bx	lr

0800d40c <_free_r>:
 800d40c:	b538      	push	{r3, r4, r5, lr}
 800d40e:	4605      	mov	r5, r0
 800d410:	2900      	cmp	r1, #0
 800d412:	d041      	beq.n	800d498 <_free_r+0x8c>
 800d414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d418:	1f0c      	subs	r4, r1, #4
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	bfb8      	it	lt
 800d41e:	18e4      	addlt	r4, r4, r3
 800d420:	f000 f8e0 	bl	800d5e4 <__malloc_lock>
 800d424:	4a1d      	ldr	r2, [pc, #116]	@ (800d49c <_free_r+0x90>)
 800d426:	6813      	ldr	r3, [r2, #0]
 800d428:	b933      	cbnz	r3, 800d438 <_free_r+0x2c>
 800d42a:	6063      	str	r3, [r4, #4]
 800d42c:	6014      	str	r4, [r2, #0]
 800d42e:	4628      	mov	r0, r5
 800d430:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d434:	f000 b8dc 	b.w	800d5f0 <__malloc_unlock>
 800d438:	42a3      	cmp	r3, r4
 800d43a:	d908      	bls.n	800d44e <_free_r+0x42>
 800d43c:	6820      	ldr	r0, [r4, #0]
 800d43e:	1821      	adds	r1, r4, r0
 800d440:	428b      	cmp	r3, r1
 800d442:	bf01      	itttt	eq
 800d444:	6819      	ldreq	r1, [r3, #0]
 800d446:	685b      	ldreq	r3, [r3, #4]
 800d448:	1809      	addeq	r1, r1, r0
 800d44a:	6021      	streq	r1, [r4, #0]
 800d44c:	e7ed      	b.n	800d42a <_free_r+0x1e>
 800d44e:	461a      	mov	r2, r3
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	b10b      	cbz	r3, 800d458 <_free_r+0x4c>
 800d454:	42a3      	cmp	r3, r4
 800d456:	d9fa      	bls.n	800d44e <_free_r+0x42>
 800d458:	6811      	ldr	r1, [r2, #0]
 800d45a:	1850      	adds	r0, r2, r1
 800d45c:	42a0      	cmp	r0, r4
 800d45e:	d10b      	bne.n	800d478 <_free_r+0x6c>
 800d460:	6820      	ldr	r0, [r4, #0]
 800d462:	4401      	add	r1, r0
 800d464:	1850      	adds	r0, r2, r1
 800d466:	4283      	cmp	r3, r0
 800d468:	6011      	str	r1, [r2, #0]
 800d46a:	d1e0      	bne.n	800d42e <_free_r+0x22>
 800d46c:	6818      	ldr	r0, [r3, #0]
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	6053      	str	r3, [r2, #4]
 800d472:	4408      	add	r0, r1
 800d474:	6010      	str	r0, [r2, #0]
 800d476:	e7da      	b.n	800d42e <_free_r+0x22>
 800d478:	d902      	bls.n	800d480 <_free_r+0x74>
 800d47a:	230c      	movs	r3, #12
 800d47c:	602b      	str	r3, [r5, #0]
 800d47e:	e7d6      	b.n	800d42e <_free_r+0x22>
 800d480:	6820      	ldr	r0, [r4, #0]
 800d482:	1821      	adds	r1, r4, r0
 800d484:	428b      	cmp	r3, r1
 800d486:	bf04      	itt	eq
 800d488:	6819      	ldreq	r1, [r3, #0]
 800d48a:	685b      	ldreq	r3, [r3, #4]
 800d48c:	6063      	str	r3, [r4, #4]
 800d48e:	bf04      	itt	eq
 800d490:	1809      	addeq	r1, r1, r0
 800d492:	6021      	streq	r1, [r4, #0]
 800d494:	6054      	str	r4, [r2, #4]
 800d496:	e7ca      	b.n	800d42e <_free_r+0x22>
 800d498:	bd38      	pop	{r3, r4, r5, pc}
 800d49a:	bf00      	nop
 800d49c:	20000474 	.word	0x20000474

0800d4a0 <sbrk_aligned>:
 800d4a0:	b570      	push	{r4, r5, r6, lr}
 800d4a2:	4e0f      	ldr	r6, [pc, #60]	@ (800d4e0 <sbrk_aligned+0x40>)
 800d4a4:	460c      	mov	r4, r1
 800d4a6:	6831      	ldr	r1, [r6, #0]
 800d4a8:	4605      	mov	r5, r0
 800d4aa:	b911      	cbnz	r1, 800d4b2 <sbrk_aligned+0x12>
 800d4ac:	f000 fba4 	bl	800dbf8 <_sbrk_r>
 800d4b0:	6030      	str	r0, [r6, #0]
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	f000 fb9f 	bl	800dbf8 <_sbrk_r>
 800d4ba:	1c43      	adds	r3, r0, #1
 800d4bc:	d103      	bne.n	800d4c6 <sbrk_aligned+0x26>
 800d4be:	f04f 34ff 	mov.w	r4, #4294967295
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	bd70      	pop	{r4, r5, r6, pc}
 800d4c6:	1cc4      	adds	r4, r0, #3
 800d4c8:	f024 0403 	bic.w	r4, r4, #3
 800d4cc:	42a0      	cmp	r0, r4
 800d4ce:	d0f8      	beq.n	800d4c2 <sbrk_aligned+0x22>
 800d4d0:	1a21      	subs	r1, r4, r0
 800d4d2:	4628      	mov	r0, r5
 800d4d4:	f000 fb90 	bl	800dbf8 <_sbrk_r>
 800d4d8:	3001      	adds	r0, #1
 800d4da:	d1f2      	bne.n	800d4c2 <sbrk_aligned+0x22>
 800d4dc:	e7ef      	b.n	800d4be <sbrk_aligned+0x1e>
 800d4de:	bf00      	nop
 800d4e0:	20000470 	.word	0x20000470

0800d4e4 <_malloc_r>:
 800d4e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4e8:	1ccd      	adds	r5, r1, #3
 800d4ea:	f025 0503 	bic.w	r5, r5, #3
 800d4ee:	3508      	adds	r5, #8
 800d4f0:	2d0c      	cmp	r5, #12
 800d4f2:	bf38      	it	cc
 800d4f4:	250c      	movcc	r5, #12
 800d4f6:	2d00      	cmp	r5, #0
 800d4f8:	4606      	mov	r6, r0
 800d4fa:	db01      	blt.n	800d500 <_malloc_r+0x1c>
 800d4fc:	42a9      	cmp	r1, r5
 800d4fe:	d904      	bls.n	800d50a <_malloc_r+0x26>
 800d500:	230c      	movs	r3, #12
 800d502:	6033      	str	r3, [r6, #0]
 800d504:	2000      	movs	r0, #0
 800d506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d50a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d5e0 <_malloc_r+0xfc>
 800d50e:	f000 f869 	bl	800d5e4 <__malloc_lock>
 800d512:	f8d8 3000 	ldr.w	r3, [r8]
 800d516:	461c      	mov	r4, r3
 800d518:	bb44      	cbnz	r4, 800d56c <_malloc_r+0x88>
 800d51a:	4629      	mov	r1, r5
 800d51c:	4630      	mov	r0, r6
 800d51e:	f7ff ffbf 	bl	800d4a0 <sbrk_aligned>
 800d522:	1c43      	adds	r3, r0, #1
 800d524:	4604      	mov	r4, r0
 800d526:	d158      	bne.n	800d5da <_malloc_r+0xf6>
 800d528:	f8d8 4000 	ldr.w	r4, [r8]
 800d52c:	4627      	mov	r7, r4
 800d52e:	2f00      	cmp	r7, #0
 800d530:	d143      	bne.n	800d5ba <_malloc_r+0xd6>
 800d532:	2c00      	cmp	r4, #0
 800d534:	d04b      	beq.n	800d5ce <_malloc_r+0xea>
 800d536:	6823      	ldr	r3, [r4, #0]
 800d538:	4639      	mov	r1, r7
 800d53a:	4630      	mov	r0, r6
 800d53c:	eb04 0903 	add.w	r9, r4, r3
 800d540:	f000 fb5a 	bl	800dbf8 <_sbrk_r>
 800d544:	4581      	cmp	r9, r0
 800d546:	d142      	bne.n	800d5ce <_malloc_r+0xea>
 800d548:	6821      	ldr	r1, [r4, #0]
 800d54a:	1a6d      	subs	r5, r5, r1
 800d54c:	4629      	mov	r1, r5
 800d54e:	4630      	mov	r0, r6
 800d550:	f7ff ffa6 	bl	800d4a0 <sbrk_aligned>
 800d554:	3001      	adds	r0, #1
 800d556:	d03a      	beq.n	800d5ce <_malloc_r+0xea>
 800d558:	6823      	ldr	r3, [r4, #0]
 800d55a:	442b      	add	r3, r5
 800d55c:	6023      	str	r3, [r4, #0]
 800d55e:	f8d8 3000 	ldr.w	r3, [r8]
 800d562:	685a      	ldr	r2, [r3, #4]
 800d564:	bb62      	cbnz	r2, 800d5c0 <_malloc_r+0xdc>
 800d566:	f8c8 7000 	str.w	r7, [r8]
 800d56a:	e00f      	b.n	800d58c <_malloc_r+0xa8>
 800d56c:	6822      	ldr	r2, [r4, #0]
 800d56e:	1b52      	subs	r2, r2, r5
 800d570:	d420      	bmi.n	800d5b4 <_malloc_r+0xd0>
 800d572:	2a0b      	cmp	r2, #11
 800d574:	d917      	bls.n	800d5a6 <_malloc_r+0xc2>
 800d576:	1961      	adds	r1, r4, r5
 800d578:	42a3      	cmp	r3, r4
 800d57a:	6025      	str	r5, [r4, #0]
 800d57c:	bf18      	it	ne
 800d57e:	6059      	strne	r1, [r3, #4]
 800d580:	6863      	ldr	r3, [r4, #4]
 800d582:	bf08      	it	eq
 800d584:	f8c8 1000 	streq.w	r1, [r8]
 800d588:	5162      	str	r2, [r4, r5]
 800d58a:	604b      	str	r3, [r1, #4]
 800d58c:	4630      	mov	r0, r6
 800d58e:	f000 f82f 	bl	800d5f0 <__malloc_unlock>
 800d592:	f104 000b 	add.w	r0, r4, #11
 800d596:	1d23      	adds	r3, r4, #4
 800d598:	f020 0007 	bic.w	r0, r0, #7
 800d59c:	1ac2      	subs	r2, r0, r3
 800d59e:	bf1c      	itt	ne
 800d5a0:	1a1b      	subne	r3, r3, r0
 800d5a2:	50a3      	strne	r3, [r4, r2]
 800d5a4:	e7af      	b.n	800d506 <_malloc_r+0x22>
 800d5a6:	6862      	ldr	r2, [r4, #4]
 800d5a8:	42a3      	cmp	r3, r4
 800d5aa:	bf0c      	ite	eq
 800d5ac:	f8c8 2000 	streq.w	r2, [r8]
 800d5b0:	605a      	strne	r2, [r3, #4]
 800d5b2:	e7eb      	b.n	800d58c <_malloc_r+0xa8>
 800d5b4:	4623      	mov	r3, r4
 800d5b6:	6864      	ldr	r4, [r4, #4]
 800d5b8:	e7ae      	b.n	800d518 <_malloc_r+0x34>
 800d5ba:	463c      	mov	r4, r7
 800d5bc:	687f      	ldr	r7, [r7, #4]
 800d5be:	e7b6      	b.n	800d52e <_malloc_r+0x4a>
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	685b      	ldr	r3, [r3, #4]
 800d5c4:	42a3      	cmp	r3, r4
 800d5c6:	d1fb      	bne.n	800d5c0 <_malloc_r+0xdc>
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	6053      	str	r3, [r2, #4]
 800d5cc:	e7de      	b.n	800d58c <_malloc_r+0xa8>
 800d5ce:	230c      	movs	r3, #12
 800d5d0:	6033      	str	r3, [r6, #0]
 800d5d2:	4630      	mov	r0, r6
 800d5d4:	f000 f80c 	bl	800d5f0 <__malloc_unlock>
 800d5d8:	e794      	b.n	800d504 <_malloc_r+0x20>
 800d5da:	6005      	str	r5, [r0, #0]
 800d5dc:	e7d6      	b.n	800d58c <_malloc_r+0xa8>
 800d5de:	bf00      	nop
 800d5e0:	20000474 	.word	0x20000474

0800d5e4 <__malloc_lock>:
 800d5e4:	4801      	ldr	r0, [pc, #4]	@ (800d5ec <__malloc_lock+0x8>)
 800d5e6:	f7ff bf07 	b.w	800d3f8 <__retarget_lock_acquire_recursive>
 800d5ea:	bf00      	nop
 800d5ec:	2000046c 	.word	0x2000046c

0800d5f0 <__malloc_unlock>:
 800d5f0:	4801      	ldr	r0, [pc, #4]	@ (800d5f8 <__malloc_unlock+0x8>)
 800d5f2:	f7ff bf02 	b.w	800d3fa <__retarget_lock_release_recursive>
 800d5f6:	bf00      	nop
 800d5f8:	2000046c 	.word	0x2000046c

0800d5fc <__ssputs_r>:
 800d5fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d600:	688e      	ldr	r6, [r1, #8]
 800d602:	461f      	mov	r7, r3
 800d604:	42be      	cmp	r6, r7
 800d606:	680b      	ldr	r3, [r1, #0]
 800d608:	4682      	mov	sl, r0
 800d60a:	460c      	mov	r4, r1
 800d60c:	4690      	mov	r8, r2
 800d60e:	d82d      	bhi.n	800d66c <__ssputs_r+0x70>
 800d610:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d614:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d618:	d026      	beq.n	800d668 <__ssputs_r+0x6c>
 800d61a:	6965      	ldr	r5, [r4, #20]
 800d61c:	6909      	ldr	r1, [r1, #16]
 800d61e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d622:	eba3 0901 	sub.w	r9, r3, r1
 800d626:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d62a:	1c7b      	adds	r3, r7, #1
 800d62c:	444b      	add	r3, r9
 800d62e:	106d      	asrs	r5, r5, #1
 800d630:	429d      	cmp	r5, r3
 800d632:	bf38      	it	cc
 800d634:	461d      	movcc	r5, r3
 800d636:	0553      	lsls	r3, r2, #21
 800d638:	d527      	bpl.n	800d68a <__ssputs_r+0x8e>
 800d63a:	4629      	mov	r1, r5
 800d63c:	f7ff ff52 	bl	800d4e4 <_malloc_r>
 800d640:	4606      	mov	r6, r0
 800d642:	b360      	cbz	r0, 800d69e <__ssputs_r+0xa2>
 800d644:	6921      	ldr	r1, [r4, #16]
 800d646:	464a      	mov	r2, r9
 800d648:	f000 fae6 	bl	800dc18 <memcpy>
 800d64c:	89a3      	ldrh	r3, [r4, #12]
 800d64e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d656:	81a3      	strh	r3, [r4, #12]
 800d658:	6126      	str	r6, [r4, #16]
 800d65a:	6165      	str	r5, [r4, #20]
 800d65c:	444e      	add	r6, r9
 800d65e:	eba5 0509 	sub.w	r5, r5, r9
 800d662:	6026      	str	r6, [r4, #0]
 800d664:	60a5      	str	r5, [r4, #8]
 800d666:	463e      	mov	r6, r7
 800d668:	42be      	cmp	r6, r7
 800d66a:	d900      	bls.n	800d66e <__ssputs_r+0x72>
 800d66c:	463e      	mov	r6, r7
 800d66e:	6820      	ldr	r0, [r4, #0]
 800d670:	4632      	mov	r2, r6
 800d672:	4641      	mov	r1, r8
 800d674:	f000 faa6 	bl	800dbc4 <memmove>
 800d678:	68a3      	ldr	r3, [r4, #8]
 800d67a:	1b9b      	subs	r3, r3, r6
 800d67c:	60a3      	str	r3, [r4, #8]
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	4433      	add	r3, r6
 800d682:	6023      	str	r3, [r4, #0]
 800d684:	2000      	movs	r0, #0
 800d686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d68a:	462a      	mov	r2, r5
 800d68c:	f000 fad2 	bl	800dc34 <_realloc_r>
 800d690:	4606      	mov	r6, r0
 800d692:	2800      	cmp	r0, #0
 800d694:	d1e0      	bne.n	800d658 <__ssputs_r+0x5c>
 800d696:	6921      	ldr	r1, [r4, #16]
 800d698:	4650      	mov	r0, sl
 800d69a:	f7ff feb7 	bl	800d40c <_free_r>
 800d69e:	230c      	movs	r3, #12
 800d6a0:	f8ca 3000 	str.w	r3, [sl]
 800d6a4:	89a3      	ldrh	r3, [r4, #12]
 800d6a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6aa:	81a3      	strh	r3, [r4, #12]
 800d6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b0:	e7e9      	b.n	800d686 <__ssputs_r+0x8a>
	...

0800d6b4 <_svfiprintf_r>:
 800d6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b8:	4698      	mov	r8, r3
 800d6ba:	898b      	ldrh	r3, [r1, #12]
 800d6bc:	061b      	lsls	r3, r3, #24
 800d6be:	b09d      	sub	sp, #116	@ 0x74
 800d6c0:	4607      	mov	r7, r0
 800d6c2:	460d      	mov	r5, r1
 800d6c4:	4614      	mov	r4, r2
 800d6c6:	d510      	bpl.n	800d6ea <_svfiprintf_r+0x36>
 800d6c8:	690b      	ldr	r3, [r1, #16]
 800d6ca:	b973      	cbnz	r3, 800d6ea <_svfiprintf_r+0x36>
 800d6cc:	2140      	movs	r1, #64	@ 0x40
 800d6ce:	f7ff ff09 	bl	800d4e4 <_malloc_r>
 800d6d2:	6028      	str	r0, [r5, #0]
 800d6d4:	6128      	str	r0, [r5, #16]
 800d6d6:	b930      	cbnz	r0, 800d6e6 <_svfiprintf_r+0x32>
 800d6d8:	230c      	movs	r3, #12
 800d6da:	603b      	str	r3, [r7, #0]
 800d6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e0:	b01d      	add	sp, #116	@ 0x74
 800d6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6e6:	2340      	movs	r3, #64	@ 0x40
 800d6e8:	616b      	str	r3, [r5, #20]
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6ee:	2320      	movs	r3, #32
 800d6f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d6f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6f8:	2330      	movs	r3, #48	@ 0x30
 800d6fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d898 <_svfiprintf_r+0x1e4>
 800d6fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d702:	f04f 0901 	mov.w	r9, #1
 800d706:	4623      	mov	r3, r4
 800d708:	469a      	mov	sl, r3
 800d70a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d70e:	b10a      	cbz	r2, 800d714 <_svfiprintf_r+0x60>
 800d710:	2a25      	cmp	r2, #37	@ 0x25
 800d712:	d1f9      	bne.n	800d708 <_svfiprintf_r+0x54>
 800d714:	ebba 0b04 	subs.w	fp, sl, r4
 800d718:	d00b      	beq.n	800d732 <_svfiprintf_r+0x7e>
 800d71a:	465b      	mov	r3, fp
 800d71c:	4622      	mov	r2, r4
 800d71e:	4629      	mov	r1, r5
 800d720:	4638      	mov	r0, r7
 800d722:	f7ff ff6b 	bl	800d5fc <__ssputs_r>
 800d726:	3001      	adds	r0, #1
 800d728:	f000 80a7 	beq.w	800d87a <_svfiprintf_r+0x1c6>
 800d72c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d72e:	445a      	add	r2, fp
 800d730:	9209      	str	r2, [sp, #36]	@ 0x24
 800d732:	f89a 3000 	ldrb.w	r3, [sl]
 800d736:	2b00      	cmp	r3, #0
 800d738:	f000 809f 	beq.w	800d87a <_svfiprintf_r+0x1c6>
 800d73c:	2300      	movs	r3, #0
 800d73e:	f04f 32ff 	mov.w	r2, #4294967295
 800d742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d746:	f10a 0a01 	add.w	sl, sl, #1
 800d74a:	9304      	str	r3, [sp, #16]
 800d74c:	9307      	str	r3, [sp, #28]
 800d74e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d752:	931a      	str	r3, [sp, #104]	@ 0x68
 800d754:	4654      	mov	r4, sl
 800d756:	2205      	movs	r2, #5
 800d758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d75c:	484e      	ldr	r0, [pc, #312]	@ (800d898 <_svfiprintf_r+0x1e4>)
 800d75e:	f7f2 fd4f 	bl	8000200 <memchr>
 800d762:	9a04      	ldr	r2, [sp, #16]
 800d764:	b9d8      	cbnz	r0, 800d79e <_svfiprintf_r+0xea>
 800d766:	06d0      	lsls	r0, r2, #27
 800d768:	bf44      	itt	mi
 800d76a:	2320      	movmi	r3, #32
 800d76c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d770:	0711      	lsls	r1, r2, #28
 800d772:	bf44      	itt	mi
 800d774:	232b      	movmi	r3, #43	@ 0x2b
 800d776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d77a:	f89a 3000 	ldrb.w	r3, [sl]
 800d77e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d780:	d015      	beq.n	800d7ae <_svfiprintf_r+0xfa>
 800d782:	9a07      	ldr	r2, [sp, #28]
 800d784:	4654      	mov	r4, sl
 800d786:	2000      	movs	r0, #0
 800d788:	f04f 0c0a 	mov.w	ip, #10
 800d78c:	4621      	mov	r1, r4
 800d78e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d792:	3b30      	subs	r3, #48	@ 0x30
 800d794:	2b09      	cmp	r3, #9
 800d796:	d94b      	bls.n	800d830 <_svfiprintf_r+0x17c>
 800d798:	b1b0      	cbz	r0, 800d7c8 <_svfiprintf_r+0x114>
 800d79a:	9207      	str	r2, [sp, #28]
 800d79c:	e014      	b.n	800d7c8 <_svfiprintf_r+0x114>
 800d79e:	eba0 0308 	sub.w	r3, r0, r8
 800d7a2:	fa09 f303 	lsl.w	r3, r9, r3
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	9304      	str	r3, [sp, #16]
 800d7aa:	46a2      	mov	sl, r4
 800d7ac:	e7d2      	b.n	800d754 <_svfiprintf_r+0xa0>
 800d7ae:	9b03      	ldr	r3, [sp, #12]
 800d7b0:	1d19      	adds	r1, r3, #4
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	9103      	str	r1, [sp, #12]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	bfbb      	ittet	lt
 800d7ba:	425b      	neglt	r3, r3
 800d7bc:	f042 0202 	orrlt.w	r2, r2, #2
 800d7c0:	9307      	strge	r3, [sp, #28]
 800d7c2:	9307      	strlt	r3, [sp, #28]
 800d7c4:	bfb8      	it	lt
 800d7c6:	9204      	strlt	r2, [sp, #16]
 800d7c8:	7823      	ldrb	r3, [r4, #0]
 800d7ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7cc:	d10a      	bne.n	800d7e4 <_svfiprintf_r+0x130>
 800d7ce:	7863      	ldrb	r3, [r4, #1]
 800d7d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d7d2:	d132      	bne.n	800d83a <_svfiprintf_r+0x186>
 800d7d4:	9b03      	ldr	r3, [sp, #12]
 800d7d6:	1d1a      	adds	r2, r3, #4
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	9203      	str	r2, [sp, #12]
 800d7dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d7e0:	3402      	adds	r4, #2
 800d7e2:	9305      	str	r3, [sp, #20]
 800d7e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d8a8 <_svfiprintf_r+0x1f4>
 800d7e8:	7821      	ldrb	r1, [r4, #0]
 800d7ea:	2203      	movs	r2, #3
 800d7ec:	4650      	mov	r0, sl
 800d7ee:	f7f2 fd07 	bl	8000200 <memchr>
 800d7f2:	b138      	cbz	r0, 800d804 <_svfiprintf_r+0x150>
 800d7f4:	9b04      	ldr	r3, [sp, #16]
 800d7f6:	eba0 000a 	sub.w	r0, r0, sl
 800d7fa:	2240      	movs	r2, #64	@ 0x40
 800d7fc:	4082      	lsls	r2, r0
 800d7fe:	4313      	orrs	r3, r2
 800d800:	3401      	adds	r4, #1
 800d802:	9304      	str	r3, [sp, #16]
 800d804:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d808:	4824      	ldr	r0, [pc, #144]	@ (800d89c <_svfiprintf_r+0x1e8>)
 800d80a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d80e:	2206      	movs	r2, #6
 800d810:	f7f2 fcf6 	bl	8000200 <memchr>
 800d814:	2800      	cmp	r0, #0
 800d816:	d036      	beq.n	800d886 <_svfiprintf_r+0x1d2>
 800d818:	4b21      	ldr	r3, [pc, #132]	@ (800d8a0 <_svfiprintf_r+0x1ec>)
 800d81a:	bb1b      	cbnz	r3, 800d864 <_svfiprintf_r+0x1b0>
 800d81c:	9b03      	ldr	r3, [sp, #12]
 800d81e:	3307      	adds	r3, #7
 800d820:	f023 0307 	bic.w	r3, r3, #7
 800d824:	3308      	adds	r3, #8
 800d826:	9303      	str	r3, [sp, #12]
 800d828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d82a:	4433      	add	r3, r6
 800d82c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d82e:	e76a      	b.n	800d706 <_svfiprintf_r+0x52>
 800d830:	fb0c 3202 	mla	r2, ip, r2, r3
 800d834:	460c      	mov	r4, r1
 800d836:	2001      	movs	r0, #1
 800d838:	e7a8      	b.n	800d78c <_svfiprintf_r+0xd8>
 800d83a:	2300      	movs	r3, #0
 800d83c:	3401      	adds	r4, #1
 800d83e:	9305      	str	r3, [sp, #20]
 800d840:	4619      	mov	r1, r3
 800d842:	f04f 0c0a 	mov.w	ip, #10
 800d846:	4620      	mov	r0, r4
 800d848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d84c:	3a30      	subs	r2, #48	@ 0x30
 800d84e:	2a09      	cmp	r2, #9
 800d850:	d903      	bls.n	800d85a <_svfiprintf_r+0x1a6>
 800d852:	2b00      	cmp	r3, #0
 800d854:	d0c6      	beq.n	800d7e4 <_svfiprintf_r+0x130>
 800d856:	9105      	str	r1, [sp, #20]
 800d858:	e7c4      	b.n	800d7e4 <_svfiprintf_r+0x130>
 800d85a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d85e:	4604      	mov	r4, r0
 800d860:	2301      	movs	r3, #1
 800d862:	e7f0      	b.n	800d846 <_svfiprintf_r+0x192>
 800d864:	ab03      	add	r3, sp, #12
 800d866:	9300      	str	r3, [sp, #0]
 800d868:	462a      	mov	r2, r5
 800d86a:	4b0e      	ldr	r3, [pc, #56]	@ (800d8a4 <_svfiprintf_r+0x1f0>)
 800d86c:	a904      	add	r1, sp, #16
 800d86e:	4638      	mov	r0, r7
 800d870:	f3af 8000 	nop.w
 800d874:	1c42      	adds	r2, r0, #1
 800d876:	4606      	mov	r6, r0
 800d878:	d1d6      	bne.n	800d828 <_svfiprintf_r+0x174>
 800d87a:	89ab      	ldrh	r3, [r5, #12]
 800d87c:	065b      	lsls	r3, r3, #25
 800d87e:	f53f af2d 	bmi.w	800d6dc <_svfiprintf_r+0x28>
 800d882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d884:	e72c      	b.n	800d6e0 <_svfiprintf_r+0x2c>
 800d886:	ab03      	add	r3, sp, #12
 800d888:	9300      	str	r3, [sp, #0]
 800d88a:	462a      	mov	r2, r5
 800d88c:	4b05      	ldr	r3, [pc, #20]	@ (800d8a4 <_svfiprintf_r+0x1f0>)
 800d88e:	a904      	add	r1, sp, #16
 800d890:	4638      	mov	r0, r7
 800d892:	f000 f879 	bl	800d988 <_printf_i>
 800d896:	e7ed      	b.n	800d874 <_svfiprintf_r+0x1c0>
 800d898:	0800e0cc 	.word	0x0800e0cc
 800d89c:	0800e0d6 	.word	0x0800e0d6
 800d8a0:	00000000 	.word	0x00000000
 800d8a4:	0800d5fd 	.word	0x0800d5fd
 800d8a8:	0800e0d2 	.word	0x0800e0d2

0800d8ac <_printf_common>:
 800d8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8b0:	4616      	mov	r6, r2
 800d8b2:	4698      	mov	r8, r3
 800d8b4:	688a      	ldr	r2, [r1, #8]
 800d8b6:	690b      	ldr	r3, [r1, #16]
 800d8b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	bfb8      	it	lt
 800d8c0:	4613      	movlt	r3, r2
 800d8c2:	6033      	str	r3, [r6, #0]
 800d8c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d8c8:	4607      	mov	r7, r0
 800d8ca:	460c      	mov	r4, r1
 800d8cc:	b10a      	cbz	r2, 800d8d2 <_printf_common+0x26>
 800d8ce:	3301      	adds	r3, #1
 800d8d0:	6033      	str	r3, [r6, #0]
 800d8d2:	6823      	ldr	r3, [r4, #0]
 800d8d4:	0699      	lsls	r1, r3, #26
 800d8d6:	bf42      	ittt	mi
 800d8d8:	6833      	ldrmi	r3, [r6, #0]
 800d8da:	3302      	addmi	r3, #2
 800d8dc:	6033      	strmi	r3, [r6, #0]
 800d8de:	6825      	ldr	r5, [r4, #0]
 800d8e0:	f015 0506 	ands.w	r5, r5, #6
 800d8e4:	d106      	bne.n	800d8f4 <_printf_common+0x48>
 800d8e6:	f104 0a19 	add.w	sl, r4, #25
 800d8ea:	68e3      	ldr	r3, [r4, #12]
 800d8ec:	6832      	ldr	r2, [r6, #0]
 800d8ee:	1a9b      	subs	r3, r3, r2
 800d8f0:	42ab      	cmp	r3, r5
 800d8f2:	dc26      	bgt.n	800d942 <_printf_common+0x96>
 800d8f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d8f8:	6822      	ldr	r2, [r4, #0]
 800d8fa:	3b00      	subs	r3, #0
 800d8fc:	bf18      	it	ne
 800d8fe:	2301      	movne	r3, #1
 800d900:	0692      	lsls	r2, r2, #26
 800d902:	d42b      	bmi.n	800d95c <_printf_common+0xb0>
 800d904:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d908:	4641      	mov	r1, r8
 800d90a:	4638      	mov	r0, r7
 800d90c:	47c8      	blx	r9
 800d90e:	3001      	adds	r0, #1
 800d910:	d01e      	beq.n	800d950 <_printf_common+0xa4>
 800d912:	6823      	ldr	r3, [r4, #0]
 800d914:	6922      	ldr	r2, [r4, #16]
 800d916:	f003 0306 	and.w	r3, r3, #6
 800d91a:	2b04      	cmp	r3, #4
 800d91c:	bf02      	ittt	eq
 800d91e:	68e5      	ldreq	r5, [r4, #12]
 800d920:	6833      	ldreq	r3, [r6, #0]
 800d922:	1aed      	subeq	r5, r5, r3
 800d924:	68a3      	ldr	r3, [r4, #8]
 800d926:	bf0c      	ite	eq
 800d928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d92c:	2500      	movne	r5, #0
 800d92e:	4293      	cmp	r3, r2
 800d930:	bfc4      	itt	gt
 800d932:	1a9b      	subgt	r3, r3, r2
 800d934:	18ed      	addgt	r5, r5, r3
 800d936:	2600      	movs	r6, #0
 800d938:	341a      	adds	r4, #26
 800d93a:	42b5      	cmp	r5, r6
 800d93c:	d11a      	bne.n	800d974 <_printf_common+0xc8>
 800d93e:	2000      	movs	r0, #0
 800d940:	e008      	b.n	800d954 <_printf_common+0xa8>
 800d942:	2301      	movs	r3, #1
 800d944:	4652      	mov	r2, sl
 800d946:	4641      	mov	r1, r8
 800d948:	4638      	mov	r0, r7
 800d94a:	47c8      	blx	r9
 800d94c:	3001      	adds	r0, #1
 800d94e:	d103      	bne.n	800d958 <_printf_common+0xac>
 800d950:	f04f 30ff 	mov.w	r0, #4294967295
 800d954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d958:	3501      	adds	r5, #1
 800d95a:	e7c6      	b.n	800d8ea <_printf_common+0x3e>
 800d95c:	18e1      	adds	r1, r4, r3
 800d95e:	1c5a      	adds	r2, r3, #1
 800d960:	2030      	movs	r0, #48	@ 0x30
 800d962:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d966:	4422      	add	r2, r4
 800d968:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d96c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d970:	3302      	adds	r3, #2
 800d972:	e7c7      	b.n	800d904 <_printf_common+0x58>
 800d974:	2301      	movs	r3, #1
 800d976:	4622      	mov	r2, r4
 800d978:	4641      	mov	r1, r8
 800d97a:	4638      	mov	r0, r7
 800d97c:	47c8      	blx	r9
 800d97e:	3001      	adds	r0, #1
 800d980:	d0e6      	beq.n	800d950 <_printf_common+0xa4>
 800d982:	3601      	adds	r6, #1
 800d984:	e7d9      	b.n	800d93a <_printf_common+0x8e>
	...

0800d988 <_printf_i>:
 800d988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d98c:	7e0f      	ldrb	r7, [r1, #24]
 800d98e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d990:	2f78      	cmp	r7, #120	@ 0x78
 800d992:	4691      	mov	r9, r2
 800d994:	4680      	mov	r8, r0
 800d996:	460c      	mov	r4, r1
 800d998:	469a      	mov	sl, r3
 800d99a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d99e:	d807      	bhi.n	800d9b0 <_printf_i+0x28>
 800d9a0:	2f62      	cmp	r7, #98	@ 0x62
 800d9a2:	d80a      	bhi.n	800d9ba <_printf_i+0x32>
 800d9a4:	2f00      	cmp	r7, #0
 800d9a6:	f000 80d1 	beq.w	800db4c <_printf_i+0x1c4>
 800d9aa:	2f58      	cmp	r7, #88	@ 0x58
 800d9ac:	f000 80b8 	beq.w	800db20 <_printf_i+0x198>
 800d9b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d9b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d9b8:	e03a      	b.n	800da30 <_printf_i+0xa8>
 800d9ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d9be:	2b15      	cmp	r3, #21
 800d9c0:	d8f6      	bhi.n	800d9b0 <_printf_i+0x28>
 800d9c2:	a101      	add	r1, pc, #4	@ (adr r1, 800d9c8 <_printf_i+0x40>)
 800d9c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9c8:	0800da21 	.word	0x0800da21
 800d9cc:	0800da35 	.word	0x0800da35
 800d9d0:	0800d9b1 	.word	0x0800d9b1
 800d9d4:	0800d9b1 	.word	0x0800d9b1
 800d9d8:	0800d9b1 	.word	0x0800d9b1
 800d9dc:	0800d9b1 	.word	0x0800d9b1
 800d9e0:	0800da35 	.word	0x0800da35
 800d9e4:	0800d9b1 	.word	0x0800d9b1
 800d9e8:	0800d9b1 	.word	0x0800d9b1
 800d9ec:	0800d9b1 	.word	0x0800d9b1
 800d9f0:	0800d9b1 	.word	0x0800d9b1
 800d9f4:	0800db33 	.word	0x0800db33
 800d9f8:	0800da5f 	.word	0x0800da5f
 800d9fc:	0800daed 	.word	0x0800daed
 800da00:	0800d9b1 	.word	0x0800d9b1
 800da04:	0800d9b1 	.word	0x0800d9b1
 800da08:	0800db55 	.word	0x0800db55
 800da0c:	0800d9b1 	.word	0x0800d9b1
 800da10:	0800da5f 	.word	0x0800da5f
 800da14:	0800d9b1 	.word	0x0800d9b1
 800da18:	0800d9b1 	.word	0x0800d9b1
 800da1c:	0800daf5 	.word	0x0800daf5
 800da20:	6833      	ldr	r3, [r6, #0]
 800da22:	1d1a      	adds	r2, r3, #4
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	6032      	str	r2, [r6, #0]
 800da28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800da30:	2301      	movs	r3, #1
 800da32:	e09c      	b.n	800db6e <_printf_i+0x1e6>
 800da34:	6833      	ldr	r3, [r6, #0]
 800da36:	6820      	ldr	r0, [r4, #0]
 800da38:	1d19      	adds	r1, r3, #4
 800da3a:	6031      	str	r1, [r6, #0]
 800da3c:	0606      	lsls	r6, r0, #24
 800da3e:	d501      	bpl.n	800da44 <_printf_i+0xbc>
 800da40:	681d      	ldr	r5, [r3, #0]
 800da42:	e003      	b.n	800da4c <_printf_i+0xc4>
 800da44:	0645      	lsls	r5, r0, #25
 800da46:	d5fb      	bpl.n	800da40 <_printf_i+0xb8>
 800da48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800da4c:	2d00      	cmp	r5, #0
 800da4e:	da03      	bge.n	800da58 <_printf_i+0xd0>
 800da50:	232d      	movs	r3, #45	@ 0x2d
 800da52:	426d      	negs	r5, r5
 800da54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da58:	4858      	ldr	r0, [pc, #352]	@ (800dbbc <_printf_i+0x234>)
 800da5a:	230a      	movs	r3, #10
 800da5c:	e011      	b.n	800da82 <_printf_i+0xfa>
 800da5e:	6821      	ldr	r1, [r4, #0]
 800da60:	6833      	ldr	r3, [r6, #0]
 800da62:	0608      	lsls	r0, r1, #24
 800da64:	f853 5b04 	ldr.w	r5, [r3], #4
 800da68:	d402      	bmi.n	800da70 <_printf_i+0xe8>
 800da6a:	0649      	lsls	r1, r1, #25
 800da6c:	bf48      	it	mi
 800da6e:	b2ad      	uxthmi	r5, r5
 800da70:	2f6f      	cmp	r7, #111	@ 0x6f
 800da72:	4852      	ldr	r0, [pc, #328]	@ (800dbbc <_printf_i+0x234>)
 800da74:	6033      	str	r3, [r6, #0]
 800da76:	bf14      	ite	ne
 800da78:	230a      	movne	r3, #10
 800da7a:	2308      	moveq	r3, #8
 800da7c:	2100      	movs	r1, #0
 800da7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800da82:	6866      	ldr	r6, [r4, #4]
 800da84:	60a6      	str	r6, [r4, #8]
 800da86:	2e00      	cmp	r6, #0
 800da88:	db05      	blt.n	800da96 <_printf_i+0x10e>
 800da8a:	6821      	ldr	r1, [r4, #0]
 800da8c:	432e      	orrs	r6, r5
 800da8e:	f021 0104 	bic.w	r1, r1, #4
 800da92:	6021      	str	r1, [r4, #0]
 800da94:	d04b      	beq.n	800db2e <_printf_i+0x1a6>
 800da96:	4616      	mov	r6, r2
 800da98:	fbb5 f1f3 	udiv	r1, r5, r3
 800da9c:	fb03 5711 	mls	r7, r3, r1, r5
 800daa0:	5dc7      	ldrb	r7, [r0, r7]
 800daa2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800daa6:	462f      	mov	r7, r5
 800daa8:	42bb      	cmp	r3, r7
 800daaa:	460d      	mov	r5, r1
 800daac:	d9f4      	bls.n	800da98 <_printf_i+0x110>
 800daae:	2b08      	cmp	r3, #8
 800dab0:	d10b      	bne.n	800daca <_printf_i+0x142>
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	07df      	lsls	r7, r3, #31
 800dab6:	d508      	bpl.n	800daca <_printf_i+0x142>
 800dab8:	6923      	ldr	r3, [r4, #16]
 800daba:	6861      	ldr	r1, [r4, #4]
 800dabc:	4299      	cmp	r1, r3
 800dabe:	bfde      	ittt	le
 800dac0:	2330      	movle	r3, #48	@ 0x30
 800dac2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dac6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800daca:	1b92      	subs	r2, r2, r6
 800dacc:	6122      	str	r2, [r4, #16]
 800dace:	f8cd a000 	str.w	sl, [sp]
 800dad2:	464b      	mov	r3, r9
 800dad4:	aa03      	add	r2, sp, #12
 800dad6:	4621      	mov	r1, r4
 800dad8:	4640      	mov	r0, r8
 800dada:	f7ff fee7 	bl	800d8ac <_printf_common>
 800dade:	3001      	adds	r0, #1
 800dae0:	d14a      	bne.n	800db78 <_printf_i+0x1f0>
 800dae2:	f04f 30ff 	mov.w	r0, #4294967295
 800dae6:	b004      	add	sp, #16
 800dae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daec:	6823      	ldr	r3, [r4, #0]
 800daee:	f043 0320 	orr.w	r3, r3, #32
 800daf2:	6023      	str	r3, [r4, #0]
 800daf4:	4832      	ldr	r0, [pc, #200]	@ (800dbc0 <_printf_i+0x238>)
 800daf6:	2778      	movs	r7, #120	@ 0x78
 800daf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dafc:	6823      	ldr	r3, [r4, #0]
 800dafe:	6831      	ldr	r1, [r6, #0]
 800db00:	061f      	lsls	r7, r3, #24
 800db02:	f851 5b04 	ldr.w	r5, [r1], #4
 800db06:	d402      	bmi.n	800db0e <_printf_i+0x186>
 800db08:	065f      	lsls	r7, r3, #25
 800db0a:	bf48      	it	mi
 800db0c:	b2ad      	uxthmi	r5, r5
 800db0e:	6031      	str	r1, [r6, #0]
 800db10:	07d9      	lsls	r1, r3, #31
 800db12:	bf44      	itt	mi
 800db14:	f043 0320 	orrmi.w	r3, r3, #32
 800db18:	6023      	strmi	r3, [r4, #0]
 800db1a:	b11d      	cbz	r5, 800db24 <_printf_i+0x19c>
 800db1c:	2310      	movs	r3, #16
 800db1e:	e7ad      	b.n	800da7c <_printf_i+0xf4>
 800db20:	4826      	ldr	r0, [pc, #152]	@ (800dbbc <_printf_i+0x234>)
 800db22:	e7e9      	b.n	800daf8 <_printf_i+0x170>
 800db24:	6823      	ldr	r3, [r4, #0]
 800db26:	f023 0320 	bic.w	r3, r3, #32
 800db2a:	6023      	str	r3, [r4, #0]
 800db2c:	e7f6      	b.n	800db1c <_printf_i+0x194>
 800db2e:	4616      	mov	r6, r2
 800db30:	e7bd      	b.n	800daae <_printf_i+0x126>
 800db32:	6833      	ldr	r3, [r6, #0]
 800db34:	6825      	ldr	r5, [r4, #0]
 800db36:	6961      	ldr	r1, [r4, #20]
 800db38:	1d18      	adds	r0, r3, #4
 800db3a:	6030      	str	r0, [r6, #0]
 800db3c:	062e      	lsls	r6, r5, #24
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	d501      	bpl.n	800db46 <_printf_i+0x1be>
 800db42:	6019      	str	r1, [r3, #0]
 800db44:	e002      	b.n	800db4c <_printf_i+0x1c4>
 800db46:	0668      	lsls	r0, r5, #25
 800db48:	d5fb      	bpl.n	800db42 <_printf_i+0x1ba>
 800db4a:	8019      	strh	r1, [r3, #0]
 800db4c:	2300      	movs	r3, #0
 800db4e:	6123      	str	r3, [r4, #16]
 800db50:	4616      	mov	r6, r2
 800db52:	e7bc      	b.n	800dace <_printf_i+0x146>
 800db54:	6833      	ldr	r3, [r6, #0]
 800db56:	1d1a      	adds	r2, r3, #4
 800db58:	6032      	str	r2, [r6, #0]
 800db5a:	681e      	ldr	r6, [r3, #0]
 800db5c:	6862      	ldr	r2, [r4, #4]
 800db5e:	2100      	movs	r1, #0
 800db60:	4630      	mov	r0, r6
 800db62:	f7f2 fb4d 	bl	8000200 <memchr>
 800db66:	b108      	cbz	r0, 800db6c <_printf_i+0x1e4>
 800db68:	1b80      	subs	r0, r0, r6
 800db6a:	6060      	str	r0, [r4, #4]
 800db6c:	6863      	ldr	r3, [r4, #4]
 800db6e:	6123      	str	r3, [r4, #16]
 800db70:	2300      	movs	r3, #0
 800db72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db76:	e7aa      	b.n	800dace <_printf_i+0x146>
 800db78:	6923      	ldr	r3, [r4, #16]
 800db7a:	4632      	mov	r2, r6
 800db7c:	4649      	mov	r1, r9
 800db7e:	4640      	mov	r0, r8
 800db80:	47d0      	blx	sl
 800db82:	3001      	adds	r0, #1
 800db84:	d0ad      	beq.n	800dae2 <_printf_i+0x15a>
 800db86:	6823      	ldr	r3, [r4, #0]
 800db88:	079b      	lsls	r3, r3, #30
 800db8a:	d413      	bmi.n	800dbb4 <_printf_i+0x22c>
 800db8c:	68e0      	ldr	r0, [r4, #12]
 800db8e:	9b03      	ldr	r3, [sp, #12]
 800db90:	4298      	cmp	r0, r3
 800db92:	bfb8      	it	lt
 800db94:	4618      	movlt	r0, r3
 800db96:	e7a6      	b.n	800dae6 <_printf_i+0x15e>
 800db98:	2301      	movs	r3, #1
 800db9a:	4632      	mov	r2, r6
 800db9c:	4649      	mov	r1, r9
 800db9e:	4640      	mov	r0, r8
 800dba0:	47d0      	blx	sl
 800dba2:	3001      	adds	r0, #1
 800dba4:	d09d      	beq.n	800dae2 <_printf_i+0x15a>
 800dba6:	3501      	adds	r5, #1
 800dba8:	68e3      	ldr	r3, [r4, #12]
 800dbaa:	9903      	ldr	r1, [sp, #12]
 800dbac:	1a5b      	subs	r3, r3, r1
 800dbae:	42ab      	cmp	r3, r5
 800dbb0:	dcf2      	bgt.n	800db98 <_printf_i+0x210>
 800dbb2:	e7eb      	b.n	800db8c <_printf_i+0x204>
 800dbb4:	2500      	movs	r5, #0
 800dbb6:	f104 0619 	add.w	r6, r4, #25
 800dbba:	e7f5      	b.n	800dba8 <_printf_i+0x220>
 800dbbc:	0800e0dd 	.word	0x0800e0dd
 800dbc0:	0800e0ee 	.word	0x0800e0ee

0800dbc4 <memmove>:
 800dbc4:	4288      	cmp	r0, r1
 800dbc6:	b510      	push	{r4, lr}
 800dbc8:	eb01 0402 	add.w	r4, r1, r2
 800dbcc:	d902      	bls.n	800dbd4 <memmove+0x10>
 800dbce:	4284      	cmp	r4, r0
 800dbd0:	4623      	mov	r3, r4
 800dbd2:	d807      	bhi.n	800dbe4 <memmove+0x20>
 800dbd4:	1e43      	subs	r3, r0, #1
 800dbd6:	42a1      	cmp	r1, r4
 800dbd8:	d008      	beq.n	800dbec <memmove+0x28>
 800dbda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dbde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dbe2:	e7f8      	b.n	800dbd6 <memmove+0x12>
 800dbe4:	4402      	add	r2, r0
 800dbe6:	4601      	mov	r1, r0
 800dbe8:	428a      	cmp	r2, r1
 800dbea:	d100      	bne.n	800dbee <memmove+0x2a>
 800dbec:	bd10      	pop	{r4, pc}
 800dbee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dbf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dbf6:	e7f7      	b.n	800dbe8 <memmove+0x24>

0800dbf8 <_sbrk_r>:
 800dbf8:	b538      	push	{r3, r4, r5, lr}
 800dbfa:	4d06      	ldr	r5, [pc, #24]	@ (800dc14 <_sbrk_r+0x1c>)
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	4604      	mov	r4, r0
 800dc00:	4608      	mov	r0, r1
 800dc02:	602b      	str	r3, [r5, #0]
 800dc04:	f7f5 fb52 	bl	80032ac <_sbrk>
 800dc08:	1c43      	adds	r3, r0, #1
 800dc0a:	d102      	bne.n	800dc12 <_sbrk_r+0x1a>
 800dc0c:	682b      	ldr	r3, [r5, #0]
 800dc0e:	b103      	cbz	r3, 800dc12 <_sbrk_r+0x1a>
 800dc10:	6023      	str	r3, [r4, #0]
 800dc12:	bd38      	pop	{r3, r4, r5, pc}
 800dc14:	20000468 	.word	0x20000468

0800dc18 <memcpy>:
 800dc18:	440a      	add	r2, r1
 800dc1a:	4291      	cmp	r1, r2
 800dc1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc20:	d100      	bne.n	800dc24 <memcpy+0xc>
 800dc22:	4770      	bx	lr
 800dc24:	b510      	push	{r4, lr}
 800dc26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc2e:	4291      	cmp	r1, r2
 800dc30:	d1f9      	bne.n	800dc26 <memcpy+0xe>
 800dc32:	bd10      	pop	{r4, pc}

0800dc34 <_realloc_r>:
 800dc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc38:	4607      	mov	r7, r0
 800dc3a:	4614      	mov	r4, r2
 800dc3c:	460d      	mov	r5, r1
 800dc3e:	b921      	cbnz	r1, 800dc4a <_realloc_r+0x16>
 800dc40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc44:	4611      	mov	r1, r2
 800dc46:	f7ff bc4d 	b.w	800d4e4 <_malloc_r>
 800dc4a:	b92a      	cbnz	r2, 800dc58 <_realloc_r+0x24>
 800dc4c:	f7ff fbde 	bl	800d40c <_free_r>
 800dc50:	4625      	mov	r5, r4
 800dc52:	4628      	mov	r0, r5
 800dc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc58:	f000 f81a 	bl	800dc90 <_malloc_usable_size_r>
 800dc5c:	4284      	cmp	r4, r0
 800dc5e:	4606      	mov	r6, r0
 800dc60:	d802      	bhi.n	800dc68 <_realloc_r+0x34>
 800dc62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc66:	d8f4      	bhi.n	800dc52 <_realloc_r+0x1e>
 800dc68:	4621      	mov	r1, r4
 800dc6a:	4638      	mov	r0, r7
 800dc6c:	f7ff fc3a 	bl	800d4e4 <_malloc_r>
 800dc70:	4680      	mov	r8, r0
 800dc72:	b908      	cbnz	r0, 800dc78 <_realloc_r+0x44>
 800dc74:	4645      	mov	r5, r8
 800dc76:	e7ec      	b.n	800dc52 <_realloc_r+0x1e>
 800dc78:	42b4      	cmp	r4, r6
 800dc7a:	4622      	mov	r2, r4
 800dc7c:	4629      	mov	r1, r5
 800dc7e:	bf28      	it	cs
 800dc80:	4632      	movcs	r2, r6
 800dc82:	f7ff ffc9 	bl	800dc18 <memcpy>
 800dc86:	4629      	mov	r1, r5
 800dc88:	4638      	mov	r0, r7
 800dc8a:	f7ff fbbf 	bl	800d40c <_free_r>
 800dc8e:	e7f1      	b.n	800dc74 <_realloc_r+0x40>

0800dc90 <_malloc_usable_size_r>:
 800dc90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc94:	1f18      	subs	r0, r3, #4
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	bfbc      	itt	lt
 800dc9a:	580b      	ldrlt	r3, [r1, r0]
 800dc9c:	18c0      	addlt	r0, r0, r3
 800dc9e:	4770      	bx	lr

0800dca0 <_init>:
 800dca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dca2:	bf00      	nop
 800dca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dca6:	bc08      	pop	{r3}
 800dca8:	469e      	mov	lr, r3
 800dcaa:	4770      	bx	lr

0800dcac <_fini>:
 800dcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcae:	bf00      	nop
 800dcb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dcb2:	bc08      	pop	{r3}
 800dcb4:	469e      	mov	lr, r3
 800dcb6:	4770      	bx	lr
