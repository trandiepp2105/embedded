
PROJECT_TEAM_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08006c48  08006c48  00007c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f30  08006f30  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f30  08006f30  00007f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f38  08006f38  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f38  08006f38  00007f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f3c  08006f3c  00007f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006f40  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000805c  2**0
                  CONTENTS
 10 .bss          00000258  20000060  20000060  00008060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200002b8  200002b8  00008060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b374  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f18  00000000  00000000  00013400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  00015318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e89  00000000  00000000  00015da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e68e  00000000  00000000  00018c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba69f  00000000  00000000  000272b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1956  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 0000080a  00000000  00000000  000e1999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000031dc  00000000  00000000  000e21a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  000e5380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c30 	.word	0x08006c30

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006c30 	.word	0x08006c30

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b988 	b.w	8000e94 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	468e      	mov	lr, r1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	4688      	mov	r8, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14a      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d962      	bls.n	8000c78 <__udivmoddi4+0xdc>
 8000bb2:	fab2 f682 	clz	r6, r2
 8000bb6:	b14e      	cbz	r6, 8000bcc <__udivmoddi4+0x30>
 8000bb8:	f1c6 0320 	rsb	r3, r6, #32
 8000bbc:	fa01 f806 	lsl.w	r8, r1, r6
 8000bc0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc4:	40b7      	lsls	r7, r6
 8000bc6:	ea43 0808 	orr.w	r8, r3, r8
 8000bca:	40b4      	lsls	r4, r6
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	fa1f fc87 	uxth.w	ip, r7
 8000bd4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd8:	0c23      	lsrs	r3, r4, #16
 8000bda:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be2:	fb01 f20c 	mul.w	r2, r1, ip
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x62>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bf0:	f080 80ea 	bcs.w	8000dc8 <__udivmoddi4+0x22c>
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f240 80e7 	bls.w	8000dc8 <__udivmoddi4+0x22c>
 8000bfa:	3902      	subs	r1, #2
 8000bfc:	443b      	add	r3, r7
 8000bfe:	1a9a      	subs	r2, r3, r2
 8000c00:	b2a3      	uxth	r3, r4
 8000c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c12:	459c      	cmp	ip, r3
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x8e>
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c1c:	f080 80d6 	bcs.w	8000dcc <__udivmoddi4+0x230>
 8000c20:	459c      	cmp	ip, r3
 8000c22:	f240 80d3 	bls.w	8000dcc <__udivmoddi4+0x230>
 8000c26:	443b      	add	r3, r7
 8000c28:	3802      	subs	r0, #2
 8000c2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c2e:	eba3 030c 	sub.w	r3, r3, ip
 8000c32:	2100      	movs	r1, #0
 8000c34:	b11d      	cbz	r5, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40f3      	lsrs	r3, r6
 8000c38:	2200      	movs	r2, #0
 8000c3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d905      	bls.n	8000c52 <__udivmoddi4+0xb6>
 8000c46:	b10d      	cbz	r5, 8000c4c <__udivmoddi4+0xb0>
 8000c48:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4608      	mov	r0, r1
 8000c50:	e7f5      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c52:	fab3 f183 	clz	r1, r3
 8000c56:	2900      	cmp	r1, #0
 8000c58:	d146      	bne.n	8000ce8 <__udivmoddi4+0x14c>
 8000c5a:	4573      	cmp	r3, lr
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xc8>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 8105 	bhi.w	8000e6e <__udivmoddi4+0x2d2>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4690      	mov	r8, r2
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	d0e5      	beq.n	8000c3e <__udivmoddi4+0xa2>
 8000c72:	e9c5 4800 	strd	r4, r8, [r5]
 8000c76:	e7e2      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f000 8090 	beq.w	8000d9e <__udivmoddi4+0x202>
 8000c7e:	fab2 f682 	clz	r6, r2
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f040 80a4 	bne.w	8000dd0 <__udivmoddi4+0x234>
 8000c88:	1a8a      	subs	r2, r1, r2
 8000c8a:	0c03      	lsrs	r3, r0, #16
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	b2bc      	uxth	r4, r7
 8000c94:	2101      	movs	r1, #1
 8000c96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ca2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d907      	bls.n	8000cba <__udivmoddi4+0x11e>
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cb0:	d202      	bcs.n	8000cb8 <__udivmoddi4+0x11c>
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	f200 80e0 	bhi.w	8000e78 <__udivmoddi4+0x2dc>
 8000cb8:	46c4      	mov	ip, r8
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc8:	fb02 f404 	mul.w	r4, r2, r4
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x144>
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x142>
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	f200 80ca 	bhi.w	8000e72 <__udivmoddi4+0x2d6>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0x98>
 8000ce8:	f1c1 0620 	rsb	r6, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf2:	431f      	orrs	r7, r3
 8000cf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000cfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d04:	4323      	orrs	r3, r4
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	fa1f fc87 	uxth.w	ip, r7
 8000d0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d12:	0c1c      	lsrs	r4, r3, #16
 8000d14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d2e:	f080 809c 	bcs.w	8000e6a <__udivmoddi4+0x2ce>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f240 8099 	bls.w	8000e6a <__udivmoddi4+0x2ce>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	443c      	add	r4, r7
 8000d3c:	eba4 040e 	sub.w	r4, r4, lr
 8000d40:	fa1f fe83 	uxth.w	lr, r3
 8000d44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d48:	fb09 4413 	mls	r4, r9, r3, r4
 8000d4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d54:	45a4      	cmp	ip, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1ce>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d5e:	f080 8082 	bcs.w	8000e66 <__udivmoddi4+0x2ca>
 8000d62:	45a4      	cmp	ip, r4
 8000d64:	d97f      	bls.n	8000e66 <__udivmoddi4+0x2ca>
 8000d66:	3b02      	subs	r3, #2
 8000d68:	443c      	add	r4, r7
 8000d6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d76:	4564      	cmp	r4, ip
 8000d78:	4673      	mov	r3, lr
 8000d7a:	46e1      	mov	r9, ip
 8000d7c:	d362      	bcc.n	8000e44 <__udivmoddi4+0x2a8>
 8000d7e:	d05f      	beq.n	8000e40 <__udivmoddi4+0x2a4>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x1fe>
 8000d82:	ebb8 0203 	subs.w	r2, r8, r3
 8000d86:	eb64 0409 	sbc.w	r4, r4, r9
 8000d8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d92:	431e      	orrs	r6, r3
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e74f      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000da2:	0c01      	lsrs	r1, r0, #16
 8000da4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da8:	b280      	uxth	r0, r0
 8000daa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dae:	463b      	mov	r3, r7
 8000db0:	4638      	mov	r0, r7
 8000db2:	463c      	mov	r4, r7
 8000db4:	46b8      	mov	r8, r7
 8000db6:	46be      	mov	lr, r7
 8000db8:	2620      	movs	r6, #32
 8000dba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dbe:	eba2 0208 	sub.w	r2, r2, r8
 8000dc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dc6:	e766      	b.n	8000c96 <__udivmoddi4+0xfa>
 8000dc8:	4601      	mov	r1, r0
 8000dca:	e718      	b.n	8000bfe <__udivmoddi4+0x62>
 8000dcc:	4610      	mov	r0, r2
 8000dce:	e72c      	b.n	8000c2a <__udivmoddi4+0x8e>
 8000dd0:	f1c6 0220 	rsb	r2, r6, #32
 8000dd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd8:	40b7      	lsls	r7, r6
 8000dda:	40b1      	lsls	r1, r6
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de4:	430a      	orrs	r2, r1
 8000de6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dea:	b2bc      	uxth	r4, r7
 8000dec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb08 f904 	mul.w	r9, r8, r4
 8000dfa:	40b0      	lsls	r0, r6
 8000dfc:	4589      	cmp	r9, r1
 8000dfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e02:	b280      	uxth	r0, r0
 8000e04:	d93e      	bls.n	8000e84 <__udivmoddi4+0x2e8>
 8000e06:	1879      	adds	r1, r7, r1
 8000e08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e0c:	d201      	bcs.n	8000e12 <__udivmoddi4+0x276>
 8000e0e:	4589      	cmp	r9, r1
 8000e10:	d81f      	bhi.n	8000e52 <__udivmoddi4+0x2b6>
 8000e12:	eba1 0109 	sub.w	r1, r1, r9
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fb09 f804 	mul.w	r8, r9, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	b292      	uxth	r2, r2
 8000e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e28:	4542      	cmp	r2, r8
 8000e2a:	d229      	bcs.n	8000e80 <__udivmoddi4+0x2e4>
 8000e2c:	18ba      	adds	r2, r7, r2
 8000e2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e32:	d2c4      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e34:	4542      	cmp	r2, r8
 8000e36:	d2c2      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e38:	f1a9 0102 	sub.w	r1, r9, #2
 8000e3c:	443a      	add	r2, r7
 8000e3e:	e7be      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e40:	45f0      	cmp	r8, lr
 8000e42:	d29d      	bcs.n	8000d80 <__udivmoddi4+0x1e4>
 8000e44:	ebbe 0302 	subs.w	r3, lr, r2
 8000e48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	46e1      	mov	r9, ip
 8000e50:	e796      	b.n	8000d80 <__udivmoddi4+0x1e4>
 8000e52:	eba7 0909 	sub.w	r9, r7, r9
 8000e56:	4449      	add	r1, r9
 8000e58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e60:	fb09 f804 	mul.w	r8, r9, r4
 8000e64:	e7db      	b.n	8000e1e <__udivmoddi4+0x282>
 8000e66:	4673      	mov	r3, lr
 8000e68:	e77f      	b.n	8000d6a <__udivmoddi4+0x1ce>
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	e766      	b.n	8000d3c <__udivmoddi4+0x1a0>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e6fd      	b.n	8000c6e <__udivmoddi4+0xd2>
 8000e72:	443b      	add	r3, r7
 8000e74:	3a02      	subs	r2, #2
 8000e76:	e733      	b.n	8000ce0 <__udivmoddi4+0x144>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	e71c      	b.n	8000cba <__udivmoddi4+0x11e>
 8000e80:	4649      	mov	r1, r9
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e84:	eba1 0109 	sub.w	r1, r1, r9
 8000e88:	46c4      	mov	ip, r8
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fb09 f804 	mul.w	r8, r9, r4
 8000e92:	e7c4      	b.n	8000e1e <__udivmoddi4+0x282>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0a8      	sub	sp, #160	@ 0xa0
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  // Task Box Definitions
  uint16_t margin = 10;
 8000e9e:	230a      	movs	r3, #10
 8000ea0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
  uint16_t spacing_between_boxes = 10;
 8000ea4:	230a      	movs	r3, #10
 8000ea6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  // Assuming LCD_WIDTH is 240 and LCD_HEIGHT is 320 from manual_lcd.h
  // If LCD_WIDTH is not 240, task_box_w calculation will be incorrect.
  uint16_t task_box_w = (LCD_WIDTH - 2 * margin - spacing_between_boxes) / 2;
 8000eaa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000eae:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8000eb2:	005a      	lsls	r2, r3, #1
 8000eb4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	0fda      	lsrs	r2, r3, #31
 8000ebc:	4413      	add	r3, r2
 8000ebe:	105b      	asrs	r3, r3, #1
 8000ec0:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
  uint16_t task_box_h = 70;
 8000ec4:	2346      	movs	r3, #70	@ 0x46
 8000ec6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  uint16_t info_box_x = 20;
 8000eca:	2314      	movs	r3, #20
 8000ecc:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  uint16_t info_box_h = 30;
 8000ed0:	231e      	movs	r3, #30
 8000ed2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
  uint16_t start_x_tasks_row1 = info_box_x + info_box_h + 20;
 8000ed6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8000eda:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8000ede:	4413      	add	r3, r2
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	3314      	adds	r3, #20
 8000ee4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
  uint16_t start_x_tasks_row2 = start_x_tasks_row1 + task_box_h + spacing_between_boxes;
 8000ee8:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 8000eec:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000ef0:	4413      	add	r3, r2
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8000ef8:	4413      	add	r3, r2
 8000efa:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

  TaskBox_t task_boxes[] = {
 8000efe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8000f02:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8000f06:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000f0a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000f0e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8000f12:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8000f16:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000f1a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8000f1e:	4bb6      	ldr	r3, [pc, #728]	@ (80011f8 <main+0x360>)
 8000f20:	657b      	str	r3, [r7, #84]	@ 0x54
 8000f22:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8000f26:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
      {start_x_tasks_row1, margin, task_box_w, task_box_h, "Task 02-1"},
      {start_x_tasks_row1, (uint16_t)(margin + task_box_w + spacing_between_boxes), task_box_w, task_box_h, "Task 02-2"},
 8000f2a:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8000f2e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8000f32:	4413      	add	r3, r2
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8000f3a:	4413      	add	r3, r2
 8000f3c:	b29b      	uxth	r3, r3
  TaskBox_t task_boxes[] = {
 8000f3e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 8000f42:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8000f46:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8000f4a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000f4e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8000f52:	4baa      	ldr	r3, [pc, #680]	@ (80011fc <main+0x364>)
 8000f54:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8000f5a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8000f5e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000f62:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8000f66:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8000f6a:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8000f6e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000f72:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8000f76:	4ba2      	ldr	r3, [pc, #648]	@ (8001200 <main+0x368>)
 8000f78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000f7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8000f7e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
      {start_x_tasks_row2, margin, task_box_w, task_box_h, "Task 02-3"},
      {start_x_tasks_row2, (uint16_t)(margin + task_box_w + spacing_between_boxes), task_box_w, task_box_h, "Task 02-4"}};
 8000f82:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8000f86:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8000f8a:	4413      	add	r3, r2
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8000f92:	4413      	add	r3, r2
 8000f94:	b29b      	uxth	r3, r3
  TaskBox_t task_boxes[] = {
 8000f96:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8000f9a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8000f9e:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8000fa2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000fa6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8000faa:	4b96      	ldr	r3, [pc, #600]	@ (8001204 <main+0x36c>)
 8000fac:	67bb      	str	r3, [r7, #120]	@ 0x78
  const int num_tasks = sizeof(task_boxes) / sizeof(task_boxes[0]);
 8000fae:	2304      	movs	r3, #4
 8000fb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  // int highlighted_task_index = -1; // Not currently used
  char info_text_buffer[50];
  Coordinate rawPoint, displayPoint;

  // Define the Back Button Box (ADJUST x, y, w, h AS PER YOUR Manual_LCD_DrawLayout)
  uint16_t back_button_h = 45;
 8000fb4:	232d      	movs	r3, #45	@ 0x2d
 8000fb6:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
  uint16_t back_button_w = 90; // Example height for back button
 8000fba:	235a      	movs	r3, #90	@ 0x5a
 8000fbc:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
  TaskBox_t back_button_box = {
      (uint16_t)(start_x_tasks_row2 + task_box_h + 20),        // x: same margin as tasks
 8000fc0:	f8b7 2086 	ldrh.w	r2, [r7, #134]	@ 0x86
 8000fc4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000fc8:	4413      	add	r3, r2
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	3314      	adds	r3, #20
 8000fce:	b29b      	uxth	r3, r3
  TaskBox_t back_button_box = {
 8000fd0:	80bb      	strh	r3, [r7, #4]
      (uint16_t)(margin + task_box_w + spacing_between_boxes), // y: towards the bottom
 8000fd2:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8000fd6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8000fda:	4413      	add	r3, r2
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8000fe2:	4413      	add	r3, r2
 8000fe4:	b29b      	uxth	r3, r3
  TaskBox_t back_button_box = {
 8000fe6:	80fb      	strh	r3, [r7, #6]
 8000fe8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	@ 0x7c
 8000fec:	813b      	strh	r3, [r7, #8]
 8000fee:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 8000ff2:	817b      	strh	r3, [r7, #10]
 8000ff4:	4b84      	ldr	r3, [pc, #528]	@ (8001208 <main+0x370>)
 8000ff6:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff8:	f001 fe60 	bl	8002cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffc:	f000 f90e 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001000:	f000 f9d8 	bl	80013b4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001004:	f000 f9a0 	bl	8001348 <MX_SPI1_Init>
  MX_I2C2_Init();
 8001008:	f000 f970 	bl	80012ec <MX_I2C2_Init>
  Manual_LCD_Init();
 800100c:	f000 fb1a 	bl	8001644 <Manual_LCD_Init>
  Manual_Touch_Init(&hspi1);
 8001010:	487e      	ldr	r0, [pc, #504]	@ (800120c <main+0x374>)
 8001012:	f001 f9cf 	bl	80023b4 <Manual_Touch_Init>

  Manual_LCD_Clear(COLOR_BLACK);
 8001016:	2000      	movs	r0, #0
 8001018:	f000 fc2e 	bl	8001878 <Manual_LCD_Clear>
  Manual_LCD_DrawLayout(); // This function should draw the tasks and the back button
 800101c:	f000 ff3c 	bl	8001e98 <Manual_LCD_DrawLayout>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (Manual_Touch_Pressed())
 8001020:	f001 f9de 	bl	80023e0 <Manual_Touch_Pressed>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 80e1 	beq.w	80011ee <main+0x356>
    {
      if (Manual_Touch_GetRawPoint(&rawPoint))
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4618      	mov	r0, r3
 8001032:	f001 f9e5 	bl	8002400 <Manual_Touch_GetRawPoint>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	f000 80c4 	beq.w	80011c6 <main+0x32e>
      {
        Manual_Touch_ApplyCalibration(&displayPoint, &rawPoint);
 800103e:	f107 0214 	add.w	r2, r7, #20
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fbbb 	bl	80027c4 <Manual_Touch_ApplyCalibration>

        int task_hit_index = -1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        for (int i = 0; i < num_tasks; i++)
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800105c:	e057      	b.n	800110e <main+0x276>
        {
          if (displayPoint.x >= task_boxes[i].x && displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 800105e:	8a39      	ldrh	r1, [r7, #16]
 8001060:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	33a0      	adds	r3, #160	@ 0xa0
 800106e:	443b      	add	r3, r7
 8001070:	3b54      	subs	r3, #84	@ 0x54
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	4299      	cmp	r1, r3
 8001076:	d345      	bcc.n	8001104 <main+0x26c>
 8001078:	8a3b      	ldrh	r3, [r7, #16]
 800107a:	4619      	mov	r1, r3
 800107c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001080:	4613      	mov	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	33a0      	adds	r3, #160	@ 0xa0
 800108a:	443b      	add	r3, r7
 800108c:	3b54      	subs	r3, #84	@ 0x54
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	33a0      	adds	r3, #160	@ 0xa0
 80010a0:	443b      	add	r3, r7
 80010a2:	3b50      	subs	r3, #80	@ 0x50
 80010a4:	881b      	ldrh	r3, [r3, #0]
 80010a6:	4403      	add	r3, r0
 80010a8:	4299      	cmp	r1, r3
 80010aa:	da2b      	bge.n	8001104 <main+0x26c>
              displayPoint.y >= task_boxes[i].y && displayPoint.y < (task_boxes[i].y + task_boxes[i].h))
 80010ac:	8a79      	ldrh	r1, [r7, #18]
 80010ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	33a0      	adds	r3, #160	@ 0xa0
 80010bc:	443b      	add	r3, r7
 80010be:	3b52      	subs	r3, #82	@ 0x52
 80010c0:	881b      	ldrh	r3, [r3, #0]
          if (displayPoint.x >= task_boxes[i].x && displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 80010c2:	4299      	cmp	r1, r3
 80010c4:	d31e      	bcc.n	8001104 <main+0x26c>
              displayPoint.y >= task_boxes[i].y && displayPoint.y < (task_boxes[i].y + task_boxes[i].h))
 80010c6:	8a7b      	ldrh	r3, [r7, #18]
 80010c8:	4619      	mov	r1, r3
 80010ca:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80010ce:	4613      	mov	r3, r2
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	33a0      	adds	r3, #160	@ 0xa0
 80010d8:	443b      	add	r3, r7
 80010da:	3b52      	subs	r3, #82	@ 0x52
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	4618      	mov	r0, r3
 80010e0:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80010e4:	4613      	mov	r3, r2
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4413      	add	r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	33a0      	adds	r3, #160	@ 0xa0
 80010ee:	443b      	add	r3, r7
 80010f0:	3b4e      	subs	r3, #78	@ 0x4e
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	4403      	add	r3, r0
 80010f6:	4299      	cmp	r1, r3
 80010f8:	da04      	bge.n	8001104 <main+0x26c>
          {
            task_hit_index = i;
 80010fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            break;
 8001102:	e00a      	b.n	800111a <main+0x282>
        for (int i = 0; i < num_tasks; i++)
 8001104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001108:	3301      	adds	r3, #1
 800110a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800110e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001112:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001116:	429a      	cmp	r2, r3
 8001118:	dba1      	blt.n	800105e <main+0x1c6>
          }
        }

        bool back_button_pressed = false;
 800111a:	2300      	movs	r3, #0
 800111c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (displayPoint.x >= back_button_box.x && displayPoint.x < (back_button_box.x + back_button_box.w) &&
 8001120:	8a3a      	ldrh	r2, [r7, #16]
 8001122:	88bb      	ldrh	r3, [r7, #4]
 8001124:	429a      	cmp	r2, r3
 8001126:	d316      	bcc.n	8001156 <main+0x2be>
 8001128:	8a3b      	ldrh	r3, [r7, #16]
 800112a:	461a      	mov	r2, r3
 800112c:	88bb      	ldrh	r3, [r7, #4]
 800112e:	4619      	mov	r1, r3
 8001130:	893b      	ldrh	r3, [r7, #8]
 8001132:	440b      	add	r3, r1
 8001134:	429a      	cmp	r2, r3
 8001136:	da0e      	bge.n	8001156 <main+0x2be>
            displayPoint.y >= back_button_box.y && displayPoint.y < (back_button_box.y + back_button_box.h))
 8001138:	8a7a      	ldrh	r2, [r7, #18]
 800113a:	88fb      	ldrh	r3, [r7, #6]
        if (displayPoint.x >= back_button_box.x && displayPoint.x < (back_button_box.x + back_button_box.w) &&
 800113c:	429a      	cmp	r2, r3
 800113e:	d30a      	bcc.n	8001156 <main+0x2be>
            displayPoint.y >= back_button_box.y && displayPoint.y < (back_button_box.y + back_button_box.h))
 8001140:	8a7b      	ldrh	r3, [r7, #18]
 8001142:	461a      	mov	r2, r3
 8001144:	88fb      	ldrh	r3, [r7, #6]
 8001146:	4619      	mov	r1, r3
 8001148:	897b      	ldrh	r3, [r7, #10]
 800114a:	440b      	add	r3, r1
 800114c:	429a      	cmp	r2, r3
 800114e:	da02      	bge.n	8001156 <main+0x2be>
        {
          back_button_pressed = true;
 8001150:	2301      	movs	r3, #1
 8001152:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        }

        if (task_hit_index != -1)
 8001156:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800115a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115e:	d010      	beq.n	8001182 <main+0x2ea>
        {
          sprintf(info_text_buffer, "Task: %s", task_boxes[task_hit_index].name);
 8001160:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001164:	4613      	mov	r3, r2
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	4413      	add	r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	33a0      	adds	r3, #160	@ 0xa0
 800116e:	443b      	add	r3, r7
 8001170:	3b4c      	subs	r3, #76	@ 0x4c
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	f107 0318 	add.w	r3, r7, #24
 8001178:	4925      	ldr	r1, [pc, #148]	@ (8001210 <main+0x378>)
 800117a:	4618      	mov	r0, r3
 800117c:	f005 f8b8 	bl	80062f0 <siprintf>
 8001180:	e012      	b.n	80011a8 <main+0x310>
        }
        else if (back_button_pressed)
 8001182:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8001186:	2b00      	cmp	r3, #0
 8001188:	d006      	beq.n	8001198 <main+0x300>
        {
          sprintf(info_text_buffer, "Back"); // Display "Back" when back button is touched
 800118a:	f107 0318 	add.w	r3, r7, #24
 800118e:	491e      	ldr	r1, [pc, #120]	@ (8001208 <main+0x370>)
 8001190:	4618      	mov	r0, r3
 8001192:	f005 f8ad 	bl	80062f0 <siprintf>
 8001196:	e007      	b.n	80011a8 <main+0x310>
        }
        else
        {
          sprintf(info_text_buffer, "Touch: X=%03u Y=%03u", displayPoint.x, displayPoint.y);
 8001198:	8a3b      	ldrh	r3, [r7, #16]
 800119a:	461a      	mov	r2, r3
 800119c:	8a7b      	ldrh	r3, [r7, #18]
 800119e:	f107 0018 	add.w	r0, r7, #24
 80011a2:	491c      	ldr	r1, [pc, #112]	@ (8001214 <main+0x37c>)
 80011a4:	f005 f8a4 	bl	80062f0 <siprintf>
        }
        Manual_LCD_UpdateInfoText(info_text_buffer);
 80011a8:	f107 0318 	add.w	r3, r7, #24
 80011ac:	4618      	mov	r0, r3
 80011ae:	f001 f87d 	bl	80022ac <Manual_LCD_UpdateInfoText>

        while (Manual_Touch_Pressed())
 80011b2:	e002      	b.n	80011ba <main+0x322>
        {
          HAL_Delay(20);
 80011b4:	2014      	movs	r0, #20
 80011b6:	f001 fdf3 	bl	8002da0 <HAL_Delay>
        while (Manual_Touch_Pressed())
 80011ba:	f001 f911 	bl	80023e0 <Manual_Touch_Pressed>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f7      	bne.n	80011b4 <main+0x31c>
 80011c4:	e013      	b.n	80011ee <main+0x356>
        }
      }
      else
      {
        sprintf(info_text_buffer, "Pressed, GetPoint Fail");
 80011c6:	f107 0318 	add.w	r3, r7, #24
 80011ca:	4913      	ldr	r1, [pc, #76]	@ (8001218 <main+0x380>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f005 f88f 	bl	80062f0 <siprintf>
        Manual_LCD_UpdateInfoText(info_text_buffer);
 80011d2:	f107 0318 	add.w	r3, r7, #24
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 f868 	bl	80022ac <Manual_LCD_UpdateInfoText>
        while (Manual_Touch_Pressed())
 80011dc:	e002      	b.n	80011e4 <main+0x34c>
        {
          HAL_Delay(20);
 80011de:	2014      	movs	r0, #20
 80011e0:	f001 fdde 	bl	8002da0 <HAL_Delay>
        while (Manual_Touch_Pressed())
 80011e4:	f001 f8fc 	bl	80023e0 <Manual_Touch_Pressed>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f7      	bne.n	80011de <main+0x346>
        }
      }
    }
    HAL_Delay(50);
 80011ee:	2032      	movs	r0, #50	@ 0x32
 80011f0:	f001 fdd6 	bl	8002da0 <HAL_Delay>
    if (Manual_Touch_Pressed())
 80011f4:	e714      	b.n	8001020 <main+0x188>
 80011f6:	bf00      	nop
 80011f8:	08006c48 	.word	0x08006c48
 80011fc:	08006c54 	.word	0x08006c54
 8001200:	08006c60 	.word	0x08006c60
 8001204:	08006c6c 	.word	0x08006c6c
 8001208:	08006c78 	.word	0x08006c78
 800120c:	200000d0 	.word	0x200000d0
 8001210:	08006c80 	.word	0x08006c80
 8001214:	08006c8c 	.word	0x08006c8c
 8001218:	08006ca4 	.word	0x08006ca4

0800121c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b094      	sub	sp, #80	@ 0x50
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	2230      	movs	r2, #48	@ 0x30
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f005 f882 	bl	8006334 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	4b27      	ldr	r3, [pc, #156]	@ (80012e4 <SystemClock_Config+0xc8>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	4a26      	ldr	r2, [pc, #152]	@ (80012e4 <SystemClock_Config+0xc8>)
 800124a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001250:	4b24      	ldr	r3, [pc, #144]	@ (80012e4 <SystemClock_Config+0xc8>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	4b21      	ldr	r3, [pc, #132]	@ (80012e8 <SystemClock_Config+0xcc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a20      	ldr	r2, [pc, #128]	@ (80012e8 <SystemClock_Config+0xcc>)
 8001266:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b1e      	ldr	r3, [pc, #120]	@ (80012e8 <SystemClock_Config+0xcc>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001278:	2302      	movs	r3, #2
 800127a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001280:	2310      	movs	r3, #16
 8001282:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2302      	movs	r3, #2
 8001286:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001288:	2300      	movs	r3, #0
 800128a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800128c:	2308      	movs	r3, #8
 800128e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001290:	2354      	movs	r3, #84	@ 0x54
 8001292:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001294:	2302      	movs	r3, #2
 8001296:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001298:	2304      	movs	r3, #4
 800129a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	f107 0320 	add.w	r3, r7, #32
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fe0f 	bl	8004ec4 <HAL_RCC_OscConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012ac:	f000 f8f8 	bl	80014a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012b0:	230f      	movs	r3, #15
 80012b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b4:	2302      	movs	r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	2102      	movs	r1, #2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f004 f871 	bl	80053b4 <HAL_RCC_ClockConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012d8:	f000 f8e2 	bl	80014a0 <Error_Handler>
  }
}
 80012dc:	bf00      	nop
 80012de:	3750      	adds	r7, #80	@ 0x50
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40007000 	.word	0x40007000

080012ec <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */
  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <MX_I2C2_Init+0x50>)
 80012f2:	4a13      	ldr	r2, [pc, #76]	@ (8001340 <MX_I2C2_Init+0x54>)
 80012f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012f6:	4b11      	ldr	r3, [pc, #68]	@ (800133c <MX_I2C2_Init+0x50>)
 80012f8:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <MX_I2C2_Init+0x58>)
 80012fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <MX_I2C2_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001302:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <MX_I2C2_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <MX_I2C2_Init+0x50>)
 800130a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800130e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001310:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <MX_I2C2_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <MX_I2C2_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	@ (800133c <MX_I2C2_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <MX_I2C2_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	@ (800133c <MX_I2C2_Init+0x50>)
 800132a:	f002 f891 	bl	8003450 <HAL_I2C_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001334:	f000 f8b4 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	2000007c 	.word	0x2000007c
 8001340:	40005800 	.word	0x40005800
 8001344:	000186a0 	.word	0x000186a0

08001348 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_Init 0 */
  /* USER CODE END SPI1_Init 0 */
  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800134c:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <MX_SPI1_Init+0x64>)
 800134e:	4a18      	ldr	r2, [pc, #96]	@ (80013b0 <MX_SPI1_Init+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001352:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <MX_SPI1_Init+0x64>)
 8001354:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001358:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800135a:	4b14      	ldr	r3, [pc, #80]	@ (80013ac <MX_SPI1_Init+0x64>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <MX_SPI1_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001366:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <MX_SPI1_Init+0x64>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800136c:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <MX_SPI1_Init+0x64>)
 800136e:	2200      	movs	r2, #0
 8001370:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_SPI1_Init+0x64>)
 8001374:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001378:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800137a:	4b0c      	ldr	r3, [pc, #48]	@ (80013ac <MX_SPI1_Init+0x64>)
 800137c:	2230      	movs	r2, #48	@ 0x30
 800137e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001380:	4b0a      	ldr	r3, [pc, #40]	@ (80013ac <MX_SPI1_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <MX_SPI1_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800138c:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <MX_SPI1_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <MX_SPI1_Init+0x64>)
 8001394:	220a      	movs	r2, #10
 8001396:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001398:	4804      	ldr	r0, [pc, #16]	@ (80013ac <MX_SPI1_Init+0x64>)
 800139a:	f004 f9d7 	bl	800574c <HAL_SPI_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013a4:	f000 f87c 	bl	80014a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200000d0 	.word	0x200000d0
 80013b0:	40013000 	.word	0x40013000

080013b4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	4b31      	ldr	r3, [pc, #196]	@ (8001494 <MX_GPIO_Init+0xe0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a30      	ldr	r2, [pc, #192]	@ (8001494 <MX_GPIO_Init+0xe0>)
 80013d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b2e      	ldr	r3, [pc, #184]	@ (8001494 <MX_GPIO_Init+0xe0>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
 80013ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001494 <MX_GPIO_Init+0xe0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a29      	ldr	r2, [pc, #164]	@ (8001494 <MX_GPIO_Init+0xe0>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b27      	ldr	r3, [pc, #156]	@ (8001494 <MX_GPIO_Init+0xe0>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	603b      	str	r3, [r7, #0]
 8001406:	4b23      	ldr	r3, [pc, #140]	@ (8001494 <MX_GPIO_Init+0xe0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a22      	ldr	r2, [pc, #136]	@ (8001494 <MX_GPIO_Init+0xe0>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <MX_GPIO_Init+0xe0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 8001424:	481c      	ldr	r0, [pc, #112]	@ (8001498 <MX_GPIO_Init+0xe4>)
 8001426:	f001 ffd5 	bl	80033d4 <HAL_GPIO_WritePin>
  /*Configure GPIO pin Output Level for TP_CS to be deselected initially */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET);
 800142a:	2201      	movs	r2, #1
 800142c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001430:	481a      	ldr	r0, [pc, #104]	@ (800149c <MX_GPIO_Init+0xe8>)
 8001432:	f001 ffcf 	bl	80033d4 <HAL_GPIO_WritePin>
  // GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  // GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  // HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LCD_RST_Pin LCD_BL_Pin LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin | LCD_BL_Pin | LCD_CS_Pin | LCD_DC_Pin;
 8001436:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 800143a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001444:	2302      	movs	r3, #2
 8001446:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	4619      	mov	r1, r3
 800144e:	4812      	ldr	r0, [pc, #72]	@ (8001498 <MX_GPIO_Init+0xe4>)
 8001450:	f001 fe0c 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 8001454:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001458:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	4619      	mov	r1, r3
 800146c:	480b      	ldr	r0, [pc, #44]	@ (800149c <MX_GPIO_Init+0xe8>)
 800146e:	f001 fdfd 	bl	800306c <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin (Configured for polling) */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001472:	2310      	movs	r3, #16
 8001474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147a:	2301      	movs	r3, #1
 800147c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	4619      	mov	r1, r3
 8001484:	4804      	ldr	r0, [pc, #16]	@ (8001498 <MX_GPIO_Init+0xe4>)
 8001486:	f001 fdf1 	bl	800306c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800148a:	bf00      	nop
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40020400 	.word	0x40020400
 800149c:	40020000 	.word	0x40020000

080014a0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a4:	b672      	cpsid	i
}
 80014a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <Error_Handler+0x8>

080014ac <LCD_SPI_Send>:
// External SPI handle defined in main.c
extern SPI_HandleTypeDef hspi1;

// Low-level SPI communication functions
static void LCD_SPI_Send(uint8_t data)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80014b6:	1df9      	adds	r1, r7, #7
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
 80014bc:	2201      	movs	r2, #1
 80014be:	4803      	ldr	r0, [pc, #12]	@ (80014cc <LCD_SPI_Send+0x20>)
 80014c0:	f004 f9cd 	bl	800585e <HAL_SPI_Transmit>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200000d0 	.word	0x200000d0

080014d0 <LCD_Write_Cmd>:

static void LCD_Write_Cmd(uint8_t cmd)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // DC low for command
 80014da:	2200      	movs	r2, #0
 80014dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014e0:	480a      	ldr	r0, [pc, #40]	@ (800150c <LCD_Write_Cmd+0x3c>)
 80014e2:	f001 ff77 	bl	80033d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 80014e6:	2200      	movs	r2, #0
 80014e8:	2180      	movs	r1, #128	@ 0x80
 80014ea:	4808      	ldr	r0, [pc, #32]	@ (800150c <LCD_Write_Cmd+0x3c>)
 80014ec:	f001 ff72 	bl	80033d4 <HAL_GPIO_WritePin>
    LCD_SPI_Send(cmd);
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ffda 	bl	80014ac <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 80014f8:	2201      	movs	r2, #1
 80014fa:	2180      	movs	r1, #128	@ 0x80
 80014fc:	4803      	ldr	r0, [pc, #12]	@ (800150c <LCD_Write_Cmd+0x3c>)
 80014fe:	f001 ff69 	bl	80033d4 <HAL_GPIO_WritePin>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40020400 	.word	0x40020400

08001510 <LCD_Write_Data>:

static void LCD_Write_Data(uint8_t data)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001520:	480a      	ldr	r0, [pc, #40]	@ (800154c <LCD_Write_Data+0x3c>)
 8001522:	f001 ff57 	bl	80033d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001526:	2200      	movs	r2, #0
 8001528:	2180      	movs	r1, #128	@ 0x80
 800152a:	4808      	ldr	r0, [pc, #32]	@ (800154c <LCD_Write_Data+0x3c>)
 800152c:	f001 ff52 	bl	80033d4 <HAL_GPIO_WritePin>
    LCD_SPI_Send(data);
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff ffba 	bl	80014ac <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001538:	2201      	movs	r2, #1
 800153a:	2180      	movs	r1, #128	@ 0x80
 800153c:	4803      	ldr	r0, [pc, #12]	@ (800154c <LCD_Write_Data+0x3c>)
 800153e:	f001 ff49 	bl	80033d4 <HAL_GPIO_WritePin>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	40020400 	.word	0x40020400

08001550 <LCD_Write_Data16>:

static void LCD_Write_Data16(uint16_t data)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 800155a:	2201      	movs	r2, #1
 800155c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001560:	4810      	ldr	r0, [pc, #64]	@ (80015a4 <LCD_Write_Data16+0x54>)
 8001562:	f001 ff37 	bl	80033d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001566:	2200      	movs	r2, #0
 8001568:	2180      	movs	r1, #128	@ 0x80
 800156a:	480e      	ldr	r0, [pc, #56]	@ (80015a4 <LCD_Write_Data16+0x54>)
 800156c:	f001 ff32 	bl	80033d4 <HAL_GPIO_WritePin>
    uint8_t bytes[2];
    bytes[0] = (data >> 8) & 0xFF;
 8001570:	88fb      	ldrh	r3, [r7, #6]
 8001572:	0a1b      	lsrs	r3, r3, #8
 8001574:	b29b      	uxth	r3, r3
 8001576:	b2db      	uxtb	r3, r3
 8001578:	733b      	strb	r3, [r7, #12]
    bytes[1] = data & 0xFF;
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, bytes, 2, HAL_MAX_DELAY);
 8001580:	f107 010c 	add.w	r1, r7, #12
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	2202      	movs	r2, #2
 800158a:	4807      	ldr	r0, [pc, #28]	@ (80015a8 <LCD_Write_Data16+0x58>)
 800158c:	f004 f967 	bl	800585e <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001590:	2201      	movs	r2, #1
 8001592:	2180      	movs	r1, #128	@ 0x80
 8001594:	4803      	ldr	r0, [pc, #12]	@ (80015a4 <LCD_Write_Data16+0x54>)
 8001596:	f001 ff1d 	bl	80033d4 <HAL_GPIO_WritePin>
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40020400 	.word	0x40020400
 80015a8:	200000d0 	.word	0x200000d0

080015ac <LCD_Set_Address_Window>:

// Set drawing window
static void LCD_Set_Address_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4604      	mov	r4, r0
 80015b4:	4608      	mov	r0, r1
 80015b6:	4611      	mov	r1, r2
 80015b8:	461a      	mov	r2, r3
 80015ba:	4623      	mov	r3, r4
 80015bc:	80fb      	strh	r3, [r7, #6]
 80015be:	4603      	mov	r3, r0
 80015c0:	80bb      	strh	r3, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	807b      	strh	r3, [r7, #2]
 80015c6:	4613      	mov	r3, r2
 80015c8:	803b      	strh	r3, [r7, #0]
    LCD_Write_Cmd(0x2A); // Column Address Set
 80015ca:	202a      	movs	r0, #42	@ 0x2a
 80015cc:	f7ff ff80 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(x1 >> 8);
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	0a1b      	lsrs	r3, r3, #8
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff99 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(x1 & 0xFF);
 80015de:	88fb      	ldrh	r3, [r7, #6]
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff94 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(x2 >> 8);
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	0a1b      	lsrs	r3, r3, #8
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff ff8d 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(x2 & 0xFF);
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff88 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0x2B); // Page Address Set
 8001600:	202b      	movs	r0, #43	@ 0x2b
 8001602:	f7ff ff65 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(y1 >> 8);
 8001606:	88bb      	ldrh	r3, [r7, #4]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	b29b      	uxth	r3, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff ff7e 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(y1 & 0xFF);
 8001614:	88bb      	ldrh	r3, [r7, #4]
 8001616:	b2db      	uxtb	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ff79 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(y2 >> 8);
 800161e:	883b      	ldrh	r3, [r7, #0]
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	b29b      	uxth	r3, r3
 8001624:	b2db      	uxtb	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ff72 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(y2 & 0xFF);
 800162c:	883b      	ldrh	r3, [r7, #0]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff6d 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0x2C); // Memory Write
 8001636:	202c      	movs	r0, #44	@ 0x2c
 8001638:	f7ff ff4a 	bl	80014d0 <LCD_Write_Cmd>
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bd90      	pop	{r4, r7, pc}

08001644 <Manual_LCD_Init>:
        }
    }
}

void Manual_LCD_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
    // Hardware Reset
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	2104      	movs	r1, #4
 800164c:	4889      	ldr	r0, [pc, #548]	@ (8001874 <Manual_LCD_Init+0x230>)
 800164e:	f001 fec1 	bl	80033d4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001652:	2064      	movs	r0, #100	@ 0x64
 8001654:	f001 fba4 	bl	8002da0 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 8001658:	2201      	movs	r2, #1
 800165a:	2104      	movs	r1, #4
 800165c:	4885      	ldr	r0, [pc, #532]	@ (8001874 <Manual_LCD_Init+0x230>)
 800165e:	f001 feb9 	bl	80033d4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001662:	2064      	movs	r0, #100	@ 0x64
 8001664:	f001 fb9c 	bl	8002da0 <HAL_Delay>

    // Backlight ON
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8001668:	2201      	movs	r2, #1
 800166a:	2140      	movs	r1, #64	@ 0x40
 800166c:	4881      	ldr	r0, [pc, #516]	@ (8001874 <Manual_LCD_Init+0x230>)
 800166e:	f001 feb1 	bl	80033d4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001672:	200a      	movs	r0, #10
 8001674:	f001 fb94 	bl	8002da0 <HAL_Delay>

    // Initialization sequence (Example for ILI9341 - ADJUST FOR YOUR LCD)
    LCD_Write_Cmd(0xCF); // Power Control B
 8001678:	20cf      	movs	r0, #207	@ 0xcf
 800167a:	f7ff ff29 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 800167e:	2000      	movs	r0, #0
 8001680:	f7ff ff46 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 8001684:	20c1      	movs	r0, #193	@ 0xc1
 8001686:	f7ff ff43 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x30);
 800168a:	2030      	movs	r0, #48	@ 0x30
 800168c:	f7ff ff40 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0xED); // Power on sequence control
 8001690:	20ed      	movs	r0, #237	@ 0xed
 8001692:	f7ff ff1d 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x64);
 8001696:	2064      	movs	r0, #100	@ 0x64
 8001698:	f7ff ff3a 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 800169c:	2003      	movs	r0, #3
 800169e:	f7ff ff37 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x12);
 80016a2:	2012      	movs	r0, #18
 80016a4:	f7ff ff34 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x81);
 80016a8:	2081      	movs	r0, #129	@ 0x81
 80016aa:	f7ff ff31 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0xE8); // Driver timing control A
 80016ae:	20e8      	movs	r0, #232	@ 0xe8
 80016b0:	f7ff ff0e 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x85);
 80016b4:	2085      	movs	r0, #133	@ 0x85
 80016b6:	f7ff ff2b 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 80016ba:	2000      	movs	r0, #0
 80016bc:	f7ff ff28 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x78);
 80016c0:	2078      	movs	r0, #120	@ 0x78
 80016c2:	f7ff ff25 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0xCB); // Power control A
 80016c6:	20cb      	movs	r0, #203	@ 0xcb
 80016c8:	f7ff ff02 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x39);
 80016cc:	2039      	movs	r0, #57	@ 0x39
 80016ce:	f7ff ff1f 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x2C);
 80016d2:	202c      	movs	r0, #44	@ 0x2c
 80016d4:	f7ff ff1c 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff ff19 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x34);
 80016de:	2034      	movs	r0, #52	@ 0x34
 80016e0:	f7ff ff16 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x02);
 80016e4:	2002      	movs	r0, #2
 80016e6:	f7ff ff13 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0xF7); // Pump ratio control
 80016ea:	20f7      	movs	r0, #247	@ 0xf7
 80016ec:	f7ff fef0 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x20);
 80016f0:	2020      	movs	r0, #32
 80016f2:	f7ff ff0d 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0xEA); // Driver timing control B
 80016f6:	20ea      	movs	r0, #234	@ 0xea
 80016f8:	f7ff feea 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 80016fc:	2000      	movs	r0, #0
 80016fe:	f7ff ff07 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff ff04 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0xC0);  // Power Control 1
 8001708:	20c0      	movs	r0, #192	@ 0xc0
 800170a:	f7ff fee1 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x23); // VRH[5:0]
 800170e:	2023      	movs	r0, #35	@ 0x23
 8001710:	f7ff fefe 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0xC1);  // Power Control 2
 8001714:	20c1      	movs	r0, #193	@ 0xc1
 8001716:	f7ff fedb 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x10); // SAP[2:0];BT[3:0]
 800171a:	2010      	movs	r0, #16
 800171c:	f7ff fef8 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0xC5);  // VCOM Control 1
 8001720:	20c5      	movs	r0, #197	@ 0xc5
 8001722:	f7ff fed5 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x3E); // Contrast
 8001726:	203e      	movs	r0, #62	@ 0x3e
 8001728:	f7ff fef2 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x28);
 800172c:	2028      	movs	r0, #40	@ 0x28
 800172e:	f7ff feef 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0xC7);  // VCOM Control 2
 8001732:	20c7      	movs	r0, #199	@ 0xc7
 8001734:	f7ff fecc 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x86); // --
 8001738:	2086      	movs	r0, #134	@ 0x86
 800173a:	f7ff fee9 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0x36); // Memory Access Control
 800173e:	2036      	movs	r0, #54	@ 0x36
 8001740:	f7ff fec6 	bl	80014d0 <LCD_Write_Cmd>
    // LCD_Write_Data(0x08); // Previous value
    LCD_Write_Data(0x28); // Try this: MV=1, MY=0, MX=0, BGR=1 (Landscape, X:T-B, Y:L-R)
 8001744:	2028      	movs	r0, #40	@ 0x28
 8001746:	f7ff fee3 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0x3A);  // Pixel Format Set
 800174a:	203a      	movs	r0, #58	@ 0x3a
 800174c:	f7ff fec0 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x55); // 16 bits/pixel
 8001750:	2055      	movs	r0, #85	@ 0x55
 8001752:	f7ff fedd 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0xB1); // Frame Rate Control (In Normal Mode/Full Colors)
 8001756:	20b1      	movs	r0, #177	@ 0xb1
 8001758:	f7ff feba 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff fed7 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x18);
 8001762:	2018      	movs	r0, #24
 8001764:	f7ff fed4 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0xB6); // Display Function Control
 8001768:	20b6      	movs	r0, #182	@ 0xb6
 800176a:	f7ff feb1 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x08);
 800176e:	2008      	movs	r0, #8
 8001770:	f7ff fece 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x82);
 8001774:	2082      	movs	r0, #130	@ 0x82
 8001776:	f7ff fecb 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x27);
 800177a:	2027      	movs	r0, #39	@ 0x27
 800177c:	f7ff fec8 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0xF2);  // Enable 3G
 8001780:	20f2      	movs	r0, #242	@ 0xf2
 8001782:	f7ff fea5 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x00); // 3Gamma Function Disable
 8001786:	2000      	movs	r0, #0
 8001788:	f7ff fec2 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0x26);  // Gamma Set
 800178c:	2026      	movs	r0, #38	@ 0x26
 800178e:	f7ff fe9f 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x01); // Gamma curve selected
 8001792:	2001      	movs	r0, #1
 8001794:	f7ff febc 	bl	8001510 <LCD_Write_Data>

    // ... (Positive and Negative Gamma Correction remain the same) ...
    LCD_Write_Cmd(0xE0); // Positive Gamma Correction
 8001798:	20e0      	movs	r0, #224	@ 0xe0
 800179a:	f7ff fe99 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x0F);
 800179e:	200f      	movs	r0, #15
 80017a0:	f7ff feb6 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 80017a4:	2031      	movs	r0, #49	@ 0x31
 80017a6:	f7ff feb3 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x2B);
 80017aa:	202b      	movs	r0, #43	@ 0x2b
 80017ac:	f7ff feb0 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 80017b0:	200c      	movs	r0, #12
 80017b2:	f7ff fead 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 80017b6:	200e      	movs	r0, #14
 80017b8:	f7ff feaa 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x08);
 80017bc:	2008      	movs	r0, #8
 80017be:	f7ff fea7 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x4E);
 80017c2:	204e      	movs	r0, #78	@ 0x4e
 80017c4:	f7ff fea4 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0xF1);
 80017c8:	20f1      	movs	r0, #241	@ 0xf1
 80017ca:	f7ff fea1 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x37);
 80017ce:	2037      	movs	r0, #55	@ 0x37
 80017d0:	f7ff fe9e 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 80017d4:	2007      	movs	r0, #7
 80017d6:	f7ff fe9b 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x10);
 80017da:	2010      	movs	r0, #16
 80017dc:	f7ff fe98 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 80017e0:	2003      	movs	r0, #3
 80017e2:	f7ff fe95 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 80017e6:	200e      	movs	r0, #14
 80017e8:	f7ff fe92 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x09);
 80017ec:	2009      	movs	r0, #9
 80017ee:	f7ff fe8f 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff fe8c 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0xE1); // Negative Gamma Correction
 80017f8:	20e1      	movs	r0, #225	@ 0xe1
 80017fa:	f7ff fe69 	bl	80014d0 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff fe86 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001804:	200e      	movs	r0, #14
 8001806:	f7ff fe83 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x14);
 800180a:	2014      	movs	r0, #20
 800180c:	f7ff fe80 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001810:	2003      	movs	r0, #3
 8001812:	f7ff fe7d 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x11);
 8001816:	2011      	movs	r0, #17
 8001818:	f7ff fe7a 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 800181c:	2007      	movs	r0, #7
 800181e:	f7ff fe77 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001822:	2031      	movs	r0, #49	@ 0x31
 8001824:	f7ff fe74 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 8001828:	20c1      	movs	r0, #193	@ 0xc1
 800182a:	f7ff fe71 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x48);
 800182e:	2048      	movs	r0, #72	@ 0x48
 8001830:	f7ff fe6e 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8001834:	2008      	movs	r0, #8
 8001836:	f7ff fe6b 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 800183a:	200f      	movs	r0, #15
 800183c:	f7ff fe68 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8001840:	200c      	movs	r0, #12
 8001842:	f7ff fe65 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001846:	2031      	movs	r0, #49	@ 0x31
 8001848:	f7ff fe62 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x36);
 800184c:	2036      	movs	r0, #54	@ 0x36
 800184e:	f7ff fe5f 	bl	8001510 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 8001852:	200f      	movs	r0, #15
 8001854:	f7ff fe5c 	bl	8001510 <LCD_Write_Data>

    LCD_Write_Cmd(0x11); // Exit Sleep
 8001858:	2011      	movs	r0, #17
 800185a:	f7ff fe39 	bl	80014d0 <LCD_Write_Cmd>
    HAL_Delay(120);
 800185e:	2078      	movs	r0, #120	@ 0x78
 8001860:	f001 fa9e 	bl	8002da0 <HAL_Delay>
    LCD_Write_Cmd(0x29); // Display ON
 8001864:	2029      	movs	r0, #41	@ 0x29
 8001866:	f7ff fe33 	bl	80014d0 <LCD_Write_Cmd>

    Manual_LCD_Clear(COLOR_BLACK);
 800186a:	2000      	movs	r0, #0
 800186c:	f000 f804 	bl	8001878 <Manual_LCD_Clear>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40020400 	.word	0x40020400

08001878 <Manual_LCD_Clear>:

void Manual_LCD_Clear(uint16_t color)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]
    LCD_Set_Address_Window(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 8001882:	f240 133f 	movw	r3, #319	@ 0x13f
 8001886:	22ef      	movs	r2, #239	@ 0xef
 8001888:	2100      	movs	r1, #0
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fe8e 	bl	80015ac <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001890:	2201      	movs	r2, #1
 8001892:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001896:	4815      	ldr	r0, [pc, #84]	@ (80018ec <Manual_LCD_Clear+0x74>)
 8001898:	f001 fd9c 	bl	80033d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 800189c:	2200      	movs	r2, #0
 800189e:	2180      	movs	r1, #128	@ 0x80
 80018a0:	4812      	ldr	r0, [pc, #72]	@ (80018ec <Manual_LCD_Clear+0x74>)
 80018a2:	f001 fd97 	bl	80033d4 <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	723b      	strb	r3, [r7, #8]
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	e00a      	b.n	80018d2 <Manual_LCD_Clear+0x5a>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 80018bc:	f107 0108 	add.w	r1, r7, #8
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295
 80018c4:	2202      	movs	r2, #2
 80018c6:	480a      	ldr	r0, [pc, #40]	@ (80018f0 <Manual_LCD_Clear+0x78>)
 80018c8:	f003 ffc9 	bl	800585e <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3301      	adds	r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 80018d8:	d3f0      	bcc.n	80018bc <Manual_LCD_Clear+0x44>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 80018da:	2201      	movs	r2, #1
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	4803      	ldr	r0, [pc, #12]	@ (80018ec <Manual_LCD_Clear+0x74>)
 80018e0:	f001 fd78 	bl	80033d4 <HAL_GPIO_WritePin>
}
 80018e4:	bf00      	nop
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40020400 	.word	0x40020400
 80018f0:	200000d0 	.word	0x200000d0

080018f4 <Manual_LCD_DrawPixel>:

void Manual_LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
 80018fe:	460b      	mov	r3, r1
 8001900:	80bb      	strh	r3, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	807b      	strh	r3, [r7, #2]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	2bef      	cmp	r3, #239	@ 0xef
 800190a:	d80e      	bhi.n	800192a <Manual_LCD_DrawPixel+0x36>
 800190c:	88bb      	ldrh	r3, [r7, #4]
 800190e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001912:	d20a      	bcs.n	800192a <Manual_LCD_DrawPixel+0x36>
        return;
    LCD_Set_Address_Window(x, y, x, y);
 8001914:	88bb      	ldrh	r3, [r7, #4]
 8001916:	88fa      	ldrh	r2, [r7, #6]
 8001918:	88b9      	ldrh	r1, [r7, #4]
 800191a:	88f8      	ldrh	r0, [r7, #6]
 800191c:	f7ff fe46 	bl	80015ac <LCD_Set_Address_Window>
    LCD_Write_Data16(color);
 8001920:	887b      	ldrh	r3, [r7, #2]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fe14 	bl	8001550 <LCD_Write_Data16>
 8001928:	e000      	b.n	800192c <Manual_LCD_DrawPixel+0x38>
        return;
 800192a:	bf00      	nop
}
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <Manual_LCD_DrawLine>:

void Manual_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8001932:	b590      	push	{r4, r7, lr}
 8001934:	b087      	sub	sp, #28
 8001936:	af00      	add	r7, sp, #0
 8001938:	4604      	mov	r4, r0
 800193a:	4608      	mov	r0, r1
 800193c:	4611      	mov	r1, r2
 800193e:	461a      	mov	r2, r3
 8001940:	4623      	mov	r3, r4
 8001942:	80fb      	strh	r3, [r7, #6]
 8001944:	4603      	mov	r3, r0
 8001946:	80bb      	strh	r3, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
 800194c:	4613      	mov	r3, r2
 800194e:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001950:	883a      	ldrh	r2, [r7, #0]
 8001952:	88bb      	ldrh	r3, [r7, #4]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800195a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800195e:	8879      	ldrh	r1, [r7, #2]
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	1acb      	subs	r3, r1, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	bfb8      	it	lt
 8001968:	425b      	neglt	r3, r3
 800196a:	429a      	cmp	r2, r3
 800196c:	bfcc      	ite	gt
 800196e:	2301      	movgt	r3, #1
 8001970:	2300      	movle	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	827b      	strh	r3, [r7, #18]
    if (steep)
 8001976:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <Manual_LCD_DrawLine+0x64>
    {
        uint16_t temp;
        temp = x1;
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	823b      	strh	r3, [r7, #16]
        x1 = y1;
 8001982:	88bb      	ldrh	r3, [r7, #4]
 8001984:	80fb      	strh	r3, [r7, #6]
        y1 = temp;
 8001986:	8a3b      	ldrh	r3, [r7, #16]
 8001988:	80bb      	strh	r3, [r7, #4]
        temp = x2;
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	823b      	strh	r3, [r7, #16]
        x2 = y2;
 800198e:	883b      	ldrh	r3, [r7, #0]
 8001990:	807b      	strh	r3, [r7, #2]
        y2 = temp;
 8001992:	8a3b      	ldrh	r3, [r7, #16]
 8001994:	803b      	strh	r3, [r7, #0]
    }
    if (x1 > x2)
 8001996:	88fa      	ldrh	r2, [r7, #6]
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	429a      	cmp	r2, r3
 800199c:	d90b      	bls.n	80019b6 <Manual_LCD_DrawLine+0x84>
    {
        uint16_t temp;
        temp = x1;
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	81fb      	strh	r3, [r7, #14]
        x1 = x2;
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	80fb      	strh	r3, [r7, #6]
        x2 = temp;
 80019a6:	89fb      	ldrh	r3, [r7, #14]
 80019a8:	807b      	strh	r3, [r7, #2]
        temp = y1;
 80019aa:	88bb      	ldrh	r3, [r7, #4]
 80019ac:	81fb      	strh	r3, [r7, #14]
        y1 = y2;
 80019ae:	883b      	ldrh	r3, [r7, #0]
 80019b0:	80bb      	strh	r3, [r7, #4]
        y2 = temp;
 80019b2:	89fb      	ldrh	r3, [r7, #14]
 80019b4:	803b      	strh	r3, [r7, #0]
    }
    int16_t dx = x2 - x1;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	b29b      	uxth	r3, r3
 80019be:	81bb      	strh	r3, [r7, #12]
    int16_t dy = abs(y2 - y1);
 80019c0:	883a      	ldrh	r2, [r7, #0]
 80019c2:	88bb      	ldrh	r3, [r7, #4]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	bfb8      	it	lt
 80019ca:	425b      	neglt	r3, r3
 80019cc:	817b      	strh	r3, [r7, #10]
    int16_t err = dx / 2;
 80019ce:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019d2:	0fda      	lsrs	r2, r3, #31
 80019d4:	4413      	add	r3, r2
 80019d6:	105b      	asrs	r3, r3, #1
 80019d8:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;
    if (y1 < y2)
 80019da:	88ba      	ldrh	r2, [r7, #4]
 80019dc:	883b      	ldrh	r3, [r7, #0]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d202      	bcs.n	80019e8 <Manual_LCD_DrawLine+0xb6>
        ystep = 1;
 80019e2:	2301      	movs	r3, #1
 80019e4:	82bb      	strh	r3, [r7, #20]
 80019e6:	e029      	b.n	8001a3c <Manual_LCD_DrawLine+0x10a>
    else
        ystep = -1;
 80019e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019ec:	82bb      	strh	r3, [r7, #20]

    for (; x1 <= x2; x1++)
 80019ee:	e025      	b.n	8001a3c <Manual_LCD_DrawLine+0x10a>
    {
        if (steep)
 80019f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d006      	beq.n	8001a06 <Manual_LCD_DrawLine+0xd4>
            Manual_LCD_DrawPixel(y1, x1, color);
 80019f8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80019fa:	88f9      	ldrh	r1, [r7, #6]
 80019fc:	88bb      	ldrh	r3, [r7, #4]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff78 	bl	80018f4 <Manual_LCD_DrawPixel>
 8001a04:	e005      	b.n	8001a12 <Manual_LCD_DrawLine+0xe0>
        else
            Manual_LCD_DrawPixel(x1, y1, color);
 8001a06:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001a08:	88b9      	ldrh	r1, [r7, #4]
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff71 	bl	80018f4 <Manual_LCD_DrawPixel>
        err -= dy;
 8001a12:	8afa      	ldrh	r2, [r7, #22]
 8001a14:	897b      	ldrh	r3, [r7, #10]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	82fb      	strh	r3, [r7, #22]
        if (err < 0)
 8001a1c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	da08      	bge.n	8001a36 <Manual_LCD_DrawLine+0x104>
        {
            y1 += ystep;
 8001a24:	8aba      	ldrh	r2, [r7, #20]
 8001a26:	88bb      	ldrh	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8001a2c:	8afa      	ldrh	r2, [r7, #22]
 8001a2e:	89bb      	ldrh	r3, [r7, #12]
 8001a30:	4413      	add	r3, r2
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	82fb      	strh	r3, [r7, #22]
    for (; x1 <= x2; x1++)
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	80fb      	strh	r3, [r7, #6]
 8001a3c:	88fa      	ldrh	r2, [r7, #6]
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d9d5      	bls.n	80019f0 <Manual_LCD_DrawLine+0xbe>
        }
    }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	371c      	adds	r7, #28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd90      	pop	{r4, r7, pc}

08001a4e <Manual_LCD_DrawRectangle>:

void Manual_LCD_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001a4e:	b590      	push	{r4, r7, lr}
 8001a50:	b085      	sub	sp, #20
 8001a52:	af02      	add	r7, sp, #8
 8001a54:	4604      	mov	r4, r0
 8001a56:	4608      	mov	r0, r1
 8001a58:	4611      	mov	r1, r2
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	4623      	mov	r3, r4
 8001a5e:	80fb      	strh	r3, [r7, #6]
 8001a60:	4603      	mov	r3, r0
 8001a62:	80bb      	strh	r3, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	2bef      	cmp	r3, #239	@ 0xef
 8001a70:	d865      	bhi.n	8001b3e <Manual_LCD_DrawRectangle+0xf0>
 8001a72:	88bb      	ldrh	r3, [r7, #4]
 8001a74:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001a78:	d261      	bcs.n	8001b3e <Manual_LCD_DrawRectangle+0xf0>
        return;
    if ((x + width - 1) >= LCD_WIDTH)
 8001a7a:	88fa      	ldrh	r2, [r7, #6]
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	4413      	add	r3, r2
 8001a80:	2bf0      	cmp	r3, #240	@ 0xf0
 8001a82:	dd03      	ble.n	8001a8c <Manual_LCD_DrawRectangle+0x3e>
        width = LCD_WIDTH - x;
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001a8a:	807b      	strh	r3, [r7, #2]
    if ((y + height - 1) >= LCD_HEIGHT)
 8001a8c:	88ba      	ldrh	r2, [r7, #4]
 8001a8e:	883b      	ldrh	r3, [r7, #0]
 8001a90:	4413      	add	r3, r2
 8001a92:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001a96:	dd03      	ble.n	8001aa0 <Manual_LCD_DrawRectangle+0x52>
        height = LCD_HEIGHT - y;
 8001a98:	88bb      	ldrh	r3, [r7, #4]
 8001a9a:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001a9e:	803b      	strh	r3, [r7, #0]

    Manual_LCD_DrawLine(x, y, x + width - 1, y, color);
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	88bc      	ldrh	r4, [r7, #4]
 8001aae:	88b9      	ldrh	r1, [r7, #4]
 8001ab0:	88f8      	ldrh	r0, [r7, #6]
 8001ab2:	8b3b      	ldrh	r3, [r7, #24]
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	f7ff ff3b 	bl	8001932 <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y + height - 1, x + width - 1, y + height - 1, color);
 8001abc:	88ba      	ldrh	r2, [r7, #4]
 8001abe:	883b      	ldrh	r3, [r7, #0]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b299      	uxth	r1, r3
 8001ac8:	88fa      	ldrh	r2, [r7, #6]
 8001aca:	887b      	ldrh	r3, [r7, #2]
 8001acc:	4413      	add	r3, r2
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b29c      	uxth	r4, r3
 8001ad4:	88ba      	ldrh	r2, [r7, #4]
 8001ad6:	883b      	ldrh	r3, [r7, #0]
 8001ad8:	4413      	add	r3, r2
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	88f8      	ldrh	r0, [r7, #6]
 8001ae2:	8b3b      	ldrh	r3, [r7, #24]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	4622      	mov	r2, r4
 8001aea:	f7ff ff22 	bl	8001932 <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y, x, y + height - 1, color);
 8001aee:	88ba      	ldrh	r2, [r7, #4]
 8001af0:	883b      	ldrh	r3, [r7, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b29c      	uxth	r4, r3
 8001afa:	88fa      	ldrh	r2, [r7, #6]
 8001afc:	88b9      	ldrh	r1, [r7, #4]
 8001afe:	88f8      	ldrh	r0, [r7, #6]
 8001b00:	8b3b      	ldrh	r3, [r7, #24]
 8001b02:	9300      	str	r3, [sp, #0]
 8001b04:	4623      	mov	r3, r4
 8001b06:	f7ff ff14 	bl	8001932 <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x + width - 1, y, x + width - 1, y + height - 1, color);
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b298      	uxth	r0, r3
 8001b16:	88fa      	ldrh	r2, [r7, #6]
 8001b18:	887b      	ldrh	r3, [r7, #2]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29c      	uxth	r4, r3
 8001b22:	88ba      	ldrh	r2, [r7, #4]
 8001b24:	883b      	ldrh	r3, [r7, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	88b9      	ldrh	r1, [r7, #4]
 8001b30:	8b3b      	ldrh	r3, [r7, #24]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	4613      	mov	r3, r2
 8001b36:	4622      	mov	r2, r4
 8001b38:	f7ff fefb 	bl	8001932 <Manual_LCD_DrawLine>
 8001b3c:	e000      	b.n	8001b40 <Manual_LCD_DrawRectangle+0xf2>
        return;
 8001b3e:	bf00      	nop
}
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd90      	pop	{r4, r7, pc}
	...

08001b48 <Manual_LCD_FillRectangle>:

void Manual_LCD_FillRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4604      	mov	r4, r0
 8001b50:	4608      	mov	r0, r1
 8001b52:	4611      	mov	r1, r2
 8001b54:	461a      	mov	r2, r3
 8001b56:	4623      	mov	r3, r4
 8001b58:	80fb      	strh	r3, [r7, #6]
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	80bb      	strh	r3, [r7, #4]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	807b      	strh	r3, [r7, #2]
 8001b62:	4613      	mov	r3, r2
 8001b64:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	2bef      	cmp	r3, #239	@ 0xef
 8001b6a:	d855      	bhi.n	8001c18 <Manual_LCD_FillRectangle+0xd0>
 8001b6c:	88bb      	ldrh	r3, [r7, #4]
 8001b6e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001b72:	d251      	bcs.n	8001c18 <Manual_LCD_FillRectangle+0xd0>
        return;
    if ((x + width) > LCD_WIDTH)
 8001b74:	88fa      	ldrh	r2, [r7, #6]
 8001b76:	887b      	ldrh	r3, [r7, #2]
 8001b78:	4413      	add	r3, r2
 8001b7a:	2bf0      	cmp	r3, #240	@ 0xf0
 8001b7c:	dd03      	ble.n	8001b86 <Manual_LCD_FillRectangle+0x3e>
        width = LCD_WIDTH - x;
 8001b7e:	88fb      	ldrh	r3, [r7, #6]
 8001b80:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001b84:	807b      	strh	r3, [r7, #2]
    if ((y + height) > LCD_HEIGHT)
 8001b86:	88ba      	ldrh	r2, [r7, #4]
 8001b88:	883b      	ldrh	r3, [r7, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001b90:	dd03      	ble.n	8001b9a <Manual_LCD_FillRectangle+0x52>
        height = LCD_HEIGHT - y;
 8001b92:	88bb      	ldrh	r3, [r7, #4]
 8001b94:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001b98:	803b      	strh	r3, [r7, #0]

    LCD_Set_Address_Window(x, y, x + width - 1, y + height - 1);
 8001b9a:	88fa      	ldrh	r2, [r7, #6]
 8001b9c:	887b      	ldrh	r3, [r7, #2]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	b29c      	uxth	r4, r3
 8001ba6:	88ba      	ldrh	r2, [r7, #4]
 8001ba8:	883b      	ldrh	r3, [r7, #0]
 8001baa:	4413      	add	r3, r2
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	88b9      	ldrh	r1, [r7, #4]
 8001bb4:	88f8      	ldrh	r0, [r7, #6]
 8001bb6:	4622      	mov	r2, r4
 8001bb8:	f7ff fcf8 	bl	80015ac <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bc2:	4817      	ldr	r0, [pc, #92]	@ (8001c20 <Manual_LCD_FillRectangle+0xd8>)
 8001bc4:	f001 fc06 	bl	80033d4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001bc8:	2200      	movs	r2, #0
 8001bca:	2180      	movs	r1, #128	@ 0x80
 8001bcc:	4814      	ldr	r0, [pc, #80]	@ (8001c20 <Manual_LCD_FillRectangle+0xd8>)
 8001bce:	f001 fc01 	bl	80033d4 <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 8001bd2:	8c3b      	ldrh	r3, [r7, #32]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	723b      	strb	r3, [r7, #8]
 8001bdc:	8c3b      	ldrh	r3, [r7, #32]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	e00a      	b.n	8001bfe <Manual_LCD_FillRectangle+0xb6>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8001be8:	f107 0108 	add.w	r1, r7, #8
 8001bec:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	480c      	ldr	r0, [pc, #48]	@ (8001c24 <Manual_LCD_FillRectangle+0xdc>)
 8001bf4:	f003 fe33 	bl	800585e <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	887b      	ldrh	r3, [r7, #2]
 8001c00:	883a      	ldrh	r2, [r7, #0]
 8001c02:	fb02 f303 	mul.w	r3, r2, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d3ed      	bcc.n	8001be8 <Manual_LCD_FillRectangle+0xa0>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	2180      	movs	r1, #128	@ 0x80
 8001c10:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <Manual_LCD_FillRectangle+0xd8>)
 8001c12:	f001 fbdf 	bl	80033d4 <HAL_GPIO_WritePin>
 8001c16:	e000      	b.n	8001c1a <Manual_LCD_FillRectangle+0xd2>
        return;
 8001c18:	bf00      	nop
}
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd90      	pop	{r4, r7, pc}
 8001c20:	40020400 	.word	0x40020400
 8001c24:	200000d0 	.word	0x200000d0

08001c28 <Manual_LCD_DrawChar>:
// A proper implementation would look up character data in a font table.
// Placeholder for font data - you need to define this
extern const unsigned char Font5x7[][5]; // Example: needs to be defined in font.c

void Manual_LCD_DrawChar(uint16_t x, uint16_t y, char c, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	4604      	mov	r4, r0
 8001c30:	4608      	mov	r0, r1
 8001c32:	4611      	mov	r1, r2
 8001c34:	461a      	mov	r2, r3
 8001c36:	4623      	mov	r3, r4
 8001c38:	80fb      	strh	r3, [r7, #6]
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	80bb      	strh	r3, [r7, #4]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	70fb      	strb	r3, [r7, #3]
 8001c42:	4613      	mov	r3, r2
 8001c44:	803b      	strh	r3, [r7, #0]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT || (x + 5 * size) > LCD_WIDTH || (y + 7 * size) > LCD_HEIGHT)
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	2bef      	cmp	r3, #239	@ 0xef
 8001c4a:	f200 80d1 	bhi.w	8001df0 <Manual_LCD_DrawChar+0x1c8>
 8001c4e:	88bb      	ldrh	r3, [r7, #4]
 8001c50:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001c54:	f080 80cc 	bcs.w	8001df0 <Manual_LCD_DrawChar+0x1c8>
 8001c58:	88f9      	ldrh	r1, [r7, #6]
 8001c5a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	440b      	add	r3, r1
 8001c66:	2bf0      	cmp	r3, #240	@ 0xf0
 8001c68:	f300 80c2 	bgt.w	8001df0 <Manual_LCD_DrawChar+0x1c8>
 8001c6c:	88b9      	ldrh	r1, [r7, #4]
 8001c6e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	440b      	add	r3, r1
 8001c7a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001c7e:	f300 80b7 	bgt.w	8001df0 <Manual_LCD_DrawChar+0x1c8>
    {
        return; // Character won't fit
    }

    if (c < ' ' || c > '~')
 8001c82:	78fb      	ldrb	r3, [r7, #3]
 8001c84:	2b1f      	cmp	r3, #31
 8001c86:	d902      	bls.n	8001c8e <Manual_LCD_DrawChar+0x66>
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	2b7e      	cmp	r3, #126	@ 0x7e
 8001c8c:	d901      	bls.n	8001c92 <Manual_LCD_DrawChar+0x6a>
        c = '?'; // Handle non-printable characters
 8001c8e:	233f      	movs	r3, #63	@ 0x3f
 8001c90:	70fb      	strb	r3, [r7, #3]

    for (uint8_t i = 0; i < 5; i++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	e088      	b.n	8001daa <Manual_LCD_DrawChar+0x182>
    { // Width of char
        uint8_t line = Font5x7[c - ' '][i];
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	f1a3 0220 	sub.w	r2, r3, #32
 8001c9e:	7bf9      	ldrb	r1, [r7, #15]
 8001ca0:	4855      	ldr	r0, [pc, #340]	@ (8001df8 <Manual_LCD_DrawChar+0x1d0>)
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	4403      	add	r3, r0
 8001caa:	440b      	add	r3, r1
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	737b      	strb	r3, [r7, #13]
 8001cb4:	e073      	b.n	8001d9e <Manual_LCD_DrawChar+0x176>
        { // Height of char
            if (line & 0x01)
 8001cb6:	7bbb      	ldrb	r3, [r7, #14]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d034      	beq.n	8001d2a <Manual_LCD_DrawChar+0x102>
            { // Check bit
                if (size == 1)
 8001cc0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d10e      	bne.n	8001ce6 <Manual_LCD_DrawChar+0xbe>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, charColor);
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	88fb      	ldrh	r3, [r7, #6]
 8001cce:	4413      	add	r3, r2
 8001cd0:	b298      	uxth	r0, r3
 8001cd2:	7b7b      	ldrb	r3, [r7, #13]
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	88bb      	ldrh	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	883a      	ldrh	r2, [r7, #0]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f7ff fe08 	bl	80018f4 <Manual_LCD_DrawPixel>
 8001ce4:	e055      	b.n	8001d92 <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, charColor);
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	fb12 f303 	smulbb	r3, r2, r3
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b298      	uxth	r0, r3
 8001cfc:	7b7b      	ldrb	r3, [r7, #13]
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	fb12 f303 	smulbb	r3, r2, r3
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	88bb      	ldrh	r3, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b299      	uxth	r1, r3
 8001d12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d1c:	b29c      	uxth	r4, r3
 8001d1e:	883b      	ldrh	r3, [r7, #0]
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	4623      	mov	r3, r4
 8001d24:	f7ff ff10 	bl	8001b48 <Manual_LCD_FillRectangle>
 8001d28:	e033      	b.n	8001d92 <Manual_LCD_DrawChar+0x16a>
                }
            }
            else
            {
                if (size == 1)
 8001d2a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d10e      	bne.n	8001d50 <Manual_LCD_DrawChar+0x128>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, bgColor);
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	4413      	add	r3, r2
 8001d3a:	b298      	uxth	r0, r3
 8001d3c:	7b7b      	ldrb	r3, [r7, #13]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	88bb      	ldrh	r3, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	8c3a      	ldrh	r2, [r7, #32]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f7ff fdd3 	bl	80018f4 <Manual_LCD_DrawPixel>
 8001d4e:	e020      	b.n	8001d92 <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, bgColor);
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	fb12 f303 	smulbb	r3, r2, r3
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	4413      	add	r3, r2
 8001d64:	b298      	uxth	r0, r3
 8001d66:	7b7b      	ldrb	r3, [r7, #13]
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	fb12 f303 	smulbb	r3, r2, r3
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	88bb      	ldrh	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	b299      	uxth	r1, r3
 8001d7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001d86:	b29c      	uxth	r4, r3
 8001d88:	8c3b      	ldrh	r3, [r7, #32]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	4623      	mov	r3, r4
 8001d8e:	f7ff fedb 	bl	8001b48 <Manual_LCD_FillRectangle>
                }
            }
            line >>= 1;
 8001d92:	7bbb      	ldrb	r3, [r7, #14]
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 8001d98:	7b7b      	ldrb	r3, [r7, #13]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	737b      	strb	r3, [r7, #13]
 8001d9e:	7b7b      	ldrb	r3, [r7, #13]
 8001da0:	2b06      	cmp	r3, #6
 8001da2:	d988      	bls.n	8001cb6 <Manual_LCD_DrawChar+0x8e>
    for (uint8_t i = 0; i < 5; i++)
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	3301      	adds	r3, #1
 8001da8:	73fb      	strb	r3, [r7, #15]
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	f67f af73 	bls.w	8001c98 <Manual_LCD_DrawChar+0x70>
        }
    }
    // Draw a small gap for characters if size > 1 or if you want background fill for the gap
    if (size > 0)
 8001db2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d01b      	beq.n	8001df2 <Manual_LCD_DrawChar+0x1ca>
    { // Fill the column after the character (for spacing)
        Manual_LCD_FillRectangle(x + 5 * size, y, size, 7 * size, bgColor);
 8001dba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	0092      	lsls	r2, r2, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	4413      	add	r3, r2
 8001dcc:	b298      	uxth	r0, r3
 8001dce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	4619      	mov	r1, r3
 8001ddc:	00c9      	lsls	r1, r1, #3
 8001dde:	1acb      	subs	r3, r1, r3
 8001de0:	b29c      	uxth	r4, r3
 8001de2:	88b9      	ldrh	r1, [r7, #4]
 8001de4:	8c3b      	ldrh	r3, [r7, #32]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	4623      	mov	r3, r4
 8001dea:	f7ff fead 	bl	8001b48 <Manual_LCD_FillRectangle>
 8001dee:	e000      	b.n	8001df2 <Manual_LCD_DrawChar+0x1ca>
        return; // Character won't fit
 8001df0:	bf00      	nop
    }
}
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd90      	pop	{r4, r7, pc}
 8001df8:	08006d08 	.word	0x08006d08

08001dfc <Manual_LCD_DrawString>:

void Manual_LCD_DrawString(uint16_t x, uint16_t y, const char *str, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b087      	sub	sp, #28
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	60ba      	str	r2, [r7, #8]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4603      	mov	r3, r0
 8001e08:	81fb      	strh	r3, [r7, #14]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	81bb      	strh	r3, [r7, #12]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	80fb      	strh	r3, [r7, #6]
    while (*str)
 8001e12:	e037      	b.n	8001e84 <Manual_LCD_DrawString+0x88>
    {
        Manual_LCD_DrawChar(x, y, *str, charColor, bgColor, size);
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	781a      	ldrb	r2, [r3, #0]
 8001e18:	88fc      	ldrh	r4, [r7, #6]
 8001e1a:	89b9      	ldrh	r1, [r7, #12]
 8001e1c:	89f8      	ldrh	r0, [r7, #14]
 8001e1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	8c3b      	ldrh	r3, [r7, #32]
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	4623      	mov	r3, r4
 8001e2a:	f7ff fefd 	bl	8001c28 <Manual_LCD_DrawChar>
        x += 6 * size; // Advance X position (5 for char + 1 for spacing)
 8001e2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	0052      	lsls	r2, r2, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	89fb      	ldrh	r3, [r7, #14]
 8001e40:	4413      	add	r3, r2
 8001e42:	81fb      	strh	r3, [r7, #14]
        if (x + 5 * size >= LCD_WIDTH)
 8001e44:	89f9      	ldrh	r1, [r7, #14]
 8001e46:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	440b      	add	r3, r1
 8001e52:	2bef      	cmp	r3, #239	@ 0xef
 8001e54:	dd09      	ble.n	8001e6a <Manual_LCD_DrawString+0x6e>
        { // Simple wrap
            x = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	81fb      	strh	r3, [r7, #14]
            y += 8 * size; // Advance Y position
 8001e5a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	89bb      	ldrh	r3, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	81bb      	strh	r3, [r7, #12]
        }
        if (y + 7 * size >= LCD_HEIGHT)
 8001e6a:	89b9      	ldrh	r1, [r7, #12]
 8001e6c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	440b      	add	r3, r1
 8001e78:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001e7c:	da07      	bge.n	8001e8e <Manual_LCD_DrawString+0x92>
            break; // Out of screen
        str++;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	3301      	adds	r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
    while (*str)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1c3      	bne.n	8001e14 <Manual_LCD_DrawString+0x18>
    }
}
 8001e8c:	e000      	b.n	8001e90 <Manual_LCD_DrawString+0x94>
            break; // Out of screen
 8001e8e:	bf00      	nop
}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd90      	pop	{r4, r7, pc}

08001e98 <Manual_LCD_DrawLayout>:

void Manual_LCD_DrawLayout(void)
{
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b09f      	sub	sp, #124	@ 0x7c
 8001e9c:	af02      	add	r7, sp, #8
    // Clear screen with blue background
    Manual_LCD_Clear(COLOR_BLUE);
 8001e9e:	201f      	movs	r0, #31
 8001ea0:	f7ff fcea 	bl	8001878 <Manual_LCD_Clear>

    uint16_t text_color = COLOR_WHITE;
 8001ea4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ea8:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
    uint16_t box_fill_color = COLOR_BLACK;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    uint16_t box_border_color = COLOR_WHITE;
 8001eb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001eb6:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
    uint8_t font_size = 1;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
    uint8_t char_height = 7; // For 5x7 font at size 1
 8001ec0:	2307      	movs	r3, #7
 8001ec2:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
    // uint8_t char_width_with_spacing = 6; // For 5x7 font at size 1

    // 1. Top Info Box: "Nhom: [nhom 01]"
    uint16_t info_box_x = 10;
 8001ec6:	230a      	movs	r3, #10
 8001ec8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    uint16_t info_box_y = 20;
 8001ecc:	2314      	movs	r3, #20
 8001ece:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
    uint16_t info_box_w = 150;
 8001ed2:	2396      	movs	r3, #150	@ 0x96
 8001ed4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
    uint16_t info_box_h = 30;
 8001ed8:	231e      	movs	r3, #30
 8001eda:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
    const char *info_text = "Nhom: [nhom 01]";
 8001ede:	4bcd      	ldr	r3, [pc, #820]	@ (8002214 <Manual_LCD_DrawLayout+0x37c>)
 8001ee0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint16_t info_text_x = info_box_x + 5;
 8001ee2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8001ee6:	3305      	adds	r3, #5
 8001ee8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    uint16_t info_text_y = info_box_y + (info_box_h - char_height * font_size) / 2;
 8001eec:	f8b7 2060 	ldrh.w	r2, [r7, #96]	@ 0x60
 8001ef0:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001ef4:	f897 1069 	ldrb.w	r1, [r7, #105]	@ 0x69
 8001ef8:	fb01 f303 	mul.w	r3, r1, r3
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	0fda      	lsrs	r2, r3, #31
 8001f00:	4413      	add	r3, r2
 8001f02:	105b      	asrs	r3, r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

    Manual_LCD_FillRectangle(info_box_x, info_box_y, info_box_w, info_box_h, box_fill_color);
 8001f10:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 8001f14:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8001f18:	f8b7 1064 	ldrh.w	r1, [r7, #100]	@ 0x64
 8001f1c:	f8b7 0066 	ldrh.w	r0, [r7, #102]	@ 0x66
 8001f20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	4623      	mov	r3, r4
 8001f28:	f7ff fe0e 	bl	8001b48 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(info_box_x, info_box_y, info_box_w, info_box_h, box_border_color);
 8001f2c:	f8b7 4060 	ldrh.w	r4, [r7, #96]	@ 0x60
 8001f30:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 8001f34:	f8b7 1064 	ldrh.w	r1, [r7, #100]	@ 0x64
 8001f38:	f8b7 0066 	ldrh.w	r0, [r7, #102]	@ 0x66
 8001f3c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	4623      	mov	r3, r4
 8001f44:	f7ff fd83 	bl	8001a4e <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(info_text_x, info_text_y, info_text, text_color, box_fill_color, font_size);
 8001f48:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8001f4c:	f8b7 1058 	ldrh.w	r1, [r7, #88]	@ 0x58
 8001f50:	f8b7 005a 	ldrh.w	r0, [r7, #90]	@ 0x5a
 8001f54:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001f64:	f7ff ff4a 	bl	8001dfc <Manual_LCD_DrawString>

    // 2. Task Boxes Grid
    uint16_t margin = 10;
 8001f68:	230a      	movs	r3, #10
 8001f6a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    uint16_t spacing_between_boxes = 10;
 8001f6e:	230a      	movs	r3, #10
 8001f70:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    uint16_t task_box_w = (LCD_WIDTH - 2 * margin - spacing_between_boxes) / 2;
 8001f74:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001f78:	f1c3 0378 	rsb	r3, r3, #120	@ 0x78
 8001f7c:	005a      	lsls	r2, r3, #1
 8001f7e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	0fda      	lsrs	r2, r3, #31
 8001f86:	4413      	add	r3, r2
 8001f88:	105b      	asrs	r3, r3, #1
 8001f8a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t task_box_h = 70;
 8001f8e:	2346      	movs	r3, #70	@ 0x46
 8001f90:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
    uint16_t start_y_tasks_row1 = info_box_y + info_box_h + 20;
 8001f94:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 8001f98:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8001f9c:	4413      	add	r3, r2
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3314      	adds	r3, #20
 8001fa2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint16_t text_task_x_padding = 10; // Left padding for text inside task boxes
 8001fa6:	230a      	movs	r3, #10
 8001fa8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    uint16_t text_task_y_offset = (task_box_h - char_height * font_size) / 2;
 8001fac:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8001fb0:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8001fb4:	f897 1069 	ldrb.w	r1, [r7, #105]	@ 0x69
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	0fda      	lsrs	r2, r3, #31
 8001fc0:	4413      	add	r3, r2
 8001fc2:	105b      	asrs	r3, r3, #1
 8001fc4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

    // Task 02-1 (Top-Left)
    uint16_t task1_x = margin;
 8001fc8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8001fcc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    uint16_t task1_y = start_y_tasks_row1;
 8001fd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001fd4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    const char *task1_text = "Task 02-1";
 8001fd8:	4b8f      	ldr	r3, [pc, #572]	@ (8002218 <Manual_LCD_DrawLayout+0x380>)
 8001fda:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t text_task1_x = task1_x + text_task_x_padding;
 8001fdc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8001fe0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8001fe4:	4413      	add	r3, r2
 8001fe6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint16_t text_task1_y = task1_y + text_task_y_offset;
 8001fe8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001fec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8001ff0:	4413      	add	r3, r2
 8001ff2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    Manual_LCD_FillRectangle(task1_x, task1_y, task_box_w, task_box_h, box_fill_color);
 8001ff4:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 8001ff8:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8001ffc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8002000:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8002004:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	4623      	mov	r3, r4
 800200c:	f7ff fd9c 	bl	8001b48 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task1_x, task1_y, task_box_w, task_box_h, box_border_color);
 8002010:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 8002014:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8002018:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800201c:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8002020:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	4623      	mov	r3, r4
 8002028:	f7ff fd11 	bl	8001a4e <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task1_x, text_task1_y, task1_text, text_color, box_fill_color, font_size);
 800202c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8002030:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8002032:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 8002034:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	4613      	mov	r3, r2
 8002042:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002044:	f7ff feda 	bl	8001dfc <Manual_LCD_DrawString>

    // Task 02-2 (Top-Right)
    uint16_t task2_x = task1_x + task_box_w + spacing_between_boxes;
 8002048:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800204c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002050:	4413      	add	r3, r2
 8002052:	b29a      	uxth	r2, r3
 8002054:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002058:	4413      	add	r3, r2
 800205a:	877b      	strh	r3, [r7, #58]	@ 0x3a
    uint16_t task2_y = start_y_tasks_row1;
 800205c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002060:	873b      	strh	r3, [r7, #56]	@ 0x38
    const char *task2_text = "Task 02-2";
 8002062:	4b6e      	ldr	r3, [pc, #440]	@ (800221c <Manual_LCD_DrawLayout+0x384>)
 8002064:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t text_task2_x = task2_x + text_task_x_padding;
 8002066:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8002068:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800206c:	4413      	add	r3, r2
 800206e:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t text_task2_y = task2_y + text_task_y_offset;
 8002070:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002072:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002076:	4413      	add	r3, r2
 8002078:	863b      	strh	r3, [r7, #48]	@ 0x30
    Manual_LCD_FillRectangle(task2_x, task2_y, task_box_w, task_box_h, box_fill_color);
 800207a:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 800207e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8002082:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002084:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 8002086:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	4623      	mov	r3, r4
 800208e:	f7ff fd5b 	bl	8001b48 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task2_x, task2_y, task_box_w, task_box_h, box_border_color);
 8002092:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 8002096:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 800209a:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800209c:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 800209e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	4623      	mov	r3, r4
 80020a6:	f7ff fcd2 	bl	8001a4e <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task2_x, text_task2_y, task2_text, text_color, box_fill_color, font_size);
 80020aa:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80020ae:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80020b0:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 80020b2:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80020b6:	9301      	str	r3, [sp, #4]
 80020b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	4613      	mov	r3, r2
 80020c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80020c2:	f7ff fe9b 	bl	8001dfc <Manual_LCD_DrawString>

    // Second row of task boxes
    uint16_t start_y_tasks_row2 = start_y_tasks_row1 + task_box_h + spacing_between_boxes;
 80020c6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80020ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80020ce:	4413      	add	r3, r2
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 80020d6:	4413      	add	r3, r2
 80020d8:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Task 02-3 (Bottom-Left)
    uint16_t task3_x = margin;
 80020da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80020de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t task3_y = start_y_tasks_row2;
 80020e0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80020e2:	857b      	strh	r3, [r7, #42]	@ 0x2a
    const char *task3_text = "Task 02-3";
 80020e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002220 <Manual_LCD_DrawLayout+0x388>)
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t text_task3_x = task3_x + text_task_x_padding;
 80020e8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80020ea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80020ee:	4413      	add	r3, r2
 80020f0:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t text_task3_y = task3_y + text_task_y_offset;
 80020f2:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80020f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020f8:	4413      	add	r3, r2
 80020fa:	843b      	strh	r3, [r7, #32]
    Manual_LCD_FillRectangle(task3_x, task3_y, task_box_w, task_box_h, box_fill_color);
 80020fc:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 8002100:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8002104:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 8002106:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 8002108:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800210c:	9300      	str	r3, [sp, #0]
 800210e:	4623      	mov	r3, r4
 8002110:	f7ff fd1a 	bl	8001b48 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task3_x, task3_y, task_box_w, task_box_h, box_border_color);
 8002114:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 8002118:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 800211c:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800211e:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 8002120:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	4623      	mov	r3, r4
 8002128:	f7ff fc91 	bl	8001a4e <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task3_x, text_task3_y, task3_text, text_color, box_fill_color, font_size);
 800212c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8002130:	8c39      	ldrh	r1, [r7, #32]
 8002132:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8002134:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	4613      	mov	r3, r2
 8002142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002144:	f7ff fe5a 	bl	8001dfc <Manual_LCD_DrawString>

    // Task 02-4 (Bottom-Right)
    uint16_t task4_x = task1_x + task_box_w + spacing_between_boxes;
 8002148:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800214c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002150:	4413      	add	r3, r2
 8002152:	b29a      	uxth	r2, r3
 8002154:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002158:	4413      	add	r3, r2
 800215a:	83fb      	strh	r3, [r7, #30]
    uint16_t task4_y = start_y_tasks_row2;
 800215c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800215e:	83bb      	strh	r3, [r7, #28]
    const char *task4_text = "Task 02-4";
 8002160:	4b30      	ldr	r3, [pc, #192]	@ (8002224 <Manual_LCD_DrawLayout+0x38c>)
 8002162:	61bb      	str	r3, [r7, #24]
    uint16_t text_task4_x = task4_x + text_task_x_padding;
 8002164:	8bfa      	ldrh	r2, [r7, #30]
 8002166:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800216a:	4413      	add	r3, r2
 800216c:	82fb      	strh	r3, [r7, #22]
    uint16_t text_task4_y = task4_y + text_task_y_offset;
 800216e:	8bba      	ldrh	r2, [r7, #28]
 8002170:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002174:	4413      	add	r3, r2
 8002176:	82bb      	strh	r3, [r7, #20]
    Manual_LCD_FillRectangle(task4_x, task4_y, task_box_w, task_box_h, box_fill_color);
 8002178:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 800217c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8002180:	8bb9      	ldrh	r1, [r7, #28]
 8002182:	8bf8      	ldrh	r0, [r7, #30]
 8002184:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	4623      	mov	r3, r4
 800218c:	f7ff fcdc 	bl	8001b48 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task4_x, task4_y, task_box_w, task_box_h, box_border_color);
 8002190:	f8b7 4050 	ldrh.w	r4, [r7, #80]	@ 0x50
 8002194:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8002198:	8bb9      	ldrh	r1, [r7, #28]
 800219a:	8bf8      	ldrh	r0, [r7, #30]
 800219c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	4623      	mov	r3, r4
 80021a4:	f7ff fc53 	bl	8001a4e <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task4_x, text_task4_y, task4_text, text_color, box_fill_color, font_size);
 80021a8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80021ac:	8ab9      	ldrh	r1, [r7, #20]
 80021ae:	8af8      	ldrh	r0, [r7, #22]
 80021b0:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80021b4:	9301      	str	r3, [sp, #4]
 80021b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	4613      	mov	r3, r2
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	f7ff fe1c 	bl	8001dfc <Manual_LCD_DrawString>

    // 3. Back Button
    uint16_t back_button_h = 45;
 80021c4:	232d      	movs	r3, #45	@ 0x2d
 80021c6:	827b      	strh	r3, [r7, #18]
    uint16_t back_button_w = task_box_w;
 80021c8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80021cc:	823b      	strh	r3, [r7, #16]
    const char *back_button_text = "<<Back";
 80021ce:	4b16      	ldr	r3, [pc, #88]	@ (8002228 <Manual_LCD_DrawLayout+0x390>)
 80021d0:	60fb      	str	r3, [r7, #12]
    uint16_t back_button_text_len = strlen(back_button_text);
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f7fd fffc 	bl	80001d0 <strlen>
 80021d8:	4603      	mov	r3, r0
 80021da:	817b      	strh	r3, [r7, #10]
    uint16_t back_button_text_pixel_width = back_button_text_len * 6 * font_size; // 6 is char width with spacing for 5x7 font
 80021dc:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	897a      	ldrh	r2, [r7, #10]
 80021e4:	fb12 f303 	smulbb	r3, r2, r3
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	0052      	lsls	r2, r2, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	813b      	strh	r3, [r7, #8]

    uint16_t back_button_y = start_y_tasks_row2 + task_box_h + 20;
 80021f4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80021f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80021fa:	4413      	add	r3, r2
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	3314      	adds	r3, #20
 8002200:	80fb      	strh	r3, [r7, #6]
    uint16_t back_button_x = LCD_WIDTH - margin - back_button_w;
 8002202:	f8b7 2056 	ldrh.w	r2, [r7, #86]	@ 0x56
 8002206:	8a3b      	ldrh	r3, [r7, #16]
 8002208:	4413      	add	r3, r2
 800220a:	b29b      	uxth	r3, r3
 800220c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8002210:	e00c      	b.n	800222c <Manual_LCD_DrawLayout+0x394>
 8002212:	bf00      	nop
 8002214:	08006cbc 	.word	0x08006cbc
 8002218:	08006ccc 	.word	0x08006ccc
 800221c:	08006cd8 	.word	0x08006cd8
 8002220:	08006ce4 	.word	0x08006ce4
 8002224:	08006cf0 	.word	0x08006cf0
 8002228:	08006cfc 	.word	0x08006cfc
 800222c:	80bb      	strh	r3, [r7, #4]

    uint16_t text_button_x = back_button_x + (back_button_w - back_button_text_pixel_width) / 2;
 800222e:	8a3a      	ldrh	r2, [r7, #16]
 8002230:	893b      	ldrh	r3, [r7, #8]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	0fda      	lsrs	r2, r3, #31
 8002236:	4413      	add	r3, r2
 8002238:	105b      	asrs	r3, r3, #1
 800223a:	b29a      	uxth	r2, r3
 800223c:	88bb      	ldrh	r3, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	807b      	strh	r3, [r7, #2]
    uint16_t text_button_y = back_button_y + (back_button_h - char_height * font_size) / 2;
 8002242:	8a7a      	ldrh	r2, [r7, #18]
 8002244:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8002248:	f897 1069 	ldrb.w	r1, [r7, #105]	@ 0x69
 800224c:	fb01 f303 	mul.w	r3, r1, r3
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	0fda      	lsrs	r2, r3, #31
 8002254:	4413      	add	r3, r2
 8002256:	105b      	asrs	r3, r3, #1
 8002258:	b29a      	uxth	r2, r3
 800225a:	88fb      	ldrh	r3, [r7, #6]
 800225c:	4413      	add	r3, r2
 800225e:	803b      	strh	r3, [r7, #0]

    Manual_LCD_FillRectangle(back_button_x, back_button_y, back_button_w, back_button_h, box_fill_color);
 8002260:	8a7c      	ldrh	r4, [r7, #18]
 8002262:	8a3a      	ldrh	r2, [r7, #16]
 8002264:	88f9      	ldrh	r1, [r7, #6]
 8002266:	88b8      	ldrh	r0, [r7, #4]
 8002268:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	4623      	mov	r3, r4
 8002270:	f7ff fc6a 	bl	8001b48 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(back_button_x, back_button_y, back_button_w, back_button_h, box_border_color);
 8002274:	8a7c      	ldrh	r4, [r7, #18]
 8002276:	8a3a      	ldrh	r2, [r7, #16]
 8002278:	88f9      	ldrh	r1, [r7, #6]
 800227a:	88b8      	ldrh	r0, [r7, #4]
 800227c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	4623      	mov	r3, r4
 8002284:	f7ff fbe3 	bl	8001a4e <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_button_x, text_button_y, back_button_text, text_color, box_fill_color, font_size);
 8002288:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 800228c:	8839      	ldrh	r1, [r7, #0]
 800228e:	8878      	ldrh	r0, [r7, #2]
 8002290:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	f7ff fdac 	bl	8001dfc <Manual_LCD_DrawString>
}
 80022a4:	bf00      	nop
 80022a6:	3774      	adds	r7, #116	@ 0x74
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd90      	pop	{r4, r7, pc}

080022ac <Manual_LCD_UpdateInfoText>:

// New function to update the info text
void Manual_LCD_UpdateInfoText(const char *new_text)
{
 80022ac:	b590      	push	{r4, r7, lr}
 80022ae:	b08b      	sub	sp, #44	@ 0x2c
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	6078      	str	r0, [r7, #4]
    // Parameters from Manual_LCD_DrawLayout for the Top Info Box
    uint16_t info_box_x = 10;
 80022b4:	230a      	movs	r3, #10
 80022b6:	83fb      	strh	r3, [r7, #30]
    uint16_t info_box_y = 10;
 80022b8:	230a      	movs	r3, #10
 80022ba:	83bb      	strh	r3, [r7, #28]
    uint16_t info_box_w = 150;
 80022bc:	2396      	movs	r3, #150	@ 0x96
 80022be:	837b      	strh	r3, [r7, #26]
    uint16_t info_box_h = 30;
 80022c0:	231e      	movs	r3, #30
 80022c2:	833b      	strh	r3, [r7, #24]
    uint8_t font_size = 1;
 80022c4:	2301      	movs	r3, #1
 80022c6:	75fb      	strb	r3, [r7, #23]
    uint8_t char_height = 7; // For 5x7 font at size 1
 80022c8:	2307      	movs	r3, #7
 80022ca:	75bb      	strb	r3, [r7, #22]

    uint16_t text_color = COLOR_WHITE;     // Original text color from DrawLayout
 80022cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80022d0:	82bb      	strh	r3, [r7, #20]
    uint16_t box_fill_color = COLOR_BLACK; // Original box fill color from DrawLayout
 80022d2:	2300      	movs	r3, #0
 80022d4:	827b      	strh	r3, [r7, #18]

    uint16_t info_text_x = info_box_x + 5;
 80022d6:	8bfb      	ldrh	r3, [r7, #30]
 80022d8:	3305      	adds	r3, #5
 80022da:	823b      	strh	r3, [r7, #16]
    uint16_t info_text_y = info_box_y + (info_box_h - char_height * font_size) / 2;
 80022dc:	8b3a      	ldrh	r2, [r7, #24]
 80022de:	7dbb      	ldrb	r3, [r7, #22]
 80022e0:	7df9      	ldrb	r1, [r7, #23]
 80022e2:	fb01 f303 	mul.w	r3, r1, r3
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	0fda      	lsrs	r2, r3, #31
 80022ea:	4413      	add	r3, r2
 80022ec:	105b      	asrs	r3, r3, #1
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	8bbb      	ldrh	r3, [r7, #28]
 80022f2:	4413      	add	r3, r2
 80022f4:	81fb      	strh	r3, [r7, #14]

    // Clear the inner part of the info box where text resides
    // The border is 1px, so we fill from x+1, y+1 with width-2, height-2
    Manual_LCD_FillRectangle(info_box_x + 1, info_box_y + 1, info_box_w - 2, info_box_h - 2, box_fill_color);
 80022f6:	8bfb      	ldrh	r3, [r7, #30]
 80022f8:	3301      	adds	r3, #1
 80022fa:	b298      	uxth	r0, r3
 80022fc:	8bbb      	ldrh	r3, [r7, #28]
 80022fe:	3301      	adds	r3, #1
 8002300:	b299      	uxth	r1, r3
 8002302:	8b7b      	ldrh	r3, [r7, #26]
 8002304:	3b02      	subs	r3, #2
 8002306:	b29a      	uxth	r2, r3
 8002308:	8b3b      	ldrh	r3, [r7, #24]
 800230a:	3b02      	subs	r3, #2
 800230c:	b29c      	uxth	r4, r3
 800230e:	8a7b      	ldrh	r3, [r7, #18]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	4623      	mov	r3, r4
 8002314:	f7ff fc18 	bl	8001b48 <Manual_LCD_FillRectangle>

    // Draw the new string with original text color and original box fill as background
    Manual_LCD_DrawString(info_text_x, info_text_y, new_text, text_color, box_fill_color, font_size);
 8002318:	8aba      	ldrh	r2, [r7, #20]
 800231a:	89f9      	ldrh	r1, [r7, #14]
 800231c:	8a38      	ldrh	r0, [r7, #16]
 800231e:	7dfb      	ldrb	r3, [r7, #23]
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	8a7b      	ldrh	r3, [r7, #18]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	4613      	mov	r3, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	f7ff fd67 	bl	8001dfc <Manual_LCD_DrawString>
}
 800232e:	bf00      	nop
 8002330:	3724      	adds	r7, #36	@ 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd90      	pop	{r4, r7, pc}
	...

08002338 <TP_Read_ADC_Raw>:
#define TOUCH_RAW_THRESHOLD 35 // Increased from 20 to 35

// Low-level SPI communication for touch
// Sends 1 byte command, receives 2 bytes data (12-bit ADC value)
static uint16_t TP_Read_ADC_Raw(uint8_t cmd)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_byte = cmd;
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buffer[2] = {0, 0};
 8002346:	2300      	movs	r3, #0
 8002348:	813b      	strh	r3, [r7, #8]
    uint16_t adc_val = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	81fb      	strh	r3, [r7, #14]

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET); // Select touch controller
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002354:	4815      	ldr	r0, [pc, #84]	@ (80023ac <TP_Read_ADC_Raw+0x74>)
 8002356:	f001 f83d 	bl	80033d4 <HAL_GPIO_WritePin>

    // Send command byte
    HAL_SPI_Transmit(g_hspi_touch_ptr, &tx_byte, 1, HAL_MAX_DELAY);
 800235a:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <TP_Read_ADC_Raw+0x78>)
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	f107 010d 	add.w	r1, r7, #13
 8002362:	f04f 33ff 	mov.w	r3, #4294967295
 8002366:	2201      	movs	r2, #1
 8002368:	f003 fa79 	bl	800585e <HAL_SPI_Transmit>

    // Receive 2 data bytes. Some controllers might need dummy clocks before data is valid.
    // For XPT2046/ADS7846, data usually follows directly.
    HAL_SPI_Receive(g_hspi_touch_ptr, rx_buffer, 2, HAL_MAX_DELAY);
 800236c:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <TP_Read_ADC_Raw+0x78>)
 800236e:	6818      	ldr	r0, [r3, #0]
 8002370:	f107 0108 	add.w	r1, r7, #8
 8002374:	f04f 33ff 	mov.w	r3, #4294967295
 8002378:	2202      	movs	r2, #2
 800237a:	f003 fbb4 	bl	8005ae6 <HAL_SPI_Receive>

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect
 800237e:	2201      	movs	r2, #1
 8002380:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002384:	4809      	ldr	r0, [pc, #36]	@ (80023ac <TP_Read_ADC_Raw+0x74>)
 8002386:	f001 f825 	bl	80033d4 <HAL_GPIO_WritePin>

    adc_val = (rx_buffer[0] << 8) | rx_buffer[1];
 800238a:	7a3b      	ldrb	r3, [r7, #8]
 800238c:	b21b      	sxth	r3, r3
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	b21a      	sxth	r2, r3
 8002392:	7a7b      	ldrb	r3, [r7, #9]
 8002394:	b21b      	sxth	r3, r3
 8002396:	4313      	orrs	r3, r2
 8002398:	b21b      	sxth	r3, r3
 800239a:	81fb      	strh	r3, [r7, #14]
    adc_val >>= 3; // Keep the most significant 12 bits (XPT2046 specific, D0 is at bit 3 of second byte)
 800239c:	89fb      	ldrh	r3, [r7, #14]
 800239e:	08db      	lsrs	r3, r3, #3
 80023a0:	81fb      	strh	r3, [r7, #14]
                   // Original code used >>4, which might be for a different ADC alignment or resolution.
                   // If raw values are consistently too low or high, this shift might need adjustment.
    return adc_val;
 80023a2:	89fb      	ldrh	r3, [r7, #14]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40020000 	.word	0x40020000
 80023b0:	20000128 	.word	0x20000128

080023b4 <Manual_Touch_Init>:

void Manual_Touch_Init(SPI_HandleTypeDef *hspi_touch)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
    g_hspi_touch_ptr = hspi_touch;
 80023bc:	4a06      	ldr	r2, [pc, #24]	@ (80023d8 <Manual_Touch_Init+0x24>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6013      	str	r3, [r2, #0]
    // GPIOs for TP_CS (PA9) and TP_IRQ (PB4) are assumed to be initialized
    // in main.c's MX_GPIO_Init() as Output PP and Input Pull-up respectively.
    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect touch controller initially
 80023c2:	2201      	movs	r2, #1
 80023c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80023c8:	4804      	ldr	r0, [pc, #16]	@ (80023dc <Manual_Touch_Init+0x28>)
 80023ca:	f001 f803 	bl	80033d4 <HAL_GPIO_WritePin>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000128 	.word	0x20000128
 80023dc:	40020000 	.word	0x40020000

080023e0 <Manual_Touch_Pressed>:

uint8_t Manual_Touch_Pressed(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
    // TP_IRQ_Pin is low when pressed (assuming pull-up resistor is enabled)
    return (HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == GPIO_PIN_RESET);
 80023e4:	2110      	movs	r1, #16
 80023e6:	4805      	ldr	r0, [pc, #20]	@ (80023fc <Manual_Touch_Pressed+0x1c>)
 80023e8:	f000 ffdc 	bl	80033a4 <HAL_GPIO_ReadPin>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf0c      	ite	eq
 80023f2:	2301      	moveq	r3, #1
 80023f4:	2300      	movne	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40020400 	.word	0x40020400

08002400 <Manual_Touch_GetRawPoint>:

uint8_t Manual_Touch_GetRawPoint(Coordinate *rawPoint)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b095      	sub	sp, #84	@ 0x54
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
    if (!Manual_Touch_Pressed())
 8002408:	f7ff ffea 	bl	80023e0 <Manual_Touch_Pressed>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <Manual_Touch_GetRawPoint+0x16>
    {
        return 0; // Not pressed
 8002412:	2300      	movs	r3, #0
 8002414:	e1d0      	b.n	80027b8 <Manual_Touch_GetRawPoint+0x3b8>
    uint16_t x_samples[TOUCH_AVG_SAMPLES];
    uint16_t y_samples[TOUCH_AVG_SAMPLES];
    uint8_t i;

    // Read all X samples first
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 8002416:	2300      	movs	r3, #0
 8002418:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800241c:	e03e      	b.n	800249c <Manual_Touch_GetRawPoint+0x9c>
    {
        if (!Manual_Touch_Pressed() && i >= 1)
 800241e:	f7ff ffdf 	bl	80023e0 <Manual_Touch_Pressed>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d128      	bne.n	800247a <Manual_Touch_GetRawPoint+0x7a>
 8002428:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800242c:	2b00      	cmp	r3, #0
 800242e:	d024      	beq.n	800247a <Manual_Touch_GetRawPoint+0x7a>
        { // Check if pen lifted after at least one sample
            // If pen lifted early, try to use what we have if enough samples, or fail
            if (i < 3)
 8002430:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002434:	2b02      	cmp	r3, #2
 8002436:	d801      	bhi.n	800243c <Manual_Touch_GetRawPoint+0x3c>
                return 0; // Not enough samples for even one average
 8002438:	2300      	movs	r3, #0
 800243a:	e1bd      	b.n	80027b8 <Manual_Touch_GetRawPoint+0x3b8>
            // Fill remaining samples with the last good one to avoid distorting average too much
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 800243c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002440:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002444:	e014      	b.n	8002470 <Manual_Touch_GetRawPoint+0x70>
            {
                x_samples[j] = x_samples[i - 1];
 8002446:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800244a:	3b01      	subs	r3, #1
 800244c:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	3350      	adds	r3, #80	@ 0x50
 8002454:	443b      	add	r3, r7
 8002456:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800245a:	0053      	lsls	r3, r2, #1
 800245c:	3350      	adds	r3, #80	@ 0x50
 800245e:	443b      	add	r3, r7
 8002460:	460a      	mov	r2, r1
 8002462:	f823 2c24 	strh.w	r2, [r3, #-36]
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 8002466:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800246a:	3301      	adds	r3, #1
 800246c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 8002470:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8002474:	2b08      	cmp	r3, #8
 8002476:	d9e6      	bls.n	8002446 <Manual_Touch_GetRawPoint+0x46>
            }
            break; // Exit X sampling loop
 8002478:	e014      	b.n	80024a4 <Manual_Touch_GetRawPoint+0xa4>
        }
        x_samples[i] = TP_Read_ADC_Raw(TP_CMD_READ_X);
 800247a:	f897 404f 	ldrb.w	r4, [r7, #79]	@ 0x4f
 800247e:	2090      	movs	r0, #144	@ 0x90
 8002480:	f7ff ff5a 	bl	8002338 <TP_Read_ADC_Raw>
 8002484:	4603      	mov	r3, r0
 8002486:	461a      	mov	r2, r3
 8002488:	0063      	lsls	r3, r4, #1
 800248a:	3350      	adds	r3, #80	@ 0x50
 800248c:	443b      	add	r3, r7
 800248e:	f823 2c24 	strh.w	r2, [r3, #-36]
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 8002492:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002496:	3301      	adds	r3, #1
 8002498:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800249c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d9bc      	bls.n	800241e <Manual_Touch_GetRawPoint+0x1e>
        // HAL_Delay(1); // Increased delay slightly
    }

    // Read all Y samples
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80024aa:	e03e      	b.n	800252a <Manual_Touch_GetRawPoint+0x12a>
    {
        if (!Manual_Touch_Pressed() && i >= 1)
 80024ac:	f7ff ff98 	bl	80023e0 <Manual_Touch_Pressed>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d128      	bne.n	8002508 <Manual_Touch_GetRawPoint+0x108>
 80024b6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d024      	beq.n	8002508 <Manual_Touch_GetRawPoint+0x108>
        {
            if (i < 3)
 80024be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d801      	bhi.n	80024ca <Manual_Touch_GetRawPoint+0xca>
                return 0;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e176      	b.n	80027b8 <Manual_Touch_GetRawPoint+0x3b8>
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 80024ca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80024ce:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80024d2:	e014      	b.n	80024fe <Manual_Touch_GetRawPoint+0xfe>
            {
                y_samples[j] = y_samples[i - 1];
 80024d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80024d8:	3b01      	subs	r3, #1
 80024da:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	3350      	adds	r3, #80	@ 0x50
 80024e2:	443b      	add	r3, r7
 80024e4:	f833 1c38 	ldrh.w	r1, [r3, #-56]
 80024e8:	0053      	lsls	r3, r2, #1
 80024ea:	3350      	adds	r3, #80	@ 0x50
 80024ec:	443b      	add	r3, r7
 80024ee:	460a      	mov	r2, r1
 80024f0:	f823 2c38 	strh.w	r2, [r3, #-56]
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 80024f4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80024f8:	3301      	adds	r3, #1
 80024fa:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 80024fe:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002502:	2b08      	cmp	r3, #8
 8002504:	d9e6      	bls.n	80024d4 <Manual_Touch_GetRawPoint+0xd4>
            }
            break; // Exit Y sampling loop
 8002506:	e014      	b.n	8002532 <Manual_Touch_GetRawPoint+0x132>
        }
        y_samples[i] = TP_Read_ADC_Raw(TP_CMD_READ_Y);
 8002508:	f897 404f 	ldrb.w	r4, [r7, #79]	@ 0x4f
 800250c:	20d0      	movs	r0, #208	@ 0xd0
 800250e:	f7ff ff13 	bl	8002338 <TP_Read_ADC_Raw>
 8002512:	4603      	mov	r3, r0
 8002514:	461a      	mov	r2, r3
 8002516:	0063      	lsls	r3, r4, #1
 8002518:	3350      	adds	r3, #80	@ 0x50
 800251a:	443b      	add	r3, r7
 800251c:	f823 2c38 	strh.w	r2, [r3, #-56]
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 8002520:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002524:	3301      	adds	r3, #1
 8002526:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800252a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800252e:	2b08      	cmp	r3, #8
 8002530:	d9bc      	bls.n	80024ac <Manual_Touch_GetRawPoint+0xac>
        // HAL_Delay(2); // Increased delay slightly
    }

    // Averaging and filtering logic from original code
    uint16_t avg_x[3], avg_y[3];
    avg_x[0] = (x_samples[0] + x_samples[1] + x_samples[2]) / 3;
 8002532:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002534:	461a      	mov	r2, r3
 8002536:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002538:	4413      	add	r3, r2
 800253a:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800253c:	4413      	add	r3, r2
 800253e:	4aa0      	ldr	r2, [pc, #640]	@ (80027c0 <Manual_Touch_GetRawPoint+0x3c0>)
 8002540:	fb82 1203 	smull	r1, r2, r2, r3
 8002544:	17db      	asrs	r3, r3, #31
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	b29b      	uxth	r3, r3
 800254a:	823b      	strh	r3, [r7, #16]
    avg_x[1] = (x_samples[3] + x_samples[4] + x_samples[5]) / 3;
 800254c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800254e:	461a      	mov	r2, r3
 8002550:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8002552:	4413      	add	r3, r2
 8002554:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8002556:	4413      	add	r3, r2
 8002558:	4a99      	ldr	r2, [pc, #612]	@ (80027c0 <Manual_Touch_GetRawPoint+0x3c0>)
 800255a:	fb82 1203 	smull	r1, r2, r2, r3
 800255e:	17db      	asrs	r3, r3, #31
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	b29b      	uxth	r3, r3
 8002564:	827b      	strh	r3, [r7, #18]
    avg_x[2] = (x_samples[6] + x_samples[7] + x_samples[8]) / 3;
 8002566:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8002568:	461a      	mov	r2, r3
 800256a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800256c:	4413      	add	r3, r2
 800256e:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002570:	4413      	add	r3, r2
 8002572:	4a93      	ldr	r2, [pc, #588]	@ (80027c0 <Manual_Touch_GetRawPoint+0x3c0>)
 8002574:	fb82 1203 	smull	r1, r2, r2, r3
 8002578:	17db      	asrs	r3, r3, #31
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	b29b      	uxth	r3, r3
 800257e:	82bb      	strh	r3, [r7, #20]

    avg_y[0] = (y_samples[0] + y_samples[1] + y_samples[2]) / 3;
 8002580:	8b3b      	ldrh	r3, [r7, #24]
 8002582:	461a      	mov	r2, r3
 8002584:	8b7b      	ldrh	r3, [r7, #26]
 8002586:	4413      	add	r3, r2
 8002588:	8bba      	ldrh	r2, [r7, #28]
 800258a:	4413      	add	r3, r2
 800258c:	4a8c      	ldr	r2, [pc, #560]	@ (80027c0 <Manual_Touch_GetRawPoint+0x3c0>)
 800258e:	fb82 1203 	smull	r1, r2, r2, r3
 8002592:	17db      	asrs	r3, r3, #31
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	b29b      	uxth	r3, r3
 8002598:	813b      	strh	r3, [r7, #8]
    avg_y[1] = (y_samples[3] + y_samples[4] + y_samples[5]) / 3;
 800259a:	8bfb      	ldrh	r3, [r7, #30]
 800259c:	461a      	mov	r2, r3
 800259e:	8c3b      	ldrh	r3, [r7, #32]
 80025a0:	4413      	add	r3, r2
 80025a2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80025a4:	4413      	add	r3, r2
 80025a6:	4a86      	ldr	r2, [pc, #536]	@ (80027c0 <Manual_Touch_GetRawPoint+0x3c0>)
 80025a8:	fb82 1203 	smull	r1, r2, r2, r3
 80025ac:	17db      	asrs	r3, r3, #31
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	817b      	strh	r3, [r7, #10]
    avg_y[2] = (y_samples[6] + y_samples[7] + y_samples[8]) / 3;
 80025b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80025b6:	461a      	mov	r2, r3
 80025b8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80025ba:	4413      	add	r3, r2
 80025bc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80025be:	4413      	add	r3, r2
 80025c0:	4a7f      	ldr	r2, [pc, #508]	@ (80027c0 <Manual_Touch_GetRawPoint+0x3c0>)
 80025c2:	fb82 1203 	smull	r1, r2, r2, r3
 80025c6:	17db      	asrs	r3, r3, #31
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	81bb      	strh	r3, [r7, #12]

    int16_t m0x = avg_x[0] > avg_x[1] ? avg_x[0] - avg_x[1] : avg_x[1] - avg_x[0];
 80025ce:	8a3a      	ldrh	r2, [r7, #16]
 80025d0:	8a7b      	ldrh	r3, [r7, #18]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d905      	bls.n	80025e2 <Manual_Touch_GetRawPoint+0x1e2>
 80025d6:	8a3a      	ldrh	r2, [r7, #16]
 80025d8:	8a7b      	ldrh	r3, [r7, #18]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	b29b      	uxth	r3, r3
 80025de:	b21b      	sxth	r3, r3
 80025e0:	e004      	b.n	80025ec <Manual_Touch_GetRawPoint+0x1ec>
 80025e2:	8a7a      	ldrh	r2, [r7, #18]
 80025e4:	8a3b      	ldrh	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	b21b      	sxth	r3, r3
 80025ec:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    int16_t m1x = avg_x[1] > avg_x[2] ? avg_x[1] - avg_x[2] : avg_x[2] - avg_x[1];
 80025f0:	8a7a      	ldrh	r2, [r7, #18]
 80025f2:	8abb      	ldrh	r3, [r7, #20]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d905      	bls.n	8002604 <Manual_Touch_GetRawPoint+0x204>
 80025f8:	8a7a      	ldrh	r2, [r7, #18]
 80025fa:	8abb      	ldrh	r3, [r7, #20]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	b29b      	uxth	r3, r3
 8002600:	b21b      	sxth	r3, r3
 8002602:	e004      	b.n	800260e <Manual_Touch_GetRawPoint+0x20e>
 8002604:	8aba      	ldrh	r2, [r7, #20]
 8002606:	8a7b      	ldrh	r3, [r7, #18]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	b29b      	uxth	r3, r3
 800260c:	b21b      	sxth	r3, r3
 800260e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    int16_t m2x = avg_x[2] > avg_x[0] ? avg_x[2] - avg_x[0] : avg_x[0] - avg_x[2];
 8002612:	8aba      	ldrh	r2, [r7, #20]
 8002614:	8a3b      	ldrh	r3, [r7, #16]
 8002616:	429a      	cmp	r2, r3
 8002618:	d905      	bls.n	8002626 <Manual_Touch_GetRawPoint+0x226>
 800261a:	8aba      	ldrh	r2, [r7, #20]
 800261c:	8a3b      	ldrh	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	b29b      	uxth	r3, r3
 8002622:	b21b      	sxth	r3, r3
 8002624:	e004      	b.n	8002630 <Manual_Touch_GetRawPoint+0x230>
 8002626:	8a3a      	ldrh	r2, [r7, #16]
 8002628:	8abb      	ldrh	r3, [r7, #20]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	b29b      	uxth	r3, r3
 800262e:	b21b      	sxth	r3, r3
 8002630:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    if (m0x > TOUCH_RAW_THRESHOLD && m1x > TOUCH_RAW_THRESHOLD && m2x > TOUCH_RAW_THRESHOLD)
 8002634:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002638:	2b23      	cmp	r3, #35	@ 0x23
 800263a:	dd09      	ble.n	8002650 <Manual_Touch_GetRawPoint+0x250>
 800263c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8002640:	2b23      	cmp	r3, #35	@ 0x23
 8002642:	dd05      	ble.n	8002650 <Manual_Touch_GetRawPoint+0x250>
 8002644:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 8002648:	2b23      	cmp	r3, #35	@ 0x23
 800264a:	dd01      	ble.n	8002650 <Manual_Touch_GetRawPoint+0x250>
        return 0; // Unstable X
 800264c:	2300      	movs	r3, #0
 800264e:	e0b3      	b.n	80027b8 <Manual_Touch_GetRawPoint+0x3b8>

    if (m0x < m1x)
 8002650:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 8002654:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8002658:	429a      	cmp	r2, r3
 800265a:	da19      	bge.n	8002690 <Manual_Touch_GetRawPoint+0x290>
        rawPoint->x = (m2x < m0x) ? (avg_x[0] + avg_x[2]) / 2 : (avg_x[0] + avg_x[1]) / 2;
 800265c:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8002660:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002664:	429a      	cmp	r2, r3
 8002666:	da08      	bge.n	800267a <Manual_Touch_GetRawPoint+0x27a>
 8002668:	8a3b      	ldrh	r3, [r7, #16]
 800266a:	461a      	mov	r2, r3
 800266c:	8abb      	ldrh	r3, [r7, #20]
 800266e:	4413      	add	r3, r2
 8002670:	0fda      	lsrs	r2, r3, #31
 8002672:	4413      	add	r3, r2
 8002674:	105b      	asrs	r3, r3, #1
 8002676:	b29b      	uxth	r3, r3
 8002678:	e007      	b.n	800268a <Manual_Touch_GetRawPoint+0x28a>
 800267a:	8a3b      	ldrh	r3, [r7, #16]
 800267c:	461a      	mov	r2, r3
 800267e:	8a7b      	ldrh	r3, [r7, #18]
 8002680:	4413      	add	r3, r2
 8002682:	0fda      	lsrs	r2, r3, #31
 8002684:	4413      	add	r3, r2
 8002686:	105b      	asrs	r3, r3, #1
 8002688:	b29b      	uxth	r3, r3
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	8013      	strh	r3, [r2, #0]
 800268e:	e018      	b.n	80026c2 <Manual_Touch_GetRawPoint+0x2c2>
    else
        rawPoint->x = (m2x < m1x) ? (avg_x[0] + avg_x[2]) / 2 : (avg_x[1] + avg_x[2]) / 2;
 8002690:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8002694:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8002698:	429a      	cmp	r2, r3
 800269a:	da08      	bge.n	80026ae <Manual_Touch_GetRawPoint+0x2ae>
 800269c:	8a3b      	ldrh	r3, [r7, #16]
 800269e:	461a      	mov	r2, r3
 80026a0:	8abb      	ldrh	r3, [r7, #20]
 80026a2:	4413      	add	r3, r2
 80026a4:	0fda      	lsrs	r2, r3, #31
 80026a6:	4413      	add	r3, r2
 80026a8:	105b      	asrs	r3, r3, #1
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	e007      	b.n	80026be <Manual_Touch_GetRawPoint+0x2be>
 80026ae:	8a7b      	ldrh	r3, [r7, #18]
 80026b0:	461a      	mov	r2, r3
 80026b2:	8abb      	ldrh	r3, [r7, #20]
 80026b4:	4413      	add	r3, r2
 80026b6:	0fda      	lsrs	r2, r3, #31
 80026b8:	4413      	add	r3, r2
 80026ba:	105b      	asrs	r3, r3, #1
 80026bc:	b29b      	uxth	r3, r3
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	8013      	strh	r3, [r2, #0]

    int16_t m0y = avg_y[0] > avg_y[1] ? avg_y[0] - avg_y[1] : avg_y[1] - avg_y[0];
 80026c2:	893a      	ldrh	r2, [r7, #8]
 80026c4:	897b      	ldrh	r3, [r7, #10]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d905      	bls.n	80026d6 <Manual_Touch_GetRawPoint+0x2d6>
 80026ca:	893a      	ldrh	r2, [r7, #8]
 80026cc:	897b      	ldrh	r3, [r7, #10]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	b21b      	sxth	r3, r3
 80026d4:	e004      	b.n	80026e0 <Manual_Touch_GetRawPoint+0x2e0>
 80026d6:	897a      	ldrh	r2, [r7, #10]
 80026d8:	893b      	ldrh	r3, [r7, #8]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	b29b      	uxth	r3, r3
 80026de:	b21b      	sxth	r3, r3
 80026e0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    int16_t m1y = avg_y[1] > avg_y[2] ? avg_y[1] - avg_y[2] : avg_y[2] - avg_y[1];
 80026e4:	897a      	ldrh	r2, [r7, #10]
 80026e6:	89bb      	ldrh	r3, [r7, #12]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d905      	bls.n	80026f8 <Manual_Touch_GetRawPoint+0x2f8>
 80026ec:	897a      	ldrh	r2, [r7, #10]
 80026ee:	89bb      	ldrh	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	b21b      	sxth	r3, r3
 80026f6:	e004      	b.n	8002702 <Manual_Touch_GetRawPoint+0x302>
 80026f8:	89ba      	ldrh	r2, [r7, #12]
 80026fa:	897b      	ldrh	r3, [r7, #10]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	b29b      	uxth	r3, r3
 8002700:	b21b      	sxth	r3, r3
 8002702:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t m2y = avg_y[2] > avg_y[0] ? avg_y[2] - avg_y[0] : avg_y[0] - avg_y[2];
 8002706:	89ba      	ldrh	r2, [r7, #12]
 8002708:	893b      	ldrh	r3, [r7, #8]
 800270a:	429a      	cmp	r2, r3
 800270c:	d905      	bls.n	800271a <Manual_Touch_GetRawPoint+0x31a>
 800270e:	89ba      	ldrh	r2, [r7, #12]
 8002710:	893b      	ldrh	r3, [r7, #8]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	b29b      	uxth	r3, r3
 8002716:	b21b      	sxth	r3, r3
 8002718:	e004      	b.n	8002724 <Manual_Touch_GetRawPoint+0x324>
 800271a:	893a      	ldrh	r2, [r7, #8]
 800271c:	89bb      	ldrh	r3, [r7, #12]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	b29b      	uxth	r3, r3
 8002722:	b21b      	sxth	r3, r3
 8002724:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    if (m0y > TOUCH_RAW_THRESHOLD && m1y > TOUCH_RAW_THRESHOLD && m2y > TOUCH_RAW_THRESHOLD)
 8002728:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 800272c:	2b23      	cmp	r3, #35	@ 0x23
 800272e:	dd09      	ble.n	8002744 <Manual_Touch_GetRawPoint+0x344>
 8002730:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8002734:	2b23      	cmp	r3, #35	@ 0x23
 8002736:	dd05      	ble.n	8002744 <Manual_Touch_GetRawPoint+0x344>
 8002738:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800273c:	2b23      	cmp	r3, #35	@ 0x23
 800273e:	dd01      	ble.n	8002744 <Manual_Touch_GetRawPoint+0x344>
        return 0; // Unstable Y
 8002740:	2300      	movs	r3, #0
 8002742:	e039      	b.n	80027b8 <Manual_Touch_GetRawPoint+0x3b8>

    if (m0y < m1y)
 8002744:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 8002748:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800274c:	429a      	cmp	r2, r3
 800274e:	da19      	bge.n	8002784 <Manual_Touch_GetRawPoint+0x384>
        rawPoint->y = (m2y < m0y) ? (avg_y[0] + avg_y[2]) / 2 : (avg_y[0] + avg_y[1]) / 2;
 8002750:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8002754:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8002758:	429a      	cmp	r2, r3
 800275a:	da08      	bge.n	800276e <Manual_Touch_GetRawPoint+0x36e>
 800275c:	893b      	ldrh	r3, [r7, #8]
 800275e:	461a      	mov	r2, r3
 8002760:	89bb      	ldrh	r3, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	0fda      	lsrs	r2, r3, #31
 8002766:	4413      	add	r3, r2
 8002768:	105b      	asrs	r3, r3, #1
 800276a:	b29b      	uxth	r3, r3
 800276c:	e007      	b.n	800277e <Manual_Touch_GetRawPoint+0x37e>
 800276e:	893b      	ldrh	r3, [r7, #8]
 8002770:	461a      	mov	r2, r3
 8002772:	897b      	ldrh	r3, [r7, #10]
 8002774:	4413      	add	r3, r2
 8002776:	0fda      	lsrs	r2, r3, #31
 8002778:	4413      	add	r3, r2
 800277a:	105b      	asrs	r3, r3, #1
 800277c:	b29b      	uxth	r3, r3
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	8053      	strh	r3, [r2, #2]
 8002782:	e018      	b.n	80027b6 <Manual_Touch_GetRawPoint+0x3b6>
    else
        rawPoint->y = (m2y < m1y) ? (avg_y[0] + avg_y[2]) / 2 : (avg_y[1] + avg_y[2]) / 2;
 8002784:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 8002788:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 800278c:	429a      	cmp	r2, r3
 800278e:	da08      	bge.n	80027a2 <Manual_Touch_GetRawPoint+0x3a2>
 8002790:	893b      	ldrh	r3, [r7, #8]
 8002792:	461a      	mov	r2, r3
 8002794:	89bb      	ldrh	r3, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	0fda      	lsrs	r2, r3, #31
 800279a:	4413      	add	r3, r2
 800279c:	105b      	asrs	r3, r3, #1
 800279e:	b29b      	uxth	r3, r3
 80027a0:	e007      	b.n	80027b2 <Manual_Touch_GetRawPoint+0x3b2>
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	461a      	mov	r2, r3
 80027a6:	89bb      	ldrh	r3, [r7, #12]
 80027a8:	4413      	add	r3, r2
 80027aa:	0fda      	lsrs	r2, r3, #31
 80027ac:	4413      	add	r3, r2
 80027ae:	105b      	asrs	r3, r3, #1
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	8053      	strh	r3, [r2, #2]

    return 1; // Valid point obtained
 80027b6:	2301      	movs	r3, #1
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3754      	adds	r7, #84	@ 0x54
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd90      	pop	{r4, r7, pc}
 80027c0:	55555556 	.word	0x55555556

080027c4 <Manual_Touch_ApplyCalibration>:
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    return 1; // Success
}

uint8_t Manual_Touch_ApplyCalibration(Coordinate *displayPoint, const Coordinate *screenPoint)
{
 80027c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
    if (touchMatrix.Divider == 0)
 80027d0:	4b66      	ldr	r3, [pc, #408]	@ (800296c <Manual_Touch_ApplyCalibration+0x1a8>)
 80027d2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	f7fe f973 	bl	8000ac8 <__aeabi_dcmpeq>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d027      	beq.n	8002838 <Manual_Touch_ApplyCalibration+0x74>
    { // Not calibrated or calibration failed
        // Fallback: direct scaling (highly inaccurate without calibration)
        displayPoint->x = (uint16_t)(((long)screenPoint->x * LCD_HEIGHT) / 4095 - 20);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	461a      	mov	r2, r3
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	019b      	lsls	r3, r3, #6
 80027f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002970 <Manual_Touch_ApplyCalibration+0x1ac>)
 80027f8:	fb82 1203 	smull	r1, r2, r2, r3
 80027fc:	441a      	add	r2, r3
 80027fe:	12d2      	asrs	r2, r2, #11
 8002800:	17db      	asrs	r3, r3, #31
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	b29b      	uxth	r3, r3
 8002806:	3b14      	subs	r3, #20
 8002808:	b29a      	uxth	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	801a      	strh	r2, [r3, #0]
        displayPoint->y = (uint16_t)(((long)screenPoint->y * LCD_WIDTH) / 4095 - 20);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	885b      	ldrh	r3, [r3, #2]
 8002812:	461a      	mov	r2, r3
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	4a54      	ldr	r2, [pc, #336]	@ (8002970 <Manual_Touch_ApplyCalibration+0x1ac>)
 800281e:	fb82 1203 	smull	r1, r2, r2, r3
 8002822:	441a      	add	r2, r3
 8002824:	12d2      	asrs	r2, r2, #11
 8002826:	17db      	asrs	r3, r3, #31
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b14      	subs	r3, #20
 800282e:	b29a      	uxth	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	805a      	strh	r2, [r3, #2]
        return 0; // Indicated that calibration matrix was not used
 8002834:	2300      	movs	r3, #0
 8002836:	e094      	b.n	8002962 <Manual_Touch_ApplyCalibration+0x19e>
    }

    // Apply calibration matrix
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002838:	4b4c      	ldr	r3, [pc, #304]	@ (800296c <Manual_Touch_ApplyCalibration+0x1a8>)
 800283a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	881b      	ldrh	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7fd fe6e 	bl	8000524 <__aeabi_i2d>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4620      	mov	r0, r4
 800284e:	4629      	mov	r1, r5
 8002850:	f7fd fed2 	bl	80005f8 <__aeabi_dmul>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4690      	mov	r8, r2
 800285a:	4699      	mov	r9, r3
                                  (touchMatrix.Bn * screenPoint->y) +
 800285c:	4b43      	ldr	r3, [pc, #268]	@ (800296c <Manual_Touch_ApplyCalibration+0x1a8>)
 800285e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	885b      	ldrh	r3, [r3, #2]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fe5c 	bl	8000524 <__aeabi_i2d>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4620      	mov	r0, r4
 8002872:	4629      	mov	r1, r5
 8002874:	f7fd fec0 	bl	80005f8 <__aeabi_dmul>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 800287c:	4640      	mov	r0, r8
 800287e:	4649      	mov	r1, r9
 8002880:	f7fd fd04 	bl	800028c <__adddf3>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
                                  touchMatrix.Cn) /
 800288c:	4b37      	ldr	r3, [pc, #220]	@ (800296c <Manual_Touch_ApplyCalibration+0x1a8>)
 800288e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
                                  (touchMatrix.Bn * screenPoint->y) +
 8002892:	f7fd fcfb 	bl	800028c <__adddf3>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4610      	mov	r0, r2
 800289c:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 800289e:	4b33      	ldr	r3, [pc, #204]	@ (800296c <Manual_Touch_ApplyCalibration+0x1a8>)
 80028a0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Cn) /
 80028a4:	f7fd ffd2 	bl	800084c <__aeabi_ddiv>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 80028ac:	4610      	mov	r0, r2
 80028ae:	4619      	mov	r1, r3
 80028b0:	f7fe f93c 	bl	8000b2c <__aeabi_d2uiz>
 80028b4:	4603      	mov	r3, r0
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	801a      	strh	r2, [r3, #0]
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 80028bc:	4b2b      	ldr	r3, [pc, #172]	@ (800296c <Manual_Touch_ApplyCalibration+0x1a8>)
 80028be:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fe2c 	bl	8000524 <__aeabi_i2d>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4620      	mov	r0, r4
 80028d2:	4629      	mov	r1, r5
 80028d4:	f7fd fe90 	bl	80005f8 <__aeabi_dmul>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	4690      	mov	r8, r2
 80028de:	4699      	mov	r9, r3
                                  (touchMatrix.En * screenPoint->y) +
 80028e0:	4b22      	ldr	r3, [pc, #136]	@ (800296c <Manual_Touch_ApplyCalibration+0x1a8>)
 80028e2:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	885b      	ldrh	r3, [r3, #2]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fd fe1a 	bl	8000524 <__aeabi_i2d>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4620      	mov	r0, r4
 80028f6:	4629      	mov	r1, r5
 80028f8:	f7fd fe7e 	bl	80005f8 <__aeabi_dmul>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002900:	4640      	mov	r0, r8
 8002902:	4649      	mov	r1, r9
 8002904:	f7fd fcc2 	bl	800028c <__adddf3>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4610      	mov	r0, r2
 800290e:	4619      	mov	r1, r3
                                  touchMatrix.Fn) /
 8002910:	4b16      	ldr	r3, [pc, #88]	@ (800296c <Manual_Touch_ApplyCalibration+0x1a8>)
 8002912:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
                                  (touchMatrix.En * screenPoint->y) +
 8002916:	f7fd fcb9 	bl	800028c <__adddf3>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 8002922:	4b12      	ldr	r3, [pc, #72]	@ (800296c <Manual_Touch_ApplyCalibration+0x1a8>)
 8002924:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Fn) /
 8002928:	f7fd ff90 	bl	800084c <__aeabi_ddiv>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002930:	4610      	mov	r0, r2
 8002932:	4619      	mov	r1, r3
 8002934:	f7fe f8fa 	bl	8000b2c <__aeabi_d2uiz>
 8002938:	4603      	mov	r3, r0
 800293a:	b29a      	uxth	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	805a      	strh	r2, [r3, #2]

    // Constrain to LCD boundaries
    if (displayPoint->x >= LCD_WIDTH)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	2bef      	cmp	r3, #239	@ 0xef
 8002946:	d902      	bls.n	800294e <Manual_Touch_ApplyCalibration+0x18a>
        displayPoint->x = LCD_WIDTH - 1;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	22ef      	movs	r2, #239	@ 0xef
 800294c:	801a      	strh	r2, [r3, #0]
    if (displayPoint->y >= LCD_HEIGHT)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	885b      	ldrh	r3, [r3, #2]
 8002952:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002956:	d303      	bcc.n	8002960 <Manual_Touch_ApplyCalibration+0x19c>
        displayPoint->y = LCD_HEIGHT - 1;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f240 123f 	movw	r2, #319	@ 0x13f
 800295e:	805a      	strh	r2, [r3, #2]
    // Note: long double might produce negative intermediate results if raw values are way off.
    // Casting to uint16_t will wrap. Consider clamping if signed intermediates are possible.
    // For typical touch values, this should be fine.

    return 1; // Calibration matrix used
 8002960:	2301      	movs	r3, #1
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800296c:	20000130 	.word	0x20000130
 8002970:	80080081 	.word	0x80080081

08002974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <HAL_MspInit+0x4c>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	4a0f      	ldr	r2, [pc, #60]	@ (80029c0 <HAL_MspInit+0x4c>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002988:	6453      	str	r3, [r2, #68]	@ 0x44
 800298a:	4b0d      	ldr	r3, [pc, #52]	@ (80029c0 <HAL_MspInit+0x4c>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <HAL_MspInit+0x4c>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	4a08      	ldr	r2, [pc, #32]	@ (80029c0 <HAL_MspInit+0x4c>)
 80029a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <HAL_MspInit+0x4c>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800

080029c4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	@ 0x28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a26      	ldr	r2, [pc, #152]	@ (8002a7c <HAL_I2C_MspInit+0xb8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d145      	bne.n	8002a72 <HAL_I2C_MspInit+0xae>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	4b25      	ldr	r3, [pc, #148]	@ (8002a80 <HAL_I2C_MspInit+0xbc>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	4a24      	ldr	r2, [pc, #144]	@ (8002a80 <HAL_I2C_MspInit+0xbc>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f6:	4b22      	ldr	r3, [pc, #136]	@ (8002a80 <HAL_I2C_MspInit+0xbc>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin;
 8002a02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a08:	2312      	movs	r3, #18
 8002a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a14:	2304      	movs	r3, #4
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4819      	ldr	r0, [pc, #100]	@ (8002a84 <HAL_I2C_MspInit+0xc0>)
 8002a20:	f000 fb24 	bl	800306c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDA_Pin;
 8002a24:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a2a:	2312      	movs	r3, #18
 8002a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a32:	2303      	movs	r3, #3
 8002a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a36:	2304      	movs	r3, #4
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4810      	ldr	r0, [pc, #64]	@ (8002a84 <HAL_I2C_MspInit+0xc0>)
 8002a42:	f000 fb13 	bl	800306c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <HAL_I2C_MspInit+0xbc>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a80 <HAL_I2C_MspInit+0xbc>)
 8002a50:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a56:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <HAL_I2C_MspInit+0xbc>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	2021      	movs	r0, #33	@ 0x21
 8002a68:	f000 fa99 	bl	8002f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002a6c:	2021      	movs	r0, #33	@ 0x21
 8002a6e:	f000 fab2 	bl	8002fd6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002a72:	bf00      	nop
 8002a74:	3728      	adds	r7, #40	@ 0x28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40005800 	.word	0x40005800
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40020400 	.word	0x40020400

08002a88 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b08a      	sub	sp, #40	@ 0x28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 0314 	add.w	r3, r7, #20
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a28      	ldr	r2, [pc, #160]	@ (8002b48 <HAL_SPI_MspInit+0xc0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d149      	bne.n	8002b3e <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	4b27      	ldr	r3, [pc, #156]	@ (8002b4c <HAL_SPI_MspInit+0xc4>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	4a26      	ldr	r2, [pc, #152]	@ (8002b4c <HAL_SPI_MspInit+0xc4>)
 8002ab4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aba:	4b24      	ldr	r3, [pc, #144]	@ (8002b4c <HAL_SPI_MspInit+0xc4>)
 8002abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ac2:	613b      	str	r3, [r7, #16]
 8002ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	4b20      	ldr	r3, [pc, #128]	@ (8002b4c <HAL_SPI_MspInit+0xc4>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	4a1f      	ldr	r2, [pc, #124]	@ (8002b4c <HAL_SPI_MspInit+0xc4>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b4c <HAL_SPI_MspInit+0xc4>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	4b19      	ldr	r3, [pc, #100]	@ (8002b4c <HAL_SPI_MspInit+0xc4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	4a18      	ldr	r2, [pc, #96]	@ (8002b4c <HAL_SPI_MspInit+0xc4>)
 8002aec:	f043 0302 	orr.w	r3, r3, #2
 8002af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af2:	4b16      	ldr	r3, [pc, #88]	@ (8002b4c <HAL_SPI_MspInit+0xc4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin|MOSI_Pin;
 8002afe:	23c0      	movs	r3, #192	@ 0xc0
 8002b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b02:	2302      	movs	r3, #2
 8002b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b0e:	2305      	movs	r3, #5
 8002b10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b12:	f107 0314 	add.w	r3, r7, #20
 8002b16:	4619      	mov	r1, r3
 8002b18:	480d      	ldr	r0, [pc, #52]	@ (8002b50 <HAL_SPI_MspInit+0xc8>)
 8002b1a:	f000 faa7 	bl	800306c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCLK_Pin;
 8002b1e:	2308      	movs	r3, #8
 8002b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b22:	2302      	movs	r3, #2
 8002b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b2e:	2305      	movs	r3, #5
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCLK_GPIO_Port, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	4806      	ldr	r0, [pc, #24]	@ (8002b54 <HAL_SPI_MspInit+0xcc>)
 8002b3a:	f000 fa97 	bl	800306c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002b3e:	bf00      	nop
 8002b40:	3728      	adds	r7, #40	@ 0x28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40013000 	.word	0x40013000
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	40020000 	.word	0x40020000
 8002b54:	40020400 	.word	0x40020400

08002b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <NMI_Handler+0x4>

08002b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <HardFault_Handler+0x4>

08002b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b6c:	bf00      	nop
 8002b6e:	e7fd      	b.n	8002b6c <MemManage_Handler+0x4>

08002b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <BusFault_Handler+0x4>

08002b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <UsageFault_Handler+0x4>

08002b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bae:	f000 f8d7 	bl	8002d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8002bba:	2010      	movs	r0, #16
 8002bbc:	f000 fc24 	bl	8003408 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002bc0:	bf00      	nop
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002bc8:	4802      	ldr	r0, [pc, #8]	@ (8002bd4 <I2C2_EV_IRQHandler+0x10>)
 8002bca:	f000 fd9a 	bl	8003702 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	2000007c 	.word	0x2000007c

08002bd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002be0:	4a14      	ldr	r2, [pc, #80]	@ (8002c34 <_sbrk+0x5c>)
 8002be2:	4b15      	ldr	r3, [pc, #84]	@ (8002c38 <_sbrk+0x60>)
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bec:	4b13      	ldr	r3, [pc, #76]	@ (8002c3c <_sbrk+0x64>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d102      	bne.n	8002bfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bf4:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <_sbrk+0x64>)
 8002bf6:	4a12      	ldr	r2, [pc, #72]	@ (8002c40 <_sbrk+0x68>)
 8002bf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bfa:	4b10      	ldr	r3, [pc, #64]	@ (8002c3c <_sbrk+0x64>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d207      	bcs.n	8002c18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c08:	f003 fb9c 	bl	8006344 <__errno>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	220c      	movs	r2, #12
 8002c10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295
 8002c16:	e009      	b.n	8002c2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c18:	4b08      	ldr	r3, [pc, #32]	@ (8002c3c <_sbrk+0x64>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c1e:	4b07      	ldr	r3, [pc, #28]	@ (8002c3c <_sbrk+0x64>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	4a05      	ldr	r2, [pc, #20]	@ (8002c3c <_sbrk+0x64>)
 8002c28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20020000 	.word	0x20020000
 8002c38:	00000400 	.word	0x00000400
 8002c3c:	20000168 	.word	0x20000168
 8002c40:	200002b8 	.word	0x200002b8

08002c44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c48:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <SystemInit+0x20>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c4e:	4a05      	ldr	r2, [pc, #20]	@ (8002c64 <SystemInit+0x20>)
 8002c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000ed00 	.word	0xe000ed00

08002c68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ca0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c6c:	f7ff ffea 	bl	8002c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c70:	480c      	ldr	r0, [pc, #48]	@ (8002ca4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c72:	490d      	ldr	r1, [pc, #52]	@ (8002ca8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c74:	4a0d      	ldr	r2, [pc, #52]	@ (8002cac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c78:	e002      	b.n	8002c80 <LoopCopyDataInit>

08002c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c7e:	3304      	adds	r3, #4

08002c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c84:	d3f9      	bcc.n	8002c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c86:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c88:	4c0a      	ldr	r4, [pc, #40]	@ (8002cb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c8c:	e001      	b.n	8002c92 <LoopFillZerobss>

08002c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c90:	3204      	adds	r2, #4

08002c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c94:	d3fb      	bcc.n	8002c8e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002c96:	f003 fb5b 	bl	8006350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c9a:	f7fe f8fd 	bl	8000e98 <main>
  bx  lr    
 8002c9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ca0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ca8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002cac:	08006f40 	.word	0x08006f40
  ldr r2, =_sbss
 8002cb0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002cb4:	200002b8 	.word	0x200002b8

08002cb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cb8:	e7fe      	b.n	8002cb8 <ADC_IRQHandler>
	...

08002cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002cfc <HAL_Init+0x40>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cfc <HAL_Init+0x40>)
 8002cc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cfc <HAL_Init+0x40>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cfc <HAL_Init+0x40>)
 8002cd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd8:	4b08      	ldr	r3, [pc, #32]	@ (8002cfc <HAL_Init+0x40>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a07      	ldr	r2, [pc, #28]	@ (8002cfc <HAL_Init+0x40>)
 8002cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce4:	2003      	movs	r0, #3
 8002ce6:	f000 f94f 	bl	8002f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cea:	200f      	movs	r0, #15
 8002cec:	f000 f808 	bl	8002d00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cf0:	f7ff fe40 	bl	8002974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023c00 	.word	0x40023c00

08002d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d08:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <HAL_InitTick+0x54>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4b12      	ldr	r3, [pc, #72]	@ (8002d58 <HAL_InitTick+0x58>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	4619      	mov	r1, r3
 8002d12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 f967 	bl	8002ff2 <HAL_SYSTICK_Config>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e00e      	b.n	8002d4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b0f      	cmp	r3, #15
 8002d32:	d80a      	bhi.n	8002d4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d34:	2200      	movs	r2, #0
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	f000 f92f 	bl	8002f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d40:	4a06      	ldr	r2, [pc, #24]	@ (8002d5c <HAL_InitTick+0x5c>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e000      	b.n	8002d4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	20000000 	.word	0x20000000
 8002d58:	20000008 	.word	0x20000008
 8002d5c:	20000004 	.word	0x20000004

08002d60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d64:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_IncTick+0x20>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <HAL_IncTick+0x24>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4413      	add	r3, r2
 8002d70:	4a04      	ldr	r2, [pc, #16]	@ (8002d84 <HAL_IncTick+0x24>)
 8002d72:	6013      	str	r3, [r2, #0]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	20000008 	.word	0x20000008
 8002d84:	2000016c 	.word	0x2000016c

08002d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	@ (8002d9c <HAL_GetTick+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	2000016c 	.word	0x2000016c

08002da0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002da8:	f7ff ffee 	bl	8002d88 <HAL_GetTick>
 8002dac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d005      	beq.n	8002dc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dba:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <HAL_Delay+0x44>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dc6:	bf00      	nop
 8002dc8:	f7ff ffde 	bl	8002d88 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d8f7      	bhi.n	8002dc8 <HAL_Delay+0x28>
  {
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000008 	.word	0x20000008

08002de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002df8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e04:	4013      	ands	r3, r2
 8002e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e1a:	4a04      	ldr	r2, [pc, #16]	@ (8002e2c <__NVIC_SetPriorityGrouping+0x44>)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	60d3      	str	r3, [r2, #12]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	e000ed00 	.word	0xe000ed00

08002e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e34:	4b04      	ldr	r3, [pc, #16]	@ (8002e48 <__NVIC_GetPriorityGrouping+0x18>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	0a1b      	lsrs	r3, r3, #8
 8002e3a:	f003 0307 	and.w	r3, r3, #7
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	e000ed00 	.word	0xe000ed00

08002e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db0b      	blt.n	8002e76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	f003 021f 	and.w	r2, r3, #31
 8002e64:	4907      	ldr	r1, [pc, #28]	@ (8002e84 <__NVIC_EnableIRQ+0x38>)
 8002e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e6a:	095b      	lsrs	r3, r3, #5
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop
 8002e84:	e000e100 	.word	0xe000e100

08002e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	6039      	str	r1, [r7, #0]
 8002e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	db0a      	blt.n	8002eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	490c      	ldr	r1, [pc, #48]	@ (8002ed4 <__NVIC_SetPriority+0x4c>)
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	0112      	lsls	r2, r2, #4
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	440b      	add	r3, r1
 8002eac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002eb0:	e00a      	b.n	8002ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	4908      	ldr	r1, [pc, #32]	@ (8002ed8 <__NVIC_SetPriority+0x50>)
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	3b04      	subs	r3, #4
 8002ec0:	0112      	lsls	r2, r2, #4
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	761a      	strb	r2, [r3, #24]
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	e000e100 	.word	0xe000e100
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	@ 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f1c3 0307 	rsb	r3, r3, #7
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	bf28      	it	cs
 8002efa:	2304      	movcs	r3, #4
 8002efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d902      	bls.n	8002f0c <NVIC_EncodePriority+0x30>
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3b03      	subs	r3, #3
 8002f0a:	e000      	b.n	8002f0e <NVIC_EncodePriority+0x32>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	401a      	ands	r2, r3
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f24:	f04f 31ff 	mov.w	r1, #4294967295
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2e:	43d9      	mvns	r1, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f34:	4313      	orrs	r3, r2
         );
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3724      	adds	r7, #36	@ 0x24
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f54:	d301      	bcc.n	8002f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f56:	2301      	movs	r3, #1
 8002f58:	e00f      	b.n	8002f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f84 <SysTick_Config+0x40>)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f62:	210f      	movs	r1, #15
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	f7ff ff8e 	bl	8002e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f6c:	4b05      	ldr	r3, [pc, #20]	@ (8002f84 <SysTick_Config+0x40>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f72:	4b04      	ldr	r3, [pc, #16]	@ (8002f84 <SysTick_Config+0x40>)
 8002f74:	2207      	movs	r2, #7
 8002f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	e000e010 	.word	0xe000e010

08002f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f7ff ff29 	bl	8002de8 <__NVIC_SetPriorityGrouping>
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b086      	sub	sp, #24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fb0:	f7ff ff3e 	bl	8002e30 <__NVIC_GetPriorityGrouping>
 8002fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	6978      	ldr	r0, [r7, #20]
 8002fbc:	f7ff ff8e 	bl	8002edc <NVIC_EncodePriority>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fc6:	4611      	mov	r1, r2
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff ff5d 	bl	8002e88 <__NVIC_SetPriority>
}
 8002fce:	bf00      	nop
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b082      	sub	sp, #8
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	4603      	mov	r3, r0
 8002fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff ff31 	bl	8002e4c <__NVIC_EnableIRQ>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff ffa2 	bl	8002f44 <SysTick_Config>
 8003000:	4603      	mov	r3, r0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800300a:	b480      	push	{r7}
 800300c:	b083      	sub	sp, #12
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d004      	beq.n	8003028 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2280      	movs	r2, #128	@ 0x80
 8003022:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e00c      	b.n	8003042 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2205      	movs	r2, #5
 800302c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 0201 	bic.w	r2, r2, #1
 800303e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800305c:	b2db      	uxtb	r3, r3
}
 800305e:	4618      	mov	r0, r3
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	@ 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800307e:	2300      	movs	r3, #0
 8003080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	e16b      	b.n	8003360 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003088:	2201      	movs	r2, #1
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4013      	ands	r3, r2
 800309a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	f040 815a 	bne.w	800335a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d005      	beq.n	80030be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d130      	bne.n	8003120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	2203      	movs	r2, #3
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43db      	mvns	r3, r3
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	4013      	ands	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030f4:	2201      	movs	r2, #1
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	091b      	lsrs	r3, r3, #4
 800310a:	f003 0201 	and.w	r2, r3, #1
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b03      	cmp	r3, #3
 800312a:	d017      	beq.n	800315c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	2203      	movs	r2, #3
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d123      	bne.n	80031b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	08da      	lsrs	r2, r3, #3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3208      	adds	r2, #8
 8003170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	220f      	movs	r2, #15
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	08da      	lsrs	r2, r3, #3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3208      	adds	r2, #8
 80031aa:	69b9      	ldr	r1, [r7, #24]
 80031ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	2203      	movs	r2, #3
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f003 0203 	and.w	r2, r3, #3
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80b4 	beq.w	800335a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	4b60      	ldr	r3, [pc, #384]	@ (8003378 <HAL_GPIO_Init+0x30c>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fa:	4a5f      	ldr	r2, [pc, #380]	@ (8003378 <HAL_GPIO_Init+0x30c>)
 80031fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003200:	6453      	str	r3, [r2, #68]	@ 0x44
 8003202:	4b5d      	ldr	r3, [pc, #372]	@ (8003378 <HAL_GPIO_Init+0x30c>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800320e:	4a5b      	ldr	r2, [pc, #364]	@ (800337c <HAL_GPIO_Init+0x310>)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	089b      	lsrs	r3, r3, #2
 8003214:	3302      	adds	r3, #2
 8003216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	220f      	movs	r2, #15
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a52      	ldr	r2, [pc, #328]	@ (8003380 <HAL_GPIO_Init+0x314>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d02b      	beq.n	8003292 <HAL_GPIO_Init+0x226>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a51      	ldr	r2, [pc, #324]	@ (8003384 <HAL_GPIO_Init+0x318>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d025      	beq.n	800328e <HAL_GPIO_Init+0x222>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a50      	ldr	r2, [pc, #320]	@ (8003388 <HAL_GPIO_Init+0x31c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d01f      	beq.n	800328a <HAL_GPIO_Init+0x21e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a4f      	ldr	r2, [pc, #316]	@ (800338c <HAL_GPIO_Init+0x320>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d019      	beq.n	8003286 <HAL_GPIO_Init+0x21a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a4e      	ldr	r2, [pc, #312]	@ (8003390 <HAL_GPIO_Init+0x324>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d013      	beq.n	8003282 <HAL_GPIO_Init+0x216>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4d      	ldr	r2, [pc, #308]	@ (8003394 <HAL_GPIO_Init+0x328>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00d      	beq.n	800327e <HAL_GPIO_Init+0x212>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4c      	ldr	r2, [pc, #304]	@ (8003398 <HAL_GPIO_Init+0x32c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d007      	beq.n	800327a <HAL_GPIO_Init+0x20e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4b      	ldr	r2, [pc, #300]	@ (800339c <HAL_GPIO_Init+0x330>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d101      	bne.n	8003276 <HAL_GPIO_Init+0x20a>
 8003272:	2307      	movs	r3, #7
 8003274:	e00e      	b.n	8003294 <HAL_GPIO_Init+0x228>
 8003276:	2308      	movs	r3, #8
 8003278:	e00c      	b.n	8003294 <HAL_GPIO_Init+0x228>
 800327a:	2306      	movs	r3, #6
 800327c:	e00a      	b.n	8003294 <HAL_GPIO_Init+0x228>
 800327e:	2305      	movs	r3, #5
 8003280:	e008      	b.n	8003294 <HAL_GPIO_Init+0x228>
 8003282:	2304      	movs	r3, #4
 8003284:	e006      	b.n	8003294 <HAL_GPIO_Init+0x228>
 8003286:	2303      	movs	r3, #3
 8003288:	e004      	b.n	8003294 <HAL_GPIO_Init+0x228>
 800328a:	2302      	movs	r3, #2
 800328c:	e002      	b.n	8003294 <HAL_GPIO_Init+0x228>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_GPIO_Init+0x228>
 8003292:	2300      	movs	r3, #0
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f002 0203 	and.w	r2, r2, #3
 800329a:	0092      	lsls	r2, r2, #2
 800329c:	4093      	lsls	r3, r2
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032a4:	4935      	ldr	r1, [pc, #212]	@ (800337c <HAL_GPIO_Init+0x310>)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	3302      	adds	r3, #2
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032b2:	4b3b      	ldr	r3, [pc, #236]	@ (80033a0 <HAL_GPIO_Init+0x334>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032d6:	4a32      	ldr	r2, [pc, #200]	@ (80033a0 <HAL_GPIO_Init+0x334>)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032dc:	4b30      	ldr	r3, [pc, #192]	@ (80033a0 <HAL_GPIO_Init+0x334>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003300:	4a27      	ldr	r2, [pc, #156]	@ (80033a0 <HAL_GPIO_Init+0x334>)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003306:	4b26      	ldr	r3, [pc, #152]	@ (80033a0 <HAL_GPIO_Init+0x334>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800332a:	4a1d      	ldr	r2, [pc, #116]	@ (80033a0 <HAL_GPIO_Init+0x334>)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003330:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <HAL_GPIO_Init+0x334>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003354:	4a12      	ldr	r2, [pc, #72]	@ (80033a0 <HAL_GPIO_Init+0x334>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3301      	adds	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b0f      	cmp	r3, #15
 8003364:	f67f ae90 	bls.w	8003088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	3724      	adds	r7, #36	@ 0x24
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800
 800337c:	40013800 	.word	0x40013800
 8003380:	40020000 	.word	0x40020000
 8003384:	40020400 	.word	0x40020400
 8003388:	40020800 	.word	0x40020800
 800338c:	40020c00 	.word	0x40020c00
 8003390:	40021000 	.word	0x40021000
 8003394:	40021400 	.word	0x40021400
 8003398:	40021800 	.word	0x40021800
 800339c:	40021c00 	.word	0x40021c00
 80033a0:	40013c00 	.word	0x40013c00

080033a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033bc:	2301      	movs	r3, #1
 80033be:	73fb      	strb	r3, [r7, #15]
 80033c0:	e001      	b.n	80033c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033c2:	2300      	movs	r3, #0
 80033c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	807b      	strh	r3, [r7, #2]
 80033e0:	4613      	mov	r3, r2
 80033e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033e4:	787b      	ldrb	r3, [r7, #1]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ea:	887a      	ldrh	r2, [r7, #2]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033f0:	e003      	b.n	80033fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033f2:	887b      	ldrh	r3, [r7, #2]
 80033f4:	041a      	lsls	r2, r3, #16
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	619a      	str	r2, [r3, #24]
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003412:	4b08      	ldr	r3, [pc, #32]	@ (8003434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d006      	beq.n	800342c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800341e:	4a05      	ldr	r2, [pc, #20]	@ (8003434 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003420:	88fb      	ldrh	r3, [r7, #6]
 8003422:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f806 	bl	8003438 <HAL_GPIO_EXTI_Callback>
  }
}
 800342c:	bf00      	nop
 800342e:	3708      	adds	r7, #8
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40013c00 	.word	0x40013c00

08003438 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e12b      	b.n	80036ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff faa4 	bl	80029c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	@ 0x24
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f022 0201 	bic.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034b4:	f002 f936 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 80034b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4a81      	ldr	r2, [pc, #516]	@ (80036c4 <HAL_I2C_Init+0x274>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d807      	bhi.n	80034d4 <HAL_I2C_Init+0x84>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4a80      	ldr	r2, [pc, #512]	@ (80036c8 <HAL_I2C_Init+0x278>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	bf94      	ite	ls
 80034cc:	2301      	movls	r3, #1
 80034ce:	2300      	movhi	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	e006      	b.n	80034e2 <HAL_I2C_Init+0x92>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4a7d      	ldr	r2, [pc, #500]	@ (80036cc <HAL_I2C_Init+0x27c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	bf94      	ite	ls
 80034dc:	2301      	movls	r3, #1
 80034de:	2300      	movhi	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0e7      	b.n	80036ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a78      	ldr	r2, [pc, #480]	@ (80036d0 <HAL_I2C_Init+0x280>)
 80034ee:	fba2 2303 	umull	r2, r3, r2, r3
 80034f2:	0c9b      	lsrs	r3, r3, #18
 80034f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	430a      	orrs	r2, r1
 8003508:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4a6a      	ldr	r2, [pc, #424]	@ (80036c4 <HAL_I2C_Init+0x274>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d802      	bhi.n	8003524 <HAL_I2C_Init+0xd4>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	3301      	adds	r3, #1
 8003522:	e009      	b.n	8003538 <HAL_I2C_Init+0xe8>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800352a:	fb02 f303 	mul.w	r3, r2, r3
 800352e:	4a69      	ldr	r2, [pc, #420]	@ (80036d4 <HAL_I2C_Init+0x284>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	099b      	lsrs	r3, r3, #6
 8003536:	3301      	adds	r3, #1
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	6812      	ldr	r2, [r2, #0]
 800353c:	430b      	orrs	r3, r1
 800353e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800354a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	495c      	ldr	r1, [pc, #368]	@ (80036c4 <HAL_I2C_Init+0x274>)
 8003554:	428b      	cmp	r3, r1
 8003556:	d819      	bhi.n	800358c <HAL_I2C_Init+0x13c>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	1e59      	subs	r1, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	fbb1 f3f3 	udiv	r3, r1, r3
 8003566:	1c59      	adds	r1, r3, #1
 8003568:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800356c:	400b      	ands	r3, r1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_I2C_Init+0x138>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1e59      	subs	r1, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003580:	3301      	adds	r3, #1
 8003582:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003586:	e051      	b.n	800362c <HAL_I2C_Init+0x1dc>
 8003588:	2304      	movs	r3, #4
 800358a:	e04f      	b.n	800362c <HAL_I2C_Init+0x1dc>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d111      	bne.n	80035b8 <HAL_I2C_Init+0x168>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	1e58      	subs	r0, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6859      	ldr	r1, [r3, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	440b      	add	r3, r1
 80035a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035a6:	3301      	adds	r3, #1
 80035a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	bf0c      	ite	eq
 80035b0:	2301      	moveq	r3, #1
 80035b2:	2300      	movne	r3, #0
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	e012      	b.n	80035de <HAL_I2C_Init+0x18e>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1e58      	subs	r0, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6859      	ldr	r1, [r3, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	0099      	lsls	r1, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ce:	3301      	adds	r3, #1
 80035d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	bf0c      	ite	eq
 80035d8:	2301      	moveq	r3, #1
 80035da:	2300      	movne	r3, #0
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_Init+0x196>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e022      	b.n	800362c <HAL_I2C_Init+0x1dc>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10e      	bne.n	800360c <HAL_I2C_Init+0x1bc>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1e58      	subs	r0, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6859      	ldr	r1, [r3, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	440b      	add	r3, r1
 80035fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003600:	3301      	adds	r3, #1
 8003602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800360a:	e00f      	b.n	800362c <HAL_I2C_Init+0x1dc>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1e58      	subs	r0, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	0099      	lsls	r1, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003622:	3301      	adds	r3, #1
 8003624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003628:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	6809      	ldr	r1, [r1, #0]
 8003630:	4313      	orrs	r3, r2
 8003632:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	69da      	ldr	r2, [r3, #28]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a1b      	ldr	r3, [r3, #32]
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800365a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6911      	ldr	r1, [r2, #16]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68d2      	ldr	r2, [r2, #12]
 8003666:	4311      	orrs	r1, r2
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	430b      	orrs	r3, r1
 800366e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2220      	movs	r2, #32
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	000186a0 	.word	0x000186a0
 80036c8:	001e847f 	.word	0x001e847f
 80036cc:	003d08ff 	.word	0x003d08ff
 80036d0:	431bde83 	.word	0x431bde83
 80036d4:	10624dd3 	.word	0x10624dd3

080036d8 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ea:	2b80      	cmp	r3, #128	@ 0x80
 80036ec:	d103      	bne.n	80036f6 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
  }
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b088      	sub	sp, #32
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800371a:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003722:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800372a:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	2b10      	cmp	r3, #16
 8003730:	d003      	beq.n	800373a <HAL_I2C_EV_IRQHandler+0x38>
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	2b40      	cmp	r3, #64	@ 0x40
 8003736:	f040 80c1 	bne.w	80038bc <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10d      	bne.n	8003770 <HAL_I2C_EV_IRQHandler+0x6e>
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 800375a:	d003      	beq.n	8003764 <HAL_I2C_EV_IRQHandler+0x62>
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003762:	d101      	bne.n	8003768 <HAL_I2C_EV_IRQHandler+0x66>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <HAL_I2C_EV_IRQHandler+0x68>
 8003768:	2300      	movs	r3, #0
 800376a:	2b01      	cmp	r3, #1
 800376c:	f000 8132 	beq.w	80039d4 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00c      	beq.n	8003794 <HAL_I2C_EV_IRQHandler+0x92>
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	0a5b      	lsrs	r3, r3, #9
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d006      	beq.n	8003794 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f001 fb80 	bl	8004e8c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fcf8 	bl	8004182 <I2C_Master_SB>
 8003792:	e092      	b.n	80038ba <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	08db      	lsrs	r3, r3, #3
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d009      	beq.n	80037b4 <HAL_I2C_EV_IRQHandler+0xb2>
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	0a5b      	lsrs	r3, r3, #9
 80037a4:	f003 0301 	and.w	r3, r3, #1
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fd6e 	bl	800428e <I2C_Master_ADD10>
 80037b2:	e082      	b.n	80038ba <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d009      	beq.n	80037d4 <HAL_I2C_EV_IRQHandler+0xd2>
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	0a5b      	lsrs	r3, r3, #9
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fd88 	bl	80042e2 <I2C_Master_ADDR>
 80037d2:	e072      	b.n	80038ba <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	089b      	lsrs	r3, r3, #2
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d03b      	beq.n	8003858 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037ee:	f000 80f3 	beq.w	80039d8 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	09db      	lsrs	r3, r3, #7
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00f      	beq.n	800381e <HAL_I2C_EV_IRQHandler+0x11c>
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	0a9b      	lsrs	r3, r3, #10
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_I2C_EV_IRQHandler+0x11c>
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	089b      	lsrs	r3, r3, #2
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d103      	bne.n	800381e <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f94c 	bl	8003ab4 <I2C_MasterTransmit_TXE>
 800381c:	e04d      	b.n	80038ba <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	089b      	lsrs	r3, r3, #2
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80d6 	beq.w	80039d8 <HAL_I2C_EV_IRQHandler+0x2d6>
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	0a5b      	lsrs	r3, r3, #9
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80cf 	beq.w	80039d8 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800383a:	7bbb      	ldrb	r3, [r7, #14]
 800383c:	2b21      	cmp	r3, #33	@ 0x21
 800383e:	d103      	bne.n	8003848 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f9d3 	bl	8003bec <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003846:	e0c7      	b.n	80039d8 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	2b40      	cmp	r3, #64	@ 0x40
 800384c:	f040 80c4 	bne.w	80039d8 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fa41 	bl	8003cd8 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003856:	e0bf      	b.n	80039d8 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003862:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003866:	f000 80b7 	beq.w	80039d8 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	099b      	lsrs	r3, r3, #6
 800386e:	f003 0301 	and.w	r3, r3, #1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00f      	beq.n	8003896 <HAL_I2C_EV_IRQHandler+0x194>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	0a9b      	lsrs	r3, r3, #10
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d009      	beq.n	8003896 <HAL_I2C_EV_IRQHandler+0x194>
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	089b      	lsrs	r3, r3, #2
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d103      	bne.n	8003896 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 faba 	bl	8003e08 <I2C_MasterReceive_RXNE>
 8003894:	e011      	b.n	80038ba <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	089b      	lsrs	r3, r3, #2
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 809a 	beq.w	80039d8 <HAL_I2C_EV_IRQHandler+0x2d6>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	0a5b      	lsrs	r3, r3, #9
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8093 	beq.w	80039d8 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fb70 	bl	8003f98 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038b8:	e08e      	b.n	80039d8 <HAL_I2C_EV_IRQHandler+0x2d6>
 80038ba:	e08d      	b.n	80039d8 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	61fb      	str	r3, [r7, #28]
 80038cc:	e007      	b.n	80038de <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d012      	beq.n	8003910 <HAL_I2C_EV_IRQHandler+0x20e>
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	0a5b      	lsrs	r3, r3, #9
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003906:	69b9      	ldr	r1, [r7, #24]
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 ff39 	bl	8004780 <I2C_Slave_ADDR>
 800390e:	e066      	b.n	80039de <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	091b      	lsrs	r3, r3, #4
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d009      	beq.n	8003930 <HAL_I2C_EV_IRQHandler+0x22e>
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	0a5b      	lsrs	r3, r3, #9
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f000 ff73 	bl	8004814 <I2C_Slave_STOPF>
 800392e:	e056      	b.n	80039de <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003930:	7bbb      	ldrb	r3, [r7, #14]
 8003932:	2b21      	cmp	r3, #33	@ 0x21
 8003934:	d002      	beq.n	800393c <HAL_I2C_EV_IRQHandler+0x23a>
 8003936:	7bbb      	ldrb	r3, [r7, #14]
 8003938:	2b29      	cmp	r3, #41	@ 0x29
 800393a:	d125      	bne.n	8003988 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	09db      	lsrs	r3, r3, #7
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00f      	beq.n	8003968 <HAL_I2C_EV_IRQHandler+0x266>
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	0a9b      	lsrs	r3, r3, #10
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	2b00      	cmp	r3, #0
 8003952:	d009      	beq.n	8003968 <HAL_I2C_EV_IRQHandler+0x266>
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	d103      	bne.n	8003968 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fe4f 	bl	8004604 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003966:	e039      	b.n	80039dc <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b00      	cmp	r3, #0
 8003972:	d033      	beq.n	80039dc <HAL_I2C_EV_IRQHandler+0x2da>
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	0a5b      	lsrs	r3, r3, #9
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d02d      	beq.n	80039dc <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fe7c 	bl	800467e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003986:	e029      	b.n	80039dc <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	099b      	lsrs	r3, r3, #6
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00f      	beq.n	80039b4 <HAL_I2C_EV_IRQHandler+0x2b2>
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	0a9b      	lsrs	r3, r3, #10
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d009      	beq.n	80039b4 <HAL_I2C_EV_IRQHandler+0x2b2>
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	089b      	lsrs	r3, r3, #2
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d103      	bne.n	80039b4 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fe87 	bl	80046c0 <I2C_SlaveReceive_RXNE>
 80039b2:	e014      	b.n	80039de <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	089b      	lsrs	r3, r3, #2
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00e      	beq.n	80039de <HAL_I2C_EV_IRQHandler+0x2dc>
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	0a5b      	lsrs	r3, r3, #9
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 feb5 	bl	800473c <I2C_SlaveReceive_BTF>
 80039d2:	e004      	b.n	80039de <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80039d4:	bf00      	nop
 80039d6:	e002      	b.n	80039de <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039d8:	bf00      	nop
 80039da:	e000      	b.n	80039de <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039dc:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80039de:	3720      	adds	r7, #32
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b083      	sub	sp, #12
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	70fb      	strb	r3, [r7, #3]
 8003a40:	4613      	mov	r3, r2
 8003a42:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003aca:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ad0:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d150      	bne.n	8003b7c <I2C_MasterTransmit_TXE+0xc8>
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	2b21      	cmp	r3, #33	@ 0x21
 8003ade:	d14d      	bne.n	8003b7c <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d01d      	beq.n	8003b22 <I2C_MasterTransmit_TXE+0x6e>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d01a      	beq.n	8003b22 <I2C_MasterTransmit_TXE+0x6e>
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003af2:	d016      	beq.n	8003b22 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b02:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2211      	movs	r2, #17
 8003b08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff ff62 	bl	80039e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b20:	e060      	b.n	8003be4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685a      	ldr	r2, [r3, #4]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003b30:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b40:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b40      	cmp	r3, #64	@ 0x40
 8003b5a:	d107      	bne.n	8003b6c <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff ff7d 	bl	8003a64 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b6a:	e03b      	b.n	8003be4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff35 	bl	80039e4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b7a:	e033      	b.n	8003be4 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	2b21      	cmp	r3, #33	@ 0x21
 8003b80:	d005      	beq.n	8003b8e <I2C_MasterTransmit_TXE+0xda>
 8003b82:	7bbb      	ldrb	r3, [r7, #14]
 8003b84:	2b40      	cmp	r3, #64	@ 0x40
 8003b86:	d12d      	bne.n	8003be4 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b22      	cmp	r3, #34	@ 0x22
 8003b8c:	d12a      	bne.n	8003be4 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d108      	bne.n	8003baa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ba6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003ba8:	e01c      	b.n	8003be4 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b40      	cmp	r3, #64	@ 0x40
 8003bb4:	d103      	bne.n	8003bbe <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f88e 	bl	8003cd8 <I2C_MemoryTransmit_TXE_BTF>
}
 8003bbc:	e012      	b.n	8003be4 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	781a      	ldrb	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003be2:	e7ff      	b.n	8003be4 <I2C_MasterTransmit_TXE+0x130>
 8003be4:	bf00      	nop
 8003be6:	3710      	adds	r7, #16
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b21      	cmp	r3, #33	@ 0x21
 8003c04:	d164      	bne.n	8003cd0 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d012      	beq.n	8003c36 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	781a      	ldrb	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003c34:	e04c      	b.n	8003cd0 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d01d      	beq.n	8003c78 <I2C_MasterTransmit_BTF+0x8c>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	d01a      	beq.n	8003c78 <I2C_MasterTransmit_BTF+0x8c>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003c48:	d016      	beq.n	8003c78 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c58:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2211      	movs	r2, #17
 8003c5e:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff feb7 	bl	80039e4 <HAL_I2C_MasterTxCpltCallback>
}
 8003c76:	e02b      	b.n	8003cd0 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003c86:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c96:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b40      	cmp	r3, #64	@ 0x40
 8003cb0:	d107      	bne.n	8003cc2 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff fed2 	bl	8003a64 <HAL_I2C_MemTxCpltCallback>
}
 8003cc0:	e006      	b.n	8003cd0 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff fe8a 	bl	80039e4 <HAL_I2C_MasterTxCpltCallback>
}
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ce6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d11d      	bne.n	8003d2c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d10b      	bne.n	8003d10 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d08:	1c9a      	adds	r2, r3, #2
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003d0e:	e077      	b.n	8003e00 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	121b      	asrs	r3, r3, #8
 8003d18:	b2da      	uxtb	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d2a:	e069      	b.n	8003e00 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d10b      	bne.n	8003d4c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d4a:	e059      	b.n	8003e00 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d152      	bne.n	8003dfa <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	2b22      	cmp	r3, #34	@ 0x22
 8003d58:	d10d      	bne.n	8003d76 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d68:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003d74:	e044      	b.n	8003e00 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d015      	beq.n	8003dac <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b21      	cmp	r3, #33	@ 0x21
 8003d84:	d112      	bne.n	8003dac <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	781a      	ldrb	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003daa:	e029      	b.n	8003e00 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d124      	bne.n	8003e00 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	2b21      	cmp	r3, #33	@ 0x21
 8003dba:	d121      	bne.n	8003e00 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003dca:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dda:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff fe36 	bl	8003a64 <HAL_I2C_MemTxCpltCallback>
}
 8003df8:	e002      	b.n	8003e00 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff fc6c 	bl	80036d8 <I2C_Flush_DR>
}
 8003e00:	bf00      	nop
 8003e02:	3710      	adds	r7, #16
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b22      	cmp	r3, #34	@ 0x22
 8003e1a:	f040 80b9 	bne.w	8003f90 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d921      	bls.n	8003e76 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	f040 8096 	bne.w	8003f90 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e72:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003e74:	e08c      	b.n	8003f90 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d07f      	beq.n	8003f7e <I2C_MasterReceive_RXNE+0x176>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d002      	beq.n	8003e8a <I2C_MasterReceive_RXNE+0x82>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d179      	bne.n	8003f7e <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 ffcc 	bl	8004e28 <I2C_WaitOnSTOPRequestThroughIT>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d14c      	bne.n	8003f30 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003eb4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b40      	cmp	r3, #64	@ 0x40
 8003eee:	d10a      	bne.n	8003f06 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff fdba 	bl	8003a78 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f04:	e044      	b.n	8003f90 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d002      	beq.n	8003f1a <I2C_MasterReceive_RXNE+0x112>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d103      	bne.n	8003f22 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f20:	e002      	b.n	8003f28 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2212      	movs	r2, #18
 8003f26:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f7ff fd65 	bl	80039f8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f2e:	e02f      	b.n	8003f90 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f3e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	1c5a      	adds	r2, r3, #1
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	b29a      	uxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fd88 	bl	8003a8c <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f7c:	e008      	b.n	8003f90 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f8c:	605a      	str	r2, [r3, #4]
}
 8003f8e:	e7ff      	b.n	8003f90 <I2C_MasterReceive_RXNE+0x188>
 8003f90:	bf00      	nop
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	2b04      	cmp	r3, #4
 8003fae:	d11b      	bne.n	8003fe8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fbe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	691a      	ldr	r2, [r3, #16]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd2:	1c5a      	adds	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003fe6:	e0c8      	b.n	800417a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b03      	cmp	r3, #3
 8003ff0:	d129      	bne.n	8004046 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004000:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b04      	cmp	r3, #4
 8004006:	d00a      	beq.n	800401e <I2C_MasterReceive_BTF+0x86>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d007      	beq.n	800401e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800401c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004044:	e099      	b.n	800417a <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404a:	b29b      	uxth	r3, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	f040 8081 	bne.w	8004154 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d002      	beq.n	800405e <I2C_MasterReceive_BTF+0xc6>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b10      	cmp	r3, #16
 800405c:	d108      	bne.n	8004070 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e019      	b.n	80040a4 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b04      	cmp	r3, #4
 8004074:	d002      	beq.n	800407c <I2C_MasterReceive_BTF+0xe4>
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b02      	cmp	r3, #2
 800407a:	d108      	bne.n	800408e <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800408a:	601a      	str	r2, [r3, #0]
 800408c:	e00a      	b.n	80040a4 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b10      	cmp	r3, #16
 8004092:	d007      	beq.n	80040a4 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040a2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691a      	ldr	r2, [r3, #16]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	3b01      	subs	r3, #1
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80040fe:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2220      	movs	r2, #32
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b40      	cmp	r3, #64	@ 0x40
 8004112:	d10a      	bne.n	800412a <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff fca8 	bl	8003a78 <HAL_I2C_MemRxCpltCallback>
}
 8004128:	e027      	b.n	800417a <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b08      	cmp	r3, #8
 8004136:	d002      	beq.n	800413e <I2C_MasterReceive_BTF+0x1a6>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2b20      	cmp	r3, #32
 800413c:	d103      	bne.n	8004146 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	@ 0x30
 8004144:	e002      	b.n	800414c <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2212      	movs	r2, #18
 800414a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff fc53 	bl	80039f8 <HAL_I2C_MasterRxCpltCallback>
}
 8004152:	e012      	b.n	800417a <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b40      	cmp	r3, #64	@ 0x40
 8004194:	d117      	bne.n	80041c6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	461a      	mov	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041ae:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80041b0:	e067      	b.n	8004282 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	611a      	str	r2, [r3, #16]
}
 80041c4:	e05d      	b.n	8004282 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041ce:	d133      	bne.n	8004238 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b21      	cmp	r3, #33	@ 0x21
 80041da:	d109      	bne.n	80041f0 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041ec:	611a      	str	r2, [r3, #16]
 80041ee:	e008      	b.n	8004202 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004206:	2b00      	cmp	r3, #0
 8004208:	d004      	beq.n	8004214 <I2C_Master_SB+0x92>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800420e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d108      	bne.n	8004226 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004218:	2b00      	cmp	r3, #0
 800421a:	d032      	beq.n	8004282 <I2C_Master_SB+0x100>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004222:	2b00      	cmp	r3, #0
 8004224:	d02d      	beq.n	8004282 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685a      	ldr	r2, [r3, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004234:	605a      	str	r2, [r3, #4]
}
 8004236:	e024      	b.n	8004282 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423c:	2b00      	cmp	r3, #0
 800423e:	d10e      	bne.n	800425e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004244:	b29b      	uxth	r3, r3
 8004246:	11db      	asrs	r3, r3, #7
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f003 0306 	and.w	r3, r3, #6
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f063 030f 	orn	r3, r3, #15
 8004254:	b2da      	uxtb	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]
}
 800425c:	e011      	b.n	8004282 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004262:	2b01      	cmp	r3, #1
 8004264:	d10d      	bne.n	8004282 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800426a:	b29b      	uxth	r3, r3
 800426c:	11db      	asrs	r3, r3, #7
 800426e:	b2db      	uxtb	r3, r3
 8004270:	f003 0306 	and.w	r3, r3, #6
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f063 030e 	orn	r3, r3, #14
 800427a:	b2da      	uxtb	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	611a      	str	r2, [r3, #16]
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	b2da      	uxtb	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d004      	beq.n	80042b4 <I2C_Master_ADD10+0x26>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d108      	bne.n	80042c6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00c      	beq.n	80042d6 <I2C_Master_ADD10+0x48>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d007      	beq.n	80042d6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042d4:	605a      	str	r2, [r3, #4]
  }
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr

080042e2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80042e2:	b480      	push	{r7}
 80042e4:	b091      	sub	sp, #68	@ 0x44
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fe:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b22      	cmp	r3, #34	@ 0x22
 800430a:	f040 8169 	bne.w	80045e0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10f      	bne.n	8004336 <I2C_Master_ADDR+0x54>
 8004316:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800431a:	2b40      	cmp	r3, #64	@ 0x40
 800431c:	d10b      	bne.n	8004336 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800431e:	2300      	movs	r3, #0
 8004320:	633b      	str	r3, [r7, #48]	@ 0x30
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	633b      	str	r3, [r7, #48]	@ 0x30
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	633b      	str	r3, [r7, #48]	@ 0x30
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	e160      	b.n	80045f8 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800433a:	2b00      	cmp	r3, #0
 800433c:	d11d      	bne.n	800437a <I2C_Master_ADDR+0x98>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004346:	d118      	bne.n	800437a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004348:	2300      	movs	r3, #0
 800434a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800435c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800436c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004372:	1c5a      	adds	r2, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	651a      	str	r2, [r3, #80]	@ 0x50
 8004378:	e13e      	b.n	80045f8 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d113      	bne.n	80043ac <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004384:	2300      	movs	r3, #0
 8004386:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004398:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	e115      	b.n	80045d8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	f040 808a 	bne.w	80044cc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80043b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043be:	d137      	bne.n	8004430 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043ce:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043de:	d113      	bne.n	8004408 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043ee:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043f0:	2300      	movs	r3, #0
 80043f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	627b      	str	r3, [r7, #36]	@ 0x24
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	e0e7      	b.n	80045d8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004408:	2300      	movs	r3, #0
 800440a:	623b      	str	r3, [r7, #32]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	623b      	str	r3, [r7, #32]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	e0d3      	b.n	80045d8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004432:	2b08      	cmp	r3, #8
 8004434:	d02e      	beq.n	8004494 <I2C_Master_ADDR+0x1b2>
 8004436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004438:	2b20      	cmp	r3, #32
 800443a:	d02b      	beq.n	8004494 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800443c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443e:	2b12      	cmp	r3, #18
 8004440:	d102      	bne.n	8004448 <I2C_Master_ADDR+0x166>
 8004442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004444:	2b01      	cmp	r3, #1
 8004446:	d125      	bne.n	8004494 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800444a:	2b04      	cmp	r3, #4
 800444c:	d00e      	beq.n	800446c <I2C_Master_ADDR+0x18a>
 800444e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004450:	2b02      	cmp	r3, #2
 8004452:	d00b      	beq.n	800446c <I2C_Master_ADDR+0x18a>
 8004454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004456:	2b10      	cmp	r3, #16
 8004458:	d008      	beq.n	800446c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	e007      	b.n	800447c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800447a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447c:	2300      	movs	r3, #0
 800447e:	61fb      	str	r3, [r7, #28]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	e0a1      	b.n	80045d8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044a2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a4:	2300      	movs	r3, #0
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	61bb      	str	r3, [r7, #24]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	61bb      	str	r3, [r7, #24]
 80044b8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c8:	601a      	str	r2, [r3, #0]
 80044ca:	e085      	b.n	80045d8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d14d      	bne.n	8004572 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d016      	beq.n	800450a <I2C_Master_ADDR+0x228>
 80044dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d013      	beq.n	800450a <I2C_Master_ADDR+0x228>
 80044e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d010      	beq.n	800450a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044f6:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	e007      	b.n	800451a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004518:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004528:	d117      	bne.n	800455a <I2C_Master_ADDR+0x278>
 800452a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004530:	d00b      	beq.n	800454a <I2C_Master_ADDR+0x268>
 8004532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004534:	2b01      	cmp	r3, #1
 8004536:	d008      	beq.n	800454a <I2C_Master_ADDR+0x268>
 8004538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800453a:	2b08      	cmp	r3, #8
 800453c:	d005      	beq.n	800454a <I2C_Master_ADDR+0x268>
 800453e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004540:	2b10      	cmp	r3, #16
 8004542:	d002      	beq.n	800454a <I2C_Master_ADDR+0x268>
 8004544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004546:	2b20      	cmp	r3, #32
 8004548:	d107      	bne.n	800455a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004558:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800455a:	2300      	movs	r3, #0
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	e032      	b.n	80045d8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004580:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800458c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004590:	d117      	bne.n	80045c2 <I2C_Master_ADDR+0x2e0>
 8004592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004594:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004598:	d00b      	beq.n	80045b2 <I2C_Master_ADDR+0x2d0>
 800459a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459c:	2b01      	cmp	r3, #1
 800459e:	d008      	beq.n	80045b2 <I2C_Master_ADDR+0x2d0>
 80045a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a2:	2b08      	cmp	r3, #8
 80045a4:	d005      	beq.n	80045b2 <I2C_Master_ADDR+0x2d0>
 80045a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a8:	2b10      	cmp	r3, #16
 80045aa:	d002      	beq.n	80045b2 <I2C_Master_ADDR+0x2d0>
 80045ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ae:	2b20      	cmp	r3, #32
 80045b0:	d107      	bne.n	80045c2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80045c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c2:	2300      	movs	r3, #0
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	613b      	str	r3, [r7, #16]
 80045d6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80045de:	e00b      	b.n	80045f8 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	60fb      	str	r3, [r7, #12]
 80045f4:	68fb      	ldr	r3, [r7, #12]
}
 80045f6:	e7ff      	b.n	80045f8 <I2C_Master_ADDR+0x316>
 80045f8:	bf00      	nop
 80045fa:	3744      	adds	r7, #68	@ 0x44
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004612:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d02b      	beq.n	8004676 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004622:	781a      	ldrb	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462e:	1c5a      	adds	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d114      	bne.n	8004676 <I2C_SlaveTransmit_TXE+0x72>
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b29      	cmp	r3, #41	@ 0x29
 8004650:	d111      	bne.n	8004676 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004660:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2221      	movs	r2, #33	@ 0x21
 8004666:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2228      	movs	r2, #40	@ 0x28
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff f9cb 	bl	8003a0c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d011      	beq.n	80046b4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	781a      	ldrb	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d02c      	beq.n	8004734 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d114      	bne.n	8004734 <I2C_SlaveReceive_RXNE+0x74>
 800470a:	7bfb      	ldrb	r3, [r7, #15]
 800470c:	2b2a      	cmp	r3, #42	@ 0x2a
 800470e:	d111      	bne.n	8004734 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800471e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2222      	movs	r2, #34	@ 0x22
 8004724:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2228      	movs	r2, #40	@ 0x28
 800472a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff f976 	bl	8003a20 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004748:	b29b      	uxth	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d012      	beq.n	8004774 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	691a      	ldr	r2, [r3, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	1c5a      	adds	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800478a:	2300      	movs	r3, #0
 800478c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800479a:	2b28      	cmp	r3, #40	@ 0x28
 800479c:	d127      	bne.n	80047ee <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ac:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	089b      	lsrs	r3, r3, #2
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80047ba:	2301      	movs	r3, #1
 80047bc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	09db      	lsrs	r3, r3, #7
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d103      	bne.n	80047d2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	81bb      	strh	r3, [r7, #12]
 80047d0:	e002      	b.n	80047d8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80047e0:	89ba      	ldrh	r2, [r7, #12]
 80047e2:	7bfb      	ldrb	r3, [r7, #15]
 80047e4:	4619      	mov	r1, r3
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff f924 	bl	8003a34 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80047ec:	e00e      	b.n	800480c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004822:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685a      	ldr	r2, [r3, #4]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004832:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004834:	2300      	movs	r3, #0
 8004836:	60bb      	str	r3, [r7, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004860:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800486c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004870:	d172      	bne.n	8004958 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004872:	7bfb      	ldrb	r3, [r7, #15]
 8004874:	2b22      	cmp	r3, #34	@ 0x22
 8004876:	d002      	beq.n	800487e <I2C_Slave_STOPF+0x6a>
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2b2a      	cmp	r3, #42	@ 0x2a
 800487c:	d135      	bne.n	80048ea <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	b29a      	uxth	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	f043 0204 	orr.w	r2, r3, #4
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048b0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe fbc9 	bl	800304e <HAL_DMA_GetState>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d049      	beq.n	8004956 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c6:	4a69      	ldr	r2, [pc, #420]	@ (8004a6c <I2C_Slave_STOPF+0x258>)
 80048c8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fe fb9b 	bl	800300a <HAL_DMA_Abort_IT>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d03d      	beq.n	8004956 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048e4:	4610      	mov	r0, r2
 80048e6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80048e8:	e035      	b.n	8004956 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004906:	f043 0204 	orr.w	r2, r3, #4
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800491c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe fb93 	bl	800304e <HAL_DMA_GetState>
 8004928:	4603      	mov	r3, r0
 800492a:	2b01      	cmp	r3, #1
 800492c:	d014      	beq.n	8004958 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004932:	4a4e      	ldr	r2, [pc, #312]	@ (8004a6c <I2C_Slave_STOPF+0x258>)
 8004934:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe fb65 	bl	800300a <HAL_DMA_Abort_IT>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d008      	beq.n	8004958 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800494a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004950:	4610      	mov	r0, r2
 8004952:	4798      	blx	r3
 8004954:	e000      	b.n	8004958 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004956:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d03e      	beq.n	80049e0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695b      	ldr	r3, [r3, #20]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b04      	cmp	r3, #4
 800496e:	d112      	bne.n	8004996 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691a      	ldr	r2, [r3, #16]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a0:	2b40      	cmp	r3, #64	@ 0x40
 80049a2:	d112      	bne.n	80049ca <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691a      	ldr	r2, [r3, #16]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	3b01      	subs	r3, #1
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d005      	beq.n	80049e0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d8:	f043 0204 	orr.w	r2, r3, #4
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f843 	bl	8004a74 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80049ee:	e039      	b.n	8004a64 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80049f4:	d109      	bne.n	8004a0a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2228      	movs	r2, #40	@ 0x28
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f7ff f80b 	bl	8003a20 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b28      	cmp	r3, #40	@ 0x28
 8004a14:	d111      	bne.n	8004a3a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a15      	ldr	r2, [pc, #84]	@ (8004a70 <I2C_Slave_STOPF+0x25c>)
 8004a1a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff f80c 	bl	8003a50 <HAL_I2C_ListenCpltCallback>
}
 8004a38:	e014      	b.n	8004a64 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a3e:	2b22      	cmp	r3, #34	@ 0x22
 8004a40:	d002      	beq.n	8004a48 <I2C_Slave_STOPF+0x234>
 8004a42:	7bfb      	ldrb	r3, [r7, #15]
 8004a44:	2b22      	cmp	r3, #34	@ 0x22
 8004a46:	d10d      	bne.n	8004a64 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7fe ffde 	bl	8003a20 <HAL_I2C_SlaveRxCpltCallback>
}
 8004a64:	bf00      	nop
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	08004cd9 	.word	0x08004cd9
 8004a70:	ffff0000 	.word	0xffff0000

08004a74 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a82:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a8a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004a8c:	7bbb      	ldrb	r3, [r7, #14]
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d002      	beq.n	8004a98 <I2C_ITError+0x24>
 8004a92:	7bbb      	ldrb	r3, [r7, #14]
 8004a94:	2b40      	cmp	r3, #64	@ 0x40
 8004a96:	d10a      	bne.n	8004aae <I2C_ITError+0x3a>
 8004a98:	7bfb      	ldrb	r3, [r7, #15]
 8004a9a:	2b22      	cmp	r3, #34	@ 0x22
 8004a9c:	d107      	bne.n	8004aae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004aac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ab4:	2b28      	cmp	r3, #40	@ 0x28
 8004ab6:	d107      	bne.n	8004ac8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2228      	movs	r2, #40	@ 0x28
 8004ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004ac6:	e015      	b.n	8004af4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ad2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ad6:	d00a      	beq.n	8004aee <I2C_ITError+0x7a>
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	2b60      	cmp	r3, #96	@ 0x60
 8004adc:	d007      	beq.n	8004aee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b02:	d162      	bne.n	8004bca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b12:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d020      	beq.n	8004b64 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b26:	4a6a      	ldr	r2, [pc, #424]	@ (8004cd0 <I2C_ITError+0x25c>)
 8004b28:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe fa6b 	bl	800300a <HAL_DMA_Abort_IT>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8089 	beq.w	8004c4e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0201 	bic.w	r2, r2, #1
 8004b4a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b5e:	4610      	mov	r0, r2
 8004b60:	4798      	blx	r3
 8004b62:	e074      	b.n	8004c4e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b68:	4a59      	ldr	r2, [pc, #356]	@ (8004cd0 <I2C_ITError+0x25c>)
 8004b6a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fe fa4a 	bl	800300a <HAL_DMA_Abort_IT>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d068      	beq.n	8004c4e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b86:	2b40      	cmp	r3, #64	@ 0x40
 8004b88:	d10b      	bne.n	8004ba2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0201 	bic.w	r2, r2, #1
 8004bb0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4798      	blx	r3
 8004bc8:	e041      	b.n	8004c4e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b60      	cmp	r3, #96	@ 0x60
 8004bd4:	d125      	bne.n	8004c22 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bee:	2b40      	cmp	r3, #64	@ 0x40
 8004bf0:	d10b      	bne.n	8004c0a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c04:	1c5a      	adds	r2, r3, #1
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7fe ff40 	bl	8003aa0 <HAL_I2C_AbortCpltCallback>
 8004c20:	e015      	b.n	8004c4e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2c:	2b40      	cmp	r3, #64	@ 0x40
 8004c2e:	d10b      	bne.n	8004c48 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f7fe ff1f 	bl	8003a8c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c52:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10e      	bne.n	8004c7c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d109      	bne.n	8004c7c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d104      	bne.n	8004c7c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d007      	beq.n	8004c8c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c8a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c92:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d113      	bne.n	8004cc8 <I2C_ITError+0x254>
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	2b28      	cmp	r3, #40	@ 0x28
 8004ca4:	d110      	bne.n	8004cc8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a0a      	ldr	r2, [pc, #40]	@ (8004cd4 <I2C_ITError+0x260>)
 8004caa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7fe fec4 	bl	8003a50 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	08004cd9 	.word	0x08004cd9
 8004cd4:	ffff0000 	.word	0xffff0000

08004cd8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cf0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8004e20 <I2C_DMAAbort+0x148>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	08db      	lsrs	r3, r3, #3
 8004cf8:	4a4a      	ldr	r2, [pc, #296]	@ (8004e24 <I2C_DMAAbort+0x14c>)
 8004cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfe:	0a1a      	lsrs	r2, r3, #8
 8004d00:	4613      	mov	r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	00da      	lsls	r2, r3, #3
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d16:	f043 0220 	orr.w	r2, r3, #32
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004d1e:	e00a      	b.n	8004d36 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d34:	d0ea      	beq.n	8004d0c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d42:	2200      	movs	r2, #0
 8004d44:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d52:	2200      	movs	r2, #0
 8004d54:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d64:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d003      	beq.n	8004d7c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d78:	2200      	movs	r2, #0
 8004d7a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d88:	2200      	movs	r2, #0
 8004d8a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0201 	bic.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	2b60      	cmp	r3, #96	@ 0x60
 8004da6:	d10e      	bne.n	8004dc6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	2220      	movs	r2, #32
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004dbe:	6978      	ldr	r0, [r7, #20]
 8004dc0:	f7fe fe6e 	bl	8003aa0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004dc4:	e027      	b.n	8004e16 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dc6:	7cfb      	ldrb	r3, [r7, #19]
 8004dc8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004dcc:	2b28      	cmp	r3, #40	@ 0x28
 8004dce:	d117      	bne.n	8004e00 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004dee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	2200      	movs	r2, #0
 8004df4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2228      	movs	r2, #40	@ 0x28
 8004dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004dfe:	e007      	b.n	8004e10 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004e10:	6978      	ldr	r0, [r7, #20]
 8004e12:	f7fe fe3b 	bl	8003a8c <HAL_I2C_ErrorCallback>
}
 8004e16:	bf00      	nop
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	20000000 	.word	0x20000000
 8004e24:	14f8b589 	.word	0x14f8b589

08004e28 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e34:	4b13      	ldr	r3, [pc, #76]	@ (8004e84 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	08db      	lsrs	r3, r3, #3
 8004e3a:	4a13      	ldr	r2, [pc, #76]	@ (8004e88 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e40:	0a1a      	lsrs	r2, r3, #8
 8004e42:	4613      	mov	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d107      	bne.n	8004e66 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e5a:	f043 0220 	orr.w	r2, r3, #32
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e008      	b.n	8004e78 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e74:	d0e9      	beq.n	8004e4a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3714      	adds	r7, #20
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr
 8004e84:	20000000 	.word	0x20000000
 8004e88:	14f8b589 	.word	0x14f8b589

08004e8c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004e9c:	d103      	bne.n	8004ea6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004ea4:	e007      	b.n	8004eb6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004eae:	d102      	bne.n	8004eb6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2208      	movs	r2, #8
 8004eb4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
	...

08004ec4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e267      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d075      	beq.n	8004fce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ee2:	4b88      	ldr	r3, [pc, #544]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d00c      	beq.n	8004f08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eee:	4b85      	ldr	r3, [pc, #532]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d112      	bne.n	8004f20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004efa:	4b82      	ldr	r3, [pc, #520]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f06:	d10b      	bne.n	8004f20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f08:	4b7e      	ldr	r3, [pc, #504]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d05b      	beq.n	8004fcc <HAL_RCC_OscConfig+0x108>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d157      	bne.n	8004fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e242      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f28:	d106      	bne.n	8004f38 <HAL_RCC_OscConfig+0x74>
 8004f2a:	4b76      	ldr	r3, [pc, #472]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a75      	ldr	r2, [pc, #468]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	e01d      	b.n	8004f74 <HAL_RCC_OscConfig+0xb0>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f40:	d10c      	bne.n	8004f5c <HAL_RCC_OscConfig+0x98>
 8004f42:	4b70      	ldr	r3, [pc, #448]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a6f      	ldr	r2, [pc, #444]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f4c:	6013      	str	r3, [r2, #0]
 8004f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a6c      	ldr	r2, [pc, #432]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	e00b      	b.n	8004f74 <HAL_RCC_OscConfig+0xb0>
 8004f5c:	4b69      	ldr	r3, [pc, #420]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a68      	ldr	r2, [pc, #416]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	4b66      	ldr	r3, [pc, #408]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a65      	ldr	r2, [pc, #404]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d013      	beq.n	8004fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7c:	f7fd ff04 	bl	8002d88 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f84:	f7fd ff00 	bl	8002d88 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b64      	cmp	r3, #100	@ 0x64
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e207      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f96:	4b5b      	ldr	r3, [pc, #364]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0f0      	beq.n	8004f84 <HAL_RCC_OscConfig+0xc0>
 8004fa2:	e014      	b.n	8004fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa4:	f7fd fef0 	bl	8002d88 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fac:	f7fd feec 	bl	8002d88 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b64      	cmp	r3, #100	@ 0x64
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e1f3      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fbe:	4b51      	ldr	r3, [pc, #324]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1f0      	bne.n	8004fac <HAL_RCC_OscConfig+0xe8>
 8004fca:	e000      	b.n	8004fce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d063      	beq.n	80050a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fda:	4b4a      	ldr	r3, [pc, #296]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 030c 	and.w	r3, r3, #12
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00b      	beq.n	8004ffe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fe6:	4b47      	ldr	r3, [pc, #284]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d11c      	bne.n	800502c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ff2:	4b44      	ldr	r3, [pc, #272]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d116      	bne.n	800502c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffe:	4b41      	ldr	r3, [pc, #260]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d005      	beq.n	8005016 <HAL_RCC_OscConfig+0x152>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d001      	beq.n	8005016 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e1c7      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005016:	4b3b      	ldr	r3, [pc, #236]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4937      	ldr	r1, [pc, #220]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8005026:	4313      	orrs	r3, r2
 8005028:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800502a:	e03a      	b.n	80050a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d020      	beq.n	8005076 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005034:	4b34      	ldr	r3, [pc, #208]	@ (8005108 <HAL_RCC_OscConfig+0x244>)
 8005036:	2201      	movs	r2, #1
 8005038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503a:	f7fd fea5 	bl	8002d88 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005042:	f7fd fea1 	bl	8002d88 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e1a8      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005054:	4b2b      	ldr	r3, [pc, #172]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d0f0      	beq.n	8005042 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005060:	4b28      	ldr	r3, [pc, #160]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	00db      	lsls	r3, r3, #3
 800506e:	4925      	ldr	r1, [pc, #148]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8005070:	4313      	orrs	r3, r2
 8005072:	600b      	str	r3, [r1, #0]
 8005074:	e015      	b.n	80050a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005076:	4b24      	ldr	r3, [pc, #144]	@ (8005108 <HAL_RCC_OscConfig+0x244>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507c:	f7fd fe84 	bl	8002d88 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005084:	f7fd fe80 	bl	8002d88 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e187      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005096:	4b1b      	ldr	r3, [pc, #108]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d036      	beq.n	800511c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d016      	beq.n	80050e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050b6:	4b15      	ldr	r3, [pc, #84]	@ (800510c <HAL_RCC_OscConfig+0x248>)
 80050b8:	2201      	movs	r2, #1
 80050ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050bc:	f7fd fe64 	bl	8002d88 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050c4:	f7fd fe60 	bl	8002d88 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e167      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <HAL_RCC_OscConfig+0x240>)
 80050d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d0f0      	beq.n	80050c4 <HAL_RCC_OscConfig+0x200>
 80050e2:	e01b      	b.n	800511c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050e4:	4b09      	ldr	r3, [pc, #36]	@ (800510c <HAL_RCC_OscConfig+0x248>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ea:	f7fd fe4d 	bl	8002d88 <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f0:	e00e      	b.n	8005110 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050f2:	f7fd fe49 	bl	8002d88 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d907      	bls.n	8005110 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e150      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
 8005104:	40023800 	.word	0x40023800
 8005108:	42470000 	.word	0x42470000
 800510c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005110:	4b88      	ldr	r3, [pc, #544]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1ea      	bne.n	80050f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0304 	and.w	r3, r3, #4
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 8097 	beq.w	8005258 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800512e:	4b81      	ldr	r3, [pc, #516]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10f      	bne.n	800515a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800513a:	2300      	movs	r3, #0
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	4b7d      	ldr	r3, [pc, #500]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005142:	4a7c      	ldr	r2, [pc, #496]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005148:	6413      	str	r3, [r2, #64]	@ 0x40
 800514a:	4b7a      	ldr	r3, [pc, #488]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800514e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005152:	60bb      	str	r3, [r7, #8]
 8005154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005156:	2301      	movs	r3, #1
 8005158:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515a:	4b77      	ldr	r3, [pc, #476]	@ (8005338 <HAL_RCC_OscConfig+0x474>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005162:	2b00      	cmp	r3, #0
 8005164:	d118      	bne.n	8005198 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005166:	4b74      	ldr	r3, [pc, #464]	@ (8005338 <HAL_RCC_OscConfig+0x474>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a73      	ldr	r2, [pc, #460]	@ (8005338 <HAL_RCC_OscConfig+0x474>)
 800516c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005172:	f7fd fe09 	bl	8002d88 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800517a:	f7fd fe05 	bl	8002d88 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e10c      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518c:	4b6a      	ldr	r3, [pc, #424]	@ (8005338 <HAL_RCC_OscConfig+0x474>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d106      	bne.n	80051ae <HAL_RCC_OscConfig+0x2ea>
 80051a0:	4b64      	ldr	r3, [pc, #400]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a4:	4a63      	ldr	r2, [pc, #396]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ac:	e01c      	b.n	80051e8 <HAL_RCC_OscConfig+0x324>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	2b05      	cmp	r3, #5
 80051b4:	d10c      	bne.n	80051d0 <HAL_RCC_OscConfig+0x30c>
 80051b6:	4b5f      	ldr	r3, [pc, #380]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ba:	4a5e      	ldr	r2, [pc, #376]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051bc:	f043 0304 	orr.w	r3, r3, #4
 80051c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c6:	4a5b      	ldr	r2, [pc, #364]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ce:	e00b      	b.n	80051e8 <HAL_RCC_OscConfig+0x324>
 80051d0:	4b58      	ldr	r3, [pc, #352]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d4:	4a57      	ldr	r2, [pc, #348]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051d6:	f023 0301 	bic.w	r3, r3, #1
 80051da:	6713      	str	r3, [r2, #112]	@ 0x70
 80051dc:	4b55      	ldr	r3, [pc, #340]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e0:	4a54      	ldr	r2, [pc, #336]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80051e2:	f023 0304 	bic.w	r3, r3, #4
 80051e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d015      	beq.n	800521c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f0:	f7fd fdca 	bl	8002d88 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f6:	e00a      	b.n	800520e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f8:	f7fd fdc6 	bl	8002d88 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005206:	4293      	cmp	r3, r2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e0cb      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520e:	4b49      	ldr	r3, [pc, #292]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0ee      	beq.n	80051f8 <HAL_RCC_OscConfig+0x334>
 800521a:	e014      	b.n	8005246 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800521c:	f7fd fdb4 	bl	8002d88 <HAL_GetTick>
 8005220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005222:	e00a      	b.n	800523a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005224:	f7fd fdb0 	bl	8002d88 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005232:	4293      	cmp	r3, r2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e0b5      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800523a:	4b3e      	ldr	r3, [pc, #248]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1ee      	bne.n	8005224 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005246:	7dfb      	ldrb	r3, [r7, #23]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d105      	bne.n	8005258 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524c:	4b39      	ldr	r3, [pc, #228]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 800524e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005250:	4a38      	ldr	r2, [pc, #224]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005256:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	699b      	ldr	r3, [r3, #24]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 80a1 	beq.w	80053a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005262:	4b34      	ldr	r3, [pc, #208]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 030c 	and.w	r3, r3, #12
 800526a:	2b08      	cmp	r3, #8
 800526c:	d05c      	beq.n	8005328 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	2b02      	cmp	r3, #2
 8005274:	d141      	bne.n	80052fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005276:	4b31      	ldr	r3, [pc, #196]	@ (800533c <HAL_RCC_OscConfig+0x478>)
 8005278:	2200      	movs	r2, #0
 800527a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800527c:	f7fd fd84 	bl	8002d88 <HAL_GetTick>
 8005280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005282:	e008      	b.n	8005296 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005284:	f7fd fd80 	bl	8002d88 <HAL_GetTick>
 8005288:	4602      	mov	r2, r0
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	2b02      	cmp	r3, #2
 8005290:	d901      	bls.n	8005296 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e087      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005296:	4b27      	ldr	r3, [pc, #156]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f0      	bne.n	8005284 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69da      	ldr	r2, [r3, #28]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b0:	019b      	lsls	r3, r3, #6
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b8:	085b      	lsrs	r3, r3, #1
 80052ba:	3b01      	subs	r3, #1
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	061b      	lsls	r3, r3, #24
 80052c6:	491b      	ldr	r1, [pc, #108]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052cc:	4b1b      	ldr	r3, [pc, #108]	@ (800533c <HAL_RCC_OscConfig+0x478>)
 80052ce:	2201      	movs	r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052d2:	f7fd fd59 	bl	8002d88 <HAL_GetTick>
 80052d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d8:	e008      	b.n	80052ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052da:	f7fd fd55 	bl	8002d88 <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d901      	bls.n	80052ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052e8:	2303      	movs	r3, #3
 80052ea:	e05c      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ec:	4b11      	ldr	r3, [pc, #68]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0f0      	beq.n	80052da <HAL_RCC_OscConfig+0x416>
 80052f8:	e054      	b.n	80053a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052fa:	4b10      	ldr	r3, [pc, #64]	@ (800533c <HAL_RCC_OscConfig+0x478>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005300:	f7fd fd42 	bl	8002d88 <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005308:	f7fd fd3e 	bl	8002d88 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e045      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531a:	4b06      	ldr	r3, [pc, #24]	@ (8005334 <HAL_RCC_OscConfig+0x470>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_OscConfig+0x444>
 8005326:	e03d      	b.n	80053a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d107      	bne.n	8005340 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e038      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
 8005334:	40023800 	.word	0x40023800
 8005338:	40007000 	.word	0x40007000
 800533c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005340:	4b1b      	ldr	r3, [pc, #108]	@ (80053b0 <HAL_RCC_OscConfig+0x4ec>)
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d028      	beq.n	80053a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005358:	429a      	cmp	r2, r3
 800535a:	d121      	bne.n	80053a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005366:	429a      	cmp	r2, r3
 8005368:	d11a      	bne.n	80053a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005370:	4013      	ands	r3, r2
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005376:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005378:	4293      	cmp	r3, r2
 800537a:	d111      	bne.n	80053a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	3b01      	subs	r3, #1
 800538a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800538c:	429a      	cmp	r2, r3
 800538e:	d107      	bne.n	80053a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800539c:	429a      	cmp	r2, r3
 800539e:	d001      	beq.n	80053a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40023800 	.word	0x40023800

080053b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0cc      	b.n	8005562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053c8:	4b68      	ldr	r3, [pc, #416]	@ (800556c <HAL_RCC_ClockConfig+0x1b8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d90c      	bls.n	80053f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d6:	4b65      	ldr	r3, [pc, #404]	@ (800556c <HAL_RCC_ClockConfig+0x1b8>)
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053de:	4b63      	ldr	r3, [pc, #396]	@ (800556c <HAL_RCC_ClockConfig+0x1b8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d001      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e0b8      	b.n	8005562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d020      	beq.n	800543e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d005      	beq.n	8005414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005408:	4b59      	ldr	r3, [pc, #356]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	4a58      	ldr	r2, [pc, #352]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 800540e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005412:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b00      	cmp	r3, #0
 800541e:	d005      	beq.n	800542c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005420:	4b53      	ldr	r3, [pc, #332]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	4a52      	ldr	r2, [pc, #328]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005426:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800542a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800542c:	4b50      	ldr	r3, [pc, #320]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	494d      	ldr	r1, [pc, #308]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 800543a:	4313      	orrs	r3, r2
 800543c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d044      	beq.n	80054d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d107      	bne.n	8005462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005452:	4b47      	ldr	r3, [pc, #284]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d119      	bne.n	8005492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e07f      	b.n	8005562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2b02      	cmp	r3, #2
 8005468:	d003      	beq.n	8005472 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800546e:	2b03      	cmp	r3, #3
 8005470:	d107      	bne.n	8005482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005472:	4b3f      	ldr	r3, [pc, #252]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e06f      	b.n	8005562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005482:	4b3b      	ldr	r3, [pc, #236]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 0302 	and.w	r3, r3, #2
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e067      	b.n	8005562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005492:	4b37      	ldr	r3, [pc, #220]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	f023 0203 	bic.w	r2, r3, #3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	4934      	ldr	r1, [pc, #208]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 80054a0:	4313      	orrs	r3, r2
 80054a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054a4:	f7fd fc70 	bl	8002d88 <HAL_GetTick>
 80054a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054aa:	e00a      	b.n	80054c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054ac:	f7fd fc6c 	bl	8002d88 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e04f      	b.n	8005562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 020c 	and.w	r2, r3, #12
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d1eb      	bne.n	80054ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054d4:	4b25      	ldr	r3, [pc, #148]	@ (800556c <HAL_RCC_ClockConfig+0x1b8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	429a      	cmp	r2, r3
 80054e0:	d20c      	bcs.n	80054fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e2:	4b22      	ldr	r3, [pc, #136]	@ (800556c <HAL_RCC_ClockConfig+0x1b8>)
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ea:	4b20      	ldr	r3, [pc, #128]	@ (800556c <HAL_RCC_ClockConfig+0x1b8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d001      	beq.n	80054fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	e032      	b.n	8005562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005508:	4b19      	ldr	r3, [pc, #100]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	4916      	ldr	r1, [pc, #88]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	4313      	orrs	r3, r2
 8005518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d009      	beq.n	800553a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005526:	4b12      	ldr	r3, [pc, #72]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	490e      	ldr	r1, [pc, #56]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005536:	4313      	orrs	r3, r2
 8005538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800553a:	f000 f821 	bl	8005580 <HAL_RCC_GetSysClockFreq>
 800553e:	4602      	mov	r2, r0
 8005540:	4b0b      	ldr	r3, [pc, #44]	@ (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	091b      	lsrs	r3, r3, #4
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	490a      	ldr	r1, [pc, #40]	@ (8005574 <HAL_RCC_ClockConfig+0x1c0>)
 800554c:	5ccb      	ldrb	r3, [r1, r3]
 800554e:	fa22 f303 	lsr.w	r3, r2, r3
 8005552:	4a09      	ldr	r2, [pc, #36]	@ (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 8005554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005556:	4b09      	ldr	r3, [pc, #36]	@ (800557c <HAL_RCC_ClockConfig+0x1c8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f7fd fbd0 	bl	8002d00 <HAL_InitTick>

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	40023c00 	.word	0x40023c00
 8005570:	40023800 	.word	0x40023800
 8005574:	08006ee4 	.word	0x08006ee4
 8005578:	20000000 	.word	0x20000000
 800557c:	20000004 	.word	0x20000004

08005580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005584:	b090      	sub	sp, #64	@ 0x40
 8005586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005590:	2300      	movs	r3, #0
 8005592:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005598:	4b59      	ldr	r3, [pc, #356]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x180>)
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 030c 	and.w	r3, r3, #12
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d00d      	beq.n	80055c0 <HAL_RCC_GetSysClockFreq+0x40>
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	f200 80a1 	bhi.w	80056ec <HAL_RCC_GetSysClockFreq+0x16c>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d002      	beq.n	80055b4 <HAL_RCC_GetSysClockFreq+0x34>
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d003      	beq.n	80055ba <HAL_RCC_GetSysClockFreq+0x3a>
 80055b2:	e09b      	b.n	80056ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055b4:	4b53      	ldr	r3, [pc, #332]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x184>)
 80055b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055b8:	e09b      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055ba:	4b53      	ldr	r3, [pc, #332]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x188>)
 80055bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80055be:	e098      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055c0:	4b4f      	ldr	r3, [pc, #316]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x180>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055ca:	4b4d      	ldr	r3, [pc, #308]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x180>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d028      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x180>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	099b      	lsrs	r3, r3, #6
 80055dc:	2200      	movs	r2, #0
 80055de:	623b      	str	r3, [r7, #32]
 80055e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055e8:	2100      	movs	r1, #0
 80055ea:	4b47      	ldr	r3, [pc, #284]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x188>)
 80055ec:	fb03 f201 	mul.w	r2, r3, r1
 80055f0:	2300      	movs	r3, #0
 80055f2:	fb00 f303 	mul.w	r3, r0, r3
 80055f6:	4413      	add	r3, r2
 80055f8:	4a43      	ldr	r2, [pc, #268]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x188>)
 80055fa:	fba0 1202 	umull	r1, r2, r0, r2
 80055fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005600:	460a      	mov	r2, r1
 8005602:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005606:	4413      	add	r3, r2
 8005608:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800560a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800560c:	2200      	movs	r2, #0
 800560e:	61bb      	str	r3, [r7, #24]
 8005610:	61fa      	str	r2, [r7, #28]
 8005612:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005616:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800561a:	f7fb faa7 	bl	8000b6c <__aeabi_uldivmod>
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	4613      	mov	r3, r2
 8005624:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005626:	e053      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005628:	4b35      	ldr	r3, [pc, #212]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x180>)
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	099b      	lsrs	r3, r3, #6
 800562e:	2200      	movs	r2, #0
 8005630:	613b      	str	r3, [r7, #16]
 8005632:	617a      	str	r2, [r7, #20]
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800563a:	f04f 0b00 	mov.w	fp, #0
 800563e:	4652      	mov	r2, sl
 8005640:	465b      	mov	r3, fp
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f04f 0100 	mov.w	r1, #0
 800564a:	0159      	lsls	r1, r3, #5
 800564c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005650:	0150      	lsls	r0, r2, #5
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	ebb2 080a 	subs.w	r8, r2, sl
 800565a:	eb63 090b 	sbc.w	r9, r3, fp
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800566a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800566e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005672:	ebb2 0408 	subs.w	r4, r2, r8
 8005676:	eb63 0509 	sbc.w	r5, r3, r9
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	00eb      	lsls	r3, r5, #3
 8005684:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005688:	00e2      	lsls	r2, r4, #3
 800568a:	4614      	mov	r4, r2
 800568c:	461d      	mov	r5, r3
 800568e:	eb14 030a 	adds.w	r3, r4, sl
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	eb45 030b 	adc.w	r3, r5, fp
 8005698:	607b      	str	r3, [r7, #4]
 800569a:	f04f 0200 	mov.w	r2, #0
 800569e:	f04f 0300 	mov.w	r3, #0
 80056a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056a6:	4629      	mov	r1, r5
 80056a8:	028b      	lsls	r3, r1, #10
 80056aa:	4621      	mov	r1, r4
 80056ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056b0:	4621      	mov	r1, r4
 80056b2:	028a      	lsls	r2, r1, #10
 80056b4:	4610      	mov	r0, r2
 80056b6:	4619      	mov	r1, r3
 80056b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ba:	2200      	movs	r2, #0
 80056bc:	60bb      	str	r3, [r7, #8]
 80056be:	60fa      	str	r2, [r7, #12]
 80056c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056c4:	f7fb fa52 	bl	8000b6c <__aeabi_uldivmod>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4613      	mov	r3, r2
 80056ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80056d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <HAL_RCC_GetSysClockFreq+0x180>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	0c1b      	lsrs	r3, r3, #16
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	3301      	adds	r3, #1
 80056dc:	005b      	lsls	r3, r3, #1
 80056de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80056e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056ea:	e002      	b.n	80056f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056ec:	4b05      	ldr	r3, [pc, #20]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x184>)
 80056ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80056f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3740      	adds	r7, #64	@ 0x40
 80056f8:	46bd      	mov	sp, r7
 80056fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056fe:	bf00      	nop
 8005700:	40023800 	.word	0x40023800
 8005704:	00f42400 	.word	0x00f42400
 8005708:	017d7840 	.word	0x017d7840

0800570c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005710:	4b03      	ldr	r3, [pc, #12]	@ (8005720 <HAL_RCC_GetHCLKFreq+0x14>)
 8005712:	681b      	ldr	r3, [r3, #0]
}
 8005714:	4618      	mov	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20000000 	.word	0x20000000

08005724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005728:	f7ff fff0 	bl	800570c <HAL_RCC_GetHCLKFreq>
 800572c:	4602      	mov	r2, r0
 800572e:	4b05      	ldr	r3, [pc, #20]	@ (8005744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	0a9b      	lsrs	r3, r3, #10
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	4903      	ldr	r1, [pc, #12]	@ (8005748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800573a:	5ccb      	ldrb	r3, [r1, r3]
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005740:	4618      	mov	r0, r3
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40023800 	.word	0x40023800
 8005748:	08006ef4 	.word	0x08006ef4

0800574c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e07b      	b.n	8005856 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005762:	2b00      	cmp	r3, #0
 8005764:	d108      	bne.n	8005778 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800576e:	d009      	beq.n	8005784 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	61da      	str	r2, [r3, #28]
 8005776:	e005      	b.n	8005784 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fd f972 	bl	8002a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057f4:	431a      	orrs	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	69db      	ldr	r3, [r3, #28]
 80057fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057fe:	431a      	orrs	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005808:	ea42 0103 	orr.w	r1, r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005810:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	0c1b      	lsrs	r3, r3, #16
 8005822:	f003 0104 	and.w	r1, r3, #4
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	f003 0210 	and.w	r2, r3, #16
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005844:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b088      	sub	sp, #32
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	603b      	str	r3, [r7, #0]
 800586a:	4613      	mov	r3, r2
 800586c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800586e:	f7fd fa8b 	bl	8002d88 <HAL_GetTick>
 8005872:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005874:	88fb      	ldrh	r3, [r7, #6]
 8005876:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800587e:	b2db      	uxtb	r3, r3
 8005880:	2b01      	cmp	r3, #1
 8005882:	d001      	beq.n	8005888 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005884:	2302      	movs	r3, #2
 8005886:	e12a      	b.n	8005ade <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d002      	beq.n	8005894 <HAL_SPI_Transmit+0x36>
 800588e:	88fb      	ldrh	r3, [r7, #6]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e122      	b.n	8005ade <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_SPI_Transmit+0x48>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e11b      	b.n	8005ade <HAL_SPI_Transmit+0x280>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2203      	movs	r2, #3
 80058b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	88fa      	ldrh	r2, [r7, #6]
 80058c6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	88fa      	ldrh	r2, [r7, #6]
 80058cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058f4:	d10f      	bne.n	8005916 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005904:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005914:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005920:	2b40      	cmp	r3, #64	@ 0x40
 8005922:	d007      	beq.n	8005934 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005932:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800593c:	d152      	bne.n	80059e4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_SPI_Transmit+0xee>
 8005946:	8b7b      	ldrh	r3, [r7, #26]
 8005948:	2b01      	cmp	r3, #1
 800594a:	d145      	bne.n	80059d8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005950:	881a      	ldrh	r2, [r3, #0]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595c:	1c9a      	adds	r2, r3, #2
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005966:	b29b      	uxth	r3, r3
 8005968:	3b01      	subs	r3, #1
 800596a:	b29a      	uxth	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005970:	e032      	b.n	80059d8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b02      	cmp	r3, #2
 800597e:	d112      	bne.n	80059a6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005984:	881a      	ldrh	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005990:	1c9a      	adds	r2, r3, #2
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80059a4:	e018      	b.n	80059d8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059a6:	f7fd f9ef 	bl	8002d88 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d803      	bhi.n	80059be <HAL_SPI_Transmit+0x160>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059bc:	d102      	bne.n	80059c4 <HAL_SPI_Transmit+0x166>
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d109      	bne.n	80059d8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e082      	b.n	8005ade <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059dc:	b29b      	uxth	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1c7      	bne.n	8005972 <HAL_SPI_Transmit+0x114>
 80059e2:	e053      	b.n	8005a8c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_SPI_Transmit+0x194>
 80059ec:	8b7b      	ldrh	r3, [r7, #26]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d147      	bne.n	8005a82 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	330c      	adds	r3, #12
 80059fc:	7812      	ldrb	r2, [r2, #0]
 80059fe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a04:	1c5a      	adds	r2, r3, #1
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a18:	e033      	b.n	8005a82 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d113      	bne.n	8005a50 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	330c      	adds	r3, #12
 8005a32:	7812      	ldrb	r2, [r2, #0]
 8005a34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3b01      	subs	r3, #1
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a4e:	e018      	b.n	8005a82 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a50:	f7fd f99a 	bl	8002d88 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d803      	bhi.n	8005a68 <HAL_SPI_Transmit+0x20a>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a66:	d102      	bne.n	8005a6e <HAL_SPI_Transmit+0x210>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d109      	bne.n	8005a82 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e02d      	b.n	8005ade <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1c6      	bne.n	8005a1a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f000 fbd9 	bl	8006248 <SPI_EndRxTxTransaction>
 8005a96:	4603      	mov	r3, r0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2220      	movs	r2, #32
 8005aa0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10a      	bne.n	8005ac0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e000      	b.n	8005ade <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005adc:	2300      	movs	r3, #0
  }
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3720      	adds	r7, #32
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b088      	sub	sp, #32
 8005aea:	af02      	add	r7, sp, #8
 8005aec:	60f8      	str	r0, [r7, #12]
 8005aee:	60b9      	str	r1, [r7, #8]
 8005af0:	603b      	str	r3, [r7, #0]
 8005af2:	4613      	mov	r3, r2
 8005af4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d001      	beq.n	8005b06 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005b02:	2302      	movs	r3, #2
 8005b04:	e104      	b.n	8005d10 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b0e:	d112      	bne.n	8005b36 <HAL_SPI_Receive+0x50>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10e      	bne.n	8005b36 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2204      	movs	r2, #4
 8005b1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b20:	88fa      	ldrh	r2, [r7, #6]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	4613      	mov	r3, r2
 8005b28:	68ba      	ldr	r2, [r7, #8]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f8f3 	bl	8005d18 <HAL_SPI_TransmitReceive>
 8005b32:	4603      	mov	r3, r0
 8005b34:	e0ec      	b.n	8005d10 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b36:	f7fd f927 	bl	8002d88 <HAL_GetTick>
 8005b3a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <HAL_SPI_Receive+0x62>
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d101      	bne.n	8005b4c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e0e1      	b.n	8005d10 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d101      	bne.n	8005b5a <HAL_SPI_Receive+0x74>
 8005b56:	2302      	movs	r3, #2
 8005b58:	e0da      	b.n	8005d10 <HAL_SPI_Receive+0x22a>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2204      	movs	r2, #4
 8005b66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	88fa      	ldrh	r2, [r7, #6]
 8005b7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	88fa      	ldrh	r2, [r7, #6]
 8005b80:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ba8:	d10f      	bne.n	8005bca <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bb8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005bc8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd4:	2b40      	cmp	r3, #64	@ 0x40
 8005bd6:	d007      	beq.n	8005be8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005be6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d170      	bne.n	8005cd2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005bf0:	e035      	b.n	8005c5e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d115      	bne.n	8005c2c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f103 020c 	add.w	r2, r3, #12
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0c:	7812      	ldrb	r2, [r2, #0]
 8005c0e:	b2d2      	uxtb	r2, r2
 8005c10:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c2a:	e018      	b.n	8005c5e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c2c:	f7fd f8ac 	bl	8002d88 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d803      	bhi.n	8005c44 <HAL_SPI_Receive+0x15e>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c42:	d102      	bne.n	8005c4a <HAL_SPI_Receive+0x164>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e058      	b.n	8005d10 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1c4      	bne.n	8005bf2 <HAL_SPI_Receive+0x10c>
 8005c68:	e038      	b.n	8005cdc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d113      	bne.n	8005ca0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c82:	b292      	uxth	r2, r2
 8005c84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8a:	1c9a      	adds	r2, r3, #2
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c9e:	e018      	b.n	8005cd2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ca0:	f7fd f872 	bl	8002d88 <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	683a      	ldr	r2, [r7, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d803      	bhi.n	8005cb8 <HAL_SPI_Receive+0x1d2>
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb6:	d102      	bne.n	8005cbe <HAL_SPI_Receive+0x1d8>
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d109      	bne.n	8005cd2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e01e      	b.n	8005d10 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d1c6      	bne.n	8005c6a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	6839      	ldr	r1, [r7, #0]
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 fa4b 	bl	800617c <SPI_EndRxTransaction>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e000      	b.n	8005d10 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005d0e:	2300      	movs	r3, #0
  }
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08a      	sub	sp, #40	@ 0x28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d26:	2301      	movs	r3, #1
 8005d28:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d2a:	f7fd f82d 	bl	8002d88 <HAL_GetTick>
 8005d2e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d36:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005d3e:	887b      	ldrh	r3, [r7, #2]
 8005d40:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d42:	7ffb      	ldrb	r3, [r7, #31]
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d00c      	beq.n	8005d62 <HAL_SPI_TransmitReceive+0x4a>
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d4e:	d106      	bne.n	8005d5e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d102      	bne.n	8005d5e <HAL_SPI_TransmitReceive+0x46>
 8005d58:	7ffb      	ldrb	r3, [r7, #31]
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	d001      	beq.n	8005d62 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e17f      	b.n	8006062 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_SPI_TransmitReceive+0x5c>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_SPI_TransmitReceive+0x5c>
 8005d6e:	887b      	ldrh	r3, [r7, #2]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e174      	b.n	8006062 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d101      	bne.n	8005d86 <HAL_SPI_TransmitReceive+0x6e>
 8005d82:	2302      	movs	r3, #2
 8005d84:	e16d      	b.n	8006062 <HAL_SPI_TransmitReceive+0x34a>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d003      	beq.n	8005da2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2205      	movs	r2, #5
 8005d9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	887a      	ldrh	r2, [r7, #2]
 8005db2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	887a      	ldrh	r2, [r7, #2]
 8005db8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	887a      	ldrh	r2, [r7, #2]
 8005dc4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	887a      	ldrh	r2, [r7, #2]
 8005dca:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de2:	2b40      	cmp	r3, #64	@ 0x40
 8005de4:	d007      	beq.n	8005df6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005df4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dfe:	d17e      	bne.n	8005efe <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <HAL_SPI_TransmitReceive+0xf6>
 8005e08:	8afb      	ldrh	r3, [r7, #22]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d16c      	bne.n	8005ee8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e12:	881a      	ldrh	r2, [r3, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1e:	1c9a      	adds	r2, r3, #2
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e32:	e059      	b.n	8005ee8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 0302 	and.w	r3, r3, #2
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d11b      	bne.n	8005e7a <HAL_SPI_TransmitReceive+0x162>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d016      	beq.n	8005e7a <HAL_SPI_TransmitReceive+0x162>
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d113      	bne.n	8005e7a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e56:	881a      	ldrh	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e62:	1c9a      	adds	r2, r3, #2
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d119      	bne.n	8005ebc <HAL_SPI_TransmitReceive+0x1a4>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d014      	beq.n	8005ebc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9c:	b292      	uxth	r2, r2
 8005e9e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea4:	1c9a      	adds	r2, r3, #2
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ebc:	f7fc ff64 	bl	8002d88 <HAL_GetTick>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d80d      	bhi.n	8005ee8 <HAL_SPI_TransmitReceive+0x1d0>
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ed2:	d009      	beq.n	8005ee8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e0bc      	b.n	8006062 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1a0      	bne.n	8005e34 <HAL_SPI_TransmitReceive+0x11c>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d19b      	bne.n	8005e34 <HAL_SPI_TransmitReceive+0x11c>
 8005efc:	e082      	b.n	8006004 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <HAL_SPI_TransmitReceive+0x1f4>
 8005f06:	8afb      	ldrh	r3, [r7, #22]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d171      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	330c      	adds	r3, #12
 8005f16:	7812      	ldrb	r2, [r2, #0]
 8005f18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f1e:	1c5a      	adds	r2, r3, #1
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f32:	e05d      	b.n	8005ff0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d11c      	bne.n	8005f7c <HAL_SPI_TransmitReceive+0x264>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d017      	beq.n	8005f7c <HAL_SPI_TransmitReceive+0x264>
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d114      	bne.n	8005f7c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	330c      	adds	r3, #12
 8005f5c:	7812      	ldrb	r2, [r2, #0]
 8005f5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d119      	bne.n	8005fbe <HAL_SPI_TransmitReceive+0x2a6>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d014      	beq.n	8005fbe <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fbe:	f7fc fee3 	bl	8002d88 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	6a3b      	ldr	r3, [r7, #32]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d803      	bhi.n	8005fd6 <HAL_SPI_TransmitReceive+0x2be>
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd4:	d102      	bne.n	8005fdc <HAL_SPI_TransmitReceive+0x2c4>
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d109      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e038      	b.n	8006062 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d19c      	bne.n	8005f34 <HAL_SPI_TransmitReceive+0x21c>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	d197      	bne.n	8005f34 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006004:	6a3a      	ldr	r2, [r7, #32]
 8006006:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f91d 	bl	8006248 <SPI_EndRxTxTransaction>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d008      	beq.n	8006026 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2220      	movs	r2, #32
 8006018:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e01d      	b.n	8006062 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10a      	bne.n	8006044 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800602e:	2300      	movs	r3, #0
 8006030:	613b      	str	r3, [r7, #16]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	613b      	str	r3, [r7, #16]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	613b      	str	r3, [r7, #16]
 8006042:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800605c:	2301      	movs	r3, #1
 800605e:	e000      	b.n	8006062 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006060:	2300      	movs	r3, #0
  }
}
 8006062:	4618      	mov	r0, r3
 8006064:	3728      	adds	r7, #40	@ 0x28
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	4613      	mov	r3, r2
 800607a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800607c:	f7fc fe84 	bl	8002d88 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006084:	1a9b      	subs	r3, r3, r2
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	4413      	add	r3, r2
 800608a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800608c:	f7fc fe7c 	bl	8002d88 <HAL_GetTick>
 8006090:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006092:	4b39      	ldr	r3, [pc, #228]	@ (8006178 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	015b      	lsls	r3, r3, #5
 8006098:	0d1b      	lsrs	r3, r3, #20
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	fb02 f303 	mul.w	r3, r2, r3
 80060a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060a2:	e054      	b.n	800614e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060aa:	d050      	beq.n	800614e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060ac:	f7fc fe6c 	bl	8002d88 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d902      	bls.n	80060c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d13d      	bne.n	800613e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060da:	d111      	bne.n	8006100 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060e4:	d004      	beq.n	80060f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060ee:	d107      	bne.n	8006100 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006104:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006108:	d10f      	bne.n	800612a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006128:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e017      	b.n	800616e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d101      	bne.n	8006148 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	3b01      	subs	r3, #1
 800614c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4013      	ands	r3, r2
 8006158:	68ba      	ldr	r2, [r7, #8]
 800615a:	429a      	cmp	r2, r3
 800615c:	bf0c      	ite	eq
 800615e:	2301      	moveq	r3, #1
 8006160:	2300      	movne	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	461a      	mov	r2, r3
 8006166:	79fb      	ldrb	r3, [r7, #7]
 8006168:	429a      	cmp	r2, r3
 800616a:	d19b      	bne.n	80060a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3720      	adds	r7, #32
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	20000000 	.word	0x20000000

0800617c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af02      	add	r7, sp, #8
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006190:	d111      	bne.n	80061b6 <SPI_EndRxTransaction+0x3a>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800619a:	d004      	beq.n	80061a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061a4:	d107      	bne.n	80061b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061be:	d12a      	bne.n	8006216 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061c8:	d012      	beq.n	80061f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2200      	movs	r2, #0
 80061d2:	2180      	movs	r1, #128	@ 0x80
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	f7ff ff49 	bl	800606c <SPI_WaitFlagStateUntilTimeout>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d02d      	beq.n	800623c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061e4:	f043 0220 	orr.w	r2, r3, #32
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e026      	b.n	800623e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2200      	movs	r2, #0
 80061f8:	2101      	movs	r1, #1
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f7ff ff36 	bl	800606c <SPI_WaitFlagStateUntilTimeout>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d01a      	beq.n	800623c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800620a:	f043 0220 	orr.w	r2, r3, #32
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e013      	b.n	800623e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2200      	movs	r2, #0
 800621e:	2101      	movs	r1, #1
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff ff23 	bl	800606c <SPI_WaitFlagStateUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d007      	beq.n	800623c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006230:	f043 0220 	orr.w	r2, r3, #32
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e000      	b.n	800623e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
	...

08006248 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b088      	sub	sp, #32
 800624c:	af02      	add	r7, sp, #8
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2201      	movs	r2, #1
 800625c:	2102      	movs	r1, #2
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7ff ff04 	bl	800606c <SPI_WaitFlagStateUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d007      	beq.n	800627a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626e:	f043 0220 	orr.w	r2, r3, #32
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e032      	b.n	80062e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800627a:	4b1b      	ldr	r3, [pc, #108]	@ (80062e8 <SPI_EndRxTxTransaction+0xa0>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a1b      	ldr	r2, [pc, #108]	@ (80062ec <SPI_EndRxTxTransaction+0xa4>)
 8006280:	fba2 2303 	umull	r2, r3, r2, r3
 8006284:	0d5b      	lsrs	r3, r3, #21
 8006286:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800628a:	fb02 f303 	mul.w	r3, r2, r3
 800628e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006298:	d112      	bne.n	80062c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	2200      	movs	r2, #0
 80062a2:	2180      	movs	r1, #128	@ 0x80
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f7ff fee1 	bl	800606c <SPI_WaitFlagStateUntilTimeout>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d016      	beq.n	80062de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b4:	f043 0220 	orr.w	r2, r3, #32
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e00f      	b.n	80062e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00a      	beq.n	80062dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d6:	2b80      	cmp	r3, #128	@ 0x80
 80062d8:	d0f2      	beq.n	80062c0 <SPI_EndRxTxTransaction+0x78>
 80062da:	e000      	b.n	80062de <SPI_EndRxTxTransaction+0x96>
        break;
 80062dc:	bf00      	nop
  }

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20000000 	.word	0x20000000
 80062ec:	165e9f81 	.word	0x165e9f81

080062f0 <siprintf>:
 80062f0:	b40e      	push	{r1, r2, r3}
 80062f2:	b510      	push	{r4, lr}
 80062f4:	b09d      	sub	sp, #116	@ 0x74
 80062f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80062f8:	9002      	str	r0, [sp, #8]
 80062fa:	9006      	str	r0, [sp, #24]
 80062fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006300:	480a      	ldr	r0, [pc, #40]	@ (800632c <siprintf+0x3c>)
 8006302:	9107      	str	r1, [sp, #28]
 8006304:	9104      	str	r1, [sp, #16]
 8006306:	490a      	ldr	r1, [pc, #40]	@ (8006330 <siprintf+0x40>)
 8006308:	f853 2b04 	ldr.w	r2, [r3], #4
 800630c:	9105      	str	r1, [sp, #20]
 800630e:	2400      	movs	r4, #0
 8006310:	a902      	add	r1, sp, #8
 8006312:	6800      	ldr	r0, [r0, #0]
 8006314:	9301      	str	r3, [sp, #4]
 8006316:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006318:	f000 f994 	bl	8006644 <_svfiprintf_r>
 800631c:	9b02      	ldr	r3, [sp, #8]
 800631e:	701c      	strb	r4, [r3, #0]
 8006320:	b01d      	add	sp, #116	@ 0x74
 8006322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006326:	b003      	add	sp, #12
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	2000000c 	.word	0x2000000c
 8006330:	ffff0208 	.word	0xffff0208

08006334 <memset>:
 8006334:	4402      	add	r2, r0
 8006336:	4603      	mov	r3, r0
 8006338:	4293      	cmp	r3, r2
 800633a:	d100      	bne.n	800633e <memset+0xa>
 800633c:	4770      	bx	lr
 800633e:	f803 1b01 	strb.w	r1, [r3], #1
 8006342:	e7f9      	b.n	8006338 <memset+0x4>

08006344 <__errno>:
 8006344:	4b01      	ldr	r3, [pc, #4]	@ (800634c <__errno+0x8>)
 8006346:	6818      	ldr	r0, [r3, #0]
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	2000000c 	.word	0x2000000c

08006350 <__libc_init_array>:
 8006350:	b570      	push	{r4, r5, r6, lr}
 8006352:	4d0d      	ldr	r5, [pc, #52]	@ (8006388 <__libc_init_array+0x38>)
 8006354:	4c0d      	ldr	r4, [pc, #52]	@ (800638c <__libc_init_array+0x3c>)
 8006356:	1b64      	subs	r4, r4, r5
 8006358:	10a4      	asrs	r4, r4, #2
 800635a:	2600      	movs	r6, #0
 800635c:	42a6      	cmp	r6, r4
 800635e:	d109      	bne.n	8006374 <__libc_init_array+0x24>
 8006360:	4d0b      	ldr	r5, [pc, #44]	@ (8006390 <__libc_init_array+0x40>)
 8006362:	4c0c      	ldr	r4, [pc, #48]	@ (8006394 <__libc_init_array+0x44>)
 8006364:	f000 fc64 	bl	8006c30 <_init>
 8006368:	1b64      	subs	r4, r4, r5
 800636a:	10a4      	asrs	r4, r4, #2
 800636c:	2600      	movs	r6, #0
 800636e:	42a6      	cmp	r6, r4
 8006370:	d105      	bne.n	800637e <__libc_init_array+0x2e>
 8006372:	bd70      	pop	{r4, r5, r6, pc}
 8006374:	f855 3b04 	ldr.w	r3, [r5], #4
 8006378:	4798      	blx	r3
 800637a:	3601      	adds	r6, #1
 800637c:	e7ee      	b.n	800635c <__libc_init_array+0xc>
 800637e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006382:	4798      	blx	r3
 8006384:	3601      	adds	r6, #1
 8006386:	e7f2      	b.n	800636e <__libc_init_array+0x1e>
 8006388:	08006f38 	.word	0x08006f38
 800638c:	08006f38 	.word	0x08006f38
 8006390:	08006f38 	.word	0x08006f38
 8006394:	08006f3c 	.word	0x08006f3c

08006398 <__retarget_lock_acquire_recursive>:
 8006398:	4770      	bx	lr

0800639a <__retarget_lock_release_recursive>:
 800639a:	4770      	bx	lr

0800639c <_free_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	4605      	mov	r5, r0
 80063a0:	2900      	cmp	r1, #0
 80063a2:	d041      	beq.n	8006428 <_free_r+0x8c>
 80063a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a8:	1f0c      	subs	r4, r1, #4
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	bfb8      	it	lt
 80063ae:	18e4      	addlt	r4, r4, r3
 80063b0:	f000 f8e0 	bl	8006574 <__malloc_lock>
 80063b4:	4a1d      	ldr	r2, [pc, #116]	@ (800642c <_free_r+0x90>)
 80063b6:	6813      	ldr	r3, [r2, #0]
 80063b8:	b933      	cbnz	r3, 80063c8 <_free_r+0x2c>
 80063ba:	6063      	str	r3, [r4, #4]
 80063bc:	6014      	str	r4, [r2, #0]
 80063be:	4628      	mov	r0, r5
 80063c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063c4:	f000 b8dc 	b.w	8006580 <__malloc_unlock>
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	d908      	bls.n	80063de <_free_r+0x42>
 80063cc:	6820      	ldr	r0, [r4, #0]
 80063ce:	1821      	adds	r1, r4, r0
 80063d0:	428b      	cmp	r3, r1
 80063d2:	bf01      	itttt	eq
 80063d4:	6819      	ldreq	r1, [r3, #0]
 80063d6:	685b      	ldreq	r3, [r3, #4]
 80063d8:	1809      	addeq	r1, r1, r0
 80063da:	6021      	streq	r1, [r4, #0]
 80063dc:	e7ed      	b.n	80063ba <_free_r+0x1e>
 80063de:	461a      	mov	r2, r3
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	b10b      	cbz	r3, 80063e8 <_free_r+0x4c>
 80063e4:	42a3      	cmp	r3, r4
 80063e6:	d9fa      	bls.n	80063de <_free_r+0x42>
 80063e8:	6811      	ldr	r1, [r2, #0]
 80063ea:	1850      	adds	r0, r2, r1
 80063ec:	42a0      	cmp	r0, r4
 80063ee:	d10b      	bne.n	8006408 <_free_r+0x6c>
 80063f0:	6820      	ldr	r0, [r4, #0]
 80063f2:	4401      	add	r1, r0
 80063f4:	1850      	adds	r0, r2, r1
 80063f6:	4283      	cmp	r3, r0
 80063f8:	6011      	str	r1, [r2, #0]
 80063fa:	d1e0      	bne.n	80063be <_free_r+0x22>
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	6053      	str	r3, [r2, #4]
 8006402:	4408      	add	r0, r1
 8006404:	6010      	str	r0, [r2, #0]
 8006406:	e7da      	b.n	80063be <_free_r+0x22>
 8006408:	d902      	bls.n	8006410 <_free_r+0x74>
 800640a:	230c      	movs	r3, #12
 800640c:	602b      	str	r3, [r5, #0]
 800640e:	e7d6      	b.n	80063be <_free_r+0x22>
 8006410:	6820      	ldr	r0, [r4, #0]
 8006412:	1821      	adds	r1, r4, r0
 8006414:	428b      	cmp	r3, r1
 8006416:	bf04      	itt	eq
 8006418:	6819      	ldreq	r1, [r3, #0]
 800641a:	685b      	ldreq	r3, [r3, #4]
 800641c:	6063      	str	r3, [r4, #4]
 800641e:	bf04      	itt	eq
 8006420:	1809      	addeq	r1, r1, r0
 8006422:	6021      	streq	r1, [r4, #0]
 8006424:	6054      	str	r4, [r2, #4]
 8006426:	e7ca      	b.n	80063be <_free_r+0x22>
 8006428:	bd38      	pop	{r3, r4, r5, pc}
 800642a:	bf00      	nop
 800642c:	200002b4 	.word	0x200002b4

08006430 <sbrk_aligned>:
 8006430:	b570      	push	{r4, r5, r6, lr}
 8006432:	4e0f      	ldr	r6, [pc, #60]	@ (8006470 <sbrk_aligned+0x40>)
 8006434:	460c      	mov	r4, r1
 8006436:	6831      	ldr	r1, [r6, #0]
 8006438:	4605      	mov	r5, r0
 800643a:	b911      	cbnz	r1, 8006442 <sbrk_aligned+0x12>
 800643c:	f000 fba4 	bl	8006b88 <_sbrk_r>
 8006440:	6030      	str	r0, [r6, #0]
 8006442:	4621      	mov	r1, r4
 8006444:	4628      	mov	r0, r5
 8006446:	f000 fb9f 	bl	8006b88 <_sbrk_r>
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	d103      	bne.n	8006456 <sbrk_aligned+0x26>
 800644e:	f04f 34ff 	mov.w	r4, #4294967295
 8006452:	4620      	mov	r0, r4
 8006454:	bd70      	pop	{r4, r5, r6, pc}
 8006456:	1cc4      	adds	r4, r0, #3
 8006458:	f024 0403 	bic.w	r4, r4, #3
 800645c:	42a0      	cmp	r0, r4
 800645e:	d0f8      	beq.n	8006452 <sbrk_aligned+0x22>
 8006460:	1a21      	subs	r1, r4, r0
 8006462:	4628      	mov	r0, r5
 8006464:	f000 fb90 	bl	8006b88 <_sbrk_r>
 8006468:	3001      	adds	r0, #1
 800646a:	d1f2      	bne.n	8006452 <sbrk_aligned+0x22>
 800646c:	e7ef      	b.n	800644e <sbrk_aligned+0x1e>
 800646e:	bf00      	nop
 8006470:	200002b0 	.word	0x200002b0

08006474 <_malloc_r>:
 8006474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006478:	1ccd      	adds	r5, r1, #3
 800647a:	f025 0503 	bic.w	r5, r5, #3
 800647e:	3508      	adds	r5, #8
 8006480:	2d0c      	cmp	r5, #12
 8006482:	bf38      	it	cc
 8006484:	250c      	movcc	r5, #12
 8006486:	2d00      	cmp	r5, #0
 8006488:	4606      	mov	r6, r0
 800648a:	db01      	blt.n	8006490 <_malloc_r+0x1c>
 800648c:	42a9      	cmp	r1, r5
 800648e:	d904      	bls.n	800649a <_malloc_r+0x26>
 8006490:	230c      	movs	r3, #12
 8006492:	6033      	str	r3, [r6, #0]
 8006494:	2000      	movs	r0, #0
 8006496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800649a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006570 <_malloc_r+0xfc>
 800649e:	f000 f869 	bl	8006574 <__malloc_lock>
 80064a2:	f8d8 3000 	ldr.w	r3, [r8]
 80064a6:	461c      	mov	r4, r3
 80064a8:	bb44      	cbnz	r4, 80064fc <_malloc_r+0x88>
 80064aa:	4629      	mov	r1, r5
 80064ac:	4630      	mov	r0, r6
 80064ae:	f7ff ffbf 	bl	8006430 <sbrk_aligned>
 80064b2:	1c43      	adds	r3, r0, #1
 80064b4:	4604      	mov	r4, r0
 80064b6:	d158      	bne.n	800656a <_malloc_r+0xf6>
 80064b8:	f8d8 4000 	ldr.w	r4, [r8]
 80064bc:	4627      	mov	r7, r4
 80064be:	2f00      	cmp	r7, #0
 80064c0:	d143      	bne.n	800654a <_malloc_r+0xd6>
 80064c2:	2c00      	cmp	r4, #0
 80064c4:	d04b      	beq.n	800655e <_malloc_r+0xea>
 80064c6:	6823      	ldr	r3, [r4, #0]
 80064c8:	4639      	mov	r1, r7
 80064ca:	4630      	mov	r0, r6
 80064cc:	eb04 0903 	add.w	r9, r4, r3
 80064d0:	f000 fb5a 	bl	8006b88 <_sbrk_r>
 80064d4:	4581      	cmp	r9, r0
 80064d6:	d142      	bne.n	800655e <_malloc_r+0xea>
 80064d8:	6821      	ldr	r1, [r4, #0]
 80064da:	1a6d      	subs	r5, r5, r1
 80064dc:	4629      	mov	r1, r5
 80064de:	4630      	mov	r0, r6
 80064e0:	f7ff ffa6 	bl	8006430 <sbrk_aligned>
 80064e4:	3001      	adds	r0, #1
 80064e6:	d03a      	beq.n	800655e <_malloc_r+0xea>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	442b      	add	r3, r5
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	f8d8 3000 	ldr.w	r3, [r8]
 80064f2:	685a      	ldr	r2, [r3, #4]
 80064f4:	bb62      	cbnz	r2, 8006550 <_malloc_r+0xdc>
 80064f6:	f8c8 7000 	str.w	r7, [r8]
 80064fa:	e00f      	b.n	800651c <_malloc_r+0xa8>
 80064fc:	6822      	ldr	r2, [r4, #0]
 80064fe:	1b52      	subs	r2, r2, r5
 8006500:	d420      	bmi.n	8006544 <_malloc_r+0xd0>
 8006502:	2a0b      	cmp	r2, #11
 8006504:	d917      	bls.n	8006536 <_malloc_r+0xc2>
 8006506:	1961      	adds	r1, r4, r5
 8006508:	42a3      	cmp	r3, r4
 800650a:	6025      	str	r5, [r4, #0]
 800650c:	bf18      	it	ne
 800650e:	6059      	strne	r1, [r3, #4]
 8006510:	6863      	ldr	r3, [r4, #4]
 8006512:	bf08      	it	eq
 8006514:	f8c8 1000 	streq.w	r1, [r8]
 8006518:	5162      	str	r2, [r4, r5]
 800651a:	604b      	str	r3, [r1, #4]
 800651c:	4630      	mov	r0, r6
 800651e:	f000 f82f 	bl	8006580 <__malloc_unlock>
 8006522:	f104 000b 	add.w	r0, r4, #11
 8006526:	1d23      	adds	r3, r4, #4
 8006528:	f020 0007 	bic.w	r0, r0, #7
 800652c:	1ac2      	subs	r2, r0, r3
 800652e:	bf1c      	itt	ne
 8006530:	1a1b      	subne	r3, r3, r0
 8006532:	50a3      	strne	r3, [r4, r2]
 8006534:	e7af      	b.n	8006496 <_malloc_r+0x22>
 8006536:	6862      	ldr	r2, [r4, #4]
 8006538:	42a3      	cmp	r3, r4
 800653a:	bf0c      	ite	eq
 800653c:	f8c8 2000 	streq.w	r2, [r8]
 8006540:	605a      	strne	r2, [r3, #4]
 8006542:	e7eb      	b.n	800651c <_malloc_r+0xa8>
 8006544:	4623      	mov	r3, r4
 8006546:	6864      	ldr	r4, [r4, #4]
 8006548:	e7ae      	b.n	80064a8 <_malloc_r+0x34>
 800654a:	463c      	mov	r4, r7
 800654c:	687f      	ldr	r7, [r7, #4]
 800654e:	e7b6      	b.n	80064be <_malloc_r+0x4a>
 8006550:	461a      	mov	r2, r3
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	42a3      	cmp	r3, r4
 8006556:	d1fb      	bne.n	8006550 <_malloc_r+0xdc>
 8006558:	2300      	movs	r3, #0
 800655a:	6053      	str	r3, [r2, #4]
 800655c:	e7de      	b.n	800651c <_malloc_r+0xa8>
 800655e:	230c      	movs	r3, #12
 8006560:	6033      	str	r3, [r6, #0]
 8006562:	4630      	mov	r0, r6
 8006564:	f000 f80c 	bl	8006580 <__malloc_unlock>
 8006568:	e794      	b.n	8006494 <_malloc_r+0x20>
 800656a:	6005      	str	r5, [r0, #0]
 800656c:	e7d6      	b.n	800651c <_malloc_r+0xa8>
 800656e:	bf00      	nop
 8006570:	200002b4 	.word	0x200002b4

08006574 <__malloc_lock>:
 8006574:	4801      	ldr	r0, [pc, #4]	@ (800657c <__malloc_lock+0x8>)
 8006576:	f7ff bf0f 	b.w	8006398 <__retarget_lock_acquire_recursive>
 800657a:	bf00      	nop
 800657c:	200002ac 	.word	0x200002ac

08006580 <__malloc_unlock>:
 8006580:	4801      	ldr	r0, [pc, #4]	@ (8006588 <__malloc_unlock+0x8>)
 8006582:	f7ff bf0a 	b.w	800639a <__retarget_lock_release_recursive>
 8006586:	bf00      	nop
 8006588:	200002ac 	.word	0x200002ac

0800658c <__ssputs_r>:
 800658c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006590:	688e      	ldr	r6, [r1, #8]
 8006592:	461f      	mov	r7, r3
 8006594:	42be      	cmp	r6, r7
 8006596:	680b      	ldr	r3, [r1, #0]
 8006598:	4682      	mov	sl, r0
 800659a:	460c      	mov	r4, r1
 800659c:	4690      	mov	r8, r2
 800659e:	d82d      	bhi.n	80065fc <__ssputs_r+0x70>
 80065a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065a8:	d026      	beq.n	80065f8 <__ssputs_r+0x6c>
 80065aa:	6965      	ldr	r5, [r4, #20]
 80065ac:	6909      	ldr	r1, [r1, #16]
 80065ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065b2:	eba3 0901 	sub.w	r9, r3, r1
 80065b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065ba:	1c7b      	adds	r3, r7, #1
 80065bc:	444b      	add	r3, r9
 80065be:	106d      	asrs	r5, r5, #1
 80065c0:	429d      	cmp	r5, r3
 80065c2:	bf38      	it	cc
 80065c4:	461d      	movcc	r5, r3
 80065c6:	0553      	lsls	r3, r2, #21
 80065c8:	d527      	bpl.n	800661a <__ssputs_r+0x8e>
 80065ca:	4629      	mov	r1, r5
 80065cc:	f7ff ff52 	bl	8006474 <_malloc_r>
 80065d0:	4606      	mov	r6, r0
 80065d2:	b360      	cbz	r0, 800662e <__ssputs_r+0xa2>
 80065d4:	6921      	ldr	r1, [r4, #16]
 80065d6:	464a      	mov	r2, r9
 80065d8:	f000 fae6 	bl	8006ba8 <memcpy>
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80065e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e6:	81a3      	strh	r3, [r4, #12]
 80065e8:	6126      	str	r6, [r4, #16]
 80065ea:	6165      	str	r5, [r4, #20]
 80065ec:	444e      	add	r6, r9
 80065ee:	eba5 0509 	sub.w	r5, r5, r9
 80065f2:	6026      	str	r6, [r4, #0]
 80065f4:	60a5      	str	r5, [r4, #8]
 80065f6:	463e      	mov	r6, r7
 80065f8:	42be      	cmp	r6, r7
 80065fa:	d900      	bls.n	80065fe <__ssputs_r+0x72>
 80065fc:	463e      	mov	r6, r7
 80065fe:	6820      	ldr	r0, [r4, #0]
 8006600:	4632      	mov	r2, r6
 8006602:	4641      	mov	r1, r8
 8006604:	f000 faa6 	bl	8006b54 <memmove>
 8006608:	68a3      	ldr	r3, [r4, #8]
 800660a:	1b9b      	subs	r3, r3, r6
 800660c:	60a3      	str	r3, [r4, #8]
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	4433      	add	r3, r6
 8006612:	6023      	str	r3, [r4, #0]
 8006614:	2000      	movs	r0, #0
 8006616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800661a:	462a      	mov	r2, r5
 800661c:	f000 fad2 	bl	8006bc4 <_realloc_r>
 8006620:	4606      	mov	r6, r0
 8006622:	2800      	cmp	r0, #0
 8006624:	d1e0      	bne.n	80065e8 <__ssputs_r+0x5c>
 8006626:	6921      	ldr	r1, [r4, #16]
 8006628:	4650      	mov	r0, sl
 800662a:	f7ff feb7 	bl	800639c <_free_r>
 800662e:	230c      	movs	r3, #12
 8006630:	f8ca 3000 	str.w	r3, [sl]
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800663a:	81a3      	strh	r3, [r4, #12]
 800663c:	f04f 30ff 	mov.w	r0, #4294967295
 8006640:	e7e9      	b.n	8006616 <__ssputs_r+0x8a>
	...

08006644 <_svfiprintf_r>:
 8006644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006648:	4698      	mov	r8, r3
 800664a:	898b      	ldrh	r3, [r1, #12]
 800664c:	061b      	lsls	r3, r3, #24
 800664e:	b09d      	sub	sp, #116	@ 0x74
 8006650:	4607      	mov	r7, r0
 8006652:	460d      	mov	r5, r1
 8006654:	4614      	mov	r4, r2
 8006656:	d510      	bpl.n	800667a <_svfiprintf_r+0x36>
 8006658:	690b      	ldr	r3, [r1, #16]
 800665a:	b973      	cbnz	r3, 800667a <_svfiprintf_r+0x36>
 800665c:	2140      	movs	r1, #64	@ 0x40
 800665e:	f7ff ff09 	bl	8006474 <_malloc_r>
 8006662:	6028      	str	r0, [r5, #0]
 8006664:	6128      	str	r0, [r5, #16]
 8006666:	b930      	cbnz	r0, 8006676 <_svfiprintf_r+0x32>
 8006668:	230c      	movs	r3, #12
 800666a:	603b      	str	r3, [r7, #0]
 800666c:	f04f 30ff 	mov.w	r0, #4294967295
 8006670:	b01d      	add	sp, #116	@ 0x74
 8006672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006676:	2340      	movs	r3, #64	@ 0x40
 8006678:	616b      	str	r3, [r5, #20]
 800667a:	2300      	movs	r3, #0
 800667c:	9309      	str	r3, [sp, #36]	@ 0x24
 800667e:	2320      	movs	r3, #32
 8006680:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006684:	f8cd 800c 	str.w	r8, [sp, #12]
 8006688:	2330      	movs	r3, #48	@ 0x30
 800668a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006828 <_svfiprintf_r+0x1e4>
 800668e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006692:	f04f 0901 	mov.w	r9, #1
 8006696:	4623      	mov	r3, r4
 8006698:	469a      	mov	sl, r3
 800669a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800669e:	b10a      	cbz	r2, 80066a4 <_svfiprintf_r+0x60>
 80066a0:	2a25      	cmp	r2, #37	@ 0x25
 80066a2:	d1f9      	bne.n	8006698 <_svfiprintf_r+0x54>
 80066a4:	ebba 0b04 	subs.w	fp, sl, r4
 80066a8:	d00b      	beq.n	80066c2 <_svfiprintf_r+0x7e>
 80066aa:	465b      	mov	r3, fp
 80066ac:	4622      	mov	r2, r4
 80066ae:	4629      	mov	r1, r5
 80066b0:	4638      	mov	r0, r7
 80066b2:	f7ff ff6b 	bl	800658c <__ssputs_r>
 80066b6:	3001      	adds	r0, #1
 80066b8:	f000 80a7 	beq.w	800680a <_svfiprintf_r+0x1c6>
 80066bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066be:	445a      	add	r2, fp
 80066c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80066c2:	f89a 3000 	ldrb.w	r3, [sl]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 809f 	beq.w	800680a <_svfiprintf_r+0x1c6>
 80066cc:	2300      	movs	r3, #0
 80066ce:	f04f 32ff 	mov.w	r2, #4294967295
 80066d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066d6:	f10a 0a01 	add.w	sl, sl, #1
 80066da:	9304      	str	r3, [sp, #16]
 80066dc:	9307      	str	r3, [sp, #28]
 80066de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80066e4:	4654      	mov	r4, sl
 80066e6:	2205      	movs	r2, #5
 80066e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ec:	484e      	ldr	r0, [pc, #312]	@ (8006828 <_svfiprintf_r+0x1e4>)
 80066ee:	f7f9 fd77 	bl	80001e0 <memchr>
 80066f2:	9a04      	ldr	r2, [sp, #16]
 80066f4:	b9d8      	cbnz	r0, 800672e <_svfiprintf_r+0xea>
 80066f6:	06d0      	lsls	r0, r2, #27
 80066f8:	bf44      	itt	mi
 80066fa:	2320      	movmi	r3, #32
 80066fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006700:	0711      	lsls	r1, r2, #28
 8006702:	bf44      	itt	mi
 8006704:	232b      	movmi	r3, #43	@ 0x2b
 8006706:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800670a:	f89a 3000 	ldrb.w	r3, [sl]
 800670e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006710:	d015      	beq.n	800673e <_svfiprintf_r+0xfa>
 8006712:	9a07      	ldr	r2, [sp, #28]
 8006714:	4654      	mov	r4, sl
 8006716:	2000      	movs	r0, #0
 8006718:	f04f 0c0a 	mov.w	ip, #10
 800671c:	4621      	mov	r1, r4
 800671e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006722:	3b30      	subs	r3, #48	@ 0x30
 8006724:	2b09      	cmp	r3, #9
 8006726:	d94b      	bls.n	80067c0 <_svfiprintf_r+0x17c>
 8006728:	b1b0      	cbz	r0, 8006758 <_svfiprintf_r+0x114>
 800672a:	9207      	str	r2, [sp, #28]
 800672c:	e014      	b.n	8006758 <_svfiprintf_r+0x114>
 800672e:	eba0 0308 	sub.w	r3, r0, r8
 8006732:	fa09 f303 	lsl.w	r3, r9, r3
 8006736:	4313      	orrs	r3, r2
 8006738:	9304      	str	r3, [sp, #16]
 800673a:	46a2      	mov	sl, r4
 800673c:	e7d2      	b.n	80066e4 <_svfiprintf_r+0xa0>
 800673e:	9b03      	ldr	r3, [sp, #12]
 8006740:	1d19      	adds	r1, r3, #4
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	9103      	str	r1, [sp, #12]
 8006746:	2b00      	cmp	r3, #0
 8006748:	bfbb      	ittet	lt
 800674a:	425b      	neglt	r3, r3
 800674c:	f042 0202 	orrlt.w	r2, r2, #2
 8006750:	9307      	strge	r3, [sp, #28]
 8006752:	9307      	strlt	r3, [sp, #28]
 8006754:	bfb8      	it	lt
 8006756:	9204      	strlt	r2, [sp, #16]
 8006758:	7823      	ldrb	r3, [r4, #0]
 800675a:	2b2e      	cmp	r3, #46	@ 0x2e
 800675c:	d10a      	bne.n	8006774 <_svfiprintf_r+0x130>
 800675e:	7863      	ldrb	r3, [r4, #1]
 8006760:	2b2a      	cmp	r3, #42	@ 0x2a
 8006762:	d132      	bne.n	80067ca <_svfiprintf_r+0x186>
 8006764:	9b03      	ldr	r3, [sp, #12]
 8006766:	1d1a      	adds	r2, r3, #4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	9203      	str	r2, [sp, #12]
 800676c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006770:	3402      	adds	r4, #2
 8006772:	9305      	str	r3, [sp, #20]
 8006774:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006838 <_svfiprintf_r+0x1f4>
 8006778:	7821      	ldrb	r1, [r4, #0]
 800677a:	2203      	movs	r2, #3
 800677c:	4650      	mov	r0, sl
 800677e:	f7f9 fd2f 	bl	80001e0 <memchr>
 8006782:	b138      	cbz	r0, 8006794 <_svfiprintf_r+0x150>
 8006784:	9b04      	ldr	r3, [sp, #16]
 8006786:	eba0 000a 	sub.w	r0, r0, sl
 800678a:	2240      	movs	r2, #64	@ 0x40
 800678c:	4082      	lsls	r2, r0
 800678e:	4313      	orrs	r3, r2
 8006790:	3401      	adds	r4, #1
 8006792:	9304      	str	r3, [sp, #16]
 8006794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006798:	4824      	ldr	r0, [pc, #144]	@ (800682c <_svfiprintf_r+0x1e8>)
 800679a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800679e:	2206      	movs	r2, #6
 80067a0:	f7f9 fd1e 	bl	80001e0 <memchr>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	d036      	beq.n	8006816 <_svfiprintf_r+0x1d2>
 80067a8:	4b21      	ldr	r3, [pc, #132]	@ (8006830 <_svfiprintf_r+0x1ec>)
 80067aa:	bb1b      	cbnz	r3, 80067f4 <_svfiprintf_r+0x1b0>
 80067ac:	9b03      	ldr	r3, [sp, #12]
 80067ae:	3307      	adds	r3, #7
 80067b0:	f023 0307 	bic.w	r3, r3, #7
 80067b4:	3308      	adds	r3, #8
 80067b6:	9303      	str	r3, [sp, #12]
 80067b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ba:	4433      	add	r3, r6
 80067bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80067be:	e76a      	b.n	8006696 <_svfiprintf_r+0x52>
 80067c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80067c4:	460c      	mov	r4, r1
 80067c6:	2001      	movs	r0, #1
 80067c8:	e7a8      	b.n	800671c <_svfiprintf_r+0xd8>
 80067ca:	2300      	movs	r3, #0
 80067cc:	3401      	adds	r4, #1
 80067ce:	9305      	str	r3, [sp, #20]
 80067d0:	4619      	mov	r1, r3
 80067d2:	f04f 0c0a 	mov.w	ip, #10
 80067d6:	4620      	mov	r0, r4
 80067d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067dc:	3a30      	subs	r2, #48	@ 0x30
 80067de:	2a09      	cmp	r2, #9
 80067e0:	d903      	bls.n	80067ea <_svfiprintf_r+0x1a6>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0c6      	beq.n	8006774 <_svfiprintf_r+0x130>
 80067e6:	9105      	str	r1, [sp, #20]
 80067e8:	e7c4      	b.n	8006774 <_svfiprintf_r+0x130>
 80067ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80067ee:	4604      	mov	r4, r0
 80067f0:	2301      	movs	r3, #1
 80067f2:	e7f0      	b.n	80067d6 <_svfiprintf_r+0x192>
 80067f4:	ab03      	add	r3, sp, #12
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	462a      	mov	r2, r5
 80067fa:	4b0e      	ldr	r3, [pc, #56]	@ (8006834 <_svfiprintf_r+0x1f0>)
 80067fc:	a904      	add	r1, sp, #16
 80067fe:	4638      	mov	r0, r7
 8006800:	f3af 8000 	nop.w
 8006804:	1c42      	adds	r2, r0, #1
 8006806:	4606      	mov	r6, r0
 8006808:	d1d6      	bne.n	80067b8 <_svfiprintf_r+0x174>
 800680a:	89ab      	ldrh	r3, [r5, #12]
 800680c:	065b      	lsls	r3, r3, #25
 800680e:	f53f af2d 	bmi.w	800666c <_svfiprintf_r+0x28>
 8006812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006814:	e72c      	b.n	8006670 <_svfiprintf_r+0x2c>
 8006816:	ab03      	add	r3, sp, #12
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	462a      	mov	r2, r5
 800681c:	4b05      	ldr	r3, [pc, #20]	@ (8006834 <_svfiprintf_r+0x1f0>)
 800681e:	a904      	add	r1, sp, #16
 8006820:	4638      	mov	r0, r7
 8006822:	f000 f879 	bl	8006918 <_printf_i>
 8006826:	e7ed      	b.n	8006804 <_svfiprintf_r+0x1c0>
 8006828:	08006efc 	.word	0x08006efc
 800682c:	08006f06 	.word	0x08006f06
 8006830:	00000000 	.word	0x00000000
 8006834:	0800658d 	.word	0x0800658d
 8006838:	08006f02 	.word	0x08006f02

0800683c <_printf_common>:
 800683c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006840:	4616      	mov	r6, r2
 8006842:	4698      	mov	r8, r3
 8006844:	688a      	ldr	r2, [r1, #8]
 8006846:	690b      	ldr	r3, [r1, #16]
 8006848:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800684c:	4293      	cmp	r3, r2
 800684e:	bfb8      	it	lt
 8006850:	4613      	movlt	r3, r2
 8006852:	6033      	str	r3, [r6, #0]
 8006854:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006858:	4607      	mov	r7, r0
 800685a:	460c      	mov	r4, r1
 800685c:	b10a      	cbz	r2, 8006862 <_printf_common+0x26>
 800685e:	3301      	adds	r3, #1
 8006860:	6033      	str	r3, [r6, #0]
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	0699      	lsls	r1, r3, #26
 8006866:	bf42      	ittt	mi
 8006868:	6833      	ldrmi	r3, [r6, #0]
 800686a:	3302      	addmi	r3, #2
 800686c:	6033      	strmi	r3, [r6, #0]
 800686e:	6825      	ldr	r5, [r4, #0]
 8006870:	f015 0506 	ands.w	r5, r5, #6
 8006874:	d106      	bne.n	8006884 <_printf_common+0x48>
 8006876:	f104 0a19 	add.w	sl, r4, #25
 800687a:	68e3      	ldr	r3, [r4, #12]
 800687c:	6832      	ldr	r2, [r6, #0]
 800687e:	1a9b      	subs	r3, r3, r2
 8006880:	42ab      	cmp	r3, r5
 8006882:	dc26      	bgt.n	80068d2 <_printf_common+0x96>
 8006884:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006888:	6822      	ldr	r2, [r4, #0]
 800688a:	3b00      	subs	r3, #0
 800688c:	bf18      	it	ne
 800688e:	2301      	movne	r3, #1
 8006890:	0692      	lsls	r2, r2, #26
 8006892:	d42b      	bmi.n	80068ec <_printf_common+0xb0>
 8006894:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006898:	4641      	mov	r1, r8
 800689a:	4638      	mov	r0, r7
 800689c:	47c8      	blx	r9
 800689e:	3001      	adds	r0, #1
 80068a0:	d01e      	beq.n	80068e0 <_printf_common+0xa4>
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	6922      	ldr	r2, [r4, #16]
 80068a6:	f003 0306 	and.w	r3, r3, #6
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	bf02      	ittt	eq
 80068ae:	68e5      	ldreq	r5, [r4, #12]
 80068b0:	6833      	ldreq	r3, [r6, #0]
 80068b2:	1aed      	subeq	r5, r5, r3
 80068b4:	68a3      	ldr	r3, [r4, #8]
 80068b6:	bf0c      	ite	eq
 80068b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068bc:	2500      	movne	r5, #0
 80068be:	4293      	cmp	r3, r2
 80068c0:	bfc4      	itt	gt
 80068c2:	1a9b      	subgt	r3, r3, r2
 80068c4:	18ed      	addgt	r5, r5, r3
 80068c6:	2600      	movs	r6, #0
 80068c8:	341a      	adds	r4, #26
 80068ca:	42b5      	cmp	r5, r6
 80068cc:	d11a      	bne.n	8006904 <_printf_common+0xc8>
 80068ce:	2000      	movs	r0, #0
 80068d0:	e008      	b.n	80068e4 <_printf_common+0xa8>
 80068d2:	2301      	movs	r3, #1
 80068d4:	4652      	mov	r2, sl
 80068d6:	4641      	mov	r1, r8
 80068d8:	4638      	mov	r0, r7
 80068da:	47c8      	blx	r9
 80068dc:	3001      	adds	r0, #1
 80068de:	d103      	bne.n	80068e8 <_printf_common+0xac>
 80068e0:	f04f 30ff 	mov.w	r0, #4294967295
 80068e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e8:	3501      	adds	r5, #1
 80068ea:	e7c6      	b.n	800687a <_printf_common+0x3e>
 80068ec:	18e1      	adds	r1, r4, r3
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	2030      	movs	r0, #48	@ 0x30
 80068f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068f6:	4422      	add	r2, r4
 80068f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006900:	3302      	adds	r3, #2
 8006902:	e7c7      	b.n	8006894 <_printf_common+0x58>
 8006904:	2301      	movs	r3, #1
 8006906:	4622      	mov	r2, r4
 8006908:	4641      	mov	r1, r8
 800690a:	4638      	mov	r0, r7
 800690c:	47c8      	blx	r9
 800690e:	3001      	adds	r0, #1
 8006910:	d0e6      	beq.n	80068e0 <_printf_common+0xa4>
 8006912:	3601      	adds	r6, #1
 8006914:	e7d9      	b.n	80068ca <_printf_common+0x8e>
	...

08006918 <_printf_i>:
 8006918:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800691c:	7e0f      	ldrb	r7, [r1, #24]
 800691e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006920:	2f78      	cmp	r7, #120	@ 0x78
 8006922:	4691      	mov	r9, r2
 8006924:	4680      	mov	r8, r0
 8006926:	460c      	mov	r4, r1
 8006928:	469a      	mov	sl, r3
 800692a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800692e:	d807      	bhi.n	8006940 <_printf_i+0x28>
 8006930:	2f62      	cmp	r7, #98	@ 0x62
 8006932:	d80a      	bhi.n	800694a <_printf_i+0x32>
 8006934:	2f00      	cmp	r7, #0
 8006936:	f000 80d1 	beq.w	8006adc <_printf_i+0x1c4>
 800693a:	2f58      	cmp	r7, #88	@ 0x58
 800693c:	f000 80b8 	beq.w	8006ab0 <_printf_i+0x198>
 8006940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006944:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006948:	e03a      	b.n	80069c0 <_printf_i+0xa8>
 800694a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800694e:	2b15      	cmp	r3, #21
 8006950:	d8f6      	bhi.n	8006940 <_printf_i+0x28>
 8006952:	a101      	add	r1, pc, #4	@ (adr r1, 8006958 <_printf_i+0x40>)
 8006954:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006958:	080069b1 	.word	0x080069b1
 800695c:	080069c5 	.word	0x080069c5
 8006960:	08006941 	.word	0x08006941
 8006964:	08006941 	.word	0x08006941
 8006968:	08006941 	.word	0x08006941
 800696c:	08006941 	.word	0x08006941
 8006970:	080069c5 	.word	0x080069c5
 8006974:	08006941 	.word	0x08006941
 8006978:	08006941 	.word	0x08006941
 800697c:	08006941 	.word	0x08006941
 8006980:	08006941 	.word	0x08006941
 8006984:	08006ac3 	.word	0x08006ac3
 8006988:	080069ef 	.word	0x080069ef
 800698c:	08006a7d 	.word	0x08006a7d
 8006990:	08006941 	.word	0x08006941
 8006994:	08006941 	.word	0x08006941
 8006998:	08006ae5 	.word	0x08006ae5
 800699c:	08006941 	.word	0x08006941
 80069a0:	080069ef 	.word	0x080069ef
 80069a4:	08006941 	.word	0x08006941
 80069a8:	08006941 	.word	0x08006941
 80069ac:	08006a85 	.word	0x08006a85
 80069b0:	6833      	ldr	r3, [r6, #0]
 80069b2:	1d1a      	adds	r2, r3, #4
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6032      	str	r2, [r6, #0]
 80069b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069c0:	2301      	movs	r3, #1
 80069c2:	e09c      	b.n	8006afe <_printf_i+0x1e6>
 80069c4:	6833      	ldr	r3, [r6, #0]
 80069c6:	6820      	ldr	r0, [r4, #0]
 80069c8:	1d19      	adds	r1, r3, #4
 80069ca:	6031      	str	r1, [r6, #0]
 80069cc:	0606      	lsls	r6, r0, #24
 80069ce:	d501      	bpl.n	80069d4 <_printf_i+0xbc>
 80069d0:	681d      	ldr	r5, [r3, #0]
 80069d2:	e003      	b.n	80069dc <_printf_i+0xc4>
 80069d4:	0645      	lsls	r5, r0, #25
 80069d6:	d5fb      	bpl.n	80069d0 <_printf_i+0xb8>
 80069d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069dc:	2d00      	cmp	r5, #0
 80069de:	da03      	bge.n	80069e8 <_printf_i+0xd0>
 80069e0:	232d      	movs	r3, #45	@ 0x2d
 80069e2:	426d      	negs	r5, r5
 80069e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069e8:	4858      	ldr	r0, [pc, #352]	@ (8006b4c <_printf_i+0x234>)
 80069ea:	230a      	movs	r3, #10
 80069ec:	e011      	b.n	8006a12 <_printf_i+0xfa>
 80069ee:	6821      	ldr	r1, [r4, #0]
 80069f0:	6833      	ldr	r3, [r6, #0]
 80069f2:	0608      	lsls	r0, r1, #24
 80069f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80069f8:	d402      	bmi.n	8006a00 <_printf_i+0xe8>
 80069fa:	0649      	lsls	r1, r1, #25
 80069fc:	bf48      	it	mi
 80069fe:	b2ad      	uxthmi	r5, r5
 8006a00:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a02:	4852      	ldr	r0, [pc, #328]	@ (8006b4c <_printf_i+0x234>)
 8006a04:	6033      	str	r3, [r6, #0]
 8006a06:	bf14      	ite	ne
 8006a08:	230a      	movne	r3, #10
 8006a0a:	2308      	moveq	r3, #8
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a12:	6866      	ldr	r6, [r4, #4]
 8006a14:	60a6      	str	r6, [r4, #8]
 8006a16:	2e00      	cmp	r6, #0
 8006a18:	db05      	blt.n	8006a26 <_printf_i+0x10e>
 8006a1a:	6821      	ldr	r1, [r4, #0]
 8006a1c:	432e      	orrs	r6, r5
 8006a1e:	f021 0104 	bic.w	r1, r1, #4
 8006a22:	6021      	str	r1, [r4, #0]
 8006a24:	d04b      	beq.n	8006abe <_printf_i+0x1a6>
 8006a26:	4616      	mov	r6, r2
 8006a28:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a2c:	fb03 5711 	mls	r7, r3, r1, r5
 8006a30:	5dc7      	ldrb	r7, [r0, r7]
 8006a32:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a36:	462f      	mov	r7, r5
 8006a38:	42bb      	cmp	r3, r7
 8006a3a:	460d      	mov	r5, r1
 8006a3c:	d9f4      	bls.n	8006a28 <_printf_i+0x110>
 8006a3e:	2b08      	cmp	r3, #8
 8006a40:	d10b      	bne.n	8006a5a <_printf_i+0x142>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	07df      	lsls	r7, r3, #31
 8006a46:	d508      	bpl.n	8006a5a <_printf_i+0x142>
 8006a48:	6923      	ldr	r3, [r4, #16]
 8006a4a:	6861      	ldr	r1, [r4, #4]
 8006a4c:	4299      	cmp	r1, r3
 8006a4e:	bfde      	ittt	le
 8006a50:	2330      	movle	r3, #48	@ 0x30
 8006a52:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a56:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a5a:	1b92      	subs	r2, r2, r6
 8006a5c:	6122      	str	r2, [r4, #16]
 8006a5e:	f8cd a000 	str.w	sl, [sp]
 8006a62:	464b      	mov	r3, r9
 8006a64:	aa03      	add	r2, sp, #12
 8006a66:	4621      	mov	r1, r4
 8006a68:	4640      	mov	r0, r8
 8006a6a:	f7ff fee7 	bl	800683c <_printf_common>
 8006a6e:	3001      	adds	r0, #1
 8006a70:	d14a      	bne.n	8006b08 <_printf_i+0x1f0>
 8006a72:	f04f 30ff 	mov.w	r0, #4294967295
 8006a76:	b004      	add	sp, #16
 8006a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a7c:	6823      	ldr	r3, [r4, #0]
 8006a7e:	f043 0320 	orr.w	r3, r3, #32
 8006a82:	6023      	str	r3, [r4, #0]
 8006a84:	4832      	ldr	r0, [pc, #200]	@ (8006b50 <_printf_i+0x238>)
 8006a86:	2778      	movs	r7, #120	@ 0x78
 8006a88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	6831      	ldr	r1, [r6, #0]
 8006a90:	061f      	lsls	r7, r3, #24
 8006a92:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a96:	d402      	bmi.n	8006a9e <_printf_i+0x186>
 8006a98:	065f      	lsls	r7, r3, #25
 8006a9a:	bf48      	it	mi
 8006a9c:	b2ad      	uxthmi	r5, r5
 8006a9e:	6031      	str	r1, [r6, #0]
 8006aa0:	07d9      	lsls	r1, r3, #31
 8006aa2:	bf44      	itt	mi
 8006aa4:	f043 0320 	orrmi.w	r3, r3, #32
 8006aa8:	6023      	strmi	r3, [r4, #0]
 8006aaa:	b11d      	cbz	r5, 8006ab4 <_printf_i+0x19c>
 8006aac:	2310      	movs	r3, #16
 8006aae:	e7ad      	b.n	8006a0c <_printf_i+0xf4>
 8006ab0:	4826      	ldr	r0, [pc, #152]	@ (8006b4c <_printf_i+0x234>)
 8006ab2:	e7e9      	b.n	8006a88 <_printf_i+0x170>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	f023 0320 	bic.w	r3, r3, #32
 8006aba:	6023      	str	r3, [r4, #0]
 8006abc:	e7f6      	b.n	8006aac <_printf_i+0x194>
 8006abe:	4616      	mov	r6, r2
 8006ac0:	e7bd      	b.n	8006a3e <_printf_i+0x126>
 8006ac2:	6833      	ldr	r3, [r6, #0]
 8006ac4:	6825      	ldr	r5, [r4, #0]
 8006ac6:	6961      	ldr	r1, [r4, #20]
 8006ac8:	1d18      	adds	r0, r3, #4
 8006aca:	6030      	str	r0, [r6, #0]
 8006acc:	062e      	lsls	r6, r5, #24
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	d501      	bpl.n	8006ad6 <_printf_i+0x1be>
 8006ad2:	6019      	str	r1, [r3, #0]
 8006ad4:	e002      	b.n	8006adc <_printf_i+0x1c4>
 8006ad6:	0668      	lsls	r0, r5, #25
 8006ad8:	d5fb      	bpl.n	8006ad2 <_printf_i+0x1ba>
 8006ada:	8019      	strh	r1, [r3, #0]
 8006adc:	2300      	movs	r3, #0
 8006ade:	6123      	str	r3, [r4, #16]
 8006ae0:	4616      	mov	r6, r2
 8006ae2:	e7bc      	b.n	8006a5e <_printf_i+0x146>
 8006ae4:	6833      	ldr	r3, [r6, #0]
 8006ae6:	1d1a      	adds	r2, r3, #4
 8006ae8:	6032      	str	r2, [r6, #0]
 8006aea:	681e      	ldr	r6, [r3, #0]
 8006aec:	6862      	ldr	r2, [r4, #4]
 8006aee:	2100      	movs	r1, #0
 8006af0:	4630      	mov	r0, r6
 8006af2:	f7f9 fb75 	bl	80001e0 <memchr>
 8006af6:	b108      	cbz	r0, 8006afc <_printf_i+0x1e4>
 8006af8:	1b80      	subs	r0, r0, r6
 8006afa:	6060      	str	r0, [r4, #4]
 8006afc:	6863      	ldr	r3, [r4, #4]
 8006afe:	6123      	str	r3, [r4, #16]
 8006b00:	2300      	movs	r3, #0
 8006b02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b06:	e7aa      	b.n	8006a5e <_printf_i+0x146>
 8006b08:	6923      	ldr	r3, [r4, #16]
 8006b0a:	4632      	mov	r2, r6
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	4640      	mov	r0, r8
 8006b10:	47d0      	blx	sl
 8006b12:	3001      	adds	r0, #1
 8006b14:	d0ad      	beq.n	8006a72 <_printf_i+0x15a>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	079b      	lsls	r3, r3, #30
 8006b1a:	d413      	bmi.n	8006b44 <_printf_i+0x22c>
 8006b1c:	68e0      	ldr	r0, [r4, #12]
 8006b1e:	9b03      	ldr	r3, [sp, #12]
 8006b20:	4298      	cmp	r0, r3
 8006b22:	bfb8      	it	lt
 8006b24:	4618      	movlt	r0, r3
 8006b26:	e7a6      	b.n	8006a76 <_printf_i+0x15e>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	4632      	mov	r2, r6
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	4640      	mov	r0, r8
 8006b30:	47d0      	blx	sl
 8006b32:	3001      	adds	r0, #1
 8006b34:	d09d      	beq.n	8006a72 <_printf_i+0x15a>
 8006b36:	3501      	adds	r5, #1
 8006b38:	68e3      	ldr	r3, [r4, #12]
 8006b3a:	9903      	ldr	r1, [sp, #12]
 8006b3c:	1a5b      	subs	r3, r3, r1
 8006b3e:	42ab      	cmp	r3, r5
 8006b40:	dcf2      	bgt.n	8006b28 <_printf_i+0x210>
 8006b42:	e7eb      	b.n	8006b1c <_printf_i+0x204>
 8006b44:	2500      	movs	r5, #0
 8006b46:	f104 0619 	add.w	r6, r4, #25
 8006b4a:	e7f5      	b.n	8006b38 <_printf_i+0x220>
 8006b4c:	08006f0d 	.word	0x08006f0d
 8006b50:	08006f1e 	.word	0x08006f1e

08006b54 <memmove>:
 8006b54:	4288      	cmp	r0, r1
 8006b56:	b510      	push	{r4, lr}
 8006b58:	eb01 0402 	add.w	r4, r1, r2
 8006b5c:	d902      	bls.n	8006b64 <memmove+0x10>
 8006b5e:	4284      	cmp	r4, r0
 8006b60:	4623      	mov	r3, r4
 8006b62:	d807      	bhi.n	8006b74 <memmove+0x20>
 8006b64:	1e43      	subs	r3, r0, #1
 8006b66:	42a1      	cmp	r1, r4
 8006b68:	d008      	beq.n	8006b7c <memmove+0x28>
 8006b6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b72:	e7f8      	b.n	8006b66 <memmove+0x12>
 8006b74:	4402      	add	r2, r0
 8006b76:	4601      	mov	r1, r0
 8006b78:	428a      	cmp	r2, r1
 8006b7a:	d100      	bne.n	8006b7e <memmove+0x2a>
 8006b7c:	bd10      	pop	{r4, pc}
 8006b7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b86:	e7f7      	b.n	8006b78 <memmove+0x24>

08006b88 <_sbrk_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4d06      	ldr	r5, [pc, #24]	@ (8006ba4 <_sbrk_r+0x1c>)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	4604      	mov	r4, r0
 8006b90:	4608      	mov	r0, r1
 8006b92:	602b      	str	r3, [r5, #0]
 8006b94:	f7fc f820 	bl	8002bd8 <_sbrk>
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	d102      	bne.n	8006ba2 <_sbrk_r+0x1a>
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	b103      	cbz	r3, 8006ba2 <_sbrk_r+0x1a>
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}
 8006ba4:	200002a8 	.word	0x200002a8

08006ba8 <memcpy>:
 8006ba8:	440a      	add	r2, r1
 8006baa:	4291      	cmp	r1, r2
 8006bac:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bb0:	d100      	bne.n	8006bb4 <memcpy+0xc>
 8006bb2:	4770      	bx	lr
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bbe:	4291      	cmp	r1, r2
 8006bc0:	d1f9      	bne.n	8006bb6 <memcpy+0xe>
 8006bc2:	bd10      	pop	{r4, pc}

08006bc4 <_realloc_r>:
 8006bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc8:	4607      	mov	r7, r0
 8006bca:	4614      	mov	r4, r2
 8006bcc:	460d      	mov	r5, r1
 8006bce:	b921      	cbnz	r1, 8006bda <_realloc_r+0x16>
 8006bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	f7ff bc4d 	b.w	8006474 <_malloc_r>
 8006bda:	b92a      	cbnz	r2, 8006be8 <_realloc_r+0x24>
 8006bdc:	f7ff fbde 	bl	800639c <_free_r>
 8006be0:	4625      	mov	r5, r4
 8006be2:	4628      	mov	r0, r5
 8006be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006be8:	f000 f81a 	bl	8006c20 <_malloc_usable_size_r>
 8006bec:	4284      	cmp	r4, r0
 8006bee:	4606      	mov	r6, r0
 8006bf0:	d802      	bhi.n	8006bf8 <_realloc_r+0x34>
 8006bf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006bf6:	d8f4      	bhi.n	8006be2 <_realloc_r+0x1e>
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	4638      	mov	r0, r7
 8006bfc:	f7ff fc3a 	bl	8006474 <_malloc_r>
 8006c00:	4680      	mov	r8, r0
 8006c02:	b908      	cbnz	r0, 8006c08 <_realloc_r+0x44>
 8006c04:	4645      	mov	r5, r8
 8006c06:	e7ec      	b.n	8006be2 <_realloc_r+0x1e>
 8006c08:	42b4      	cmp	r4, r6
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	bf28      	it	cs
 8006c10:	4632      	movcs	r2, r6
 8006c12:	f7ff ffc9 	bl	8006ba8 <memcpy>
 8006c16:	4629      	mov	r1, r5
 8006c18:	4638      	mov	r0, r7
 8006c1a:	f7ff fbbf 	bl	800639c <_free_r>
 8006c1e:	e7f1      	b.n	8006c04 <_realloc_r+0x40>

08006c20 <_malloc_usable_size_r>:
 8006c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c24:	1f18      	subs	r0, r3, #4
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	bfbc      	itt	lt
 8006c2a:	580b      	ldrlt	r3, [r1, r0]
 8006c2c:	18c0      	addlt	r0, r0, r3
 8006c2e:	4770      	bx	lr

08006c30 <_init>:
 8006c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c32:	bf00      	nop
 8006c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c36:	bc08      	pop	{r3}
 8006c38:	469e      	mov	lr, r3
 8006c3a:	4770      	bx	lr

08006c3c <_fini>:
 8006c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c3e:	bf00      	nop
 8006c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c42:	bc08      	pop	{r3}
 8006c44:	469e      	mov	lr, r3
 8006c46:	4770      	bx	lr
