
PROJECT_TEAM_9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  0800b65c  0800b65c  0000c65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba14  0800ba14  0000d05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ba14  0800ba14  0000ca14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba1c  0800ba1c  0000d05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba1c  0800ba1c  0000ca1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ba20  0800ba20  0000ca20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800ba24  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d05c  2**0
                  CONTENTS
 10 .bss          000007e4  20000060  20000060  0000d060  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000844  20000844  0000d060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d05c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000130df  00000000  00000000  0000d08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000309b  00000000  00000000  0002016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00023208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005122  00000000  00000000  00024368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018859  00000000  00000000  0002948a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1b0b  00000000  00000000  00041ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001037ee  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000d3f  00000000  00000000  00103831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004e94  00000000  00000000  00104570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000040  00000000  00000000  00109404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b644 	.word	0x0800b644

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800b644 	.word	0x0800b644

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b988 	b.w	8000eb4 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9d08      	ldr	r5, [sp, #32]
 8000bc2:	468e      	mov	lr, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	4688      	mov	r8, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4617      	mov	r7, r2
 8000bd0:	d962      	bls.n	8000c98 <__udivmoddi4+0xdc>
 8000bd2:	fab2 f682 	clz	r6, r2
 8000bd6:	b14e      	cbz	r6, 8000bec <__udivmoddi4+0x30>
 8000bd8:	f1c6 0320 	rsb	r3, r6, #32
 8000bdc:	fa01 f806 	lsl.w	r8, r1, r6
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	40b7      	lsls	r7, r6
 8000be6:	ea43 0808 	orr.w	r8, r3, r8
 8000bea:	40b4      	lsls	r4, r6
 8000bec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf0:	fa1f fc87 	uxth.w	ip, r7
 8000bf4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bf8:	0c23      	lsrs	r3, r4, #16
 8000bfa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c02:	fb01 f20c 	mul.w	r2, r1, ip
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c10:	f080 80ea 	bcs.w	8000de8 <__udivmoddi4+0x22c>
 8000c14:	429a      	cmp	r2, r3
 8000c16:	f240 80e7 	bls.w	8000de8 <__udivmoddi4+0x22c>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	443b      	add	r3, r7
 8000c1e:	1a9a      	subs	r2, r3, r2
 8000c20:	b2a3      	uxth	r3, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c2e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c32:	459c      	cmp	ip, r3
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0x8e>
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3c:	f080 80d6 	bcs.w	8000dec <__udivmoddi4+0x230>
 8000c40:	459c      	cmp	ip, r3
 8000c42:	f240 80d3 	bls.w	8000dec <__udivmoddi4+0x230>
 8000c46:	443b      	add	r3, r7
 8000c48:	3802      	subs	r0, #2
 8000c4a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c4e:	eba3 030c 	sub.w	r3, r3, ip
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11d      	cbz	r5, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40f3      	lsrs	r3, r6
 8000c58:	2200      	movs	r2, #0
 8000c5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d905      	bls.n	8000c72 <__udivmoddi4+0xb6>
 8000c66:	b10d      	cbz	r5, 8000c6c <__udivmoddi4+0xb0>
 8000c68:	e9c5 0100 	strd	r0, r1, [r5]
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e7f5      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c72:	fab3 f183 	clz	r1, r3
 8000c76:	2900      	cmp	r1, #0
 8000c78:	d146      	bne.n	8000d08 <__udivmoddi4+0x14c>
 8000c7a:	4573      	cmp	r3, lr
 8000c7c:	d302      	bcc.n	8000c84 <__udivmoddi4+0xc8>
 8000c7e:	4282      	cmp	r2, r0
 8000c80:	f200 8105 	bhi.w	8000e8e <__udivmoddi4+0x2d2>
 8000c84:	1a84      	subs	r4, r0, r2
 8000c86:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c8a:	2001      	movs	r0, #1
 8000c8c:	4690      	mov	r8, r2
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	d0e5      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c92:	e9c5 4800 	strd	r4, r8, [r5]
 8000c96:	e7e2      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	2a00      	cmp	r2, #0
 8000c9a:	f000 8090 	beq.w	8000dbe <__udivmoddi4+0x202>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	f040 80a4 	bne.w	8000df0 <__udivmoddi4+0x234>
 8000ca8:	1a8a      	subs	r2, r1, r2
 8000caa:	0c03      	lsrs	r3, r0, #16
 8000cac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb0:	b280      	uxth	r0, r0
 8000cb2:	b2bc      	uxth	r4, r7
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cba:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cc2:	fb04 f20c 	mul.w	r2, r4, ip
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x11e>
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x11c>
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	f200 80e0 	bhi.w	8000e98 <__udivmoddi4+0x2dc>
 8000cd8:	46c4      	mov	ip, r8
 8000cda:	1a9b      	subs	r3, r3, r2
 8000cdc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ce0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000ce4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ce8:	fb02 f404 	mul.w	r4, r2, r4
 8000cec:	429c      	cmp	r4, r3
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x144>
 8000cf0:	18fb      	adds	r3, r7, r3
 8000cf2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x142>
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	f200 80ca 	bhi.w	8000e92 <__udivmoddi4+0x2d6>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	1b1b      	subs	r3, r3, r4
 8000d02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d06:	e7a5      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d08:	f1c1 0620 	rsb	r6, r1, #32
 8000d0c:	408b      	lsls	r3, r1
 8000d0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d12:	431f      	orrs	r7, r3
 8000d14:	fa0e f401 	lsl.w	r4, lr, r1
 8000d18:	fa20 f306 	lsr.w	r3, r0, r6
 8000d1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d24:	4323      	orrs	r3, r4
 8000d26:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2a:	fa1f fc87 	uxth.w	ip, r7
 8000d2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d32:	0c1c      	lsrs	r4, r3, #16
 8000d34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	fa02 f201 	lsl.w	r2, r2, r1
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x1a0>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d4e:	f080 809c 	bcs.w	8000e8a <__udivmoddi4+0x2ce>
 8000d52:	45a6      	cmp	lr, r4
 8000d54:	f240 8099 	bls.w	8000e8a <__udivmoddi4+0x2ce>
 8000d58:	3802      	subs	r0, #2
 8000d5a:	443c      	add	r4, r7
 8000d5c:	eba4 040e 	sub.w	r4, r4, lr
 8000d60:	fa1f fe83 	uxth.w	lr, r3
 8000d64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d68:	fb09 4413 	mls	r4, r9, r3, r4
 8000d6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d74:	45a4      	cmp	ip, r4
 8000d76:	d908      	bls.n	8000d8a <__udivmoddi4+0x1ce>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d7e:	f080 8082 	bcs.w	8000e86 <__udivmoddi4+0x2ca>
 8000d82:	45a4      	cmp	ip, r4
 8000d84:	d97f      	bls.n	8000e86 <__udivmoddi4+0x2ca>
 8000d86:	3b02      	subs	r3, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d8e:	eba4 040c 	sub.w	r4, r4, ip
 8000d92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d96:	4564      	cmp	r4, ip
 8000d98:	4673      	mov	r3, lr
 8000d9a:	46e1      	mov	r9, ip
 8000d9c:	d362      	bcc.n	8000e64 <__udivmoddi4+0x2a8>
 8000d9e:	d05f      	beq.n	8000e60 <__udivmoddi4+0x2a4>
 8000da0:	b15d      	cbz	r5, 8000dba <__udivmoddi4+0x1fe>
 8000da2:	ebb8 0203 	subs.w	r2, r8, r3
 8000da6:	eb64 0409 	sbc.w	r4, r4, r9
 8000daa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dae:	fa22 f301 	lsr.w	r3, r2, r1
 8000db2:	431e      	orrs	r6, r3
 8000db4:	40cc      	lsrs	r4, r1
 8000db6:	e9c5 6400 	strd	r6, r4, [r5]
 8000dba:	2100      	movs	r1, #0
 8000dbc:	e74f      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000dbe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dc2:	0c01      	lsrs	r1, r0, #16
 8000dc4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dc8:	b280      	uxth	r0, r0
 8000dca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	463c      	mov	r4, r7
 8000dd4:	46b8      	mov	r8, r7
 8000dd6:	46be      	mov	lr, r7
 8000dd8:	2620      	movs	r6, #32
 8000dda:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dde:	eba2 0208 	sub.w	r2, r2, r8
 8000de2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000de6:	e766      	b.n	8000cb6 <__udivmoddi4+0xfa>
 8000de8:	4601      	mov	r1, r0
 8000dea:	e718      	b.n	8000c1e <__udivmoddi4+0x62>
 8000dec:	4610      	mov	r0, r2
 8000dee:	e72c      	b.n	8000c4a <__udivmoddi4+0x8e>
 8000df0:	f1c6 0220 	rsb	r2, r6, #32
 8000df4:	fa2e f302 	lsr.w	r3, lr, r2
 8000df8:	40b7      	lsls	r7, r6
 8000dfa:	40b1      	lsls	r1, r6
 8000dfc:	fa20 f202 	lsr.w	r2, r0, r2
 8000e00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e04:	430a      	orrs	r2, r1
 8000e06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e0a:	b2bc      	uxth	r4, r7
 8000e0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e10:	0c11      	lsrs	r1, r2, #16
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb08 f904 	mul.w	r9, r8, r4
 8000e1a:	40b0      	lsls	r0, r6
 8000e1c:	4589      	cmp	r9, r1
 8000e1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e22:	b280      	uxth	r0, r0
 8000e24:	d93e      	bls.n	8000ea4 <__udivmoddi4+0x2e8>
 8000e26:	1879      	adds	r1, r7, r1
 8000e28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e2c:	d201      	bcs.n	8000e32 <__udivmoddi4+0x276>
 8000e2e:	4589      	cmp	r9, r1
 8000e30:	d81f      	bhi.n	8000e72 <__udivmoddi4+0x2b6>
 8000e32:	eba1 0109 	sub.w	r1, r1, r9
 8000e36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e3a:	fb09 f804 	mul.w	r8, r9, r4
 8000e3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e42:	b292      	uxth	r2, r2
 8000e44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e48:	4542      	cmp	r2, r8
 8000e4a:	d229      	bcs.n	8000ea0 <__udivmoddi4+0x2e4>
 8000e4c:	18ba      	adds	r2, r7, r2
 8000e4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e52:	d2c4      	bcs.n	8000dde <__udivmoddi4+0x222>
 8000e54:	4542      	cmp	r2, r8
 8000e56:	d2c2      	bcs.n	8000dde <__udivmoddi4+0x222>
 8000e58:	f1a9 0102 	sub.w	r1, r9, #2
 8000e5c:	443a      	add	r2, r7
 8000e5e:	e7be      	b.n	8000dde <__udivmoddi4+0x222>
 8000e60:	45f0      	cmp	r8, lr
 8000e62:	d29d      	bcs.n	8000da0 <__udivmoddi4+0x1e4>
 8000e64:	ebbe 0302 	subs.w	r3, lr, r2
 8000e68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	46e1      	mov	r9, ip
 8000e70:	e796      	b.n	8000da0 <__udivmoddi4+0x1e4>
 8000e72:	eba7 0909 	sub.w	r9, r7, r9
 8000e76:	4449      	add	r1, r9
 8000e78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e80:	fb09 f804 	mul.w	r8, r9, r4
 8000e84:	e7db      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e86:	4673      	mov	r3, lr
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1ce>
 8000e8a:	4650      	mov	r0, sl
 8000e8c:	e766      	b.n	8000d5c <__udivmoddi4+0x1a0>
 8000e8e:	4608      	mov	r0, r1
 8000e90:	e6fd      	b.n	8000c8e <__udivmoddi4+0xd2>
 8000e92:	443b      	add	r3, r7
 8000e94:	3a02      	subs	r2, #2
 8000e96:	e733      	b.n	8000d00 <__udivmoddi4+0x144>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	443b      	add	r3, r7
 8000e9e:	e71c      	b.n	8000cda <__udivmoddi4+0x11e>
 8000ea0:	4649      	mov	r1, r9
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x222>
 8000ea4:	eba1 0109 	sub.w	r1, r1, r9
 8000ea8:	46c4      	mov	ip, r8
 8000eaa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eae:	fb09 f804 	mul.w	r8, r9, r4
 8000eb2:	e7c4      	b.n	8000e3e <__udivmoddi4+0x282>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0a8      	sub	sp, #160	@ 0xa0
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  // Task Box Definitions
  uint16_t start_y_tasks_row1 = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 8000ebe:	233c      	movs	r3, #60	@ 0x3c
 8000ec0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
  uint16_t start_y_tasks_row2 = start_y_tasks_row1 + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8000ec4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000ec8:	3350      	adds	r3, #80	@ 0x50
 8000eca:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

  TaskBox_t task_boxes[] = {
 8000ece:	230a      	movs	r3, #10
 8000ed0:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8000ed4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000ed8:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8000edc:	2369      	movs	r3, #105	@ 0x69
 8000ede:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8000ee2:	2346      	movs	r3, #70	@ 0x46
 8000ee4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8000ee8:	4bca      	ldr	r3, [pc, #808]	@ (8001214 <main+0x35c>)
 8000eea:	667b      	str	r3, [r7, #100]	@ 0x64
 8000eec:	237d      	movs	r3, #125	@ 0x7d
 8000eee:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8000ef2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8000ef6:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 8000efa:	2369      	movs	r3, #105	@ 0x69
 8000efc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 8000f00:	2346      	movs	r3, #70	@ 0x46
 8000f02:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8000f06:	4bc4      	ldr	r3, [pc, #784]	@ (8001218 <main+0x360>)
 8000f08:	673b      	str	r3, [r7, #112]	@ 0x70
 8000f0a:	230a      	movs	r3, #10
 8000f0c:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 8000f10:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8000f14:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8000f18:	2369      	movs	r3, #105	@ 0x69
 8000f1a:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8000f1e:	2346      	movs	r3, #70	@ 0x46
 8000f20:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8000f24:	4bbd      	ldr	r3, [pc, #756]	@ (800121c <main+0x364>)
 8000f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000f28:	237d      	movs	r3, #125	@ 0x7d
 8000f2a:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
 8000f2e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8000f32:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8000f36:	2369      	movs	r3, #105	@ 0x69
 8000f38:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 8000f3c:	2346      	movs	r3, #70	@ 0x46
 8000f3e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8000f42:	4bb7      	ldr	r3, [pc, #732]	@ (8001220 <main+0x368>)
 8000f44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      {MARGIN, start_y_tasks_row1, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-1"},
      {(uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES), start_y_tasks_row1, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-2"},
      {MARGIN, start_y_tasks_row2, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-3"},
      {(uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES), start_y_tasks_row2, TASK_BOX_W_CALC, TASK_BOX_H, "Task 02-4"}};
  const int num_tasks = sizeof(task_boxes) / sizeof(task_boxes[0]);
 8000f48:	2304      	movs	r3, #4
 8000f4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  char info_text_buffer[50];
  char current_task_text[20];
  Coordinate rawPoint, displayPoint;

  // Define the Back Button Box (ADJUST x, y, w, h AS PER YOUR Manual_LCD_DrawLayout)
  TaskBox_t back_button_box = {
 8000f4e:	237d      	movs	r3, #125	@ 0x7d
 8000f50:	803b      	strh	r3, [r7, #0]
      (uint16_t)(MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES),              // x: same margin as tasks
      (uint16_t)(start_y_tasks_row2 + TASK_BOX_H + TASK_TO_BACK_BUTTON_SPACING), // y: towards the bottom
 8000f52:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8000f56:	335a      	adds	r3, #90	@ 0x5a
 8000f58:	b29b      	uxth	r3, r3
  TaskBox_t back_button_box = {
 8000f5a:	807b      	strh	r3, [r7, #2]
 8000f5c:	235a      	movs	r3, #90	@ 0x5a
 8000f5e:	80bb      	strh	r3, [r7, #4]
 8000f60:	232d      	movs	r3, #45	@ 0x2d
 8000f62:	80fb      	strh	r3, [r7, #6]
 8000f64:	4baf      	ldr	r3, [pc, #700]	@ (8001224 <main+0x36c>)
 8000f66:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f68:	f001 ffd4 	bl	8002f14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6c:	f000 f964 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f70:	f000 fa4e 	bl	8001410 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f74:	f000 fa16 	bl	80013a4 <MX_SPI1_Init>
  MX_I2C2_Init();
 8000f78:	f000 f9c6 	bl	8001308 <MX_I2C2_Init>

  MX_SDIO_SD_Init();
 8000f7c:	f000 f9f2 	bl	8001364 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000f80:	f007 fa44 	bl	800840c <MX_FATFS_Init>

  Manual_LCD_Init();
 8000f84:	f000 fc0e 	bl	80017a4 <Manual_LCD_Init>
  Manual_Touch_Init(&hspi1);
 8000f88:	48a7      	ldr	r0, [pc, #668]	@ (8001228 <main+0x370>)
 8000f8a:	f001 fac9 	bl	8002520 <Manual_Touch_Init>

  Manual_LCD_Clear(COLOR_BLACK);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f000 fd22 	bl	80019d8 <Manual_LCD_Clear>
  Manual_LCD_DrawLayout(); // This function should draw the tasks and the back button
 8000f94:	f001 f830 	bl	8001ff8 <Manual_LCD_DrawLayout>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if (Manual_Touch_Pressed())
 8000f98:	f001 fad8 	bl	800254c <Manual_Touch_Pressed>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 8134 	beq.w	800120c <main+0x354>
    {
      if (Manual_Touch_GetRawPoint(&rawPoint))
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f001 fadf 	bl	800256c <Manual_Touch_GetRawPoint>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 8126 	beq.w	8001202 <main+0x34a>
      {
        Manual_Touch_ApplyCalibration(&displayPoint, &rawPoint);
 8000fb6:	f107 0210 	add.w	r2, r7, #16
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f001 fcb5 	bl	8002930 <Manual_Touch_ApplyCalibration>

        int task_hit_index = -1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        for (int i = 0; i < num_tasks; i++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8000fd4:	e057      	b.n	8001086 <main+0x1ce>
        {
          if (displayPoint.x >= task_boxes[i].x && displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 8000fd6:	89b9      	ldrh	r1, [r7, #12]
 8000fd8:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	33a0      	adds	r3, #160	@ 0xa0
 8000fe6:	443b      	add	r3, r7
 8000fe8:	3b44      	subs	r3, #68	@ 0x44
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	4299      	cmp	r1, r3
 8000fee:	d345      	bcc.n	800107c <main+0x1c4>
 8000ff0:	89bb      	ldrh	r3, [r7, #12]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	33a0      	adds	r3, #160	@ 0xa0
 8001002:	443b      	add	r3, r7
 8001004:	3b44      	subs	r3, #68	@ 0x44
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800100e:	4613      	mov	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	33a0      	adds	r3, #160	@ 0xa0
 8001018:	443b      	add	r3, r7
 800101a:	3b40      	subs	r3, #64	@ 0x40
 800101c:	881b      	ldrh	r3, [r3, #0]
 800101e:	4403      	add	r3, r0
 8001020:	4299      	cmp	r1, r3
 8001022:	da2b      	bge.n	800107c <main+0x1c4>
              displayPoint.y >= task_boxes[i].y && displayPoint.y < (task_boxes[i].y + task_boxes[i].h))
 8001024:	89f9      	ldrh	r1, [r7, #14]
 8001026:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800102a:	4613      	mov	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4413      	add	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	33a0      	adds	r3, #160	@ 0xa0
 8001034:	443b      	add	r3, r7
 8001036:	3b42      	subs	r3, #66	@ 0x42
 8001038:	881b      	ldrh	r3, [r3, #0]
          if (displayPoint.x >= task_boxes[i].x && displayPoint.x < (task_boxes[i].x + task_boxes[i].w) &&
 800103a:	4299      	cmp	r1, r3
 800103c:	d31e      	bcc.n	800107c <main+0x1c4>
              displayPoint.y >= task_boxes[i].y && displayPoint.y < (task_boxes[i].y + task_boxes[i].h))
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	4619      	mov	r1, r3
 8001042:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8001046:	4613      	mov	r3, r2
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	4413      	add	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	33a0      	adds	r3, #160	@ 0xa0
 8001050:	443b      	add	r3, r7
 8001052:	3b42      	subs	r3, #66	@ 0x42
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800105c:	4613      	mov	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	33a0      	adds	r3, #160	@ 0xa0
 8001066:	443b      	add	r3, r7
 8001068:	3b3e      	subs	r3, #62	@ 0x3e
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	4403      	add	r3, r0
 800106e:	4299      	cmp	r1, r3
 8001070:	da04      	bge.n	800107c <main+0x1c4>
          {
            task_hit_index = i;
 8001072:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001076:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            break;
 800107a:	e00a      	b.n	8001092 <main+0x1da>
        for (int i = 0; i < num_tasks; i++)
 800107c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001080:	3301      	adds	r3, #1
 8001082:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001086:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800108a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800108e:	429a      	cmp	r2, r3
 8001090:	dba1      	blt.n	8000fd6 <main+0x11e>
          }
        }

        bool back_button_pressed = false;
 8001092:	2300      	movs	r3, #0
 8001094:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        if (displayPoint.x >= back_button_box.x && displayPoint.x < (back_button_box.x + back_button_box.w) &&
 8001098:	89ba      	ldrh	r2, [r7, #12]
 800109a:	883b      	ldrh	r3, [r7, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d316      	bcc.n	80010ce <main+0x216>
 80010a0:	89bb      	ldrh	r3, [r7, #12]
 80010a2:	461a      	mov	r2, r3
 80010a4:	883b      	ldrh	r3, [r7, #0]
 80010a6:	4619      	mov	r1, r3
 80010a8:	88bb      	ldrh	r3, [r7, #4]
 80010aa:	440b      	add	r3, r1
 80010ac:	429a      	cmp	r2, r3
 80010ae:	da0e      	bge.n	80010ce <main+0x216>
            displayPoint.y >= back_button_box.y && displayPoint.y < (back_button_box.y + back_button_box.h))
 80010b0:	89fa      	ldrh	r2, [r7, #14]
 80010b2:	887b      	ldrh	r3, [r7, #2]
        if (displayPoint.x >= back_button_box.x && displayPoint.x < (back_button_box.x + back_button_box.w) &&
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d30a      	bcc.n	80010ce <main+0x216>
            displayPoint.y >= back_button_box.y && displayPoint.y < (back_button_box.y + back_button_box.h))
 80010b8:	89fb      	ldrh	r3, [r7, #14]
 80010ba:	461a      	mov	r2, r3
 80010bc:	887b      	ldrh	r3, [r7, #2]
 80010be:	4619      	mov	r1, r3
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	440b      	add	r3, r1
 80010c4:	429a      	cmp	r2, r3
 80010c6:	da02      	bge.n	80010ce <main+0x216>
        {
          back_button_pressed = true;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
        }

        if (task_hit_index != -1)
 80010ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80010d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d6:	d06f      	beq.n	80011b8 <main+0x300>
        {
          // Logic đổi màu khi chạm vào task box
          if (strlen(current_task_text) > 0)
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d028      	beq.n	8001134 <main+0x27c>
          {
            if (strcmp(current_task_text, task_boxes[task_hit_index].name) != 0)
 80010e2:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80010e6:	4613      	mov	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	33a0      	adds	r3, #160	@ 0xa0
 80010f0:	443b      	add	r3, r7
 80010f2:	3b3c      	subs	r3, #60	@ 0x3c
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f867 	bl	80001d0 <strcmp>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d024      	beq.n	8001152 <main+0x29a>
            {
              Manual_LCD_RefillTaskBox(current_task_text, COLOR_BLACK);                 // Đổi màu task trước về mặc định
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f001 f938 	bl	8002384 <Manual_LCD_RefillTaskBox>
              Manual_LCD_RefillTaskBox(task_boxes[task_hit_index].name, COLOR_MAGENTA); // Đổi màu task đang chọn
 8001114:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001118:	4613      	mov	r3, r2
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	33a0      	adds	r3, #160	@ 0xa0
 8001122:	443b      	add	r3, r7
 8001124:	3b3c      	subs	r3, #60	@ 0x3c
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 800112c:	4618      	mov	r0, r3
 800112e:	f001 f929 	bl	8002384 <Manual_LCD_RefillTaskBox>
 8001132:	e00e      	b.n	8001152 <main+0x29a>
            }
          }
          else
          {
            Manual_LCD_RefillTaskBox(task_boxes[task_hit_index].name, COLOR_MAGENTA); // Đổi màu task đang chọn (lần đầu chạm)
 8001134:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001138:	4613      	mov	r3, r2
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	4413      	add	r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	33a0      	adds	r3, #160	@ 0xa0
 8001142:	443b      	add	r3, r7
 8001144:	3b3c      	subs	r3, #60	@ 0x3c
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f64f 011f 	movw	r1, #63519	@ 0xf81f
 800114c:	4618      	mov	r0, r3
 800114e:	f001 f919 	bl	8002384 <Manual_LCD_RefillTaskBox>
          }
          strcpy(current_task_text, task_boxes[task_hit_index].name); // Lưu tên task đang chọn
 8001152:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8001156:	4613      	mov	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	33a0      	adds	r3, #160	@ 0xa0
 8001160:	443b      	add	r3, r7
 8001162:	3b3c      	subs	r3, #60	@ 0x3c
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f009 fe17 	bl	800ada0 <strcpy>

          // === BẮT ĐẦU ĐOẠN THÊM/SỬA ===
          // Kiểm tra xem task nào được chạm
          if (task_hit_index == 3) // Task 02-4 là phần tử thứ 4, có index là 3 (0, 1, 2, 3)
 8001172:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001176:	2b03      	cmp	r3, #3
 8001178:	d10d      	bne.n	8001196 <main+0x2de>
          {
        	  task4();
 800117a:	f000 f9ff 	bl	800157c <task4>
        	  //Manual_LCD_DrawString(128, 173, read_data, COLOR_WHITE, COLOR_BLACK, 1);
              sprintf(info_text_buffer,read_data); // Hiển thị tọa độ nếu chạm ngoài
 800117e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001182:	492a      	ldr	r1, [pc, #168]	@ (800122c <main+0x374>)
 8001184:	4618      	mov	r0, r3
 8001186:	f009 fdb5 	bl	800acf4 <siprintf>
              Manual_LCD_UpdateInfoText(info_text_buffer);
 800118a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800118e:	4618      	mov	r0, r3
 8001190:	f001 f8c6 	bl	8002320 <Manual_LCD_UpdateInfoText>
 8001194:	e023      	b.n	80011de <main+0x326>
              // TODO: Add your read_data function call here if needed later
          }
          else
          {
              // Hiển thị tên của các task khác nếu không phải Task 02-4
              sprintf(info_text_buffer, "Task: %s", task_boxes[task_hit_index].name);
 8001196:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800119a:	4613      	mov	r3, r2
 800119c:	005b      	lsls	r3, r3, #1
 800119e:	4413      	add	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	33a0      	adds	r3, #160	@ 0xa0
 80011a4:	443b      	add	r3, r7
 80011a6:	3b3c      	subs	r3, #60	@ 0x3c
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ae:	4920      	ldr	r1, [pc, #128]	@ (8001230 <main+0x378>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f009 fd9f 	bl	800acf4 <siprintf>
 80011b6:	e012      	b.n	80011de <main+0x326>
              // TODO: Add specific logic for other tasks here if needed
          }
          // === KẾT THÚC ĐOẠN THÊM/SỬA ===
        } // Kết thúc if (task_hit_index != -1)
        else if (back_button_pressed)
 80011b8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <main+0x316>
        {
          sprintf(info_text_buffer, "Back"); // Display "Back" when back button is touched
 80011c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011c4:	4917      	ldr	r1, [pc, #92]	@ (8001224 <main+0x36c>)
 80011c6:	4618      	mov	r0, r3
 80011c8:	f009 fd94 	bl	800acf4 <siprintf>
 80011cc:	e007      	b.n	80011de <main+0x326>
          // TODO: Add navigation logic for the back button here if needed
        }
        else
        {
          sprintf(info_text_buffer, "Touch: X=%03u Y=%03u", displayPoint.x, displayPoint.y); // Hiển thị tọa độ nếu chạm ngoài
 80011ce:	89bb      	ldrh	r3, [r7, #12]
 80011d0:	461a      	mov	r2, r3
 80011d2:	89fb      	ldrh	r3, [r7, #14]
 80011d4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80011d8:	4916      	ldr	r1, [pc, #88]	@ (8001234 <main+0x37c>)
 80011da:	f009 fd8b 	bl	800acf4 <siprintf>
        }
        // Dòng này vẫn giữ nguyên, nó sẽ hiển thị nội dung của info_text_buffer đã được thiết lập ở trên
        Manual_LCD_UpdateInfoText(info_text_buffer);
 80011de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 f89c 	bl	8002320 <Manual_LCD_UpdateInfoText>

        while (Manual_Touch_Pressed())
 80011e8:	e002      	b.n	80011f0 <main+0x338>
        {
          HAL_Delay(20);
 80011ea:	2014      	movs	r0, #20
 80011ec:	f001 ff04 	bl	8002ff8 <HAL_Delay>
        while (Manual_Touch_Pressed())
 80011f0:	f001 f9ac 	bl	800254c <Manual_Touch_Pressed>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f7      	bne.n	80011ea <main+0x332>
 80011fa:	e007      	b.n	800120c <main+0x354>
      }
      else
      {
        while (Manual_Touch_Pressed())
        {
          HAL_Delay(20);
 80011fc:	2014      	movs	r0, #20
 80011fe:	f001 fefb 	bl	8002ff8 <HAL_Delay>
        while (Manual_Touch_Pressed())
 8001202:	f001 f9a3 	bl	800254c <Manual_Touch_Pressed>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f7      	bne.n	80011fc <main+0x344>
        }
      }
    }
    HAL_Delay(50);
 800120c:	2032      	movs	r0, #50	@ 0x32
 800120e:	f001 fef3 	bl	8002ff8 <HAL_Delay>
    if (Manual_Touch_Pressed())
 8001212:	e6c1      	b.n	8000f98 <main+0xe0>
 8001214:	0800b65c 	.word	0x0800b65c
 8001218:	0800b668 	.word	0x0800b668
 800121c:	0800b674 	.word	0x0800b674
 8001220:	0800b680 	.word	0x0800b680
 8001224:	0800b68c 	.word	0x0800b68c
 8001228:	20000620 	.word	0x20000620
 800122c:	200004e0 	.word	0x200004e0
 8001230:	0800b694 	.word	0x0800b694
 8001234:	0800b6a0 	.word	0x0800b6a0

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b094      	sub	sp, #80	@ 0x50
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0320 	add.w	r3, r7, #32
 8001242:	2230      	movs	r2, #48	@ 0x30
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f009 fd76 	bl	800ad38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	4b27      	ldr	r3, [pc, #156]	@ (8001300 <SystemClock_Config+0xc8>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	4a26      	ldr	r2, [pc, #152]	@ (8001300 <SystemClock_Config+0xc8>)
 8001266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800126a:	6413      	str	r3, [r2, #64]	@ 0x40
 800126c:	4b24      	ldr	r3, [pc, #144]	@ (8001300 <SystemClock_Config+0xc8>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001278:	2300      	movs	r3, #0
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	4b21      	ldr	r3, [pc, #132]	@ (8001304 <SystemClock_Config+0xcc>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a20      	ldr	r2, [pc, #128]	@ (8001304 <SystemClock_Config+0xcc>)
 8001282:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	4b1e      	ldr	r3, [pc, #120]	@ (8001304 <SystemClock_Config+0xcc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001294:	2302      	movs	r3, #2
 8001296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001298:	2301      	movs	r3, #1
 800129a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800129c:	2310      	movs	r3, #16
 800129e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a0:	2302      	movs	r3, #2
 80012a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012a8:	2308      	movs	r3, #8
 80012aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80012ac:	2354      	movs	r3, #84	@ 0x54
 80012ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012b4:	2304      	movs	r3, #4
 80012b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b8:	f107 0320 	add.w	r3, r7, #32
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 ff29 	bl	8005114 <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012c8:	f000 f99a 	bl	8001600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012cc:	230f      	movs	r3, #15
 80012ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d0:	2302      	movs	r3, #2
 80012d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012de:	2300      	movs	r3, #0
 80012e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	2102      	movs	r1, #2
 80012e8:	4618      	mov	r0, r3
 80012ea:	f004 f98b 	bl	8005604 <HAL_RCC_ClockConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012f4:	f000 f984 	bl	8001600 <Error_Handler>
  }
}
 80012f8:	bf00      	nop
 80012fa:	3750      	adds	r7, #80	@ 0x50
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40023800 	.word	0x40023800
 8001304:	40007000 	.word	0x40007000

08001308 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_Init 0 */
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */
  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800130c:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <MX_I2C2_Init+0x50>)
 800130e:	4a13      	ldr	r2, [pc, #76]	@ (800135c <MX_I2C2_Init+0x54>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001312:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <MX_I2C2_Init+0x50>)
 8001314:	4a12      	ldr	r2, [pc, #72]	@ (8001360 <MX_I2C2_Init+0x58>)
 8001316:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <MX_I2C2_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <MX_I2C2_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <MX_I2C2_Init+0x50>)
 8001326:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800132a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132c:	4b0a      	ldr	r3, [pc, #40]	@ (8001358 <MX_I2C2_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MX_I2C2_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001338:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <MX_I2C2_Init+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <MX_I2C2_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	@ (8001358 <MX_I2C2_Init+0x50>)
 8001346:	f002 f9af 	bl	80036a8 <HAL_I2C_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001350:	f000 f956 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */
  /* USER CODE END I2C2_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200005cc 	.word	0x200005cc
 800135c:	40005800 	.word	0x40005800
 8001360:	000186a0 	.word	0x000186a0

08001364 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001368:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <MX_SDIO_SD_Init+0x38>)
 800136a:	4a0d      	ldr	r2, [pc, #52]	@ (80013a0 <MX_SDIO_SD_Init+0x3c>)
 800136c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800136e:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <MX_SDIO_SD_Init+0x38>)
 8001370:	2200      	movs	r2, #0
 8001372:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001374:	4b09      	ldr	r3, [pc, #36]	@ (800139c <MX_SDIO_SD_Init+0x38>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800137a:	4b08      	ldr	r3, [pc, #32]	@ (800139c <MX_SDIO_SD_Init+0x38>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001380:	4b06      	ldr	r3, [pc, #24]	@ (800139c <MX_SDIO_SD_Init+0x38>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001386:	4b05      	ldr	r3, [pc, #20]	@ (800139c <MX_SDIO_SD_Init+0x38>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800138c:	4b03      	ldr	r3, [pc, #12]	@ (800139c <MX_SDIO_SD_Init+0x38>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	20000548 	.word	0x20000548
 80013a0:	40012c00 	.word	0x40012c00

080013a4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013a8:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <MX_SPI1_Init+0x64>)
 80013aa:	4a18      	ldr	r2, [pc, #96]	@ (800140c <MX_SPI1_Init+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013ae:	4b16      	ldr	r3, [pc, #88]	@ (8001408 <MX_SPI1_Init+0x64>)
 80013b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013b6:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <MX_SPI1_Init+0x64>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013bc:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <MX_SPI1_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <MX_SPI1_Init+0x64>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <MX_SPI1_Init+0x64>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <MX_SPI1_Init+0x64>)
 80013d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <MX_SPI1_Init+0x64>)
 80013d8:	2220      	movs	r2, #32
 80013da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <MX_SPI1_Init+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <MX_SPI1_Init+0x64>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e8:	4b07      	ldr	r3, [pc, #28]	@ (8001408 <MX_SPI1_Init+0x64>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013ee:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <MX_SPI1_Init+0x64>)
 80013f0:	220a      	movs	r2, #10
 80013f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013f4:	4804      	ldr	r0, [pc, #16]	@ (8001408 <MX_SPI1_Init+0x64>)
 80013f6:	f005 fd05 	bl	8006e04 <HAL_SPI_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001400:	f000 f8fe 	bl	8001600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 8001404:	bf00      	nop
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000620 	.word	0x20000620
 800140c:	40013000 	.word	0x40013000

08001410 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	@ 0x28
 8001414:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]
 8001422:	60da      	str	r2, [r3, #12]
 8001424:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b50      	ldr	r3, [pc, #320]	@ (800156c <MX_GPIO_Init+0x15c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	4a4f      	ldr	r2, [pc, #316]	@ (800156c <MX_GPIO_Init+0x15c>)
 8001430:	f043 0304 	orr.w	r3, r3, #4
 8001434:	6313      	str	r3, [r2, #48]	@ 0x30
 8001436:	4b4d      	ldr	r3, [pc, #308]	@ (800156c <MX_GPIO_Init+0x15c>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b49      	ldr	r3, [pc, #292]	@ (800156c <MX_GPIO_Init+0x15c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	4a48      	ldr	r2, [pc, #288]	@ (800156c <MX_GPIO_Init+0x15c>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001450:	6313      	str	r3, [r2, #48]	@ 0x30
 8001452:	4b46      	ldr	r3, [pc, #280]	@ (800156c <MX_GPIO_Init+0x15c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b42      	ldr	r3, [pc, #264]	@ (800156c <MX_GPIO_Init+0x15c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a41      	ldr	r2, [pc, #260]	@ (800156c <MX_GPIO_Init+0x15c>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b3f      	ldr	r3, [pc, #252]	@ (800156c <MX_GPIO_Init+0x15c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b3b      	ldr	r3, [pc, #236]	@ (800156c <MX_GPIO_Init+0x15c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001482:	4a3a      	ldr	r2, [pc, #232]	@ (800156c <MX_GPIO_Init+0x15c>)
 8001484:	f043 0302 	orr.w	r3, r3, #2
 8001488:	6313      	str	r3, [r2, #48]	@ 0x30
 800148a:	4b38      	ldr	r3, [pc, #224]	@ (800156c <MX_GPIO_Init+0x15c>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	4b34      	ldr	r3, [pc, #208]	@ (800156c <MX_GPIO_Init+0x15c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	4a33      	ldr	r2, [pc, #204]	@ (800156c <MX_GPIO_Init+0x15c>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a6:	4b31      	ldr	r3, [pc, #196]	@ (800156c <MX_GPIO_Init+0x15c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_BL_Pin|LCD_CS_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 80014b8:	482d      	ldr	r0, [pc, #180]	@ (8001570 <MX_GPIO_Init+0x160>)
 80014ba:	f002 f8b7 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80014c4:	482b      	ldr	r0, [pc, #172]	@ (8001574 <MX_GPIO_Init+0x164>)
 80014c6:	f002 f8b1 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	4619      	mov	r1, r3
 80014de:	4826      	ldr	r0, [pc, #152]	@ (8001578 <MX_GPIO_Init+0x168>)
 80014e0:	f001 fef0 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80014e4:	2302      	movs	r3, #2
 80014e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	4619      	mov	r1, r3
 80014f6:	481f      	ldr	r0, [pc, #124]	@ (8001574 <MX_GPIO_Init+0x164>)
 80014f8:	f001 fee4 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_BL_Pin LCD_CS_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_BL_Pin|LCD_CS_Pin|LCD_DC_Pin;
 80014fc:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8001500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001502:	2301      	movs	r3, #1
 8001504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001506:	2300      	movs	r3, #0
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	4816      	ldr	r0, [pc, #88]	@ (8001570 <MX_GPIO_Init+0x160>)
 8001516:	f001 fed5 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_CS_Pin */
  GPIO_InitStruct.Pin = TP_CS_Pin;
 800151a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800151e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TP_CS_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	4619      	mov	r1, r3
 8001532:	4810      	ldr	r0, [pc, #64]	@ (8001574 <MX_GPIO_Init+0x164>)
 8001534:	f001 fec6 	bl	80032c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TP_IRQ_Pin */
  GPIO_InitStruct.Pin = TP_IRQ_Pin;
 8001538:	2310      	movs	r3, #16
 800153a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800153c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001540:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001542:	2301      	movs	r3, #1
 8001544:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TP_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4619      	mov	r1, r3
 800154c:	4808      	ldr	r0, [pc, #32]	@ (8001570 <MX_GPIO_Init+0x160>)
 800154e:	f001 feb9 	bl	80032c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	200a      	movs	r0, #10
 8001558:	f001 fe4d 	bl	80031f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800155c:	200a      	movs	r0, #10
 800155e:	f001 fe66 	bl	800322e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001562:	bf00      	nop
 8001564:	3728      	adds	r7, #40	@ 0x28
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40020400 	.word	0x40020400
 8001574:	40020000 	.word	0x40020000
 8001578:	40020800 	.word	0x40020800

0800157c <task4>:

/* USER CODE BEGIN 4 */
void task4(){
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	if(BSP_SD_Init()==MSD_OK)
 8001580:	f006 ff5e 	bl	8008440 <BSP_SD_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d12a      	bne.n	80015e0 <task4+0x64>
	{
		fresult=f_mount(&fatfs,"",1);
 800158a:	2201      	movs	r2, #1
 800158c:	4915      	ldr	r1, [pc, #84]	@ (80015e4 <task4+0x68>)
 800158e:	4816      	ldr	r0, [pc, #88]	@ (80015e8 <task4+0x6c>)
 8001590:	f008 fec2 	bl	800a318 <f_mount>
 8001594:	4603      	mov	r3, r0
 8001596:	461a      	mov	r2, r3
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <task4+0x70>)
 800159a:	701a      	strb	r2, [r3, #0]

		/* Open file with file name "stm32.txt" and file access is read */
			fresult=f_open(&myfile,"stm32.txt",FA_READ);
 800159c:	2201      	movs	r2, #1
 800159e:	4914      	ldr	r1, [pc, #80]	@ (80015f0 <task4+0x74>)
 80015a0:	4814      	ldr	r0, [pc, #80]	@ (80015f4 <task4+0x78>)
 80015a2:	f008 feff 	bl	800a3a4 <f_open>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <task4+0x70>)
 80015ac:	701a      	strb	r2, [r3, #0]
		/* Read all of file */
		  fresult=f_read(&myfile,read_data,f_size(&myfile),(UINT*)&byte_read);
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <task4+0x78>)
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <task4+0x7c>)
 80015b4:	4911      	ldr	r1, [pc, #68]	@ (80015fc <task4+0x80>)
 80015b6:	480f      	ldr	r0, [pc, #60]	@ (80015f4 <task4+0x78>)
 80015b8:	f009 f8ae 	bl	800a718 <f_read>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <task4+0x70>)
 80015c2:	701a      	strb	r2, [r3, #0]
			fresult=f_close(&myfile);
 80015c4:	480b      	ldr	r0, [pc, #44]	@ (80015f4 <task4+0x78>)
 80015c6:	f009 fa64 	bl	800aa92 <f_close>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <task4+0x70>)
 80015d0:	701a      	strb	r2, [r3, #0]

		/* Delete the file */
		fresult=f_unlink("stm32.txt");
 80015d2:	4807      	ldr	r0, [pc, #28]	@ (80015f0 <task4+0x74>)
 80015d4:	f009 fa87 	bl	800aae6 <f_unlink>
 80015d8:	4603      	mov	r3, r0
 80015da:	461a      	mov	r2, r3
 80015dc:	4b03      	ldr	r3, [pc, #12]	@ (80015ec <task4+0x70>)
 80015de:	701a      	strb	r2, [r3, #0]
	}

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	0800b6b8 	.word	0x0800b6b8
 80015e8:	2000007c 	.word	0x2000007c
 80015ec:	200002ac 	.word	0x200002ac
 80015f0:	0800b6bc 	.word	0x0800b6bc
 80015f4:	200002b0 	.word	0x200002b0
 80015f8:	20000544 	.word	0x20000544
 80015fc:	200004e0 	.word	0x200004e0

08001600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
}
 8001606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <Error_Handler+0x8>

0800160c <LCD_SPI_Send>:
// External SPI handle defined in main.c
extern SPI_HandleTypeDef hspi1;

// Low-level SPI communication functions
static void LCD_SPI_Send(uint8_t data)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8001616:	1df9      	adds	r1, r7, #7
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
 800161c:	2201      	movs	r2, #1
 800161e:	4803      	ldr	r0, [pc, #12]	@ (800162c <LCD_SPI_Send+0x20>)
 8001620:	f005 fc79 	bl	8006f16 <HAL_SPI_Transmit>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000620 	.word	0x20000620

08001630 <LCD_Write_Cmd>:

static void LCD_Write_Cmd(uint8_t cmd)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET); // DC low for command
 800163a:	2200      	movs	r2, #0
 800163c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001640:	480a      	ldr	r0, [pc, #40]	@ (800166c <LCD_Write_Cmd+0x3c>)
 8001642:	f001 fff3 	bl	800362c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001646:	2200      	movs	r2, #0
 8001648:	2180      	movs	r1, #128	@ 0x80
 800164a:	4808      	ldr	r0, [pc, #32]	@ (800166c <LCD_Write_Cmd+0x3c>)
 800164c:	f001 ffee 	bl	800362c <HAL_GPIO_WritePin>
    LCD_SPI_Send(cmd);
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff ffda 	bl	800160c <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001658:	2201      	movs	r2, #1
 800165a:	2180      	movs	r1, #128	@ 0x80
 800165c:	4803      	ldr	r0, [pc, #12]	@ (800166c <LCD_Write_Cmd+0x3c>)
 800165e:	f001 ffe5 	bl	800362c <HAL_GPIO_WritePin>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40020400 	.word	0x40020400

08001670 <LCD_Write_Data>:

static void LCD_Write_Data(uint8_t data)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 800167a:	2201      	movs	r2, #1
 800167c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001680:	480a      	ldr	r0, [pc, #40]	@ (80016ac <LCD_Write_Data+0x3c>)
 8001682:	f001 ffd3 	bl	800362c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001686:	2200      	movs	r2, #0
 8001688:	2180      	movs	r1, #128	@ 0x80
 800168a:	4808      	ldr	r0, [pc, #32]	@ (80016ac <LCD_Write_Data+0x3c>)
 800168c:	f001 ffce 	bl	800362c <HAL_GPIO_WritePin>
    LCD_SPI_Send(data);
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ffba 	bl	800160c <LCD_SPI_Send>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001698:	2201      	movs	r2, #1
 800169a:	2180      	movs	r1, #128	@ 0x80
 800169c:	4803      	ldr	r0, [pc, #12]	@ (80016ac <LCD_Write_Data+0x3c>)
 800169e:	f001 ffc5 	bl	800362c <HAL_GPIO_WritePin>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40020400 	.word	0x40020400

080016b0 <LCD_Write_Data16>:

static void LCD_Write_Data16(uint16_t data)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 80016ba:	2201      	movs	r2, #1
 80016bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016c0:	4810      	ldr	r0, [pc, #64]	@ (8001704 <LCD_Write_Data16+0x54>)
 80016c2:	f001 ffb3 	bl	800362c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 80016c6:	2200      	movs	r2, #0
 80016c8:	2180      	movs	r1, #128	@ 0x80
 80016ca:	480e      	ldr	r0, [pc, #56]	@ (8001704 <LCD_Write_Data16+0x54>)
 80016cc:	f001 ffae 	bl	800362c <HAL_GPIO_WritePin>
    uint8_t bytes[2];
    bytes[0] = (data >> 8) & 0xFF;
 80016d0:	88fb      	ldrh	r3, [r7, #6]
 80016d2:	0a1b      	lsrs	r3, r3, #8
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	733b      	strb	r3, [r7, #12]
    bytes[1] = data & 0xFF;
 80016da:	88fb      	ldrh	r3, [r7, #6]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	737b      	strb	r3, [r7, #13]
    HAL_SPI_Transmit(&hspi1, bytes, 2, HAL_MAX_DELAY);
 80016e0:	f107 010c 	add.w	r1, r7, #12
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295
 80016e8:	2202      	movs	r2, #2
 80016ea:	4807      	ldr	r0, [pc, #28]	@ (8001708 <LCD_Write_Data16+0x58>)
 80016ec:	f005 fc13 	bl	8006f16 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 80016f0:	2201      	movs	r2, #1
 80016f2:	2180      	movs	r1, #128	@ 0x80
 80016f4:	4803      	ldr	r0, [pc, #12]	@ (8001704 <LCD_Write_Data16+0x54>)
 80016f6:	f001 ff99 	bl	800362c <HAL_GPIO_WritePin>
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40020400 	.word	0x40020400
 8001708:	20000620 	.word	0x20000620

0800170c <LCD_Set_Address_Window>:

// Set drawing window
static void LCD_Set_Address_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800170c:	b590      	push	{r4, r7, lr}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4604      	mov	r4, r0
 8001714:	4608      	mov	r0, r1
 8001716:	4611      	mov	r1, r2
 8001718:	461a      	mov	r2, r3
 800171a:	4623      	mov	r3, r4
 800171c:	80fb      	strh	r3, [r7, #6]
 800171e:	4603      	mov	r3, r0
 8001720:	80bb      	strh	r3, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	807b      	strh	r3, [r7, #2]
 8001726:	4613      	mov	r3, r2
 8001728:	803b      	strh	r3, [r7, #0]
    LCD_Write_Cmd(0x2A); // Column Address Set
 800172a:	202a      	movs	r0, #42	@ 0x2a
 800172c:	f7ff ff80 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(x1 >> 8);
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	b29b      	uxth	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff99 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(x1 & 0xFF);
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	b2db      	uxtb	r3, r3
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff94 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(x2 >> 8);
 8001748:	887b      	ldrh	r3, [r7, #2]
 800174a:	0a1b      	lsrs	r3, r3, #8
 800174c:	b29b      	uxth	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ff8d 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(x2 & 0xFF);
 8001756:	887b      	ldrh	r3, [r7, #2]
 8001758:	b2db      	uxtb	r3, r3
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff88 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0x2B); // Page Address Set
 8001760:	202b      	movs	r0, #43	@ 0x2b
 8001762:	f7ff ff65 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(y1 >> 8);
 8001766:	88bb      	ldrh	r3, [r7, #4]
 8001768:	0a1b      	lsrs	r3, r3, #8
 800176a:	b29b      	uxth	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff7e 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(y1 & 0xFF);
 8001774:	88bb      	ldrh	r3, [r7, #4]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff79 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(y2 >> 8);
 800177e:	883b      	ldrh	r3, [r7, #0]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	b29b      	uxth	r3, r3
 8001784:	b2db      	uxtb	r3, r3
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff72 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(y2 & 0xFF);
 800178c:	883b      	ldrh	r3, [r7, #0]
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff6d 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0x2C); // Memory Write
 8001796:	202c      	movs	r0, #44	@ 0x2c
 8001798:	f7ff ff4a 	bl	8001630 <LCD_Write_Cmd>
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}

080017a4 <Manual_LCD_Init>:
        }
    }
}

void Manual_LCD_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
    // Hardware Reset
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2104      	movs	r1, #4
 80017ac:	4889      	ldr	r0, [pc, #548]	@ (80019d4 <Manual_LCD_Init+0x230>)
 80017ae:	f001 ff3d 	bl	800362c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80017b2:	2064      	movs	r0, #100	@ 0x64
 80017b4:	f001 fc20 	bl	8002ff8 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80017b8:	2201      	movs	r2, #1
 80017ba:	2104      	movs	r1, #4
 80017bc:	4885      	ldr	r0, [pc, #532]	@ (80019d4 <Manual_LCD_Init+0x230>)
 80017be:	f001 ff35 	bl	800362c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80017c2:	2064      	movs	r0, #100	@ 0x64
 80017c4:	f001 fc18 	bl	8002ff8 <HAL_Delay>

    // Backlight ON
    HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 80017c8:	2201      	movs	r2, #1
 80017ca:	2140      	movs	r1, #64	@ 0x40
 80017cc:	4881      	ldr	r0, [pc, #516]	@ (80019d4 <Manual_LCD_Init+0x230>)
 80017ce:	f001 ff2d 	bl	800362c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80017d2:	200a      	movs	r0, #10
 80017d4:	f001 fc10 	bl	8002ff8 <HAL_Delay>

    // Initialization sequence (Example for ILI9341 - ADJUST FOR YOUR LCD)
    LCD_Write_Cmd(0xCF); // Power Control B
 80017d8:	20cf      	movs	r0, #207	@ 0xcf
 80017da:	f7ff ff29 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 80017de:	2000      	movs	r0, #0
 80017e0:	f7ff ff46 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 80017e4:	20c1      	movs	r0, #193	@ 0xc1
 80017e6:	f7ff ff43 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x30);
 80017ea:	2030      	movs	r0, #48	@ 0x30
 80017ec:	f7ff ff40 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0xED); // Power on sequence control
 80017f0:	20ed      	movs	r0, #237	@ 0xed
 80017f2:	f7ff ff1d 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x64);
 80017f6:	2064      	movs	r0, #100	@ 0x64
 80017f8:	f7ff ff3a 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f7ff ff37 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x12);
 8001802:	2012      	movs	r0, #18
 8001804:	f7ff ff34 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x81);
 8001808:	2081      	movs	r0, #129	@ 0x81
 800180a:	f7ff ff31 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0xE8); // Driver timing control A
 800180e:	20e8      	movs	r0, #232	@ 0xe8
 8001810:	f7ff ff0e 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x85);
 8001814:	2085      	movs	r0, #133	@ 0x85
 8001816:	f7ff ff2b 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 800181a:	2000      	movs	r0, #0
 800181c:	f7ff ff28 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x78);
 8001820:	2078      	movs	r0, #120	@ 0x78
 8001822:	f7ff ff25 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0xCB); // Power control A
 8001826:	20cb      	movs	r0, #203	@ 0xcb
 8001828:	f7ff ff02 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x39);
 800182c:	2039      	movs	r0, #57	@ 0x39
 800182e:	f7ff ff1f 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x2C);
 8001832:	202c      	movs	r0, #44	@ 0x2c
 8001834:	f7ff ff1c 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff ff19 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x34);
 800183e:	2034      	movs	r0, #52	@ 0x34
 8001840:	f7ff ff16 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x02);
 8001844:	2002      	movs	r0, #2
 8001846:	f7ff ff13 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0xF7); // Pump ratio control
 800184a:	20f7      	movs	r0, #247	@ 0xf7
 800184c:	f7ff fef0 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x20);
 8001850:	2020      	movs	r0, #32
 8001852:	f7ff ff0d 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0xEA); // Driver timing control B
 8001856:	20ea      	movs	r0, #234	@ 0xea
 8001858:	f7ff feea 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 800185c:	2000      	movs	r0, #0
 800185e:	f7ff ff07 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001862:	2000      	movs	r0, #0
 8001864:	f7ff ff04 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0xC0);  // Power Control 1
 8001868:	20c0      	movs	r0, #192	@ 0xc0
 800186a:	f7ff fee1 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x23); // VRH[5:0]
 800186e:	2023      	movs	r0, #35	@ 0x23
 8001870:	f7ff fefe 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0xC1);  // Power Control 2
 8001874:	20c1      	movs	r0, #193	@ 0xc1
 8001876:	f7ff fedb 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x10); // SAP[2:0];BT[3:0]
 800187a:	2010      	movs	r0, #16
 800187c:	f7ff fef8 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0xC5);  // VCOM Control 1
 8001880:	20c5      	movs	r0, #197	@ 0xc5
 8001882:	f7ff fed5 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x3E); // Contrast
 8001886:	203e      	movs	r0, #62	@ 0x3e
 8001888:	f7ff fef2 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x28);
 800188c:	2028      	movs	r0, #40	@ 0x28
 800188e:	f7ff feef 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0xC7);  // VCOM Control 2
 8001892:	20c7      	movs	r0, #199	@ 0xc7
 8001894:	f7ff fecc 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x86); // --
 8001898:	2086      	movs	r0, #134	@ 0x86
 800189a:	f7ff fee9 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0x36); // Memory Access Control
 800189e:	2036      	movs	r0, #54	@ 0x36
 80018a0:	f7ff fec6 	bl	8001630 <LCD_Write_Cmd>
    // LCD_Write_Data(0x08); // Previous value
    LCD_Write_Data(0x28); // Try this: MV=1, MY=0, MX=0, BGR=1 (Landscape, X:T-B, Y:L-R)
 80018a4:	2028      	movs	r0, #40	@ 0x28
 80018a6:	f7ff fee3 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0x3A);  // Pixel Format Set
 80018aa:	203a      	movs	r0, #58	@ 0x3a
 80018ac:	f7ff fec0 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x55); // 16 bits/pixel
 80018b0:	2055      	movs	r0, #85	@ 0x55
 80018b2:	f7ff fedd 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0xB1); // Frame Rate Control (In Normal Mode/Full Colors)
 80018b6:	20b1      	movs	r0, #177	@ 0xb1
 80018b8:	f7ff feba 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 80018bc:	2000      	movs	r0, #0
 80018be:	f7ff fed7 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x18);
 80018c2:	2018      	movs	r0, #24
 80018c4:	f7ff fed4 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0xB6); // Display Function Control
 80018c8:	20b6      	movs	r0, #182	@ 0xb6
 80018ca:	f7ff feb1 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x08);
 80018ce:	2008      	movs	r0, #8
 80018d0:	f7ff fece 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x82);
 80018d4:	2082      	movs	r0, #130	@ 0x82
 80018d6:	f7ff fecb 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x27);
 80018da:	2027      	movs	r0, #39	@ 0x27
 80018dc:	f7ff fec8 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0xF2);  // Enable 3G
 80018e0:	20f2      	movs	r0, #242	@ 0xf2
 80018e2:	f7ff fea5 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x00); // 3Gamma Function Disable
 80018e6:	2000      	movs	r0, #0
 80018e8:	f7ff fec2 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0x26);  // Gamma Set
 80018ec:	2026      	movs	r0, #38	@ 0x26
 80018ee:	f7ff fe9f 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x01); // Gamma curve selected
 80018f2:	2001      	movs	r0, #1
 80018f4:	f7ff febc 	bl	8001670 <LCD_Write_Data>

    // ... (Positive and Negative Gamma Correction remain the same) ...
    LCD_Write_Cmd(0xE0); // Positive Gamma Correction
 80018f8:	20e0      	movs	r0, #224	@ 0xe0
 80018fa:	f7ff fe99 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x0F);
 80018fe:	200f      	movs	r0, #15
 8001900:	f7ff feb6 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001904:	2031      	movs	r0, #49	@ 0x31
 8001906:	f7ff feb3 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x2B);
 800190a:	202b      	movs	r0, #43	@ 0x2b
 800190c:	f7ff feb0 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 8001910:	200c      	movs	r0, #12
 8001912:	f7ff fead 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001916:	200e      	movs	r0, #14
 8001918:	f7ff feaa 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x08);
 800191c:	2008      	movs	r0, #8
 800191e:	f7ff fea7 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x4E);
 8001922:	204e      	movs	r0, #78	@ 0x4e
 8001924:	f7ff fea4 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0xF1);
 8001928:	20f1      	movs	r0, #241	@ 0xf1
 800192a:	f7ff fea1 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x37);
 800192e:	2037      	movs	r0, #55	@ 0x37
 8001930:	f7ff fe9e 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 8001934:	2007      	movs	r0, #7
 8001936:	f7ff fe9b 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x10);
 800193a:	2010      	movs	r0, #16
 800193c:	f7ff fe98 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001940:	2003      	movs	r0, #3
 8001942:	f7ff fe95 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001946:	200e      	movs	r0, #14
 8001948:	f7ff fe92 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x09);
 800194c:	2009      	movs	r0, #9
 800194e:	f7ff fe8f 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x00);
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fe8c 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0xE1); // Negative Gamma Correction
 8001958:	20e1      	movs	r0, #225	@ 0xe1
 800195a:	f7ff fe69 	bl	8001630 <LCD_Write_Cmd>
    LCD_Write_Data(0x00);
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff fe86 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x0E);
 8001964:	200e      	movs	r0, #14
 8001966:	f7ff fe83 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x14);
 800196a:	2014      	movs	r0, #20
 800196c:	f7ff fe80 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x03);
 8001970:	2003      	movs	r0, #3
 8001972:	f7ff fe7d 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x11);
 8001976:	2011      	movs	r0, #17
 8001978:	f7ff fe7a 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x07);
 800197c:	2007      	movs	r0, #7
 800197e:	f7ff fe77 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 8001982:	2031      	movs	r0, #49	@ 0x31
 8001984:	f7ff fe74 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0xC1);
 8001988:	20c1      	movs	r0, #193	@ 0xc1
 800198a:	f7ff fe71 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x48);
 800198e:	2048      	movs	r0, #72	@ 0x48
 8001990:	f7ff fe6e 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x08);
 8001994:	2008      	movs	r0, #8
 8001996:	f7ff fe6b 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 800199a:	200f      	movs	r0, #15
 800199c:	f7ff fe68 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x0C);
 80019a0:	200c      	movs	r0, #12
 80019a2:	f7ff fe65 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x31);
 80019a6:	2031      	movs	r0, #49	@ 0x31
 80019a8:	f7ff fe62 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x36);
 80019ac:	2036      	movs	r0, #54	@ 0x36
 80019ae:	f7ff fe5f 	bl	8001670 <LCD_Write_Data>
    LCD_Write_Data(0x0F);
 80019b2:	200f      	movs	r0, #15
 80019b4:	f7ff fe5c 	bl	8001670 <LCD_Write_Data>

    LCD_Write_Cmd(0x11); // Exit Sleep
 80019b8:	2011      	movs	r0, #17
 80019ba:	f7ff fe39 	bl	8001630 <LCD_Write_Cmd>
    HAL_Delay(120);
 80019be:	2078      	movs	r0, #120	@ 0x78
 80019c0:	f001 fb1a 	bl	8002ff8 <HAL_Delay>
    LCD_Write_Cmd(0x29); // Display ON
 80019c4:	2029      	movs	r0, #41	@ 0x29
 80019c6:	f7ff fe33 	bl	8001630 <LCD_Write_Cmd>

    Manual_LCD_Clear(COLOR_BLACK);
 80019ca:	2000      	movs	r0, #0
 80019cc:	f000 f804 	bl	80019d8 <Manual_LCD_Clear>
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40020400 	.word	0x40020400

080019d8 <Manual_LCD_Clear>:

void Manual_LCD_Clear(uint16_t color)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
    LCD_Set_Address_Window(0, 0, LCD_WIDTH - 1, LCD_HEIGHT - 1);
 80019e2:	f240 133f 	movw	r3, #319	@ 0x13f
 80019e6:	22ef      	movs	r2, #239	@ 0xef
 80019e8:	2100      	movs	r1, #0
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fe8e 	bl	800170c <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 80019f0:	2201      	movs	r2, #1
 80019f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019f6:	4815      	ldr	r0, [pc, #84]	@ (8001a4c <Manual_LCD_Clear+0x74>)
 80019f8:	f001 fe18 	bl	800362c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 80019fc:	2200      	movs	r2, #0
 80019fe:	2180      	movs	r1, #128	@ 0x80
 8001a00:	4812      	ldr	r0, [pc, #72]	@ (8001a4c <Manual_LCD_Clear+0x74>)
 8001a02:	f001 fe13 	bl	800362c <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	723b      	strb	r3, [r7, #8]
 8001a10:	88fb      	ldrh	r3, [r7, #6]
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	e00a      	b.n	8001a32 <Manual_LCD_Clear+0x5a>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8001a1c:	f107 0108 	add.w	r1, r7, #8
 8001a20:	f04f 33ff 	mov.w	r3, #4294967295
 8001a24:	2202      	movs	r2, #2
 8001a26:	480a      	ldr	r0, [pc, #40]	@ (8001a50 <Manual_LCD_Clear+0x78>)
 8001a28:	f005 fa75 	bl	8006f16 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)LCD_WIDTH * LCD_HEIGHT; i++)
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	3301      	adds	r3, #1
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8001a38:	d3f0      	bcc.n	8001a1c <Manual_LCD_Clear+0x44>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2180      	movs	r1, #128	@ 0x80
 8001a3e:	4803      	ldr	r0, [pc, #12]	@ (8001a4c <Manual_LCD_Clear+0x74>)
 8001a40:	f001 fdf4 	bl	800362c <HAL_GPIO_WritePin>
}
 8001a44:	bf00      	nop
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	20000620 	.word	0x20000620

08001a54 <Manual_LCD_DrawPixel>:

void Manual_LCD_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	80fb      	strh	r3, [r7, #6]
 8001a5e:	460b      	mov	r3, r1
 8001a60:	80bb      	strh	r3, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	807b      	strh	r3, [r7, #2]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT)
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	2bef      	cmp	r3, #239	@ 0xef
 8001a6a:	d80e      	bhi.n	8001a8a <Manual_LCD_DrawPixel+0x36>
 8001a6c:	88bb      	ldrh	r3, [r7, #4]
 8001a6e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001a72:	d20a      	bcs.n	8001a8a <Manual_LCD_DrawPixel+0x36>
        return;
    LCD_Set_Address_Window(x, y, x, y);
 8001a74:	88bb      	ldrh	r3, [r7, #4]
 8001a76:	88fa      	ldrh	r2, [r7, #6]
 8001a78:	88b9      	ldrh	r1, [r7, #4]
 8001a7a:	88f8      	ldrh	r0, [r7, #6]
 8001a7c:	f7ff fe46 	bl	800170c <LCD_Set_Address_Window>
    LCD_Write_Data16(color);
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fe14 	bl	80016b0 <LCD_Write_Data16>
 8001a88:	e000      	b.n	8001a8c <Manual_LCD_DrawPixel+0x38>
        return;
 8001a8a:	bf00      	nop
}
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <Manual_LCD_DrawLine>:

void Manual_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8001a92:	b590      	push	{r4, r7, lr}
 8001a94:	b087      	sub	sp, #28
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4604      	mov	r4, r0
 8001a9a:	4608      	mov	r0, r1
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4623      	mov	r3, r4
 8001aa2:	80fb      	strh	r3, [r7, #6]
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	80bb      	strh	r3, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y2 - y1) > abs(x2 - x1);
 8001ab0:	883a      	ldrh	r2, [r7, #0]
 8001ab2:	88bb      	ldrh	r3, [r7, #4]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001aba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001abe:	8879      	ldrh	r1, [r7, #2]
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	1acb      	subs	r3, r1, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	bfb8      	it	lt
 8001ac8:	425b      	neglt	r3, r3
 8001aca:	429a      	cmp	r2, r3
 8001acc:	bfcc      	ite	gt
 8001ace:	2301      	movgt	r3, #1
 8001ad0:	2300      	movle	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	827b      	strh	r3, [r7, #18]
    if (steep)
 8001ad6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <Manual_LCD_DrawLine+0x64>
    {
        uint16_t temp;
        temp = x1;
 8001ade:	88fb      	ldrh	r3, [r7, #6]
 8001ae0:	823b      	strh	r3, [r7, #16]
        x1 = y1;
 8001ae2:	88bb      	ldrh	r3, [r7, #4]
 8001ae4:	80fb      	strh	r3, [r7, #6]
        y1 = temp;
 8001ae6:	8a3b      	ldrh	r3, [r7, #16]
 8001ae8:	80bb      	strh	r3, [r7, #4]
        temp = x2;
 8001aea:	887b      	ldrh	r3, [r7, #2]
 8001aec:	823b      	strh	r3, [r7, #16]
        x2 = y2;
 8001aee:	883b      	ldrh	r3, [r7, #0]
 8001af0:	807b      	strh	r3, [r7, #2]
        y2 = temp;
 8001af2:	8a3b      	ldrh	r3, [r7, #16]
 8001af4:	803b      	strh	r3, [r7, #0]
    }
    if (x1 > x2)
 8001af6:	88fa      	ldrh	r2, [r7, #6]
 8001af8:	887b      	ldrh	r3, [r7, #2]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d90b      	bls.n	8001b16 <Manual_LCD_DrawLine+0x84>
    {
        uint16_t temp;
        temp = x1;
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	81fb      	strh	r3, [r7, #14]
        x1 = x2;
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	80fb      	strh	r3, [r7, #6]
        x2 = temp;
 8001b06:	89fb      	ldrh	r3, [r7, #14]
 8001b08:	807b      	strh	r3, [r7, #2]
        temp = y1;
 8001b0a:	88bb      	ldrh	r3, [r7, #4]
 8001b0c:	81fb      	strh	r3, [r7, #14]
        y1 = y2;
 8001b0e:	883b      	ldrh	r3, [r7, #0]
 8001b10:	80bb      	strh	r3, [r7, #4]
        y2 = temp;
 8001b12:	89fb      	ldrh	r3, [r7, #14]
 8001b14:	803b      	strh	r3, [r7, #0]
    }
    int16_t dx = x2 - x1;
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	81bb      	strh	r3, [r7, #12]
    int16_t dy = abs(y2 - y1);
 8001b20:	883a      	ldrh	r2, [r7, #0]
 8001b22:	88bb      	ldrh	r3, [r7, #4]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	bfb8      	it	lt
 8001b2a:	425b      	neglt	r3, r3
 8001b2c:	817b      	strh	r3, [r7, #10]
    int16_t err = dx / 2;
 8001b2e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001b32:	0fda      	lsrs	r2, r3, #31
 8001b34:	4413      	add	r3, r2
 8001b36:	105b      	asrs	r3, r3, #1
 8001b38:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;
    if (y1 < y2)
 8001b3a:	88ba      	ldrh	r2, [r7, #4]
 8001b3c:	883b      	ldrh	r3, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d202      	bcs.n	8001b48 <Manual_LCD_DrawLine+0xb6>
        ystep = 1;
 8001b42:	2301      	movs	r3, #1
 8001b44:	82bb      	strh	r3, [r7, #20]
 8001b46:	e029      	b.n	8001b9c <Manual_LCD_DrawLine+0x10a>
    else
        ystep = -1;
 8001b48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b4c:	82bb      	strh	r3, [r7, #20]

    for (; x1 <= x2; x1++)
 8001b4e:	e025      	b.n	8001b9c <Manual_LCD_DrawLine+0x10a>
    {
        if (steep)
 8001b50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <Manual_LCD_DrawLine+0xd4>
            Manual_LCD_DrawPixel(y1, x1, color);
 8001b58:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001b5a:	88f9      	ldrh	r1, [r7, #6]
 8001b5c:	88bb      	ldrh	r3, [r7, #4]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff78 	bl	8001a54 <Manual_LCD_DrawPixel>
 8001b64:	e005      	b.n	8001b72 <Manual_LCD_DrawLine+0xe0>
        else
            Manual_LCD_DrawPixel(x1, y1, color);
 8001b66:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001b68:	88b9      	ldrh	r1, [r7, #4]
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff71 	bl	8001a54 <Manual_LCD_DrawPixel>
        err -= dy;
 8001b72:	8afa      	ldrh	r2, [r7, #22]
 8001b74:	897b      	ldrh	r3, [r7, #10]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	82fb      	strh	r3, [r7, #22]
        if (err < 0)
 8001b7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	da08      	bge.n	8001b96 <Manual_LCD_DrawLine+0x104>
        {
            y1 += ystep;
 8001b84:	8aba      	ldrh	r2, [r7, #20]
 8001b86:	88bb      	ldrh	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	80bb      	strh	r3, [r7, #4]
            err += dx;
 8001b8c:	8afa      	ldrh	r2, [r7, #22]
 8001b8e:	89bb      	ldrh	r3, [r7, #12]
 8001b90:	4413      	add	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	82fb      	strh	r3, [r7, #22]
    for (; x1 <= x2; x1++)
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	80fb      	strh	r3, [r7, #6]
 8001b9c:	88fa      	ldrh	r2, [r7, #6]
 8001b9e:	887b      	ldrh	r3, [r7, #2]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d9d5      	bls.n	8001b50 <Manual_LCD_DrawLine+0xbe>
        }
    }
}
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
 8001ba8:	371c      	adds	r7, #28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd90      	pop	{r4, r7, pc}

08001bae <Manual_LCD_DrawRectangle>:

void Manual_LCD_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001bae:	b590      	push	{r4, r7, lr}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af02      	add	r7, sp, #8
 8001bb4:	4604      	mov	r4, r0
 8001bb6:	4608      	mov	r0, r1
 8001bb8:	4611      	mov	r1, r2
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4623      	mov	r3, r4
 8001bbe:	80fb      	strh	r3, [r7, #6]
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	80bb      	strh	r3, [r7, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	807b      	strh	r3, [r7, #2]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	2bef      	cmp	r3, #239	@ 0xef
 8001bd0:	d865      	bhi.n	8001c9e <Manual_LCD_DrawRectangle+0xf0>
 8001bd2:	88bb      	ldrh	r3, [r7, #4]
 8001bd4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001bd8:	d261      	bcs.n	8001c9e <Manual_LCD_DrawRectangle+0xf0>
        return;
    if ((x + width - 1) >= LCD_WIDTH)
 8001bda:	88fa      	ldrh	r2, [r7, #6]
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	4413      	add	r3, r2
 8001be0:	2bf0      	cmp	r3, #240	@ 0xf0
 8001be2:	dd03      	ble.n	8001bec <Manual_LCD_DrawRectangle+0x3e>
        width = LCD_WIDTH - x;
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001bea:	807b      	strh	r3, [r7, #2]
    if ((y + height - 1) >= LCD_HEIGHT)
 8001bec:	88ba      	ldrh	r2, [r7, #4]
 8001bee:	883b      	ldrh	r3, [r7, #0]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001bf6:	dd03      	ble.n	8001c00 <Manual_LCD_DrawRectangle+0x52>
        height = LCD_HEIGHT - y;
 8001bf8:	88bb      	ldrh	r3, [r7, #4]
 8001bfa:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001bfe:	803b      	strh	r3, [r7, #0]

    Manual_LCD_DrawLine(x, y, x + width - 1, y, color);
 8001c00:	88fa      	ldrh	r2, [r7, #6]
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	4413      	add	r3, r2
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	88bc      	ldrh	r4, [r7, #4]
 8001c0e:	88b9      	ldrh	r1, [r7, #4]
 8001c10:	88f8      	ldrh	r0, [r7, #6]
 8001c12:	8b3b      	ldrh	r3, [r7, #24]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	4623      	mov	r3, r4
 8001c18:	f7ff ff3b 	bl	8001a92 <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y + height - 1, x + width - 1, y + height - 1, color);
 8001c1c:	88ba      	ldrh	r2, [r7, #4]
 8001c1e:	883b      	ldrh	r3, [r7, #0]
 8001c20:	4413      	add	r3, r2
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b299      	uxth	r1, r3
 8001c28:	88fa      	ldrh	r2, [r7, #6]
 8001c2a:	887b      	ldrh	r3, [r7, #2]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29c      	uxth	r4, r3
 8001c34:	88ba      	ldrh	r2, [r7, #4]
 8001c36:	883b      	ldrh	r3, [r7, #0]
 8001c38:	4413      	add	r3, r2
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	88f8      	ldrh	r0, [r7, #6]
 8001c42:	8b3b      	ldrh	r3, [r7, #24]
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	4613      	mov	r3, r2
 8001c48:	4622      	mov	r2, r4
 8001c4a:	f7ff ff22 	bl	8001a92 <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x, y, x, y + height - 1, color);
 8001c4e:	88ba      	ldrh	r2, [r7, #4]
 8001c50:	883b      	ldrh	r3, [r7, #0]
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29c      	uxth	r4, r3
 8001c5a:	88fa      	ldrh	r2, [r7, #6]
 8001c5c:	88b9      	ldrh	r1, [r7, #4]
 8001c5e:	88f8      	ldrh	r0, [r7, #6]
 8001c60:	8b3b      	ldrh	r3, [r7, #24]
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	4623      	mov	r3, r4
 8001c66:	f7ff ff14 	bl	8001a92 <Manual_LCD_DrawLine>
    Manual_LCD_DrawLine(x + width - 1, y, x + width - 1, y + height - 1, color);
 8001c6a:	88fa      	ldrh	r2, [r7, #6]
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	4413      	add	r3, r2
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	3b01      	subs	r3, #1
 8001c74:	b298      	uxth	r0, r3
 8001c76:	88fa      	ldrh	r2, [r7, #6]
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29c      	uxth	r4, r3
 8001c82:	88ba      	ldrh	r2, [r7, #4]
 8001c84:	883b      	ldrh	r3, [r7, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	b29a      	uxth	r2, r3
 8001c8e:	88b9      	ldrh	r1, [r7, #4]
 8001c90:	8b3b      	ldrh	r3, [r7, #24]
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	4613      	mov	r3, r2
 8001c96:	4622      	mov	r2, r4
 8001c98:	f7ff fefb 	bl	8001a92 <Manual_LCD_DrawLine>
 8001c9c:	e000      	b.n	8001ca0 <Manual_LCD_DrawRectangle+0xf2>
        return;
 8001c9e:	bf00      	nop
}
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd90      	pop	{r4, r7, pc}
	...

08001ca8 <Manual_LCD_FillRectangle>:

void Manual_LCD_FillRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4604      	mov	r4, r0
 8001cb0:	4608      	mov	r0, r1
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4623      	mov	r3, r4
 8001cb8:	80fb      	strh	r3, [r7, #6]
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80bb      	strh	r3, [r7, #4]
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	807b      	strh	r3, [r7, #2]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	803b      	strh	r3, [r7, #0]
    if ((x >= LCD_WIDTH) || (y >= LCD_HEIGHT))
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	2bef      	cmp	r3, #239	@ 0xef
 8001cca:	d855      	bhi.n	8001d78 <Manual_LCD_FillRectangle+0xd0>
 8001ccc:	88bb      	ldrh	r3, [r7, #4]
 8001cce:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001cd2:	d251      	bcs.n	8001d78 <Manual_LCD_FillRectangle+0xd0>
        return;
    if ((x + width) > LCD_WIDTH)
 8001cd4:	88fa      	ldrh	r2, [r7, #6]
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	4413      	add	r3, r2
 8001cda:	2bf0      	cmp	r3, #240	@ 0xf0
 8001cdc:	dd03      	ble.n	8001ce6 <Manual_LCD_FillRectangle+0x3e>
        width = LCD_WIDTH - x;
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001ce4:	807b      	strh	r3, [r7, #2]
    if ((y + height) > LCD_HEIGHT)
 8001ce6:	88ba      	ldrh	r2, [r7, #4]
 8001ce8:	883b      	ldrh	r3, [r7, #0]
 8001cea:	4413      	add	r3, r2
 8001cec:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001cf0:	dd03      	ble.n	8001cfa <Manual_LCD_FillRectangle+0x52>
        height = LCD_HEIGHT - y;
 8001cf2:	88bb      	ldrh	r3, [r7, #4]
 8001cf4:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8001cf8:	803b      	strh	r3, [r7, #0]

    LCD_Set_Address_Window(x, y, x + width - 1, y + height - 1);
 8001cfa:	88fa      	ldrh	r2, [r7, #6]
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	4413      	add	r3, r2
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	3b01      	subs	r3, #1
 8001d04:	b29c      	uxth	r4, r3
 8001d06:	88ba      	ldrh	r2, [r7, #4]
 8001d08:	883b      	ldrh	r3, [r7, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	88b9      	ldrh	r1, [r7, #4]
 8001d14:	88f8      	ldrh	r0, [r7, #6]
 8001d16:	4622      	mov	r2, r4
 8001d18:	f7ff fcf8 	bl	800170c <LCD_Set_Address_Window>
    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);   // DC high for data
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d22:	4817      	ldr	r0, [pc, #92]	@ (8001d80 <Manual_LCD_FillRectangle+0xd8>)
 8001d24:	f001 fc82 	bl	800362c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET); // CS low to select
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2180      	movs	r1, #128	@ 0x80
 8001d2c:	4814      	ldr	r0, [pc, #80]	@ (8001d80 <Manual_LCD_FillRectangle+0xd8>)
 8001d2e:	f001 fc7d 	bl	800362c <HAL_GPIO_WritePin>

    uint8_t color_bytes[2] = {(color >> 8) & 0xFF, color & 0xFF};
 8001d32:	8c3b      	ldrh	r3, [r7, #32]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	723b      	strb	r3, [r7, #8]
 8001d3c:	8c3b      	ldrh	r3, [r7, #32]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	727b      	strb	r3, [r7, #9]
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	e00a      	b.n	8001d5e <Manual_LCD_FillRectangle+0xb6>
    {
        HAL_SPI_Transmit(&hspi1, color_bytes, 2, HAL_MAX_DELAY);
 8001d48:	f107 0108 	add.w	r1, r7, #8
 8001d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d50:	2202      	movs	r2, #2
 8001d52:	480c      	ldr	r0, [pc, #48]	@ (8001d84 <Manual_LCD_FillRectangle+0xdc>)
 8001d54:	f005 f8df 	bl	8006f16 <HAL_SPI_Transmit>
    for (uint32_t i = 0; i < (uint32_t)width * height; i++)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	883a      	ldrh	r2, [r7, #0]
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d3ed      	bcc.n	8001d48 <Manual_LCD_FillRectangle+0xa0>
    }
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET); // CS high to deselect
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2180      	movs	r1, #128	@ 0x80
 8001d70:	4803      	ldr	r0, [pc, #12]	@ (8001d80 <Manual_LCD_FillRectangle+0xd8>)
 8001d72:	f001 fc5b 	bl	800362c <HAL_GPIO_WritePin>
 8001d76:	e000      	b.n	8001d7a <Manual_LCD_FillRectangle+0xd2>
        return;
 8001d78:	bf00      	nop
}
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}
 8001d80:	40020400 	.word	0x40020400
 8001d84:	20000620 	.word	0x20000620

08001d88 <Manual_LCD_DrawChar>:
// A proper implementation would look up character data in a font table.
// Placeholder for font data - you need to define this
extern const unsigned char Font5x7[][5]; // Example: needs to be defined in font.c

void Manual_LCD_DrawChar(uint16_t x, uint16_t y, char c, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 8001d88:	b590      	push	{r4, r7, lr}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	4604      	mov	r4, r0
 8001d90:	4608      	mov	r0, r1
 8001d92:	4611      	mov	r1, r2
 8001d94:	461a      	mov	r2, r3
 8001d96:	4623      	mov	r3, r4
 8001d98:	80fb      	strh	r3, [r7, #6]
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80bb      	strh	r3, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	70fb      	strb	r3, [r7, #3]
 8001da2:	4613      	mov	r3, r2
 8001da4:	803b      	strh	r3, [r7, #0]
    if (x >= LCD_WIDTH || y >= LCD_HEIGHT || (x + 5 * size) > LCD_WIDTH || (y + 7 * size) > LCD_HEIGHT)
 8001da6:	88fb      	ldrh	r3, [r7, #6]
 8001da8:	2bef      	cmp	r3, #239	@ 0xef
 8001daa:	f200 80d1 	bhi.w	8001f50 <Manual_LCD_DrawChar+0x1c8>
 8001dae:	88bb      	ldrh	r3, [r7, #4]
 8001db0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001db4:	f080 80cc 	bcs.w	8001f50 <Manual_LCD_DrawChar+0x1c8>
 8001db8:	88f9      	ldrh	r1, [r7, #6]
 8001dba:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	2bf0      	cmp	r3, #240	@ 0xf0
 8001dc8:	f300 80c2 	bgt.w	8001f50 <Manual_LCD_DrawChar+0x1c8>
 8001dcc:	88b9      	ldrh	r1, [r7, #4]
 8001dce:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	1a9b      	subs	r3, r3, r2
 8001dd8:	440b      	add	r3, r1
 8001dda:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001dde:	f300 80b7 	bgt.w	8001f50 <Manual_LCD_DrawChar+0x1c8>
    {
        return; // Character won't fit
    }

    if (c < ' ' || c > '~')
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	2b1f      	cmp	r3, #31
 8001de6:	d902      	bls.n	8001dee <Manual_LCD_DrawChar+0x66>
 8001de8:	78fb      	ldrb	r3, [r7, #3]
 8001dea:	2b7e      	cmp	r3, #126	@ 0x7e
 8001dec:	d901      	bls.n	8001df2 <Manual_LCD_DrawChar+0x6a>
        c = '?'; // Handle non-printable characters
 8001dee:	233f      	movs	r3, #63	@ 0x3f
 8001df0:	70fb      	strb	r3, [r7, #3]

    for (uint8_t i = 0; i < 5; i++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	73fb      	strb	r3, [r7, #15]
 8001df6:	e088      	b.n	8001f0a <Manual_LCD_DrawChar+0x182>
    { // Width of char
        uint8_t line = Font5x7[c - ' '][i];
 8001df8:	78fb      	ldrb	r3, [r7, #3]
 8001dfa:	f1a3 0220 	sub.w	r2, r3, #32
 8001dfe:	7bf9      	ldrb	r1, [r7, #15]
 8001e00:	4855      	ldr	r0, [pc, #340]	@ (8001f58 <Manual_LCD_DrawChar+0x1d0>)
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	4403      	add	r3, r0
 8001e0a:	440b      	add	r3, r1
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	737b      	strb	r3, [r7, #13]
 8001e14:	e073      	b.n	8001efe <Manual_LCD_DrawChar+0x176>
        { // Height of char
            if (line & 0x01)
 8001e16:	7bbb      	ldrb	r3, [r7, #14]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d034      	beq.n	8001e8a <Manual_LCD_DrawChar+0x102>
            { // Check bit
                if (size == 1)
 8001e20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d10e      	bne.n	8001e46 <Manual_LCD_DrawChar+0xbe>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, charColor);
 8001e28:	7bfb      	ldrb	r3, [r7, #15]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	4413      	add	r3, r2
 8001e30:	b298      	uxth	r0, r3
 8001e32:	7b7b      	ldrb	r3, [r7, #13]
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	88bb      	ldrh	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	883a      	ldrh	r2, [r7, #0]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7ff fe08 	bl	8001a54 <Manual_LCD_DrawPixel>
 8001e44:	e055      	b.n	8001ef2 <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, charColor);
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	fb12 f303 	smulbb	r3, r2, r3
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	4413      	add	r3, r2
 8001e5a:	b298      	uxth	r0, r3
 8001e5c:	7b7b      	ldrb	r3, [r7, #13]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	fb12 f303 	smulbb	r3, r2, r3
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	88bb      	ldrh	r3, [r7, #4]
 8001e6e:	4413      	add	r3, r2
 8001e70:	b299      	uxth	r1, r3
 8001e72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e7c:	b29c      	uxth	r4, r3
 8001e7e:	883b      	ldrh	r3, [r7, #0]
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	4623      	mov	r3, r4
 8001e84:	f7ff ff10 	bl	8001ca8 <Manual_LCD_FillRectangle>
 8001e88:	e033      	b.n	8001ef2 <Manual_LCD_DrawChar+0x16a>
                }
            }
            else
            {
                if (size == 1)
 8001e8a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d10e      	bne.n	8001eb0 <Manual_LCD_DrawChar+0x128>
                {
                    Manual_LCD_DrawPixel(x + i, y + j, bgColor);
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	4413      	add	r3, r2
 8001e9a:	b298      	uxth	r0, r3
 8001e9c:	7b7b      	ldrb	r3, [r7, #13]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	88bb      	ldrh	r3, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	8c3a      	ldrh	r2, [r7, #32]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f7ff fdd3 	bl	8001a54 <Manual_LCD_DrawPixel>
 8001eae:	e020      	b.n	8001ef2 <Manual_LCD_DrawChar+0x16a>
                }
                else
                {
                    Manual_LCD_FillRectangle(x + i * size, y + j * size, size, size, bgColor);
 8001eb0:	7bfb      	ldrb	r3, [r7, #15]
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	fb12 f303 	smulbb	r3, r2, r3
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	88fb      	ldrh	r3, [r7, #6]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	b298      	uxth	r0, r3
 8001ec6:	7b7b      	ldrb	r3, [r7, #13]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	fb12 f303 	smulbb	r3, r2, r3
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	88bb      	ldrh	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	b299      	uxth	r1, r3
 8001edc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ee6:	b29c      	uxth	r4, r3
 8001ee8:	8c3b      	ldrh	r3, [r7, #32]
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	4623      	mov	r3, r4
 8001eee:	f7ff fedb 	bl	8001ca8 <Manual_LCD_FillRectangle>
                }
            }
            line >>= 1;
 8001ef2:	7bbb      	ldrb	r3, [r7, #14]
 8001ef4:	085b      	lsrs	r3, r3, #1
 8001ef6:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 7; j++)
 8001ef8:	7b7b      	ldrb	r3, [r7, #13]
 8001efa:	3301      	adds	r3, #1
 8001efc:	737b      	strb	r3, [r7, #13]
 8001efe:	7b7b      	ldrb	r3, [r7, #13]
 8001f00:	2b06      	cmp	r3, #6
 8001f02:	d988      	bls.n	8001e16 <Manual_LCD_DrawChar+0x8e>
    for (uint8_t i = 0; i < 5; i++)
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	3301      	adds	r3, #1
 8001f08:	73fb      	strb	r3, [r7, #15]
 8001f0a:	7bfb      	ldrb	r3, [r7, #15]
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	f67f af73 	bls.w	8001df8 <Manual_LCD_DrawChar+0x70>
        }
    }
    // Draw a small gap for characters if size > 1 or if you want background fill for the gap
    if (size > 0)
 8001f12:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d01b      	beq.n	8001f52 <Manual_LCD_DrawChar+0x1ca>
    { // Fill the column after the character (for spacing)
        Manual_LCD_FillRectangle(x + 5 * size, y, size, 7 * size, bgColor);
 8001f1a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	461a      	mov	r2, r3
 8001f22:	0092      	lsls	r2, r2, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b298      	uxth	r0, r3
 8001f2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	00c9      	lsls	r1, r1, #3
 8001f3e:	1acb      	subs	r3, r1, r3
 8001f40:	b29c      	uxth	r4, r3
 8001f42:	88b9      	ldrh	r1, [r7, #4]
 8001f44:	8c3b      	ldrh	r3, [r7, #32]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	4623      	mov	r3, r4
 8001f4a:	f7ff fead 	bl	8001ca8 <Manual_LCD_FillRectangle>
 8001f4e:	e000      	b.n	8001f52 <Manual_LCD_DrawChar+0x1ca>
        return; // Character won't fit
 8001f50:	bf00      	nop
    }
}
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd90      	pop	{r4, r7, pc}
 8001f58:	0800b758 	.word	0x0800b758

08001f5c <Manual_LCD_DrawString>:

void Manual_LCD_DrawString(uint16_t x, uint16_t y, const char *str, uint16_t charColor, uint16_t bgColor, uint8_t size)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af02      	add	r7, sp, #8
 8001f62:	60ba      	str	r2, [r7, #8]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4603      	mov	r3, r0
 8001f68:	81fb      	strh	r3, [r7, #14]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	81bb      	strh	r3, [r7, #12]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	80fb      	strh	r3, [r7, #6]
    while (*str)
 8001f72:	e037      	b.n	8001fe4 <Manual_LCD_DrawString+0x88>
    {
        Manual_LCD_DrawChar(x, y, *str, charColor, bgColor, size);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	781a      	ldrb	r2, [r3, #0]
 8001f78:	88fc      	ldrh	r4, [r7, #6]
 8001f7a:	89b9      	ldrh	r1, [r7, #12]
 8001f7c:	89f8      	ldrh	r0, [r7, #14]
 8001f7e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	8c3b      	ldrh	r3, [r7, #32]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	4623      	mov	r3, r4
 8001f8a:	f7ff fefd 	bl	8001d88 <Manual_LCD_DrawChar>
        x += 6 * size; // Advance X position (5 for char + 1 for spacing)
 8001f8e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	0052      	lsls	r2, r2, #1
 8001f98:	4413      	add	r3, r2
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	89fb      	ldrh	r3, [r7, #14]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	81fb      	strh	r3, [r7, #14]
        if (x + 5 * size >= LCD_WIDTH)
 8001fa4:	89f9      	ldrh	r1, [r7, #14]
 8001fa6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	2bef      	cmp	r3, #239	@ 0xef
 8001fb4:	dd09      	ble.n	8001fca <Manual_LCD_DrawString+0x6e>
        { // Simple wrap
            x = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	81fb      	strh	r3, [r7, #14]
            y += 8 * size; // Advance Y position
 8001fba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	89bb      	ldrh	r3, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	81bb      	strh	r3, [r7, #12]
        }
        if (y + 7 * size >= LCD_HEIGHT)
 8001fca:	89b9      	ldrh	r1, [r7, #12]
 8001fcc:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001fdc:	da07      	bge.n	8001fee <Manual_LCD_DrawString+0x92>
            break; // Out of screen
        str++;
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	60bb      	str	r3, [r7, #8]
    while (*str)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1c3      	bne.n	8001f74 <Manual_LCD_DrawString+0x18>
    }
}
 8001fec:	e000      	b.n	8001ff0 <Manual_LCD_DrawString+0x94>
            break; // Out of screen
 8001fee:	bf00      	nop
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}

08001ff8 <Manual_LCD_DrawLayout>:

void Manual_LCD_DrawLayout(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b09a      	sub	sp, #104	@ 0x68
 8001ffc:	af02      	add	r7, sp, #8
    // Clear screen with blue background
    Manual_LCD_Clear(COLOR_BLUE);
 8001ffe:	201f      	movs	r0, #31
 8002000:	f7ff fcea 	bl	80019d8 <Manual_LCD_Clear>

    uint16_t text_color = COLOR_WHITE;
 8002004:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002008:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
    uint16_t box_fill_color = COLOR_BLACK;
 800200c:	2300      	movs	r3, #0
 800200e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    uint16_t box_border_color = COLOR_WHITE;
 8002012:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002016:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    uint8_t font_size = 1;
 800201a:	2301      	movs	r3, #1
 800201c:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
    uint8_t char_height = 7; // For 5x7 font at size 1
 8002020:	2307      	movs	r3, #7
 8002022:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
    // uint8_t char_width_with_spacing = 6; // For 5x7 font at size 1

    // 1. Top Info Box: "Nhom: [nhom 01]"
    const char *info_text = "Nhom: [nhom 01]";
 8002026:	4bb8      	ldr	r3, [pc, #736]	@ (8002308 <Manual_LCD_DrawLayout+0x310>)
 8002028:	657b      	str	r3, [r7, #84]	@ 0x54
    uint16_t info_text_x = MARGIN + 5;
 800202a:	230f      	movs	r3, #15
 800202c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    uint16_t info_text_y = INFO_BOX_Y + (INFO_BOX_H - char_height * font_size) / 2;
 8002030:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002034:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 8002038:	fb02 f303 	mul.w	r3, r2, r3
 800203c:	f1c3 031e 	rsb	r3, r3, #30
 8002040:	0fda      	lsrs	r2, r3, #31
 8002042:	4413      	add	r3, r2
 8002044:	105b      	asrs	r3, r3, #1
 8002046:	b29b      	uxth	r3, r3
 8002048:	330a      	adds	r3, #10
 800204a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

    Manual_LCD_FillRectangle(MARGIN, INFO_BOX_Y, INFO_BOX_W, INFO_BOX_H, box_fill_color);
 800204e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	231e      	movs	r3, #30
 8002056:	2296      	movs	r2, #150	@ 0x96
 8002058:	210a      	movs	r1, #10
 800205a:	200a      	movs	r0, #10
 800205c:	f7ff fe24 	bl	8001ca8 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(MARGIN, INFO_BOX_Y, INFO_BOX_W, INFO_BOX_H, box_border_color);
 8002060:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	231e      	movs	r3, #30
 8002068:	2296      	movs	r2, #150	@ 0x96
 800206a:	210a      	movs	r1, #10
 800206c:	200a      	movs	r0, #10
 800206e:	f7ff fd9e 	bl	8001bae <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(info_text_x, info_text_y, info_text, text_color, box_fill_color, font_size);
 8002072:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002076:	f8b7 1050 	ldrh.w	r1, [r7, #80]	@ 0x50
 800207a:	f8b7 0052 	ldrh.w	r0, [r7, #82]	@ 0x52
 800207e:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	4613      	mov	r3, r2
 800208c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800208e:	f7ff ff65 	bl	8001f5c <Manual_LCD_DrawString>

    // 2. Task Boxes Grid
    uint16_t start_y_tasks_row1 = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 8002092:	233c      	movs	r3, #60	@ 0x3c
 8002094:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    uint16_t text_task_x_padding = 10; // Left padding for text inside task boxes
 8002098:	230a      	movs	r3, #10
 800209a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    uint16_t text_task_y_offset = (TASK_BOX_H - char_height * font_size) / 2;
 800209e:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80020a2:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 80020a6:	fb02 f303 	mul.w	r3, r2, r3
 80020aa:	f1c3 0346 	rsb	r3, r3, #70	@ 0x46
 80020ae:	0fda      	lsrs	r2, r3, #31
 80020b0:	4413      	add	r3, r2
 80020b2:	105b      	asrs	r3, r3, #1
 80020b4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

    // Task 02-1 (Top-Left)
    uint16_t task1_x = MARGIN;
 80020b8:	230a      	movs	r3, #10
 80020ba:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    uint16_t task1_y = start_y_tasks_row1;
 80020be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80020c2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
    const char *task1_text = "Task 02-1";
 80020c6:	4b91      	ldr	r3, [pc, #580]	@ (800230c <Manual_LCD_DrawLayout+0x314>)
 80020c8:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t text_task1_x = task1_x + text_task_x_padding;
 80020ca:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80020ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80020d2:	4413      	add	r3, r2
 80020d4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint16_t text_task1_y = task1_y + text_task_y_offset;
 80020d6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80020da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80020de:	4413      	add	r3, r2
 80020e0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    Manual_LCD_FillRectangle(task1_x, task1_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 80020e2:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80020e6:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 80020ea:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	2346      	movs	r3, #70	@ 0x46
 80020f2:	2269      	movs	r2, #105	@ 0x69
 80020f4:	f7ff fdd8 	bl	8001ca8 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task1_x, task1_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 80020f8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80020fc:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8002100:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	2346      	movs	r3, #70	@ 0x46
 8002108:	2269      	movs	r2, #105	@ 0x69
 800210a:	f7ff fd50 	bl	8001bae <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task1_x, text_task1_y, task1_text, text_color, box_fill_color, font_size);
 800210e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002112:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8002114:	8ff8      	ldrh	r0, [r7, #62]	@ 0x3e
 8002116:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800211a:	9301      	str	r3, [sp, #4]
 800211c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	4613      	mov	r3, r2
 8002124:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002126:	f7ff ff19 	bl	8001f5c <Manual_LCD_DrawString>

    // Task 02-2 (Top-Right)
    uint16_t task2_x = task1_x + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 800212a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800212e:	3373      	adds	r3, #115	@ 0x73
 8002130:	877b      	strh	r3, [r7, #58]	@ 0x3a
    uint16_t task2_y = start_y_tasks_row1;
 8002132:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002136:	873b      	strh	r3, [r7, #56]	@ 0x38
    const char *task2_text = "Task 02-2";
 8002138:	4b75      	ldr	r3, [pc, #468]	@ (8002310 <Manual_LCD_DrawLayout+0x318>)
 800213a:	637b      	str	r3, [r7, #52]	@ 0x34
    uint16_t text_task2_x = task2_x + text_task_x_padding;
 800213c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800213e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8002142:	4413      	add	r3, r2
 8002144:	867b      	strh	r3, [r7, #50]	@ 0x32
    uint16_t text_task2_y = task2_y + text_task_y_offset;
 8002146:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8002148:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800214c:	4413      	add	r3, r2
 800214e:	863b      	strh	r3, [r7, #48]	@ 0x30
    Manual_LCD_FillRectangle(task2_x, task2_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 8002150:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002152:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 8002154:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2346      	movs	r3, #70	@ 0x46
 800215c:	2269      	movs	r2, #105	@ 0x69
 800215e:	f7ff fda3 	bl	8001ca8 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task2_x, task2_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 8002162:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 8002164:	8f78      	ldrh	r0, [r7, #58]	@ 0x3a
 8002166:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2346      	movs	r3, #70	@ 0x46
 800216e:	2269      	movs	r2, #105	@ 0x69
 8002170:	f7ff fd1d 	bl	8001bae <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task2_x, text_task2_y, task2_text, text_color, box_fill_color, font_size);
 8002174:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002178:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 800217a:	8e78      	ldrh	r0, [r7, #50]	@ 0x32
 800217c:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800218c:	f7ff fee6 	bl	8001f5c <Manual_LCD_DrawString>

    // Second row of task boxes
    uint16_t start_y_tasks_row2 = start_y_tasks_row1 + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8002190:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002194:	3350      	adds	r3, #80	@ 0x50
 8002196:	85fb      	strh	r3, [r7, #46]	@ 0x2e

    // Task 02-3 (Bottom-Left)
    uint16_t task3_x = MARGIN;
 8002198:	230a      	movs	r3, #10
 800219a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t task3_y = start_y_tasks_row2;
 800219c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800219e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    const char *task3_text = "Task 02-3";
 80021a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002314 <Manual_LCD_DrawLayout+0x31c>)
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint16_t text_task3_x = task3_x + text_task_x_padding;
 80021a4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80021a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80021aa:	4413      	add	r3, r2
 80021ac:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t text_task3_y = task3_y + text_task_y_offset;
 80021ae:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80021b0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80021b4:	4413      	add	r3, r2
 80021b6:	843b      	strh	r3, [r7, #32]
    Manual_LCD_FillRectangle(task3_x, task3_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 80021b8:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80021ba:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 80021bc:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2346      	movs	r3, #70	@ 0x46
 80021c4:	2269      	movs	r2, #105	@ 0x69
 80021c6:	f7ff fd6f 	bl	8001ca8 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task3_x, task3_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 80021ca:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 80021cc:	8db8      	ldrh	r0, [r7, #44]	@ 0x2c
 80021ce:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	2346      	movs	r3, #70	@ 0x46
 80021d6:	2269      	movs	r2, #105	@ 0x69
 80021d8:	f7ff fce9 	bl	8001bae <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task3_x, text_task3_y, task3_text, text_color, box_fill_color, font_size);
 80021dc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80021e0:	8c39      	ldrh	r1, [r7, #32]
 80021e2:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80021e4:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	4613      	mov	r3, r2
 80021f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f4:	f7ff feb2 	bl	8001f5c <Manual_LCD_DrawString>

    // Task 02-4 (Bottom-Right)
    uint16_t task4_x = task1_x + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 80021f8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80021fc:	3373      	adds	r3, #115	@ 0x73
 80021fe:	83fb      	strh	r3, [r7, #30]
    uint16_t task4_y = start_y_tasks_row2;
 8002200:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002202:	83bb      	strh	r3, [r7, #28]
    const char *task4_text = "Task 02-4";
 8002204:	4b44      	ldr	r3, [pc, #272]	@ (8002318 <Manual_LCD_DrawLayout+0x320>)
 8002206:	61bb      	str	r3, [r7, #24]
    uint16_t text_task4_x = task4_x + text_task_x_padding;
 8002208:	8bfa      	ldrh	r2, [r7, #30]
 800220a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800220e:	4413      	add	r3, r2
 8002210:	82fb      	strh	r3, [r7, #22]
    uint16_t text_task4_y = task4_y + text_task_y_offset;
 8002212:	8bba      	ldrh	r2, [r7, #28]
 8002214:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002218:	4413      	add	r3, r2
 800221a:	82bb      	strh	r3, [r7, #20]
    Manual_LCD_FillRectangle(task4_x, task4_y, TASK_BOX_W_CALC, TASK_BOX_H, box_fill_color);
 800221c:	8bb9      	ldrh	r1, [r7, #28]
 800221e:	8bf8      	ldrh	r0, [r7, #30]
 8002220:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	2346      	movs	r3, #70	@ 0x46
 8002228:	2269      	movs	r2, #105	@ 0x69
 800222a:	f7ff fd3d 	bl	8001ca8 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(task4_x, task4_y, TASK_BOX_W_CALC, TASK_BOX_H, box_border_color);
 800222e:	8bb9      	ldrh	r1, [r7, #28]
 8002230:	8bf8      	ldrh	r0, [r7, #30]
 8002232:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	2346      	movs	r3, #70	@ 0x46
 800223a:	2269      	movs	r2, #105	@ 0x69
 800223c:	f7ff fcb7 	bl	8001bae <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_task4_x, text_task4_y, task4_text, text_color, box_fill_color, font_size);
 8002240:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8002244:	8ab9      	ldrh	r1, [r7, #20]
 8002246:	8af8      	ldrh	r0, [r7, #22]
 8002248:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	4613      	mov	r3, r2
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	f7ff fe80 	bl	8001f5c <Manual_LCD_DrawString>

    // 3. Back Button
    const char *back_button_text = "<<Back";
 800225c:	4b2f      	ldr	r3, [pc, #188]	@ (800231c <Manual_LCD_DrawLayout+0x324>)
 800225e:	613b      	str	r3, [r7, #16]
    uint16_t back_button_text_len = strlen(back_button_text);
 8002260:	6938      	ldr	r0, [r7, #16]
 8002262:	f7fd ffbf 	bl	80001e4 <strlen>
 8002266:	4603      	mov	r3, r0
 8002268:	81fb      	strh	r3, [r7, #14]
    uint16_t back_button_text_pixel_width = back_button_text_len * 6 * font_size; // 6 is char width with spacing for 5x7 font
 800226a:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800226e:	b29b      	uxth	r3, r3
 8002270:	89fa      	ldrh	r2, [r7, #14]
 8002272:	fb12 f303 	smulbb	r3, r2, r3
 8002276:	b29b      	uxth	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	0052      	lsls	r2, r2, #1
 800227c:	4413      	add	r3, r2
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	81bb      	strh	r3, [r7, #12]

    uint16_t back_button_y = start_y_tasks_row2 + TASK_BOX_H + TASK_TO_BACK_BUTTON_SPACING;
 8002282:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002284:	335a      	adds	r3, #90	@ 0x5a
 8002286:	817b      	strh	r3, [r7, #10]
    uint16_t back_button_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 8002288:	237d      	movs	r3, #125	@ 0x7d
 800228a:	813b      	strh	r3, [r7, #8]
    uint16_t text_button_x = back_button_x + (BACK_BUTTON_W - back_button_text_pixel_width) / 2;
 800228c:	89bb      	ldrh	r3, [r7, #12]
 800228e:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8002292:	0fda      	lsrs	r2, r3, #31
 8002294:	4413      	add	r3, r2
 8002296:	105b      	asrs	r3, r3, #1
 8002298:	b29a      	uxth	r2, r3
 800229a:	893b      	ldrh	r3, [r7, #8]
 800229c:	4413      	add	r3, r2
 800229e:	80fb      	strh	r3, [r7, #6]
    uint16_t text_button_y = back_button_y + (BACK_BUTTON_H - char_height * font_size) / 2;
 80022a0:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80022a4:	f897 2059 	ldrb.w	r2, [r7, #89]	@ 0x59
 80022a8:	fb02 f303 	mul.w	r3, r2, r3
 80022ac:	f1c3 032d 	rsb	r3, r3, #45	@ 0x2d
 80022b0:	0fda      	lsrs	r2, r3, #31
 80022b2:	4413      	add	r3, r2
 80022b4:	105b      	asrs	r3, r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	897b      	ldrh	r3, [r7, #10]
 80022ba:	4413      	add	r3, r2
 80022bc:	80bb      	strh	r3, [r7, #4]

    Manual_LCD_FillRectangle(back_button_x, back_button_y, BACK_BUTTON_W, BACK_BUTTON_H, box_fill_color);
 80022be:	8979      	ldrh	r1, [r7, #10]
 80022c0:	8938      	ldrh	r0, [r7, #8]
 80022c2:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	232d      	movs	r3, #45	@ 0x2d
 80022ca:	225a      	movs	r2, #90	@ 0x5a
 80022cc:	f7ff fcec 	bl	8001ca8 <Manual_LCD_FillRectangle>
    Manual_LCD_DrawRectangle(back_button_x, back_button_y, BACK_BUTTON_W, BACK_BUTTON_H, box_border_color);
 80022d0:	8979      	ldrh	r1, [r7, #10]
 80022d2:	8938      	ldrh	r0, [r7, #8]
 80022d4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	232d      	movs	r3, #45	@ 0x2d
 80022dc:	225a      	movs	r2, #90	@ 0x5a
 80022de:	f7ff fc66 	bl	8001bae <Manual_LCD_DrawRectangle>
    Manual_LCD_DrawString(text_button_x, text_button_y, back_button_text, text_color, box_fill_color, font_size);
 80022e2:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80022e6:	88b9      	ldrh	r1, [r7, #4]
 80022e8:	88f8      	ldrh	r0, [r7, #6]
 80022ea:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	4613      	mov	r3, r2
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	f7ff fe2f 	bl	8001f5c <Manual_LCD_DrawString>
}
 80022fe:	bf00      	nop
 8002300:	3760      	adds	r7, #96	@ 0x60
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	0800b6c8 	.word	0x0800b6c8
 800230c:	0800b6d8 	.word	0x0800b6d8
 8002310:	0800b6e4 	.word	0x0800b6e4
 8002314:	0800b6f0 	.word	0x0800b6f0
 8002318:	0800b6fc 	.word	0x0800b6fc
 800231c:	0800b708 	.word	0x0800b708

08002320 <Manual_LCD_UpdateInfoText>:

// New function to update the info text
void Manual_LCD_UpdateInfoText(const char *new_text)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b088      	sub	sp, #32
 8002324:	af02      	add	r7, sp, #8
 8002326:	6078      	str	r0, [r7, #4]
    uint8_t font_size = 1;
 8002328:	2301      	movs	r3, #1
 800232a:	75fb      	strb	r3, [r7, #23]
    uint8_t char_height = 7; // For 5x7 font at size 1
 800232c:	2307      	movs	r3, #7
 800232e:	75bb      	strb	r3, [r7, #22]

    uint16_t text_color = COLOR_WHITE;     // Original text color from DrawLayout
 8002330:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002334:	82bb      	strh	r3, [r7, #20]
    uint16_t box_fill_color = COLOR_BLACK; // Original box fill color from DrawLayout
 8002336:	2300      	movs	r3, #0
 8002338:	827b      	strh	r3, [r7, #18]

    uint16_t info_text_x = MARGIN + 5;
 800233a:	230f      	movs	r3, #15
 800233c:	823b      	strh	r3, [r7, #16]
    uint16_t info_text_y = INFO_BOX_Y + (INFO_BOX_H - char_height * font_size) / 2;
 800233e:	7dbb      	ldrb	r3, [r7, #22]
 8002340:	7dfa      	ldrb	r2, [r7, #23]
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	f1c3 031e 	rsb	r3, r3, #30
 800234a:	0fda      	lsrs	r2, r3, #31
 800234c:	4413      	add	r3, r2
 800234e:	105b      	asrs	r3, r3, #1
 8002350:	b29b      	uxth	r3, r3
 8002352:	330a      	adds	r3, #10
 8002354:	81fb      	strh	r3, [r7, #14]

    // Clear the inner part of the info box where text resides
    // The border is 1px, so we fill from x+1, y+1 with width-2, height-2
    Manual_LCD_FillRectangle(MARGIN + 1, INFO_BOX_Y + 1, INFO_BOX_W - 2, INFO_BOX_H - 2, box_fill_color);
 8002356:	8a7b      	ldrh	r3, [r7, #18]
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	231c      	movs	r3, #28
 800235c:	2294      	movs	r2, #148	@ 0x94
 800235e:	210b      	movs	r1, #11
 8002360:	200b      	movs	r0, #11
 8002362:	f7ff fca1 	bl	8001ca8 <Manual_LCD_FillRectangle>

    // Draw the new string with original text color and original box fill as background
    Manual_LCD_DrawString(info_text_x, info_text_y, new_text, text_color, box_fill_color, font_size);
 8002366:	8aba      	ldrh	r2, [r7, #20]
 8002368:	89f9      	ldrh	r1, [r7, #14]
 800236a:	8a38      	ldrh	r0, [r7, #16]
 800236c:	7dfb      	ldrb	r3, [r7, #23]
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	8a7b      	ldrh	r3, [r7, #18]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	4613      	mov	r3, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	f7ff fdf0 	bl	8001f5c <Manual_LCD_DrawString>
}
 800237c:	bf00      	nop
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <Manual_LCD_RefillTaskBox>:

// New function to refill a task box and redraw its text
void Manual_LCD_RefillTaskBox(const char *task_name, uint16_t new_fill_color)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	@ 0x28
 8002388:	af02      	add	r7, sp, #8
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
    uint16_t original_text_color = COLOR_WHITE;
 8002390:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002394:	82fb      	strh	r3, [r7, #22]
    uint16_t original_box_border_color = COLOR_WHITE;
 8002396:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800239a:	82bb      	strh	r3, [r7, #20]
    uint8_t font_size = 1;
 800239c:	2301      	movs	r3, #1
 800239e:	74fb      	strb	r3, [r7, #19]
    uint8_t char_height = 7; // For 5x7 font at size 1
 80023a0:	2307      	movs	r3, #7
 80023a2:	74bb      	strb	r3, [r7, #18]

    uint16_t text_task_x_padding = 10;
 80023a4:	230a      	movs	r3, #10
 80023a6:	823b      	strh	r3, [r7, #16]
    uint16_t text_task_y_offset = (TASK_BOX_H - char_height * font_size) / 2;
 80023a8:	7cbb      	ldrb	r3, [r7, #18]
 80023aa:	7cfa      	ldrb	r2, [r7, #19]
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	f1c3 0346 	rsb	r3, r3, #70	@ 0x46
 80023b4:	0fda      	lsrs	r2, r3, #31
 80023b6:	4413      	add	r3, r2
 80023b8:	105b      	asrs	r3, r3, #1
 80023ba:	81fb      	strh	r3, [r7, #14]

    uint16_t current_task_x = 0, current_task_y = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	83fb      	strh	r3, [r7, #30]
 80023c0:	2300      	movs	r3, #0
 80023c2:	83bb      	strh	r3, [r7, #28]
    uint16_t text_draw_x = 0, text_draw_y = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	81bb      	strh	r3, [r7, #12]
 80023c8:	2300      	movs	r3, #0
 80023ca:	817b      	strh	r3, [r7, #10]
    const char *original_task_text_content = "";
 80023cc:	4b30      	ldr	r3, [pc, #192]	@ (8002490 <Manual_LCD_RefillTaskBox+0x10c>)
 80023ce:	61bb      	str	r3, [r7, #24]

    if (strcmp(task_name, "Task 02-1") == 0)
 80023d0:	4930      	ldr	r1, [pc, #192]	@ (8002494 <Manual_LCD_RefillTaskBox+0x110>)
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fd fefc 	bl	80001d0 <strcmp>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <Manual_LCD_RefillTaskBox+0x68>
    {
        current_task_x = MARGIN;
 80023de:	230a      	movs	r3, #10
 80023e0:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 80023e2:	233c      	movs	r3, #60	@ 0x3c
 80023e4:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-1";
 80023e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002494 <Manual_LCD_RefillTaskBox+0x110>)
 80023e8:	61bb      	str	r3, [r7, #24]
 80023ea:	e028      	b.n	800243e <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-2") == 0)
 80023ec:	492a      	ldr	r1, [pc, #168]	@ (8002498 <Manual_LCD_RefillTaskBox+0x114>)
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fd feee 	bl	80001d0 <strcmp>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <Manual_LCD_RefillTaskBox+0x84>
    {
        current_task_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 80023fa:	237d      	movs	r3, #125	@ 0x7d
 80023fc:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING;
 80023fe:	233c      	movs	r3, #60	@ 0x3c
 8002400:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-2";
 8002402:	4b25      	ldr	r3, [pc, #148]	@ (8002498 <Manual_LCD_RefillTaskBox+0x114>)
 8002404:	61bb      	str	r3, [r7, #24]
 8002406:	e01a      	b.n	800243e <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-3") == 0)
 8002408:	4924      	ldr	r1, [pc, #144]	@ (800249c <Manual_LCD_RefillTaskBox+0x118>)
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fd fee0 	bl	80001d0 <strcmp>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d106      	bne.n	8002424 <Manual_LCD_RefillTaskBox+0xa0>
    {
        current_task_x = MARGIN;
 8002416:	230a      	movs	r3, #10
 8002418:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 800241a:	238c      	movs	r3, #140	@ 0x8c
 800241c:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-3";
 800241e:	4b1f      	ldr	r3, [pc, #124]	@ (800249c <Manual_LCD_RefillTaskBox+0x118>)
 8002420:	61bb      	str	r3, [r7, #24]
 8002422:	e00c      	b.n	800243e <Manual_LCD_RefillTaskBox+0xba>
    }
    else if (strcmp(task_name, "Task 02-4") == 0)
 8002424:	491e      	ldr	r1, [pc, #120]	@ (80024a0 <Manual_LCD_RefillTaskBox+0x11c>)
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7fd fed2 	bl	80001d0 <strcmp>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d129      	bne.n	8002486 <Manual_LCD_RefillTaskBox+0x102>
    {
        current_task_x = MARGIN + TASK_BOX_W_CALC + SPACING_BETWEEN_BOXES;
 8002432:	237d      	movs	r3, #125	@ 0x7d
 8002434:	83fb      	strh	r3, [r7, #30]
        current_task_y = INFO_BOX_Y + INFO_BOX_H + INFO_TO_TASK_SPACING + TASK_BOX_H + SPACING_BETWEEN_BOXES;
 8002436:	238c      	movs	r3, #140	@ 0x8c
 8002438:	83bb      	strh	r3, [r7, #28]
        original_task_text_content = "Task 02-4";
 800243a:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <Manual_LCD_RefillTaskBox+0x11c>)
 800243c:	61bb      	str	r3, [r7, #24]
    else
    {
        return; // Unknown task name, do nothing
    }

    text_draw_x = current_task_x + text_task_x_padding;
 800243e:	8bfa      	ldrh	r2, [r7, #30]
 8002440:	8a3b      	ldrh	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	81bb      	strh	r3, [r7, #12]
    text_draw_y = current_task_y + text_task_y_offset;
 8002446:	8bba      	ldrh	r2, [r7, #28]
 8002448:	89fb      	ldrh	r3, [r7, #14]
 800244a:	4413      	add	r3, r2
 800244c:	817b      	strh	r3, [r7, #10]

    // 1. Refill the entire task box with the new color
    Manual_LCD_FillRectangle(current_task_x, current_task_y, TASK_BOX_W_CALC, TASK_BOX_H, new_fill_color);
 800244e:	8bb9      	ldrh	r1, [r7, #28]
 8002450:	8bf8      	ldrh	r0, [r7, #30]
 8002452:	887b      	ldrh	r3, [r7, #2]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2346      	movs	r3, #70	@ 0x46
 8002458:	2269      	movs	r2, #105	@ 0x69
 800245a:	f7ff fc25 	bl	8001ca8 <Manual_LCD_FillRectangle>

    // 2. Redraw the border
    Manual_LCD_DrawRectangle(current_task_x, current_task_y, TASK_BOX_W_CALC, TASK_BOX_H, original_box_border_color);
 800245e:	8bb9      	ldrh	r1, [r7, #28]
 8002460:	8bf8      	ldrh	r0, [r7, #30]
 8002462:	8abb      	ldrh	r3, [r7, #20]
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2346      	movs	r3, #70	@ 0x46
 8002468:	2269      	movs	r2, #105	@ 0x69
 800246a:	f7ff fba0 	bl	8001bae <Manual_LCD_DrawRectangle>

    // 3. Redraw the original text using the original text color and the new_fill_color as background
    Manual_LCD_DrawString(text_draw_x, text_draw_y, original_task_text_content, original_text_color, new_fill_color, font_size);
 800246e:	8afa      	ldrh	r2, [r7, #22]
 8002470:	8979      	ldrh	r1, [r7, #10]
 8002472:	89b8      	ldrh	r0, [r7, #12]
 8002474:	7cfb      	ldrb	r3, [r7, #19]
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	887b      	ldrh	r3, [r7, #2]
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	f7ff fd6c 	bl	8001f5c <Manual_LCD_DrawString>
 8002484:	e000      	b.n	8002488 <Manual_LCD_RefillTaskBox+0x104>
        return; // Unknown task name, do nothing
 8002486:	bf00      	nop
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	0800b710 	.word	0x0800b710
 8002494:	0800b6d8 	.word	0x0800b6d8
 8002498:	0800b6e4 	.word	0x0800b6e4
 800249c:	0800b6f0 	.word	0x0800b6f0
 80024a0:	0800b6fc 	.word	0x0800b6fc

080024a4 <TP_Read_ADC_Raw>:
Coordinate CalScreenSample[3]; // Raw ADC values from touch panel for calibration points

// Low-level SPI communication for touch
// Sends 1 byte command, receives 2 bytes data (12-bit ADC value)
static uint16_t TP_Read_ADC_Raw(uint8_t cmd)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
    uint8_t tx_byte = cmd;
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	737b      	strb	r3, [r7, #13]
    uint8_t rx_buffer[2] = {0, 0};
 80024b2:	2300      	movs	r3, #0
 80024b4:	813b      	strh	r3, [r7, #8]
    uint16_t adc_val = 0;
 80024b6:	2300      	movs	r3, #0
 80024b8:	81fb      	strh	r3, [r7, #14]

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_RESET); // Select touch controller
 80024ba:	2200      	movs	r2, #0
 80024bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024c0:	4815      	ldr	r0, [pc, #84]	@ (8002518 <TP_Read_ADC_Raw+0x74>)
 80024c2:	f001 f8b3 	bl	800362c <HAL_GPIO_WritePin>

    // Send command byte
    HAL_SPI_Transmit(g_hspi_touch_ptr, &tx_byte, 1, HAL_MAX_DELAY);
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <TP_Read_ADC_Raw+0x78>)
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	f107 010d 	add.w	r1, r7, #13
 80024ce:	f04f 33ff 	mov.w	r3, #4294967295
 80024d2:	2201      	movs	r2, #1
 80024d4:	f004 fd1f 	bl	8006f16 <HAL_SPI_Transmit>

    // Receive 2 data bytes. Some controllers might need dummy clocks before data is valid.
    // For XPT2046/ADS7846, data usually follows directly.
    HAL_SPI_Receive(g_hspi_touch_ptr, rx_buffer, 2, HAL_MAX_DELAY);
 80024d8:	4b10      	ldr	r3, [pc, #64]	@ (800251c <TP_Read_ADC_Raw+0x78>)
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	f107 0108 	add.w	r1, r7, #8
 80024e0:	f04f 33ff 	mov.w	r3, #4294967295
 80024e4:	2202      	movs	r2, #2
 80024e6:	f004 fe5a 	bl	800719e <HAL_SPI_Receive>

    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect
 80024ea:	2201      	movs	r2, #1
 80024ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024f0:	4809      	ldr	r0, [pc, #36]	@ (8002518 <TP_Read_ADC_Raw+0x74>)
 80024f2:	f001 f89b 	bl	800362c <HAL_GPIO_WritePin>

    adc_val = (rx_buffer[0] << 8) | rx_buffer[1];
 80024f6:	7a3b      	ldrb	r3, [r7, #8]
 80024f8:	b21b      	sxth	r3, r3
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	b21a      	sxth	r2, r3
 80024fe:	7a7b      	ldrb	r3, [r7, #9]
 8002500:	b21b      	sxth	r3, r3
 8002502:	4313      	orrs	r3, r2
 8002504:	b21b      	sxth	r3, r3
 8002506:	81fb      	strh	r3, [r7, #14]
    adc_val >>= 3; // Keep the most significant 12 bits (XPT2046 specific, D0 is at bit 3 of second byte)
 8002508:	89fb      	ldrh	r3, [r7, #14]
 800250a:	08db      	lsrs	r3, r3, #3
 800250c:	81fb      	strh	r3, [r7, #14]
                   // Original code used >>4, which might be for a different ADC alignment or resolution.
                   // If raw values are consistently too low or high, this shift might need adjustment.
    return adc_val;
 800250e:	89fb      	ldrh	r3, [r7, #14]
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40020000 	.word	0x40020000
 800251c:	20000678 	.word	0x20000678

08002520 <Manual_Touch_Init>:

void Manual_Touch_Init(SPI_HandleTypeDef *hspi_touch)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
    g_hspi_touch_ptr = hspi_touch;
 8002528:	4a06      	ldr	r2, [pc, #24]	@ (8002544 <Manual_Touch_Init+0x24>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6013      	str	r3, [r2, #0]
    // GPIOs for TP_CS (PA9) and TP_IRQ (PB4) are assumed to be initialized
    // in main.c's MX_GPIO_Init() as Output PP and Input Pull-up respectively.
    HAL_GPIO_WritePin(TP_CS_GPIO_Port, TP_CS_Pin, GPIO_PIN_SET); // Deselect touch controller initially
 800252e:	2201      	movs	r2, #1
 8002530:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002534:	4804      	ldr	r0, [pc, #16]	@ (8002548 <Manual_Touch_Init+0x28>)
 8002536:	f001 f879 	bl	800362c <HAL_GPIO_WritePin>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000678 	.word	0x20000678
 8002548:	40020000 	.word	0x40020000

0800254c <Manual_Touch_Pressed>:

uint8_t Manual_Touch_Pressed(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
    // TP_IRQ_Pin is low when pressed (assuming pull-up resistor is enabled)
    return (HAL_GPIO_ReadPin(TP_IRQ_GPIO_Port, TP_IRQ_Pin) == GPIO_PIN_RESET);
 8002550:	2110      	movs	r1, #16
 8002552:	4805      	ldr	r0, [pc, #20]	@ (8002568 <Manual_Touch_Pressed+0x1c>)
 8002554:	f001 f852 	bl	80035fc <HAL_GPIO_ReadPin>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf0c      	ite	eq
 800255e:	2301      	moveq	r3, #1
 8002560:	2300      	movne	r3, #0
 8002562:	b2db      	uxtb	r3, r3
}
 8002564:	4618      	mov	r0, r3
 8002566:	bd80      	pop	{r7, pc}
 8002568:	40020400 	.word	0x40020400

0800256c <Manual_Touch_GetRawPoint>:

uint8_t Manual_Touch_GetRawPoint(Coordinate *rawPoint)
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b095      	sub	sp, #84	@ 0x54
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
    if (!Manual_Touch_Pressed())
 8002574:	f7ff ffea 	bl	800254c <Manual_Touch_Pressed>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d101      	bne.n	8002582 <Manual_Touch_GetRawPoint+0x16>
    {
        return 0; // Not pressed
 800257e:	2300      	movs	r3, #0
 8002580:	e1d0      	b.n	8002924 <Manual_Touch_GetRawPoint+0x3b8>
    uint16_t x_samples[TOUCH_AVG_SAMPLES];
    uint16_t y_samples[TOUCH_AVG_SAMPLES];
    uint8_t i;

    // Read all X samples first
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 8002582:	2300      	movs	r3, #0
 8002584:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002588:	e03e      	b.n	8002608 <Manual_Touch_GetRawPoint+0x9c>
    {
        if (!Manual_Touch_Pressed() && i >= 1)
 800258a:	f7ff ffdf 	bl	800254c <Manual_Touch_Pressed>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d128      	bne.n	80025e6 <Manual_Touch_GetRawPoint+0x7a>
 8002594:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002598:	2b00      	cmp	r3, #0
 800259a:	d024      	beq.n	80025e6 <Manual_Touch_GetRawPoint+0x7a>
        { // Check if pen lifted after at least one sample
            // If pen lifted early, try to use what we have if enough samples, or fail
            if (i < 3)
 800259c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d801      	bhi.n	80025a8 <Manual_Touch_GetRawPoint+0x3c>
                return 0; // Not enough samples for even one average
 80025a4:	2300      	movs	r3, #0
 80025a6:	e1bd      	b.n	8002924 <Manual_Touch_GetRawPoint+0x3b8>
            // Fill remaining samples with the last good one to avoid distorting average too much
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 80025a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80025ac:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80025b0:	e014      	b.n	80025dc <Manual_Touch_GetRawPoint+0x70>
            {
                x_samples[j] = x_samples[i - 1];
 80025b2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80025b6:	3b01      	subs	r3, #1
 80025b8:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	3350      	adds	r3, #80	@ 0x50
 80025c0:	443b      	add	r3, r7
 80025c2:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80025c6:	0053      	lsls	r3, r2, #1
 80025c8:	3350      	adds	r3, #80	@ 0x50
 80025ca:	443b      	add	r3, r7
 80025cc:	460a      	mov	r2, r1
 80025ce:	f823 2c24 	strh.w	r2, [r3, #-36]
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 80025d2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80025d6:	3301      	adds	r3, #1
 80025d8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 80025dc:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80025e0:	2b08      	cmp	r3, #8
 80025e2:	d9e6      	bls.n	80025b2 <Manual_Touch_GetRawPoint+0x46>
            }
            break; // Exit X sampling loop
 80025e4:	e014      	b.n	8002610 <Manual_Touch_GetRawPoint+0xa4>
        }
        x_samples[i] = TP_Read_ADC_Raw(TP_CMD_READ_X);
 80025e6:	f897 404f 	ldrb.w	r4, [r7, #79]	@ 0x4f
 80025ea:	20d0      	movs	r0, #208	@ 0xd0
 80025ec:	f7ff ff5a 	bl	80024a4 <TP_Read_ADC_Raw>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	0063      	lsls	r3, r4, #1
 80025f6:	3350      	adds	r3, #80	@ 0x50
 80025f8:	443b      	add	r3, r7
 80025fa:	f823 2c24 	strh.w	r2, [r3, #-36]
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 80025fe:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002602:	3301      	adds	r3, #1
 8002604:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002608:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800260c:	2b08      	cmp	r3, #8
 800260e:	d9bc      	bls.n	800258a <Manual_Touch_GetRawPoint+0x1e>
        // HAL_Delay(1); // Increased delay slightly
    }

    // Read all Y samples
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 8002610:	2300      	movs	r3, #0
 8002612:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002616:	e03e      	b.n	8002696 <Manual_Touch_GetRawPoint+0x12a>
    {
        if (!Manual_Touch_Pressed() && i >= 1)
 8002618:	f7ff ff98 	bl	800254c <Manual_Touch_Pressed>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d128      	bne.n	8002674 <Manual_Touch_GetRawPoint+0x108>
 8002622:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002626:	2b00      	cmp	r3, #0
 8002628:	d024      	beq.n	8002674 <Manual_Touch_GetRawPoint+0x108>
        {
            if (i < 3)
 800262a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800262e:	2b02      	cmp	r3, #2
 8002630:	d801      	bhi.n	8002636 <Manual_Touch_GetRawPoint+0xca>
                return 0;
 8002632:	2300      	movs	r3, #0
 8002634:	e176      	b.n	8002924 <Manual_Touch_GetRawPoint+0x3b8>
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 8002636:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800263a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800263e:	e014      	b.n	800266a <Manual_Touch_GetRawPoint+0xfe>
            {
                y_samples[j] = y_samples[i - 1];
 8002640:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002644:	3b01      	subs	r3, #1
 8002646:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	3350      	adds	r3, #80	@ 0x50
 800264e:	443b      	add	r3, r7
 8002650:	f833 1c38 	ldrh.w	r1, [r3, #-56]
 8002654:	0053      	lsls	r3, r2, #1
 8002656:	3350      	adds	r3, #80	@ 0x50
 8002658:	443b      	add	r3, r7
 800265a:	460a      	mov	r2, r1
 800265c:	f823 2c38 	strh.w	r2, [r3, #-56]
            for (uint8_t j = i; j < TOUCH_AVG_SAMPLES; j++)
 8002660:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002664:	3301      	adds	r3, #1
 8002666:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
 800266a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800266e:	2b08      	cmp	r3, #8
 8002670:	d9e6      	bls.n	8002640 <Manual_Touch_GetRawPoint+0xd4>
            }
            break; // Exit Y sampling loop
 8002672:	e014      	b.n	800269e <Manual_Touch_GetRawPoint+0x132>
        }
        y_samples[i] = TP_Read_ADC_Raw(TP_CMD_READ_Y);
 8002674:	f897 404f 	ldrb.w	r4, [r7, #79]	@ 0x4f
 8002678:	2090      	movs	r0, #144	@ 0x90
 800267a:	f7ff ff13 	bl	80024a4 <TP_Read_ADC_Raw>
 800267e:	4603      	mov	r3, r0
 8002680:	461a      	mov	r2, r3
 8002682:	0063      	lsls	r3, r4, #1
 8002684:	3350      	adds	r3, #80	@ 0x50
 8002686:	443b      	add	r3, r7
 8002688:	f823 2c38 	strh.w	r2, [r3, #-56]
    for (i = 0; i < TOUCH_AVG_SAMPLES; i++)
 800268c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002690:	3301      	adds	r3, #1
 8002692:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002696:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800269a:	2b08      	cmp	r3, #8
 800269c:	d9bc      	bls.n	8002618 <Manual_Touch_GetRawPoint+0xac>
        // HAL_Delay(2); // Increased delay slightly
    }

    // Averaging and filtering logic from original code
    uint16_t avg_x[3], avg_y[3];
    avg_x[0] = (x_samples[0] + x_samples[1] + x_samples[2]) / 3;
 800269e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80026a0:	461a      	mov	r2, r3
 80026a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80026a4:	4413      	add	r3, r2
 80026a6:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 80026a8:	4413      	add	r3, r2
 80026aa:	4aa0      	ldr	r2, [pc, #640]	@ (800292c <Manual_Touch_GetRawPoint+0x3c0>)
 80026ac:	fb82 1203 	smull	r1, r2, r2, r3
 80026b0:	17db      	asrs	r3, r3, #31
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	823b      	strh	r3, [r7, #16]
    avg_x[1] = (x_samples[3] + x_samples[4] + x_samples[5]) / 3;
 80026b8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80026ba:	461a      	mov	r2, r3
 80026bc:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80026be:	4413      	add	r3, r2
 80026c0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80026c2:	4413      	add	r3, r2
 80026c4:	4a99      	ldr	r2, [pc, #612]	@ (800292c <Manual_Touch_GetRawPoint+0x3c0>)
 80026c6:	fb82 1203 	smull	r1, r2, r2, r3
 80026ca:	17db      	asrs	r3, r3, #31
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	827b      	strh	r3, [r7, #18]
    avg_x[2] = (x_samples[6] + x_samples[7] + x_samples[8]) / 3;
 80026d2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80026d4:	461a      	mov	r2, r3
 80026d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80026d8:	4413      	add	r3, r2
 80026da:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80026dc:	4413      	add	r3, r2
 80026de:	4a93      	ldr	r2, [pc, #588]	@ (800292c <Manual_Touch_GetRawPoint+0x3c0>)
 80026e0:	fb82 1203 	smull	r1, r2, r2, r3
 80026e4:	17db      	asrs	r3, r3, #31
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	82bb      	strh	r3, [r7, #20]

    avg_y[0] = (y_samples[0] + y_samples[1] + y_samples[2]) / 3;
 80026ec:	8b3b      	ldrh	r3, [r7, #24]
 80026ee:	461a      	mov	r2, r3
 80026f0:	8b7b      	ldrh	r3, [r7, #26]
 80026f2:	4413      	add	r3, r2
 80026f4:	8bba      	ldrh	r2, [r7, #28]
 80026f6:	4413      	add	r3, r2
 80026f8:	4a8c      	ldr	r2, [pc, #560]	@ (800292c <Manual_Touch_GetRawPoint+0x3c0>)
 80026fa:	fb82 1203 	smull	r1, r2, r2, r3
 80026fe:	17db      	asrs	r3, r3, #31
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	b29b      	uxth	r3, r3
 8002704:	813b      	strh	r3, [r7, #8]
    avg_y[1] = (y_samples[3] + y_samples[4] + y_samples[5]) / 3;
 8002706:	8bfb      	ldrh	r3, [r7, #30]
 8002708:	461a      	mov	r2, r3
 800270a:	8c3b      	ldrh	r3, [r7, #32]
 800270c:	4413      	add	r3, r2
 800270e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8002710:	4413      	add	r3, r2
 8002712:	4a86      	ldr	r2, [pc, #536]	@ (800292c <Manual_Touch_GetRawPoint+0x3c0>)
 8002714:	fb82 1203 	smull	r1, r2, r2, r3
 8002718:	17db      	asrs	r3, r3, #31
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	b29b      	uxth	r3, r3
 800271e:	817b      	strh	r3, [r7, #10]
    avg_y[2] = (y_samples[6] + y_samples[7] + y_samples[8]) / 3;
 8002720:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002722:	461a      	mov	r2, r3
 8002724:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002726:	4413      	add	r3, r2
 8002728:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800272a:	4413      	add	r3, r2
 800272c:	4a7f      	ldr	r2, [pc, #508]	@ (800292c <Manual_Touch_GetRawPoint+0x3c0>)
 800272e:	fb82 1203 	smull	r1, r2, r2, r3
 8002732:	17db      	asrs	r3, r3, #31
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	b29b      	uxth	r3, r3
 8002738:	81bb      	strh	r3, [r7, #12]

    int16_t m0x = avg_x[0] > avg_x[1] ? avg_x[0] - avg_x[1] : avg_x[1] - avg_x[0];
 800273a:	8a3a      	ldrh	r2, [r7, #16]
 800273c:	8a7b      	ldrh	r3, [r7, #18]
 800273e:	429a      	cmp	r2, r3
 8002740:	d905      	bls.n	800274e <Manual_Touch_GetRawPoint+0x1e2>
 8002742:	8a3a      	ldrh	r2, [r7, #16]
 8002744:	8a7b      	ldrh	r3, [r7, #18]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	b29b      	uxth	r3, r3
 800274a:	b21b      	sxth	r3, r3
 800274c:	e004      	b.n	8002758 <Manual_Touch_GetRawPoint+0x1ec>
 800274e:	8a7a      	ldrh	r2, [r7, #18]
 8002750:	8a3b      	ldrh	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	b29b      	uxth	r3, r3
 8002756:	b21b      	sxth	r3, r3
 8002758:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
    int16_t m1x = avg_x[1] > avg_x[2] ? avg_x[1] - avg_x[2] : avg_x[2] - avg_x[1];
 800275c:	8a7a      	ldrh	r2, [r7, #18]
 800275e:	8abb      	ldrh	r3, [r7, #20]
 8002760:	429a      	cmp	r2, r3
 8002762:	d905      	bls.n	8002770 <Manual_Touch_GetRawPoint+0x204>
 8002764:	8a7a      	ldrh	r2, [r7, #18]
 8002766:	8abb      	ldrh	r3, [r7, #20]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	b29b      	uxth	r3, r3
 800276c:	b21b      	sxth	r3, r3
 800276e:	e004      	b.n	800277a <Manual_Touch_GetRawPoint+0x20e>
 8002770:	8aba      	ldrh	r2, [r7, #20]
 8002772:	8a7b      	ldrh	r3, [r7, #18]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	b29b      	uxth	r3, r3
 8002778:	b21b      	sxth	r3, r3
 800277a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    int16_t m2x = avg_x[2] > avg_x[0] ? avg_x[2] - avg_x[0] : avg_x[0] - avg_x[2];
 800277e:	8aba      	ldrh	r2, [r7, #20]
 8002780:	8a3b      	ldrh	r3, [r7, #16]
 8002782:	429a      	cmp	r2, r3
 8002784:	d905      	bls.n	8002792 <Manual_Touch_GetRawPoint+0x226>
 8002786:	8aba      	ldrh	r2, [r7, #20]
 8002788:	8a3b      	ldrh	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	b29b      	uxth	r3, r3
 800278e:	b21b      	sxth	r3, r3
 8002790:	e004      	b.n	800279c <Manual_Touch_GetRawPoint+0x230>
 8002792:	8a3a      	ldrh	r2, [r7, #16]
 8002794:	8abb      	ldrh	r3, [r7, #20]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	b29b      	uxth	r3, r3
 800279a:	b21b      	sxth	r3, r3
 800279c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

    if (m0x > TOUCH_RAW_THRESHOLD && m1x > TOUCH_RAW_THRESHOLD && m2x > TOUCH_RAW_THRESHOLD)
 80027a0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80027a4:	2b23      	cmp	r3, #35	@ 0x23
 80027a6:	dd09      	ble.n	80027bc <Manual_Touch_GetRawPoint+0x250>
 80027a8:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 80027ac:	2b23      	cmp	r3, #35	@ 0x23
 80027ae:	dd05      	ble.n	80027bc <Manual_Touch_GetRawPoint+0x250>
 80027b0:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	@ 0x46
 80027b4:	2b23      	cmp	r3, #35	@ 0x23
 80027b6:	dd01      	ble.n	80027bc <Manual_Touch_GetRawPoint+0x250>
        return 0; // Unstable X
 80027b8:	2300      	movs	r3, #0
 80027ba:	e0b3      	b.n	8002924 <Manual_Touch_GetRawPoint+0x3b8>

    if (m0x < m1x)
 80027bc:	f9b7 204a 	ldrsh.w	r2, [r7, #74]	@ 0x4a
 80027c0:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 80027c4:	429a      	cmp	r2, r3
 80027c6:	da19      	bge.n	80027fc <Manual_Touch_GetRawPoint+0x290>
        rawPoint->x = (m2x < m0x) ? (avg_x[0] + avg_x[2]) / 2 : (avg_x[0] + avg_x[1]) / 2;
 80027c8:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 80027cc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80027d0:	429a      	cmp	r2, r3
 80027d2:	da08      	bge.n	80027e6 <Manual_Touch_GetRawPoint+0x27a>
 80027d4:	8a3b      	ldrh	r3, [r7, #16]
 80027d6:	461a      	mov	r2, r3
 80027d8:	8abb      	ldrh	r3, [r7, #20]
 80027da:	4413      	add	r3, r2
 80027dc:	0fda      	lsrs	r2, r3, #31
 80027de:	4413      	add	r3, r2
 80027e0:	105b      	asrs	r3, r3, #1
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	e007      	b.n	80027f6 <Manual_Touch_GetRawPoint+0x28a>
 80027e6:	8a3b      	ldrh	r3, [r7, #16]
 80027e8:	461a      	mov	r2, r3
 80027ea:	8a7b      	ldrh	r3, [r7, #18]
 80027ec:	4413      	add	r3, r2
 80027ee:	0fda      	lsrs	r2, r3, #31
 80027f0:	4413      	add	r3, r2
 80027f2:	105b      	asrs	r3, r3, #1
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	8013      	strh	r3, [r2, #0]
 80027fa:	e018      	b.n	800282e <Manual_Touch_GetRawPoint+0x2c2>
    else
        rawPoint->x = (m2x < m1x) ? (avg_x[0] + avg_x[2]) / 2 : (avg_x[1] + avg_x[2]) / 2;
 80027fc:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 8002800:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 8002804:	429a      	cmp	r2, r3
 8002806:	da08      	bge.n	800281a <Manual_Touch_GetRawPoint+0x2ae>
 8002808:	8a3b      	ldrh	r3, [r7, #16]
 800280a:	461a      	mov	r2, r3
 800280c:	8abb      	ldrh	r3, [r7, #20]
 800280e:	4413      	add	r3, r2
 8002810:	0fda      	lsrs	r2, r3, #31
 8002812:	4413      	add	r3, r2
 8002814:	105b      	asrs	r3, r3, #1
 8002816:	b29b      	uxth	r3, r3
 8002818:	e007      	b.n	800282a <Manual_Touch_GetRawPoint+0x2be>
 800281a:	8a7b      	ldrh	r3, [r7, #18]
 800281c:	461a      	mov	r2, r3
 800281e:	8abb      	ldrh	r3, [r7, #20]
 8002820:	4413      	add	r3, r2
 8002822:	0fda      	lsrs	r2, r3, #31
 8002824:	4413      	add	r3, r2
 8002826:	105b      	asrs	r3, r3, #1
 8002828:	b29b      	uxth	r3, r3
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	8013      	strh	r3, [r2, #0]

    int16_t m0y = avg_y[0] > avg_y[1] ? avg_y[0] - avg_y[1] : avg_y[1] - avg_y[0];
 800282e:	893a      	ldrh	r2, [r7, #8]
 8002830:	897b      	ldrh	r3, [r7, #10]
 8002832:	429a      	cmp	r2, r3
 8002834:	d905      	bls.n	8002842 <Manual_Touch_GetRawPoint+0x2d6>
 8002836:	893a      	ldrh	r2, [r7, #8]
 8002838:	897b      	ldrh	r3, [r7, #10]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	b29b      	uxth	r3, r3
 800283e:	b21b      	sxth	r3, r3
 8002840:	e004      	b.n	800284c <Manual_Touch_GetRawPoint+0x2e0>
 8002842:	897a      	ldrh	r2, [r7, #10]
 8002844:	893b      	ldrh	r3, [r7, #8]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	b29b      	uxth	r3, r3
 800284a:	b21b      	sxth	r3, r3
 800284c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    int16_t m1y = avg_y[1] > avg_y[2] ? avg_y[1] - avg_y[2] : avg_y[2] - avg_y[1];
 8002850:	897a      	ldrh	r2, [r7, #10]
 8002852:	89bb      	ldrh	r3, [r7, #12]
 8002854:	429a      	cmp	r2, r3
 8002856:	d905      	bls.n	8002864 <Manual_Touch_GetRawPoint+0x2f8>
 8002858:	897a      	ldrh	r2, [r7, #10]
 800285a:	89bb      	ldrh	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	b29b      	uxth	r3, r3
 8002860:	b21b      	sxth	r3, r3
 8002862:	e004      	b.n	800286e <Manual_Touch_GetRawPoint+0x302>
 8002864:	89ba      	ldrh	r2, [r7, #12]
 8002866:	897b      	ldrh	r3, [r7, #10]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	b29b      	uxth	r3, r3
 800286c:	b21b      	sxth	r3, r3
 800286e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    int16_t m2y = avg_y[2] > avg_y[0] ? avg_y[2] - avg_y[0] : avg_y[0] - avg_y[2];
 8002872:	89ba      	ldrh	r2, [r7, #12]
 8002874:	893b      	ldrh	r3, [r7, #8]
 8002876:	429a      	cmp	r2, r3
 8002878:	d905      	bls.n	8002886 <Manual_Touch_GetRawPoint+0x31a>
 800287a:	89ba      	ldrh	r2, [r7, #12]
 800287c:	893b      	ldrh	r3, [r7, #8]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	b29b      	uxth	r3, r3
 8002882:	b21b      	sxth	r3, r3
 8002884:	e004      	b.n	8002890 <Manual_Touch_GetRawPoint+0x324>
 8002886:	893a      	ldrh	r2, [r7, #8]
 8002888:	89bb      	ldrh	r3, [r7, #12]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	b29b      	uxth	r3, r3
 800288e:	b21b      	sxth	r3, r3
 8002890:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    if (m0y > TOUCH_RAW_THRESHOLD && m1y > TOUCH_RAW_THRESHOLD && m2y > TOUCH_RAW_THRESHOLD)
 8002894:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 8002898:	2b23      	cmp	r3, #35	@ 0x23
 800289a:	dd09      	ble.n	80028b0 <Manual_Touch_GetRawPoint+0x344>
 800289c:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 80028a0:	2b23      	cmp	r3, #35	@ 0x23
 80028a2:	dd05      	ble.n	80028b0 <Manual_Touch_GetRawPoint+0x344>
 80028a4:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 80028a8:	2b23      	cmp	r3, #35	@ 0x23
 80028aa:	dd01      	ble.n	80028b0 <Manual_Touch_GetRawPoint+0x344>
        return 0; // Unstable Y
 80028ac:	2300      	movs	r3, #0
 80028ae:	e039      	b.n	8002924 <Manual_Touch_GetRawPoint+0x3b8>

    if (m0y < m1y)
 80028b0:	f9b7 2044 	ldrsh.w	r2, [r7, #68]	@ 0x44
 80028b4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 80028b8:	429a      	cmp	r2, r3
 80028ba:	da19      	bge.n	80028f0 <Manual_Touch_GetRawPoint+0x384>
        rawPoint->y = (m2y < m0y) ? (avg_y[0] + avg_y[2]) / 2 : (avg_y[0] + avg_y[1]) / 2;
 80028bc:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 80028c0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	@ 0x44
 80028c4:	429a      	cmp	r2, r3
 80028c6:	da08      	bge.n	80028da <Manual_Touch_GetRawPoint+0x36e>
 80028c8:	893b      	ldrh	r3, [r7, #8]
 80028ca:	461a      	mov	r2, r3
 80028cc:	89bb      	ldrh	r3, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	0fda      	lsrs	r2, r3, #31
 80028d2:	4413      	add	r3, r2
 80028d4:	105b      	asrs	r3, r3, #1
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	e007      	b.n	80028ea <Manual_Touch_GetRawPoint+0x37e>
 80028da:	893b      	ldrh	r3, [r7, #8]
 80028dc:	461a      	mov	r2, r3
 80028de:	897b      	ldrh	r3, [r7, #10]
 80028e0:	4413      	add	r3, r2
 80028e2:	0fda      	lsrs	r2, r3, #31
 80028e4:	4413      	add	r3, r2
 80028e6:	105b      	asrs	r3, r3, #1
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	8053      	strh	r3, [r2, #2]
 80028ee:	e018      	b.n	8002922 <Manual_Touch_GetRawPoint+0x3b6>
    else
        rawPoint->y = (m2y < m1y) ? (avg_y[0] + avg_y[2]) / 2 : (avg_y[1] + avg_y[2]) / 2;
 80028f0:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	@ 0x40
 80028f4:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 80028f8:	429a      	cmp	r2, r3
 80028fa:	da08      	bge.n	800290e <Manual_Touch_GetRawPoint+0x3a2>
 80028fc:	893b      	ldrh	r3, [r7, #8]
 80028fe:	461a      	mov	r2, r3
 8002900:	89bb      	ldrh	r3, [r7, #12]
 8002902:	4413      	add	r3, r2
 8002904:	0fda      	lsrs	r2, r3, #31
 8002906:	4413      	add	r3, r2
 8002908:	105b      	asrs	r3, r3, #1
 800290a:	b29b      	uxth	r3, r3
 800290c:	e007      	b.n	800291e <Manual_Touch_GetRawPoint+0x3b2>
 800290e:	897b      	ldrh	r3, [r7, #10]
 8002910:	461a      	mov	r2, r3
 8002912:	89bb      	ldrh	r3, [r7, #12]
 8002914:	4413      	add	r3, r2
 8002916:	0fda      	lsrs	r2, r3, #31
 8002918:	4413      	add	r3, r2
 800291a:	105b      	asrs	r3, r3, #1
 800291c:	b29b      	uxth	r3, r3
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	8053      	strh	r3, [r2, #2]

    return 1; // Valid point obtained
 8002922:	2301      	movs	r3, #1
}
 8002924:	4618      	mov	r0, r3
 8002926:	3754      	adds	r7, #84	@ 0x54
 8002928:	46bd      	mov	sp, r7
 800292a:	bd90      	pop	{r4, r7, pc}
 800292c:	55555556 	.word	0x55555556

08002930 <Manual_Touch_ApplyCalibration>:
                    (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y;
    return 1; // Success
}

uint8_t Manual_Touch_ApplyCalibration(Coordinate *displayPoint, const Coordinate *screenPoint)
{
 8002930:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	6039      	str	r1, [r7, #0]
    if (touchMatrix.Divider == 0)
 800293c:	4b64      	ldr	r3, [pc, #400]	@ (8002ad0 <Manual_Touch_ApplyCalibration+0x1a0>)
 800293e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	f7fe f8cd 	bl	8000ae8 <__aeabi_dcmpeq>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d023      	beq.n	800299c <Manual_Touch_ApplyCalibration+0x6c>
    { // Not calibrated or calibration failed
        // Fallback: direct scaling (highly inaccurate without calibration)
        displayPoint->x = (uint16_t)(((long)screenPoint->x * LCD_WIDTH) / 4095);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	461a      	mov	r2, r3
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	4a5c      	ldr	r2, [pc, #368]	@ (8002ad4 <Manual_Touch_ApplyCalibration+0x1a4>)
 8002964:	fb82 1203 	smull	r1, r2, r2, r3
 8002968:	441a      	add	r2, r3
 800296a:	12d2      	asrs	r2, r2, #11
 800296c:	17db      	asrs	r3, r3, #31
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	b29a      	uxth	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	801a      	strh	r2, [r3, #0]
        displayPoint->y = (uint16_t)(((long)screenPoint->y * LCD_HEIGHT) / 4095);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	885b      	ldrh	r3, [r3, #2]
 800297a:	461a      	mov	r2, r3
 800297c:	4613      	mov	r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	4413      	add	r3, r2
 8002982:	019b      	lsls	r3, r3, #6
 8002984:	4a53      	ldr	r2, [pc, #332]	@ (8002ad4 <Manual_Touch_ApplyCalibration+0x1a4>)
 8002986:	fb82 1203 	smull	r1, r2, r2, r3
 800298a:	441a      	add	r2, r3
 800298c:	12d2      	asrs	r2, r2, #11
 800298e:	17db      	asrs	r3, r3, #31
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	b29a      	uxth	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	805a      	strh	r2, [r3, #2]
        return 0; // Indicated that calibration matrix was not used
 8002998:	2300      	movs	r3, #0
 800299a:	e094      	b.n	8002ac6 <Manual_Touch_ApplyCalibration+0x196>
    }

    // Apply calibration matrix
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 800299c:	4b4c      	ldr	r3, [pc, #304]	@ (8002ad0 <Manual_Touch_ApplyCalibration+0x1a0>)
 800299e:	e9d3 4500 	ldrd	r4, r5, [r3]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fd fdcc 	bl	8000544 <__aeabi_i2d>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4620      	mov	r0, r4
 80029b2:	4629      	mov	r1, r5
 80029b4:	f7fd fe30 	bl	8000618 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4690      	mov	r8, r2
 80029be:	4699      	mov	r9, r3
                                  (touchMatrix.Bn * screenPoint->y) +
 80029c0:	4b43      	ldr	r3, [pc, #268]	@ (8002ad0 <Manual_Touch_ApplyCalibration+0x1a0>)
 80029c2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	885b      	ldrh	r3, [r3, #2]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fd fdba 	bl	8000544 <__aeabi_i2d>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4620      	mov	r0, r4
 80029d6:	4629      	mov	r1, r5
 80029d8:	f7fd fe1e 	bl	8000618 <__aeabi_dmul>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 80029e0:	4640      	mov	r0, r8
 80029e2:	4649      	mov	r1, r9
 80029e4:	f7fd fc62 	bl	80002ac <__adddf3>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4610      	mov	r0, r2
 80029ee:	4619      	mov	r1, r3
                                  touchMatrix.Cn) /
 80029f0:	4b37      	ldr	r3, [pc, #220]	@ (8002ad0 <Manual_Touch_ApplyCalibration+0x1a0>)
 80029f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
                                  (touchMatrix.Bn * screenPoint->y) +
 80029f6:	f7fd fc59 	bl	80002ac <__adddf3>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 8002a02:	4b33      	ldr	r3, [pc, #204]	@ (8002ad0 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002a04:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Cn) /
 8002a08:	f7fd ff30 	bl	800086c <__aeabi_ddiv>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	460b      	mov	r3, r1
    displayPoint->x = (uint16_t)(((touchMatrix.An * screenPoint->x) +
 8002a10:	4610      	mov	r0, r2
 8002a12:	4619      	mov	r1, r3
 8002a14:	f7fe f89a 	bl	8000b4c <__aeabi_d2uiz>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	801a      	strh	r2, [r3, #0]
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002a20:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad0 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002a22:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd fd8a 	bl	8000544 <__aeabi_i2d>
 8002a30:	4602      	mov	r2, r0
 8002a32:	460b      	mov	r3, r1
 8002a34:	4620      	mov	r0, r4
 8002a36:	4629      	mov	r1, r5
 8002a38:	f7fd fdee 	bl	8000618 <__aeabi_dmul>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	460b      	mov	r3, r1
 8002a40:	4690      	mov	r8, r2
 8002a42:	4699      	mov	r9, r3
                                  (touchMatrix.En * screenPoint->y) +
 8002a44:	4b22      	ldr	r3, [pc, #136]	@ (8002ad0 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002a46:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	885b      	ldrh	r3, [r3, #2]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7fd fd78 	bl	8000544 <__aeabi_i2d>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4620      	mov	r0, r4
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	f7fd fddc 	bl	8000618 <__aeabi_dmul>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002a64:	4640      	mov	r0, r8
 8002a66:	4649      	mov	r1, r9
 8002a68:	f7fd fc20 	bl	80002ac <__adddf3>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4610      	mov	r0, r2
 8002a72:	4619      	mov	r1, r3
                                  touchMatrix.Fn) /
 8002a74:	4b16      	ldr	r3, [pc, #88]	@ (8002ad0 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002a76:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
                                  (touchMatrix.En * screenPoint->y) +
 8002a7a:	f7fd fc17 	bl	80002ac <__adddf3>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
                                 touchMatrix.Divider);
 8002a86:	4b12      	ldr	r3, [pc, #72]	@ (8002ad0 <Manual_Touch_ApplyCalibration+0x1a0>)
 8002a88:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
                                  touchMatrix.Fn) /
 8002a8c:	f7fd feee 	bl	800086c <__aeabi_ddiv>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
    displayPoint->y = (uint16_t)(((touchMatrix.Dn * screenPoint->x) +
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f7fe f858 	bl	8000b4c <__aeabi_d2uiz>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	805a      	strh	r2, [r3, #2]

    // Constrain to LCD boundaries
    if (displayPoint->x >= LCD_WIDTH)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	2bef      	cmp	r3, #239	@ 0xef
 8002aaa:	d902      	bls.n	8002ab2 <Manual_Touch_ApplyCalibration+0x182>
        displayPoint->x = LCD_WIDTH - 1;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	22ef      	movs	r2, #239	@ 0xef
 8002ab0:	801a      	strh	r2, [r3, #0]
    if (displayPoint->y >= LCD_HEIGHT)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	885b      	ldrh	r3, [r3, #2]
 8002ab6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002aba:	d303      	bcc.n	8002ac4 <Manual_Touch_ApplyCalibration+0x194>
        displayPoint->y = LCD_HEIGHT - 1;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f240 123f 	movw	r2, #319	@ 0x13f
 8002ac2:	805a      	strh	r2, [r3, #2]
    // Note: long double might produce negative intermediate results if raw values are way off.
    // Casting to uint16_t will wrap. Consider clamping if signed intermediates are possible.
    // For typical touch values, this should be fine.

    return 1; // Calibration matrix used
 8002ac4:	2301      	movs	r3, #1
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ad0:	20000680 	.word	0x20000680
 8002ad4:	80080081 	.word	0x80080081

08002ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <HAL_MspInit+0x4c>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8002b24 <HAL_MspInit+0x4c>)
 8002ae8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aee:	4b0d      	ldr	r3, [pc, #52]	@ (8002b24 <HAL_MspInit+0x4c>)
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	603b      	str	r3, [r7, #0]
 8002afe:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <HAL_MspInit+0x4c>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	4a08      	ldr	r2, [pc, #32]	@ (8002b24 <HAL_MspInit+0x4c>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b0a:	4b06      	ldr	r3, [pc, #24]	@ (8002b24 <HAL_MspInit+0x4c>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40023800 	.word	0x40023800

08002b28 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	@ 0x28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b30:	f107 0314 	add.w	r3, r7, #20
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	609a      	str	r2, [r3, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
 8002b3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a26      	ldr	r2, [pc, #152]	@ (8002be0 <HAL_I2C_MspInit+0xb8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d145      	bne.n	8002bd6 <HAL_I2C_MspInit+0xae>
  {
    /* USER CODE BEGIN I2C2_MspInit 0 */

    /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	4b25      	ldr	r3, [pc, #148]	@ (8002be4 <HAL_I2C_MspInit+0xbc>)
 8002b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b52:	4a24      	ldr	r2, [pc, #144]	@ (8002be4 <HAL_I2C_MspInit+0xbc>)
 8002b54:	f043 0302 	orr.w	r3, r3, #2
 8002b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b5a:	4b22      	ldr	r3, [pc, #136]	@ (8002be4 <HAL_I2C_MspInit+0xbc>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin;
 8002b66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b6c:	2312      	movs	r3, #18
 8002b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b70:	2301      	movs	r3, #1
 8002b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b74:	2303      	movs	r3, #3
 8002b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b78:	2304      	movs	r3, #4
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCL_GPIO_Port, &GPIO_InitStruct);
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	4619      	mov	r1, r3
 8002b82:	4819      	ldr	r0, [pc, #100]	@ (8002be8 <HAL_I2C_MspInit+0xc0>)
 8002b84:	f000 fb9e 	bl	80032c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDA_Pin;
 8002b88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b8e:	2312      	movs	r3, #18
 8002b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b96:	2303      	movs	r3, #3
 8002b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDA_GPIO_Port, &GPIO_InitStruct);
 8002b9e:	f107 0314 	add.w	r3, r7, #20
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4810      	ldr	r0, [pc, #64]	@ (8002be8 <HAL_I2C_MspInit+0xc0>)
 8002ba6:	f000 fb8d 	bl	80032c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	4b0d      	ldr	r3, [pc, #52]	@ (8002be4 <HAL_I2C_MspInit+0xbc>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	4a0c      	ldr	r2, [pc, #48]	@ (8002be4 <HAL_I2C_MspInit+0xbc>)
 8002bb4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bba:	4b0a      	ldr	r3, [pc, #40]	@ (8002be4 <HAL_I2C_MspInit+0xbc>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2100      	movs	r1, #0
 8002bca:	2021      	movs	r0, #33	@ 0x21
 8002bcc:	f000 fb13 	bl	80031f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002bd0:	2021      	movs	r0, #33	@ 0x21
 8002bd2:	f000 fb2c 	bl	800322e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002bd6:	bf00      	nop
 8002bd8:	3728      	adds	r7, #40	@ 0x28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40005800 	.word	0x40005800
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40020400 	.word	0x40020400

08002bec <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08a      	sub	sp, #40	@ 0x28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a2c      	ldr	r2, [pc, #176]	@ (8002cbc <HAL_SD_MspInit+0xd0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d152      	bne.n	8002cb4 <HAL_SD_MspInit+0xc8>
  {
    /* USER CODE BEGIN SDIO_MspInit 0 */

    /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	613b      	str	r3, [r7, #16]
 8002c12:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc0 <HAL_SD_MspInit+0xd4>)
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	4a2a      	ldr	r2, [pc, #168]	@ (8002cc0 <HAL_SD_MspInit+0xd4>)
 8002c18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c1e:	4b28      	ldr	r3, [pc, #160]	@ (8002cc0 <HAL_SD_MspInit+0xd4>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c26:	613b      	str	r3, [r7, #16]
 8002c28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	4b24      	ldr	r3, [pc, #144]	@ (8002cc0 <HAL_SD_MspInit+0xd4>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	4a23      	ldr	r2, [pc, #140]	@ (8002cc0 <HAL_SD_MspInit+0xd4>)
 8002c34:	f043 0304 	orr.w	r3, r3, #4
 8002c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3a:	4b21      	ldr	r3, [pc, #132]	@ (8002cc0 <HAL_SD_MspInit+0xd4>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc0 <HAL_SD_MspInit+0xd4>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002cc0 <HAL_SD_MspInit+0xd4>)
 8002c50:	f043 0308 	orr.w	r3, r3, #8
 8002c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c56:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc0 <HAL_SD_MspInit+0xd4>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8002c62:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8002c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c70:	2303      	movs	r3, #3
 8002c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002c74:	230c      	movs	r3, #12
 8002c76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4811      	ldr	r0, [pc, #68]	@ (8002cc4 <HAL_SD_MspInit+0xd8>)
 8002c80:	f000 fb20 	bl	80032c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002c84:	2304      	movs	r3, #4
 8002c86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c90:	2303      	movs	r3, #3
 8002c92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002c94:	230c      	movs	r3, #12
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c98:	f107 0314 	add.w	r3, r7, #20
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	480a      	ldr	r0, [pc, #40]	@ (8002cc8 <HAL_SD_MspInit+0xdc>)
 8002ca0:	f000 fb10 	bl	80032c4 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2031      	movs	r0, #49	@ 0x31
 8002caa:	f000 faa4 	bl	80031f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002cae:	2031      	movs	r0, #49	@ 0x31
 8002cb0:	f000 fabd 	bl	800322e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDIO_MspInit 1 */

  }

}
 8002cb4:	bf00      	nop
 8002cb6:	3728      	adds	r7, #40	@ 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40012c00 	.word	0x40012c00
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020800 	.word	0x40020800
 8002cc8:	40020c00 	.word	0x40020c00

08002ccc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	@ 0x28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a28      	ldr	r2, [pc, #160]	@ (8002d8c <HAL_SPI_MspInit+0xc0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d149      	bne.n	8002d82 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	4b27      	ldr	r3, [pc, #156]	@ (8002d90 <HAL_SPI_MspInit+0xc4>)
 8002cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf6:	4a26      	ldr	r2, [pc, #152]	@ (8002d90 <HAL_SPI_MspInit+0xc4>)
 8002cf8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cfe:	4b24      	ldr	r3, [pc, #144]	@ (8002d90 <HAL_SPI_MspInit+0xc4>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	4b20      	ldr	r3, [pc, #128]	@ (8002d90 <HAL_SPI_MspInit+0xc4>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	4a1f      	ldr	r2, [pc, #124]	@ (8002d90 <HAL_SPI_MspInit+0xc4>)
 8002d14:	f043 0301 	orr.w	r3, r3, #1
 8002d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002d90 <HAL_SPI_MspInit+0xc4>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	4b19      	ldr	r3, [pc, #100]	@ (8002d90 <HAL_SPI_MspInit+0xc4>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2e:	4a18      	ldr	r2, [pc, #96]	@ (8002d90 <HAL_SPI_MspInit+0xc4>)
 8002d30:	f043 0302 	orr.w	r3, r3, #2
 8002d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d36:	4b16      	ldr	r3, [pc, #88]	@ (8002d90 <HAL_SPI_MspInit+0xc4>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = MISO_Pin|MOSI_Pin;
 8002d42:	23c0      	movs	r3, #192	@ 0xc0
 8002d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
 8002d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d52:	2305      	movs	r3, #5
 8002d54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d56:	f107 0314 	add.w	r3, r7, #20
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	480d      	ldr	r0, [pc, #52]	@ (8002d94 <HAL_SPI_MspInit+0xc8>)
 8002d5e:	f000 fab1 	bl	80032c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SCLK_Pin;
 8002d62:	2308      	movs	r3, #8
 8002d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d66:	2302      	movs	r3, #2
 8002d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d72:	2305      	movs	r3, #5
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SCLK_GPIO_Port, &GPIO_InitStruct);
 8002d76:	f107 0314 	add.w	r3, r7, #20
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	4806      	ldr	r0, [pc, #24]	@ (8002d98 <HAL_SPI_MspInit+0xcc>)
 8002d7e:	f000 faa1 	bl	80032c4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002d82:	bf00      	nop
 8002d84:	3728      	adds	r7, #40	@ 0x28
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	40013000 	.word	0x40013000
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40020000 	.word	0x40020000
 8002d98:	40020400 	.word	0x40020400

08002d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002da0:	bf00      	nop
 8002da2:	e7fd      	b.n	8002da0 <NMI_Handler+0x4>

08002da4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002da8:	bf00      	nop
 8002daa:	e7fd      	b.n	8002da8 <HardFault_Handler+0x4>

08002dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db0:	bf00      	nop
 8002db2:	e7fd      	b.n	8002db0 <MemManage_Handler+0x4>

08002db4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002db8:	bf00      	nop
 8002dba:	e7fd      	b.n	8002db8 <BusFault_Handler+0x4>

08002dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc0:	bf00      	nop
 8002dc2:	e7fd      	b.n	8002dc0 <UsageFault_Handler+0x4>

08002dc4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002df2:	f000 f8e1 	bl	8002fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TP_IRQ_Pin);
 8002dfe:	2010      	movs	r0, #16
 8002e00:	f000 fc2e 	bl	8003660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002e04:	bf00      	nop
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002e0c:	4802      	ldr	r0, [pc, #8]	@ (8002e18 <I2C2_EV_IRQHandler+0x10>)
 8002e0e:	f000 fda4 	bl	800395a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	200005cc 	.word	0x200005cc

08002e1c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002e20:	4802      	ldr	r0, [pc, #8]	@ (8002e2c <SDIO_IRQHandler+0x10>)
 8002e22:	f003 f9d7 	bl	80061d4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000548 	.word	0x20000548

08002e30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e38:	4a14      	ldr	r2, [pc, #80]	@ (8002e8c <_sbrk+0x5c>)
 8002e3a:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <_sbrk+0x60>)
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e44:	4b13      	ldr	r3, [pc, #76]	@ (8002e94 <_sbrk+0x64>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e4c:	4b11      	ldr	r3, [pc, #68]	@ (8002e94 <_sbrk+0x64>)
 8002e4e:	4a12      	ldr	r2, [pc, #72]	@ (8002e98 <_sbrk+0x68>)
 8002e50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e52:	4b10      	ldr	r3, [pc, #64]	@ (8002e94 <_sbrk+0x64>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d207      	bcs.n	8002e70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e60:	f007 ff72 	bl	800ad48 <__errno>
 8002e64:	4603      	mov	r3, r0
 8002e66:	220c      	movs	r2, #12
 8002e68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6e:	e009      	b.n	8002e84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e70:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <_sbrk+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e76:	4b07      	ldr	r3, [pc, #28]	@ (8002e94 <_sbrk+0x64>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	4a05      	ldr	r2, [pc, #20]	@ (8002e94 <_sbrk+0x64>)
 8002e80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e82:	68fb      	ldr	r3, [r7, #12]
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	20020000 	.word	0x20020000
 8002e90:	00000400 	.word	0x00000400
 8002e94:	200006b8 	.word	0x200006b8
 8002e98:	20000848 	.word	0x20000848

08002e9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ea0:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <SystemInit+0x20>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea6:	4a05      	ldr	r2, [pc, #20]	@ (8002ebc <SystemInit+0x20>)
 8002ea8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002eac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	e000ed00 	.word	0xe000ed00

08002ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ec0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ef8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ec4:	f7ff ffea 	bl	8002e9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ec8:	480c      	ldr	r0, [pc, #48]	@ (8002efc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002eca:	490d      	ldr	r1, [pc, #52]	@ (8002f00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed0:	e002      	b.n	8002ed8 <LoopCopyDataInit>

08002ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ed6:	3304      	adds	r3, #4

08002ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002edc:	d3f9      	bcc.n	8002ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ede:	4a0a      	ldr	r2, [pc, #40]	@ (8002f08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ee0:	4c0a      	ldr	r4, [pc, #40]	@ (8002f0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee4:	e001      	b.n	8002eea <LoopFillZerobss>

08002ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ee8:	3204      	adds	r2, #4

08002eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eec:	d3fb      	bcc.n	8002ee6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002eee:	f007 ff31 	bl	800ad54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ef2:	f7fd ffe1 	bl	8000eb8 <main>
  bx  lr    
 8002ef6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ef8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002efc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f00:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002f04:	0800ba24 	.word	0x0800ba24
  ldr r2, =_sbss
 8002f08:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002f0c:	20000844 	.word	0x20000844

08002f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f10:	e7fe      	b.n	8002f10 <ADC_IRQHandler>
	...

08002f14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f18:	4b0e      	ldr	r3, [pc, #56]	@ (8002f54 <HAL_Init+0x40>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f54 <HAL_Init+0x40>)
 8002f1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f24:	4b0b      	ldr	r3, [pc, #44]	@ (8002f54 <HAL_Init+0x40>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0a      	ldr	r2, [pc, #40]	@ (8002f54 <HAL_Init+0x40>)
 8002f2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f30:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <HAL_Init+0x40>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a07      	ldr	r2, [pc, #28]	@ (8002f54 <HAL_Init+0x40>)
 8002f36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f3c:	2003      	movs	r0, #3
 8002f3e:	f000 f94f 	bl	80031e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f42:	200f      	movs	r0, #15
 8002f44:	f000 f808 	bl	8002f58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f48:	f7ff fdc6 	bl	8002ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40023c00 	.word	0x40023c00

08002f58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f60:	4b12      	ldr	r3, [pc, #72]	@ (8002fac <HAL_InitTick+0x54>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4b12      	ldr	r3, [pc, #72]	@ (8002fb0 <HAL_InitTick+0x58>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f967 	bl	800324a <HAL_SYSTICK_Config>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e00e      	b.n	8002fa4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b0f      	cmp	r3, #15
 8002f8a:	d80a      	bhi.n	8002fa2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295
 8002f94:	f000 f92f 	bl	80031f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f98:	4a06      	ldr	r2, [pc, #24]	@ (8002fb4 <HAL_InitTick+0x5c>)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	e000      	b.n	8002fa4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	20000000 	.word	0x20000000
 8002fb0:	20000008 	.word	0x20000008
 8002fb4:	20000004 	.word	0x20000004

08002fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fbc:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <HAL_IncTick+0x20>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4b06      	ldr	r3, [pc, #24]	@ (8002fdc <HAL_IncTick+0x24>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	4a04      	ldr	r2, [pc, #16]	@ (8002fdc <HAL_IncTick+0x24>)
 8002fca:	6013      	str	r3, [r2, #0]
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	20000008 	.word	0x20000008
 8002fdc:	200006bc 	.word	0x200006bc

08002fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	@ (8002ff4 <HAL_GetTick+0x14>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	200006bc 	.word	0x200006bc

08002ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003000:	f7ff ffee 	bl	8002fe0 <HAL_GetTick>
 8003004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003010:	d005      	beq.n	800301e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003012:	4b0a      	ldr	r3, [pc, #40]	@ (800303c <HAL_Delay+0x44>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800301e:	bf00      	nop
 8003020:	f7ff ffde 	bl	8002fe0 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	429a      	cmp	r2, r3
 800302e:	d8f7      	bhi.n	8003020 <HAL_Delay+0x28>
  {
  }
}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20000008 	.word	0x20000008

08003040 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f003 0307 	and.w	r3, r3, #7
 800304e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003050:	4b0c      	ldr	r3, [pc, #48]	@ (8003084 <__NVIC_SetPriorityGrouping+0x44>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003056:	68ba      	ldr	r2, [r7, #8]
 8003058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800305c:	4013      	ands	r3, r2
 800305e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003068:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800306c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003072:	4a04      	ldr	r2, [pc, #16]	@ (8003084 <__NVIC_SetPriorityGrouping+0x44>)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	60d3      	str	r3, [r2, #12]
}
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800308c:	4b04      	ldr	r3, [pc, #16]	@ (80030a0 <__NVIC_GetPriorityGrouping+0x18>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	0a1b      	lsrs	r3, r3, #8
 8003092:	f003 0307 	and.w	r3, r3, #7
}
 8003096:	4618      	mov	r0, r3
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	db0b      	blt.n	80030ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	f003 021f 	and.w	r2, r3, #31
 80030bc:	4907      	ldr	r1, [pc, #28]	@ (80030dc <__NVIC_EnableIRQ+0x38>)
 80030be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c2:	095b      	lsrs	r3, r3, #5
 80030c4:	2001      	movs	r0, #1
 80030c6:	fa00 f202 	lsl.w	r2, r0, r2
 80030ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030ce:	bf00      	nop
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	e000e100 	.word	0xe000e100

080030e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	6039      	str	r1, [r7, #0]
 80030ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	db0a      	blt.n	800310a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	490c      	ldr	r1, [pc, #48]	@ (800312c <__NVIC_SetPriority+0x4c>)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	0112      	lsls	r2, r2, #4
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	440b      	add	r3, r1
 8003104:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003108:	e00a      	b.n	8003120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	4908      	ldr	r1, [pc, #32]	@ (8003130 <__NVIC_SetPriority+0x50>)
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	3b04      	subs	r3, #4
 8003118:	0112      	lsls	r2, r2, #4
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	440b      	add	r3, r1
 800311e:	761a      	strb	r2, [r3, #24]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000e100 	.word	0xe000e100
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	@ 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f1c3 0307 	rsb	r3, r3, #7
 800314e:	2b04      	cmp	r3, #4
 8003150:	bf28      	it	cs
 8003152:	2304      	movcs	r3, #4
 8003154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3304      	adds	r3, #4
 800315a:	2b06      	cmp	r3, #6
 800315c:	d902      	bls.n	8003164 <NVIC_EncodePriority+0x30>
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3b03      	subs	r3, #3
 8003162:	e000      	b.n	8003166 <NVIC_EncodePriority+0x32>
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003168:	f04f 32ff 	mov.w	r2, #4294967295
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43da      	mvns	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	401a      	ands	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800317c:	f04f 31ff 	mov.w	r1, #4294967295
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	43d9      	mvns	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800318c:	4313      	orrs	r3, r2
         );
}
 800318e:	4618      	mov	r0, r3
 8003190:	3724      	adds	r7, #36	@ 0x24
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031ac:	d301      	bcc.n	80031b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ae:	2301      	movs	r3, #1
 80031b0:	e00f      	b.n	80031d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031b2:	4a0a      	ldr	r2, [pc, #40]	@ (80031dc <SysTick_Config+0x40>)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ba:	210f      	movs	r1, #15
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295
 80031c0:	f7ff ff8e 	bl	80030e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c4:	4b05      	ldr	r3, [pc, #20]	@ (80031dc <SysTick_Config+0x40>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ca:	4b04      	ldr	r3, [pc, #16]	@ (80031dc <SysTick_Config+0x40>)
 80031cc:	2207      	movs	r2, #7
 80031ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	e000e010 	.word	0xe000e010

080031e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff ff29 	bl	8003040 <__NVIC_SetPriorityGrouping>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	4603      	mov	r3, r0
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003208:	f7ff ff3e 	bl	8003088 <__NVIC_GetPriorityGrouping>
 800320c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	6978      	ldr	r0, [r7, #20]
 8003214:	f7ff ff8e 	bl	8003134 <NVIC_EncodePriority>
 8003218:	4602      	mov	r2, r0
 800321a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff5d 	bl	80030e0 <__NVIC_SetPriority>
}
 8003226:	bf00      	nop
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	4603      	mov	r3, r0
 8003236:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323c:	4618      	mov	r0, r3
 800323e:	f7ff ff31 	bl	80030a4 <__NVIC_EnableIRQ>
}
 8003242:	bf00      	nop
 8003244:	3708      	adds	r7, #8
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b082      	sub	sp, #8
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff ffa2 	bl	800319c <SysTick_Config>
 8003258:	4603      	mov	r3, r0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003262:	b480      	push	{r7}
 8003264:	b083      	sub	sp, #12
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d004      	beq.n	8003280 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2280      	movs	r2, #128	@ 0x80
 800327a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e00c      	b.n	800329a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2205      	movs	r2, #5
 8003284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032b4:	b2db      	uxtb	r3, r3
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	@ 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032d2:	2300      	movs	r3, #0
 80032d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032da:	2300      	movs	r3, #0
 80032dc:	61fb      	str	r3, [r7, #28]
 80032de:	e16b      	b.n	80035b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032e0:	2201      	movs	r2, #1
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4013      	ands	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	f040 815a 	bne.w	80035b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b01      	cmp	r3, #1
 8003308:	d005      	beq.n	8003316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003312:	2b02      	cmp	r3, #2
 8003314:	d130      	bne.n	8003378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	2203      	movs	r2, #3
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	43db      	mvns	r3, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4013      	ands	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68da      	ldr	r2, [r3, #12]
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4313      	orrs	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800334c:	2201      	movs	r2, #1
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 0201 	and.w	r2, r3, #1
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b03      	cmp	r3, #3
 8003382:	d017      	beq.n	80033b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d123      	bne.n	8003408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	08da      	lsrs	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3208      	adds	r2, #8
 80033c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	220f      	movs	r2, #15
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	08da      	lsrs	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3208      	adds	r2, #8
 8003402:	69b9      	ldr	r1, [r7, #24]
 8003404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	2203      	movs	r2, #3
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0203 	and.w	r2, r3, #3
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80b4 	beq.w	80035b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	4b60      	ldr	r3, [pc, #384]	@ (80035d0 <HAL_GPIO_Init+0x30c>)
 8003450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003452:	4a5f      	ldr	r2, [pc, #380]	@ (80035d0 <HAL_GPIO_Init+0x30c>)
 8003454:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003458:	6453      	str	r3, [r2, #68]	@ 0x44
 800345a:	4b5d      	ldr	r3, [pc, #372]	@ (80035d0 <HAL_GPIO_Init+0x30c>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003466:	4a5b      	ldr	r2, [pc, #364]	@ (80035d4 <HAL_GPIO_Init+0x310>)
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	089b      	lsrs	r3, r3, #2
 800346c:	3302      	adds	r3, #2
 800346e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	220f      	movs	r2, #15
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	43db      	mvns	r3, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a52      	ldr	r2, [pc, #328]	@ (80035d8 <HAL_GPIO_Init+0x314>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d02b      	beq.n	80034ea <HAL_GPIO_Init+0x226>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a51      	ldr	r2, [pc, #324]	@ (80035dc <HAL_GPIO_Init+0x318>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d025      	beq.n	80034e6 <HAL_GPIO_Init+0x222>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a50      	ldr	r2, [pc, #320]	@ (80035e0 <HAL_GPIO_Init+0x31c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01f      	beq.n	80034e2 <HAL_GPIO_Init+0x21e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a4f      	ldr	r2, [pc, #316]	@ (80035e4 <HAL_GPIO_Init+0x320>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d019      	beq.n	80034de <HAL_GPIO_Init+0x21a>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a4e      	ldr	r2, [pc, #312]	@ (80035e8 <HAL_GPIO_Init+0x324>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <HAL_GPIO_Init+0x216>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a4d      	ldr	r2, [pc, #308]	@ (80035ec <HAL_GPIO_Init+0x328>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d00d      	beq.n	80034d6 <HAL_GPIO_Init+0x212>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a4c      	ldr	r2, [pc, #304]	@ (80035f0 <HAL_GPIO_Init+0x32c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d007      	beq.n	80034d2 <HAL_GPIO_Init+0x20e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a4b      	ldr	r2, [pc, #300]	@ (80035f4 <HAL_GPIO_Init+0x330>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d101      	bne.n	80034ce <HAL_GPIO_Init+0x20a>
 80034ca:	2307      	movs	r3, #7
 80034cc:	e00e      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034ce:	2308      	movs	r3, #8
 80034d0:	e00c      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034d2:	2306      	movs	r3, #6
 80034d4:	e00a      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034d6:	2305      	movs	r3, #5
 80034d8:	e008      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034da:	2304      	movs	r3, #4
 80034dc:	e006      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034de:	2303      	movs	r3, #3
 80034e0:	e004      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e002      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <HAL_GPIO_Init+0x228>
 80034ea:	2300      	movs	r3, #0
 80034ec:	69fa      	ldr	r2, [r7, #28]
 80034ee:	f002 0203 	and.w	r2, r2, #3
 80034f2:	0092      	lsls	r2, r2, #2
 80034f4:	4093      	lsls	r3, r2
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034fc:	4935      	ldr	r1, [pc, #212]	@ (80035d4 <HAL_GPIO_Init+0x310>)
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	3302      	adds	r3, #2
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800350a:	4b3b      	ldr	r3, [pc, #236]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800352e:	4a32      	ldr	r2, [pc, #200]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003534:	4b30      	ldr	r3, [pc, #192]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	4313      	orrs	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003558:	4a27      	ldr	r2, [pc, #156]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800355e:	4b26      	ldr	r3, [pc, #152]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	43db      	mvns	r3, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4013      	ands	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d003      	beq.n	8003582 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003582:	4a1d      	ldr	r2, [pc, #116]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003588:	4b1b      	ldr	r3, [pc, #108]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	43db      	mvns	r3, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4013      	ands	r3, r2
 8003596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ac:	4a12      	ldr	r2, [pc, #72]	@ (80035f8 <HAL_GPIO_Init+0x334>)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3301      	adds	r3, #1
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	2b0f      	cmp	r3, #15
 80035bc:	f67f ae90 	bls.w	80032e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	3724      	adds	r7, #36	@ 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40023800 	.word	0x40023800
 80035d4:	40013800 	.word	0x40013800
 80035d8:	40020000 	.word	0x40020000
 80035dc:	40020400 	.word	0x40020400
 80035e0:	40020800 	.word	0x40020800
 80035e4:	40020c00 	.word	0x40020c00
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40021400 	.word	0x40021400
 80035f0:	40021800 	.word	0x40021800
 80035f4:	40021c00 	.word	0x40021c00
 80035f8:	40013c00 	.word	0x40013c00

080035fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691a      	ldr	r2, [r3, #16]
 800360c:	887b      	ldrh	r3, [r7, #2]
 800360e:	4013      	ands	r3, r2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
 8003618:	e001      	b.n	800361e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800361e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
 8003638:	4613      	mov	r3, r2
 800363a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800363c:	787b      	ldrb	r3, [r7, #1]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003648:	e003      	b.n	8003652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800364a:	887b      	ldrh	r3, [r7, #2]
 800364c:	041a      	lsls	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	619a      	str	r2, [r3, #24]
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	4603      	mov	r3, r0
 8003668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800366a:	4b08      	ldr	r3, [pc, #32]	@ (800368c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	4013      	ands	r3, r2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003676:	4a05      	ldr	r2, [pc, #20]	@ (800368c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003678:	88fb      	ldrh	r3, [r7, #6]
 800367a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	4618      	mov	r0, r3
 8003680:	f000 f806 	bl	8003690 <HAL_GPIO_EXTI_Callback>
  }
}
 8003684:	bf00      	nop
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40013c00 	.word	0x40013c00

08003690 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e12b      	b.n	8003912 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff fa2a 	bl	8002b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2224      	movs	r2, #36	@ 0x24
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 0201 	bic.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800370a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800370c:	f002 f932 	bl	8005974 <HAL_RCC_GetPCLK1Freq>
 8003710:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	4a81      	ldr	r2, [pc, #516]	@ (800391c <HAL_I2C_Init+0x274>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d807      	bhi.n	800372c <HAL_I2C_Init+0x84>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4a80      	ldr	r2, [pc, #512]	@ (8003920 <HAL_I2C_Init+0x278>)
 8003720:	4293      	cmp	r3, r2
 8003722:	bf94      	ite	ls
 8003724:	2301      	movls	r3, #1
 8003726:	2300      	movhi	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	e006      	b.n	800373a <HAL_I2C_Init+0x92>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4a7d      	ldr	r2, [pc, #500]	@ (8003924 <HAL_I2C_Init+0x27c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	bf94      	ite	ls
 8003734:	2301      	movls	r3, #1
 8003736:	2300      	movhi	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e0e7      	b.n	8003912 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4a78      	ldr	r2, [pc, #480]	@ (8003928 <HAL_I2C_Init+0x280>)
 8003746:	fba2 2303 	umull	r2, r3, r2, r3
 800374a:	0c9b      	lsrs	r3, r3, #18
 800374c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	4a6a      	ldr	r2, [pc, #424]	@ (800391c <HAL_I2C_Init+0x274>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d802      	bhi.n	800377c <HAL_I2C_Init+0xd4>
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	3301      	adds	r3, #1
 800377a:	e009      	b.n	8003790 <HAL_I2C_Init+0xe8>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003782:	fb02 f303 	mul.w	r3, r2, r3
 8003786:	4a69      	ldr	r2, [pc, #420]	@ (800392c <HAL_I2C_Init+0x284>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	099b      	lsrs	r3, r3, #6
 800378e:	3301      	adds	r3, #1
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6812      	ldr	r2, [r2, #0]
 8003794:	430b      	orrs	r3, r1
 8003796:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	69db      	ldr	r3, [r3, #28]
 800379e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	495c      	ldr	r1, [pc, #368]	@ (800391c <HAL_I2C_Init+0x274>)
 80037ac:	428b      	cmp	r3, r1
 80037ae:	d819      	bhi.n	80037e4 <HAL_I2C_Init+0x13c>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1e59      	subs	r1, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80037be:	1c59      	adds	r1, r3, #1
 80037c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037c4:	400b      	ands	r3, r1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_I2C_Init+0x138>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1e59      	subs	r1, r3, #1
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80037d8:	3301      	adds	r3, #1
 80037da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037de:	e051      	b.n	8003884 <HAL_I2C_Init+0x1dc>
 80037e0:	2304      	movs	r3, #4
 80037e2:	e04f      	b.n	8003884 <HAL_I2C_Init+0x1dc>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d111      	bne.n	8003810 <HAL_I2C_Init+0x168>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	1e58      	subs	r0, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6859      	ldr	r1, [r3, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	440b      	add	r3, r1
 80037fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fe:	3301      	adds	r3, #1
 8003800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003804:	2b00      	cmp	r3, #0
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e012      	b.n	8003836 <HAL_I2C_Init+0x18e>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	1e58      	subs	r0, r3, #1
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	440b      	add	r3, r1
 800381e:	0099      	lsls	r1, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	fbb0 f3f3 	udiv	r3, r0, r3
 8003826:	3301      	adds	r3, #1
 8003828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_I2C_Init+0x196>
 800383a:	2301      	movs	r3, #1
 800383c:	e022      	b.n	8003884 <HAL_I2C_Init+0x1dc>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10e      	bne.n	8003864 <HAL_I2C_Init+0x1bc>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1e58      	subs	r0, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6859      	ldr	r1, [r3, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	440b      	add	r3, r1
 8003854:	fbb0 f3f3 	udiv	r3, r0, r3
 8003858:	3301      	adds	r3, #1
 800385a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003862:	e00f      	b.n	8003884 <HAL_I2C_Init+0x1dc>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1e58      	subs	r0, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	0099      	lsls	r1, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	fbb0 f3f3 	udiv	r3, r0, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003880:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	6809      	ldr	r1, [r1, #0]
 8003888:	4313      	orrs	r3, r2
 800388a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69da      	ldr	r2, [r3, #28]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6911      	ldr	r1, [r2, #16]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	68d2      	ldr	r2, [r2, #12]
 80038be:	4311      	orrs	r1, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6812      	ldr	r2, [r2, #0]
 80038c4:	430b      	orrs	r3, r1
 80038c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695a      	ldr	r2, [r3, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f042 0201 	orr.w	r2, r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	000186a0 	.word	0x000186a0
 8003920:	001e847f 	.word	0x001e847f
 8003924:	003d08ff 	.word	0x003d08ff
 8003928:	431bde83 	.word	0x431bde83
 800392c:	10624dd3 	.word	0x10624dd3

08003930 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003942:	2b80      	cmp	r3, #128	@ 0x80
 8003944:	d103      	bne.n	800394e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	611a      	str	r2, [r3, #16]
  }
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b088      	sub	sp, #32
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003972:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800397a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003982:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003984:	7bfb      	ldrb	r3, [r7, #15]
 8003986:	2b10      	cmp	r3, #16
 8003988:	d003      	beq.n	8003992 <HAL_I2C_EV_IRQHandler+0x38>
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	2b40      	cmp	r3, #64	@ 0x40
 800398e:	f040 80c1 	bne.w	8003b14 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10d      	bne.n	80039c8 <HAL_I2C_EV_IRQHandler+0x6e>
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80039b2:	d003      	beq.n	80039bc <HAL_I2C_EV_IRQHandler+0x62>
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80039ba:	d101      	bne.n	80039c0 <HAL_I2C_EV_IRQHandler+0x66>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <HAL_I2C_EV_IRQHandler+0x68>
 80039c0:	2300      	movs	r3, #0
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	f000 8132 	beq.w	8003c2c <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f003 0301 	and.w	r3, r3, #1
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00c      	beq.n	80039ec <HAL_I2C_EV_IRQHandler+0x92>
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	0a5b      	lsrs	r3, r3, #9
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d006      	beq.n	80039ec <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f001 fb7c 	bl	80050dc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fcf4 	bl	80043d2 <I2C_Master_SB>
 80039ea:	e092      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	08db      	lsrs	r3, r3, #3
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d009      	beq.n	8003a0c <HAL_I2C_EV_IRQHandler+0xb2>
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	0a5b      	lsrs	r3, r3, #9
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 fd6a 	bl	80044de <I2C_Master_ADD10>
 8003a0a:	e082      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	085b      	lsrs	r3, r3, #1
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d009      	beq.n	8003a2c <HAL_I2C_EV_IRQHandler+0xd2>
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	0a5b      	lsrs	r3, r3, #9
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fd84 	bl	8004532 <I2C_Master_ADDR>
 8003a2a:	e072      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	089b      	lsrs	r3, r3, #2
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d03b      	beq.n	8003ab0 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a46:	f000 80f3 	beq.w	8003c30 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	09db      	lsrs	r3, r3, #7
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00f      	beq.n	8003a76 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	0a9b      	lsrs	r3, r3, #10
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	089b      	lsrs	r3, r3, #2
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f94c 	bl	8003d0c <I2C_MasterTransmit_TXE>
 8003a74:	e04d      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80d6 	beq.w	8003c30 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	0a5b      	lsrs	r3, r3, #9
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f000 80cf 	beq.w	8003c30 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a92:	7bbb      	ldrb	r3, [r7, #14]
 8003a94:	2b21      	cmp	r3, #33	@ 0x21
 8003a96:	d103      	bne.n	8003aa0 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f9d3 	bl	8003e44 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a9e:	e0c7      	b.n	8003c30 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003aa0:	7bfb      	ldrb	r3, [r7, #15]
 8003aa2:	2b40      	cmp	r3, #64	@ 0x40
 8003aa4:	f040 80c4 	bne.w	8003c30 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fa41 	bl	8003f30 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aae:	e0bf      	b.n	8003c30 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003abe:	f000 80b7 	beq.w	8003c30 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	099b      	lsrs	r3, r3, #6
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00f      	beq.n	8003aee <HAL_I2C_EV_IRQHandler+0x194>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	0a9b      	lsrs	r3, r3, #10
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <HAL_I2C_EV_IRQHandler+0x194>
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	089b      	lsrs	r3, r3, #2
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d103      	bne.n	8003aee <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 faba 	bl	8004060 <I2C_MasterReceive_RXNE>
 8003aec:	e011      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	089b      	lsrs	r3, r3, #2
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 809a 	beq.w	8003c30 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	0a5b      	lsrs	r3, r3, #9
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8093 	beq.w	8003c30 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fb70 	bl	80041f0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b10:	e08e      	b.n	8003c30 <HAL_I2C_EV_IRQHandler+0x2d6>
 8003b12:	e08d      	b.n	8003c30 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	e007      	b.n	8003b36 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	085b      	lsrs	r3, r3, #1
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d012      	beq.n	8003b68 <HAL_I2C_EV_IRQHandler+0x20e>
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	0a5b      	lsrs	r3, r3, #9
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00c      	beq.n	8003b68 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d003      	beq.n	8003b5e <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003b5e:	69b9      	ldr	r1, [r7, #24]
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 ff35 	bl	80049d0 <I2C_Slave_ADDR>
 8003b66:	e066      	b.n	8003c36 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	091b      	lsrs	r3, r3, #4
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d009      	beq.n	8003b88 <HAL_I2C_EV_IRQHandler+0x22e>
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	0a5b      	lsrs	r3, r3, #9
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 ff6f 	bl	8004a64 <I2C_Slave_STOPF>
 8003b86:	e056      	b.n	8003c36 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b88:	7bbb      	ldrb	r3, [r7, #14]
 8003b8a:	2b21      	cmp	r3, #33	@ 0x21
 8003b8c:	d002      	beq.n	8003b94 <HAL_I2C_EV_IRQHandler+0x23a>
 8003b8e:	7bbb      	ldrb	r3, [r7, #14]
 8003b90:	2b29      	cmp	r3, #41	@ 0x29
 8003b92:	d125      	bne.n	8003be0 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	09db      	lsrs	r3, r3, #7
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00f      	beq.n	8003bc0 <HAL_I2C_EV_IRQHandler+0x266>
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	0a9b      	lsrs	r3, r3, #10
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <HAL_I2C_EV_IRQHandler+0x266>
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d103      	bne.n	8003bc0 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fe4b 	bl	8004854 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bbe:	e039      	b.n	8003c34 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	089b      	lsrs	r3, r3, #2
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d033      	beq.n	8003c34 <HAL_I2C_EV_IRQHandler+0x2da>
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	0a5b      	lsrs	r3, r3, #9
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d02d      	beq.n	8003c34 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fe78 	bl	80048ce <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bde:	e029      	b.n	8003c34 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	099b      	lsrs	r3, r3, #6
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00f      	beq.n	8003c0c <HAL_I2C_EV_IRQHandler+0x2b2>
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	0a9b      	lsrs	r3, r3, #10
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d009      	beq.n	8003c0c <HAL_I2C_EV_IRQHandler+0x2b2>
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	089b      	lsrs	r3, r3, #2
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d103      	bne.n	8003c0c <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 fe83 	bl	8004910 <I2C_SlaveReceive_RXNE>
 8003c0a:	e014      	b.n	8003c36 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	f003 0301 	and.w	r3, r3, #1
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00e      	beq.n	8003c36 <HAL_I2C_EV_IRQHandler+0x2dc>
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	0a5b      	lsrs	r3, r3, #9
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 feb1 	bl	800498c <I2C_SlaveReceive_BTF>
 8003c2a:	e004      	b.n	8003c36 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8003c2c:	bf00      	nop
 8003c2e:	e002      	b.n	8003c36 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c30:	bf00      	nop
 8003c32:	e000      	b.n	8003c36 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c34:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	460b      	mov	r3, r1
 8003c96:	70fb      	strb	r3, [r7, #3]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d1a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d22:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d28:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d150      	bne.n	8003dd4 <I2C_MasterTransmit_TXE+0xc8>
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	2b21      	cmp	r3, #33	@ 0x21
 8003d36:	d14d      	bne.n	8003dd4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d01d      	beq.n	8003d7a <I2C_MasterTransmit_TXE+0x6e>
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d01a      	beq.n	8003d7a <I2C_MasterTransmit_TXE+0x6e>
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d4a:	d016      	beq.n	8003d7a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d5a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2211      	movs	r2, #17
 8003d60:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ff62 	bl	8003c3c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d78:	e060      	b.n	8003e3c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003d88:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d98:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b40      	cmp	r3, #64	@ 0x40
 8003db2:	d107      	bne.n	8003dc4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ff7d 	bl	8003cbc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dc2:	e03b      	b.n	8003e3c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff35 	bl	8003c3c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003dd2:	e033      	b.n	8003e3c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
 8003dd6:	2b21      	cmp	r3, #33	@ 0x21
 8003dd8:	d005      	beq.n	8003de6 <I2C_MasterTransmit_TXE+0xda>
 8003dda:	7bbb      	ldrb	r3, [r7, #14]
 8003ddc:	2b40      	cmp	r3, #64	@ 0x40
 8003dde:	d12d      	bne.n	8003e3c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	2b22      	cmp	r3, #34	@ 0x22
 8003de4:	d12a      	bne.n	8003e3c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d108      	bne.n	8003e02 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dfe:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003e00:	e01c      	b.n	8003e3c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b40      	cmp	r3, #64	@ 0x40
 8003e0c:	d103      	bne.n	8003e16 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f88e 	bl	8003f30 <I2C_MemoryTransmit_TXE_BTF>
}
 8003e14:	e012      	b.n	8003e3c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	781a      	ldrb	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8003e3a:	e7ff      	b.n	8003e3c <I2C_MasterTransmit_TXE+0x130>
 8003e3c:	bf00      	nop
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e50:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b21      	cmp	r3, #33	@ 0x21
 8003e5c:	d164      	bne.n	8003f28 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d012      	beq.n	8003e8e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6c:	781a      	ldrb	r2, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003e8c:	e04c      	b.n	8003f28 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d01d      	beq.n	8003ed0 <I2C_MasterTransmit_BTF+0x8c>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b20      	cmp	r3, #32
 8003e98:	d01a      	beq.n	8003ed0 <I2C_MasterTransmit_BTF+0x8c>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ea0:	d016      	beq.n	8003ed0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003eb0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2211      	movs	r2, #17
 8003eb6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f7ff feb7 	bl	8003c3c <HAL_I2C_MasterTxCpltCallback>
}
 8003ece:	e02b      	b.n	8003f28 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003ede:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eee:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2220      	movs	r2, #32
 8003efa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b40      	cmp	r3, #64	@ 0x40
 8003f08:	d107      	bne.n	8003f1a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff fed2 	bl	8003cbc <HAL_I2C_MemTxCpltCallback>
}
 8003f18:	e006      	b.n	8003f28 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff fe8a 	bl	8003c3c <HAL_I2C_MasterTxCpltCallback>
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d11d      	bne.n	8003f84 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d10b      	bne.n	8003f68 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f60:	1c9a      	adds	r2, r3, #2
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003f66:	e077      	b.n	8004058 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	121b      	asrs	r3, r3, #8
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003f82:	e069      	b.n	8004058 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d10b      	bne.n	8003fa4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fa2:	e059      	b.n	8004058 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d152      	bne.n	8004052 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b22      	cmp	r3, #34	@ 0x22
 8003fb0:	d10d      	bne.n	8003fce <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fc0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003fcc:	e044      	b.n	8004058 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d015      	beq.n	8004004 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003fd8:	7bfb      	ldrb	r3, [r7, #15]
 8003fda:	2b21      	cmp	r3, #33	@ 0x21
 8003fdc:	d112      	bne.n	8004004 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fe2:	781a      	ldrb	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	1c5a      	adds	r2, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004002:	e029      	b.n	8004058 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d124      	bne.n	8004058 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800400e:	7bfb      	ldrb	r3, [r7, #15]
 8004010:	2b21      	cmp	r3, #33	@ 0x21
 8004012:	d121      	bne.n	8004058 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004022:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004032:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2220      	movs	r2, #32
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff fe36 	bl	8003cbc <HAL_I2C_MemTxCpltCallback>
}
 8004050:	e002      	b.n	8004058 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff fc6c 	bl	8003930 <I2C_Flush_DR>
}
 8004058:	bf00      	nop
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b22      	cmp	r3, #34	@ 0x22
 8004072:	f040 80b9 	bne.w	80041e8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d921      	bls.n	80040ce <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	f040 8096 	bne.w	80041e8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ca:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80040cc:	e08c      	b.n	80041e8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d07f      	beq.n	80041d6 <I2C_MasterReceive_RXNE+0x176>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d002      	beq.n	80040e2 <I2C_MasterReceive_RXNE+0x82>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d179      	bne.n	80041d6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 ffc8 	bl	8005078 <I2C_WaitOnSTOPRequestThroughIT>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d14c      	bne.n	8004188 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040fc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800410c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	691a      	ldr	r2, [r3, #16]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	b2d2      	uxtb	r2, r2
 800411a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b40      	cmp	r3, #64	@ 0x40
 8004146:	d10a      	bne.n	800415e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff fdba 	bl	8003cd0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800415c:	e044      	b.n	80041e8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d002      	beq.n	8004172 <I2C_MasterReceive_RXNE+0x112>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b20      	cmp	r3, #32
 8004170:	d103      	bne.n	800417a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30
 8004178:	e002      	b.n	8004180 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2212      	movs	r2, #18
 800417e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f7ff fd65 	bl	8003c50 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004186:	e02f      	b.n	80041e8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004196:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	691a      	ldr	r2, [r3, #16]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a2:	b2d2      	uxtb	r2, r2
 80041a4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041aa:	1c5a      	adds	r2, r3, #1
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2220      	movs	r2, #32
 80041c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff fd88 	bl	8003ce4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80041d4:	e008      	b.n	80041e8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e4:	605a      	str	r2, [r3, #4]
}
 80041e6:	e7ff      	b.n	80041e8 <I2C_MasterReceive_RXNE+0x188>
 80041e8:	bf00      	nop
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004202:	b29b      	uxth	r3, r3
 8004204:	2b04      	cmp	r3, #4
 8004206:	d11b      	bne.n	8004240 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004216:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422a:	1c5a      	adds	r2, r3, #1
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004234:	b29b      	uxth	r3, r3
 8004236:	3b01      	subs	r3, #1
 8004238:	b29a      	uxth	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800423e:	e0c4      	b.n	80043ca <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b03      	cmp	r3, #3
 8004248:	d129      	bne.n	800429e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004258:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d00a      	beq.n	8004276 <I2C_MasterReceive_BTF+0x86>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d007      	beq.n	8004276 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004274:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004280:	b2d2      	uxtb	r2, r2
 8004282:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004288:	1c5a      	adds	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800429c:	e095      	b.n	80043ca <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d17d      	bne.n	80043a4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d002      	beq.n	80042b4 <I2C_MasterReceive_BTF+0xc4>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2b10      	cmp	r3, #16
 80042b2:	d108      	bne.n	80042c6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e016      	b.n	80042f4 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d002      	beq.n	80042d2 <I2C_MasterReceive_BTF+0xe2>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d108      	bne.n	80042e4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	e007      	b.n	80042f4 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691a      	ldr	r2, [r3, #16]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800434e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b40      	cmp	r3, #64	@ 0x40
 8004362:	d10a      	bne.n	800437a <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff fcac 	bl	8003cd0 <HAL_I2C_MemRxCpltCallback>
}
 8004378:	e027      	b.n	80043ca <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2b08      	cmp	r3, #8
 8004386:	d002      	beq.n	800438e <I2C_MasterReceive_BTF+0x19e>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2b20      	cmp	r3, #32
 800438c:	d103      	bne.n	8004396 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	@ 0x30
 8004394:	e002      	b.n	800439c <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2212      	movs	r2, #18
 800439a:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff fc57 	bl	8003c50 <HAL_I2C_MasterRxCpltCallback>
}
 80043a2:	e012      	b.n	80043ca <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80043ca:	bf00      	nop
 80043cc:	3710      	adds	r7, #16
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b40      	cmp	r3, #64	@ 0x40
 80043e4:	d117      	bne.n	8004416 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	461a      	mov	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043fe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004400:	e067      	b.n	80044d2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f043 0301 	orr.w	r3, r3, #1
 800440c:	b2da      	uxtb	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	611a      	str	r2, [r3, #16]
}
 8004414:	e05d      	b.n	80044d2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800441e:	d133      	bne.n	8004488 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b21      	cmp	r3, #33	@ 0x21
 800442a:	d109      	bne.n	8004440 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800443c:	611a      	str	r2, [r3, #16]
 800443e:	e008      	b.n	8004452 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	b2da      	uxtb	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004456:	2b00      	cmp	r3, #0
 8004458:	d004      	beq.n	8004464 <I2C_Master_SB+0x92>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800445e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d108      	bne.n	8004476 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004468:	2b00      	cmp	r3, #0
 800446a:	d032      	beq.n	80044d2 <I2C_Master_SB+0x100>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d02d      	beq.n	80044d2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004484:	605a      	str	r2, [r3, #4]
}
 8004486:	e024      	b.n	80044d2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10e      	bne.n	80044ae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004494:	b29b      	uxth	r3, r3
 8004496:	11db      	asrs	r3, r3, #7
 8004498:	b2db      	uxtb	r3, r3
 800449a:	f003 0306 	and.w	r3, r3, #6
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	f063 030f 	orn	r3, r3, #15
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	611a      	str	r2, [r3, #16]
}
 80044ac:	e011      	b.n	80044d2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d10d      	bne.n	80044d2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	11db      	asrs	r3, r3, #7
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f003 0306 	and.w	r3, r3, #6
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f063 030e 	orn	r3, r3, #14
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	611a      	str	r2, [r3, #16]
}
 80044d2:	bf00      	nop
 80044d4:	370c      	adds	r7, #12
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80044de:	b480      	push	{r7}
 80044e0:	b083      	sub	sp, #12
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <I2C_Master_ADD10+0x26>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d108      	bne.n	8004516 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00c      	beq.n	8004526 <I2C_Master_ADD10+0x48>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004524:	605a      	str	r2, [r3, #4]
  }
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004532:	b480      	push	{r7}
 8004534:	b091      	sub	sp, #68	@ 0x44
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004540:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004548:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b22      	cmp	r3, #34	@ 0x22
 800455a:	f040 8169 	bne.w	8004830 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10f      	bne.n	8004586 <I2C_Master_ADDR+0x54>
 8004566:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800456a:	2b40      	cmp	r3, #64	@ 0x40
 800456c:	d10b      	bne.n	8004586 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456e:	2300      	movs	r3, #0
 8004570:	633b      	str	r3, [r7, #48]	@ 0x30
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	633b      	str	r3, [r7, #48]	@ 0x30
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	633b      	str	r3, [r7, #48]	@ 0x30
 8004582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004584:	e160      	b.n	8004848 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800458a:	2b00      	cmp	r3, #0
 800458c:	d11d      	bne.n	80045ca <I2C_Master_ADDR+0x98>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004596:	d118      	bne.n	80045ca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004598:	2300      	movs	r3, #0
 800459a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045bc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c2:	1c5a      	adds	r2, r3, #1
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80045c8:	e13e      	b.n	8004848 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d113      	bne.n	80045fc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d4:	2300      	movs	r3, #0
 80045d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e115      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b01      	cmp	r3, #1
 8004604:	f040 808a 	bne.w	800471c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800460a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800460e:	d137      	bne.n	8004680 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800461e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800462a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800462e:	d113      	bne.n	8004658 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800463e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004640:	2300      	movs	r3, #0
 8004642:	627b      	str	r3, [r7, #36]	@ 0x24
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	627b      	str	r3, [r7, #36]	@ 0x24
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	627b      	str	r3, [r7, #36]	@ 0x24
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	e0e7      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004658:	2300      	movs	r3, #0
 800465a:	623b      	str	r3, [r7, #32]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	623b      	str	r3, [r7, #32]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	623b      	str	r3, [r7, #32]
 800466c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	e0d3      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004682:	2b08      	cmp	r3, #8
 8004684:	d02e      	beq.n	80046e4 <I2C_Master_ADDR+0x1b2>
 8004686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004688:	2b20      	cmp	r3, #32
 800468a:	d02b      	beq.n	80046e4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800468c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800468e:	2b12      	cmp	r3, #18
 8004690:	d102      	bne.n	8004698 <I2C_Master_ADDR+0x166>
 8004692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004694:	2b01      	cmp	r3, #1
 8004696:	d125      	bne.n	80046e4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469a:	2b04      	cmp	r3, #4
 800469c:	d00e      	beq.n	80046bc <I2C_Master_ADDR+0x18a>
 800469e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d00b      	beq.n	80046bc <I2C_Master_ADDR+0x18a>
 80046a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d008      	beq.n	80046bc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	e007      	b.n	80046cc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046ca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046cc:	2300      	movs	r3, #0
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	61fb      	str	r3, [r7, #28]
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	e0a1      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046f2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046f4:	2300      	movs	r3, #0
 80046f6:	61bb      	str	r3, [r7, #24]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	61bb      	str	r3, [r7, #24]
 8004708:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	e085      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	2b02      	cmp	r3, #2
 8004724:	d14d      	bne.n	80047c2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004728:	2b04      	cmp	r3, #4
 800472a:	d016      	beq.n	800475a <I2C_Master_ADDR+0x228>
 800472c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800472e:	2b02      	cmp	r3, #2
 8004730:	d013      	beq.n	800475a <I2C_Master_ADDR+0x228>
 8004732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004734:	2b10      	cmp	r3, #16
 8004736:	d010      	beq.n	800475a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004746:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	e007      	b.n	800476a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004768:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004774:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004778:	d117      	bne.n	80047aa <I2C_Master_ADDR+0x278>
 800477a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004780:	d00b      	beq.n	800479a <I2C_Master_ADDR+0x268>
 8004782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004784:	2b01      	cmp	r3, #1
 8004786:	d008      	beq.n	800479a <I2C_Master_ADDR+0x268>
 8004788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800478a:	2b08      	cmp	r3, #8
 800478c:	d005      	beq.n	800479a <I2C_Master_ADDR+0x268>
 800478e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004790:	2b10      	cmp	r3, #16
 8004792:	d002      	beq.n	800479a <I2C_Master_ADDR+0x268>
 8004794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004796:	2b20      	cmp	r3, #32
 8004798:	d107      	bne.n	80047aa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685a      	ldr	r2, [r3, #4]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047a8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	617b      	str	r3, [r7, #20]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	e032      	b.n	8004828 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047d0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047e0:	d117      	bne.n	8004812 <I2C_Master_ADDR+0x2e0>
 80047e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047e8:	d00b      	beq.n	8004802 <I2C_Master_ADDR+0x2d0>
 80047ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d008      	beq.n	8004802 <I2C_Master_ADDR+0x2d0>
 80047f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d005      	beq.n	8004802 <I2C_Master_ADDR+0x2d0>
 80047f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f8:	2b10      	cmp	r3, #16
 80047fa:	d002      	beq.n	8004802 <I2C_Master_ADDR+0x2d0>
 80047fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d107      	bne.n	8004812 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004810:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	699b      	ldr	r3, [r3, #24]
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800482e:	e00b      	b.n	8004848 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]
}
 8004846:	e7ff      	b.n	8004848 <I2C_Master_ADDR+0x316>
 8004848:	bf00      	nop
 800484a:	3744      	adds	r7, #68	@ 0x44
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004862:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d02b      	beq.n	80048c6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004872:	781a      	ldrb	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d114      	bne.n	80048c6 <I2C_SlaveTransmit_TXE+0x72>
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	2b29      	cmp	r3, #41	@ 0x29
 80048a0:	d111      	bne.n	80048c6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048b0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2221      	movs	r2, #33	@ 0x21
 80048b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2228      	movs	r2, #40	@ 0x28
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff f9cf 	bl	8003c64 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80048c6:	bf00      	nop
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d011      	beq.n	8004904 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800491e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d02c      	beq.n	8004984 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004954:	b29b      	uxth	r3, r3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d114      	bne.n	8004984 <I2C_SlaveReceive_RXNE+0x74>
 800495a:	7bfb      	ldrb	r3, [r7, #15]
 800495c:	2b2a      	cmp	r3, #42	@ 0x2a
 800495e:	d111      	bne.n	8004984 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800496e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2222      	movs	r2, #34	@ 0x22
 8004974:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2228      	movs	r2, #40	@ 0x28
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff f97a 	bl	8003c78 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d012      	beq.n	80049c4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80049da:	2300      	movs	r3, #0
 80049dc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80049ea:	2b28      	cmp	r3, #40	@ 0x28
 80049ec:	d127      	bne.n	8004a3e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049fc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	089b      	lsrs	r3, r3, #2
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	09db      	lsrs	r3, r3, #7
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d103      	bne.n	8004a22 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	81bb      	strh	r3, [r7, #12]
 8004a20:	e002      	b.n	8004a28 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004a30:	89ba      	ldrh	r2, [r7, #12]
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	4619      	mov	r1, r3
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff f928 	bl	8003c8c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a3c:	e00e      	b.n	8004a5c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004a84:	2300      	movs	r3, #0
 8004a86:	60bb      	str	r3, [r7, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	60bb      	str	r3, [r7, #8]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0201 	orr.w	r2, r2, #1
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ab0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004abc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ac0:	d172      	bne.n	8004ba8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b22      	cmp	r3, #34	@ 0x22
 8004ac6:	d002      	beq.n	8004ace <I2C_Slave_STOPF+0x6a>
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8004acc:	d135      	bne.n	8004b3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	f043 0204 	orr.w	r2, r3, #4
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fe fbcd 	bl	80032a6 <HAL_DMA_GetState>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d049      	beq.n	8004ba6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b16:	4a69      	ldr	r2, [pc, #420]	@ (8004cbc <I2C_Slave_STOPF+0x258>)
 8004b18:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe fb9f 	bl	8003262 <HAL_DMA_Abort_IT>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d03d      	beq.n	8004ba6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b34:	4610      	mov	r0, r2
 8004b36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b38:	e035      	b.n	8004ba6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d005      	beq.n	8004b5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	f043 0204 	orr.w	r2, r3, #4
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe fb97 	bl	80032a6 <HAL_DMA_GetState>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d014      	beq.n	8004ba8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b82:	4a4e      	ldr	r2, [pc, #312]	@ (8004cbc <I2C_Slave_STOPF+0x258>)
 8004b84:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fe fb69 	bl	8003262 <HAL_DMA_Abort_IT>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d008      	beq.n	8004ba8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	4798      	blx	r3
 8004ba4:	e000      	b.n	8004ba8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ba6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d03e      	beq.n	8004c30 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b04      	cmp	r3, #4
 8004bbe:	d112      	bne.n	8004be6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	b2d2      	uxtb	r2, r2
 8004bcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bf0:	2b40      	cmp	r3, #64	@ 0x40
 8004bf2:	d112      	bne.n	8004c1a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c28:	f043 0204 	orr.w	r2, r3, #4
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f843 	bl	8004cc4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004c3e:	e039      	b.n	8004cb4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c44:	d109      	bne.n	8004c5a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2228      	movs	r2, #40	@ 0x28
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f7ff f80f 	bl	8003c78 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b28      	cmp	r3, #40	@ 0x28
 8004c64:	d111      	bne.n	8004c8a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a15      	ldr	r2, [pc, #84]	@ (8004cc0 <I2C_Slave_STOPF+0x25c>)
 8004c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff f810 	bl	8003ca8 <HAL_I2C_ListenCpltCallback>
}
 8004c88:	e014      	b.n	8004cb4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c8e:	2b22      	cmp	r3, #34	@ 0x22
 8004c90:	d002      	beq.n	8004c98 <I2C_Slave_STOPF+0x234>
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	2b22      	cmp	r3, #34	@ 0x22
 8004c96:	d10d      	bne.n	8004cb4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7fe ffe2 	bl	8003c78 <HAL_I2C_SlaveRxCpltCallback>
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	08004f29 	.word	0x08004f29
 8004cc0:	ffff0000 	.word	0xffff0000

08004cc4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cd2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cda:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004cdc:	7bbb      	ldrb	r3, [r7, #14]
 8004cde:	2b10      	cmp	r3, #16
 8004ce0:	d002      	beq.n	8004ce8 <I2C_ITError+0x24>
 8004ce2:	7bbb      	ldrb	r3, [r7, #14]
 8004ce4:	2b40      	cmp	r3, #64	@ 0x40
 8004ce6:	d10a      	bne.n	8004cfe <I2C_ITError+0x3a>
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	2b22      	cmp	r3, #34	@ 0x22
 8004cec:	d107      	bne.n	8004cfe <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cfc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d04:	2b28      	cmp	r3, #40	@ 0x28
 8004d06:	d107      	bne.n	8004d18 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2228      	movs	r2, #40	@ 0x28
 8004d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004d16:	e015      	b.n	8004d44 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d26:	d00a      	beq.n	8004d3e <I2C_ITError+0x7a>
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
 8004d2a:	2b60      	cmp	r3, #96	@ 0x60
 8004d2c:	d007      	beq.n	8004d3e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d52:	d162      	bne.n	8004e1a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d62:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d020      	beq.n	8004db4 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d76:	4a6a      	ldr	r2, [pc, #424]	@ (8004f20 <I2C_ITError+0x25c>)
 8004d78:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fe fa6f 	bl	8003262 <HAL_DMA_Abort_IT>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 8089 	beq.w	8004e9e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f022 0201 	bic.w	r2, r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004dae:	4610      	mov	r0, r2
 8004db0:	4798      	blx	r3
 8004db2:	e074      	b.n	8004e9e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db8:	4a59      	ldr	r2, [pc, #356]	@ (8004f20 <I2C_ITError+0x25c>)
 8004dba:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fe fa4e 	bl	8003262 <HAL_DMA_Abort_IT>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d068      	beq.n	8004e9e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd6:	2b40      	cmp	r3, #64	@ 0x40
 8004dd8:	d10b      	bne.n	8004df2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0201 	bic.w	r2, r2, #1
 8004e00:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e14:	4610      	mov	r0, r2
 8004e16:	4798      	blx	r3
 8004e18:	e041      	b.n	8004e9e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	2b60      	cmp	r3, #96	@ 0x60
 8004e24:	d125      	bne.n	8004e72 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3e:	2b40      	cmp	r3, #64	@ 0x40
 8004e40:	d10b      	bne.n	8004e5a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0201 	bic.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fe ff44 	bl	8003cf8 <HAL_I2C_AbortCpltCallback>
 8004e70:	e015      	b.n	8004e9e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e7c:	2b40      	cmp	r3, #64	@ 0x40
 8004e7e:	d10b      	bne.n	8004e98 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7fe ff23 	bl	8003ce4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea2:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10e      	bne.n	8004ecc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d109      	bne.n	8004ecc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d104      	bne.n	8004ecc <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d007      	beq.n	8004edc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004eda:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ee2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d113      	bne.n	8004f18 <I2C_ITError+0x254>
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b28      	cmp	r3, #40	@ 0x28
 8004ef4:	d110      	bne.n	8004f18 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8004f24 <I2C_ITError+0x260>)
 8004efa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fe fec8 	bl	8003ca8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f18:	bf00      	nop
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	08004f29 	.word	0x08004f29
 8004f24:	ffff0000 	.word	0xffff0000

08004f28 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f38:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f40:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004f42:	4b4b      	ldr	r3, [pc, #300]	@ (8005070 <I2C_DMAAbort+0x148>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	08db      	lsrs	r3, r3, #3
 8004f48:	4a4a      	ldr	r2, [pc, #296]	@ (8005074 <I2C_DMAAbort+0x14c>)
 8004f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4e:	0a1a      	lsrs	r2, r3, #8
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	00da      	lsls	r2, r3, #3
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f66:	f043 0220 	orr.w	r2, r3, #32
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8004f6e:	e00a      	b.n	8004f86 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f84:	d0ea      	beq.n	8004f5c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f92:	2200      	movs	r2, #0
 8004f94:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fb4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc8:	2200      	movs	r2, #0
 8004fca:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd8:	2200      	movs	r2, #0
 8004fda:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0201 	bic.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2b60      	cmp	r3, #96	@ 0x60
 8004ff6:	d10e      	bne.n	8005016 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	2200      	movs	r2, #0
 800500c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800500e:	6978      	ldr	r0, [r7, #20]
 8005010:	f7fe fe72 	bl	8003cf8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005014:	e027      	b.n	8005066 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005016:	7cfb      	ldrb	r3, [r7, #19]
 8005018:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800501c:	2b28      	cmp	r3, #40	@ 0x28
 800501e:	d117      	bne.n	8005050 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f042 0201 	orr.w	r2, r2, #1
 800502e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800503e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2200      	movs	r2, #0
 8005044:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2228      	movs	r2, #40	@ 0x28
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800504e:	e007      	b.n	8005060 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005060:	6978      	ldr	r0, [r7, #20]
 8005062:	f7fe fe3f 	bl	8003ce4 <HAL_I2C_ErrorCallback>
}
 8005066:	bf00      	nop
 8005068:	3718      	adds	r7, #24
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000000 	.word	0x20000000
 8005074:	14f8b589 	.word	0x14f8b589

08005078 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005084:	4b13      	ldr	r3, [pc, #76]	@ (80050d4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	08db      	lsrs	r3, r3, #3
 800508a:	4a13      	ldr	r2, [pc, #76]	@ (80050d8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800508c:	fba2 2303 	umull	r2, r3, r2, r3
 8005090:	0a1a      	lsrs	r2, r3, #8
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3b01      	subs	r3, #1
 800509e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d107      	bne.n	80050b6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	f043 0220 	orr.w	r2, r3, #32
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e008      	b.n	80050c8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050c4:	d0e9      	beq.n	800509a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	20000000 	.word	0x20000000
 80050d8:	14f8b589 	.word	0x14f8b589

080050dc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80050dc:	b480      	push	{r7}
 80050de:	b083      	sub	sp, #12
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80050ec:	d103      	bne.n	80050f6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80050f4:	e007      	b.n	8005106 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fa:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80050fe:	d102      	bne.n	8005106 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2208      	movs	r2, #8
 8005104:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e267      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d075      	beq.n	800521e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005132:	4b88      	ldr	r3, [pc, #544]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 030c 	and.w	r3, r3, #12
 800513a:	2b04      	cmp	r3, #4
 800513c:	d00c      	beq.n	8005158 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800513e:	4b85      	ldr	r3, [pc, #532]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005146:	2b08      	cmp	r3, #8
 8005148:	d112      	bne.n	8005170 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800514a:	4b82      	ldr	r3, [pc, #520]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005152:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005156:	d10b      	bne.n	8005170 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005158:	4b7e      	ldr	r3, [pc, #504]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d05b      	beq.n	800521c <HAL_RCC_OscConfig+0x108>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d157      	bne.n	800521c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e242      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005178:	d106      	bne.n	8005188 <HAL_RCC_OscConfig+0x74>
 800517a:	4b76      	ldr	r3, [pc, #472]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a75      	ldr	r2, [pc, #468]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 8005180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	e01d      	b.n	80051c4 <HAL_RCC_OscConfig+0xb0>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005190:	d10c      	bne.n	80051ac <HAL_RCC_OscConfig+0x98>
 8005192:	4b70      	ldr	r3, [pc, #448]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a6f      	ldr	r2, [pc, #444]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 8005198:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	4b6d      	ldr	r3, [pc, #436]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a6c      	ldr	r2, [pc, #432]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 80051a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	e00b      	b.n	80051c4 <HAL_RCC_OscConfig+0xb0>
 80051ac:	4b69      	ldr	r3, [pc, #420]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a68      	ldr	r2, [pc, #416]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 80051b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051b6:	6013      	str	r3, [r2, #0]
 80051b8:	4b66      	ldr	r3, [pc, #408]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a65      	ldr	r2, [pc, #404]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 80051be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d013      	beq.n	80051f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051cc:	f7fd ff08 	bl	8002fe0 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051d4:	f7fd ff04 	bl	8002fe0 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b64      	cmp	r3, #100	@ 0x64
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e207      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051e6:	4b5b      	ldr	r3, [pc, #364]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f0      	beq.n	80051d4 <HAL_RCC_OscConfig+0xc0>
 80051f2:	e014      	b.n	800521e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f4:	f7fd fef4 	bl	8002fe0 <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051fc:	f7fd fef0 	bl	8002fe0 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b64      	cmp	r3, #100	@ 0x64
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e1f3      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800520e:	4b51      	ldr	r3, [pc, #324]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0xe8>
 800521a:	e000      	b.n	800521e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800521c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d063      	beq.n	80052f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800522a:	4b4a      	ldr	r3, [pc, #296]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 030c 	and.w	r3, r3, #12
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00b      	beq.n	800524e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005236:	4b47      	ldr	r3, [pc, #284]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800523e:	2b08      	cmp	r3, #8
 8005240:	d11c      	bne.n	800527c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005242:	4b44      	ldr	r3, [pc, #272]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d116      	bne.n	800527c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800524e:	4b41      	ldr	r3, [pc, #260]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <HAL_RCC_OscConfig+0x152>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	2b01      	cmp	r3, #1
 8005260:	d001      	beq.n	8005266 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e1c7      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005266:	4b3b      	ldr	r3, [pc, #236]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	4937      	ldr	r1, [pc, #220]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 8005276:	4313      	orrs	r3, r2
 8005278:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800527a:	e03a      	b.n	80052f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d020      	beq.n	80052c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005284:	4b34      	ldr	r3, [pc, #208]	@ (8005358 <HAL_RCC_OscConfig+0x244>)
 8005286:	2201      	movs	r2, #1
 8005288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528a:	f7fd fea9 	bl	8002fe0 <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005290:	e008      	b.n	80052a4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005292:	f7fd fea5 	bl	8002fe0 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e1a8      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052a4:	4b2b      	ldr	r3, [pc, #172]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0302 	and.w	r3, r3, #2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0f0      	beq.n	8005292 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052b0:	4b28      	ldr	r3, [pc, #160]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	4925      	ldr	r1, [pc, #148]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	600b      	str	r3, [r1, #0]
 80052c4:	e015      	b.n	80052f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052c6:	4b24      	ldr	r3, [pc, #144]	@ (8005358 <HAL_RCC_OscConfig+0x244>)
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052cc:	f7fd fe88 	bl	8002fe0 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d4:	f7fd fe84 	bl	8002fe0 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e187      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052e6:	4b1b      	ldr	r3, [pc, #108]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d036      	beq.n	800536c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d016      	beq.n	8005334 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005306:	4b15      	ldr	r3, [pc, #84]	@ (800535c <HAL_RCC_OscConfig+0x248>)
 8005308:	2201      	movs	r2, #1
 800530a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800530c:	f7fd fe68 	bl	8002fe0 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005314:	f7fd fe64 	bl	8002fe0 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e167      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005326:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <HAL_RCC_OscConfig+0x240>)
 8005328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0f0      	beq.n	8005314 <HAL_RCC_OscConfig+0x200>
 8005332:	e01b      	b.n	800536c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005334:	4b09      	ldr	r3, [pc, #36]	@ (800535c <HAL_RCC_OscConfig+0x248>)
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800533a:	f7fd fe51 	bl	8002fe0 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005340:	e00e      	b.n	8005360 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005342:	f7fd fe4d 	bl	8002fe0 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d907      	bls.n	8005360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e150      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
 8005354:	40023800 	.word	0x40023800
 8005358:	42470000 	.word	0x42470000
 800535c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005360:	4b88      	ldr	r3, [pc, #544]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 8005362:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d1ea      	bne.n	8005342 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	f000 8097 	beq.w	80054a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800537a:	2300      	movs	r3, #0
 800537c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800537e:	4b81      	ldr	r3, [pc, #516]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10f      	bne.n	80053aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800538a:	2300      	movs	r3, #0
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	4b7d      	ldr	r3, [pc, #500]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	4a7c      	ldr	r2, [pc, #496]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 8005394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005398:	6413      	str	r3, [r2, #64]	@ 0x40
 800539a:	4b7a      	ldr	r3, [pc, #488]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 800539c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053a2:	60bb      	str	r3, [r7, #8]
 80053a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053a6:	2301      	movs	r3, #1
 80053a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053aa:	4b77      	ldr	r3, [pc, #476]	@ (8005588 <HAL_RCC_OscConfig+0x474>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d118      	bne.n	80053e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053b6:	4b74      	ldr	r3, [pc, #464]	@ (8005588 <HAL_RCC_OscConfig+0x474>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a73      	ldr	r2, [pc, #460]	@ (8005588 <HAL_RCC_OscConfig+0x474>)
 80053bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053c2:	f7fd fe0d 	bl	8002fe0 <HAL_GetTick>
 80053c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053c8:	e008      	b.n	80053dc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ca:	f7fd fe09 	bl	8002fe0 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e10c      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053dc:	4b6a      	ldr	r3, [pc, #424]	@ (8005588 <HAL_RCC_OscConfig+0x474>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0f0      	beq.n	80053ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d106      	bne.n	80053fe <HAL_RCC_OscConfig+0x2ea>
 80053f0:	4b64      	ldr	r3, [pc, #400]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 80053f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f4:	4a63      	ldr	r2, [pc, #396]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 80053f6:	f043 0301 	orr.w	r3, r3, #1
 80053fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80053fc:	e01c      	b.n	8005438 <HAL_RCC_OscConfig+0x324>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b05      	cmp	r3, #5
 8005404:	d10c      	bne.n	8005420 <HAL_RCC_OscConfig+0x30c>
 8005406:	4b5f      	ldr	r3, [pc, #380]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 8005408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800540a:	4a5e      	ldr	r2, [pc, #376]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 800540c:	f043 0304 	orr.w	r3, r3, #4
 8005410:	6713      	str	r3, [r2, #112]	@ 0x70
 8005412:	4b5c      	ldr	r3, [pc, #368]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 8005414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005416:	4a5b      	ldr	r2, [pc, #364]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 8005418:	f043 0301 	orr.w	r3, r3, #1
 800541c:	6713      	str	r3, [r2, #112]	@ 0x70
 800541e:	e00b      	b.n	8005438 <HAL_RCC_OscConfig+0x324>
 8005420:	4b58      	ldr	r3, [pc, #352]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005424:	4a57      	ldr	r2, [pc, #348]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 8005426:	f023 0301 	bic.w	r3, r3, #1
 800542a:	6713      	str	r3, [r2, #112]	@ 0x70
 800542c:	4b55      	ldr	r3, [pc, #340]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 800542e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005430:	4a54      	ldr	r2, [pc, #336]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 8005432:	f023 0304 	bic.w	r3, r3, #4
 8005436:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d015      	beq.n	800546c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005440:	f7fd fdce 	bl	8002fe0 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005446:	e00a      	b.n	800545e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005448:	f7fd fdca 	bl	8002fe0 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005456:	4293      	cmp	r3, r2
 8005458:	d901      	bls.n	800545e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e0cb      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800545e:	4b49      	ldr	r3, [pc, #292]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 8005460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0ee      	beq.n	8005448 <HAL_RCC_OscConfig+0x334>
 800546a:	e014      	b.n	8005496 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800546c:	f7fd fdb8 	bl	8002fe0 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005472:	e00a      	b.n	800548a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005474:	f7fd fdb4 	bl	8002fe0 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005482:	4293      	cmp	r3, r2
 8005484:	d901      	bls.n	800548a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e0b5      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800548a:	4b3e      	ldr	r3, [pc, #248]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 800548c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1ee      	bne.n	8005474 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005496:	7dfb      	ldrb	r3, [r7, #23]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d105      	bne.n	80054a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800549c:	4b39      	ldr	r3, [pc, #228]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 800549e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a0:	4a38      	ldr	r2, [pc, #224]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 80054a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 80a1 	beq.w	80055f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054b2:	4b34      	ldr	r3, [pc, #208]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f003 030c 	and.w	r3, r3, #12
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d05c      	beq.n	8005578 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d141      	bne.n	800554a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c6:	4b31      	ldr	r3, [pc, #196]	@ (800558c <HAL_RCC_OscConfig+0x478>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054cc:	f7fd fd88 	bl	8002fe0 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054d4:	f7fd fd84 	bl	8002fe0 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e087      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054e6:	4b27      	ldr	r3, [pc, #156]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f0      	bne.n	80054d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69da      	ldr	r2, [r3, #28]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005500:	019b      	lsls	r3, r3, #6
 8005502:	431a      	orrs	r2, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005508:	085b      	lsrs	r3, r3, #1
 800550a:	3b01      	subs	r3, #1
 800550c:	041b      	lsls	r3, r3, #16
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005514:	061b      	lsls	r3, r3, #24
 8005516:	491b      	ldr	r1, [pc, #108]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 8005518:	4313      	orrs	r3, r2
 800551a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800551c:	4b1b      	ldr	r3, [pc, #108]	@ (800558c <HAL_RCC_OscConfig+0x478>)
 800551e:	2201      	movs	r2, #1
 8005520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005522:	f7fd fd5d 	bl	8002fe0 <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800552a:	f7fd fd59 	bl	8002fe0 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e05c      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800553c:	4b11      	ldr	r3, [pc, #68]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f0      	beq.n	800552a <HAL_RCC_OscConfig+0x416>
 8005548:	e054      	b.n	80055f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800554a:	4b10      	ldr	r3, [pc, #64]	@ (800558c <HAL_RCC_OscConfig+0x478>)
 800554c:	2200      	movs	r2, #0
 800554e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005550:	f7fd fd46 	bl	8002fe0 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005558:	f7fd fd42 	bl	8002fe0 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e045      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800556a:	4b06      	ldr	r3, [pc, #24]	@ (8005584 <HAL_RCC_OscConfig+0x470>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1f0      	bne.n	8005558 <HAL_RCC_OscConfig+0x444>
 8005576:	e03d      	b.n	80055f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d107      	bne.n	8005590 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e038      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
 8005584:	40023800 	.word	0x40023800
 8005588:	40007000 	.word	0x40007000
 800558c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005590:	4b1b      	ldr	r3, [pc, #108]	@ (8005600 <HAL_RCC_OscConfig+0x4ec>)
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d028      	beq.n	80055f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d121      	bne.n	80055f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d11a      	bne.n	80055f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80055c0:	4013      	ands	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80055c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d111      	bne.n	80055f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d6:	085b      	lsrs	r3, r3, #1
 80055d8:	3b01      	subs	r3, #1
 80055da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055dc:	429a      	cmp	r2, r3
 80055de:	d107      	bne.n	80055f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d001      	beq.n	80055f4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3718      	adds	r7, #24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	40023800 	.word	0x40023800

08005604 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0cc      	b.n	80057b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005618:	4b68      	ldr	r3, [pc, #416]	@ (80057bc <HAL_RCC_ClockConfig+0x1b8>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0307 	and.w	r3, r3, #7
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	429a      	cmp	r2, r3
 8005624:	d90c      	bls.n	8005640 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005626:	4b65      	ldr	r3, [pc, #404]	@ (80057bc <HAL_RCC_ClockConfig+0x1b8>)
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800562e:	4b63      	ldr	r3, [pc, #396]	@ (80057bc <HAL_RCC_ClockConfig+0x1b8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	683a      	ldr	r2, [r7, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d001      	beq.n	8005640 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e0b8      	b.n	80057b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d020      	beq.n	800568e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 0304 	and.w	r3, r3, #4
 8005654:	2b00      	cmp	r3, #0
 8005656:	d005      	beq.n	8005664 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005658:	4b59      	ldr	r3, [pc, #356]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	4a58      	ldr	r2, [pc, #352]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005662:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0308 	and.w	r3, r3, #8
 800566c:	2b00      	cmp	r3, #0
 800566e:	d005      	beq.n	800567c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005670:	4b53      	ldr	r3, [pc, #332]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	4a52      	ldr	r2, [pc, #328]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005676:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800567a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800567c:	4b50      	ldr	r3, [pc, #320]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	494d      	ldr	r1, [pc, #308]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	4313      	orrs	r3, r2
 800568c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d044      	beq.n	8005724 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d107      	bne.n	80056b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056a2:	4b47      	ldr	r3, [pc, #284]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d119      	bne.n	80056e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e07f      	b.n	80057b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d003      	beq.n	80056c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d107      	bne.n	80056d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056c2:	4b3f      	ldr	r3, [pc, #252]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d109      	bne.n	80056e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e06f      	b.n	80057b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056d2:	4b3b      	ldr	r3, [pc, #236]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e067      	b.n	80057b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056e2:	4b37      	ldr	r3, [pc, #220]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f023 0203 	bic.w	r2, r3, #3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	4934      	ldr	r1, [pc, #208]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80056f4:	f7fd fc74 	bl	8002fe0 <HAL_GetTick>
 80056f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056fa:	e00a      	b.n	8005712 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056fc:	f7fd fc70 	bl	8002fe0 <HAL_GetTick>
 8005700:	4602      	mov	r2, r0
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800570a:	4293      	cmp	r3, r2
 800570c:	d901      	bls.n	8005712 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800570e:	2303      	movs	r3, #3
 8005710:	e04f      	b.n	80057b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005712:	4b2b      	ldr	r3, [pc, #172]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 020c 	and.w	r2, r3, #12
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	429a      	cmp	r2, r3
 8005722:	d1eb      	bne.n	80056fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005724:	4b25      	ldr	r3, [pc, #148]	@ (80057bc <HAL_RCC_ClockConfig+0x1b8>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d20c      	bcs.n	800574c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005732:	4b22      	ldr	r3, [pc, #136]	@ (80057bc <HAL_RCC_ClockConfig+0x1b8>)
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800573a:	4b20      	ldr	r3, [pc, #128]	@ (80057bc <HAL_RCC_ClockConfig+0x1b8>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d001      	beq.n	800574c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e032      	b.n	80057b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0304 	and.w	r3, r3, #4
 8005754:	2b00      	cmp	r3, #0
 8005756:	d008      	beq.n	800576a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005758:	4b19      	ldr	r3, [pc, #100]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	4916      	ldr	r1, [pc, #88]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005766:	4313      	orrs	r3, r2
 8005768:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d009      	beq.n	800578a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005776:	4b12      	ldr	r3, [pc, #72]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	490e      	ldr	r1, [pc, #56]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005786:	4313      	orrs	r3, r2
 8005788:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800578a:	f000 f821 	bl	80057d0 <HAL_RCC_GetSysClockFreq>
 800578e:	4602      	mov	r2, r0
 8005790:	4b0b      	ldr	r3, [pc, #44]	@ (80057c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	091b      	lsrs	r3, r3, #4
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	490a      	ldr	r1, [pc, #40]	@ (80057c4 <HAL_RCC_ClockConfig+0x1c0>)
 800579c:	5ccb      	ldrb	r3, [r1, r3]
 800579e:	fa22 f303 	lsr.w	r3, r2, r3
 80057a2:	4a09      	ldr	r2, [pc, #36]	@ (80057c8 <HAL_RCC_ClockConfig+0x1c4>)
 80057a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80057a6:	4b09      	ldr	r3, [pc, #36]	@ (80057cc <HAL_RCC_ClockConfig+0x1c8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fd fbd4 	bl	8002f58 <HAL_InitTick>

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3710      	adds	r7, #16
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	40023c00 	.word	0x40023c00
 80057c0:	40023800 	.word	0x40023800
 80057c4:	0800b934 	.word	0x0800b934
 80057c8:	20000000 	.word	0x20000000
 80057cc:	20000004 	.word	0x20000004

080057d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057d4:	b090      	sub	sp, #64	@ 0x40
 80057d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80057d8:	2300      	movs	r3, #0
 80057da:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057e8:	4b59      	ldr	r3, [pc, #356]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x180>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 030c 	and.w	r3, r3, #12
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d00d      	beq.n	8005810 <HAL_RCC_GetSysClockFreq+0x40>
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	f200 80a1 	bhi.w	800593c <HAL_RCC_GetSysClockFreq+0x16c>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <HAL_RCC_GetSysClockFreq+0x34>
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d003      	beq.n	800580a <HAL_RCC_GetSysClockFreq+0x3a>
 8005802:	e09b      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005804:	4b53      	ldr	r3, [pc, #332]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x184>)
 8005806:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005808:	e09b      	b.n	8005942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800580a:	4b53      	ldr	r3, [pc, #332]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x188>)
 800580c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800580e:	e098      	b.n	8005942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005810:	4b4f      	ldr	r3, [pc, #316]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x180>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005818:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800581a:	4b4d      	ldr	r3, [pc, #308]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x180>)
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d028      	beq.n	8005878 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005826:	4b4a      	ldr	r3, [pc, #296]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x180>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	099b      	lsrs	r3, r3, #6
 800582c:	2200      	movs	r2, #0
 800582e:	623b      	str	r3, [r7, #32]
 8005830:	627a      	str	r2, [r7, #36]	@ 0x24
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005838:	2100      	movs	r1, #0
 800583a:	4b47      	ldr	r3, [pc, #284]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x188>)
 800583c:	fb03 f201 	mul.w	r2, r3, r1
 8005840:	2300      	movs	r3, #0
 8005842:	fb00 f303 	mul.w	r3, r0, r3
 8005846:	4413      	add	r3, r2
 8005848:	4a43      	ldr	r2, [pc, #268]	@ (8005958 <HAL_RCC_GetSysClockFreq+0x188>)
 800584a:	fba0 1202 	umull	r1, r2, r0, r2
 800584e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005850:	460a      	mov	r2, r1
 8005852:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005856:	4413      	add	r3, r2
 8005858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800585a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800585c:	2200      	movs	r2, #0
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	61fa      	str	r2, [r7, #28]
 8005862:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005866:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800586a:	f7fb f98f 	bl	8000b8c <__aeabi_uldivmod>
 800586e:	4602      	mov	r2, r0
 8005870:	460b      	mov	r3, r1
 8005872:	4613      	mov	r3, r2
 8005874:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005876:	e053      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005878:	4b35      	ldr	r3, [pc, #212]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x180>)
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	099b      	lsrs	r3, r3, #6
 800587e:	2200      	movs	r2, #0
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	617a      	str	r2, [r7, #20]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800588a:	f04f 0b00 	mov.w	fp, #0
 800588e:	4652      	mov	r2, sl
 8005890:	465b      	mov	r3, fp
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f04f 0100 	mov.w	r1, #0
 800589a:	0159      	lsls	r1, r3, #5
 800589c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058a0:	0150      	lsls	r0, r2, #5
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	ebb2 080a 	subs.w	r8, r2, sl
 80058aa:	eb63 090b 	sbc.w	r9, r3, fp
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	f04f 0300 	mov.w	r3, #0
 80058b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80058ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80058be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80058c2:	ebb2 0408 	subs.w	r4, r2, r8
 80058c6:	eb63 0509 	sbc.w	r5, r3, r9
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	00eb      	lsls	r3, r5, #3
 80058d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058d8:	00e2      	lsls	r2, r4, #3
 80058da:	4614      	mov	r4, r2
 80058dc:	461d      	mov	r5, r3
 80058de:	eb14 030a 	adds.w	r3, r4, sl
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	eb45 030b 	adc.w	r3, r5, fp
 80058e8:	607b      	str	r3, [r7, #4]
 80058ea:	f04f 0200 	mov.w	r2, #0
 80058ee:	f04f 0300 	mov.w	r3, #0
 80058f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80058f6:	4629      	mov	r1, r5
 80058f8:	028b      	lsls	r3, r1, #10
 80058fa:	4621      	mov	r1, r4
 80058fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005900:	4621      	mov	r1, r4
 8005902:	028a      	lsls	r2, r1, #10
 8005904:	4610      	mov	r0, r2
 8005906:	4619      	mov	r1, r3
 8005908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800590a:	2200      	movs	r2, #0
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	60fa      	str	r2, [r7, #12]
 8005910:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005914:	f7fb f93a 	bl	8000b8c <__aeabi_uldivmod>
 8005918:	4602      	mov	r2, r0
 800591a:	460b      	mov	r3, r1
 800591c:	4613      	mov	r3, r2
 800591e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005920:	4b0b      	ldr	r3, [pc, #44]	@ (8005950 <HAL_RCC_GetSysClockFreq+0x180>)
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	0c1b      	lsrs	r3, r3, #16
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	3301      	adds	r3, #1
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005930:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005934:	fbb2 f3f3 	udiv	r3, r2, r3
 8005938:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800593a:	e002      	b.n	8005942 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800593c:	4b05      	ldr	r3, [pc, #20]	@ (8005954 <HAL_RCC_GetSysClockFreq+0x184>)
 800593e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005944:	4618      	mov	r0, r3
 8005946:	3740      	adds	r7, #64	@ 0x40
 8005948:	46bd      	mov	sp, r7
 800594a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800594e:	bf00      	nop
 8005950:	40023800 	.word	0x40023800
 8005954:	00f42400 	.word	0x00f42400
 8005958:	017d7840 	.word	0x017d7840

0800595c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800595c:	b480      	push	{r7}
 800595e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005960:	4b03      	ldr	r3, [pc, #12]	@ (8005970 <HAL_RCC_GetHCLKFreq+0x14>)
 8005962:	681b      	ldr	r3, [r3, #0]
}
 8005964:	4618      	mov	r0, r3
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	20000000 	.word	0x20000000

08005974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005978:	f7ff fff0 	bl	800595c <HAL_RCC_GetHCLKFreq>
 800597c:	4602      	mov	r2, r0
 800597e:	4b05      	ldr	r3, [pc, #20]	@ (8005994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	0a9b      	lsrs	r3, r3, #10
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	4903      	ldr	r1, [pc, #12]	@ (8005998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800598a:	5ccb      	ldrb	r3, [r1, r3]
 800598c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005990:	4618      	mov	r0, r3
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40023800 	.word	0x40023800
 8005998:	0800b944 	.word	0x0800b944

0800599c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d101      	bne.n	80059ae <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e022      	b.n	80059f4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d105      	bne.n	80059c6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7fd f913 	bl	8002bec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2203      	movs	r2, #3
 80059ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 f814 	bl	80059fc <HAL_SD_InitCard>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e00a      	b.n	80059f4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80059fc:	b5b0      	push	{r4, r5, r7, lr}
 80059fe:	b08e      	sub	sp, #56	@ 0x38
 8005a00:	af04      	add	r7, sp, #16
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005a10:	2300      	movs	r3, #0
 8005a12:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005a14:	2300      	movs	r3, #0
 8005a16:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005a18:	2376      	movs	r3, #118	@ 0x76
 8005a1a:	623b      	str	r3, [r7, #32]

  /* Initialize SDIO peripheral interface with default configuration */
  SDIO_Init(hsd->Instance, Init);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681d      	ldr	r5, [r3, #0]
 8005a20:	466c      	mov	r4, sp
 8005a22:	f107 0318 	add.w	r3, r7, #24
 8005a26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005a2e:	f107 030c 	add.w	r3, r7, #12
 8005a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a34:	4628      	mov	r0, r5
 8005a36:	f001 ffb7 	bl	80079a8 <SDIO_Init>

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8005ae4 <HAL_SD_InitCard+0xe8>)
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f001 fff8 	bl	8007a3a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005a4a:	4b26      	ldr	r3, [pc, #152]	@ (8005ae4 <HAL_SD_InitCard+0xe8>)
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005a50:	2002      	movs	r0, #2
 8005a52:	f7fd fad1 	bl	8002ff8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f001 f878 	bl	8006b4c <SD_PowerON>
 8005a5c:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00b      	beq.n	8005a7c <HAL_SD_InitCard+0x80>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	431a      	orrs	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e02e      	b.n	8005ada <HAL_SD_InitCard+0xde>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 ff97 	bl	80069b0 <SD_InitCard>
 8005a82:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00b      	beq.n	8005aa2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e01b      	b.n	8005ada <HAL_SD_InitCard+0xde>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f002 f857 	bl	8007b5e <SDMMC_CmdBlockLength>
 8005ab0:	6278      	str	r0, [r7, #36]	@ 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d00f      	beq.n	8005ad8 <HAL_SD_InitCard+0xdc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae8 <HAL_SD_InitCard+0xec>)
 8005abe:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e000      	b.n	8005ada <HAL_SD_InitCard+0xde>
  }

  return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3728      	adds	r7, #40	@ 0x28
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	422580a0 	.word	0x422580a0
 8005ae8:	004005ff 	.word	0x004005ff

08005aec <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b092      	sub	sp, #72	@ 0x48
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
 8005af8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005afa:	f7fd fa71 	bl	8002fe0 <HAL_GetTick>
 8005afe:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d107      	bne.n	8005b1e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b12:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e1c5      	b.n	8005eaa <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	f040 81b8 	bne.w	8005e9c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005b32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	441a      	add	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d907      	bls.n	8005b50 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b44:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e1ac      	b.n	8005eaa <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2203      	movs	r2, #3
 8005b54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d002      	beq.n	8005b6e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6a:	025b      	lsls	r3, r3, #9
 8005b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b72:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	025b      	lsls	r3, r3, #9
 8005b78:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005b7a:	2390      	movs	r3, #144	@ 0x90
 8005b7c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005b7e:	2302      	movs	r3, #2
 8005b80:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005b86:	2301      	movs	r3, #1
 8005b88:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f107 0214 	add.w	r2, r7, #20
 8005b92:	4611      	mov	r1, r2
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 ffb6 	bl	8007b06 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d90a      	bls.n	8005bb6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005bac:	4618      	mov	r0, r3
 8005bae:	f002 f81a 	bl	8007be6 <SDMMC_CmdReadMultiBlock>
 8005bb2:	6478      	str	r0, [r7, #68]	@ 0x44
 8005bb4:	e009      	b.n	8005bca <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 ffed 	bl	8007ba2 <SDMMC_CmdReadSingleBlock>
 8005bc8:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d012      	beq.n	8005bf6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a7e      	ldr	r2, [pc, #504]	@ (8005dd0 <HAL_SD_ReadBlocks+0x2e4>)
 8005bd6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bde:	431a      	orrs	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e159      	b.n	8005eaa <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005bfa:	e061      	b.n	8005cc0 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d03c      	beq.n	8005c84 <HAL_SD_ReadBlocks+0x198>
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d039      	beq.n	8005c84 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8005c10:	2300      	movs	r3, #0
 8005c12:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c14:	e033      	b.n	8005c7e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f001 feef 	bl	80079fe <SDIO_ReadFIFO>
 8005c20:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c24:	b2da      	uxtb	r2, r3
 8005c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c28:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c32:	3b01      	subs	r3, #1
 8005c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c38:	0a1b      	lsrs	r3, r3, #8
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c3e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c42:	3301      	adds	r3, #1
 8005c44:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005c46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c4e:	0c1b      	lsrs	r3, r3, #16
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c54:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c58:	3301      	adds	r3, #1
 8005c5a:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c64:	0e1b      	lsrs	r3, r3, #24
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6e:	3301      	adds	r3, #1
 8005c70:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c74:	3b01      	subs	r3, #1
 8005c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8005c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c80:	2b07      	cmp	r3, #7
 8005c82:	d9c8      	bls.n	8005c16 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005c84:	f7fd f9ac 	bl	8002fe0 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d902      	bls.n	8005c9a <HAL_SD_ReadBlocks+0x1ae>
 8005c94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d112      	bne.n	8005cc0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a4c      	ldr	r2, [pc, #304]	@ (8005dd0 <HAL_SD_ReadBlocks+0x2e4>)
 8005ca0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e0f4      	b.n	8005eaa <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cc6:	f240 332a 	movw	r3, #810	@ 0x32a
 8005cca:	4013      	ands	r3, r2
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d095      	beq.n	8005bfc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d022      	beq.n	8005d24 <HAL_SD_ReadBlocks+0x238>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d91f      	bls.n	8005d24 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d01b      	beq.n	8005d24 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 ffdf 	bl	8007cb4 <SDMMC_CmdStopTransfer>
 8005cf6:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d012      	beq.n	8005d24 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a33      	ldr	r2, [pc, #204]	@ (8005dd0 <HAL_SD_ReadBlocks+0x2e4>)
 8005d04:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0c2      	b.n	8005eaa <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d106      	bne.n	8005d40 <HAL_SD_ReadBlocks+0x254>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d012      	beq.n	8005d66 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a22      	ldr	r2, [pc, #136]	@ (8005dd0 <HAL_SD_ReadBlocks+0x2e4>)
 8005d46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d4c:	f043 0208 	orr.w	r2, r3, #8
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e0a1      	b.n	8005eaa <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d012      	beq.n	8005d9a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a15      	ldr	r2, [pc, #84]	@ (8005dd0 <HAL_SD_ReadBlocks+0x2e4>)
 8005d7a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d80:	f043 0202 	orr.w	r2, r3, #2
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e087      	b.n	8005eaa <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da0:	f003 0320 	and.w	r3, r3, #32
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d064      	beq.n	8005e72 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a08      	ldr	r2, [pc, #32]	@ (8005dd0 <HAL_SD_ReadBlocks+0x2e4>)
 8005dae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db4:	f043 0220 	orr.w	r2, r3, #32
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e06d      	b.n	8005eaa <HAL_SD_ReadBlocks+0x3be>
 8005dce:	bf00      	nop
 8005dd0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f001 fe10 	bl	80079fe <SDIO_ReadFIFO>
 8005dde:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005de8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dea:	3301      	adds	r3, #1
 8005dec:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005dee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df0:	3b01      	subs	r3, #1
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df6:	0a1b      	lsrs	r3, r3, #8
 8005df8:	b2da      	uxtb	r2, r3
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e00:	3301      	adds	r3, #1
 8005e02:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e06:	3b01      	subs	r3, #1
 8005e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0c:	0c1b      	lsrs	r3, r3, #16
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e12:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e16:	3301      	adds	r3, #1
 8005e18:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e22:	0e1b      	lsrs	r3, r3, #24
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e28:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8005e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e32:	3b01      	subs	r3, #1
 8005e34:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005e36:	f7fd f8d3 	bl	8002fe0 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d902      	bls.n	8005e4c <HAL_SD_ReadBlocks+0x360>
 8005e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d112      	bne.n	8005e72 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a18      	ldr	r2, [pc, #96]	@ (8005eb4 <HAL_SD_ReadBlocks+0x3c8>)
 8005e52:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e58:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e01b      	b.n	8005eaa <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d002      	beq.n	8005e86 <HAL_SD_ReadBlocks+0x39a>
 8005e80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1a6      	bne.n	8005dd4 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005e8e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	e006      	b.n	8005eaa <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
  }
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3748      	adds	r7, #72	@ 0x48
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop
 8005eb4:	004005ff 	.word	0x004005ff

08005eb8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b092      	sub	sp, #72	@ 0x48
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
 8005ec4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005ec6:	f7fd f88b 	bl	8002fe0 <HAL_GetTick>
 8005eca:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d107      	bne.n	8005eea <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ede:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e16d      	b.n	80061c6 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	f040 8160 	bne.w	80061b8 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005efe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	441a      	add	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d907      	bls.n	8005f1c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f10:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e154      	b.n	80061c6 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2203      	movs	r2, #3
 8005f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d002      	beq.n	8005f3a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f36:	025b      	lsls	r3, r3, #9
 8005f38:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005f3e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	025b      	lsls	r3, r3, #9
 8005f44:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005f46:	2390      	movs	r3, #144	@ 0x90
 8005f48:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005f52:	2301      	movs	r3, #1
 8005f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f107 0218 	add.w	r2, r7, #24
 8005f5e:	4611      	mov	r1, r2
 8005f60:	4618      	mov	r0, r3
 8005f62:	f001 fdd0 	bl	8007b06 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d90a      	bls.n	8005f82 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f001 fe78 	bl	8007c6e <SDMMC_CmdWriteMultiBlock>
 8005f7e:	6478      	str	r0, [r7, #68]	@ 0x44
 8005f80:	e009      	b.n	8005f96 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2210      	movs	r2, #16
 8005f86:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 fe4b 	bl	8007c2a <SDMMC_CmdWriteSingleBlock>
 8005f94:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d012      	beq.n	8005fc2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a8b      	ldr	r2, [pc, #556]	@ (80061d0 <HAL_SD_WriteBlocks+0x318>)
 8005fa2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005faa:	431a      	orrs	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e101      	b.n	80061c6 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005fc6:	e065      	b.n	8006094 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d040      	beq.n	8006058 <HAL_SD_WriteBlocks+0x1a0>
 8005fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d03d      	beq.n	8006058 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fe0:	e037      	b.n	8006052 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8005fe2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fea:	3301      	adds	r3, #1
 8005fec:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8005fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005ff4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	021a      	lsls	r2, r3, #8
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006002:	3301      	adds	r3, #1
 8006004:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006008:	3b01      	subs	r3, #1
 800600a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800600c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	041a      	lsls	r2, r3, #16
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800601a:	3301      	adds	r3, #1
 800601c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800601e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006020:	3b01      	subs	r3, #1
 8006022:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8006024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	061a      	lsls	r2, r3, #24
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	4313      	orrs	r3, r2
 800602e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8006030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006032:	3301      	adds	r3, #1
 8006034:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8006036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006038:	3b01      	subs	r3, #1
 800603a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f107 0214 	add.w	r2, r7, #20
 8006044:	4611      	mov	r1, r2
 8006046:	4618      	mov	r0, r3
 8006048:	f001 fce6 	bl	8007a18 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800604c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800604e:	3301      	adds	r3, #1
 8006050:	643b      	str	r3, [r7, #64]	@ 0x40
 8006052:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006054:	2b07      	cmp	r3, #7
 8006056:	d9c4      	bls.n	8005fe2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8006058:	f7fc ffc2 	bl	8002fe0 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006064:	429a      	cmp	r2, r3
 8006066:	d902      	bls.n	800606e <HAL_SD_WriteBlocks+0x1b6>
 8006068:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800606a:	2b00      	cmp	r3, #0
 800606c:	d112      	bne.n	8006094 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a57      	ldr	r2, [pc, #348]	@ (80061d0 <HAL_SD_WriteBlocks+0x318>)
 8006074:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800607a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800607c:	431a      	orrs	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e098      	b.n	80061c6 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800609a:	f240 331a 	movw	r3, #794	@ 0x31a
 800609e:	4013      	ands	r3, r2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d091      	beq.n	8005fc8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d022      	beq.n	80060f8 <HAL_SD_WriteBlocks+0x240>
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d91f      	bls.n	80060f8 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d01b      	beq.n	80060f8 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4618      	mov	r0, r3
 80060c6:	f001 fdf5 	bl	8007cb4 <SDMMC_CmdStopTransfer>
 80060ca:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80060cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d012      	beq.n	80060f8 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a3e      	ldr	r2, [pc, #248]	@ (80061d0 <HAL_SD_WriteBlocks+0x318>)
 80060d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060e0:	431a      	orrs	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2201      	movs	r2, #1
 80060ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e066      	b.n	80061c6 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d106      	bne.n	8006114 <HAL_SD_WriteBlocks+0x25c>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800610c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006110:	2b00      	cmp	r3, #0
 8006112:	d012      	beq.n	800613a <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a2d      	ldr	r2, [pc, #180]	@ (80061d0 <HAL_SD_WriteBlocks+0x318>)
 800611a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006120:	f043 0208 	orr.w	r2, r3, #8
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e045      	b.n	80061c6 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d012      	beq.n	800616e <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a20      	ldr	r2, [pc, #128]	@ (80061d0 <HAL_SD_WriteBlocks+0x318>)
 800614e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006154:	f043 0202 	orr.w	r2, r3, #2
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e02b      	b.n	80061c6 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006174:	f003 0310 	and.w	r3, r3, #16
 8006178:	2b00      	cmp	r3, #0
 800617a:	d012      	beq.n	80061a2 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a13      	ldr	r2, [pc, #76]	@ (80061d0 <HAL_SD_WriteBlocks+0x318>)
 8006182:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006188:	f043 0210 	orr.w	r2, r3, #16
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	e011      	b.n	80061c6 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80061aa:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	e006      	b.n	80061c6 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061bc:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
  }
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3748      	adds	r7, #72	@ 0x48
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	004005ff 	.word	0x004005ff

080061d4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061e0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d008      	beq.n	8006202 <HAL_SD_IRQHandler+0x2e>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d003      	beq.n	8006202 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fd5c 	bl	8006cb8 <SD_Read_IT>
 8006200:	e165      	b.n	80064ce <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 808f 	beq.w	8006330 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800621a:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 800622a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 800622e:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0201 	bic.w	r2, r2, #1
 800623e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b00      	cmp	r3, #0
 8006248:	d039      	beq.n	80062be <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f003 0302 	and.w	r3, r3, #2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d104      	bne.n	800625e <HAL_SD_IRQHandler+0x8a>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d011      	beq.n	8006282 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f001 fd26 	bl	8007cb4 <SDMMC_CmdStopTransfer>
 8006268:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d008      	beq.n	8006282 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 f92f 	bl	80064e0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f240 523a 	movw	r2, #1338	@ 0x53a
 800628a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d104      	bne.n	80062ae <HAL_SD_IRQHandler+0xda>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f002 f94c 	bl	800854c <HAL_SD_RxCpltCallback>
 80062b4:	e10b      	b.n	80064ce <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f002 f93e 	bl	8008538 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80062bc:	e107      	b.n	80064ce <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 8102 	beq.w	80064ce <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f003 0320 	and.w	r3, r3, #32
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d011      	beq.n	80062f8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4618      	mov	r0, r3
 80062da:	f001 fceb 	bl	8007cb4 <SDMMC_CmdStopTransfer>
 80062de:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d008      	beq.n	80062f8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	431a      	orrs	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f8f4 	bl	80064e0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f003 0301 	and.w	r3, r3, #1
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f040 80e5 	bne.w	80064ce <HAL_SD_IRQHandler+0x2fa>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f003 0302 	and.w	r3, r3, #2
 800630a:	2b00      	cmp	r3, #0
 800630c:	f040 80df 	bne.w	80064ce <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f022 0208 	bic.w	r2, r2, #8
 800631e:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f002 f905 	bl	8008538 <HAL_SD_TxCpltCallback>
}
 800632e:	e0ce      	b.n	80064ce <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d008      	beq.n	8006350 <HAL_SD_IRQHandler+0x17c>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f003 0308 	and.w	r3, r3, #8
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fd06 	bl	8006d5a <SD_Write_IT>
 800634e:	e0be      	b.n	80064ce <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006356:	f240 233a 	movw	r3, #570	@ 0x23a
 800635a:	4013      	ands	r3, r2
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 80b6 	beq.w	80064ce <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d005      	beq.n	800637c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006374:	f043 0202 	orr.w	r2, r3, #2
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006382:	f003 0308 	and.w	r3, r3, #8
 8006386:	2b00      	cmp	r3, #0
 8006388:	d005      	beq.n	8006396 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800638e:	f043 0208 	orr.w	r2, r3, #8
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800639c:	f003 0320 	and.w	r3, r3, #32
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d005      	beq.n	80063b0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a8:	f043 0220 	orr.w	r2, r3, #32
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063b6:	f003 0310 	and.w	r3, r3, #16
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d005      	beq.n	80063ca <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c2:	f043 0210 	orr.w	r2, r3, #16
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d005      	beq.n	80063e4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063dc:	f043 0208 	orr.w	r2, r3, #8
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f240 723a 	movw	r2, #1850	@ 0x73a
 80063ec:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6812      	ldr	r2, [r2, #0]
 80063f8:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 80063fc:	f023 0302 	bic.w	r3, r3, #2
 8006400:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4618      	mov	r0, r3
 8006408:	f001 fc54 	bl	8007cb4 <SDMMC_CmdStopTransfer>
 800640c:	4602      	mov	r2, r0
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006412:	431a      	orrs	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f855 	bl	80064e0 <HAL_SD_ErrorCallback>
}
 8006436:	e04a      	b.n	80064ce <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800643e:	2b00      	cmp	r3, #0
 8006440:	d045      	beq.n	80064ce <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f003 0310 	and.w	r3, r3, #16
 8006448:	2b00      	cmp	r3, #0
 800644a:	d104      	bne.n	8006456 <HAL_SD_IRQHandler+0x282>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d011      	beq.n	800647a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800645a:	4a1f      	ldr	r2, [pc, #124]	@ (80064d8 <HAL_SD_IRQHandler+0x304>)
 800645c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006462:	4618      	mov	r0, r3
 8006464:	f7fc fefd 	bl	8003262 <HAL_DMA_Abort_IT>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d02f      	beq.n	80064ce <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006472:	4618      	mov	r0, r3
 8006474:	f000 fa2e 	bl	80068d4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006478:	e029      	b.n	80064ce <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d104      	bne.n	800648e <HAL_SD_IRQHandler+0x2ba>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d011      	beq.n	80064b2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006492:	4a12      	ldr	r2, [pc, #72]	@ (80064dc <HAL_SD_IRQHandler+0x308>)
 8006494:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649a:	4618      	mov	r0, r3
 800649c:	f7fc fee1 	bl	8003262 <HAL_DMA_Abort_IT>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d013      	beq.n	80064ce <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064aa:	4618      	mov	r0, r3
 80064ac:	f000 fa49 	bl	8006942 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80064b0:	e00d      	b.n	80064ce <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f002 f82c 	bl	8008524 <HAL_SD_AbortCallback>
}
 80064cc:	e7ff      	b.n	80064ce <HAL_SD_IRQHandler+0x2fa>
 80064ce:	bf00      	nop
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	080068d5 	.word	0x080068d5
 80064dc:	08006943 	.word	0x08006943

080064e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006502:	0f9b      	lsrs	r3, r3, #30
 8006504:	b2da      	uxtb	r2, r3
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800650e:	0e9b      	lsrs	r3, r3, #26
 8006510:	b2db      	uxtb	r3, r3
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	b2da      	uxtb	r2, r3
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006520:	0e1b      	lsrs	r3, r3, #24
 8006522:	b2db      	uxtb	r3, r3
 8006524:	f003 0303 	and.w	r3, r3, #3
 8006528:	b2da      	uxtb	r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006532:	0c1b      	lsrs	r3, r3, #16
 8006534:	b2da      	uxtb	r2, r3
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800653e:	0a1b      	lsrs	r3, r3, #8
 8006540:	b2da      	uxtb	r2, r3
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800654a:	b2da      	uxtb	r2, r3
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006554:	0d1b      	lsrs	r3, r3, #20
 8006556:	b29a      	uxth	r2, r3
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006560:	0c1b      	lsrs	r3, r3, #16
 8006562:	b2db      	uxtb	r3, r3
 8006564:	f003 030f 	and.w	r3, r3, #15
 8006568:	b2da      	uxtb	r2, r3
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006572:	0bdb      	lsrs	r3, r3, #15
 8006574:	b2db      	uxtb	r3, r3
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	b2da      	uxtb	r2, r3
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006584:	0b9b      	lsrs	r3, r3, #14
 8006586:	b2db      	uxtb	r3, r3
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	b2da      	uxtb	r2, r3
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006596:	0b5b      	lsrs	r3, r3, #13
 8006598:	b2db      	uxtb	r3, r3
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065a8:	0b1b      	lsrs	r3, r3, #12
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2200      	movs	r2, #0
 80065ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d163      	bne.n	800668c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065c8:	009a      	lsls	r2, r3, #2
 80065ca:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80065ce:	4013      	ands	r3, r2
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80065d4:	0f92      	lsrs	r2, r2, #30
 80065d6:	431a      	orrs	r2, r3
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065e0:	0edb      	lsrs	r3, r3, #27
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80065f2:	0e1b      	lsrs	r3, r3, #24
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006604:	0d5b      	lsrs	r3, r3, #21
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	b2da      	uxtb	r2, r3
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006616:	0c9b      	lsrs	r3, r3, #18
 8006618:	b2db      	uxtb	r3, r3
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	b2da      	uxtb	r2, r3
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006628:	0bdb      	lsrs	r3, r3, #15
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	b2da      	uxtb	r2, r3
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	1c5a      	adds	r2, r3, #1
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	7e1b      	ldrb	r3, [r3, #24]
 8006644:	b2db      	uxtb	r3, r3
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	3302      	adds	r3, #2
 800664c:	2201      	movs	r2, #1
 800664e:	fa02 f303 	lsl.w	r3, r2, r3
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8006656:	fb03 f202 	mul.w	r2, r3, r2
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	7a1b      	ldrb	r3, [r3, #8]
 8006662:	b2db      	uxtb	r3, r3
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	2201      	movs	r2, #1
 800666a:	409a      	lsls	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006678:	0a52      	lsrs	r2, r2, #9
 800667a:	fb03 f202 	mul.w	r2, r3, r2
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006688:	661a      	str	r2, [r3, #96]	@ 0x60
 800668a:	e031      	b.n	80066f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006690:	2b01      	cmp	r3, #1
 8006692:	d11d      	bne.n	80066d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006698:	041b      	lsls	r3, r3, #16
 800669a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066a2:	0c1b      	lsrs	r3, r3, #16
 80066a4:	431a      	orrs	r2, r3
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	3301      	adds	r3, #1
 80066b0:	029a      	lsls	r2, r3, #10
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066c4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	661a      	str	r2, [r3, #96]	@ 0x60
 80066ce:	e00f      	b.n	80066f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a58      	ldr	r2, [pc, #352]	@ (8006838 <HAL_SD_GetCardCSD+0x344>)
 80066d6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e09d      	b.n	800682c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066f4:	0b9b      	lsrs	r3, r3, #14
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	f003 0301 	and.w	r3, r3, #1
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006706:	09db      	lsrs	r3, r3, #7
 8006708:	b2db      	uxtb	r3, r3
 800670a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800670e:	b2da      	uxtb	r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006718:	b2db      	uxtb	r3, r3
 800671a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800671e:	b2da      	uxtb	r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006728:	0fdb      	lsrs	r3, r3, #31
 800672a:	b2da      	uxtb	r2, r3
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006734:	0f5b      	lsrs	r3, r3, #29
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f003 0303 	and.w	r3, r3, #3
 800673c:	b2da      	uxtb	r2, r3
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006746:	0e9b      	lsrs	r3, r3, #26
 8006748:	b2db      	uxtb	r3, r3
 800674a:	f003 0307 	and.w	r3, r3, #7
 800674e:	b2da      	uxtb	r2, r3
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006758:	0d9b      	lsrs	r3, r3, #22
 800675a:	b2db      	uxtb	r3, r3
 800675c:	f003 030f 	and.w	r3, r3, #15
 8006760:	b2da      	uxtb	r2, r3
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676a:	0d5b      	lsrs	r3, r3, #21
 800676c:	b2db      	uxtb	r3, r3
 800676e:	f003 0301 	and.w	r3, r3, #1
 8006772:	b2da      	uxtb	r2, r3
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006786:	0c1b      	lsrs	r3, r3, #16
 8006788:	b2db      	uxtb	r3, r3
 800678a:	f003 0301 	and.w	r3, r3, #1
 800678e:	b2da      	uxtb	r2, r3
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800679a:	0bdb      	lsrs	r3, r3, #15
 800679c:	b2db      	uxtb	r3, r3
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ae:	0b9b      	lsrs	r3, r3, #14
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c2:	0b5b      	lsrs	r3, r3, #13
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d6:	0b1b      	lsrs	r3, r3, #12
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ea:	0a9b      	lsrs	r3, r3, #10
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	f003 0303 	and.w	r3, r3, #3
 80067f2:	b2da      	uxtb	r2, r3
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	b2db      	uxtb	r3, r3
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	b2da      	uxtb	r2, r3
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006812:	085b      	lsrs	r3, r3, #1
 8006814:	b2db      	uxtb	r3, r3
 8006816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800681a:	b2da      	uxtb	r2, r3
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	004005ff 	.word	0x004005ff

0800683c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80068a0:	f107 030c 	add.w	r3, r7, #12
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f9de 	bl	8006c68 <SD_SendStatus>
 80068ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d005      	beq.n	80068c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	431a      	orrs	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	0a5b      	lsrs	r3, r3, #9
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80068ca:	693b      	ldr	r3, [r7, #16]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80068ea:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7ff ffd1 	bl	8006894 <HAL_SD_GetCardState>
 80068f2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2b06      	cmp	r3, #6
 8006906:	d002      	beq.n	800690e <SD_DMATxAbort+0x3a>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2b05      	cmp	r3, #5
 800690c:	d10a      	bne.n	8006924 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4618      	mov	r0, r3
 8006914:	f001 f9ce 	bl	8007cb4 <SDMMC_CmdStopTransfer>
 8006918:	4602      	mov	r2, r0
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800691e:	431a      	orrs	r2, r3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006928:	2b00      	cmp	r3, #0
 800692a:	d103      	bne.n	8006934 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f001 fdf9 	bl	8008524 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006932:	e002      	b.n	800693a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f7ff fdd3 	bl	80064e0 <HAL_SD_ErrorCallback>
}
 800693a:	bf00      	nop
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800694e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006958:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f7ff ff9a 	bl	8006894 <HAL_SD_GetCardState>
 8006960:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	2b06      	cmp	r3, #6
 8006974:	d002      	beq.n	800697c <SD_DMARxAbort+0x3a>
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	2b05      	cmp	r3, #5
 800697a:	d10a      	bne.n	8006992 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4618      	mov	r0, r3
 8006982:	f001 f997 	bl	8007cb4 <SDMMC_CmdStopTransfer>
 8006986:	4602      	mov	r2, r0
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698c:	431a      	orrs	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006996:	2b00      	cmp	r3, #0
 8006998:	d103      	bne.n	80069a2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	f001 fdc2 	bl	8008524 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80069a0:	e002      	b.n	80069a8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f7ff fd9c 	bl	80064e0 <HAL_SD_ErrorCallback>
}
 80069a8:	bf00      	nop
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80069b0:	b5b0      	push	{r4, r5, r7, lr}
 80069b2:	b094      	sub	sp, #80	@ 0x50
 80069b4:	af04      	add	r7, sp, #16
 80069b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80069b8:	2301      	movs	r3, #1
 80069ba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f001 f848 	bl	8007a56 <SDIO_GetPowerState>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d102      	bne.n	80069d2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80069cc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80069d0:	e0b8      	b.n	8006b44 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d02f      	beq.n	8006a3a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f001 fa2f 	bl	8007e42 <SDMMC_CmdSendCID>
 80069e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80069e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <SD_InitCard+0x40>
    {
      return errorstate;
 80069ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069ee:	e0a9      	b.n	8006b44 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2100      	movs	r1, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	f001 f872 	bl	8007ae0 <SDIO_GetResponse>
 80069fc:	4602      	mov	r2, r0
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2104      	movs	r1, #4
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 f869 	bl	8007ae0 <SDIO_GetResponse>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2108      	movs	r1, #8
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f001 f860 	bl	8007ae0 <SDIO_GetResponse>
 8006a20:	4602      	mov	r2, r0
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	210c      	movs	r1, #12
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f001 f857 	bl	8007ae0 <SDIO_GetResponse>
 8006a32:	4602      	mov	r2, r0
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d00d      	beq.n	8006a5e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f107 020e 	add.w	r2, r7, #14
 8006a4a:	4611      	mov	r1, r2
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f001 fa35 	bl	8007ebc <SDMMC_CmdSetRelAdd>
 8006a52:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d001      	beq.n	8006a5e <SD_InitCard+0xae>
    {
      return errorstate;
 8006a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a5c:	e072      	b.n	8006b44 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a62:	2b03      	cmp	r3, #3
 8006a64:	d036      	beq.n	8006ad4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006a66:	89fb      	ldrh	r3, [r7, #14]
 8006a68:	461a      	mov	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a76:	041b      	lsls	r3, r3, #16
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	f001 f9ff 	bl	8007e7e <SDMMC_CmdSendCSD>
 8006a80:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a8a:	e05b      	b.n	8006b44 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2100      	movs	r1, #0
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 f824 	bl	8007ae0 <SDIO_GetResponse>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2104      	movs	r1, #4
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f001 f81b 	bl	8007ae0 <SDIO_GetResponse>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2108      	movs	r1, #8
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 f812 	bl	8007ae0 <SDIO_GetResponse>
 8006abc:	4602      	mov	r2, r0
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	210c      	movs	r1, #12
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f001 f809 	bl	8007ae0 <SDIO_GetResponse>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2104      	movs	r1, #4
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 f800 	bl	8007ae0 <SDIO_GetResponse>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	0d1a      	lsrs	r2, r3, #20
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006ae8:	f107 0310 	add.w	r3, r7, #16
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff fd00 	bl	80064f4 <HAL_SD_GetCardCSD>
 8006af4:	4603      	mov	r3, r0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d002      	beq.n	8006b00 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006afa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006afe:	e021      	b.n	8006b44 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6819      	ldr	r1, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b08:	041b      	lsls	r3, r3, #16
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	461c      	mov	r4, r3
 8006b0e:	4615      	mov	r5, r2
 8006b10:	4622      	mov	r2, r4
 8006b12:	462b      	mov	r3, r5
 8006b14:	4608      	mov	r0, r1
 8006b16:	f001 f8ef 	bl	8007cf8 <SDMMC_CmdSelDesel>
 8006b1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d001      	beq.n	8006b26 <SD_InitCard+0x176>
  {
    return errorstate;
 8006b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b24:	e00e      	b.n	8006b44 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681d      	ldr	r5, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	466c      	mov	r4, sp
 8006b2e:	f103 0210 	add.w	r2, r3, #16
 8006b32:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006b38:	3304      	adds	r3, #4
 8006b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f000 ff33 	bl	80079a8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3740      	adds	r7, #64	@ 0x40
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bdb0      	pop	{r4, r5, r7, pc}

08006b4c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f001 f8ea 	bl	8007d3e <SDMMC_CmdGoIdleState>
 8006b6a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d001      	beq.n	8006b76 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	e072      	b.n	8006c5c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f001 f8fd 	bl	8007d7a <SDMMC_CmdOperCond>
 8006b80:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00d      	beq.n	8006ba4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 f8d3 	bl	8007d3e <SDMMC_CmdGoIdleState>
 8006b98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d004      	beq.n	8006baa <SD_PowerON+0x5e>
    {
      return errorstate;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	e05b      	b.n	8006c5c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d137      	bne.n	8006c22 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f001 f8fd 	bl	8007db8 <SDMMC_CmdAppCommand>
 8006bbe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d02d      	beq.n	8006c22 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bc6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006bca:	e047      	b.n	8006c5c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f001 f8f0 	bl	8007db8 <SDMMC_CmdAppCommand>
 8006bd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <SD_PowerON+0x98>
    {
      return errorstate;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	e03b      	b.n	8006c5c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	491e      	ldr	r1, [pc, #120]	@ (8006c64 <SD_PowerON+0x118>)
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 f906 	bl	8007dfc <SDMMC_CmdAppOperCommand>
 8006bf0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bf8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006bfc:	e02e      	b.n	8006c5c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2100      	movs	r1, #0
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 ff6b 	bl	8007ae0 <SDIO_GetResponse>
 8006c0a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	0fdb      	lsrs	r3, r3, #31
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d101      	bne.n	8006c18 <SD_PowerON+0xcc>
 8006c14:	2301      	movs	r3, #1
 8006c16:	e000      	b.n	8006c1a <SD_PowerON+0xce>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	613b      	str	r3, [r7, #16]

    count++;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	3301      	adds	r3, #1
 8006c20:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d802      	bhi.n	8006c32 <SD_PowerON+0xe6>
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0cc      	beq.n	8006bcc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d902      	bls.n	8006c42 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006c3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c40:	e00c      	b.n	8006c5c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	645a      	str	r2, [r3, #68]	@ 0x44
 8006c52:	e002      	b.n	8006c5a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006c5a:	2300      	movs	r3, #0
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3718      	adds	r7, #24
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	c1100000 	.word	0xc1100000

08006c68 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d102      	bne.n	8006c7e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006c78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006c7c:	e018      	b.n	8006cb0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c86:	041b      	lsls	r3, r3, #16
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f001 f937 	bl	8007efe <SDMMC_CmdSendStatus>
 8006c90:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d001      	beq.n	8006c9c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	e009      	b.n	8006cb0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 ff1c 	bl	8007ae0 <SDIO_GetResponse>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cca:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d03f      	beq.n	8006d52 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	e033      	b.n	8006d40 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fe8e 	bl	80079fe <SDIO_ReadFIFO>
 8006ce2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	0a1b      	lsrs	r3, r3, #8
 8006cfc:	b2da      	uxtb	r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	3301      	adds	r3, #1
 8006d06:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	0c1b      	lsrs	r3, r3, #16
 8006d12:	b2da      	uxtb	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	3b01      	subs	r3, #1
 8006d22:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	0e1b      	lsrs	r3, r3, #24
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3301      	adds	r3, #1
 8006d32:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	617b      	str	r3, [r7, #20]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	2b07      	cmp	r3, #7
 8006d44:	d9c8      	bls.n	8006cd8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8006d52:	bf00      	nop
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b086      	sub	sp, #24
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d043      	beq.n	8006dfc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006d74:	2300      	movs	r3, #0
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	e037      	b.n	8006dea <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3301      	adds	r3, #1
 8006d84:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	021a      	lsls	r2, r3, #8
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	3b01      	subs	r3, #1
 8006da2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	041a      	lsls	r2, r3, #16
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3301      	adds	r3, #1
 8006db4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	3b01      	subs	r3, #1
 8006dba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	061a      	lsls	r2, r3, #24
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f107 0208 	add.w	r2, r7, #8
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fe1a 	bl	8007a18 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	3301      	adds	r3, #1
 8006de8:	617b      	str	r3, [r7, #20]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	2b07      	cmp	r3, #7
 8006dee:	d9c4      	bls.n	8006d7a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e07b      	b.n	8006f0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d108      	bne.n	8006e30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e26:	d009      	beq.n	8006e3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	61da      	str	r2, [r3, #28]
 8006e2e:	e005      	b.n	8006e3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d106      	bne.n	8006e5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7fb ff38 	bl	8002ccc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e84:	431a      	orrs	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68db      	ldr	r3, [r3, #12]
 8006e8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f003 0302 	and.w	r3, r3, #2
 8006e98:	431a      	orrs	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006eac:	431a      	orrs	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ec0:	ea42 0103 	orr.w	r1, r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ec8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	0c1b      	lsrs	r3, r3, #16
 8006eda:	f003 0104 	and.w	r1, r3, #4
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee2:	f003 0210 	and.w	r2, r3, #16
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	69da      	ldr	r2, [r3, #28]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006efc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b088      	sub	sp, #32
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	60f8      	str	r0, [r7, #12]
 8006f1e:	60b9      	str	r1, [r7, #8]
 8006f20:	603b      	str	r3, [r7, #0]
 8006f22:	4613      	mov	r3, r2
 8006f24:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f26:	f7fc f85b 	bl	8002fe0 <HAL_GetTick>
 8006f2a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006f2c:	88fb      	ldrh	r3, [r7, #6]
 8006f2e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d001      	beq.n	8006f40 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e12a      	b.n	8007196 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d002      	beq.n	8006f4c <HAL_SPI_Transmit+0x36>
 8006f46:	88fb      	ldrh	r3, [r7, #6]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d101      	bne.n	8006f50 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e122      	b.n	8007196 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d101      	bne.n	8006f5e <HAL_SPI_Transmit+0x48>
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	e11b      	b.n	8007196 <HAL_SPI_Transmit+0x280>
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2203      	movs	r2, #3
 8006f6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	88fa      	ldrh	r2, [r7, #6]
 8006f7e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	88fa      	ldrh	r2, [r7, #6]
 8006f84:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fac:	d10f      	bne.n	8006fce <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fcc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd8:	2b40      	cmp	r3, #64	@ 0x40
 8006fda:	d007      	beq.n	8006fec <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006fea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ff4:	d152      	bne.n	800709c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d002      	beq.n	8007004 <HAL_SPI_Transmit+0xee>
 8006ffe:	8b7b      	ldrh	r3, [r7, #26]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d145      	bne.n	8007090 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007008:	881a      	ldrh	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007014:	1c9a      	adds	r2, r3, #2
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800701e:	b29b      	uxth	r3, r3
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007028:	e032      	b.n	8007090 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b02      	cmp	r3, #2
 8007036:	d112      	bne.n	800705e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800703c:	881a      	ldrh	r2, [r3, #0]
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007048:	1c9a      	adds	r2, r3, #2
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007052:	b29b      	uxth	r3, r3
 8007054:	3b01      	subs	r3, #1
 8007056:	b29a      	uxth	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800705c:	e018      	b.n	8007090 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800705e:	f7fb ffbf 	bl	8002fe0 <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d803      	bhi.n	8007076 <HAL_SPI_Transmit+0x160>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007074:	d102      	bne.n	800707c <HAL_SPI_Transmit+0x166>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d109      	bne.n	8007090 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e082      	b.n	8007196 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1c7      	bne.n	800702a <HAL_SPI_Transmit+0x114>
 800709a:	e053      	b.n	8007144 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_SPI_Transmit+0x194>
 80070a4:	8b7b      	ldrh	r3, [r7, #26]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d147      	bne.n	800713a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	330c      	adds	r3, #12
 80070b4:	7812      	ldrb	r2, [r2, #0]
 80070b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070c6:	b29b      	uxth	r3, r3
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80070d0:	e033      	b.n	800713a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f003 0302 	and.w	r3, r3, #2
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d113      	bne.n	8007108 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	330c      	adds	r3, #12
 80070ea:	7812      	ldrb	r2, [r2, #0]
 80070ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f2:	1c5a      	adds	r2, r3, #1
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	3b01      	subs	r3, #1
 8007100:	b29a      	uxth	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007106:	e018      	b.n	800713a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007108:	f7fb ff6a 	bl	8002fe0 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	69fb      	ldr	r3, [r7, #28]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	429a      	cmp	r2, r3
 8007116:	d803      	bhi.n	8007120 <HAL_SPI_Transmit+0x20a>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711e:	d102      	bne.n	8007126 <HAL_SPI_Transmit+0x210>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d109      	bne.n	800713a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007136:	2303      	movs	r3, #3
 8007138:	e02d      	b.n	8007196 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800713e:	b29b      	uxth	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1c6      	bne.n	80070d2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007144:	69fa      	ldr	r2, [r7, #28]
 8007146:	6839      	ldr	r1, [r7, #0]
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f000 fbd9 	bl	8007900 <SPI_EndRxTxTransaction>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d002      	beq.n	800715a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2220      	movs	r2, #32
 8007158:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007162:	2300      	movs	r3, #0
 8007164:	617b      	str	r3, [r7, #20]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	617b      	str	r3, [r7, #20]
 8007176:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800718c:	2b00      	cmp	r3, #0
 800718e:	d001      	beq.n	8007194 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e000      	b.n	8007196 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007194:	2300      	movs	r3, #0
  }
}
 8007196:	4618      	mov	r0, r3
 8007198:	3720      	adds	r7, #32
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b088      	sub	sp, #32
 80071a2:	af02      	add	r7, sp, #8
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	603b      	str	r3, [r7, #0]
 80071aa:	4613      	mov	r3, r2
 80071ac:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d001      	beq.n	80071be <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80071ba:	2302      	movs	r3, #2
 80071bc:	e104      	b.n	80073c8 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <HAL_SPI_Receive+0x2c>
 80071c4:	88fb      	ldrh	r3, [r7, #6]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e0fc      	b.n	80073c8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071d6:	d112      	bne.n	80071fe <HAL_SPI_Receive+0x60>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10e      	bne.n	80071fe <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2204      	movs	r2, #4
 80071e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80071e8:	88fa      	ldrh	r2, [r7, #6]
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	4613      	mov	r3, r2
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 f8eb 	bl	80073d0 <HAL_SPI_TransmitReceive>
 80071fa:	4603      	mov	r3, r0
 80071fc:	e0e4      	b.n	80073c8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071fe:	f7fb feef 	bl	8002fe0 <HAL_GetTick>
 8007202:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800720a:	2b01      	cmp	r3, #1
 800720c:	d101      	bne.n	8007212 <HAL_SPI_Receive+0x74>
 800720e:	2302      	movs	r3, #2
 8007210:	e0da      	b.n	80073c8 <HAL_SPI_Receive+0x22a>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2204      	movs	r2, #4
 800721e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	88fa      	ldrh	r2, [r7, #6]
 8007232:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007260:	d10f      	bne.n	8007282 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007270:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007280:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800728c:	2b40      	cmp	r3, #64	@ 0x40
 800728e:	d007      	beq.n	80072a0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800729e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d170      	bne.n	800738a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80072a8:	e035      	b.n	8007316 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	f003 0301 	and.w	r3, r3, #1
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d115      	bne.n	80072e4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f103 020c 	add.w	r2, r3, #12
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c4:	7812      	ldrb	r2, [r2, #0]
 80072c6:	b2d2      	uxtb	r2, r2
 80072c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072d8:	b29b      	uxth	r3, r3
 80072da:	3b01      	subs	r3, #1
 80072dc:	b29a      	uxth	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80072e2:	e018      	b.n	8007316 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072e4:	f7fb fe7c 	bl	8002fe0 <HAL_GetTick>
 80072e8:	4602      	mov	r2, r0
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	1ad3      	subs	r3, r2, r3
 80072ee:	683a      	ldr	r2, [r7, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d803      	bhi.n	80072fc <HAL_SPI_Receive+0x15e>
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fa:	d102      	bne.n	8007302 <HAL_SPI_Receive+0x164>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d109      	bne.n	8007316 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2201      	movs	r2, #1
 8007306:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e058      	b.n	80073c8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1c4      	bne.n	80072aa <HAL_SPI_Receive+0x10c>
 8007320:	e038      	b.n	8007394 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b01      	cmp	r3, #1
 800732e:	d113      	bne.n	8007358 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733a:	b292      	uxth	r2, r2
 800733c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007342:	1c9a      	adds	r2, r3, #2
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800734c:	b29b      	uxth	r3, r3
 800734e:	3b01      	subs	r3, #1
 8007350:	b29a      	uxth	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007356:	e018      	b.n	800738a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007358:	f7fb fe42 	bl	8002fe0 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	683a      	ldr	r2, [r7, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d803      	bhi.n	8007370 <HAL_SPI_Receive+0x1d2>
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736e:	d102      	bne.n	8007376 <HAL_SPI_Receive+0x1d8>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d109      	bne.n	800738a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e01e      	b.n	80073c8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800738e:	b29b      	uxth	r3, r3
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1c6      	bne.n	8007322 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007394:	697a      	ldr	r2, [r7, #20]
 8007396:	6839      	ldr	r1, [r7, #0]
 8007398:	68f8      	ldr	r0, [r7, #12]
 800739a:	f000 fa4b 	bl	8007834 <SPI_EndRxTransaction>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2220      	movs	r2, #32
 80073a8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80073c6:	2300      	movs	r3, #0
  }
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b08a      	sub	sp, #40	@ 0x28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	60f8      	str	r0, [r7, #12]
 80073d8:	60b9      	str	r1, [r7, #8]
 80073da:	607a      	str	r2, [r7, #4]
 80073dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80073de:	2301      	movs	r3, #1
 80073e0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073e2:	f7fb fdfd 	bl	8002fe0 <HAL_GetTick>
 80073e6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073ee:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80073f6:	887b      	ldrh	r3, [r7, #2]
 80073f8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80073fa:	7ffb      	ldrb	r3, [r7, #31]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d00c      	beq.n	800741a <HAL_SPI_TransmitReceive+0x4a>
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007406:	d106      	bne.n	8007416 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d102      	bne.n	8007416 <HAL_SPI_TransmitReceive+0x46>
 8007410:	7ffb      	ldrb	r3, [r7, #31]
 8007412:	2b04      	cmp	r3, #4
 8007414:	d001      	beq.n	800741a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007416:	2302      	movs	r3, #2
 8007418:	e17f      	b.n	800771a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <HAL_SPI_TransmitReceive+0x5c>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <HAL_SPI_TransmitReceive+0x5c>
 8007426:	887b      	ldrh	r3, [r7, #2]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e174      	b.n	800771a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007436:	2b01      	cmp	r3, #1
 8007438:	d101      	bne.n	800743e <HAL_SPI_TransmitReceive+0x6e>
 800743a:	2302      	movs	r3, #2
 800743c:	e16d      	b.n	800771a <HAL_SPI_TransmitReceive+0x34a>
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b04      	cmp	r3, #4
 8007450:	d003      	beq.n	800745a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2205      	movs	r2, #5
 8007456:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	887a      	ldrh	r2, [r7, #2]
 800746a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	887a      	ldrh	r2, [r7, #2]
 8007470:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	68ba      	ldr	r2, [r7, #8]
 8007476:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	887a      	ldrh	r2, [r7, #2]
 800747c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	887a      	ldrh	r2, [r7, #2]
 8007482:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2200      	movs	r2, #0
 8007488:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800749a:	2b40      	cmp	r3, #64	@ 0x40
 800749c:	d007      	beq.n	80074ae <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074b6:	d17e      	bne.n	80075b6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d002      	beq.n	80074c6 <HAL_SPI_TransmitReceive+0xf6>
 80074c0:	8afb      	ldrh	r3, [r7, #22]
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d16c      	bne.n	80075a0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074ca:	881a      	ldrh	r2, [r3, #0]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d6:	1c9a      	adds	r2, r3, #2
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	3b01      	subs	r3, #1
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074ea:	e059      	b.n	80075a0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d11b      	bne.n	8007532 <HAL_SPI_TransmitReceive+0x162>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074fe:	b29b      	uxth	r3, r3
 8007500:	2b00      	cmp	r3, #0
 8007502:	d016      	beq.n	8007532 <HAL_SPI_TransmitReceive+0x162>
 8007504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007506:	2b01      	cmp	r3, #1
 8007508:	d113      	bne.n	8007532 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750e:	881a      	ldrh	r2, [r3, #0]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751a:	1c9a      	adds	r2, r3, #2
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007524:	b29b      	uxth	r3, r3
 8007526:	3b01      	subs	r3, #1
 8007528:	b29a      	uxth	r2, r3
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800752e:	2300      	movs	r3, #0
 8007530:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f003 0301 	and.w	r3, r3, #1
 800753c:	2b01      	cmp	r3, #1
 800753e:	d119      	bne.n	8007574 <HAL_SPI_TransmitReceive+0x1a4>
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007544:	b29b      	uxth	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d014      	beq.n	8007574 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	68da      	ldr	r2, [r3, #12]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007554:	b292      	uxth	r2, r2
 8007556:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800755c:	1c9a      	adds	r2, r3, #2
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007566:	b29b      	uxth	r3, r3
 8007568:	3b01      	subs	r3, #1
 800756a:	b29a      	uxth	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007570:	2301      	movs	r3, #1
 8007572:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007574:	f7fb fd34 	bl	8002fe0 <HAL_GetTick>
 8007578:	4602      	mov	r2, r0
 800757a:	6a3b      	ldr	r3, [r7, #32]
 800757c:	1ad3      	subs	r3, r2, r3
 800757e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007580:	429a      	cmp	r2, r3
 8007582:	d80d      	bhi.n	80075a0 <HAL_SPI_TransmitReceive+0x1d0>
 8007584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758a:	d009      	beq.n	80075a0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e0bc      	b.n	800771a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1a0      	bne.n	80074ec <HAL_SPI_TransmitReceive+0x11c>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d19b      	bne.n	80074ec <HAL_SPI_TransmitReceive+0x11c>
 80075b4:	e082      	b.n	80076bc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d002      	beq.n	80075c4 <HAL_SPI_TransmitReceive+0x1f4>
 80075be:	8afb      	ldrh	r3, [r7, #22]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d171      	bne.n	80076a8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	330c      	adds	r3, #12
 80075ce:	7812      	ldrb	r2, [r2, #0]
 80075d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3b01      	subs	r3, #1
 80075e4:	b29a      	uxth	r2, r3
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075ea:	e05d      	b.n	80076a8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689b      	ldr	r3, [r3, #8]
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d11c      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x264>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d017      	beq.n	8007634 <HAL_SPI_TransmitReceive+0x264>
 8007604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007606:	2b01      	cmp	r3, #1
 8007608:	d114      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	330c      	adds	r3, #12
 8007614:	7812      	ldrb	r2, [r2, #0]
 8007616:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761c:	1c5a      	adds	r2, r3, #1
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007626:	b29b      	uxth	r3, r3
 8007628:	3b01      	subs	r3, #1
 800762a:	b29a      	uxth	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b01      	cmp	r3, #1
 8007640:	d119      	bne.n	8007676 <HAL_SPI_TransmitReceive+0x2a6>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d014      	beq.n	8007676 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007656:	b2d2      	uxtb	r2, r2
 8007658:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765e:	1c5a      	adds	r2, r3, #1
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007668:	b29b      	uxth	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	b29a      	uxth	r2, r3
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007672:	2301      	movs	r3, #1
 8007674:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007676:	f7fb fcb3 	bl	8002fe0 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007682:	429a      	cmp	r2, r3
 8007684:	d803      	bhi.n	800768e <HAL_SPI_TransmitReceive+0x2be>
 8007686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800768c:	d102      	bne.n	8007694 <HAL_SPI_TransmitReceive+0x2c4>
 800768e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007690:	2b00      	cmp	r3, #0
 8007692:	d109      	bne.n	80076a8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2201      	movs	r2, #1
 8007698:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e038      	b.n	800771a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d19c      	bne.n	80075ec <HAL_SPI_TransmitReceive+0x21c>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d197      	bne.n	80075ec <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076bc:	6a3a      	ldr	r2, [r7, #32]
 80076be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f91d 	bl	8007900 <SPI_EndRxTxTransaction>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d008      	beq.n	80076de <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2220      	movs	r2, #32
 80076d0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e01d      	b.n	800771a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10a      	bne.n	80076fc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076e6:	2300      	movs	r3, #0
 80076e8:	613b      	str	r3, [r7, #16]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	613b      	str	r3, [r7, #16]
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	613b      	str	r3, [r7, #16]
 80076fa:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e000      	b.n	800771a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007718:	2300      	movs	r3, #0
  }
}
 800771a:	4618      	mov	r0, r3
 800771c:	3728      	adds	r7, #40	@ 0x28
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
	...

08007724 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b088      	sub	sp, #32
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	603b      	str	r3, [r7, #0]
 8007730:	4613      	mov	r3, r2
 8007732:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007734:	f7fb fc54 	bl	8002fe0 <HAL_GetTick>
 8007738:	4602      	mov	r2, r0
 800773a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773c:	1a9b      	subs	r3, r3, r2
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	4413      	add	r3, r2
 8007742:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007744:	f7fb fc4c 	bl	8002fe0 <HAL_GetTick>
 8007748:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800774a:	4b39      	ldr	r3, [pc, #228]	@ (8007830 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	015b      	lsls	r3, r3, #5
 8007750:	0d1b      	lsrs	r3, r3, #20
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	fb02 f303 	mul.w	r3, r2, r3
 8007758:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800775a:	e055      	b.n	8007808 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007762:	d051      	beq.n	8007808 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007764:	f7fb fc3c 	bl	8002fe0 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	69fa      	ldr	r2, [r7, #28]
 8007770:	429a      	cmp	r2, r3
 8007772:	d902      	bls.n	800777a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d13d      	bne.n	80077f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007788:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007792:	d111      	bne.n	80077b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800779c:	d004      	beq.n	80077a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077a6:	d107      	bne.n	80077b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077c0:	d10f      	bne.n	80077e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077d0:	601a      	str	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e018      	b.n	8007828 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d102      	bne.n	8007802 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80077fc:	2300      	movs	r3, #0
 80077fe:	61fb      	str	r3, [r7, #28]
 8007800:	e002      	b.n	8007808 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	3b01      	subs	r3, #1
 8007806:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	4013      	ands	r3, r2
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	429a      	cmp	r2, r3
 8007816:	bf0c      	ite	eq
 8007818:	2301      	moveq	r3, #1
 800781a:	2300      	movne	r3, #0
 800781c:	b2db      	uxtb	r3, r3
 800781e:	461a      	mov	r2, r3
 8007820:	79fb      	ldrb	r3, [r7, #7]
 8007822:	429a      	cmp	r2, r3
 8007824:	d19a      	bne.n	800775c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3720      	adds	r7, #32
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	20000000 	.word	0x20000000

08007834 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b086      	sub	sp, #24
 8007838:	af02      	add	r7, sp, #8
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007848:	d111      	bne.n	800786e <SPI_EndRxTransaction+0x3a>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007852:	d004      	beq.n	800785e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800785c:	d107      	bne.n	800786e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800786c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007876:	d12a      	bne.n	80078ce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007880:	d012      	beq.n	80078a8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	2200      	movs	r2, #0
 800788a:	2180      	movs	r1, #128	@ 0x80
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f7ff ff49 	bl	8007724 <SPI_WaitFlagStateUntilTimeout>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d02d      	beq.n	80078f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800789c:	f043 0220 	orr.w	r2, r3, #32
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e026      	b.n	80078f6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2200      	movs	r2, #0
 80078b0:	2101      	movs	r1, #1
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f7ff ff36 	bl	8007724 <SPI_WaitFlagStateUntilTimeout>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d01a      	beq.n	80078f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078c2:	f043 0220 	orr.w	r2, r3, #32
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e013      	b.n	80078f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2200      	movs	r2, #0
 80078d6:	2101      	movs	r1, #1
 80078d8:	68f8      	ldr	r0, [r7, #12]
 80078da:	f7ff ff23 	bl	8007724 <SPI_WaitFlagStateUntilTimeout>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d007      	beq.n	80078f4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078e8:	f043 0220 	orr.w	r2, r3, #32
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e000      	b.n	80078f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b088      	sub	sp, #32
 8007904:	af02      	add	r7, sp, #8
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2201      	movs	r2, #1
 8007914:	2102      	movs	r1, #2
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f7ff ff04 	bl	8007724 <SPI_WaitFlagStateUntilTimeout>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d007      	beq.n	8007932 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007926:	f043 0220 	orr.w	r2, r3, #32
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e032      	b.n	8007998 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007932:	4b1b      	ldr	r3, [pc, #108]	@ (80079a0 <SPI_EndRxTxTransaction+0xa0>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a1b      	ldr	r2, [pc, #108]	@ (80079a4 <SPI_EndRxTxTransaction+0xa4>)
 8007938:	fba2 2303 	umull	r2, r3, r2, r3
 800793c:	0d5b      	lsrs	r3, r3, #21
 800793e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007942:	fb02 f303 	mul.w	r3, r2, r3
 8007946:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007950:	d112      	bne.n	8007978 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	9300      	str	r3, [sp, #0]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2200      	movs	r2, #0
 800795a:	2180      	movs	r1, #128	@ 0x80
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	f7ff fee1 	bl	8007724 <SPI_WaitFlagStateUntilTimeout>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d016      	beq.n	8007996 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796c:	f043 0220 	orr.w	r2, r3, #32
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e00f      	b.n	8007998 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00a      	beq.n	8007994 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	3b01      	subs	r3, #1
 8007982:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800798e:	2b80      	cmp	r3, #128	@ 0x80
 8007990:	d0f2      	beq.n	8007978 <SPI_EndRxTxTransaction+0x78>
 8007992:	e000      	b.n	8007996 <SPI_EndRxTxTransaction+0x96>
        break;
 8007994:	bf00      	nop
  }

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3718      	adds	r7, #24
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}
 80079a0:	20000000 	.word	0x20000000
 80079a4:	165e9f81 	.word	0x165e9f81

080079a8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80079a8:	b084      	sub	sp, #16
 80079aa:	b480      	push	{r7}
 80079ac:	b085      	sub	sp, #20
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
 80079b2:	f107 001c 	add.w	r0, r7, #28
 80079b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80079be:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80079c0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80079c2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80079c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80079c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80079c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80079ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80079cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80079ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 80079d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80079d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80079e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	431a      	orrs	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	b004      	add	sp, #16
 80079fc:	4770      	bx	lr

080079fe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr

08007a3a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2203      	movs	r2, #3
 8007a46:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8007a48:	2300      	movs	r3, #0
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0303 	and.w	r3, r3, #3
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr

08007a72 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b085      	sub	sp, #20
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007a90:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007a96:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007a9c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8007aac:	f023 030f 	bic.w	r3, r3, #15
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	b2db      	uxtb	r3, r3
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3314      	adds	r3, #20
 8007aee:	461a      	mov	r2, r3
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	4413      	add	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
}  
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007b06:	b480      	push	{r7}
 8007b08:	b085      	sub	sp, #20
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007b10:	2300      	movs	r3, #0
 8007b12:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b2c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007b32:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007b38:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b44:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0

}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b088      	sub	sp, #32
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007b70:	2340      	movs	r3, #64	@ 0x40
 8007b72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007b74:	2300      	movs	r3, #0
 8007b76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b7c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007b7e:	f107 0308 	add.w	r3, r7, #8
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff ff74 	bl	8007a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b8e:	2110      	movs	r1, #16
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f9d7 	bl	8007f44 <SDMMC_GetCmdResp1>
 8007b96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b98:	69fb      	ldr	r3, [r7, #28]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3720      	adds	r7, #32
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b088      	sub	sp, #32
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007bb0:	2311      	movs	r3, #17
 8007bb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bb4:	2340      	movs	r3, #64	@ 0x40
 8007bb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bc2:	f107 0308 	add.w	r3, r7, #8
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f7ff ff52 	bl	8007a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007bce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007bd2:	2111      	movs	r1, #17
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f9b5 	bl	8007f44 <SDMMC_GetCmdResp1>
 8007bda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bdc:	69fb      	ldr	r3, [r7, #28]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3720      	adds	r7, #32
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b088      	sub	sp, #32
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007bf4:	2312      	movs	r3, #18
 8007bf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bf8:	2340      	movs	r3, #64	@ 0x40
 8007bfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c04:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c06:	f107 0308 	add.w	r3, r7, #8
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7ff ff30 	bl	8007a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c16:	2112      	movs	r1, #18
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f993 	bl	8007f44 <SDMMC_GetCmdResp1>
 8007c1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c20:	69fb      	ldr	r3, [r7, #28]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3720      	adds	r7, #32
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b088      	sub	sp, #32
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007c38:	2318      	movs	r3, #24
 8007c3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c3c:	2340      	movs	r3, #64	@ 0x40
 8007c3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c40:	2300      	movs	r3, #0
 8007c42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c4a:	f107 0308 	add.w	r3, r7, #8
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7ff ff0e 	bl	8007a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c5a:	2118      	movs	r1, #24
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 f971 	bl	8007f44 <SDMMC_GetCmdResp1>
 8007c62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c64:	69fb      	ldr	r3, [r7, #28]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3720      	adds	r7, #32
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b088      	sub	sp, #32
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007c7c:	2319      	movs	r3, #25
 8007c7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c80:	2340      	movs	r3, #64	@ 0x40
 8007c82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c84:	2300      	movs	r3, #0
 8007c86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c8e:	f107 0308 	add.w	r3, r7, #8
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7ff feec 	bl	8007a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c9e:	2119      	movs	r1, #25
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f94f 	bl	8007f44 <SDMMC_GetCmdResp1>
 8007ca6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ca8:	69fb      	ldr	r3, [r7, #28]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3720      	adds	r7, #32
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007cc0:	230c      	movs	r3, #12
 8007cc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cc4:	2340      	movs	r3, #64	@ 0x40
 8007cc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ccc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007cd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cd2:	f107 0308 	add.w	r3, r7, #8
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff feca 	bl	8007a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007cde:	4a05      	ldr	r2, [pc, #20]	@ (8007cf4 <SDMMC_CmdStopTransfer+0x40>)
 8007ce0:	210c      	movs	r1, #12
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f92e 	bl	8007f44 <SDMMC_GetCmdResp1>
 8007ce8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cea:	69fb      	ldr	r3, [r7, #28]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3720      	adds	r7, #32
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	05f5e100 	.word	0x05f5e100

08007cf8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08a      	sub	sp, #40	@ 0x28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007d08:	2307      	movs	r3, #7
 8007d0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d0c:	2340      	movs	r3, #64	@ 0x40
 8007d0e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d10:	2300      	movs	r3, #0
 8007d12:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d18:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d1a:	f107 0310 	add.w	r3, r7, #16
 8007d1e:	4619      	mov	r1, r3
 8007d20:	68f8      	ldr	r0, [r7, #12]
 8007d22:	f7ff fea6 	bl	8007a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d2a:	2107      	movs	r1, #7
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 f909 	bl	8007f44 <SDMMC_GetCmdResp1>
 8007d32:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8007d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3728      	adds	r7, #40	@ 0x28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b088      	sub	sp, #32
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d52:	2300      	movs	r3, #0
 8007d54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d5c:	f107 0308 	add.w	r3, r7, #8
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7ff fe85 	bl	8007a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fb23 	bl	80083b4 <SDMMC_GetCmdError>
 8007d6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d70:	69fb      	ldr	r3, [r7, #28]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3720      	adds	r7, #32
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b088      	sub	sp, #32
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007d82:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8007d86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007d88:	2308      	movs	r3, #8
 8007d8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d8c:	2340      	movs	r3, #64	@ 0x40
 8007d8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d90:	2300      	movs	r3, #0
 8007d92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d9a:	f107 0308 	add.w	r3, r7, #8
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff fe66 	bl	8007a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 fab6 	bl	8008318 <SDMMC_GetCmdResp7>
 8007dac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dae:	69fb      	ldr	r3, [r7, #28]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3720      	adds	r7, #32
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b088      	sub	sp, #32
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007dc6:	2337      	movs	r3, #55	@ 0x37
 8007dc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007dca:	2340      	movs	r3, #64	@ 0x40
 8007dcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007dd2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007dd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007dd8:	f107 0308 	add.w	r3, r7, #8
 8007ddc:	4619      	mov	r1, r3
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff fe47 	bl	8007a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007de8:	2137      	movs	r1, #55	@ 0x37
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f8aa 	bl	8007f44 <SDMMC_GetCmdResp1>
 8007df0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007df2:	69fb      	ldr	r3, [r7, #28]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3720      	adds	r7, #32
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007e12:	2329      	movs	r3, #41	@ 0x29
 8007e14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e16:	2340      	movs	r3, #64	@ 0x40
 8007e18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e24:	f107 0308 	add.w	r3, r7, #8
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7ff fe21 	bl	8007a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f9bd 	bl	80081b0 <SDMMC_GetCmdResp3>
 8007e36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e38:	69fb      	ldr	r3, [r7, #28]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3720      	adds	r7, #32
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b088      	sub	sp, #32
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007e4e:	2302      	movs	r3, #2
 8007e50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007e52:	23c0      	movs	r3, #192	@ 0xc0
 8007e54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e60:	f107 0308 	add.w	r3, r7, #8
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff fe03 	bl	8007a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f957 	bl	8008120 <SDMMC_GetCmdResp2>
 8007e72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e74:	69fb      	ldr	r3, [r7, #28]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3720      	adds	r7, #32
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b088      	sub	sp, #32
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007e8c:	2309      	movs	r3, #9
 8007e8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007e90:	23c0      	movs	r3, #192	@ 0xc0
 8007e92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e9e:	f107 0308 	add.w	r3, r7, #8
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff fde4 	bl	8007a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f938 	bl	8008120 <SDMMC_GetCmdResp2>
 8007eb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007eb2:	69fb      	ldr	r3, [r7, #28]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3720      	adds	r7, #32
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ece:	2340      	movs	r3, #64	@ 0x40
 8007ed0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007ed6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007eda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007edc:	f107 0308 	add.w	r3, r7, #8
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7ff fdc5 	bl	8007a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	2103      	movs	r1, #3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f99d 	bl	800822c <SDMMC_GetCmdResp6>
 8007ef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ef4:	69fb      	ldr	r3, [r7, #28]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3720      	adds	r7, #32
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}

08007efe <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b088      	sub	sp, #32
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007f0c:	230d      	movs	r3, #13
 8007f0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f10:	2340      	movs	r3, #64	@ 0x40
 8007f12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f14:	2300      	movs	r3, #0
 8007f16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f1e:	f107 0308 	add.w	r3, r7, #8
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f7ff fda4 	bl	8007a72 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f2e:	210d      	movs	r1, #13
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f807 	bl	8007f44 <SDMMC_GetCmdResp1>
 8007f36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f38:	69fb      	ldr	r3, [r7, #28]
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3720      	adds	r7, #32
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
	...

08007f44 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b088      	sub	sp, #32
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	607a      	str	r2, [r7, #4]
 8007f50:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007f52:	4b70      	ldr	r3, [pc, #448]	@ (8008114 <SDMMC_GetCmdResp1+0x1d0>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a70      	ldr	r2, [pc, #448]	@ (8008118 <SDMMC_GetCmdResp1+0x1d4>)
 8007f58:	fba2 2303 	umull	r2, r3, r2, r3
 8007f5c:	0a5a      	lsrs	r2, r3, #9
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	fb02 f303 	mul.w	r3, r2, r3
 8007f64:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	1e5a      	subs	r2, r3, #1
 8007f6a:	61fa      	str	r2, [r7, #28]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d102      	bne.n	8007f76 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007f74:	e0c9      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f7a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d0ef      	beq.n	8007f66 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1ea      	bne.n	8007f66 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f94:	f003 0304 	and.w	r3, r3, #4
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d004      	beq.n	8007fa6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2204      	movs	r2, #4
 8007fa0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007fa2:	2304      	movs	r3, #4
 8007fa4:	e0b1      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d004      	beq.n	8007fbc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e0a6      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	22c5      	movs	r2, #197	@ 0xc5
 8007fc0:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f7ff fd7f 	bl	8007ac6 <SDIO_GetCommandResponse>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	461a      	mov	r2, r3
 8007fcc:	7afb      	ldrb	r3, [r7, #11]
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d001      	beq.n	8007fd6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e099      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f7ff fd81 	bl	8007ae0 <SDIO_GetResponse>
 8007fde:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	4b4e      	ldr	r3, [pc, #312]	@ (800811c <SDMMC_GetCmdResp1+0x1d8>)
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	e08d      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	da02      	bge.n	8007ffa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007ff4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007ff8:	e087      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008004:	2340      	movs	r3, #64	@ 0x40
 8008006:	e080      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008012:	2380      	movs	r3, #128	@ 0x80
 8008014:	e079      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800801c:	2b00      	cmp	r3, #0
 800801e:	d002      	beq.n	8008026 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008020:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008024:	e071      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d002      	beq.n	8008036 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008030:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008034:	e069      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008040:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008044:	e061      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008050:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008054:	e059      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008060:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008064:	e051      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008070:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008074:	e049      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008080:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008084:	e041      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d002      	beq.n	8008096 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008090:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008094:	e039      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d002      	beq.n	80080a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80080a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80080a4:	e031      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d002      	beq.n	80080b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80080b0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80080b4:	e029      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80080c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80080c4:	e021      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d002      	beq.n	80080d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80080d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80080d4:	e019      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80080e0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80080e4:	e011      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80080f0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80080f4:	e009      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f003 0308 	and.w	r3, r3, #8
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008100:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8008104:	e001      	b.n	800810a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008106:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800810a:	4618      	mov	r0, r3
 800810c:	3720      	adds	r7, #32
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	20000000 	.word	0x20000000
 8008118:	10624dd3 	.word	0x10624dd3
 800811c:	fdffe008 	.word	0xfdffe008

08008120 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008128:	4b1f      	ldr	r3, [pc, #124]	@ (80081a8 <SDMMC_GetCmdResp2+0x88>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a1f      	ldr	r2, [pc, #124]	@ (80081ac <SDMMC_GetCmdResp2+0x8c>)
 800812e:	fba2 2303 	umull	r2, r3, r2, r3
 8008132:	0a5b      	lsrs	r3, r3, #9
 8008134:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008138:	fb02 f303 	mul.w	r3, r2, r3
 800813c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	1e5a      	subs	r2, r3, #1
 8008142:	60fa      	str	r2, [r7, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d102      	bne.n	800814e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008148:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800814c:	e026      	b.n	800819c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008152:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0ef      	beq.n	800813e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1ea      	bne.n	800813e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	2b00      	cmp	r3, #0
 8008172:	d004      	beq.n	800817e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2204      	movs	r2, #4
 8008178:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800817a:	2304      	movs	r3, #4
 800817c:	e00e      	b.n	800819c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d004      	beq.n	8008194 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008190:	2301      	movs	r3, #1
 8008192:	e003      	b.n	800819c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	22c5      	movs	r2, #197	@ 0xc5
 8008198:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3714      	adds	r7, #20
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	20000000 	.word	0x20000000
 80081ac:	10624dd3 	.word	0x10624dd3

080081b0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80081b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008224 <SDMMC_GetCmdResp3+0x74>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a1a      	ldr	r2, [pc, #104]	@ (8008228 <SDMMC_GetCmdResp3+0x78>)
 80081be:	fba2 2303 	umull	r2, r3, r2, r3
 80081c2:	0a5b      	lsrs	r3, r3, #9
 80081c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081c8:	fb02 f303 	mul.w	r3, r2, r3
 80081cc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	1e5a      	subs	r2, r3, #1
 80081d2:	60fa      	str	r2, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d102      	bne.n	80081de <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80081d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80081dc:	e01b      	b.n	8008216 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081e2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0ef      	beq.n	80081ce <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1ea      	bne.n	80081ce <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b00      	cmp	r3, #0
 8008202:	d004      	beq.n	800820e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2204      	movs	r2, #4
 8008208:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800820a:	2304      	movs	r3, #4
 800820c:	e003      	b.n	8008216 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	22c5      	movs	r2, #197	@ 0xc5
 8008212:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	20000000 	.word	0x20000000
 8008228:	10624dd3 	.word	0x10624dd3

0800822c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b088      	sub	sp, #32
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	460b      	mov	r3, r1
 8008236:	607a      	str	r2, [r7, #4]
 8008238:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800823a:	4b35      	ldr	r3, [pc, #212]	@ (8008310 <SDMMC_GetCmdResp6+0xe4>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a35      	ldr	r2, [pc, #212]	@ (8008314 <SDMMC_GetCmdResp6+0xe8>)
 8008240:	fba2 2303 	umull	r2, r3, r2, r3
 8008244:	0a5b      	lsrs	r3, r3, #9
 8008246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800824a:	fb02 f303 	mul.w	r3, r2, r3
 800824e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	1e5a      	subs	r2, r3, #1
 8008254:	61fa      	str	r2, [r7, #28]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d102      	bne.n	8008260 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800825a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800825e:	e052      	b.n	8008306 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008264:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800826c:	2b00      	cmp	r3, #0
 800826e:	d0ef      	beq.n	8008250 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1ea      	bne.n	8008250 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800827e:	f003 0304 	and.w	r3, r3, #4
 8008282:	2b00      	cmp	r3, #0
 8008284:	d004      	beq.n	8008290 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2204      	movs	r2, #4
 800828a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800828c:	2304      	movs	r3, #4
 800828e:	e03a      	b.n	8008306 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008294:	f003 0301 	and.w	r3, r3, #1
 8008298:	2b00      	cmp	r3, #0
 800829a:	d004      	beq.n	80082a6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2201      	movs	r2, #1
 80082a0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e02f      	b.n	8008306 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f7ff fc0d 	bl	8007ac6 <SDIO_GetCommandResponse>
 80082ac:	4603      	mov	r3, r0
 80082ae:	461a      	mov	r2, r3
 80082b0:	7afb      	ldrb	r3, [r7, #11]
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d001      	beq.n	80082ba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e025      	b.n	8008306 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	22c5      	movs	r2, #197	@ 0xc5
 80082be:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80082c0:	2100      	movs	r1, #0
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7ff fc0c 	bl	8007ae0 <SDIO_GetResponse>
 80082c8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d106      	bne.n	80082e2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	0c1b      	lsrs	r3, r3, #16
 80082d8:	b29a      	uxth	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80082de:	2300      	movs	r3, #0
 80082e0:	e011      	b.n	8008306 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d002      	beq.n	80082f2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80082ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80082f0:	e009      	b.n	8008306 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d002      	beq.n	8008302 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80082fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008300:	e001      	b.n	8008306 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008302:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8008306:	4618      	mov	r0, r3
 8008308:	3720      	adds	r7, #32
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20000000 	.word	0x20000000
 8008314:	10624dd3 	.word	0x10624dd3

08008318 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008320:	4b22      	ldr	r3, [pc, #136]	@ (80083ac <SDMMC_GetCmdResp7+0x94>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a22      	ldr	r2, [pc, #136]	@ (80083b0 <SDMMC_GetCmdResp7+0x98>)
 8008326:	fba2 2303 	umull	r2, r3, r2, r3
 800832a:	0a5b      	lsrs	r3, r3, #9
 800832c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008330:	fb02 f303 	mul.w	r3, r2, r3
 8008334:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	1e5a      	subs	r2, r3, #1
 800833a:	60fa      	str	r2, [r7, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d102      	bne.n	8008346 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008340:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008344:	e02c      	b.n	80083a0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800834a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0ef      	beq.n	8008336 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1ea      	bne.n	8008336 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008364:	f003 0304 	and.w	r3, r3, #4
 8008368:	2b00      	cmp	r3, #0
 800836a:	d004      	beq.n	8008376 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2204      	movs	r2, #4
 8008370:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008372:	2304      	movs	r3, #4
 8008374:	e014      	b.n	80083a0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d004      	beq.n	800838c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008388:	2301      	movs	r3, #1
 800838a:	e009      	b.n	80083a0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008394:	2b00      	cmp	r3, #0
 8008396:	d002      	beq.n	800839e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2240      	movs	r2, #64	@ 0x40
 800839c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800839e:	2300      	movs	r3, #0
  
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	20000000 	.word	0x20000000
 80083b0:	10624dd3 	.word	0x10624dd3

080083b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80083bc:	4b11      	ldr	r3, [pc, #68]	@ (8008404 <SDMMC_GetCmdError+0x50>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a11      	ldr	r2, [pc, #68]	@ (8008408 <SDMMC_GetCmdError+0x54>)
 80083c2:	fba2 2303 	umull	r2, r3, r2, r3
 80083c6:	0a5b      	lsrs	r3, r3, #9
 80083c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083cc:	fb02 f303 	mul.w	r3, r2, r3
 80083d0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	1e5a      	subs	r2, r3, #1
 80083d6:	60fa      	str	r2, [r7, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d102      	bne.n	80083e2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80083dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80083e0:	e009      	b.n	80083f6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0f1      	beq.n	80083d2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	22c5      	movs	r2, #197	@ 0xc5
 80083f2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3714      	adds	r7, #20
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	20000000 	.word	0x20000000
 8008408:	10624dd3 	.word	0x10624dd3

0800840c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008410:	4904      	ldr	r1, [pc, #16]	@ (8008424 <MX_FATFS_Init+0x18>)
 8008412:	4805      	ldr	r0, [pc, #20]	@ (8008428 <MX_FATFS_Init+0x1c>)
 8008414:	f002 fc5e 	bl	800acd4 <FATFS_LinkDriver>
 8008418:	4603      	mov	r3, r0
 800841a:	461a      	mov	r2, r3
 800841c:	4b03      	ldr	r3, [pc, #12]	@ (800842c <MX_FATFS_Init+0x20>)
 800841e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008420:	bf00      	nop
 8008422:	bd80      	pop	{r7, pc}
 8008424:	200006c4 	.word	0x200006c4
 8008428:	0800b94c 	.word	0x0800b94c
 800842c:	200006c0 	.word	0x200006c0

08008430 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008430:	b480      	push	{r7}
 8008432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008434:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008436:	4618      	mov	r0, r3
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800844a:	f000 f89e 	bl	800858a <BSP_SD_IsDetected>
 800844e:	4603      	mov	r3, r0
 8008450:	2b01      	cmp	r3, #1
 8008452:	d001      	beq.n	8008458 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	e005      	b.n	8008464 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008458:	4804      	ldr	r0, [pc, #16]	@ (800846c <BSP_SD_Init+0x2c>)
 800845a:	f7fd fa9f 	bl	800599c <HAL_SD_Init>
 800845e:	4603      	mov	r3, r0
 8008460:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008462:	79fb      	ldrb	r3, [r7, #7]
}
 8008464:	4618      	mov	r0, r3
 8008466:	3708      	adds	r7, #8
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}
 800846c:	20000548 	.word	0x20000548

08008470 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b088      	sub	sp, #32
 8008474:	af02      	add	r7, sp, #8
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800847e:	2300      	movs	r3, #0
 8008480:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	9300      	str	r3, [sp, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	68f9      	ldr	r1, [r7, #12]
 800848c:	4806      	ldr	r0, [pc, #24]	@ (80084a8 <BSP_SD_ReadBlocks+0x38>)
 800848e:	f7fd fb2d 	bl	8005aec <HAL_SD_ReadBlocks>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800849c:	7dfb      	ldrb	r3, [r7, #23]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3718      	adds	r7, #24
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000548 	.word	0x20000548

080084ac <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af02      	add	r7, sp, #8
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	607a      	str	r2, [r7, #4]
 80084b8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	68f9      	ldr	r1, [r7, #12]
 80084c8:	4806      	ldr	r0, [pc, #24]	@ (80084e4 <BSP_SD_WriteBlocks+0x38>)
 80084ca:	f7fd fcf5 	bl	8005eb8 <HAL_SD_WriteBlocks>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80084d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20000548 	.word	0x20000548

080084e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80084ec:	4805      	ldr	r0, [pc, #20]	@ (8008504 <BSP_SD_GetCardState+0x1c>)
 80084ee:	f7fe f9d1 	bl	8006894 <HAL_SD_GetCardState>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b04      	cmp	r3, #4
 80084f6:	bf14      	ite	ne
 80084f8:	2301      	movne	r3, #1
 80084fa:	2300      	moveq	r3, #0
 80084fc:	b2db      	uxtb	r3, r3
}
 80084fe:	4618      	mov	r0, r3
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	20000548 	.word	0x20000548

08008508 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008510:	6879      	ldr	r1, [r7, #4]
 8008512:	4803      	ldr	r0, [pc, #12]	@ (8008520 <BSP_SD_GetCardInfo+0x18>)
 8008514:	f7fe f992 	bl	800683c <HAL_SD_GetCardInfo>
}
 8008518:	bf00      	nop
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	20000548 	.word	0x20000548

08008524 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800852c:	f000 f818 	bl	8008560 <BSP_SD_AbortCallback>
}
 8008530:	bf00      	nop
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008540:	f000 f815 	bl	800856e <BSP_SD_WriteCpltCallback>
}
 8008544:	bf00      	nop
 8008546:	3708      	adds	r7, #8
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008554:	f000 f812 	bl	800857c <BSP_SD_ReadCpltCallback>
}
 8008558:	bf00      	nop
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008560:	b480      	push	{r7}
 8008562:	af00      	add	r7, sp, #0

}
 8008564:	bf00      	nop
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800856e:	b480      	push	{r7}
 8008570:	af00      	add	r7, sp, #0

}
 8008572:	bf00      	nop
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800857c:	b480      	push	{r7}
 800857e:	af00      	add	r7, sp, #0

}
 8008580:	bf00      	nop
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008590:	2301      	movs	r3, #1
 8008592:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8008594:	f000 f80c 	bl	80085b0 <BSP_PlatformIsDetected>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800859e:	2300      	movs	r3, #0
 80085a0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80085a2:	79fb      	ldrb	r3, [r7, #7]
 80085a4:	b2db      	uxtb	r3, r3
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
	...

080085b0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80085b6:	2301      	movs	r3, #1
 80085b8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80085ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80085be:	4806      	ldr	r0, [pc, #24]	@ (80085d8 <BSP_PlatformIsDetected+0x28>)
 80085c0:	f7fb f81c 	bl	80035fc <HAL_GPIO_ReadPin>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80085ca:	2300      	movs	r3, #0
 80085cc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80085ce:	79fb      	ldrb	r3, [r7, #7]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	40020800 	.word	0x40020800

080085dc <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80085e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008614 <SD_CheckStatus+0x38>)
 80085e8:	2201      	movs	r2, #1
 80085ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80085ec:	f7ff ff7c 	bl	80084e8 <BSP_SD_GetCardState>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d107      	bne.n	8008606 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80085f6:	4b07      	ldr	r3, [pc, #28]	@ (8008614 <SD_CheckStatus+0x38>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	f023 0301 	bic.w	r3, r3, #1
 8008600:	b2da      	uxtb	r2, r3
 8008602:	4b04      	ldr	r3, [pc, #16]	@ (8008614 <SD_CheckStatus+0x38>)
 8008604:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008606:	4b03      	ldr	r3, [pc, #12]	@ (8008614 <SD_CheckStatus+0x38>)
 8008608:	781b      	ldrb	r3, [r3, #0]
 800860a:	b2db      	uxtb	r3, r3
}
 800860c:	4618      	mov	r0, r3
 800860e:	3708      	adds	r7, #8
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	20000009 	.word	0x20000009

08008618 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	4603      	mov	r3, r0
 8008620:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008622:	4b0b      	ldr	r3, [pc, #44]	@ (8008650 <SD_initialize+0x38>)
 8008624:	2201      	movs	r2, #1
 8008626:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008628:	f7ff ff0a 	bl	8008440 <BSP_SD_Init>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d107      	bne.n	8008642 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008632:	79fb      	ldrb	r3, [r7, #7]
 8008634:	4618      	mov	r0, r3
 8008636:	f7ff ffd1 	bl	80085dc <SD_CheckStatus>
 800863a:	4603      	mov	r3, r0
 800863c:	461a      	mov	r2, r3
 800863e:	4b04      	ldr	r3, [pc, #16]	@ (8008650 <SD_initialize+0x38>)
 8008640:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8008642:	4b03      	ldr	r3, [pc, #12]	@ (8008650 <SD_initialize+0x38>)
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	b2db      	uxtb	r3, r3
}
 8008648:	4618      	mov	r0, r3
 800864a:	3708      	adds	r7, #8
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20000009 	.word	0x20000009

08008654 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800865e:	79fb      	ldrb	r3, [r7, #7]
 8008660:	4618      	mov	r0, r3
 8008662:	f7ff ffbb 	bl	80085dc <SD_CheckStatus>
 8008666:	4603      	mov	r3, r0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	60b9      	str	r1, [r7, #8]
 8008678:	607a      	str	r2, [r7, #4]
 800867a:	603b      	str	r3, [r7, #0]
 800867c:	4603      	mov	r3, r0
 800867e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008684:	f04f 33ff 	mov.w	r3, #4294967295
 8008688:	683a      	ldr	r2, [r7, #0]
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	68b8      	ldr	r0, [r7, #8]
 800868e:	f7ff feef 	bl	8008470 <BSP_SD_ReadBlocks>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d107      	bne.n	80086a8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008698:	bf00      	nop
 800869a:	f7ff ff25 	bl	80084e8 <BSP_SD_GetCardState>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1fa      	bne.n	800869a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80086a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3718      	adds	r7, #24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80086b2:	b580      	push	{r7, lr}
 80086b4:	b086      	sub	sp, #24
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
 80086bc:	603b      	str	r3, [r7, #0]
 80086be:	4603      	mov	r3, r0
 80086c0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80086c2:	2301      	movs	r3, #1
 80086c4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80086c6:	f04f 33ff 	mov.w	r3, #4294967295
 80086ca:	683a      	ldr	r2, [r7, #0]
 80086cc:	6879      	ldr	r1, [r7, #4]
 80086ce:	68b8      	ldr	r0, [r7, #8]
 80086d0:	f7ff feec 	bl	80084ac <BSP_SD_WriteBlocks>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d107      	bne.n	80086ea <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80086da:	bf00      	nop
 80086dc:	f7ff ff04 	bl	80084e8 <BSP_SD_GetCardState>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1fa      	bne.n	80086dc <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80086e6:	2300      	movs	r3, #0
 80086e8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b08c      	sub	sp, #48	@ 0x30
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	4603      	mov	r3, r0
 80086fc:	603a      	str	r2, [r7, #0]
 80086fe:	71fb      	strb	r3, [r7, #7]
 8008700:	460b      	mov	r3, r1
 8008702:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800870a:	4b25      	ldr	r3, [pc, #148]	@ (80087a0 <SD_ioctl+0xac>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	b2db      	uxtb	r3, r3
 8008710:	f003 0301 	and.w	r3, r3, #1
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <SD_ioctl+0x28>
 8008718:	2303      	movs	r3, #3
 800871a:	e03c      	b.n	8008796 <SD_ioctl+0xa2>

  switch (cmd)
 800871c:	79bb      	ldrb	r3, [r7, #6]
 800871e:	2b03      	cmp	r3, #3
 8008720:	d834      	bhi.n	800878c <SD_ioctl+0x98>
 8008722:	a201      	add	r2, pc, #4	@ (adr r2, 8008728 <SD_ioctl+0x34>)
 8008724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008728:	08008739 	.word	0x08008739
 800872c:	08008741 	.word	0x08008741
 8008730:	08008759 	.word	0x08008759
 8008734:	08008773 	.word	0x08008773
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800873e:	e028      	b.n	8008792 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008740:	f107 030c 	add.w	r3, r7, #12
 8008744:	4618      	mov	r0, r3
 8008746:	f7ff fedf 	bl	8008508 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800874a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008756:	e01c      	b.n	8008792 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008758:	f107 030c 	add.w	r3, r7, #12
 800875c:	4618      	mov	r0, r3
 800875e:	f7ff fed3 	bl	8008508 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008764:	b29a      	uxth	r2, r3
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8008770:	e00f      	b.n	8008792 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008772:	f107 030c 	add.w	r3, r7, #12
 8008776:	4618      	mov	r0, r3
 8008778:	f7ff fec6 	bl	8008508 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800877c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800877e:	0a5a      	lsrs	r2, r3, #9
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800878a:	e002      	b.n	8008792 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800878c:	2304      	movs	r3, #4
 800878e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8008792:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008796:	4618      	mov	r0, r3
 8008798:	3730      	adds	r7, #48	@ 0x30
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20000009 	.word	0x20000009

080087a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80087ae:	79fb      	ldrb	r3, [r7, #7]
 80087b0:	4a08      	ldr	r2, [pc, #32]	@ (80087d4 <disk_status+0x30>)
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4413      	add	r3, r2
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	79fa      	ldrb	r2, [r7, #7]
 80087bc:	4905      	ldr	r1, [pc, #20]	@ (80087d4 <disk_status+0x30>)
 80087be:	440a      	add	r2, r1
 80087c0:	7a12      	ldrb	r2, [r2, #8]
 80087c2:	4610      	mov	r0, r2
 80087c4:	4798      	blx	r3
 80087c6:	4603      	mov	r3, r0
 80087c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80087ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	200006f0 	.word	0x200006f0

080087d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80087e2:	2300      	movs	r3, #0
 80087e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80087e6:	79fb      	ldrb	r3, [r7, #7]
 80087e8:	4a0e      	ldr	r2, [pc, #56]	@ (8008824 <disk_initialize+0x4c>)
 80087ea:	5cd3      	ldrb	r3, [r2, r3]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d114      	bne.n	800881a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80087f0:	79fb      	ldrb	r3, [r7, #7]
 80087f2:	4a0c      	ldr	r2, [pc, #48]	@ (8008824 <disk_initialize+0x4c>)
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4413      	add	r3, r2
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	79fa      	ldrb	r2, [r7, #7]
 80087fe:	4909      	ldr	r1, [pc, #36]	@ (8008824 <disk_initialize+0x4c>)
 8008800:	440a      	add	r2, r1
 8008802:	7a12      	ldrb	r2, [r2, #8]
 8008804:	4610      	mov	r0, r2
 8008806:	4798      	blx	r3
 8008808:	4603      	mov	r3, r0
 800880a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d103      	bne.n	800881a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	4a03      	ldr	r2, [pc, #12]	@ (8008824 <disk_initialize+0x4c>)
 8008816:	2101      	movs	r1, #1
 8008818:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800881a:	7bfb      	ldrb	r3, [r7, #15]
}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}
 8008824:	200006f0 	.word	0x200006f0

08008828 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008828:	b590      	push	{r4, r7, lr}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	60b9      	str	r1, [r7, #8]
 8008830:	607a      	str	r2, [r7, #4]
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	4603      	mov	r3, r0
 8008836:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008838:	7bfb      	ldrb	r3, [r7, #15]
 800883a:	4a0a      	ldr	r2, [pc, #40]	@ (8008864 <disk_read+0x3c>)
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	4413      	add	r3, r2
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	689c      	ldr	r4, [r3, #8]
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	4a07      	ldr	r2, [pc, #28]	@ (8008864 <disk_read+0x3c>)
 8008848:	4413      	add	r3, r2
 800884a:	7a18      	ldrb	r0, [r3, #8]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	68b9      	ldr	r1, [r7, #8]
 8008852:	47a0      	blx	r4
 8008854:	4603      	mov	r3, r0
 8008856:	75fb      	strb	r3, [r7, #23]
  return res;
 8008858:	7dfb      	ldrb	r3, [r7, #23]
}
 800885a:	4618      	mov	r0, r3
 800885c:	371c      	adds	r7, #28
 800885e:	46bd      	mov	sp, r7
 8008860:	bd90      	pop	{r4, r7, pc}
 8008862:	bf00      	nop
 8008864:	200006f0 	.word	0x200006f0

08008868 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008868:	b590      	push	{r4, r7, lr}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	60b9      	str	r1, [r7, #8]
 8008870:	607a      	str	r2, [r7, #4]
 8008872:	603b      	str	r3, [r7, #0]
 8008874:	4603      	mov	r3, r0
 8008876:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	4a0a      	ldr	r2, [pc, #40]	@ (80088a4 <disk_write+0x3c>)
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	68dc      	ldr	r4, [r3, #12]
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	4a07      	ldr	r2, [pc, #28]	@ (80088a4 <disk_write+0x3c>)
 8008888:	4413      	add	r3, r2
 800888a:	7a18      	ldrb	r0, [r3, #8]
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	68b9      	ldr	r1, [r7, #8]
 8008892:	47a0      	blx	r4
 8008894:	4603      	mov	r3, r0
 8008896:	75fb      	strb	r3, [r7, #23]
  return res;
 8008898:	7dfb      	ldrb	r3, [r7, #23]
}
 800889a:	4618      	mov	r0, r3
 800889c:	371c      	adds	r7, #28
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd90      	pop	{r4, r7, pc}
 80088a2:	bf00      	nop
 80088a4:	200006f0 	.word	0x200006f0

080088a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	4603      	mov	r3, r0
 80088b0:	603a      	str	r2, [r7, #0]
 80088b2:	71fb      	strb	r3, [r7, #7]
 80088b4:	460b      	mov	r3, r1
 80088b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80088b8:	79fb      	ldrb	r3, [r7, #7]
 80088ba:	4a09      	ldr	r2, [pc, #36]	@ (80088e0 <disk_ioctl+0x38>)
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4413      	add	r3, r2
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	79fa      	ldrb	r2, [r7, #7]
 80088c6:	4906      	ldr	r1, [pc, #24]	@ (80088e0 <disk_ioctl+0x38>)
 80088c8:	440a      	add	r2, r1
 80088ca:	7a10      	ldrb	r0, [r2, #8]
 80088cc:	79b9      	ldrb	r1, [r7, #6]
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	4798      	blx	r3
 80088d2:	4603      	mov	r3, r0
 80088d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80088d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}
 80088e0:	200006f0 	.word	0x200006f0

080088e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80088e4:	b480      	push	{r7}
 80088e6:	b085      	sub	sp, #20
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	3301      	adds	r3, #1
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80088f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80088f8:	021b      	lsls	r3, r3, #8
 80088fa:	b21a      	sxth	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	b21b      	sxth	r3, r3
 8008902:	4313      	orrs	r3, r2
 8008904:	b21b      	sxth	r3, r3
 8008906:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008908:	89fb      	ldrh	r3, [r7, #14]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008916:	b480      	push	{r7}
 8008918:	b085      	sub	sp, #20
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3303      	adds	r3, #3
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	021b      	lsls	r3, r3, #8
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	3202      	adds	r2, #2
 800892e:	7812      	ldrb	r2, [r2, #0]
 8008930:	4313      	orrs	r3, r2
 8008932:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	021b      	lsls	r3, r3, #8
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	3201      	adds	r2, #1
 800893c:	7812      	ldrb	r2, [r2, #0]
 800893e:	4313      	orrs	r3, r2
 8008940:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	021b      	lsls	r3, r3, #8
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	7812      	ldrb	r2, [r2, #0]
 800894a:	4313      	orrs	r3, r2
 800894c:	60fb      	str	r3, [r7, #12]
	return rv;
 800894e:	68fb      	ldr	r3, [r7, #12]
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	1c5a      	adds	r2, r3, #1
 800896c:	607a      	str	r2, [r7, #4]
 800896e:	887a      	ldrh	r2, [r7, #2]
 8008970:	b2d2      	uxtb	r2, r2
 8008972:	701a      	strb	r2, [r3, #0]
 8008974:	887b      	ldrh	r3, [r7, #2]
 8008976:	0a1b      	lsrs	r3, r3, #8
 8008978:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	1c5a      	adds	r2, r3, #1
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	887a      	ldrh	r2, [r7, #2]
 8008982:	b2d2      	uxtb	r2, r2
 8008984:	701a      	strb	r2, [r3, #0]
}
 8008986:	bf00      	nop
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr

08008992 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008992:	b480      	push	{r7}
 8008994:	b083      	sub	sp, #12
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	607a      	str	r2, [r7, #4]
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	b2d2      	uxtb	r2, r2
 80089a6:	701a      	strb	r2, [r3, #0]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	0a1b      	lsrs	r3, r3, #8
 80089ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	1c5a      	adds	r2, r3, #1
 80089b2:	607a      	str	r2, [r7, #4]
 80089b4:	683a      	ldr	r2, [r7, #0]
 80089b6:	b2d2      	uxtb	r2, r2
 80089b8:	701a      	strb	r2, [r3, #0]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	0a1b      	lsrs	r3, r3, #8
 80089be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	1c5a      	adds	r2, r3, #1
 80089c4:	607a      	str	r2, [r7, #4]
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	b2d2      	uxtb	r2, r2
 80089ca:	701a      	strb	r2, [r3, #0]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	0a1b      	lsrs	r3, r3, #8
 80089d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	1c5a      	adds	r2, r3, #1
 80089d6:	607a      	str	r2, [r7, #4]
 80089d8:	683a      	ldr	r2, [r7, #0]
 80089da:	b2d2      	uxtb	r2, r2
 80089dc:	701a      	strb	r2, [r3, #0]
}
 80089de:	bf00      	nop
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80089ea:	b480      	push	{r7}
 80089ec:	b087      	sub	sp, #28
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	60f8      	str	r0, [r7, #12]
 80089f2:	60b9      	str	r1, [r7, #8]
 80089f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00d      	beq.n	8008a20 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	1c53      	adds	r3, r2, #1
 8008a08:	613b      	str	r3, [r7, #16]
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	1c59      	adds	r1, r3, #1
 8008a0e:	6179      	str	r1, [r7, #20]
 8008a10:	7812      	ldrb	r2, [r2, #0]
 8008a12:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	607b      	str	r3, [r7, #4]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d1f1      	bne.n	8008a04 <mem_cpy+0x1a>
	}
}
 8008a20:	bf00      	nop
 8008a22:	371c      	adds	r7, #28
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008a2c:	b480      	push	{r7}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	1c5a      	adds	r2, r3, #1
 8008a40:	617a      	str	r2, [r7, #20]
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	b2d2      	uxtb	r2, r2
 8008a46:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	607b      	str	r3, [r7, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1f3      	bne.n	8008a3c <mem_set+0x10>
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop
 8008a58:	371c      	adds	r7, #28
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008a62:	b480      	push	{r7}
 8008a64:	b089      	sub	sp, #36	@ 0x24
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	60f8      	str	r0, [r7, #12]
 8008a6a:	60b9      	str	r1, [r7, #8]
 8008a6c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	61fb      	str	r3, [r7, #28]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008a76:	2300      	movs	r3, #0
 8008a78:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	61fa      	str	r2, [r7, #28]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	4619      	mov	r1, r3
 8008a84:	69bb      	ldr	r3, [r7, #24]
 8008a86:	1c5a      	adds	r2, r3, #1
 8008a88:	61ba      	str	r2, [r7, #24]
 8008a8a:	781b      	ldrb	r3, [r3, #0]
 8008a8c:	1acb      	subs	r3, r1, r3
 8008a8e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	607b      	str	r3, [r7, #4]
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <mem_cmp+0x40>
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d0eb      	beq.n	8008a7a <mem_cmp+0x18>

	return r;
 8008aa2:	697b      	ldr	r3, [r7, #20]
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3724      	adds	r7, #36	@ 0x24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008aba:	e002      	b.n	8008ac2 <chk_chr+0x12>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	607b      	str	r3, [r7, #4]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d005      	beq.n	8008ad6 <chk_chr+0x26>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d1f2      	bne.n	8008abc <chk_chr+0xc>
	return *str;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	781b      	ldrb	r3, [r3, #0]
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	370c      	adds	r7, #12
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
	...

08008ae8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008af2:	2300      	movs	r3, #0
 8008af4:	60bb      	str	r3, [r7, #8]
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	60fb      	str	r3, [r7, #12]
 8008afa:	e029      	b.n	8008b50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008afc:	4a27      	ldr	r2, [pc, #156]	@ (8008b9c <chk_lock+0xb4>)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	4413      	add	r3, r2
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d01d      	beq.n	8008b46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008b0a:	4a24      	ldr	r2, [pc, #144]	@ (8008b9c <chk_lock+0xb4>)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	011b      	lsls	r3, r3, #4
 8008b10:	4413      	add	r3, r2
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d116      	bne.n	8008b4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8008b9c <chk_lock+0xb4>)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	011b      	lsls	r3, r3, #4
 8008b22:	4413      	add	r3, r2
 8008b24:	3304      	adds	r3, #4
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d10c      	bne.n	8008b4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008b30:	4a1a      	ldr	r2, [pc, #104]	@ (8008b9c <chk_lock+0xb4>)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	011b      	lsls	r3, r3, #4
 8008b36:	4413      	add	r3, r2
 8008b38:	3308      	adds	r3, #8
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d102      	bne.n	8008b4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008b44:	e007      	b.n	8008b56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008b46:	2301      	movs	r3, #1
 8008b48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	60fb      	str	r3, [r7, #12]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d9d2      	bls.n	8008afc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d109      	bne.n	8008b70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d102      	bne.n	8008b68 <chk_lock+0x80>
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d101      	bne.n	8008b6c <chk_lock+0x84>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	e010      	b.n	8008b8e <chk_lock+0xa6>
 8008b6c:	2312      	movs	r3, #18
 8008b6e:	e00e      	b.n	8008b8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d108      	bne.n	8008b88 <chk_lock+0xa0>
 8008b76:	4a09      	ldr	r2, [pc, #36]	@ (8008b9c <chk_lock+0xb4>)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	011b      	lsls	r3, r3, #4
 8008b7c:	4413      	add	r3, r2
 8008b7e:	330c      	adds	r3, #12
 8008b80:	881b      	ldrh	r3, [r3, #0]
 8008b82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b86:	d101      	bne.n	8008b8c <chk_lock+0xa4>
 8008b88:	2310      	movs	r3, #16
 8008b8a:	e000      	b.n	8008b8e <chk_lock+0xa6>
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3714      	adds	r7, #20
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	200006d0 	.word	0x200006d0

08008ba0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	607b      	str	r3, [r7, #4]
 8008baa:	e002      	b.n	8008bb2 <enq_lock+0x12>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	607b      	str	r3, [r7, #4]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d806      	bhi.n	8008bc6 <enq_lock+0x26>
 8008bb8:	4a09      	ldr	r2, [pc, #36]	@ (8008be0 <enq_lock+0x40>)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	011b      	lsls	r3, r3, #4
 8008bbe:	4413      	add	r3, r2
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1f2      	bne.n	8008bac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2b02      	cmp	r3, #2
 8008bca:	bf14      	ite	ne
 8008bcc:	2301      	movne	r3, #1
 8008bce:	2300      	moveq	r3, #0
 8008bd0:	b2db      	uxtb	r3, r3
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	200006d0 	.word	0x200006d0

08008be4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b085      	sub	sp, #20
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	e01f      	b.n	8008c34 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008bf4:	4a41      	ldr	r2, [pc, #260]	@ (8008cfc <inc_lock+0x118>)
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	011b      	lsls	r3, r3, #4
 8008bfa:	4413      	add	r3, r2
 8008bfc:	681a      	ldr	r2, [r3, #0]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d113      	bne.n	8008c2e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008c06:	4a3d      	ldr	r2, [pc, #244]	@ (8008cfc <inc_lock+0x118>)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	011b      	lsls	r3, r3, #4
 8008c0c:	4413      	add	r3, r2
 8008c0e:	3304      	adds	r3, #4
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d109      	bne.n	8008c2e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008c1a:	4a38      	ldr	r2, [pc, #224]	@ (8008cfc <inc_lock+0x118>)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	011b      	lsls	r3, r3, #4
 8008c20:	4413      	add	r3, r2
 8008c22:	3308      	adds	r3, #8
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d006      	beq.n	8008c3c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	3301      	adds	r3, #1
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d9dc      	bls.n	8008bf4 <inc_lock+0x10>
 8008c3a:	e000      	b.n	8008c3e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008c3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d132      	bne.n	8008caa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008c44:	2300      	movs	r3, #0
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	e002      	b.n	8008c50 <inc_lock+0x6c>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	60fb      	str	r3, [r7, #12]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b01      	cmp	r3, #1
 8008c54:	d806      	bhi.n	8008c64 <inc_lock+0x80>
 8008c56:	4a29      	ldr	r2, [pc, #164]	@ (8008cfc <inc_lock+0x118>)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	4413      	add	r3, r2
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1f2      	bne.n	8008c4a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d101      	bne.n	8008c6e <inc_lock+0x8a>
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	e040      	b.n	8008cf0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	4922      	ldr	r1, [pc, #136]	@ (8008cfc <inc_lock+0x118>)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	011b      	lsls	r3, r3, #4
 8008c78:	440b      	add	r3, r1
 8008c7a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	689a      	ldr	r2, [r3, #8]
 8008c80:	491e      	ldr	r1, [pc, #120]	@ (8008cfc <inc_lock+0x118>)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	011b      	lsls	r3, r3, #4
 8008c86:	440b      	add	r3, r1
 8008c88:	3304      	adds	r3, #4
 8008c8a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	695a      	ldr	r2, [r3, #20]
 8008c90:	491a      	ldr	r1, [pc, #104]	@ (8008cfc <inc_lock+0x118>)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	011b      	lsls	r3, r3, #4
 8008c96:	440b      	add	r3, r1
 8008c98:	3308      	adds	r3, #8
 8008c9a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008c9c:	4a17      	ldr	r2, [pc, #92]	@ (8008cfc <inc_lock+0x118>)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	011b      	lsls	r3, r3, #4
 8008ca2:	4413      	add	r3, r2
 8008ca4:	330c      	adds	r3, #12
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d009      	beq.n	8008cc4 <inc_lock+0xe0>
 8008cb0:	4a12      	ldr	r2, [pc, #72]	@ (8008cfc <inc_lock+0x118>)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	011b      	lsls	r3, r3, #4
 8008cb6:	4413      	add	r3, r2
 8008cb8:	330c      	adds	r3, #12
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d001      	beq.n	8008cc4 <inc_lock+0xe0>
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	e015      	b.n	8008cf0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d108      	bne.n	8008cdc <inc_lock+0xf8>
 8008cca:	4a0c      	ldr	r2, [pc, #48]	@ (8008cfc <inc_lock+0x118>)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	011b      	lsls	r3, r3, #4
 8008cd0:	4413      	add	r3, r2
 8008cd2:	330c      	adds	r3, #12
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	e001      	b.n	8008ce0 <inc_lock+0xfc>
 8008cdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ce0:	4906      	ldr	r1, [pc, #24]	@ (8008cfc <inc_lock+0x118>)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	011b      	lsls	r3, r3, #4
 8008ce6:	440b      	add	r3, r1
 8008ce8:	330c      	adds	r3, #12
 8008cea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	3301      	adds	r3, #1
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3714      	adds	r7, #20
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	200006d0 	.word	0x200006d0

08008d00 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	607b      	str	r3, [r7, #4]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d825      	bhi.n	8008d60 <dec_lock+0x60>
		n = Files[i].ctr;
 8008d14:	4a17      	ldr	r2, [pc, #92]	@ (8008d74 <dec_lock+0x74>)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	011b      	lsls	r3, r3, #4
 8008d1a:	4413      	add	r3, r2
 8008d1c:	330c      	adds	r3, #12
 8008d1e:	881b      	ldrh	r3, [r3, #0]
 8008d20:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008d22:	89fb      	ldrh	r3, [r7, #14]
 8008d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d28:	d101      	bne.n	8008d2e <dec_lock+0x2e>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008d2e:	89fb      	ldrh	r3, [r7, #14]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <dec_lock+0x3a>
 8008d34:	89fb      	ldrh	r3, [r7, #14]
 8008d36:	3b01      	subs	r3, #1
 8008d38:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8008d74 <dec_lock+0x74>)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	011b      	lsls	r3, r3, #4
 8008d40:	4413      	add	r3, r2
 8008d42:	330c      	adds	r3, #12
 8008d44:	89fa      	ldrh	r2, [r7, #14]
 8008d46:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008d48:	89fb      	ldrh	r3, [r7, #14]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d105      	bne.n	8008d5a <dec_lock+0x5a>
 8008d4e:	4a09      	ldr	r2, [pc, #36]	@ (8008d74 <dec_lock+0x74>)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	011b      	lsls	r3, r3, #4
 8008d54:	4413      	add	r3, r2
 8008d56:	2200      	movs	r2, #0
 8008d58:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	737b      	strb	r3, [r7, #13]
 8008d5e:	e001      	b.n	8008d64 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008d60:	2302      	movs	r3, #2
 8008d62:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008d64:	7b7b      	ldrb	r3, [r7, #13]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	200006d0 	.word	0x200006d0

08008d78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008d80:	2300      	movs	r3, #0
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	e010      	b.n	8008da8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008d86:	4a0d      	ldr	r2, [pc, #52]	@ (8008dbc <clear_lock+0x44>)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	011b      	lsls	r3, r3, #4
 8008d8c:	4413      	add	r3, r2
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d105      	bne.n	8008da2 <clear_lock+0x2a>
 8008d96:	4a09      	ldr	r2, [pc, #36]	@ (8008dbc <clear_lock+0x44>)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	011b      	lsls	r3, r3, #4
 8008d9c:	4413      	add	r3, r2
 8008d9e:	2200      	movs	r2, #0
 8008da0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	3301      	adds	r3, #1
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d9eb      	bls.n	8008d86 <clear_lock+0xe>
	}
}
 8008dae:	bf00      	nop
 8008db0:	bf00      	nop
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr
 8008dbc:	200006d0 	.word	0x200006d0

08008dc0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	78db      	ldrb	r3, [r3, #3]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d034      	beq.n	8008e3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dd8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	7858      	ldrb	r0, [r3, #1]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008de4:	2301      	movs	r3, #1
 8008de6:	697a      	ldr	r2, [r7, #20]
 8008de8:	f7ff fd3e 	bl	8008868 <disk_write>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d002      	beq.n	8008df8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	73fb      	strb	r3, [r7, #15]
 8008df6:	e022      	b.n	8008e3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a1b      	ldr	r3, [r3, #32]
 8008e02:	697a      	ldr	r2, [r7, #20]
 8008e04:	1ad2      	subs	r2, r2, r3
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d217      	bcs.n	8008e3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	789b      	ldrb	r3, [r3, #2]
 8008e12:	613b      	str	r3, [r7, #16]
 8008e14:	e010      	b.n	8008e38 <sync_window+0x78>
					wsect += fs->fsize;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	4413      	add	r3, r2
 8008e1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	7858      	ldrb	r0, [r3, #1]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	f7ff fd1b 	bl	8008868 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	3b01      	subs	r3, #1
 8008e36:	613b      	str	r3, [r7, #16]
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d8eb      	bhi.n	8008e16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3718      	adds	r7, #24
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b084      	sub	sp, #16
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8008e52:	2300      	movs	r3, #0
 8008e54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d01b      	beq.n	8008e98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f7ff ffad 	bl	8008dc0 <sync_window>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d113      	bne.n	8008e98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	7858      	ldrb	r0, [r3, #1]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	683a      	ldr	r2, [r7, #0]
 8008e7e:	f7ff fcd3 	bl	8008828 <disk_read>
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d004      	beq.n	8008e92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008e88:	f04f 33ff 	mov.w	r3, #4294967295
 8008e8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008e8e:	2301      	movs	r3, #1
 8008e90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7ff ff87 	bl	8008dc0 <sync_window>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d158      	bne.n	8008f6e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	2b03      	cmp	r3, #3
 8008ec2:	d148      	bne.n	8008f56 <sync_fs+0xb2>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	791b      	ldrb	r3, [r3, #4]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d144      	bne.n	8008f56 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	3330      	adds	r3, #48	@ 0x30
 8008ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ed4:	2100      	movs	r1, #0
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff fda8 	bl	8008a2c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3330      	adds	r3, #48	@ 0x30
 8008ee0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008ee4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7ff fd37 	bl	800895c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3330      	adds	r3, #48	@ 0x30
 8008ef2:	4921      	ldr	r1, [pc, #132]	@ (8008f78 <sync_fs+0xd4>)
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7ff fd4c 	bl	8008992 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	3330      	adds	r3, #48	@ 0x30
 8008efe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008f02:	491e      	ldr	r1, [pc, #120]	@ (8008f7c <sync_fs+0xd8>)
 8008f04:	4618      	mov	r0, r3
 8008f06:	f7ff fd44 	bl	8008992 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	3330      	adds	r3, #48	@ 0x30
 8008f0e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	4619      	mov	r1, r3
 8008f18:	4610      	mov	r0, r2
 8008f1a:	f7ff fd3a 	bl	8008992 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	3330      	adds	r3, #48	@ 0x30
 8008f22:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	f7ff fd30 	bl	8008992 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	69db      	ldr	r3, [r3, #28]
 8008f36:	1c5a      	adds	r2, r3, #1
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	7858      	ldrb	r0, [r3, #1]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	f7ff fc8c 	bl	8008868 <disk_write>
			fs->fsi_flag = 0;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	785b      	ldrb	r3, [r3, #1]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	2100      	movs	r1, #0
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff fca2 	bl	80088a8 <disk_ioctl>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <sync_fs+0xca>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	41615252 	.word	0x41615252
 8008f7c:	61417272 	.word	0x61417272

08008f80 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	3b02      	subs	r3, #2
 8008f8e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	695b      	ldr	r3, [r3, #20]
 8008f94:	3b02      	subs	r3, #2
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d301      	bcc.n	8008fa0 <clust2sect+0x20>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	e008      	b.n	8008fb2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	895b      	ldrh	r3, [r3, #10]
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	fb03 f202 	mul.w	r2, r3, r2
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fb0:	4413      	add	r3, r2
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	370c      	adds	r7, #12
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr

08008fbe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b086      	sub	sp, #24
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
 8008fc6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d904      	bls.n	8008fde <get_fat+0x20>
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	695b      	ldr	r3, [r3, #20]
 8008fd8:	683a      	ldr	r2, [r7, #0]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d302      	bcc.n	8008fe4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008fde:	2301      	movs	r3, #1
 8008fe0:	617b      	str	r3, [r7, #20]
 8008fe2:	e08e      	b.n	8009102 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	2b03      	cmp	r3, #3
 8008ff0:	d061      	beq.n	80090b6 <get_fat+0xf8>
 8008ff2:	2b03      	cmp	r3, #3
 8008ff4:	dc7b      	bgt.n	80090ee <get_fat+0x130>
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d002      	beq.n	8009000 <get_fat+0x42>
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d041      	beq.n	8009082 <get_fat+0xc4>
 8008ffe:	e076      	b.n	80090ee <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	085b      	lsrs	r3, r3, #1
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	4413      	add	r3, r2
 800900c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	6a1a      	ldr	r2, [r3, #32]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	0a5b      	lsrs	r3, r3, #9
 8009016:	4413      	add	r3, r2
 8009018:	4619      	mov	r1, r3
 800901a:	6938      	ldr	r0, [r7, #16]
 800901c:	f7ff ff14 	bl	8008e48 <move_window>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d166      	bne.n	80090f4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	1c5a      	adds	r2, r3, #1
 800902a:	60fa      	str	r2, [r7, #12]
 800902c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009030:	693a      	ldr	r2, [r7, #16]
 8009032:	4413      	add	r3, r2
 8009034:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009038:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	6a1a      	ldr	r2, [r3, #32]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	0a5b      	lsrs	r3, r3, #9
 8009042:	4413      	add	r3, r2
 8009044:	4619      	mov	r1, r3
 8009046:	6938      	ldr	r0, [r7, #16]
 8009048:	f7ff fefe 	bl	8008e48 <move_window>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d152      	bne.n	80090f8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009058:	693a      	ldr	r2, [r7, #16]
 800905a:	4413      	add	r3, r2
 800905c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009060:	021b      	lsls	r3, r3, #8
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	4313      	orrs	r3, r2
 8009066:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	f003 0301 	and.w	r3, r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <get_fat+0xba>
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	091b      	lsrs	r3, r3, #4
 8009076:	e002      	b.n	800907e <get_fat+0xc0>
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800907e:	617b      	str	r3, [r7, #20]
			break;
 8009080:	e03f      	b.n	8009102 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	6a1a      	ldr	r2, [r3, #32]
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	0a1b      	lsrs	r3, r3, #8
 800908a:	4413      	add	r3, r2
 800908c:	4619      	mov	r1, r3
 800908e:	6938      	ldr	r0, [r7, #16]
 8009090:	f7ff feda 	bl	8008e48 <move_window>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d130      	bne.n	80090fc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	005b      	lsls	r3, r3, #1
 80090a4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80090a8:	4413      	add	r3, r2
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7ff fc1a 	bl	80088e4 <ld_word>
 80090b0:	4603      	mov	r3, r0
 80090b2:	617b      	str	r3, [r7, #20]
			break;
 80090b4:	e025      	b.n	8009102 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	6a1a      	ldr	r2, [r3, #32]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	09db      	lsrs	r3, r3, #7
 80090be:	4413      	add	r3, r2
 80090c0:	4619      	mov	r1, r3
 80090c2:	6938      	ldr	r0, [r7, #16]
 80090c4:	f7ff fec0 	bl	8008e48 <move_window>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d118      	bne.n	8009100 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	009b      	lsls	r3, r3, #2
 80090d8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80090dc:	4413      	add	r3, r2
 80090de:	4618      	mov	r0, r3
 80090e0:	f7ff fc19 	bl	8008916 <ld_dword>
 80090e4:	4603      	mov	r3, r0
 80090e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80090ea:	617b      	str	r3, [r7, #20]
			break;
 80090ec:	e009      	b.n	8009102 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80090ee:	2301      	movs	r3, #1
 80090f0:	617b      	str	r3, [r7, #20]
 80090f2:	e006      	b.n	8009102 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090f4:	bf00      	nop
 80090f6:	e004      	b.n	8009102 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090f8:	bf00      	nop
 80090fa:	e002      	b.n	8009102 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80090fc:	bf00      	nop
 80090fe:	e000      	b.n	8009102 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009100:	bf00      	nop
		}
	}

	return val;
 8009102:	697b      	ldr	r3, [r7, #20]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3718      	adds	r7, #24
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800910c:	b590      	push	{r4, r7, lr}
 800910e:	b089      	sub	sp, #36	@ 0x24
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009118:	2302      	movs	r3, #2
 800911a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	2b01      	cmp	r3, #1
 8009120:	f240 80d9 	bls.w	80092d6 <put_fat+0x1ca>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	429a      	cmp	r2, r3
 800912c:	f080 80d3 	bcs.w	80092d6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	2b03      	cmp	r3, #3
 8009136:	f000 8096 	beq.w	8009266 <put_fat+0x15a>
 800913a:	2b03      	cmp	r3, #3
 800913c:	f300 80cb 	bgt.w	80092d6 <put_fat+0x1ca>
 8009140:	2b01      	cmp	r3, #1
 8009142:	d002      	beq.n	800914a <put_fat+0x3e>
 8009144:	2b02      	cmp	r3, #2
 8009146:	d06e      	beq.n	8009226 <put_fat+0x11a>
 8009148:	e0c5      	b.n	80092d6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	61bb      	str	r3, [r7, #24]
 800914e:	69bb      	ldr	r3, [r7, #24]
 8009150:	085b      	lsrs	r3, r3, #1
 8009152:	69ba      	ldr	r2, [r7, #24]
 8009154:	4413      	add	r3, r2
 8009156:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6a1a      	ldr	r2, [r3, #32]
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	0a5b      	lsrs	r3, r3, #9
 8009160:	4413      	add	r3, r2
 8009162:	4619      	mov	r1, r3
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f7ff fe6f 	bl	8008e48 <move_window>
 800916a:	4603      	mov	r3, r0
 800916c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800916e:	7ffb      	ldrb	r3, [r7, #31]
 8009170:	2b00      	cmp	r3, #0
 8009172:	f040 80a9 	bne.w	80092c8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	1c59      	adds	r1, r3, #1
 8009180:	61b9      	str	r1, [r7, #24]
 8009182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009186:	4413      	add	r3, r2
 8009188:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	f003 0301 	and.w	r3, r3, #1
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00d      	beq.n	80091b0 <put_fat+0xa4>
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	b25b      	sxtb	r3, r3
 800919a:	f003 030f 	and.w	r3, r3, #15
 800919e:	b25a      	sxtb	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	b25b      	sxtb	r3, r3
 80091a4:	011b      	lsls	r3, r3, #4
 80091a6:	b25b      	sxtb	r3, r3
 80091a8:	4313      	orrs	r3, r2
 80091aa:	b25b      	sxtb	r3, r3
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	e001      	b.n	80091b4 <put_fat+0xa8>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2201      	movs	r2, #1
 80091bc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6a1a      	ldr	r2, [r3, #32]
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	0a5b      	lsrs	r3, r3, #9
 80091c6:	4413      	add	r3, r2
 80091c8:	4619      	mov	r1, r3
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f7ff fe3c 	bl	8008e48 <move_window>
 80091d0:	4603      	mov	r3, r0
 80091d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80091d4:	7ffb      	ldrb	r3, [r7, #31]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d178      	bne.n	80092cc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80091e0:	69bb      	ldr	r3, [r7, #24]
 80091e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091e6:	4413      	add	r3, r2
 80091e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d003      	beq.n	80091fc <put_fat+0xf0>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	091b      	lsrs	r3, r3, #4
 80091f8:	b2db      	uxtb	r3, r3
 80091fa:	e00e      	b.n	800921a <put_fat+0x10e>
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	b25b      	sxtb	r3, r3
 8009202:	f023 030f 	bic.w	r3, r3, #15
 8009206:	b25a      	sxtb	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	0a1b      	lsrs	r3, r3, #8
 800920c:	b25b      	sxtb	r3, r3
 800920e:	f003 030f 	and.w	r3, r3, #15
 8009212:	b25b      	sxtb	r3, r3
 8009214:	4313      	orrs	r3, r2
 8009216:	b25b      	sxtb	r3, r3
 8009218:	b2db      	uxtb	r3, r3
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2201      	movs	r2, #1
 8009222:	70da      	strb	r2, [r3, #3]
			break;
 8009224:	e057      	b.n	80092d6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6a1a      	ldr	r2, [r3, #32]
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	0a1b      	lsrs	r3, r3, #8
 800922e:	4413      	add	r3, r2
 8009230:	4619      	mov	r1, r3
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f7ff fe08 	bl	8008e48 <move_window>
 8009238:	4603      	mov	r3, r0
 800923a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800923c:	7ffb      	ldrb	r3, [r7, #31]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d146      	bne.n	80092d0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8009250:	4413      	add	r3, r2
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	b292      	uxth	r2, r2
 8009256:	4611      	mov	r1, r2
 8009258:	4618      	mov	r0, r3
 800925a:	f7ff fb7f 	bl	800895c <st_word>
			fs->wflag = 1;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2201      	movs	r2, #1
 8009262:	70da      	strb	r2, [r3, #3]
			break;
 8009264:	e037      	b.n	80092d6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6a1a      	ldr	r2, [r3, #32]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	09db      	lsrs	r3, r3, #7
 800926e:	4413      	add	r3, r2
 8009270:	4619      	mov	r1, r3
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f7ff fde8 	bl	8008e48 <move_window>
 8009278:	4603      	mov	r3, r0
 800927a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800927c:	7ffb      	ldrb	r3, [r7, #31]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d128      	bne.n	80092d4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8009296:	4413      	add	r3, r2
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff fb3c 	bl	8008916 <ld_dword>
 800929e:	4603      	mov	r3, r0
 80092a0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80092a4:	4323      	orrs	r3, r4
 80092a6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80092b6:	4413      	add	r3, r2
 80092b8:	6879      	ldr	r1, [r7, #4]
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff fb69 	bl	8008992 <st_dword>
			fs->wflag = 1;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2201      	movs	r2, #1
 80092c4:	70da      	strb	r2, [r3, #3]
			break;
 80092c6:	e006      	b.n	80092d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80092c8:	bf00      	nop
 80092ca:	e004      	b.n	80092d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80092cc:	bf00      	nop
 80092ce:	e002      	b.n	80092d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80092d0:	bf00      	nop
 80092d2:	e000      	b.n	80092d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80092d4:	bf00      	nop
		}
	}
	return res;
 80092d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3724      	adds	r7, #36	@ 0x24
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd90      	pop	{r4, r7, pc}

080092e0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b088      	sub	sp, #32
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	2b01      	cmp	r3, #1
 80092fa:	d904      	bls.n	8009306 <remove_chain+0x26>
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	695b      	ldr	r3, [r3, #20]
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	429a      	cmp	r2, r3
 8009304:	d301      	bcc.n	800930a <remove_chain+0x2a>
 8009306:	2302      	movs	r3, #2
 8009308:	e04b      	b.n	80093a2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00c      	beq.n	800932a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009310:	f04f 32ff 	mov.w	r2, #4294967295
 8009314:	6879      	ldr	r1, [r7, #4]
 8009316:	69b8      	ldr	r0, [r7, #24]
 8009318:	f7ff fef8 	bl	800910c <put_fat>
 800931c:	4603      	mov	r3, r0
 800931e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009320:	7ffb      	ldrb	r3, [r7, #31]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d001      	beq.n	800932a <remove_chain+0x4a>
 8009326:	7ffb      	ldrb	r3, [r7, #31]
 8009328:	e03b      	b.n	80093a2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800932a:	68b9      	ldr	r1, [r7, #8]
 800932c:	68f8      	ldr	r0, [r7, #12]
 800932e:	f7ff fe46 	bl	8008fbe <get_fat>
 8009332:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d031      	beq.n	800939e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d101      	bne.n	8009344 <remove_chain+0x64>
 8009340:	2302      	movs	r3, #2
 8009342:	e02e      	b.n	80093a2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934a:	d101      	bne.n	8009350 <remove_chain+0x70>
 800934c:	2301      	movs	r3, #1
 800934e:	e028      	b.n	80093a2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009350:	2200      	movs	r2, #0
 8009352:	68b9      	ldr	r1, [r7, #8]
 8009354:	69b8      	ldr	r0, [r7, #24]
 8009356:	f7ff fed9 	bl	800910c <put_fat>
 800935a:	4603      	mov	r3, r0
 800935c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800935e:	7ffb      	ldrb	r3, [r7, #31]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <remove_chain+0x88>
 8009364:	7ffb      	ldrb	r3, [r7, #31]
 8009366:	e01c      	b.n	80093a2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	691a      	ldr	r2, [r3, #16]
 800936c:	69bb      	ldr	r3, [r7, #24]
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	3b02      	subs	r3, #2
 8009372:	429a      	cmp	r2, r3
 8009374:	d20b      	bcs.n	800938e <remove_chain+0xae>
			fs->free_clst++;
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	791b      	ldrb	r3, [r3, #4]
 8009384:	f043 0301 	orr.w	r3, r3, #1
 8009388:	b2da      	uxtb	r2, r3
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009392:	69bb      	ldr	r3, [r7, #24]
 8009394:	695b      	ldr	r3, [r3, #20]
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	429a      	cmp	r2, r3
 800939a:	d3c6      	bcc.n	800932a <remove_chain+0x4a>
 800939c:	e000      	b.n	80093a0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800939e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3720      	adds	r7, #32
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}

080093aa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80093aa:	b580      	push	{r7, lr}
 80093ac:	b088      	sub	sp, #32
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10d      	bne.n	80093dc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80093c6:	69bb      	ldr	r3, [r7, #24]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d004      	beq.n	80093d6 <create_chain+0x2c>
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	695b      	ldr	r3, [r3, #20]
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d31b      	bcc.n	800940e <create_chain+0x64>
 80093d6:	2301      	movs	r3, #1
 80093d8:	61bb      	str	r3, [r7, #24]
 80093da:	e018      	b.n	800940e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f7ff fded 	bl	8008fbe <get_fat>
 80093e4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d801      	bhi.n	80093f0 <create_chain+0x46>
 80093ec:	2301      	movs	r3, #1
 80093ee:	e070      	b.n	80094d2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f6:	d101      	bne.n	80093fc <create_chain+0x52>
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	e06a      	b.n	80094d2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	68fa      	ldr	r2, [r7, #12]
 8009402:	429a      	cmp	r2, r3
 8009404:	d201      	bcs.n	800940a <create_chain+0x60>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	e063      	b.n	80094d2 <create_chain+0x128>
		scl = clst;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	3301      	adds	r3, #1
 8009416:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	695b      	ldr	r3, [r3, #20]
 800941c:	69fa      	ldr	r2, [r7, #28]
 800941e:	429a      	cmp	r2, r3
 8009420:	d307      	bcc.n	8009432 <create_chain+0x88>
				ncl = 2;
 8009422:	2302      	movs	r3, #2
 8009424:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009426:	69fa      	ldr	r2, [r7, #28]
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	429a      	cmp	r2, r3
 800942c:	d901      	bls.n	8009432 <create_chain+0x88>
 800942e:	2300      	movs	r3, #0
 8009430:	e04f      	b.n	80094d2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009432:	69f9      	ldr	r1, [r7, #28]
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f7ff fdc2 	bl	8008fbe <get_fat>
 800943a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d00e      	beq.n	8009460 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d003      	beq.n	8009450 <create_chain+0xa6>
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800944e:	d101      	bne.n	8009454 <create_chain+0xaa>
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	e03e      	b.n	80094d2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009454:	69fa      	ldr	r2, [r7, #28]
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	429a      	cmp	r2, r3
 800945a:	d1da      	bne.n	8009412 <create_chain+0x68>
 800945c:	2300      	movs	r3, #0
 800945e:	e038      	b.n	80094d2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009460:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009462:	f04f 32ff 	mov.w	r2, #4294967295
 8009466:	69f9      	ldr	r1, [r7, #28]
 8009468:	6938      	ldr	r0, [r7, #16]
 800946a:	f7ff fe4f 	bl	800910c <put_fat>
 800946e:	4603      	mov	r3, r0
 8009470:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d109      	bne.n	800948c <create_chain+0xe2>
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d006      	beq.n	800948c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800947e:	69fa      	ldr	r2, [r7, #28]
 8009480:	6839      	ldr	r1, [r7, #0]
 8009482:	6938      	ldr	r0, [r7, #16]
 8009484:	f7ff fe42 	bl	800910c <put_fat>
 8009488:	4603      	mov	r3, r0
 800948a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800948c:	7dfb      	ldrb	r3, [r7, #23]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d116      	bne.n	80094c0 <create_chain+0x116>
		fs->last_clst = ncl;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	69fa      	ldr	r2, [r7, #28]
 8009496:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	691a      	ldr	r2, [r3, #16]
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	3b02      	subs	r3, #2
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d804      	bhi.n	80094b0 <create_chain+0x106>
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	1e5a      	subs	r2, r3, #1
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	791b      	ldrb	r3, [r3, #4]
 80094b4:	f043 0301 	orr.w	r3, r3, #1
 80094b8:	b2da      	uxtb	r2, r3
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	711a      	strb	r2, [r3, #4]
 80094be:	e007      	b.n	80094d0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d102      	bne.n	80094cc <create_chain+0x122>
 80094c6:	f04f 33ff 	mov.w	r3, #4294967295
 80094ca:	e000      	b.n	80094ce <create_chain+0x124>
 80094cc:	2301      	movs	r3, #1
 80094ce:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80094d0:	69fb      	ldr	r3, [r7, #28]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3720      	adds	r7, #32
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80094da:	b480      	push	{r7}
 80094dc:	b087      	sub	sp, #28
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
 80094e2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ee:	3304      	adds	r3, #4
 80094f0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	0a5b      	lsrs	r3, r3, #9
 80094f6:	68fa      	ldr	r2, [r7, #12]
 80094f8:	8952      	ldrh	r2, [r2, #10]
 80094fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80094fe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	1d1a      	adds	r2, r3, #4
 8009504:	613a      	str	r2, [r7, #16]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d101      	bne.n	8009514 <clmt_clust+0x3a>
 8009510:	2300      	movs	r3, #0
 8009512:	e010      	b.n	8009536 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009514:	697a      	ldr	r2, [r7, #20]
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	429a      	cmp	r2, r3
 800951a:	d307      	bcc.n	800952c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800951c:	697a      	ldr	r2, [r7, #20]
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	617b      	str	r3, [r7, #20]
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	3304      	adds	r3, #4
 8009528:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800952a:	e7e9      	b.n	8009500 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800952c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	4413      	add	r3, r2
}
 8009536:	4618      	mov	r0, r3
 8009538:	371c      	adds	r7, #28
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b086      	sub	sp, #24
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009558:	d204      	bcs.n	8009564 <dir_sdi+0x22>
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	f003 031f 	and.w	r3, r3, #31
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009564:	2302      	movs	r3, #2
 8009566:	e063      	b.n	8009630 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	683a      	ldr	r2, [r7, #0]
 800956c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d106      	bne.n	8009588 <dir_sdi+0x46>
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	2b02      	cmp	r3, #2
 8009580:	d902      	bls.n	8009588 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009586:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10c      	bne.n	80095a8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	095b      	lsrs	r3, r3, #5
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	8912      	ldrh	r2, [r2, #8]
 8009596:	4293      	cmp	r3, r2
 8009598:	d301      	bcc.n	800959e <dir_sdi+0x5c>
 800959a:	2302      	movs	r3, #2
 800959c:	e048      	b.n	8009630 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	61da      	str	r2, [r3, #28]
 80095a6:	e029      	b.n	80095fc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	895b      	ldrh	r3, [r3, #10]
 80095ac:	025b      	lsls	r3, r3, #9
 80095ae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80095b0:	e019      	b.n	80095e6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6979      	ldr	r1, [r7, #20]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7ff fd01 	bl	8008fbe <get_fat>
 80095bc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c4:	d101      	bne.n	80095ca <dir_sdi+0x88>
 80095c6:	2301      	movs	r3, #1
 80095c8:	e032      	b.n	8009630 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d904      	bls.n	80095da <dir_sdi+0x98>
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	695b      	ldr	r3, [r3, #20]
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d301      	bcc.n	80095de <dir_sdi+0x9c>
 80095da:	2302      	movs	r3, #2
 80095dc:	e028      	b.n	8009630 <dir_sdi+0xee>
			ofs -= csz;
 80095de:	683a      	ldr	r2, [r7, #0]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	1ad3      	subs	r3, r2, r3
 80095e4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d2e1      	bcs.n	80095b2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80095ee:	6979      	ldr	r1, [r7, #20]
 80095f0:	6938      	ldr	r0, [r7, #16]
 80095f2:	f7ff fcc5 	bl	8008f80 <clust2sect>
 80095f6:	4602      	mov	r2, r0
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	697a      	ldr	r2, [r7, #20]
 8009600:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	69db      	ldr	r3, [r3, #28]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <dir_sdi+0xcc>
 800960a:	2302      	movs	r3, #2
 800960c:	e010      	b.n	8009630 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	69da      	ldr	r2, [r3, #28]
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	0a5b      	lsrs	r3, r3, #9
 8009616:	441a      	add	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009628:	441a      	add	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3718      	adds	r7, #24
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	3320      	adds	r3, #32
 800964e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	69db      	ldr	r3, [r3, #28]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d003      	beq.n	8009660 <dir_next+0x28>
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800965e:	d301      	bcc.n	8009664 <dir_next+0x2c>
 8009660:	2304      	movs	r3, #4
 8009662:	e0aa      	b.n	80097ba <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800966a:	2b00      	cmp	r3, #0
 800966c:	f040 8098 	bne.w	80097a0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	699b      	ldr	r3, [r3, #24]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10b      	bne.n	800969a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	095b      	lsrs	r3, r3, #5
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	8912      	ldrh	r2, [r2, #8]
 800968a:	4293      	cmp	r3, r2
 800968c:	f0c0 8088 	bcc.w	80097a0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	61da      	str	r2, [r3, #28]
 8009696:	2304      	movs	r3, #4
 8009698:	e08f      	b.n	80097ba <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	0a5b      	lsrs	r3, r3, #9
 800969e:	68fa      	ldr	r2, [r7, #12]
 80096a0:	8952      	ldrh	r2, [r2, #10]
 80096a2:	3a01      	subs	r2, #1
 80096a4:	4013      	ands	r3, r2
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d17a      	bne.n	80097a0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	4619      	mov	r1, r3
 80096b2:	4610      	mov	r0, r2
 80096b4:	f7ff fc83 	bl	8008fbe <get_fat>
 80096b8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d801      	bhi.n	80096c4 <dir_next+0x8c>
 80096c0:	2302      	movs	r3, #2
 80096c2:	e07a      	b.n	80097ba <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ca:	d101      	bne.n	80096d0 <dir_next+0x98>
 80096cc:	2301      	movs	r3, #1
 80096ce:	e074      	b.n	80097ba <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	695b      	ldr	r3, [r3, #20]
 80096d4:	697a      	ldr	r2, [r7, #20]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d358      	bcc.n	800978c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d104      	bne.n	80096ea <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	61da      	str	r2, [r3, #28]
 80096e6:	2304      	movs	r3, #4
 80096e8:	e067      	b.n	80097ba <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	4619      	mov	r1, r3
 80096f2:	4610      	mov	r0, r2
 80096f4:	f7ff fe59 	bl	80093aa <create_chain>
 80096f8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d101      	bne.n	8009704 <dir_next+0xcc>
 8009700:	2307      	movs	r3, #7
 8009702:	e05a      	b.n	80097ba <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009704:	697b      	ldr	r3, [r7, #20]
 8009706:	2b01      	cmp	r3, #1
 8009708:	d101      	bne.n	800970e <dir_next+0xd6>
 800970a:	2302      	movs	r3, #2
 800970c:	e055      	b.n	80097ba <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009714:	d101      	bne.n	800971a <dir_next+0xe2>
 8009716:	2301      	movs	r3, #1
 8009718:	e04f      	b.n	80097ba <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f7ff fb50 	bl	8008dc0 <sync_window>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <dir_next+0xf2>
 8009726:	2301      	movs	r3, #1
 8009728:	e047      	b.n	80097ba <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	3330      	adds	r3, #48	@ 0x30
 800972e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009732:	2100      	movs	r1, #0
 8009734:	4618      	mov	r0, r3
 8009736:	f7ff f979 	bl	8008a2c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800973a:	2300      	movs	r3, #0
 800973c:	613b      	str	r3, [r7, #16]
 800973e:	6979      	ldr	r1, [r7, #20]
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f7ff fc1d 	bl	8008f80 <clust2sect>
 8009746:	4602      	mov	r2, r0
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800974c:	e012      	b.n	8009774 <dir_next+0x13c>
						fs->wflag = 1;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2201      	movs	r2, #1
 8009752:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f7ff fb33 	bl	8008dc0 <sync_window>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <dir_next+0x12c>
 8009760:	2301      	movs	r3, #1
 8009762:	e02a      	b.n	80097ba <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	3301      	adds	r3, #1
 8009768:	613b      	str	r3, [r7, #16]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976e:	1c5a      	adds	r2, r3, #1
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	895b      	ldrh	r3, [r3, #10]
 8009778:	461a      	mov	r2, r3
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	4293      	cmp	r3, r2
 800977e:	d3e6      	bcc.n	800974e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	1ad2      	subs	r2, r2, r3
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	697a      	ldr	r2, [r7, #20]
 8009790:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009792:	6979      	ldr	r1, [r7, #20]
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f7ff fbf3 	bl	8008f80 <clust2sect>
 800979a:	4602      	mov	r2, r0
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097b2:	441a      	add	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3718      	adds	r7, #24
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b086      	sub	sp, #24
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80097d2:	2100      	movs	r1, #0
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f7ff feb4 	bl	8009542 <dir_sdi>
 80097da:	4603      	mov	r3, r0
 80097dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80097de:	7dfb      	ldrb	r3, [r7, #23]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d12b      	bne.n	800983c <dir_alloc+0x7a>
		n = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	69db      	ldr	r3, [r3, #28]
 80097ec:	4619      	mov	r1, r3
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f7ff fb2a 	bl	8008e48 <move_window>
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d11d      	bne.n	800983a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	2be5      	cmp	r3, #229	@ 0xe5
 8009806:	d004      	beq.n	8009812 <dir_alloc+0x50>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d107      	bne.n	8009822 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	3301      	adds	r3, #1
 8009816:	613b      	str	r3, [r7, #16]
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	429a      	cmp	r2, r3
 800981e:	d102      	bne.n	8009826 <dir_alloc+0x64>
 8009820:	e00c      	b.n	800983c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009822:	2300      	movs	r3, #0
 8009824:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009826:	2101      	movs	r1, #1
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff ff05 	bl	8009638 <dir_next>
 800982e:	4603      	mov	r3, r0
 8009830:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009832:	7dfb      	ldrb	r3, [r7, #23]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d0d7      	beq.n	80097e8 <dir_alloc+0x26>
 8009838:	e000      	b.n	800983c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800983a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800983c:	7dfb      	ldrb	r3, [r7, #23]
 800983e:	2b04      	cmp	r3, #4
 8009840:	d101      	bne.n	8009846 <dir_alloc+0x84>
 8009842:	2307      	movs	r3, #7
 8009844:	75fb      	strb	r3, [r7, #23]
	return res;
 8009846:	7dfb      	ldrb	r3, [r7, #23]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3718      	adds	r7, #24
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	331a      	adds	r3, #26
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff f840 	bl	80088e4 <ld_word>
 8009864:	4603      	mov	r3, r0
 8009866:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2b03      	cmp	r3, #3
 800986e:	d109      	bne.n	8009884 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	3314      	adds	r3, #20
 8009874:	4618      	mov	r0, r3
 8009876:	f7ff f835 	bl	80088e4 <ld_word>
 800987a:	4603      	mov	r3, r0
 800987c:	041b      	lsls	r3, r3, #16
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	4313      	orrs	r3, r2
 8009882:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009884:	68fb      	ldr	r3, [r7, #12]
}
 8009886:	4618      	mov	r0, r3
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b084      	sub	sp, #16
 8009892:	af00      	add	r7, sp, #0
 8009894:	60f8      	str	r0, [r7, #12]
 8009896:	60b9      	str	r1, [r7, #8]
 8009898:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	331a      	adds	r3, #26
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	b292      	uxth	r2, r2
 80098a2:	4611      	mov	r1, r2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7ff f859 	bl	800895c <st_word>
	if (fs->fs_type == FS_FAT32) {
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	2b03      	cmp	r3, #3
 80098b0:	d109      	bne.n	80098c6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	f103 0214 	add.w	r2, r3, #20
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	0c1b      	lsrs	r3, r3, #16
 80098bc:	b29b      	uxth	r3, r3
 80098be:	4619      	mov	r1, r3
 80098c0:	4610      	mov	r0, r2
 80098c2:	f7ff f84b 	bl	800895c <st_word>
	}
}
 80098c6:	bf00      	nop
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b086      	sub	sp, #24
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
 80098d6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80098d8:	2304      	movs	r3, #4
 80098da:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80098e2:	e03c      	b.n	800995e <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	69db      	ldr	r3, [r3, #28]
 80098e8:	4619      	mov	r1, r3
 80098ea:	6938      	ldr	r0, [r7, #16]
 80098ec:	f7ff faac 	bl	8008e48 <move_window>
 80098f0:	4603      	mov	r3, r0
 80098f2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80098f4:	7dfb      	ldrb	r3, [r7, #23]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d136      	bne.n	8009968 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	781b      	ldrb	r3, [r3, #0]
 8009900:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8009902:	7bfb      	ldrb	r3, [r7, #15]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d102      	bne.n	800990e <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8009908:	2304      	movs	r3, #4
 800990a:	75fb      	strb	r3, [r7, #23]
 800990c:	e031      	b.n	8009972 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	330b      	adds	r3, #11
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800991a:	73bb      	strb	r3, [r7, #14]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	7bba      	ldrb	r2, [r7, #14]
 8009920:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8009922:	7bfb      	ldrb	r3, [r7, #15]
 8009924:	2be5      	cmp	r3, #229	@ 0xe5
 8009926:	d011      	beq.n	800994c <dir_read+0x7e>
 8009928:	7bfb      	ldrb	r3, [r7, #15]
 800992a:	2b2e      	cmp	r3, #46	@ 0x2e
 800992c:	d00e      	beq.n	800994c <dir_read+0x7e>
 800992e:	7bbb      	ldrb	r3, [r7, #14]
 8009930:	2b0f      	cmp	r3, #15
 8009932:	d00b      	beq.n	800994c <dir_read+0x7e>
 8009934:	7bbb      	ldrb	r3, [r7, #14]
 8009936:	f023 0320 	bic.w	r3, r3, #32
 800993a:	2b08      	cmp	r3, #8
 800993c:	bf0c      	ite	eq
 800993e:	2301      	moveq	r3, #1
 8009940:	2300      	movne	r3, #0
 8009942:	b2db      	uxtb	r3, r3
 8009944:	461a      	mov	r2, r3
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	4293      	cmp	r3, r2
 800994a:	d00f      	beq.n	800996c <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800994c:	2100      	movs	r1, #0
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7ff fe72 	bl	8009638 <dir_next>
 8009954:	4603      	mov	r3, r0
 8009956:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009958:	7dfb      	ldrb	r3, [r7, #23]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d108      	bne.n	8009970 <dir_read+0xa2>
	while (dp->sect) {
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1be      	bne.n	80098e4 <dir_read+0x16>
 8009966:	e004      	b.n	8009972 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009968:	bf00      	nop
 800996a:	e002      	b.n	8009972 <dir_read+0xa4>
				break;
 800996c:	bf00      	nop
 800996e:	e000      	b.n	8009972 <dir_read+0xa4>
		if (res != FR_OK) break;
 8009970:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8009972:	7dfb      	ldrb	r3, [r7, #23]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <dir_read+0xb0>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	61da      	str	r2, [r3, #28]
	return res;
 800997e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3718      	adds	r7, #24
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009996:	2100      	movs	r1, #0
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f7ff fdd2 	bl	8009542 <dir_sdi>
 800999e:	4603      	mov	r3, r0
 80099a0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d001      	beq.n	80099ac <dir_find+0x24>
 80099a8:	7dfb      	ldrb	r3, [r7, #23]
 80099aa:	e03e      	b.n	8009a2a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	69db      	ldr	r3, [r3, #28]
 80099b0:	4619      	mov	r1, r3
 80099b2:	6938      	ldr	r0, [r7, #16]
 80099b4:	f7ff fa48 	bl	8008e48 <move_window>
 80099b8:	4603      	mov	r3, r0
 80099ba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d12f      	bne.n	8009a22 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80099ca:	7bfb      	ldrb	r3, [r7, #15]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d102      	bne.n	80099d6 <dir_find+0x4e>
 80099d0:	2304      	movs	r3, #4
 80099d2:	75fb      	strb	r3, [r7, #23]
 80099d4:	e028      	b.n	8009a28 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	330b      	adds	r3, #11
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80099e2:	b2da      	uxtb	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a1b      	ldr	r3, [r3, #32]
 80099ec:	330b      	adds	r3, #11
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	f003 0308 	and.w	r3, r3, #8
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10a      	bne.n	8009a0e <dir_find+0x86>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6a18      	ldr	r0, [r3, #32]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	3324      	adds	r3, #36	@ 0x24
 8009a00:	220b      	movs	r2, #11
 8009a02:	4619      	mov	r1, r3
 8009a04:	f7ff f82d 	bl	8008a62 <mem_cmp>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00b      	beq.n	8009a26 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009a0e:	2100      	movs	r1, #0
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f7ff fe11 	bl	8009638 <dir_next>
 8009a16:	4603      	mov	r3, r0
 8009a18:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009a1a:	7dfb      	ldrb	r3, [r7, #23]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0c5      	beq.n	80099ac <dir_find+0x24>
 8009a20:	e002      	b.n	8009a28 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009a22:	bf00      	nop
 8009a24:	e000      	b.n	8009a28 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009a26:	bf00      	nop

	return res;
 8009a28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3718      	adds	r7, #24
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b084      	sub	sp, #16
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009a40:	2101      	movs	r1, #1
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff febd 	bl	80097c2 <dir_alloc>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009a4c:	7bfb      	ldrb	r3, [r7, #15]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d11c      	bne.n	8009a8c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	69db      	ldr	r3, [r3, #28]
 8009a56:	4619      	mov	r1, r3
 8009a58:	68b8      	ldr	r0, [r7, #8]
 8009a5a:	f7ff f9f5 	bl	8008e48 <move_window>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d111      	bne.n	8009a8c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6a1b      	ldr	r3, [r3, #32]
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	2100      	movs	r1, #0
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fe ffdb 	bl	8008a2c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a18      	ldr	r0, [r3, #32]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	3324      	adds	r3, #36	@ 0x24
 8009a7e:	220b      	movs	r2, #11
 8009a80:	4619      	mov	r1, r3
 8009a82:	f7fe ffb2 	bl	80089ea <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}

08009a96 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8009a96:	b580      	push	{r7, lr}
 8009a98:	b084      	sub	sp, #16
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	69db      	ldr	r3, [r3, #28]
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f7ff f9cc 	bl	8008e48 <move_window>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8009ab4:	7afb      	ldrb	r3, [r7, #11]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d106      	bne.n	8009ac8 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	22e5      	movs	r2, #229	@ 0xe5
 8009ac0:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8009ac8:	7afb      	ldrb	r3, [r7, #11]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
	...

08009ad4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	60fb      	str	r3, [r7, #12]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	3324      	adds	r3, #36	@ 0x24
 8009ae8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009aea:	220b      	movs	r2, #11
 8009aec:	2120      	movs	r1, #32
 8009aee:	68b8      	ldr	r0, [r7, #8]
 8009af0:	f7fe ff9c 	bl	8008a2c <mem_set>
	si = i = 0; ni = 8;
 8009af4:	2300      	movs	r3, #0
 8009af6:	613b      	str	r3, [r7, #16]
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	61fb      	str	r3, [r7, #28]
 8009afc:	2308      	movs	r3, #8
 8009afe:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	1c5a      	adds	r2, r3, #1
 8009b04:	61fa      	str	r2, [r7, #28]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	4413      	add	r3, r2
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009b0e:	7efb      	ldrb	r3, [r7, #27]
 8009b10:	2b20      	cmp	r3, #32
 8009b12:	d94e      	bls.n	8009bb2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009b14:	7efb      	ldrb	r3, [r7, #27]
 8009b16:	2b2f      	cmp	r3, #47	@ 0x2f
 8009b18:	d006      	beq.n	8009b28 <create_name+0x54>
 8009b1a:	7efb      	ldrb	r3, [r7, #27]
 8009b1c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009b1e:	d110      	bne.n	8009b42 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009b20:	e002      	b.n	8009b28 <create_name+0x54>
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	3301      	adds	r3, #1
 8009b26:	61fb      	str	r3, [r7, #28]
 8009b28:	68fa      	ldr	r2, [r7, #12]
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	2b2f      	cmp	r3, #47	@ 0x2f
 8009b32:	d0f6      	beq.n	8009b22 <create_name+0x4e>
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	69fb      	ldr	r3, [r7, #28]
 8009b38:	4413      	add	r3, r2
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8009b3e:	d0f0      	beq.n	8009b22 <create_name+0x4e>
			break;
 8009b40:	e038      	b.n	8009bb4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009b42:	7efb      	ldrb	r3, [r7, #27]
 8009b44:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b46:	d003      	beq.n	8009b50 <create_name+0x7c>
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d30c      	bcc.n	8009b6a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	2b0b      	cmp	r3, #11
 8009b54:	d002      	beq.n	8009b5c <create_name+0x88>
 8009b56:	7efb      	ldrb	r3, [r7, #27]
 8009b58:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b5a:	d001      	beq.n	8009b60 <create_name+0x8c>
 8009b5c:	2306      	movs	r3, #6
 8009b5e:	e044      	b.n	8009bea <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009b60:	2308      	movs	r3, #8
 8009b62:	613b      	str	r3, [r7, #16]
 8009b64:	230b      	movs	r3, #11
 8009b66:	617b      	str	r3, [r7, #20]
			continue;
 8009b68:	e022      	b.n	8009bb0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009b6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	da04      	bge.n	8009b7c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009b72:	7efb      	ldrb	r3, [r7, #27]
 8009b74:	3b80      	subs	r3, #128	@ 0x80
 8009b76:	4a1f      	ldr	r2, [pc, #124]	@ (8009bf4 <create_name+0x120>)
 8009b78:	5cd3      	ldrb	r3, [r2, r3]
 8009b7a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009b7c:	7efb      	ldrb	r3, [r7, #27]
 8009b7e:	4619      	mov	r1, r3
 8009b80:	481d      	ldr	r0, [pc, #116]	@ (8009bf8 <create_name+0x124>)
 8009b82:	f7fe ff95 	bl	8008ab0 <chk_chr>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <create_name+0xbc>
 8009b8c:	2306      	movs	r3, #6
 8009b8e:	e02c      	b.n	8009bea <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009b90:	7efb      	ldrb	r3, [r7, #27]
 8009b92:	2b60      	cmp	r3, #96	@ 0x60
 8009b94:	d905      	bls.n	8009ba2 <create_name+0xce>
 8009b96:	7efb      	ldrb	r3, [r7, #27]
 8009b98:	2b7a      	cmp	r3, #122	@ 0x7a
 8009b9a:	d802      	bhi.n	8009ba2 <create_name+0xce>
 8009b9c:	7efb      	ldrb	r3, [r7, #27]
 8009b9e:	3b20      	subs	r3, #32
 8009ba0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	1c5a      	adds	r2, r3, #1
 8009ba6:	613a      	str	r2, [r7, #16]
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	4413      	add	r3, r2
 8009bac:	7efa      	ldrb	r2, [r7, #27]
 8009bae:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009bb0:	e7a6      	b.n	8009b00 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009bb2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	69fb      	ldr	r3, [r7, #28]
 8009bb8:	441a      	add	r2, r3
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d101      	bne.n	8009bc8 <create_name+0xf4>
 8009bc4:	2306      	movs	r3, #6
 8009bc6:	e010      	b.n	8009bea <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2be5      	cmp	r3, #229	@ 0xe5
 8009bce:	d102      	bne.n	8009bd6 <create_name+0x102>
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2205      	movs	r2, #5
 8009bd4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009bd6:	7efb      	ldrb	r3, [r7, #27]
 8009bd8:	2b20      	cmp	r3, #32
 8009bda:	d801      	bhi.n	8009be0 <create_name+0x10c>
 8009bdc:	2204      	movs	r2, #4
 8009bde:	e000      	b.n	8009be2 <create_name+0x10e>
 8009be0:	2200      	movs	r2, #0
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	330b      	adds	r3, #11
 8009be6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009be8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3720      	adds	r7, #32
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	0800b960 	.word	0x0800b960
 8009bf8:	0800b714 	.word	0x0800b714

08009bfc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b086      	sub	sp, #24
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009c10:	e002      	b.n	8009c18 <follow_path+0x1c>
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	3301      	adds	r3, #1
 8009c16:	603b      	str	r3, [r7, #0]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2b2f      	cmp	r3, #47	@ 0x2f
 8009c1e:	d0f8      	beq.n	8009c12 <follow_path+0x16>
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	2b5c      	cmp	r3, #92	@ 0x5c
 8009c26:	d0f4      	beq.n	8009c12 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	2b1f      	cmp	r3, #31
 8009c34:	d80a      	bhi.n	8009c4c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2280      	movs	r2, #128	@ 0x80
 8009c3a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8009c3e:	2100      	movs	r1, #0
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7ff fc7e 	bl	8009542 <dir_sdi>
 8009c46:	4603      	mov	r3, r0
 8009c48:	75fb      	strb	r3, [r7, #23]
 8009c4a:	e043      	b.n	8009cd4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009c4c:	463b      	mov	r3, r7
 8009c4e:	4619      	mov	r1, r3
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7ff ff3f 	bl	8009ad4 <create_name>
 8009c56:	4603      	mov	r3, r0
 8009c58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009c5a:	7dfb      	ldrb	r3, [r7, #23]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d134      	bne.n	8009cca <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7ff fe91 	bl	8009988 <dir_find>
 8009c66:	4603      	mov	r3, r0
 8009c68:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8009c70:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009c72:	7dfb      	ldrb	r3, [r7, #23]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00a      	beq.n	8009c8e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
 8009c7a:	2b04      	cmp	r3, #4
 8009c7c:	d127      	bne.n	8009cce <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009c7e:	7afb      	ldrb	r3, [r7, #11]
 8009c80:	f003 0304 	and.w	r3, r3, #4
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d122      	bne.n	8009cce <follow_path+0xd2>
 8009c88:	2305      	movs	r3, #5
 8009c8a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009c8c:	e01f      	b.n	8009cce <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009c8e:	7afb      	ldrb	r3, [r7, #11]
 8009c90:	f003 0304 	and.w	r3, r3, #4
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d11c      	bne.n	8009cd2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	799b      	ldrb	r3, [r3, #6]
 8009c9c:	f003 0310 	and.w	r3, r3, #16
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d102      	bne.n	8009caa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009ca4:	2305      	movs	r3, #5
 8009ca6:	75fb      	strb	r3, [r7, #23]
 8009ca8:	e014      	b.n	8009cd4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	695b      	ldr	r3, [r3, #20]
 8009cb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cb8:	4413      	add	r3, r2
 8009cba:	4619      	mov	r1, r3
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f7ff fdc7 	bl	8009850 <ld_clust>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009cc8:	e7c0      	b.n	8009c4c <follow_path+0x50>
			if (res != FR_OK) break;
 8009cca:	bf00      	nop
 8009ccc:	e002      	b.n	8009cd4 <follow_path+0xd8>
				break;
 8009cce:	bf00      	nop
 8009cd0:	e000      	b.n	8009cd4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009cd2:	bf00      	nop
			}
		}
	}

	return res;
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3718      	adds	r7, #24
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b087      	sub	sp, #28
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cea:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d031      	beq.n	8009d58 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	617b      	str	r3, [r7, #20]
 8009cfa:	e002      	b.n	8009d02 <get_ldnumber+0x24>
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	617b      	str	r3, [r7, #20]
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b20      	cmp	r3, #32
 8009d08:	d903      	bls.n	8009d12 <get_ldnumber+0x34>
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	2b3a      	cmp	r3, #58	@ 0x3a
 8009d10:	d1f4      	bne.n	8009cfc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	2b3a      	cmp	r3, #58	@ 0x3a
 8009d18:	d11c      	bne.n	8009d54 <get_ldnumber+0x76>
			tp = *path;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	1c5a      	adds	r2, r3, #1
 8009d24:	60fa      	str	r2, [r7, #12]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	3b30      	subs	r3, #48	@ 0x30
 8009d2a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2b09      	cmp	r3, #9
 8009d30:	d80e      	bhi.n	8009d50 <get_ldnumber+0x72>
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d10a      	bne.n	8009d50 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d107      	bne.n	8009d50 <get_ldnumber+0x72>
					vol = (int)i;
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	3301      	adds	r3, #1
 8009d48:	617b      	str	r3, [r7, #20]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	e002      	b.n	8009d5a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8009d54:	2300      	movs	r3, #0
 8009d56:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8009d58:	693b      	ldr	r3, [r7, #16]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	371c      	adds	r7, #28
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
	...

08009d68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b082      	sub	sp, #8
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2200      	movs	r2, #0
 8009d76:	70da      	strb	r2, [r3, #3]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff f860 	bl	8008e48 <move_window>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <check_fs+0x2a>
 8009d8e:	2304      	movs	r3, #4
 8009d90:	e038      	b.n	8009e04 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	3330      	adds	r3, #48	@ 0x30
 8009d96:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7fe fda2 	bl	80088e4 <ld_word>
 8009da0:	4603      	mov	r3, r0
 8009da2:	461a      	mov	r2, r3
 8009da4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d001      	beq.n	8009db0 <check_fs+0x48>
 8009dac:	2303      	movs	r3, #3
 8009dae:	e029      	b.n	8009e04 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009db6:	2be9      	cmp	r3, #233	@ 0xe9
 8009db8:	d009      	beq.n	8009dce <check_fs+0x66>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009dc0:	2beb      	cmp	r3, #235	@ 0xeb
 8009dc2:	d11e      	bne.n	8009e02 <check_fs+0x9a>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8009dca:	2b90      	cmp	r3, #144	@ 0x90
 8009dcc:	d119      	bne.n	8009e02 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3330      	adds	r3, #48	@ 0x30
 8009dd2:	3336      	adds	r3, #54	@ 0x36
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7fe fd9e 	bl	8008916 <ld_dword>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8009de0:	4a0a      	ldr	r2, [pc, #40]	@ (8009e0c <check_fs+0xa4>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d101      	bne.n	8009dea <check_fs+0x82>
 8009de6:	2300      	movs	r3, #0
 8009de8:	e00c      	b.n	8009e04 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	3330      	adds	r3, #48	@ 0x30
 8009dee:	3352      	adds	r3, #82	@ 0x52
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7fe fd90 	bl	8008916 <ld_dword>
 8009df6:	4603      	mov	r3, r0
 8009df8:	4a05      	ldr	r2, [pc, #20]	@ (8009e10 <check_fs+0xa8>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d101      	bne.n	8009e02 <check_fs+0x9a>
 8009dfe:	2300      	movs	r3, #0
 8009e00:	e000      	b.n	8009e04 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009e02:	2302      	movs	r3, #2
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	00544146 	.word	0x00544146
 8009e10:	33544146 	.word	0x33544146

08009e14 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b096      	sub	sp, #88	@ 0x58
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	4613      	mov	r3, r2
 8009e20:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	2200      	movs	r2, #0
 8009e26:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f7ff ff58 	bl	8009cde <get_ldnumber>
 8009e2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	da01      	bge.n	8009e3a <find_volume+0x26>
 8009e36:	230b      	movs	r3, #11
 8009e38:	e22d      	b.n	800a296 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009e3a:	4aa1      	ldr	r2, [pc, #644]	@ (800a0c0 <find_volume+0x2ac>)
 8009e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e42:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d101      	bne.n	8009e4e <find_volume+0x3a>
 8009e4a:	230c      	movs	r3, #12
 8009e4c:	e223      	b.n	800a296 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009e52:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009e54:	79fb      	ldrb	r3, [r7, #7]
 8009e56:	f023 0301 	bic.w	r3, r3, #1
 8009e5a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8009e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d01a      	beq.n	8009e9a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8009e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e66:	785b      	ldrb	r3, [r3, #1]
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fe fc9b 	bl	80087a4 <disk_status>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009e74:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d10c      	bne.n	8009e9a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009e80:	79fb      	ldrb	r3, [r7, #7]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d007      	beq.n	8009e96 <find_volume+0x82>
 8009e86:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009e8a:	f003 0304 	and.w	r3, r3, #4
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d001      	beq.n	8009e96 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8009e92:	230a      	movs	r3, #10
 8009e94:	e1ff      	b.n	800a296 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8009e96:	2300      	movs	r3, #0
 8009e98:	e1fd      	b.n	800a296 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009ea8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eaa:	785b      	ldrb	r3, [r3, #1]
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fe fc93 	bl	80087d8 <disk_initialize>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009eb8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ebc:	f003 0301 	and.w	r3, r3, #1
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	e1e6      	b.n	800a296 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009ec8:	79fb      	ldrb	r3, [r7, #7]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d007      	beq.n	8009ede <find_volume+0xca>
 8009ece:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009ed2:	f003 0304 	and.w	r3, r3, #4
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d001      	beq.n	8009ede <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8009eda:	230a      	movs	r3, #10
 8009edc:	e1db      	b.n	800a296 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8009ee2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ee4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ee6:	f7ff ff3f 	bl	8009d68 <check_fs>
 8009eea:	4603      	mov	r3, r0
 8009eec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8009ef0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009ef4:	2b02      	cmp	r3, #2
 8009ef6:	d149      	bne.n	8009f8c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009ef8:	2300      	movs	r3, #0
 8009efa:	643b      	str	r3, [r7, #64]	@ 0x40
 8009efc:	e01e      	b.n	8009f3c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8009efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f06:	011b      	lsls	r3, r3, #4
 8009f08:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8009f0c:	4413      	add	r3, r2
 8009f0e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f12:	3304      	adds	r3, #4
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d006      	beq.n	8009f28 <find_volume+0x114>
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1c:	3308      	adds	r3, #8
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fe fcf9 	bl	8008916 <ld_dword>
 8009f24:	4602      	mov	r2, r0
 8009f26:	e000      	b.n	8009f2a <find_volume+0x116>
 8009f28:	2200      	movs	r2, #0
 8009f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	3358      	adds	r3, #88	@ 0x58
 8009f30:	443b      	add	r3, r7
 8009f32:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f38:	3301      	adds	r3, #1
 8009f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	d9dd      	bls.n	8009efe <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009f42:	2300      	movs	r3, #0
 8009f44:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009f46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <find_volume+0x13e>
 8009f4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	3358      	adds	r3, #88	@ 0x58
 8009f58:	443b      	add	r3, r7
 8009f5a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009f5e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009f60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d005      	beq.n	8009f72 <find_volume+0x15e>
 8009f66:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009f68:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009f6a:	f7ff fefd 	bl	8009d68 <check_fs>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	e000      	b.n	8009f74 <find_volume+0x160>
 8009f72:	2303      	movs	r3, #3
 8009f74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009f78:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	d905      	bls.n	8009f8c <find_volume+0x178>
 8009f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f82:	3301      	adds	r3, #1
 8009f84:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009f88:	2b03      	cmp	r3, #3
 8009f8a:	d9e2      	bls.n	8009f52 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009f8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f90:	2b04      	cmp	r3, #4
 8009f92:	d101      	bne.n	8009f98 <find_volume+0x184>
 8009f94:	2301      	movs	r3, #1
 8009f96:	e17e      	b.n	800a296 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009f98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d901      	bls.n	8009fa4 <find_volume+0x190>
 8009fa0:	230d      	movs	r3, #13
 8009fa2:	e178      	b.n	800a296 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009fa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fa6:	3330      	adds	r3, #48	@ 0x30
 8009fa8:	330b      	adds	r3, #11
 8009faa:	4618      	mov	r0, r3
 8009fac:	f7fe fc9a 	bl	80088e4 <ld_word>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fb6:	d001      	beq.n	8009fbc <find_volume+0x1a8>
 8009fb8:	230d      	movs	r3, #13
 8009fba:	e16c      	b.n	800a296 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fbe:	3330      	adds	r3, #48	@ 0x30
 8009fc0:	3316      	adds	r3, #22
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f7fe fc8e 	bl	80088e4 <ld_word>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d106      	bne.n	8009fe0 <find_volume+0x1cc>
 8009fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fd4:	3330      	adds	r3, #48	@ 0x30
 8009fd6:	3324      	adds	r3, #36	@ 0x24
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f7fe fc9c 	bl	8008916 <ld_dword>
 8009fde:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009fe4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe8:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8009fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8009ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff2:	789b      	ldrb	r3, [r3, #2]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d005      	beq.n	800a004 <find_volume+0x1f0>
 8009ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffa:	789b      	ldrb	r3, [r3, #2]
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d001      	beq.n	800a004 <find_volume+0x1f0>
 800a000:	230d      	movs	r3, #13
 800a002:	e148      	b.n	800a296 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a006:	789b      	ldrb	r3, [r3, #2]
 800a008:	461a      	mov	r2, r3
 800a00a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a00c:	fb02 f303 	mul.w	r3, r2, r3
 800a010:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a014:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a018:	461a      	mov	r2, r3
 800a01a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a01c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a020:	895b      	ldrh	r3, [r3, #10]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d008      	beq.n	800a038 <find_volume+0x224>
 800a026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a028:	895b      	ldrh	r3, [r3, #10]
 800a02a:	461a      	mov	r2, r3
 800a02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02e:	895b      	ldrh	r3, [r3, #10]
 800a030:	3b01      	subs	r3, #1
 800a032:	4013      	ands	r3, r2
 800a034:	2b00      	cmp	r3, #0
 800a036:	d001      	beq.n	800a03c <find_volume+0x228>
 800a038:	230d      	movs	r3, #13
 800a03a:	e12c      	b.n	800a296 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03e:	3330      	adds	r3, #48	@ 0x30
 800a040:	3311      	adds	r3, #17
 800a042:	4618      	mov	r0, r3
 800a044:	f7fe fc4e 	bl	80088e4 <ld_word>
 800a048:	4603      	mov	r3, r0
 800a04a:	461a      	mov	r2, r3
 800a04c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a04e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a052:	891b      	ldrh	r3, [r3, #8]
 800a054:	f003 030f 	and.w	r3, r3, #15
 800a058:	b29b      	uxth	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d001      	beq.n	800a062 <find_volume+0x24e>
 800a05e:	230d      	movs	r3, #13
 800a060:	e119      	b.n	800a296 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a064:	3330      	adds	r3, #48	@ 0x30
 800a066:	3313      	adds	r3, #19
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fe fc3b 	bl	80088e4 <ld_word>
 800a06e:	4603      	mov	r3, r0
 800a070:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a074:	2b00      	cmp	r3, #0
 800a076:	d106      	bne.n	800a086 <find_volume+0x272>
 800a078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07a:	3330      	adds	r3, #48	@ 0x30
 800a07c:	3320      	adds	r3, #32
 800a07e:	4618      	mov	r0, r3
 800a080:	f7fe fc49 	bl	8008916 <ld_dword>
 800a084:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a088:	3330      	adds	r3, #48	@ 0x30
 800a08a:	330e      	adds	r3, #14
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7fe fc29 	bl	80088e4 <ld_word>
 800a092:	4603      	mov	r3, r0
 800a094:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a096:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d101      	bne.n	800a0a0 <find_volume+0x28c>
 800a09c:	230d      	movs	r3, #13
 800a09e:	e0fa      	b.n	800a296 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a0a0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a0a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0a4:	4413      	add	r3, r2
 800a0a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0a8:	8912      	ldrh	r2, [r2, #8]
 800a0aa:	0912      	lsrs	r2, r2, #4
 800a0ac:	b292      	uxth	r2, r2
 800a0ae:	4413      	add	r3, r2
 800a0b0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a0b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d204      	bcs.n	800a0c4 <find_volume+0x2b0>
 800a0ba:	230d      	movs	r3, #13
 800a0bc:	e0eb      	b.n	800a296 <find_volume+0x482>
 800a0be:	bf00      	nop
 800a0c0:	200006c8 	.word	0x200006c8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a0c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a0c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a0cc:	8952      	ldrh	r2, [r2, #10]
 800a0ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800a0d2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d101      	bne.n	800a0de <find_volume+0x2ca>
 800a0da:	230d      	movs	r3, #13
 800a0dc:	e0db      	b.n	800a296 <find_volume+0x482>
		fmt = FS_FAT32;
 800a0de:	2303      	movs	r3, #3
 800a0e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0e6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d802      	bhi.n	800a0f4 <find_volume+0x2e0>
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0f6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d802      	bhi.n	800a104 <find_volume+0x2f0>
 800a0fe:	2301      	movs	r3, #1
 800a100:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a106:	1c9a      	adds	r2, r3, #2
 800a108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800a10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a110:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a112:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800a114:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a116:	441a      	add	r2, r3
 800a118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800a11c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a120:	441a      	add	r2, r3
 800a122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a124:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800a126:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a12a:	2b03      	cmp	r3, #3
 800a12c:	d11e      	bne.n	800a16c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a12e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a130:	3330      	adds	r3, #48	@ 0x30
 800a132:	332a      	adds	r3, #42	@ 0x2a
 800a134:	4618      	mov	r0, r3
 800a136:	f7fe fbd5 	bl	80088e4 <ld_word>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d001      	beq.n	800a144 <find_volume+0x330>
 800a140:	230d      	movs	r3, #13
 800a142:	e0a8      	b.n	800a296 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a146:	891b      	ldrh	r3, [r3, #8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <find_volume+0x33c>
 800a14c:	230d      	movs	r3, #13
 800a14e:	e0a2      	b.n	800a296 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a152:	3330      	adds	r3, #48	@ 0x30
 800a154:	332c      	adds	r3, #44	@ 0x2c
 800a156:	4618      	mov	r0, r3
 800a158:	f7fe fbdd 	bl	8008916 <ld_dword>
 800a15c:	4602      	mov	r2, r0
 800a15e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a160:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	647b      	str	r3, [r7, #68]	@ 0x44
 800a16a:	e01f      	b.n	800a1ac <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a16e:	891b      	ldrh	r3, [r3, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d101      	bne.n	800a178 <find_volume+0x364>
 800a174:	230d      	movs	r3, #13
 800a176:	e08e      	b.n	800a296 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a17a:	6a1a      	ldr	r2, [r3, #32]
 800a17c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a17e:	441a      	add	r2, r3
 800a180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a182:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a184:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d103      	bne.n	800a194 <find_volume+0x380>
 800a18c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18e:	695b      	ldr	r3, [r3, #20]
 800a190:	005b      	lsls	r3, r3, #1
 800a192:	e00a      	b.n	800a1aa <find_volume+0x396>
 800a194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a196:	695a      	ldr	r2, [r3, #20]
 800a198:	4613      	mov	r3, r2
 800a19a:	005b      	lsls	r3, r3, #1
 800a19c:	4413      	add	r3, r2
 800a19e:	085a      	lsrs	r2, r3, #1
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a2:	695b      	ldr	r3, [r3, #20]
 800a1a4:	f003 0301 	and.w	r3, r3, #1
 800a1a8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a1aa:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ae:	699a      	ldr	r2, [r3, #24]
 800a1b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a1b2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800a1b6:	0a5b      	lsrs	r3, r3, #9
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d201      	bcs.n	800a1c0 <find_volume+0x3ac>
 800a1bc:	230d      	movs	r3, #13
 800a1be:	e06a      	b.n	800a296 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a1c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800a1c6:	611a      	str	r2, [r3, #16]
 800a1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ca:	691a      	ldr	r2, [r3, #16]
 800a1cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ce:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800a1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d2:	2280      	movs	r2, #128	@ 0x80
 800a1d4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a1d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800a1da:	2b03      	cmp	r3, #3
 800a1dc:	d149      	bne.n	800a272 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e0:	3330      	adds	r3, #48	@ 0x30
 800a1e2:	3330      	adds	r3, #48	@ 0x30
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f7fe fb7d 	bl	80088e4 <ld_word>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d140      	bne.n	800a272 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a1f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a1f8:	f7fe fe26 	bl	8008e48 <move_window>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d137      	bne.n	800a272 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800a202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a204:	2200      	movs	r2, #0
 800a206:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20a:	3330      	adds	r3, #48	@ 0x30
 800a20c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a210:	4618      	mov	r0, r3
 800a212:	f7fe fb67 	bl	80088e4 <ld_word>
 800a216:	4603      	mov	r3, r0
 800a218:	461a      	mov	r2, r3
 800a21a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800a21e:	429a      	cmp	r2, r3
 800a220:	d127      	bne.n	800a272 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a224:	3330      	adds	r3, #48	@ 0x30
 800a226:	4618      	mov	r0, r3
 800a228:	f7fe fb75 	bl	8008916 <ld_dword>
 800a22c:	4603      	mov	r3, r0
 800a22e:	4a1c      	ldr	r2, [pc, #112]	@ (800a2a0 <find_volume+0x48c>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d11e      	bne.n	800a272 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a236:	3330      	adds	r3, #48	@ 0x30
 800a238:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7fe fb6a 	bl	8008916 <ld_dword>
 800a242:	4603      	mov	r3, r0
 800a244:	4a17      	ldr	r2, [pc, #92]	@ (800a2a4 <find_volume+0x490>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d113      	bne.n	800a272 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a24c:	3330      	adds	r3, #48	@ 0x30
 800a24e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800a252:	4618      	mov	r0, r3
 800a254:	f7fe fb5f 	bl	8008916 <ld_dword>
 800a258:	4602      	mov	r2, r0
 800a25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a25c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a260:	3330      	adds	r3, #48	@ 0x30
 800a262:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800a266:	4618      	mov	r0, r3
 800a268:	f7fe fb55 	bl	8008916 <ld_dword>
 800a26c:	4602      	mov	r2, r0
 800a26e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a270:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a274:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800a278:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a27a:	4b0b      	ldr	r3, [pc, #44]	@ (800a2a8 <find_volume+0x494>)
 800a27c:	881b      	ldrh	r3, [r3, #0]
 800a27e:	3301      	adds	r3, #1
 800a280:	b29a      	uxth	r2, r3
 800a282:	4b09      	ldr	r3, [pc, #36]	@ (800a2a8 <find_volume+0x494>)
 800a284:	801a      	strh	r2, [r3, #0]
 800a286:	4b08      	ldr	r3, [pc, #32]	@ (800a2a8 <find_volume+0x494>)
 800a288:	881a      	ldrh	r2, [r3, #0]
 800a28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a28e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a290:	f7fe fd72 	bl	8008d78 <clear_lock>
#endif
	return FR_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3758      	adds	r7, #88	@ 0x58
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	41615252 	.word	0x41615252
 800a2a4:	61417272 	.word	0x61417272
 800a2a8:	200006cc 	.word	0x200006cc

0800a2ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a2b6:	2309      	movs	r3, #9
 800a2b8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d01c      	beq.n	800a2fa <validate+0x4e>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d018      	beq.n	800a2fa <validate+0x4e>
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	781b      	ldrb	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d013      	beq.n	800a2fa <validate+0x4e>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	889a      	ldrh	r2, [r3, #4]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	88db      	ldrh	r3, [r3, #6]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d10c      	bne.n	800a2fa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	785b      	ldrb	r3, [r3, #1]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7fe fa5c 	bl	80087a4 <disk_status>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	f003 0301 	and.w	r3, r3, #1
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <validate+0x4e>
			res = FR_OK;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d102      	bne.n	800a306 <validate+0x5a>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	e000      	b.n	800a308 <validate+0x5c>
 800a306:	2300      	movs	r3, #0
 800a308:	683a      	ldr	r2, [r7, #0]
 800a30a:	6013      	str	r3, [r2, #0]
	return res;
 800a30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
	...

0800a318 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b088      	sub	sp, #32
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	4613      	mov	r3, r2
 800a324:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a32a:	f107 0310 	add.w	r3, r7, #16
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff fcd5 	bl	8009cde <get_ldnumber>
 800a334:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	da01      	bge.n	800a340 <f_mount+0x28>
 800a33c:	230b      	movs	r3, #11
 800a33e:	e02b      	b.n	800a398 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a340:	4a17      	ldr	r2, [pc, #92]	@ (800a3a0 <f_mount+0x88>)
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a348:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d005      	beq.n	800a35c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a350:	69b8      	ldr	r0, [r7, #24]
 800a352:	f7fe fd11 	bl	8008d78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	2200      	movs	r2, #0
 800a35a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d002      	beq.n	800a368 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	490d      	ldr	r1, [pc, #52]	@ (800a3a0 <f_mount+0x88>)
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d002      	beq.n	800a37e <f_mount+0x66>
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d001      	beq.n	800a382 <f_mount+0x6a>
 800a37e:	2300      	movs	r3, #0
 800a380:	e00a      	b.n	800a398 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a382:	f107 010c 	add.w	r1, r7, #12
 800a386:	f107 0308 	add.w	r3, r7, #8
 800a38a:	2200      	movs	r2, #0
 800a38c:	4618      	mov	r0, r3
 800a38e:	f7ff fd41 	bl	8009e14 <find_volume>
 800a392:	4603      	mov	r3, r0
 800a394:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a396:	7dfb      	ldrb	r3, [r7, #23]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3720      	adds	r7, #32
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	200006c8 	.word	0x200006c8

0800a3a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b098      	sub	sp, #96	@ 0x60
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d101      	bne.n	800a3bc <f_open+0x18>
 800a3b8:	2309      	movs	r3, #9
 800a3ba:	e1a9      	b.n	800a710 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a3bc:	79fb      	ldrb	r3, [r7, #7]
 800a3be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a3c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a3c4:	79fa      	ldrb	r2, [r7, #7]
 800a3c6:	f107 0110 	add.w	r1, r7, #16
 800a3ca:	f107 0308 	add.w	r3, r7, #8
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7ff fd20 	bl	8009e14 <find_volume>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800a3da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f040 818d 	bne.w	800a6fe <f_open+0x35a>
		dj.obj.fs = fs;
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	f107 0314 	add.w	r3, r7, #20
 800a3ee:	4611      	mov	r1, r2
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7ff fc03 	bl	8009bfc <follow_path>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a3fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a400:	2b00      	cmp	r3, #0
 800a402:	d118      	bne.n	800a436 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a404:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a408:	b25b      	sxtb	r3, r3
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	da03      	bge.n	800a416 <f_open+0x72>
				res = FR_INVALID_NAME;
 800a40e:	2306      	movs	r3, #6
 800a410:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a414:	e00f      	b.n	800a436 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a416:	79fb      	ldrb	r3, [r7, #7]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	bf8c      	ite	hi
 800a41c:	2301      	movhi	r3, #1
 800a41e:	2300      	movls	r3, #0
 800a420:	b2db      	uxtb	r3, r3
 800a422:	461a      	mov	r2, r3
 800a424:	f107 0314 	add.w	r3, r7, #20
 800a428:	4611      	mov	r1, r2
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fe fb5c 	bl	8008ae8 <chk_lock>
 800a430:	4603      	mov	r3, r0
 800a432:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a436:	79fb      	ldrb	r3, [r7, #7]
 800a438:	f003 031c 	and.w	r3, r3, #28
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d07f      	beq.n	800a540 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800a440:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a444:	2b00      	cmp	r3, #0
 800a446:	d017      	beq.n	800a478 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a448:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	d10e      	bne.n	800a46e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a450:	f7fe fba6 	bl	8008ba0 <enq_lock>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d006      	beq.n	800a468 <f_open+0xc4>
 800a45a:	f107 0314 	add.w	r3, r7, #20
 800a45e:	4618      	mov	r0, r3
 800a460:	f7ff fae7 	bl	8009a32 <dir_register>
 800a464:	4603      	mov	r3, r0
 800a466:	e000      	b.n	800a46a <f_open+0xc6>
 800a468:	2312      	movs	r3, #18
 800a46a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a46e:	79fb      	ldrb	r3, [r7, #7]
 800a470:	f043 0308 	orr.w	r3, r3, #8
 800a474:	71fb      	strb	r3, [r7, #7]
 800a476:	e010      	b.n	800a49a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a478:	7ebb      	ldrb	r3, [r7, #26]
 800a47a:	f003 0311 	and.w	r3, r3, #17
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <f_open+0xe6>
					res = FR_DENIED;
 800a482:	2307      	movs	r3, #7
 800a484:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a488:	e007      	b.n	800a49a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a48a:	79fb      	ldrb	r3, [r7, #7]
 800a48c:	f003 0304 	and.w	r3, r3, #4
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <f_open+0xf6>
 800a494:	2308      	movs	r3, #8
 800a496:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a49a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d168      	bne.n	800a574 <f_open+0x1d0>
 800a4a2:	79fb      	ldrb	r3, [r7, #7]
 800a4a4:	f003 0308 	and.w	r3, r3, #8
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d063      	beq.n	800a574 <f_open+0x1d0>
				dw = GET_FATTIME();
 800a4ac:	f7fd ffc0 	bl	8008430 <get_fattime>
 800a4b0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a4b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b4:	330e      	adds	r3, #14
 800a4b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7fe fa6a 	bl	8008992 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a4be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4c0:	3316      	adds	r3, #22
 800a4c2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7fe fa64 	bl	8008992 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a4ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4cc:	330b      	adds	r3, #11
 800a4ce:	2220      	movs	r2, #32
 800a4d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a4d6:	4611      	mov	r1, r2
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7ff f9b9 	bl	8009850 <ld_clust>
 800a4de:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff f9d1 	bl	800988e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a4ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ee:	331c      	adds	r3, #28
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7fe fa4d 	bl	8008992 <st_dword>
					fs->wflag = 1;
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a4fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a500:	2b00      	cmp	r3, #0
 800a502:	d037      	beq.n	800a574 <f_open+0x1d0>
						dw = fs->winsect;
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a508:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a50a:	f107 0314 	add.w	r3, r7, #20
 800a50e:	2200      	movs	r2, #0
 800a510:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a512:	4618      	mov	r0, r3
 800a514:	f7fe fee4 	bl	80092e0 <remove_chain>
 800a518:	4603      	mov	r3, r0
 800a51a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800a51e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a522:	2b00      	cmp	r3, #0
 800a524:	d126      	bne.n	800a574 <f_open+0x1d0>
							res = move_window(fs, dw);
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fe fc8c 	bl	8008e48 <move_window>
 800a530:	4603      	mov	r3, r0
 800a532:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a53a:	3a01      	subs	r2, #1
 800a53c:	60da      	str	r2, [r3, #12]
 800a53e:	e019      	b.n	800a574 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a540:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a544:	2b00      	cmp	r3, #0
 800a546:	d115      	bne.n	800a574 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a548:	7ebb      	ldrb	r3, [r7, #26]
 800a54a:	f003 0310 	and.w	r3, r3, #16
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d003      	beq.n	800a55a <f_open+0x1b6>
					res = FR_NO_FILE;
 800a552:	2304      	movs	r3, #4
 800a554:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a558:	e00c      	b.n	800a574 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a55a:	79fb      	ldrb	r3, [r7, #7]
 800a55c:	f003 0302 	and.w	r3, r3, #2
 800a560:	2b00      	cmp	r3, #0
 800a562:	d007      	beq.n	800a574 <f_open+0x1d0>
 800a564:	7ebb      	ldrb	r3, [r7, #26]
 800a566:	f003 0301 	and.w	r3, r3, #1
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d002      	beq.n	800a574 <f_open+0x1d0>
						res = FR_DENIED;
 800a56e:	2307      	movs	r3, #7
 800a570:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a574:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d126      	bne.n	800a5ca <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a57c:	79fb      	ldrb	r3, [r7, #7]
 800a57e:	f003 0308 	and.w	r3, r3, #8
 800a582:	2b00      	cmp	r3, #0
 800a584:	d003      	beq.n	800a58e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800a586:	79fb      	ldrb	r3, [r7, #7]
 800a588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a58c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800a596:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a59c:	79fb      	ldrb	r3, [r7, #7]
 800a59e:	2b01      	cmp	r3, #1
 800a5a0:	bf8c      	ite	hi
 800a5a2:	2301      	movhi	r3, #1
 800a5a4:	2300      	movls	r3, #0
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	f107 0314 	add.w	r3, r7, #20
 800a5ae:	4611      	mov	r1, r2
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe fb17 	bl	8008be4 <inc_lock>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d102      	bne.n	800a5ca <f_open+0x226>
 800a5c4:	2302      	movs	r3, #2
 800a5c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a5ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f040 8095 	bne.w	800a6fe <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a5d8:	4611      	mov	r1, r2
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7ff f938 	bl	8009850 <ld_clust>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a5e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e8:	331c      	adds	r3, #28
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f7fe f993 	bl	8008916 <ld_dword>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	88da      	ldrh	r2, [r3, #6]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	79fa      	ldrb	r2, [r7, #7]
 800a60e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2200      	movs	r2, #0
 800a61a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	2200      	movs	r2, #0
 800a620:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3330      	adds	r3, #48	@ 0x30
 800a626:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a62a:	2100      	movs	r1, #0
 800a62c:	4618      	mov	r0, r3
 800a62e:	f7fe f9fd 	bl	8008a2c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a632:	79fb      	ldrb	r3, [r7, #7]
 800a634:	f003 0320 	and.w	r3, r3, #32
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d060      	beq.n	800a6fe <f_open+0x35a>
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d05c      	beq.n	800a6fe <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	68da      	ldr	r2, [r3, #12]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	895b      	ldrh	r3, [r3, #10]
 800a650:	025b      	lsls	r3, r3, #9
 800a652:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	68db      	ldr	r3, [r3, #12]
 800a65e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a660:	e016      	b.n	800a690 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe fca9 	bl	8008fbe <get_fat>
 800a66c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800a66e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a670:	2b01      	cmp	r3, #1
 800a672:	d802      	bhi.n	800a67a <f_open+0x2d6>
 800a674:	2302      	movs	r3, #2
 800a676:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800a67a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a67c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a680:	d102      	bne.n	800a688 <f_open+0x2e4>
 800a682:	2301      	movs	r3, #1
 800a684:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800a688:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a68a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a690:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a694:	2b00      	cmp	r3, #0
 800a696:	d103      	bne.n	800a6a0 <f_open+0x2fc>
 800a698:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a69a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d8e0      	bhi.n	800a662 <f_open+0x2be>
				}
				fp->clust = clst;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a6a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800a6a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d127      	bne.n	800a6fe <f_open+0x35a>
 800a6ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d022      	beq.n	800a6fe <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7fe fc5f 	bl	8008f80 <clust2sect>
 800a6c2:	6478      	str	r0, [r7, #68]	@ 0x44
 800a6c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d103      	bne.n	800a6d2 <f_open+0x32e>
						res = FR_INT_ERR;
 800a6ca:	2302      	movs	r3, #2
 800a6cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800a6d0:	e015      	b.n	800a6fe <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800a6d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a6d4:	0a5a      	lsrs	r2, r3, #9
 800a6d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6d8:	441a      	add	r2, r3
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	7858      	ldrb	r0, [r3, #1]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	6a1a      	ldr	r2, [r3, #32]
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	f7fe f89b 	bl	8008828 <disk_read>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d002      	beq.n	800a6fe <f_open+0x35a>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800a6fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a702:	2b00      	cmp	r3, #0
 800a704:	d002      	beq.n	800a70c <f_open+0x368>
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800a70c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800a710:	4618      	mov	r0, r3
 800a712:	3760      	adds	r7, #96	@ 0x60
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b08e      	sub	sp, #56	@ 0x38
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	60b9      	str	r1, [r7, #8]
 800a722:	607a      	str	r2, [r7, #4]
 800a724:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2200      	movs	r2, #0
 800a72e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f107 0214 	add.w	r2, r7, #20
 800a736:	4611      	mov	r1, r2
 800a738:	4618      	mov	r0, r3
 800a73a:	f7ff fdb7 	bl	800a2ac <validate>
 800a73e:	4603      	mov	r3, r0
 800a740:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800a744:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d107      	bne.n	800a75c <f_read+0x44>
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	7d5b      	ldrb	r3, [r3, #21]
 800a750:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a754:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d002      	beq.n	800a762 <f_read+0x4a>
 800a75c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a760:	e115      	b.n	800a98e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	7d1b      	ldrb	r3, [r3, #20]
 800a766:	f003 0301 	and.w	r3, r3, #1
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d101      	bne.n	800a772 <f_read+0x5a>
 800a76e:	2307      	movs	r3, #7
 800a770:	e10d      	b.n	800a98e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	68da      	ldr	r2, [r3, #12]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	1ad3      	subs	r3, r2, r3
 800a77c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	6a3b      	ldr	r3, [r7, #32]
 800a782:	429a      	cmp	r2, r3
 800a784:	f240 80fe 	bls.w	800a984 <f_read+0x26c>
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800a78c:	e0fa      	b.n	800a984 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	699b      	ldr	r3, [r3, #24]
 800a792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a796:	2b00      	cmp	r3, #0
 800a798:	f040 80c6 	bne.w	800a928 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	0a5b      	lsrs	r3, r3, #9
 800a7a2:	697a      	ldr	r2, [r7, #20]
 800a7a4:	8952      	ldrh	r2, [r2, #10]
 800a7a6:	3a01      	subs	r2, #1
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d12f      	bne.n	800a812 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	699b      	ldr	r3, [r3, #24]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d103      	bne.n	800a7c2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	633b      	str	r3, [r7, #48]	@ 0x30
 800a7c0:	e013      	b.n	800a7ea <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d007      	beq.n	800a7da <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	699b      	ldr	r3, [r3, #24]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	68f8      	ldr	r0, [r7, #12]
 800a7d2:	f7fe fe82 	bl	80094da <clmt_clust>
 800a7d6:	6338      	str	r0, [r7, #48]	@ 0x30
 800a7d8:	e007      	b.n	800a7ea <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	69db      	ldr	r3, [r3, #28]
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	f7fe fbeb 	bl	8008fbe <get_fat>
 800a7e8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d804      	bhi.n	800a7fa <f_read+0xe2>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2202      	movs	r2, #2
 800a7f4:	755a      	strb	r2, [r3, #21]
 800a7f6:	2302      	movs	r3, #2
 800a7f8:	e0c9      	b.n	800a98e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a800:	d104      	bne.n	800a80c <f_read+0xf4>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2201      	movs	r2, #1
 800a806:	755a      	strb	r2, [r3, #21]
 800a808:	2301      	movs	r3, #1
 800a80a:	e0c0      	b.n	800a98e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a810:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800a812:	697a      	ldr	r2, [r7, #20]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	69db      	ldr	r3, [r3, #28]
 800a818:	4619      	mov	r1, r3
 800a81a:	4610      	mov	r0, r2
 800a81c:	f7fe fbb0 	bl	8008f80 <clust2sect>
 800a820:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d104      	bne.n	800a832 <f_read+0x11a>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2202      	movs	r2, #2
 800a82c:	755a      	strb	r2, [r3, #21]
 800a82e:	2302      	movs	r3, #2
 800a830:	e0ad      	b.n	800a98e <f_read+0x276>
			sect += csect;
 800a832:	69ba      	ldr	r2, [r7, #24]
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	4413      	add	r3, r2
 800a838:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	0a5b      	lsrs	r3, r3, #9
 800a83e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800a840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a842:	2b00      	cmp	r3, #0
 800a844:	d039      	beq.n	800a8ba <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800a846:	69fa      	ldr	r2, [r7, #28]
 800a848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a84a:	4413      	add	r3, r2
 800a84c:	697a      	ldr	r2, [r7, #20]
 800a84e:	8952      	ldrh	r2, [r2, #10]
 800a850:	4293      	cmp	r3, r2
 800a852:	d905      	bls.n	800a860 <f_read+0x148>
					cc = fs->csize - csect;
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	895b      	ldrh	r3, [r3, #10]
 800a858:	461a      	mov	r2, r3
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	1ad3      	subs	r3, r2, r3
 800a85e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	7858      	ldrb	r0, [r3, #1]
 800a864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a866:	69ba      	ldr	r2, [r7, #24]
 800a868:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a86a:	f7fd ffdd 	bl	8008828 <disk_read>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d004      	beq.n	800a87e <f_read+0x166>
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2201      	movs	r2, #1
 800a878:	755a      	strb	r2, [r3, #21]
 800a87a:	2301      	movs	r3, #1
 800a87c:	e087      	b.n	800a98e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	7d1b      	ldrb	r3, [r3, #20]
 800a882:	b25b      	sxtb	r3, r3
 800a884:	2b00      	cmp	r3, #0
 800a886:	da14      	bge.n	800a8b2 <f_read+0x19a>
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	6a1a      	ldr	r2, [r3, #32]
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	1ad3      	subs	r3, r2, r3
 800a890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a892:	429a      	cmp	r2, r3
 800a894:	d90d      	bls.n	800a8b2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6a1a      	ldr	r2, [r3, #32]
 800a89a:	69bb      	ldr	r3, [r7, #24]
 800a89c:	1ad3      	subs	r3, r2, r3
 800a89e:	025b      	lsls	r3, r3, #9
 800a8a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8a2:	18d0      	adds	r0, r2, r3
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	3330      	adds	r3, #48	@ 0x30
 800a8a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	f7fe f89c 	bl	80089ea <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800a8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8b4:	025b      	lsls	r3, r3, #9
 800a8b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800a8b8:	e050      	b.n	800a95c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6a1b      	ldr	r3, [r3, #32]
 800a8be:	69ba      	ldr	r2, [r7, #24]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d02e      	beq.n	800a922 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	7d1b      	ldrb	r3, [r3, #20]
 800a8c8:	b25b      	sxtb	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	da18      	bge.n	800a900 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	7858      	ldrb	r0, [r3, #1]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6a1a      	ldr	r2, [r3, #32]
 800a8dc:	2301      	movs	r3, #1
 800a8de:	f7fd ffc3 	bl	8008868 <disk_write>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d004      	beq.n	800a8f2 <f_read+0x1da>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	755a      	strb	r2, [r3, #21]
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e04d      	b.n	800a98e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	7d1b      	ldrb	r3, [r3, #20]
 800a8f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	7858      	ldrb	r0, [r3, #1]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a90a:	2301      	movs	r3, #1
 800a90c:	69ba      	ldr	r2, [r7, #24]
 800a90e:	f7fd ff8b 	bl	8008828 <disk_read>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d004      	beq.n	800a922 <f_read+0x20a>
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2201      	movs	r2, #1
 800a91c:	755a      	strb	r2, [r3, #21]
 800a91e:	2301      	movs	r3, #1
 800a920:	e035      	b.n	800a98e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	69ba      	ldr	r2, [r7, #24]
 800a926:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a930:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800a934:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800a936:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d901      	bls.n	800a942 <f_read+0x22a>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a950:	4413      	add	r3, r2
 800a952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a954:	4619      	mov	r1, r3
 800a956:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a958:	f7fe f847 	bl	80089ea <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800a95c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a95e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a960:	4413      	add	r3, r2
 800a962:	627b      	str	r3, [r7, #36]	@ 0x24
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	699a      	ldr	r2, [r3, #24]
 800a968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a96a:	441a      	add	r2, r3
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	619a      	str	r2, [r3, #24]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a976:	441a      	add	r2, r3
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	601a      	str	r2, [r3, #0]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a980:	1ad3      	subs	r3, r2, r3
 800a982:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	f47f af01 	bne.w	800a78e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3738      	adds	r7, #56	@ 0x38
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b086      	sub	sp, #24
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f107 0208 	add.w	r2, r7, #8
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7ff fc80 	bl	800a2ac <validate>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a9b0:	7dfb      	ldrb	r3, [r7, #23]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d168      	bne.n	800aa88 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	7d1b      	ldrb	r3, [r3, #20]
 800a9ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d062      	beq.n	800aa88 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	7d1b      	ldrb	r3, [r3, #20]
 800a9c6:	b25b      	sxtb	r3, r3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	da15      	bge.n	800a9f8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	7858      	ldrb	r0, [r3, #1]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a1a      	ldr	r2, [r3, #32]
 800a9da:	2301      	movs	r3, #1
 800a9dc:	f7fd ff44 	bl	8008868 <disk_write>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d001      	beq.n	800a9ea <f_sync+0x54>
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e04f      	b.n	800aa8a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	7d1b      	ldrb	r3, [r3, #20]
 800a9ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a9f2:	b2da      	uxtb	r2, r3
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a9f8:	f7fd fd1a 	bl	8008430 <get_fattime>
 800a9fc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa04:	4619      	mov	r1, r3
 800aa06:	4610      	mov	r0, r2
 800aa08:	f7fe fa1e 	bl	8008e48 <move_window>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800aa10:	7dfb      	ldrb	r3, [r7, #23]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d138      	bne.n	800aa88 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa1a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	330b      	adds	r3, #11
 800aa20:	781a      	ldrb	r2, [r3, #0]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	330b      	adds	r3, #11
 800aa26:	f042 0220 	orr.w	r2, r2, #32
 800aa2a:	b2d2      	uxtb	r2, r2
 800aa2c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6818      	ldr	r0, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	461a      	mov	r2, r3
 800aa38:	68f9      	ldr	r1, [r7, #12]
 800aa3a:	f7fe ff28 	bl	800988e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f103 021c 	add.w	r2, r3, #28
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	4619      	mov	r1, r3
 800aa4a:	4610      	mov	r0, r2
 800aa4c:	f7fd ffa1 	bl	8008992 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	3316      	adds	r3, #22
 800aa54:	6939      	ldr	r1, [r7, #16]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7fd ff9b 	bl	8008992 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	3312      	adds	r3, #18
 800aa60:	2100      	movs	r1, #0
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fd ff7a 	bl	800895c <st_word>
					fs->wflag = 1;
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	4618      	mov	r0, r3
 800aa72:	f7fe fa17 	bl	8008ea4 <sync_fs>
 800aa76:	4603      	mov	r3, r0
 800aa78:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	7d1b      	ldrb	r3, [r3, #20]
 800aa7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa82:	b2da      	uxtb	r2, r3
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3718      	adds	r7, #24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}

0800aa92 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800aa92:	b580      	push	{r7, lr}
 800aa94:	b084      	sub	sp, #16
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7ff ff7b 	bl	800a996 <f_sync>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d118      	bne.n	800aadc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f107 0208 	add.w	r2, r7, #8
 800aab0:	4611      	mov	r1, r2
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7ff fbfa 	bl	800a2ac <validate>
 800aab8:	4603      	mov	r3, r0
 800aaba:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aabc:	7bfb      	ldrb	r3, [r7, #15]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d10c      	bne.n	800aadc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	4618      	mov	r0, r3
 800aac8:	f7fe f91a 	bl	8008d00 <dec_lock>
 800aacc:	4603      	mov	r3, r0
 800aace:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800aad0:	7bfb      	ldrb	r3, [r7, #15]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d102      	bne.n	800aadc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2200      	movs	r2, #0
 800aada:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b09e      	sub	sp, #120	@ 0x78
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	673b      	str	r3, [r7, #112]	@ 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800aaf2:	f107 010c 	add.w	r1, r7, #12
 800aaf6:	1d3b      	adds	r3, r7, #4
 800aaf8:	2202      	movs	r2, #2
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7ff f98a 	bl	8009e14 <find_volume>
 800ab00:	4603      	mov	r3, r0
 800ab02:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
	dj.obj.fs = fs;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 800ab0a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f040 808e 	bne.w	800ac30 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ab1a:	4611      	mov	r1, r2
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7ff f86d 	bl	8009bfc <follow_path>
 800ab22:	4603      	mov	r3, r0
 800ab24:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800ab28:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d108      	bne.n	800ab42 <f_unlink+0x5c>
 800ab30:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ab34:	2102      	movs	r1, #2
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fd ffd6 	bl	8008ae8 <chk_lock>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 800ab42:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d172      	bne.n	800ac30 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800ab4a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800ab4e:	b25b      	sxtb	r3, r3
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	da03      	bge.n	800ab5c <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800ab54:	2306      	movs	r3, #6
 800ab56:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800ab5a:	e008      	b.n	800ab6e <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 800ab5c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800ab60:	f003 0301 	and.w	r3, r3, #1
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d002      	beq.n	800ab6e <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800ab68:	2307      	movs	r3, #7
 800ab6a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				}
			}
			if (res == FR_OK) {
 800ab6e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d134      	bne.n	800abe0 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7fe fe67 	bl	8009850 <ld_clust>
 800ab82:	6738      	str	r0, [r7, #112]	@ 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800ab84:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800ab88:	f003 0310 	and.w	r3, r3, #16
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d027      	beq.n	800abe0 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 800ab94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab96:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800ab98:	f107 0310 	add.w	r3, r7, #16
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f7fe fccf 	bl	8009542 <dir_sdi>
 800aba4:	4603      	mov	r3, r0
 800aba6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						if (res == FR_OK) {
 800abaa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d116      	bne.n	800abe0 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 800abb2:	f107 0310 	add.w	r3, r7, #16
 800abb6:	2100      	movs	r1, #0
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fe fe88 	bl	80098ce <dir_read>
 800abbe:	4603      	mov	r3, r0
 800abc0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800abc4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d102      	bne.n	800abd2 <f_unlink+0xec>
 800abcc:	2307      	movs	r3, #7
 800abce:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 800abd2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800abd6:	2b04      	cmp	r3, #4
 800abd8:	d102      	bne.n	800abe0 <f_unlink+0xfa>
 800abda:	2300      	movs	r3, #0
 800abdc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 800abe0:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d123      	bne.n	800ac30 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800abe8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800abec:	4618      	mov	r0, r3
 800abee:	f7fe ff52 	bl	8009a96 <dir_remove>
 800abf2:	4603      	mov	r3, r0
 800abf4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800abf8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d10c      	bne.n	800ac1a <f_unlink+0x134>
 800ac00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d009      	beq.n	800ac1a <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800ac06:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800ac0e:	4618      	mov	r0, r3
 800ac10:	f7fe fb66 	bl	80092e0 <remove_chain>
 800ac14:	4603      	mov	r3, r0
 800ac16:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 800ac1a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d106      	bne.n	800ac30 <f_unlink+0x14a>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fe f93d 	bl	8008ea4 <sync_fs>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800ac30:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3778      	adds	r7, #120	@ 0x78
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b087      	sub	sp, #28
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	4613      	mov	r3, r2
 800ac48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ac52:	4b1f      	ldr	r3, [pc, #124]	@ (800acd0 <FATFS_LinkDriverEx+0x94>)
 800ac54:	7a5b      	ldrb	r3, [r3, #9]
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d131      	bne.n	800acc0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ac5c:	4b1c      	ldr	r3, [pc, #112]	@ (800acd0 <FATFS_LinkDriverEx+0x94>)
 800ac5e:	7a5b      	ldrb	r3, [r3, #9]
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	461a      	mov	r2, r3
 800ac64:	4b1a      	ldr	r3, [pc, #104]	@ (800acd0 <FATFS_LinkDriverEx+0x94>)
 800ac66:	2100      	movs	r1, #0
 800ac68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ac6a:	4b19      	ldr	r3, [pc, #100]	@ (800acd0 <FATFS_LinkDriverEx+0x94>)
 800ac6c:	7a5b      	ldrb	r3, [r3, #9]
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	4a17      	ldr	r2, [pc, #92]	@ (800acd0 <FATFS_LinkDriverEx+0x94>)
 800ac72:	009b      	lsls	r3, r3, #2
 800ac74:	4413      	add	r3, r2
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ac7a:	4b15      	ldr	r3, [pc, #84]	@ (800acd0 <FATFS_LinkDriverEx+0x94>)
 800ac7c:	7a5b      	ldrb	r3, [r3, #9]
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	461a      	mov	r2, r3
 800ac82:	4b13      	ldr	r3, [pc, #76]	@ (800acd0 <FATFS_LinkDriverEx+0x94>)
 800ac84:	4413      	add	r3, r2
 800ac86:	79fa      	ldrb	r2, [r7, #7]
 800ac88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ac8a:	4b11      	ldr	r3, [pc, #68]	@ (800acd0 <FATFS_LinkDriverEx+0x94>)
 800ac8c:	7a5b      	ldrb	r3, [r3, #9]
 800ac8e:	b2db      	uxtb	r3, r3
 800ac90:	1c5a      	adds	r2, r3, #1
 800ac92:	b2d1      	uxtb	r1, r2
 800ac94:	4a0e      	ldr	r2, [pc, #56]	@ (800acd0 <FATFS_LinkDriverEx+0x94>)
 800ac96:	7251      	strb	r1, [r2, #9]
 800ac98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ac9a:	7dbb      	ldrb	r3, [r7, #22]
 800ac9c:	3330      	adds	r3, #48	@ 0x30
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	3301      	adds	r3, #1
 800aca8:	223a      	movs	r2, #58	@ 0x3a
 800acaa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	3302      	adds	r3, #2
 800acb0:	222f      	movs	r2, #47	@ 0x2f
 800acb2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	3303      	adds	r3, #3
 800acb8:	2200      	movs	r2, #0
 800acba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800acbc:	2300      	movs	r3, #0
 800acbe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800acc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800acc2:	4618      	mov	r0, r3
 800acc4:	371c      	adds	r7, #28
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	200006f0 	.word	0x200006f0

0800acd4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800acde:	2200      	movs	r2, #0
 800ace0:	6839      	ldr	r1, [r7, #0]
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f7ff ffaa 	bl	800ac3c <FATFS_LinkDriverEx>
 800ace8:	4603      	mov	r3, r0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3708      	adds	r7, #8
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
	...

0800acf4 <siprintf>:
 800acf4:	b40e      	push	{r1, r2, r3}
 800acf6:	b510      	push	{r4, lr}
 800acf8:	b09d      	sub	sp, #116	@ 0x74
 800acfa:	ab1f      	add	r3, sp, #124	@ 0x7c
 800acfc:	9002      	str	r0, [sp, #8]
 800acfe:	9006      	str	r0, [sp, #24]
 800ad00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad04:	480a      	ldr	r0, [pc, #40]	@ (800ad30 <siprintf+0x3c>)
 800ad06:	9107      	str	r1, [sp, #28]
 800ad08:	9104      	str	r1, [sp, #16]
 800ad0a:	490a      	ldr	r1, [pc, #40]	@ (800ad34 <siprintf+0x40>)
 800ad0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad10:	9105      	str	r1, [sp, #20]
 800ad12:	2400      	movs	r4, #0
 800ad14:	a902      	add	r1, sp, #8
 800ad16:	6800      	ldr	r0, [r0, #0]
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800ad1c:	f000 f99c 	bl	800b058 <_svfiprintf_r>
 800ad20:	9b02      	ldr	r3, [sp, #8]
 800ad22:	701c      	strb	r4, [r3, #0]
 800ad24:	b01d      	add	sp, #116	@ 0x74
 800ad26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad2a:	b003      	add	sp, #12
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	2000000c 	.word	0x2000000c
 800ad34:	ffff0208 	.word	0xffff0208

0800ad38 <memset>:
 800ad38:	4402      	add	r2, r0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d100      	bne.n	800ad42 <memset+0xa>
 800ad40:	4770      	bx	lr
 800ad42:	f803 1b01 	strb.w	r1, [r3], #1
 800ad46:	e7f9      	b.n	800ad3c <memset+0x4>

0800ad48 <__errno>:
 800ad48:	4b01      	ldr	r3, [pc, #4]	@ (800ad50 <__errno+0x8>)
 800ad4a:	6818      	ldr	r0, [r3, #0]
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	2000000c 	.word	0x2000000c

0800ad54 <__libc_init_array>:
 800ad54:	b570      	push	{r4, r5, r6, lr}
 800ad56:	4d0d      	ldr	r5, [pc, #52]	@ (800ad8c <__libc_init_array+0x38>)
 800ad58:	4c0d      	ldr	r4, [pc, #52]	@ (800ad90 <__libc_init_array+0x3c>)
 800ad5a:	1b64      	subs	r4, r4, r5
 800ad5c:	10a4      	asrs	r4, r4, #2
 800ad5e:	2600      	movs	r6, #0
 800ad60:	42a6      	cmp	r6, r4
 800ad62:	d109      	bne.n	800ad78 <__libc_init_array+0x24>
 800ad64:	4d0b      	ldr	r5, [pc, #44]	@ (800ad94 <__libc_init_array+0x40>)
 800ad66:	4c0c      	ldr	r4, [pc, #48]	@ (800ad98 <__libc_init_array+0x44>)
 800ad68:	f000 fc6c 	bl	800b644 <_init>
 800ad6c:	1b64      	subs	r4, r4, r5
 800ad6e:	10a4      	asrs	r4, r4, #2
 800ad70:	2600      	movs	r6, #0
 800ad72:	42a6      	cmp	r6, r4
 800ad74:	d105      	bne.n	800ad82 <__libc_init_array+0x2e>
 800ad76:	bd70      	pop	{r4, r5, r6, pc}
 800ad78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad7c:	4798      	blx	r3
 800ad7e:	3601      	adds	r6, #1
 800ad80:	e7ee      	b.n	800ad60 <__libc_init_array+0xc>
 800ad82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad86:	4798      	blx	r3
 800ad88:	3601      	adds	r6, #1
 800ad8a:	e7f2      	b.n	800ad72 <__libc_init_array+0x1e>
 800ad8c:	0800ba1c 	.word	0x0800ba1c
 800ad90:	0800ba1c 	.word	0x0800ba1c
 800ad94:	0800ba1c 	.word	0x0800ba1c
 800ad98:	0800ba20 	.word	0x0800ba20

0800ad9c <__retarget_lock_acquire_recursive>:
 800ad9c:	4770      	bx	lr

0800ad9e <__retarget_lock_release_recursive>:
 800ad9e:	4770      	bx	lr

0800ada0 <strcpy>:
 800ada0:	4603      	mov	r3, r0
 800ada2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ada6:	f803 2b01 	strb.w	r2, [r3], #1
 800adaa:	2a00      	cmp	r2, #0
 800adac:	d1f9      	bne.n	800ada2 <strcpy+0x2>
 800adae:	4770      	bx	lr

0800adb0 <_free_r>:
 800adb0:	b538      	push	{r3, r4, r5, lr}
 800adb2:	4605      	mov	r5, r0
 800adb4:	2900      	cmp	r1, #0
 800adb6:	d041      	beq.n	800ae3c <_free_r+0x8c>
 800adb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adbc:	1f0c      	subs	r4, r1, #4
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	bfb8      	it	lt
 800adc2:	18e4      	addlt	r4, r4, r3
 800adc4:	f000 f8e0 	bl	800af88 <__malloc_lock>
 800adc8:	4a1d      	ldr	r2, [pc, #116]	@ (800ae40 <_free_r+0x90>)
 800adca:	6813      	ldr	r3, [r2, #0]
 800adcc:	b933      	cbnz	r3, 800addc <_free_r+0x2c>
 800adce:	6063      	str	r3, [r4, #4]
 800add0:	6014      	str	r4, [r2, #0]
 800add2:	4628      	mov	r0, r5
 800add4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800add8:	f000 b8dc 	b.w	800af94 <__malloc_unlock>
 800addc:	42a3      	cmp	r3, r4
 800adde:	d908      	bls.n	800adf2 <_free_r+0x42>
 800ade0:	6820      	ldr	r0, [r4, #0]
 800ade2:	1821      	adds	r1, r4, r0
 800ade4:	428b      	cmp	r3, r1
 800ade6:	bf01      	itttt	eq
 800ade8:	6819      	ldreq	r1, [r3, #0]
 800adea:	685b      	ldreq	r3, [r3, #4]
 800adec:	1809      	addeq	r1, r1, r0
 800adee:	6021      	streq	r1, [r4, #0]
 800adf0:	e7ed      	b.n	800adce <_free_r+0x1e>
 800adf2:	461a      	mov	r2, r3
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	b10b      	cbz	r3, 800adfc <_free_r+0x4c>
 800adf8:	42a3      	cmp	r3, r4
 800adfa:	d9fa      	bls.n	800adf2 <_free_r+0x42>
 800adfc:	6811      	ldr	r1, [r2, #0]
 800adfe:	1850      	adds	r0, r2, r1
 800ae00:	42a0      	cmp	r0, r4
 800ae02:	d10b      	bne.n	800ae1c <_free_r+0x6c>
 800ae04:	6820      	ldr	r0, [r4, #0]
 800ae06:	4401      	add	r1, r0
 800ae08:	1850      	adds	r0, r2, r1
 800ae0a:	4283      	cmp	r3, r0
 800ae0c:	6011      	str	r1, [r2, #0]
 800ae0e:	d1e0      	bne.n	800add2 <_free_r+0x22>
 800ae10:	6818      	ldr	r0, [r3, #0]
 800ae12:	685b      	ldr	r3, [r3, #4]
 800ae14:	6053      	str	r3, [r2, #4]
 800ae16:	4408      	add	r0, r1
 800ae18:	6010      	str	r0, [r2, #0]
 800ae1a:	e7da      	b.n	800add2 <_free_r+0x22>
 800ae1c:	d902      	bls.n	800ae24 <_free_r+0x74>
 800ae1e:	230c      	movs	r3, #12
 800ae20:	602b      	str	r3, [r5, #0]
 800ae22:	e7d6      	b.n	800add2 <_free_r+0x22>
 800ae24:	6820      	ldr	r0, [r4, #0]
 800ae26:	1821      	adds	r1, r4, r0
 800ae28:	428b      	cmp	r3, r1
 800ae2a:	bf04      	itt	eq
 800ae2c:	6819      	ldreq	r1, [r3, #0]
 800ae2e:	685b      	ldreq	r3, [r3, #4]
 800ae30:	6063      	str	r3, [r4, #4]
 800ae32:	bf04      	itt	eq
 800ae34:	1809      	addeq	r1, r1, r0
 800ae36:	6021      	streq	r1, [r4, #0]
 800ae38:	6054      	str	r4, [r2, #4]
 800ae3a:	e7ca      	b.n	800add2 <_free_r+0x22>
 800ae3c:	bd38      	pop	{r3, r4, r5, pc}
 800ae3e:	bf00      	nop
 800ae40:	20000840 	.word	0x20000840

0800ae44 <sbrk_aligned>:
 800ae44:	b570      	push	{r4, r5, r6, lr}
 800ae46:	4e0f      	ldr	r6, [pc, #60]	@ (800ae84 <sbrk_aligned+0x40>)
 800ae48:	460c      	mov	r4, r1
 800ae4a:	6831      	ldr	r1, [r6, #0]
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	b911      	cbnz	r1, 800ae56 <sbrk_aligned+0x12>
 800ae50:	f000 fba4 	bl	800b59c <_sbrk_r>
 800ae54:	6030      	str	r0, [r6, #0]
 800ae56:	4621      	mov	r1, r4
 800ae58:	4628      	mov	r0, r5
 800ae5a:	f000 fb9f 	bl	800b59c <_sbrk_r>
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	d103      	bne.n	800ae6a <sbrk_aligned+0x26>
 800ae62:	f04f 34ff 	mov.w	r4, #4294967295
 800ae66:	4620      	mov	r0, r4
 800ae68:	bd70      	pop	{r4, r5, r6, pc}
 800ae6a:	1cc4      	adds	r4, r0, #3
 800ae6c:	f024 0403 	bic.w	r4, r4, #3
 800ae70:	42a0      	cmp	r0, r4
 800ae72:	d0f8      	beq.n	800ae66 <sbrk_aligned+0x22>
 800ae74:	1a21      	subs	r1, r4, r0
 800ae76:	4628      	mov	r0, r5
 800ae78:	f000 fb90 	bl	800b59c <_sbrk_r>
 800ae7c:	3001      	adds	r0, #1
 800ae7e:	d1f2      	bne.n	800ae66 <sbrk_aligned+0x22>
 800ae80:	e7ef      	b.n	800ae62 <sbrk_aligned+0x1e>
 800ae82:	bf00      	nop
 800ae84:	2000083c 	.word	0x2000083c

0800ae88 <_malloc_r>:
 800ae88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae8c:	1ccd      	adds	r5, r1, #3
 800ae8e:	f025 0503 	bic.w	r5, r5, #3
 800ae92:	3508      	adds	r5, #8
 800ae94:	2d0c      	cmp	r5, #12
 800ae96:	bf38      	it	cc
 800ae98:	250c      	movcc	r5, #12
 800ae9a:	2d00      	cmp	r5, #0
 800ae9c:	4606      	mov	r6, r0
 800ae9e:	db01      	blt.n	800aea4 <_malloc_r+0x1c>
 800aea0:	42a9      	cmp	r1, r5
 800aea2:	d904      	bls.n	800aeae <_malloc_r+0x26>
 800aea4:	230c      	movs	r3, #12
 800aea6:	6033      	str	r3, [r6, #0]
 800aea8:	2000      	movs	r0, #0
 800aeaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800af84 <_malloc_r+0xfc>
 800aeb2:	f000 f869 	bl	800af88 <__malloc_lock>
 800aeb6:	f8d8 3000 	ldr.w	r3, [r8]
 800aeba:	461c      	mov	r4, r3
 800aebc:	bb44      	cbnz	r4, 800af10 <_malloc_r+0x88>
 800aebe:	4629      	mov	r1, r5
 800aec0:	4630      	mov	r0, r6
 800aec2:	f7ff ffbf 	bl	800ae44 <sbrk_aligned>
 800aec6:	1c43      	adds	r3, r0, #1
 800aec8:	4604      	mov	r4, r0
 800aeca:	d158      	bne.n	800af7e <_malloc_r+0xf6>
 800aecc:	f8d8 4000 	ldr.w	r4, [r8]
 800aed0:	4627      	mov	r7, r4
 800aed2:	2f00      	cmp	r7, #0
 800aed4:	d143      	bne.n	800af5e <_malloc_r+0xd6>
 800aed6:	2c00      	cmp	r4, #0
 800aed8:	d04b      	beq.n	800af72 <_malloc_r+0xea>
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	4639      	mov	r1, r7
 800aede:	4630      	mov	r0, r6
 800aee0:	eb04 0903 	add.w	r9, r4, r3
 800aee4:	f000 fb5a 	bl	800b59c <_sbrk_r>
 800aee8:	4581      	cmp	r9, r0
 800aeea:	d142      	bne.n	800af72 <_malloc_r+0xea>
 800aeec:	6821      	ldr	r1, [r4, #0]
 800aeee:	1a6d      	subs	r5, r5, r1
 800aef0:	4629      	mov	r1, r5
 800aef2:	4630      	mov	r0, r6
 800aef4:	f7ff ffa6 	bl	800ae44 <sbrk_aligned>
 800aef8:	3001      	adds	r0, #1
 800aefa:	d03a      	beq.n	800af72 <_malloc_r+0xea>
 800aefc:	6823      	ldr	r3, [r4, #0]
 800aefe:	442b      	add	r3, r5
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	f8d8 3000 	ldr.w	r3, [r8]
 800af06:	685a      	ldr	r2, [r3, #4]
 800af08:	bb62      	cbnz	r2, 800af64 <_malloc_r+0xdc>
 800af0a:	f8c8 7000 	str.w	r7, [r8]
 800af0e:	e00f      	b.n	800af30 <_malloc_r+0xa8>
 800af10:	6822      	ldr	r2, [r4, #0]
 800af12:	1b52      	subs	r2, r2, r5
 800af14:	d420      	bmi.n	800af58 <_malloc_r+0xd0>
 800af16:	2a0b      	cmp	r2, #11
 800af18:	d917      	bls.n	800af4a <_malloc_r+0xc2>
 800af1a:	1961      	adds	r1, r4, r5
 800af1c:	42a3      	cmp	r3, r4
 800af1e:	6025      	str	r5, [r4, #0]
 800af20:	bf18      	it	ne
 800af22:	6059      	strne	r1, [r3, #4]
 800af24:	6863      	ldr	r3, [r4, #4]
 800af26:	bf08      	it	eq
 800af28:	f8c8 1000 	streq.w	r1, [r8]
 800af2c:	5162      	str	r2, [r4, r5]
 800af2e:	604b      	str	r3, [r1, #4]
 800af30:	4630      	mov	r0, r6
 800af32:	f000 f82f 	bl	800af94 <__malloc_unlock>
 800af36:	f104 000b 	add.w	r0, r4, #11
 800af3a:	1d23      	adds	r3, r4, #4
 800af3c:	f020 0007 	bic.w	r0, r0, #7
 800af40:	1ac2      	subs	r2, r0, r3
 800af42:	bf1c      	itt	ne
 800af44:	1a1b      	subne	r3, r3, r0
 800af46:	50a3      	strne	r3, [r4, r2]
 800af48:	e7af      	b.n	800aeaa <_malloc_r+0x22>
 800af4a:	6862      	ldr	r2, [r4, #4]
 800af4c:	42a3      	cmp	r3, r4
 800af4e:	bf0c      	ite	eq
 800af50:	f8c8 2000 	streq.w	r2, [r8]
 800af54:	605a      	strne	r2, [r3, #4]
 800af56:	e7eb      	b.n	800af30 <_malloc_r+0xa8>
 800af58:	4623      	mov	r3, r4
 800af5a:	6864      	ldr	r4, [r4, #4]
 800af5c:	e7ae      	b.n	800aebc <_malloc_r+0x34>
 800af5e:	463c      	mov	r4, r7
 800af60:	687f      	ldr	r7, [r7, #4]
 800af62:	e7b6      	b.n	800aed2 <_malloc_r+0x4a>
 800af64:	461a      	mov	r2, r3
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	42a3      	cmp	r3, r4
 800af6a:	d1fb      	bne.n	800af64 <_malloc_r+0xdc>
 800af6c:	2300      	movs	r3, #0
 800af6e:	6053      	str	r3, [r2, #4]
 800af70:	e7de      	b.n	800af30 <_malloc_r+0xa8>
 800af72:	230c      	movs	r3, #12
 800af74:	6033      	str	r3, [r6, #0]
 800af76:	4630      	mov	r0, r6
 800af78:	f000 f80c 	bl	800af94 <__malloc_unlock>
 800af7c:	e794      	b.n	800aea8 <_malloc_r+0x20>
 800af7e:	6005      	str	r5, [r0, #0]
 800af80:	e7d6      	b.n	800af30 <_malloc_r+0xa8>
 800af82:	bf00      	nop
 800af84:	20000840 	.word	0x20000840

0800af88 <__malloc_lock>:
 800af88:	4801      	ldr	r0, [pc, #4]	@ (800af90 <__malloc_lock+0x8>)
 800af8a:	f7ff bf07 	b.w	800ad9c <__retarget_lock_acquire_recursive>
 800af8e:	bf00      	nop
 800af90:	20000838 	.word	0x20000838

0800af94 <__malloc_unlock>:
 800af94:	4801      	ldr	r0, [pc, #4]	@ (800af9c <__malloc_unlock+0x8>)
 800af96:	f7ff bf02 	b.w	800ad9e <__retarget_lock_release_recursive>
 800af9a:	bf00      	nop
 800af9c:	20000838 	.word	0x20000838

0800afa0 <__ssputs_r>:
 800afa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa4:	688e      	ldr	r6, [r1, #8]
 800afa6:	461f      	mov	r7, r3
 800afa8:	42be      	cmp	r6, r7
 800afaa:	680b      	ldr	r3, [r1, #0]
 800afac:	4682      	mov	sl, r0
 800afae:	460c      	mov	r4, r1
 800afb0:	4690      	mov	r8, r2
 800afb2:	d82d      	bhi.n	800b010 <__ssputs_r+0x70>
 800afb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800afbc:	d026      	beq.n	800b00c <__ssputs_r+0x6c>
 800afbe:	6965      	ldr	r5, [r4, #20]
 800afc0:	6909      	ldr	r1, [r1, #16]
 800afc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800afc6:	eba3 0901 	sub.w	r9, r3, r1
 800afca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800afce:	1c7b      	adds	r3, r7, #1
 800afd0:	444b      	add	r3, r9
 800afd2:	106d      	asrs	r5, r5, #1
 800afd4:	429d      	cmp	r5, r3
 800afd6:	bf38      	it	cc
 800afd8:	461d      	movcc	r5, r3
 800afda:	0553      	lsls	r3, r2, #21
 800afdc:	d527      	bpl.n	800b02e <__ssputs_r+0x8e>
 800afde:	4629      	mov	r1, r5
 800afe0:	f7ff ff52 	bl	800ae88 <_malloc_r>
 800afe4:	4606      	mov	r6, r0
 800afe6:	b360      	cbz	r0, 800b042 <__ssputs_r+0xa2>
 800afe8:	6921      	ldr	r1, [r4, #16]
 800afea:	464a      	mov	r2, r9
 800afec:	f000 fae6 	bl	800b5bc <memcpy>
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800affa:	81a3      	strh	r3, [r4, #12]
 800affc:	6126      	str	r6, [r4, #16]
 800affe:	6165      	str	r5, [r4, #20]
 800b000:	444e      	add	r6, r9
 800b002:	eba5 0509 	sub.w	r5, r5, r9
 800b006:	6026      	str	r6, [r4, #0]
 800b008:	60a5      	str	r5, [r4, #8]
 800b00a:	463e      	mov	r6, r7
 800b00c:	42be      	cmp	r6, r7
 800b00e:	d900      	bls.n	800b012 <__ssputs_r+0x72>
 800b010:	463e      	mov	r6, r7
 800b012:	6820      	ldr	r0, [r4, #0]
 800b014:	4632      	mov	r2, r6
 800b016:	4641      	mov	r1, r8
 800b018:	f000 faa6 	bl	800b568 <memmove>
 800b01c:	68a3      	ldr	r3, [r4, #8]
 800b01e:	1b9b      	subs	r3, r3, r6
 800b020:	60a3      	str	r3, [r4, #8]
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	4433      	add	r3, r6
 800b026:	6023      	str	r3, [r4, #0]
 800b028:	2000      	movs	r0, #0
 800b02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b02e:	462a      	mov	r2, r5
 800b030:	f000 fad2 	bl	800b5d8 <_realloc_r>
 800b034:	4606      	mov	r6, r0
 800b036:	2800      	cmp	r0, #0
 800b038:	d1e0      	bne.n	800affc <__ssputs_r+0x5c>
 800b03a:	6921      	ldr	r1, [r4, #16]
 800b03c:	4650      	mov	r0, sl
 800b03e:	f7ff feb7 	bl	800adb0 <_free_r>
 800b042:	230c      	movs	r3, #12
 800b044:	f8ca 3000 	str.w	r3, [sl]
 800b048:	89a3      	ldrh	r3, [r4, #12]
 800b04a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b04e:	81a3      	strh	r3, [r4, #12]
 800b050:	f04f 30ff 	mov.w	r0, #4294967295
 800b054:	e7e9      	b.n	800b02a <__ssputs_r+0x8a>
	...

0800b058 <_svfiprintf_r>:
 800b058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b05c:	4698      	mov	r8, r3
 800b05e:	898b      	ldrh	r3, [r1, #12]
 800b060:	061b      	lsls	r3, r3, #24
 800b062:	b09d      	sub	sp, #116	@ 0x74
 800b064:	4607      	mov	r7, r0
 800b066:	460d      	mov	r5, r1
 800b068:	4614      	mov	r4, r2
 800b06a:	d510      	bpl.n	800b08e <_svfiprintf_r+0x36>
 800b06c:	690b      	ldr	r3, [r1, #16]
 800b06e:	b973      	cbnz	r3, 800b08e <_svfiprintf_r+0x36>
 800b070:	2140      	movs	r1, #64	@ 0x40
 800b072:	f7ff ff09 	bl	800ae88 <_malloc_r>
 800b076:	6028      	str	r0, [r5, #0]
 800b078:	6128      	str	r0, [r5, #16]
 800b07a:	b930      	cbnz	r0, 800b08a <_svfiprintf_r+0x32>
 800b07c:	230c      	movs	r3, #12
 800b07e:	603b      	str	r3, [r7, #0]
 800b080:	f04f 30ff 	mov.w	r0, #4294967295
 800b084:	b01d      	add	sp, #116	@ 0x74
 800b086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b08a:	2340      	movs	r3, #64	@ 0x40
 800b08c:	616b      	str	r3, [r5, #20]
 800b08e:	2300      	movs	r3, #0
 800b090:	9309      	str	r3, [sp, #36]	@ 0x24
 800b092:	2320      	movs	r3, #32
 800b094:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b098:	f8cd 800c 	str.w	r8, [sp, #12]
 800b09c:	2330      	movs	r3, #48	@ 0x30
 800b09e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b23c <_svfiprintf_r+0x1e4>
 800b0a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0a6:	f04f 0901 	mov.w	r9, #1
 800b0aa:	4623      	mov	r3, r4
 800b0ac:	469a      	mov	sl, r3
 800b0ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0b2:	b10a      	cbz	r2, 800b0b8 <_svfiprintf_r+0x60>
 800b0b4:	2a25      	cmp	r2, #37	@ 0x25
 800b0b6:	d1f9      	bne.n	800b0ac <_svfiprintf_r+0x54>
 800b0b8:	ebba 0b04 	subs.w	fp, sl, r4
 800b0bc:	d00b      	beq.n	800b0d6 <_svfiprintf_r+0x7e>
 800b0be:	465b      	mov	r3, fp
 800b0c0:	4622      	mov	r2, r4
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	4638      	mov	r0, r7
 800b0c6:	f7ff ff6b 	bl	800afa0 <__ssputs_r>
 800b0ca:	3001      	adds	r0, #1
 800b0cc:	f000 80a7 	beq.w	800b21e <_svfiprintf_r+0x1c6>
 800b0d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0d2:	445a      	add	r2, fp
 800b0d4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f000 809f 	beq.w	800b21e <_svfiprintf_r+0x1c6>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0ea:	f10a 0a01 	add.w	sl, sl, #1
 800b0ee:	9304      	str	r3, [sp, #16]
 800b0f0:	9307      	str	r3, [sp, #28]
 800b0f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0f8:	4654      	mov	r4, sl
 800b0fa:	2205      	movs	r2, #5
 800b0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b100:	484e      	ldr	r0, [pc, #312]	@ (800b23c <_svfiprintf_r+0x1e4>)
 800b102:	f7f5 f87d 	bl	8000200 <memchr>
 800b106:	9a04      	ldr	r2, [sp, #16]
 800b108:	b9d8      	cbnz	r0, 800b142 <_svfiprintf_r+0xea>
 800b10a:	06d0      	lsls	r0, r2, #27
 800b10c:	bf44      	itt	mi
 800b10e:	2320      	movmi	r3, #32
 800b110:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b114:	0711      	lsls	r1, r2, #28
 800b116:	bf44      	itt	mi
 800b118:	232b      	movmi	r3, #43	@ 0x2b
 800b11a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b11e:	f89a 3000 	ldrb.w	r3, [sl]
 800b122:	2b2a      	cmp	r3, #42	@ 0x2a
 800b124:	d015      	beq.n	800b152 <_svfiprintf_r+0xfa>
 800b126:	9a07      	ldr	r2, [sp, #28]
 800b128:	4654      	mov	r4, sl
 800b12a:	2000      	movs	r0, #0
 800b12c:	f04f 0c0a 	mov.w	ip, #10
 800b130:	4621      	mov	r1, r4
 800b132:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b136:	3b30      	subs	r3, #48	@ 0x30
 800b138:	2b09      	cmp	r3, #9
 800b13a:	d94b      	bls.n	800b1d4 <_svfiprintf_r+0x17c>
 800b13c:	b1b0      	cbz	r0, 800b16c <_svfiprintf_r+0x114>
 800b13e:	9207      	str	r2, [sp, #28]
 800b140:	e014      	b.n	800b16c <_svfiprintf_r+0x114>
 800b142:	eba0 0308 	sub.w	r3, r0, r8
 800b146:	fa09 f303 	lsl.w	r3, r9, r3
 800b14a:	4313      	orrs	r3, r2
 800b14c:	9304      	str	r3, [sp, #16]
 800b14e:	46a2      	mov	sl, r4
 800b150:	e7d2      	b.n	800b0f8 <_svfiprintf_r+0xa0>
 800b152:	9b03      	ldr	r3, [sp, #12]
 800b154:	1d19      	adds	r1, r3, #4
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	9103      	str	r1, [sp, #12]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	bfbb      	ittet	lt
 800b15e:	425b      	neglt	r3, r3
 800b160:	f042 0202 	orrlt.w	r2, r2, #2
 800b164:	9307      	strge	r3, [sp, #28]
 800b166:	9307      	strlt	r3, [sp, #28]
 800b168:	bfb8      	it	lt
 800b16a:	9204      	strlt	r2, [sp, #16]
 800b16c:	7823      	ldrb	r3, [r4, #0]
 800b16e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b170:	d10a      	bne.n	800b188 <_svfiprintf_r+0x130>
 800b172:	7863      	ldrb	r3, [r4, #1]
 800b174:	2b2a      	cmp	r3, #42	@ 0x2a
 800b176:	d132      	bne.n	800b1de <_svfiprintf_r+0x186>
 800b178:	9b03      	ldr	r3, [sp, #12]
 800b17a:	1d1a      	adds	r2, r3, #4
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	9203      	str	r2, [sp, #12]
 800b180:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b184:	3402      	adds	r4, #2
 800b186:	9305      	str	r3, [sp, #20]
 800b188:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b24c <_svfiprintf_r+0x1f4>
 800b18c:	7821      	ldrb	r1, [r4, #0]
 800b18e:	2203      	movs	r2, #3
 800b190:	4650      	mov	r0, sl
 800b192:	f7f5 f835 	bl	8000200 <memchr>
 800b196:	b138      	cbz	r0, 800b1a8 <_svfiprintf_r+0x150>
 800b198:	9b04      	ldr	r3, [sp, #16]
 800b19a:	eba0 000a 	sub.w	r0, r0, sl
 800b19e:	2240      	movs	r2, #64	@ 0x40
 800b1a0:	4082      	lsls	r2, r0
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	3401      	adds	r4, #1
 800b1a6:	9304      	str	r3, [sp, #16]
 800b1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1ac:	4824      	ldr	r0, [pc, #144]	@ (800b240 <_svfiprintf_r+0x1e8>)
 800b1ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1b2:	2206      	movs	r2, #6
 800b1b4:	f7f5 f824 	bl	8000200 <memchr>
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	d036      	beq.n	800b22a <_svfiprintf_r+0x1d2>
 800b1bc:	4b21      	ldr	r3, [pc, #132]	@ (800b244 <_svfiprintf_r+0x1ec>)
 800b1be:	bb1b      	cbnz	r3, 800b208 <_svfiprintf_r+0x1b0>
 800b1c0:	9b03      	ldr	r3, [sp, #12]
 800b1c2:	3307      	adds	r3, #7
 800b1c4:	f023 0307 	bic.w	r3, r3, #7
 800b1c8:	3308      	adds	r3, #8
 800b1ca:	9303      	str	r3, [sp, #12]
 800b1cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ce:	4433      	add	r3, r6
 800b1d0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1d2:	e76a      	b.n	800b0aa <_svfiprintf_r+0x52>
 800b1d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1d8:	460c      	mov	r4, r1
 800b1da:	2001      	movs	r0, #1
 800b1dc:	e7a8      	b.n	800b130 <_svfiprintf_r+0xd8>
 800b1de:	2300      	movs	r3, #0
 800b1e0:	3401      	adds	r4, #1
 800b1e2:	9305      	str	r3, [sp, #20]
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	f04f 0c0a 	mov.w	ip, #10
 800b1ea:	4620      	mov	r0, r4
 800b1ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1f0:	3a30      	subs	r2, #48	@ 0x30
 800b1f2:	2a09      	cmp	r2, #9
 800b1f4:	d903      	bls.n	800b1fe <_svfiprintf_r+0x1a6>
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d0c6      	beq.n	800b188 <_svfiprintf_r+0x130>
 800b1fa:	9105      	str	r1, [sp, #20]
 800b1fc:	e7c4      	b.n	800b188 <_svfiprintf_r+0x130>
 800b1fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800b202:	4604      	mov	r4, r0
 800b204:	2301      	movs	r3, #1
 800b206:	e7f0      	b.n	800b1ea <_svfiprintf_r+0x192>
 800b208:	ab03      	add	r3, sp, #12
 800b20a:	9300      	str	r3, [sp, #0]
 800b20c:	462a      	mov	r2, r5
 800b20e:	4b0e      	ldr	r3, [pc, #56]	@ (800b248 <_svfiprintf_r+0x1f0>)
 800b210:	a904      	add	r1, sp, #16
 800b212:	4638      	mov	r0, r7
 800b214:	f3af 8000 	nop.w
 800b218:	1c42      	adds	r2, r0, #1
 800b21a:	4606      	mov	r6, r0
 800b21c:	d1d6      	bne.n	800b1cc <_svfiprintf_r+0x174>
 800b21e:	89ab      	ldrh	r3, [r5, #12]
 800b220:	065b      	lsls	r3, r3, #25
 800b222:	f53f af2d 	bmi.w	800b080 <_svfiprintf_r+0x28>
 800b226:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b228:	e72c      	b.n	800b084 <_svfiprintf_r+0x2c>
 800b22a:	ab03      	add	r3, sp, #12
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	462a      	mov	r2, r5
 800b230:	4b05      	ldr	r3, [pc, #20]	@ (800b248 <_svfiprintf_r+0x1f0>)
 800b232:	a904      	add	r1, sp, #16
 800b234:	4638      	mov	r0, r7
 800b236:	f000 f879 	bl	800b32c <_printf_i>
 800b23a:	e7ed      	b.n	800b218 <_svfiprintf_r+0x1c0>
 800b23c:	0800b9e0 	.word	0x0800b9e0
 800b240:	0800b9ea 	.word	0x0800b9ea
 800b244:	00000000 	.word	0x00000000
 800b248:	0800afa1 	.word	0x0800afa1
 800b24c:	0800b9e6 	.word	0x0800b9e6

0800b250 <_printf_common>:
 800b250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b254:	4616      	mov	r6, r2
 800b256:	4698      	mov	r8, r3
 800b258:	688a      	ldr	r2, [r1, #8]
 800b25a:	690b      	ldr	r3, [r1, #16]
 800b25c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b260:	4293      	cmp	r3, r2
 800b262:	bfb8      	it	lt
 800b264:	4613      	movlt	r3, r2
 800b266:	6033      	str	r3, [r6, #0]
 800b268:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b26c:	4607      	mov	r7, r0
 800b26e:	460c      	mov	r4, r1
 800b270:	b10a      	cbz	r2, 800b276 <_printf_common+0x26>
 800b272:	3301      	adds	r3, #1
 800b274:	6033      	str	r3, [r6, #0]
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	0699      	lsls	r1, r3, #26
 800b27a:	bf42      	ittt	mi
 800b27c:	6833      	ldrmi	r3, [r6, #0]
 800b27e:	3302      	addmi	r3, #2
 800b280:	6033      	strmi	r3, [r6, #0]
 800b282:	6825      	ldr	r5, [r4, #0]
 800b284:	f015 0506 	ands.w	r5, r5, #6
 800b288:	d106      	bne.n	800b298 <_printf_common+0x48>
 800b28a:	f104 0a19 	add.w	sl, r4, #25
 800b28e:	68e3      	ldr	r3, [r4, #12]
 800b290:	6832      	ldr	r2, [r6, #0]
 800b292:	1a9b      	subs	r3, r3, r2
 800b294:	42ab      	cmp	r3, r5
 800b296:	dc26      	bgt.n	800b2e6 <_printf_common+0x96>
 800b298:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b29c:	6822      	ldr	r2, [r4, #0]
 800b29e:	3b00      	subs	r3, #0
 800b2a0:	bf18      	it	ne
 800b2a2:	2301      	movne	r3, #1
 800b2a4:	0692      	lsls	r2, r2, #26
 800b2a6:	d42b      	bmi.n	800b300 <_printf_common+0xb0>
 800b2a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2ac:	4641      	mov	r1, r8
 800b2ae:	4638      	mov	r0, r7
 800b2b0:	47c8      	blx	r9
 800b2b2:	3001      	adds	r0, #1
 800b2b4:	d01e      	beq.n	800b2f4 <_printf_common+0xa4>
 800b2b6:	6823      	ldr	r3, [r4, #0]
 800b2b8:	6922      	ldr	r2, [r4, #16]
 800b2ba:	f003 0306 	and.w	r3, r3, #6
 800b2be:	2b04      	cmp	r3, #4
 800b2c0:	bf02      	ittt	eq
 800b2c2:	68e5      	ldreq	r5, [r4, #12]
 800b2c4:	6833      	ldreq	r3, [r6, #0]
 800b2c6:	1aed      	subeq	r5, r5, r3
 800b2c8:	68a3      	ldr	r3, [r4, #8]
 800b2ca:	bf0c      	ite	eq
 800b2cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2d0:	2500      	movne	r5, #0
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	bfc4      	itt	gt
 800b2d6:	1a9b      	subgt	r3, r3, r2
 800b2d8:	18ed      	addgt	r5, r5, r3
 800b2da:	2600      	movs	r6, #0
 800b2dc:	341a      	adds	r4, #26
 800b2de:	42b5      	cmp	r5, r6
 800b2e0:	d11a      	bne.n	800b318 <_printf_common+0xc8>
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	e008      	b.n	800b2f8 <_printf_common+0xa8>
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	4652      	mov	r2, sl
 800b2ea:	4641      	mov	r1, r8
 800b2ec:	4638      	mov	r0, r7
 800b2ee:	47c8      	blx	r9
 800b2f0:	3001      	adds	r0, #1
 800b2f2:	d103      	bne.n	800b2fc <_printf_common+0xac>
 800b2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2fc:	3501      	adds	r5, #1
 800b2fe:	e7c6      	b.n	800b28e <_printf_common+0x3e>
 800b300:	18e1      	adds	r1, r4, r3
 800b302:	1c5a      	adds	r2, r3, #1
 800b304:	2030      	movs	r0, #48	@ 0x30
 800b306:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b30a:	4422      	add	r2, r4
 800b30c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b310:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b314:	3302      	adds	r3, #2
 800b316:	e7c7      	b.n	800b2a8 <_printf_common+0x58>
 800b318:	2301      	movs	r3, #1
 800b31a:	4622      	mov	r2, r4
 800b31c:	4641      	mov	r1, r8
 800b31e:	4638      	mov	r0, r7
 800b320:	47c8      	blx	r9
 800b322:	3001      	adds	r0, #1
 800b324:	d0e6      	beq.n	800b2f4 <_printf_common+0xa4>
 800b326:	3601      	adds	r6, #1
 800b328:	e7d9      	b.n	800b2de <_printf_common+0x8e>
	...

0800b32c <_printf_i>:
 800b32c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b330:	7e0f      	ldrb	r7, [r1, #24]
 800b332:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b334:	2f78      	cmp	r7, #120	@ 0x78
 800b336:	4691      	mov	r9, r2
 800b338:	4680      	mov	r8, r0
 800b33a:	460c      	mov	r4, r1
 800b33c:	469a      	mov	sl, r3
 800b33e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b342:	d807      	bhi.n	800b354 <_printf_i+0x28>
 800b344:	2f62      	cmp	r7, #98	@ 0x62
 800b346:	d80a      	bhi.n	800b35e <_printf_i+0x32>
 800b348:	2f00      	cmp	r7, #0
 800b34a:	f000 80d1 	beq.w	800b4f0 <_printf_i+0x1c4>
 800b34e:	2f58      	cmp	r7, #88	@ 0x58
 800b350:	f000 80b8 	beq.w	800b4c4 <_printf_i+0x198>
 800b354:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b358:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b35c:	e03a      	b.n	800b3d4 <_printf_i+0xa8>
 800b35e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b362:	2b15      	cmp	r3, #21
 800b364:	d8f6      	bhi.n	800b354 <_printf_i+0x28>
 800b366:	a101      	add	r1, pc, #4	@ (adr r1, 800b36c <_printf_i+0x40>)
 800b368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b36c:	0800b3c5 	.word	0x0800b3c5
 800b370:	0800b3d9 	.word	0x0800b3d9
 800b374:	0800b355 	.word	0x0800b355
 800b378:	0800b355 	.word	0x0800b355
 800b37c:	0800b355 	.word	0x0800b355
 800b380:	0800b355 	.word	0x0800b355
 800b384:	0800b3d9 	.word	0x0800b3d9
 800b388:	0800b355 	.word	0x0800b355
 800b38c:	0800b355 	.word	0x0800b355
 800b390:	0800b355 	.word	0x0800b355
 800b394:	0800b355 	.word	0x0800b355
 800b398:	0800b4d7 	.word	0x0800b4d7
 800b39c:	0800b403 	.word	0x0800b403
 800b3a0:	0800b491 	.word	0x0800b491
 800b3a4:	0800b355 	.word	0x0800b355
 800b3a8:	0800b355 	.word	0x0800b355
 800b3ac:	0800b4f9 	.word	0x0800b4f9
 800b3b0:	0800b355 	.word	0x0800b355
 800b3b4:	0800b403 	.word	0x0800b403
 800b3b8:	0800b355 	.word	0x0800b355
 800b3bc:	0800b355 	.word	0x0800b355
 800b3c0:	0800b499 	.word	0x0800b499
 800b3c4:	6833      	ldr	r3, [r6, #0]
 800b3c6:	1d1a      	adds	r2, r3, #4
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	6032      	str	r2, [r6, #0]
 800b3cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e09c      	b.n	800b512 <_printf_i+0x1e6>
 800b3d8:	6833      	ldr	r3, [r6, #0]
 800b3da:	6820      	ldr	r0, [r4, #0]
 800b3dc:	1d19      	adds	r1, r3, #4
 800b3de:	6031      	str	r1, [r6, #0]
 800b3e0:	0606      	lsls	r6, r0, #24
 800b3e2:	d501      	bpl.n	800b3e8 <_printf_i+0xbc>
 800b3e4:	681d      	ldr	r5, [r3, #0]
 800b3e6:	e003      	b.n	800b3f0 <_printf_i+0xc4>
 800b3e8:	0645      	lsls	r5, r0, #25
 800b3ea:	d5fb      	bpl.n	800b3e4 <_printf_i+0xb8>
 800b3ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3f0:	2d00      	cmp	r5, #0
 800b3f2:	da03      	bge.n	800b3fc <_printf_i+0xd0>
 800b3f4:	232d      	movs	r3, #45	@ 0x2d
 800b3f6:	426d      	negs	r5, r5
 800b3f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3fc:	4858      	ldr	r0, [pc, #352]	@ (800b560 <_printf_i+0x234>)
 800b3fe:	230a      	movs	r3, #10
 800b400:	e011      	b.n	800b426 <_printf_i+0xfa>
 800b402:	6821      	ldr	r1, [r4, #0]
 800b404:	6833      	ldr	r3, [r6, #0]
 800b406:	0608      	lsls	r0, r1, #24
 800b408:	f853 5b04 	ldr.w	r5, [r3], #4
 800b40c:	d402      	bmi.n	800b414 <_printf_i+0xe8>
 800b40e:	0649      	lsls	r1, r1, #25
 800b410:	bf48      	it	mi
 800b412:	b2ad      	uxthmi	r5, r5
 800b414:	2f6f      	cmp	r7, #111	@ 0x6f
 800b416:	4852      	ldr	r0, [pc, #328]	@ (800b560 <_printf_i+0x234>)
 800b418:	6033      	str	r3, [r6, #0]
 800b41a:	bf14      	ite	ne
 800b41c:	230a      	movne	r3, #10
 800b41e:	2308      	moveq	r3, #8
 800b420:	2100      	movs	r1, #0
 800b422:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b426:	6866      	ldr	r6, [r4, #4]
 800b428:	60a6      	str	r6, [r4, #8]
 800b42a:	2e00      	cmp	r6, #0
 800b42c:	db05      	blt.n	800b43a <_printf_i+0x10e>
 800b42e:	6821      	ldr	r1, [r4, #0]
 800b430:	432e      	orrs	r6, r5
 800b432:	f021 0104 	bic.w	r1, r1, #4
 800b436:	6021      	str	r1, [r4, #0]
 800b438:	d04b      	beq.n	800b4d2 <_printf_i+0x1a6>
 800b43a:	4616      	mov	r6, r2
 800b43c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b440:	fb03 5711 	mls	r7, r3, r1, r5
 800b444:	5dc7      	ldrb	r7, [r0, r7]
 800b446:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b44a:	462f      	mov	r7, r5
 800b44c:	42bb      	cmp	r3, r7
 800b44e:	460d      	mov	r5, r1
 800b450:	d9f4      	bls.n	800b43c <_printf_i+0x110>
 800b452:	2b08      	cmp	r3, #8
 800b454:	d10b      	bne.n	800b46e <_printf_i+0x142>
 800b456:	6823      	ldr	r3, [r4, #0]
 800b458:	07df      	lsls	r7, r3, #31
 800b45a:	d508      	bpl.n	800b46e <_printf_i+0x142>
 800b45c:	6923      	ldr	r3, [r4, #16]
 800b45e:	6861      	ldr	r1, [r4, #4]
 800b460:	4299      	cmp	r1, r3
 800b462:	bfde      	ittt	le
 800b464:	2330      	movle	r3, #48	@ 0x30
 800b466:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b46a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b46e:	1b92      	subs	r2, r2, r6
 800b470:	6122      	str	r2, [r4, #16]
 800b472:	f8cd a000 	str.w	sl, [sp]
 800b476:	464b      	mov	r3, r9
 800b478:	aa03      	add	r2, sp, #12
 800b47a:	4621      	mov	r1, r4
 800b47c:	4640      	mov	r0, r8
 800b47e:	f7ff fee7 	bl	800b250 <_printf_common>
 800b482:	3001      	adds	r0, #1
 800b484:	d14a      	bne.n	800b51c <_printf_i+0x1f0>
 800b486:	f04f 30ff 	mov.w	r0, #4294967295
 800b48a:	b004      	add	sp, #16
 800b48c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b490:	6823      	ldr	r3, [r4, #0]
 800b492:	f043 0320 	orr.w	r3, r3, #32
 800b496:	6023      	str	r3, [r4, #0]
 800b498:	4832      	ldr	r0, [pc, #200]	@ (800b564 <_printf_i+0x238>)
 800b49a:	2778      	movs	r7, #120	@ 0x78
 800b49c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4a0:	6823      	ldr	r3, [r4, #0]
 800b4a2:	6831      	ldr	r1, [r6, #0]
 800b4a4:	061f      	lsls	r7, r3, #24
 800b4a6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4aa:	d402      	bmi.n	800b4b2 <_printf_i+0x186>
 800b4ac:	065f      	lsls	r7, r3, #25
 800b4ae:	bf48      	it	mi
 800b4b0:	b2ad      	uxthmi	r5, r5
 800b4b2:	6031      	str	r1, [r6, #0]
 800b4b4:	07d9      	lsls	r1, r3, #31
 800b4b6:	bf44      	itt	mi
 800b4b8:	f043 0320 	orrmi.w	r3, r3, #32
 800b4bc:	6023      	strmi	r3, [r4, #0]
 800b4be:	b11d      	cbz	r5, 800b4c8 <_printf_i+0x19c>
 800b4c0:	2310      	movs	r3, #16
 800b4c2:	e7ad      	b.n	800b420 <_printf_i+0xf4>
 800b4c4:	4826      	ldr	r0, [pc, #152]	@ (800b560 <_printf_i+0x234>)
 800b4c6:	e7e9      	b.n	800b49c <_printf_i+0x170>
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	f023 0320 	bic.w	r3, r3, #32
 800b4ce:	6023      	str	r3, [r4, #0]
 800b4d0:	e7f6      	b.n	800b4c0 <_printf_i+0x194>
 800b4d2:	4616      	mov	r6, r2
 800b4d4:	e7bd      	b.n	800b452 <_printf_i+0x126>
 800b4d6:	6833      	ldr	r3, [r6, #0]
 800b4d8:	6825      	ldr	r5, [r4, #0]
 800b4da:	6961      	ldr	r1, [r4, #20]
 800b4dc:	1d18      	adds	r0, r3, #4
 800b4de:	6030      	str	r0, [r6, #0]
 800b4e0:	062e      	lsls	r6, r5, #24
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	d501      	bpl.n	800b4ea <_printf_i+0x1be>
 800b4e6:	6019      	str	r1, [r3, #0]
 800b4e8:	e002      	b.n	800b4f0 <_printf_i+0x1c4>
 800b4ea:	0668      	lsls	r0, r5, #25
 800b4ec:	d5fb      	bpl.n	800b4e6 <_printf_i+0x1ba>
 800b4ee:	8019      	strh	r1, [r3, #0]
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	6123      	str	r3, [r4, #16]
 800b4f4:	4616      	mov	r6, r2
 800b4f6:	e7bc      	b.n	800b472 <_printf_i+0x146>
 800b4f8:	6833      	ldr	r3, [r6, #0]
 800b4fa:	1d1a      	adds	r2, r3, #4
 800b4fc:	6032      	str	r2, [r6, #0]
 800b4fe:	681e      	ldr	r6, [r3, #0]
 800b500:	6862      	ldr	r2, [r4, #4]
 800b502:	2100      	movs	r1, #0
 800b504:	4630      	mov	r0, r6
 800b506:	f7f4 fe7b 	bl	8000200 <memchr>
 800b50a:	b108      	cbz	r0, 800b510 <_printf_i+0x1e4>
 800b50c:	1b80      	subs	r0, r0, r6
 800b50e:	6060      	str	r0, [r4, #4]
 800b510:	6863      	ldr	r3, [r4, #4]
 800b512:	6123      	str	r3, [r4, #16]
 800b514:	2300      	movs	r3, #0
 800b516:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b51a:	e7aa      	b.n	800b472 <_printf_i+0x146>
 800b51c:	6923      	ldr	r3, [r4, #16]
 800b51e:	4632      	mov	r2, r6
 800b520:	4649      	mov	r1, r9
 800b522:	4640      	mov	r0, r8
 800b524:	47d0      	blx	sl
 800b526:	3001      	adds	r0, #1
 800b528:	d0ad      	beq.n	800b486 <_printf_i+0x15a>
 800b52a:	6823      	ldr	r3, [r4, #0]
 800b52c:	079b      	lsls	r3, r3, #30
 800b52e:	d413      	bmi.n	800b558 <_printf_i+0x22c>
 800b530:	68e0      	ldr	r0, [r4, #12]
 800b532:	9b03      	ldr	r3, [sp, #12]
 800b534:	4298      	cmp	r0, r3
 800b536:	bfb8      	it	lt
 800b538:	4618      	movlt	r0, r3
 800b53a:	e7a6      	b.n	800b48a <_printf_i+0x15e>
 800b53c:	2301      	movs	r3, #1
 800b53e:	4632      	mov	r2, r6
 800b540:	4649      	mov	r1, r9
 800b542:	4640      	mov	r0, r8
 800b544:	47d0      	blx	sl
 800b546:	3001      	adds	r0, #1
 800b548:	d09d      	beq.n	800b486 <_printf_i+0x15a>
 800b54a:	3501      	adds	r5, #1
 800b54c:	68e3      	ldr	r3, [r4, #12]
 800b54e:	9903      	ldr	r1, [sp, #12]
 800b550:	1a5b      	subs	r3, r3, r1
 800b552:	42ab      	cmp	r3, r5
 800b554:	dcf2      	bgt.n	800b53c <_printf_i+0x210>
 800b556:	e7eb      	b.n	800b530 <_printf_i+0x204>
 800b558:	2500      	movs	r5, #0
 800b55a:	f104 0619 	add.w	r6, r4, #25
 800b55e:	e7f5      	b.n	800b54c <_printf_i+0x220>
 800b560:	0800b9f1 	.word	0x0800b9f1
 800b564:	0800ba02 	.word	0x0800ba02

0800b568 <memmove>:
 800b568:	4288      	cmp	r0, r1
 800b56a:	b510      	push	{r4, lr}
 800b56c:	eb01 0402 	add.w	r4, r1, r2
 800b570:	d902      	bls.n	800b578 <memmove+0x10>
 800b572:	4284      	cmp	r4, r0
 800b574:	4623      	mov	r3, r4
 800b576:	d807      	bhi.n	800b588 <memmove+0x20>
 800b578:	1e43      	subs	r3, r0, #1
 800b57a:	42a1      	cmp	r1, r4
 800b57c:	d008      	beq.n	800b590 <memmove+0x28>
 800b57e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b582:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b586:	e7f8      	b.n	800b57a <memmove+0x12>
 800b588:	4402      	add	r2, r0
 800b58a:	4601      	mov	r1, r0
 800b58c:	428a      	cmp	r2, r1
 800b58e:	d100      	bne.n	800b592 <memmove+0x2a>
 800b590:	bd10      	pop	{r4, pc}
 800b592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b59a:	e7f7      	b.n	800b58c <memmove+0x24>

0800b59c <_sbrk_r>:
 800b59c:	b538      	push	{r3, r4, r5, lr}
 800b59e:	4d06      	ldr	r5, [pc, #24]	@ (800b5b8 <_sbrk_r+0x1c>)
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	4608      	mov	r0, r1
 800b5a6:	602b      	str	r3, [r5, #0]
 800b5a8:	f7f7 fc42 	bl	8002e30 <_sbrk>
 800b5ac:	1c43      	adds	r3, r0, #1
 800b5ae:	d102      	bne.n	800b5b6 <_sbrk_r+0x1a>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	b103      	cbz	r3, 800b5b6 <_sbrk_r+0x1a>
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	bd38      	pop	{r3, r4, r5, pc}
 800b5b8:	20000834 	.word	0x20000834

0800b5bc <memcpy>:
 800b5bc:	440a      	add	r2, r1
 800b5be:	4291      	cmp	r1, r2
 800b5c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5c4:	d100      	bne.n	800b5c8 <memcpy+0xc>
 800b5c6:	4770      	bx	lr
 800b5c8:	b510      	push	{r4, lr}
 800b5ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5d2:	4291      	cmp	r1, r2
 800b5d4:	d1f9      	bne.n	800b5ca <memcpy+0xe>
 800b5d6:	bd10      	pop	{r4, pc}

0800b5d8 <_realloc_r>:
 800b5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5dc:	4607      	mov	r7, r0
 800b5de:	4614      	mov	r4, r2
 800b5e0:	460d      	mov	r5, r1
 800b5e2:	b921      	cbnz	r1, 800b5ee <_realloc_r+0x16>
 800b5e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	f7ff bc4d 	b.w	800ae88 <_malloc_r>
 800b5ee:	b92a      	cbnz	r2, 800b5fc <_realloc_r+0x24>
 800b5f0:	f7ff fbde 	bl	800adb0 <_free_r>
 800b5f4:	4625      	mov	r5, r4
 800b5f6:	4628      	mov	r0, r5
 800b5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5fc:	f000 f81a 	bl	800b634 <_malloc_usable_size_r>
 800b600:	4284      	cmp	r4, r0
 800b602:	4606      	mov	r6, r0
 800b604:	d802      	bhi.n	800b60c <_realloc_r+0x34>
 800b606:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b60a:	d8f4      	bhi.n	800b5f6 <_realloc_r+0x1e>
 800b60c:	4621      	mov	r1, r4
 800b60e:	4638      	mov	r0, r7
 800b610:	f7ff fc3a 	bl	800ae88 <_malloc_r>
 800b614:	4680      	mov	r8, r0
 800b616:	b908      	cbnz	r0, 800b61c <_realloc_r+0x44>
 800b618:	4645      	mov	r5, r8
 800b61a:	e7ec      	b.n	800b5f6 <_realloc_r+0x1e>
 800b61c:	42b4      	cmp	r4, r6
 800b61e:	4622      	mov	r2, r4
 800b620:	4629      	mov	r1, r5
 800b622:	bf28      	it	cs
 800b624:	4632      	movcs	r2, r6
 800b626:	f7ff ffc9 	bl	800b5bc <memcpy>
 800b62a:	4629      	mov	r1, r5
 800b62c:	4638      	mov	r0, r7
 800b62e:	f7ff fbbf 	bl	800adb0 <_free_r>
 800b632:	e7f1      	b.n	800b618 <_realloc_r+0x40>

0800b634 <_malloc_usable_size_r>:
 800b634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b638:	1f18      	subs	r0, r3, #4
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	bfbc      	itt	lt
 800b63e:	580b      	ldrlt	r3, [r1, r0]
 800b640:	18c0      	addlt	r0, r0, r3
 800b642:	4770      	bx	lr

0800b644 <_init>:
 800b644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b646:	bf00      	nop
 800b648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b64a:	bc08      	pop	{r3}
 800b64c:	469e      	mov	lr, r3
 800b64e:	4770      	bx	lr

0800b650 <_fini>:
 800b650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b652:	bf00      	nop
 800b654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b656:	bc08      	pop	{r3}
 800b658:	469e      	mov	lr, r3
 800b65a:	4770      	bx	lr
